
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076e0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000876e0  000876e0  0000f6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008f8  20070000  000876e8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000a254  200708f8  00087fe0  000108f8  2**3
                  ALLOC
  4 .stack        00002004  2007ab4c  00092234  000108f8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108f8  2**0
                  CONTENTS, READONLY
  6 .comment      00000070  00000000  00000000  00010921  2**0
                  CONTENTS, READONLY
  7 .debug_info   000310bf  00000000  00000000  00010991  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00009119  00000000  00000000  00041a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011026  00000000  00000000  0004ab69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001798  00000000  00000000  0005bb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000013f0  00000000  00000000  0005d328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b44d  00000000  00000000  0005e718  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e7d2  00000000  00000000  00079b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00068c2f  00000000  00000000  00098337  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003044  00000000  00000000  00100f68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cb50 	.word	0x2007cb50
   80004:	000811e9 	.word	0x000811e9
   80008:	000811e5 	.word	0x000811e5
   8000c:	000811e5 	.word	0x000811e5
   80010:	000811e5 	.word	0x000811e5
   80014:	000811e5 	.word	0x000811e5
   80018:	000811e5 	.word	0x000811e5
	...
   8002c:	000816b5 	.word	0x000816b5
   80030:	000811e5 	.word	0x000811e5
   80034:	00000000 	.word	0x00000000
   80038:	00081745 	.word	0x00081745
   8003c:	00081781 	.word	0x00081781
   80040:	000811e5 	.word	0x000811e5
   80044:	000811e5 	.word	0x000811e5
   80048:	000811e5 	.word	0x000811e5
   8004c:	000811e5 	.word	0x000811e5
   80050:	000811e5 	.word	0x000811e5
   80054:	000811e5 	.word	0x000811e5
   80058:	000811e5 	.word	0x000811e5
   8005c:	000811e5 	.word	0x000811e5
   80060:	000811e5 	.word	0x000811e5
   80064:	000811e5 	.word	0x000811e5
   80068:	00000000 	.word	0x00000000
   8006c:	00080bf5 	.word	0x00080bf5
   80070:	00080c11 	.word	0x00080c11
   80074:	00080c2d 	.word	0x00080c2d
   80078:	00080c49 	.word	0x00080c49
	...
   80084:	000811e5 	.word	0x000811e5
   80088:	000811e5 	.word	0x000811e5
   8008c:	000811e5 	.word	0x000811e5
   80090:	000811e5 	.word	0x000811e5
   80094:	000811e5 	.word	0x000811e5
   80098:	000811e5 	.word	0x000811e5
   8009c:	000811e5 	.word	0x000811e5
   800a0:	000811e5 	.word	0x000811e5
   800a4:	00000000 	.word	0x00000000
   800a8:	000811e5 	.word	0x000811e5
   800ac:	000811e5 	.word	0x000811e5
   800b0:	000811e5 	.word	0x000811e5
   800b4:	000811e5 	.word	0x000811e5
   800b8:	000811e5 	.word	0x000811e5
   800bc:	000811e5 	.word	0x000811e5
   800c0:	000811e5 	.word	0x000811e5
   800c4:	000811e5 	.word	0x000811e5
   800c8:	000811e5 	.word	0x000811e5
   800cc:	000811e5 	.word	0x000811e5
   800d0:	000811e5 	.word	0x000811e5
   800d4:	000811e5 	.word	0x000811e5
   800d8:	000811e5 	.word	0x000811e5
   800dc:	000811e5 	.word	0x000811e5
   800e0:	000811e5 	.word	0x000811e5
   800e4:	000811e5 	.word	0x000811e5
   800e8:	000811e5 	.word	0x000811e5
   800ec:	000811e5 	.word	0x000811e5
   800f0:	000811e5 	.word	0x000811e5

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	000876e8 	.word	0x000876e8
   80110:	000876eb 	.word	0x000876eb
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	000876e8 	.word	0x000876e8
   8013c:	000876e8 	.word	0x000876e8
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708f8 	.word	0x200708f8
   80164:	00000000 	.word	0x00000000
   80168:	000876e8 	.word	0x000876e8

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	000876e8 	.word	0x000876e8
   80198:	200708fc 	.word	0x200708fc
   8019c:	000876e8 	.word	0x000876e8
   801a0:	00000000 	.word	0x00000000

000801a4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   801a4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   801a6:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   801aa:	f2c0 5001 	movt	r0, #1281	; 0x501
   801ae:	f241 43e9 	movw	r3, #5353	; 0x14e9
   801b2:	f2c0 0308 	movt	r3, #8
   801b6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801b8:	f04f 0000 	mov.w	r0, #0
   801bc:	f04f 013e 	mov.w	r1, #62	; 0x3e
   801c0:	f640 5205 	movw	r2, #3333	; 0xd05
   801c4:	f2c0 0208 	movt	r2, #8
   801c8:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   801ca:	f640 5475 	movw	r4, #3445	; 0xd75
   801ce:	f2c0 0408 	movt	r4, #8
   801d2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   801d4:	2800      	cmp	r0, #0
   801d6:	d0fc      	beq.n	801d2 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   801d8:	f640 5085 	movw	r0, #3461	; 0xd85
   801dc:	f2c0 0008 	movt	r0, #8
   801e0:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   801e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   801e6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   801ea:	f643 7301 	movw	r3, #16129	; 0x3f01
   801ee:	f2c2 030d 	movt	r3, #8205	; 0x200d
   801f2:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   801f4:	f640 5495 	movw	r4, #3477	; 0xd95
   801f8:	f2c0 0408 	movt	r4, #8
   801fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   801fe:	2800      	cmp	r0, #0
   80200:	d0fc      	beq.n	801fc <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80202:	f04f 0010 	mov.w	r0, #16
   80206:	f640 4265 	movw	r2, #3173	; 0xc65
   8020a:	f2c0 0208 	movt	r2, #8
   8020e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80210:	f241 3021 	movw	r0, #4897	; 0x1321
   80214:	f2c0 0008 	movt	r0, #8
   80218:	4780      	blx	r0
   8021a:	bd10      	pop	{r4, pc}

0008021c <delay_init>:

#include "asf.h"
#include "DelayFunctions.h"

int delay_init(void)
{
   8021c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   8021e:	f04f 001b 	mov.w	r0, #27
   80222:	f640 53a5 	movw	r3, #3493	; 0xda5
   80226:	f2c0 0308 	movt	r3, #8
   8022a:	4798      	blx	r3
	tc_init(TC0,0,0);
   8022c:	f04f 0400 	mov.w	r4, #0
   80230:	f2c4 0408 	movt	r4, #16392	; 0x4008
   80234:	4620      	mov	r0, r4
   80236:	f04f 0100 	mov.w	r1, #0
   8023a:	460a      	mov	r2, r1
   8023c:	f241 1301 	movw	r3, #4353	; 0x1101
   80240:	f2c0 0308 	movt	r3, #8
   80244:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80246:	4620      	mov	r0, r4
   80248:	f04f 0100 	mov.w	r1, #0
   8024c:	f241 121d 	movw	r2, #4381	; 0x111d
   80250:	f2c0 0208 	movt	r2, #8
   80254:	4790      	blx	r2
	tc_stop(TC0,0);
   80256:	4620      	mov	r0, r4
   80258:	f04f 0100 	mov.w	r1, #0
   8025c:	f241 1325 	movw	r3, #4389	; 0x1125
   80260:	f2c0 0308 	movt	r3, #8
   80264:	4798      	blx	r3
	return 0;
}
   80266:	f04f 0000 	mov.w	r0, #0
   8026a:	bd10      	pop	{r4, pc}

0008026c <plot_values>:
#include "MatlabPlot.h"
#include "GlobalVariables.h"

uint8_t valuesSet = 0;

void plot_values(void *p){
   8026c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80270:	b085      	sub	sp, #20
	portTickType xLastWakeTime;
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
   80272:	f242 33fd 	movw	r3, #9213	; 0x23fd
   80276:	f2c0 0308 	movt	r3, #8
   8027a:	4798      	blx	r3
   8027c:	9003      	str	r0, [sp, #12]
	xSampleTime = 100;

	while(1){
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   8027e:	f242 799d 	movw	r9, #10141	; 0x279d
   80282:	f2c0 0908 	movt	r9, #8
//
			//valuesSet = 1;
		//}
		//else{
			char matlabStr[10];
			sprintf(matlabStr, "%d", PID);
   80286:	f247 5794 	movw	r7, #30100	; 0x7594
   8028a:	f2c0 0708 	movt	r7, #8
   8028e:	f64a 3832 	movw	r8, #43826	; 0xab32
   80292:	f2c2 0807 	movt	r8, #8199	; 0x2007
   80296:	f643 6675 	movw	r6, #15989	; 0x3e75
   8029a:	f2c0 0608 	movt	r6, #8
			printf("%s\n",matlabStr);
   8029e:	f247 5598 	movw	r5, #30104	; 0x7598
   802a2:	f2c0 0508 	movt	r5, #8
   802a6:	f643 44d5 	movw	r4, #15573	; 0x3cd5
   802aa:	f2c0 0408 	movt	r4, #8
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
	xSampleTime = 100;

	while(1){
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   802ae:	a803      	add	r0, sp, #12
   802b0:	f04f 0164 	mov.w	r1, #100	; 0x64
   802b4:	47c8      	blx	r9
//
			//valuesSet = 1;
		//}
		//else{
			char matlabStr[10];
			sprintf(matlabStr, "%d", PID);
   802b6:	4668      	mov	r0, sp
   802b8:	4639      	mov	r1, r7
   802ba:	f9b8 2000 	ldrsh.w	r2, [r8]
   802be:	47b0      	blx	r6
			printf("%s\n",matlabStr);
   802c0:	4628      	mov	r0, r5
   802c2:	4669      	mov	r1, sp
   802c4:	47a0      	blx	r4
			sprintf(matlabStr, "%d", error);
   802c6:	4668      	mov	r0, sp
   802c8:	4639      	mov	r1, r7
   802ca:	f64a 3238 	movw	r2, #43832	; 0xab38
   802ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   802d2:	f9b2 2000 	ldrsh.w	r2, [r2]
   802d6:	47b0      	blx	r6
			printf("%s\n",matlabStr);
   802d8:	4628      	mov	r0, r5
   802da:	4669      	mov	r1, sp
   802dc:	47a0      	blx	r4
			sprintf(matlabStr, "%d", current_value);
   802de:	4668      	mov	r0, sp
   802e0:	4639      	mov	r1, r7
   802e2:	f64a 3330 	movw	r3, #43824	; 0xab30
   802e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802ea:	881a      	ldrh	r2, [r3, #0]
   802ec:	47b0      	blx	r6
			printf("%s\n",matlabStr);
   802ee:	4628      	mov	r0, r5
   802f0:	4669      	mov	r1, sp
   802f2:	47a0      	blx	r4
   802f4:	e7db      	b.n	802ae <plot_values+0x42>
   802f6:	bf00      	nop

000802f8 <motorshield_setup>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   802f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   802fc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80300:	f44f 7280 	mov.w	r2, #256	; 0x100
   80304:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80306:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8030a:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8030c:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80310:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80314:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   80318:	6101      	str	r1, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8031a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8031e:	6301      	str	r1, [r0, #48]	; 0x30
   80320:	4770      	bx	lr
   80322:	bf00      	nop

00080324 <pid_control>:
uint16_t derivate = 0;


/* PID control */
void pid_control(void *p)
{	
   80324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80328:	b087      	sub	sp, #28
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = 100;		//ms
	xLastWakeTime = xTaskGetTickCount();
   8032a:	f242 33fd 	movw	r3, #9213	; 0x23fd
   8032e:	f2c0 0308 	movt	r3, #8
   80332:	4798      	blx	r3
   80334:	9005      	str	r0, [sp, #20]
	
	while(1)
	{
		vTaskDelayUntil( &xLastWakeTime, xTimeIncrement); /* Wait for the next cycle */
   80336:	a805      	add	r0, sp, #20
   80338:	f04f 0164 	mov.w	r1, #100	; 0x64
   8033c:	f242 729d 	movw	r2, #10141	; 0x279d
   80340:	f2c0 0208 	movt	r2, #8
   80344:	4790      	blx	r2
		
		current_value = sensor_read();
   80346:	f240 6005 	movw	r0, #1541	; 0x605
   8034a:	f2c0 0008 	movt	r0, #8
   8034e:	4780      	blx	r0
   80350:	f64a 3830 	movw	r8, #43824	; 0xab30
   80354:	f2c2 0807 	movt	r8, #8199	; 0x2007
   80358:	f8a8 0000 	strh.w	r0, [r8]
		error = setpoint - current_value;
   8035c:	f240 0910 	movw	r9, #16
   80360:	f2c2 0907 	movt	r9, #8199	; 0x2007
   80364:	f8b9 7000 	ldrh.w	r7, [r9]
   80368:	1a39      	subs	r1, r7, r0
   8036a:	b28f      	uxth	r7, r1
   8036c:	f64a 3438 	movw	r4, #43832	; 0xab38
   80370:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80374:	8027      	strh	r7, [r4, #0]
		
		sum = (sum + prev_error);
   80376:	f640 1518 	movw	r5, #2328	; 0x918
   8037a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8037e:	f9b5 b000 	ldrsh.w	fp, [r5]
   80382:	f64a 3634 	movw	r6, #43828	; 0xab34
   80386:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8038a:	6833      	ldr	r3, [r6, #0]
   8038c:	eb0b 0003 	add.w	r0, fp, r3
   80390:	6030      	str	r0, [r6, #0]
		integral = (sum * (dT/Ti));
   80392:	f240 0220 	movw	r2, #32
   80396:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8039a:	e9d2 8900 	ldrd	r8, r9, [r2]
   8039e:	e9cd 8900 	strd	r8, r9, [sp]
   803a2:	f243 68d1 	movw	r8, #14033	; 0x36d1
   803a6:	f2c0 0808 	movt	r8, #8
   803aa:	47c0      	blx	r8
   803ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
   803b0:	f643 14f1 	movw	r4, #14833	; 0x39f1
   803b4:	f2c0 0408 	movt	r4, #8
   803b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   803bc:	f240 0618 	movw	r6, #24
   803c0:	f2c2 0607 	movt	r6, #8199	; 0x2007
   803c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   803c8:	47a0      	blx	r4
   803ca:	4602      	mov	r2, r0
   803cc:	460b      	mov	r3, r1
   803ce:	f243 769d 	movw	r6, #14237	; 0x379d
   803d2:	f2c0 0608 	movt	r6, #8
   803d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   803da:	47b0      	blx	r6
   803dc:	f643 4a11 	movw	sl, #15377	; 0x3c11
   803e0:	f2c0 0a08 	movt	sl, #8
   803e4:	47d0      	blx	sl
   803e6:	fa1f fc80 	uxth.w	ip, r0
   803ea:	f8cd c008 	str.w	ip, [sp, #8]
   803ee:	f640 1114 	movw	r1, #2324	; 0x914
   803f2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803f6:	8008      	strh	r0, [r1, #0]
		derivate = ((Td/dT) * (error - prev_error));
   803f8:	fa0f f987 	sxth.w	r9, r7
   803fc:	f240 0008 	movw	r0, #8
   80400:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80404:	c803      	ldmia	r0, {r0, r1}
   80406:	e9dd 2300 	ldrd	r2, r3, [sp]
   8040a:	47a0      	blx	r4
   8040c:	e9cd 0100 	strd	r0, r1, [sp]
   80410:	ebcb 0009 	rsb	r0, fp, r9
   80414:	47c0      	blx	r8
   80416:	4602      	mov	r2, r0
   80418:	460b      	mov	r3, r1
   8041a:	e9dd 0100 	ldrd	r0, r1, [sp]
   8041e:	47b0      	blx	r6
   80420:	47d0      	blx	sl
   80422:	b283      	uxth	r3, r0
   80424:	f640 1216 	movw	r2, #2326	; 0x916
   80428:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8042c:	8010      	strh	r0, [r2, #0]
		PID = (Kp* (error + integral + derivate))*100;
   8042e:	9c02      	ldr	r4, [sp, #8]
   80430:	eb09 0104 	add.w	r1, r9, r4
   80434:	18c8      	adds	r0, r1, r3
   80436:	47c0      	blx	r8
   80438:	f240 0300 	movw	r3, #0
   8043c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80440:	e9d3 2300 	ldrd	r2, r3, [r3]
   80444:	47b0      	blx	r6
   80446:	f04f 0200 	mov.w	r2, #0
   8044a:	f04f 0300 	mov.w	r3, #0
   8044e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   80452:	47b0      	blx	r6
   80454:	f643 36c1 	movw	r6, #15297	; 0x3bc1
   80458:	f2c0 0608 	movt	r6, #8
   8045c:	47b0      	blx	r6
   8045e:	f64a 3232 	movw	r2, #43826	; 0xab32
   80462:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80466:	8010      	strh	r0, [r2, #0]
		prev_error = error;
   80468:	802f      	strh	r7, [r5, #0]
		//printf("C: %d, E: %d, P: %d\n", current_value, error, PID);
		
		if(PID > 800)
   8046a:	b207      	sxth	r7, r0
   8046c:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   80470:	dd07      	ble.n	80482 <pid_control+0x15e>
		{
			PID = 800;
   80472:	f64a 3332 	movw	r3, #43826	; 0xab32
   80476:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8047a:	f44f 7648 	mov.w	r6, #800	; 0x320
   8047e:	801e      	strh	r6, [r3, #0]
   80480:	e00e      	b.n	804a0 <pid_control+0x17c>
		}
		if(PID < 0)
   80482:	f64a 3532 	movw	r5, #43826	; 0xab32
   80486:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8048a:	f9b5 0000 	ldrsh.w	r0, [r5]
   8048e:	2800      	cmp	r0, #0
   80490:	da06      	bge.n	804a0 <pid_control+0x17c>
		{
			PID = 0;
   80492:	f64a 3432 	movw	r4, #43826	; 0xab32
   80496:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8049a:	f04f 0100 	mov.w	r1, #0
   8049e:	8021      	strh	r1, [r4, #0]
		}
		pwm_update(PID);
   804a0:	f64a 3232 	movw	r2, #43826	; 0xab32
   804a4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   804a8:	f9b2 0000 	ldrsh.w	r0, [r2]
   804ac:	f240 5761 	movw	r7, #1377	; 0x561
   804b0:	f2c0 0708 	movt	r7, #8
   804b4:	47b8      	blx	r7
		//printf("PID: %d\n", PID);	
	}
   804b6:	e73e      	b.n	80336 <pid_control+0x12>

000804b8 <pwm_setup>:
static pwm_channel_t pwm_channel_instance;			// Define the PWM channel instance in order to configure channel


/* Initialize PWM for pin DAC1 */
void pwm_setup(void)
{
   804b8:	b530      	push	{r4, r5, lr}
   804ba:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);					// Enable the module clock for PWM peripheral
   804bc:	f04f 0024 	mov.w	r0, #36	; 0x24
   804c0:	f640 53a5 	movw	r3, #3493	; 0xda5
   804c4:	f2c0 0308 	movt	r3, #8
   804c8:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);			// Disable channel 0
   804ca:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   804ce:	f2c4 0509 	movt	r5, #16393	; 0x4009
   804d2:	4628      	mov	r0, r5
   804d4:	f04f 0100 	mov.w	r1, #0
   804d8:	f241 02f5 	movw	r2, #4341	; 0x10f5
   804dc:	f2c0 0208 	movt	r2, #8
   804e0:	4790      	blx	r2
	
	pwm_clock_t clock_setting = {					// Setup clock for PWM module
   804e2:	f244 2040 	movw	r0, #16960	; 0x4240
   804e6:	f2c0 000f 	movt	r0, #15
   804ea:	9001      	str	r0, [sp, #4]
   804ec:	f04f 0400 	mov.w	r4, #0
   804f0:	9402      	str	r4, [sp, #8]
   804f2:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   804f6:	f2c0 5101 	movt	r1, #1281	; 0x501
   804fa:	9103      	str	r1, [sp, #12]
		.ul_clka = 1000 * 1000,						// Clock A is configured, frequencey = 1KHz, period = 1000
		.ul_clkb = 0,								// Clock B is not used
		.ul_mck = sysclk_get_cpu_hz()				// System main clock = 48MHz   (eller sysclk_get_cpu_hz() ?), sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   804fc:	4628      	mov	r0, r5
   804fe:	a901      	add	r1, sp, #4
   80500:	f640 734d 	movw	r3, #3917	; 0xf4d
   80504:	f2c0 0308 	movt	r3, #8
   80508:	4798      	blx	r3
	
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;			// Clock A as source clock
   8050a:	f640 111c 	movw	r1, #2332	; 0x91c
   8050e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80512:	f04f 020b 	mov.w	r2, #11
   80516:	604a      	str	r2, [r1, #4]
	pwm_channel_instance.ul_period = 1000;
   80518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8051c:	6108      	str	r0, [r1, #16]
	pwm_channel_instance.ul_duty = 0;
   8051e:	60cc      	str	r4, [r1, #12]
	pwm_channel_instance.channel = PWM_CHANNEL;						// Configure channel 0
   80520:	600c      	str	r4, [r1, #0]
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;				// Period is left-aligned
   80522:	810c      	strh	r4, [r1, #8]
	pwm_channel_instance.polarity = PWM_LOW;						// Output waveform starts at a low level
   80524:	728c      	strb	r4, [r1, #10]
	
	pwm_channel_init(PWM, &pwm_channel_instance);					// Initialize channel instance
   80526:	4628      	mov	r0, r5
   80528:	f640 7299 	movw	r2, #3993	; 0xf99
   8052c:	f2c0 0208 	movt	r2, #8
   80530:	4790      	blx	r2
	pio_set_peripheral(PIOB, PIO_PERIPH_B, PIO_PB16B_PWML0);		// Setup PWM for pin DAC1
   80532:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80536:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8053a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8053e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80542:	f640 1301 	movw	r3, #2305	; 0x901
   80546:	f2c0 0308 	movt	r3, #8
   8054a:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL);							// Enable channel 6
   8054c:	4628      	mov	r0, r5
   8054e:	4621      	mov	r1, r4
   80550:	f241 02e9 	movw	r2, #4329	; 0x10e9
   80554:	f2c0 0208 	movt	r2, #8
   80558:	4790      	blx	r2
}
   8055a:	b005      	add	sp, #20
   8055c:	bd30      	pop	{r4, r5, pc}
   8055e:	bf00      	nop

00080560 <pwm_update>:


/* Update duty cycle */
void pwm_update(int duty_cycle)
{
   80560:	b508      	push	{r3, lr}
   80562:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel_instance, duty_cycle);
   80564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80568:	f2c4 0009 	movt	r0, #16393	; 0x4009
   8056c:	f640 111c 	movw	r1, #2332	; 0x91c
   80570:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80574:	f241 03c5 	movw	r3, #4293	; 0x10c5
   80578:	f2c0 0308 	movt	r3, #8
   8057c:	4798      	blx	r3
   8057e:	bd08      	pop	{r3, pc}

00080580 <adc_setup>:
#include "SensorFunctions.h"


/* Initialize ADC for pin A8 */
void adc_setup(void)
{
   80580:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);							// Enable specified peripheral clock
   80582:	f04f 0025 	mov.w	r0, #37	; 0x25
   80586:	f640 53a5 	movw	r3, #3493	; 0xda5
   8058a:	f2c0 0308 	movt	r3, #8
   8058e:	4798      	blx	r3
	
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);		// Initialize the given ADC with the specified ADC clock and startup time
   80590:	f04f 0400 	mov.w	r4, #0
   80594:	f2c4 040c 	movt	r4, #16396	; 0x400c
   80598:	4620      	mov	r0, r4
   8059a:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   8059e:	f6c0 2103 	movt	r1, #2563	; 0xa03
   805a2:	f244 2240 	movw	r2, #16960	; 0x4240
   805a6:	f2c0 020f 	movt	r2, #15
   805aa:	f04f 0308 	mov.w	r3, #8
   805ae:	f640 0545 	movw	r5, #2117	; 0x845
   805b2:	f2c0 0508 	movt	r5, #8
   805b6:	47a8      	blx	r5
															// sysclk_get_main_hz() is used to get master clock frequency
															// ADC_CLOCK gives the ADC clock frequency
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);	// Configure ADC timing
   805b8:	4620      	mov	r0, r4
   805ba:	f04f 0100 	mov.w	r1, #0
   805be:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   805c2:	f04f 0301 	mov.w	r3, #1
   805c6:	f640 05ad 	movw	r5, #2221	; 0x8ad
   805ca:	f2c0 0508 	movt	r5, #8
   805ce:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);			// Set ADC resolution with 12 bits, 2^12 = 4096 (voltage read converted to number between 0-4095)
   805d0:	4620      	mov	r0, r4
   805d2:	f04f 0100 	mov.w	r1, #0
   805d6:	f640 028d 	movw	r2, #2189	; 0x88d
   805da:	f2c0 0208 	movt	r2, #8
   805de:	4790      	blx	r2
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// Enable specified ADC channel (pin A8)
   805e0:	4620      	mov	r0, r4
   805e2:	f04f 010a 	mov.w	r1, #10
   805e6:	f640 03d5 	movw	r3, #2261	; 0x8d5
   805ea:	f2c0 0308 	movt	r3, #8
   805ee:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// Configure software conversion trigger
   805f0:	4620      	mov	r0, r4
   805f2:	f04f 0100 	mov.w	r1, #0
   805f6:	460a      	mov	r2, r1
   805f8:	f640 039d 	movw	r3, #2205	; 0x89d
   805fc:	f2c0 0308 	movt	r3, #8
   80600:	4798      	blx	r3
   80602:	bd38      	pop	{r3, r4, r5, pc}

00080604 <sensor_read>:
* 45-40cm = 1660
* 40-35cm = 1510
* 35-30cm = 1380	max value
*/
uint16_t sensor_read(void)
{
   80604:	b510      	push	{r4, lr}
	uint16_t distance = 0;	
	
	while(1)
	{	
		adc_start(ADC);
   80606:	f04f 0400 	mov.w	r4, #0
   8060a:	f2c4 040c 	movt	r4, #16396	; 0x400c
   8060e:	4620      	mov	r0, r4
   80610:	f640 03cd 	movw	r3, #2253	; 0x8cd
   80614:	f2c0 0308 	movt	r3, #8
   80618:	4798      	blx	r3
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
   8061a:	4620      	mov	r0, r4
   8061c:	f04f 010a 	mov.w	r1, #10
   80620:	f640 02e1 	movw	r2, #2273	; 0x8e1
   80624:	f2c0 0208 	movt	r2, #8
   80628:	4790      	blx	r2
   8062a:	b280      	uxth	r0, r0
		//printf("sensor: %d\n", sensor_value);
	
		if(sensor_value > 1850)
   8062c:	f240 713a 	movw	r1, #1850	; 0x73a
   80630:	4288      	cmp	r0, r1
   80632:	d815      	bhi.n	80660 <sensor_read+0x5c>
		{
			distance = 30;
		}
		else if(sensor_value < 1850 && sensor_value >= 1760)
   80634:	f5a0 63dc 	sub.w	r3, r0, #1760	; 0x6e0
   80638:	b29a      	uxth	r2, r3
   8063a:	2a59      	cmp	r2, #89	; 0x59
   8063c:	d913      	bls.n	80666 <sensor_read+0x62>
		{
			distance = 35;
		}
		else if(sensor_value < 1760 && sensor_value >= 1660)
   8063e:	f2a0 617c 	subw	r1, r0, #1660	; 0x67c
   80642:	b28b      	uxth	r3, r1
   80644:	2b63      	cmp	r3, #99	; 0x63
   80646:	d911      	bls.n	8066c <sensor_read+0x68>
		{
			distance = 40;
		}
		else if(sensor_value < 1660 && sensor_value >= 1510)
   80648:	f2a0 52e6 	subw	r2, r0, #1510	; 0x5e6
   8064c:	b291      	uxth	r1, r2
   8064e:	2995      	cmp	r1, #149	; 0x95
   80650:	d90f      	bls.n	80672 <sensor_read+0x6e>
* 40-35cm = 1510
* 35-30cm = 1380	max value
*/
uint16_t sensor_read(void)
{
	uint16_t distance = 0;	
   80652:	f240 53e5 	movw	r3, #1509	; 0x5e5
   80656:	4298      	cmp	r0, r3
   80658:	bf94      	ite	ls
   8065a:	2032      	movls	r0, #50	; 0x32
   8065c:	2000      	movhi	r0, #0
   8065e:	bd10      	pop	{r4, pc}
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
		//printf("sensor: %d\n", sensor_value);
	
		if(sensor_value > 1850)
		{
			distance = 30;
   80660:	f04f 001e 	mov.w	r0, #30
   80664:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 1850 && sensor_value >= 1760)
		{
			distance = 35;
   80666:	f04f 0023 	mov.w	r0, #35	; 0x23
   8066a:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 1760 && sensor_value >= 1660)
		{
			distance = 40;
   8066c:	f04f 0028 	mov.w	r0, #40	; 0x28
   80670:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 1660 && sensor_value >= 1510)
		{
			distance = 45;
   80672:	f04f 002d 	mov.w	r0, #45	; 0x2d
		//printf("Sensor value: %d, Distance: %d\n", sensor_value, distance);
		return distance;
		
	}
	
}
   80676:	bd10      	pop	{r4, pc}

00080678 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8067c:	460c      	mov	r4, r1
   8067e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80680:	bb48      	cbnz	r0, 806d6 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   80682:	2a00      	cmp	r2, #0
   80684:	dd2b      	ble.n	806de <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   80686:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80688:	f64a 3644 	movw	r6, #43844	; 0xab44
   8068c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80690:	f64a 353c 	movw	r5, #43836	; 0xab3c
   80694:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80698:	ea6f 0901 	mvn.w	r9, r1
   8069c:	eb07 0009 	add.w	r0, r7, r9
   806a0:	f000 0901 	and.w	r9, r0, #1
   806a4:	6830      	ldr	r0, [r6, #0]
   806a6:	682b      	ldr	r3, [r5, #0]
   806a8:	4798      	blx	r3
		ptr++;
   806aa:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   806ae:	42bc      	cmp	r4, r7
   806b0:	d119      	bne.n	806e6 <_read+0x6e>
   806b2:	e00d      	b.n	806d0 <_read+0x58>
		ptr_get(stdio_base, ptr);
   806b4:	6830      	ldr	r0, [r6, #0]
   806b6:	682b      	ldr	r3, [r5, #0]
   806b8:	4621      	mov	r1, r4
   806ba:	4798      	blx	r3
		ptr++;
   806bc:	f104 0401 	add.w	r4, r4, #1
   806c0:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   806c2:	6830      	ldr	r0, [r6, #0]
   806c4:	682a      	ldr	r2, [r5, #0]
   806c6:	4790      	blx	r2
		ptr++;
   806c8:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   806cc:	42bc      	cmp	r4, r7
   806ce:	d1f1      	bne.n	806b4 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   806d0:	4640      	mov	r0, r8
   806d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   806d6:	f04f 30ff 	mov.w	r0, #4294967295
   806da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   806de:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   806e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   806e6:	f1b9 0f00 	cmp.w	r9, #0
   806ea:	d0e3      	beq.n	806b4 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   806ec:	6830      	ldr	r0, [r6, #0]
   806ee:	682a      	ldr	r2, [r5, #0]
   806f0:	4621      	mov	r1, r4
   806f2:	4790      	blx	r2
		ptr++;
   806f4:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   806f8:	42bc      	cmp	r4, r7
   806fa:	d1db      	bne.n	806b4 <_read+0x3c>
   806fc:	e7e8      	b.n	806d0 <_read+0x58>
   806fe:	bf00      	nop

00080700 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80704:	460d      	mov	r5, r1
   80706:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80708:	f100 30ff 	add.w	r0, r0, #4294967295
   8070c:	2802      	cmp	r0, #2
   8070e:	d824      	bhi.n	8075a <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   80710:	b332      	cbz	r2, 80760 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80712:	f64a 3644 	movw	r6, #43844	; 0xab44
   80716:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8071a:	f64a 3740 	movw	r7, #43840	; 0xab40
   8071e:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80722:	f04f 0400 	mov.w	r4, #0
   80726:	f102 39ff 	add.w	r9, r2, #4294967295
   8072a:	f009 0901 	and.w	r9, r9, #1
   8072e:	6830      	ldr	r0, [r6, #0]
   80730:	683b      	ldr	r3, [r7, #0]
   80732:	5d09      	ldrb	r1, [r1, r4]
   80734:	4798      	blx	r3
   80736:	42a0      	cmp	r0, r4
   80738:	da1a      	bge.n	80770 <_write+0x70>
   8073a:	e014      	b.n	80766 <_write+0x66>
   8073c:	6830      	ldr	r0, [r6, #0]
   8073e:	683b      	ldr	r3, [r7, #0]
   80740:	5d29      	ldrb	r1, [r5, r4]
   80742:	4798      	blx	r3
   80744:	2800      	cmp	r0, #0
   80746:	db0e      	blt.n	80766 <_write+0x66>
			return -1;
		}
		++nChars;
   80748:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8074c:	6830      	ldr	r0, [r6, #0]
   8074e:	683a      	ldr	r2, [r7, #0]
   80750:	5d29      	ldrb	r1, [r5, r4]
   80752:	4790      	blx	r2
   80754:	2800      	cmp	r0, #0
   80756:	da1d      	bge.n	80794 <_write+0x94>
   80758:	e005      	b.n	80766 <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8075a:	f04f 34ff 	mov.w	r4, #4294967295
   8075e:	e004      	b.n	8076a <_write+0x6a>
	}

	for (; len != 0; --len) {
   80760:	f04f 0400 	mov.w	r4, #0
   80764:	e001      	b.n	8076a <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80766:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8076a:	4620      	mov	r0, r4
   8076c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80770:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80774:	45a0      	cmp	r8, r4
   80776:	d0f8      	beq.n	8076a <_write+0x6a>
   80778:	f1b9 0f00 	cmp.w	r9, #0
   8077c:	d0de      	beq.n	8073c <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8077e:	6830      	ldr	r0, [r6, #0]
   80780:	683a      	ldr	r2, [r7, #0]
   80782:	5d29      	ldrb	r1, [r5, r4]
   80784:	4790      	blx	r2
   80786:	2800      	cmp	r0, #0
   80788:	dbed      	blt.n	80766 <_write+0x66>
			return -1;
		}
		++nChars;
   8078a:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8078e:	45a0      	cmp	r8, r4
   80790:	d1d4      	bne.n	8073c <_write+0x3c>
   80792:	e7ea      	b.n	8076a <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80794:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80798:	45a0      	cmp	r8, r4
   8079a:	d1cf      	bne.n	8073c <_write+0x3c>
   8079c:	e7e5      	b.n	8076a <_write+0x6a>
   8079e:	bf00      	nop

000807a0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   807a0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   807a2:	f641 2350 	movw	r3, #6736	; 0x1a50
   807a6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   807aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   807ae:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   807b0:	f04f 000b 	mov.w	r0, #11
   807b4:	f640 54a5 	movw	r4, #3493	; 0xda5
   807b8:	f2c0 0408 	movt	r4, #8
   807bc:	47a0      	blx	r4
   807be:	f04f 000c 	mov.w	r0, #12
   807c2:	47a0      	blx	r4
   807c4:	f04f 000d 	mov.w	r0, #13
   807c8:	47a0      	blx	r4
   807ca:	f04f 000e 	mov.w	r0, #14
   807ce:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   807d0:	f04f 003b 	mov.w	r0, #59	; 0x3b
   807d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807d8:	f640 14d9 	movw	r4, #2521	; 0x9d9
   807dc:	f2c0 0408 	movt	r4, #8
   807e0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   807e2:	f04f 0055 	mov.w	r0, #85	; 0x55
   807e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807ea:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   807ec:	f04f 0056 	mov.w	r0, #86	; 0x56
   807f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807f4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   807f6:	f04f 0068 	mov.w	r0, #104	; 0x68
   807fa:	f04f 0179 	mov.w	r1, #121	; 0x79
   807fe:	f6c2 0100 	movt	r1, #10240	; 0x2800
   80802:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80804:	f04f 005c 	mov.w	r0, #92	; 0x5c
   80808:	f04f 0101 	mov.w	r1, #1
   8080c:	f6c2 0100 	movt	r1, #10240	; 0x2800
   80810:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80812:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80816:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8081a:	f44f 7140 	mov.w	r1, #768	; 0x300
   8081e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80822:	f640 23d9 	movw	r3, #2777	; 0xad9
   80826:	f2c0 0308 	movt	r3, #8
   8082a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8082c:	f04f 002b 	mov.w	r0, #43	; 0x2b
   80830:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80834:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80836:	f04f 002a 	mov.w	r0, #42	; 0x2a
   8083a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8083e:	47a0      	blx	r4
   80840:	bd10      	pop	{r4, pc}
   80842:	bf00      	nop

00080844 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const uint8_t uc_startup)
{
   80844:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80846:	f04f 0401 	mov.w	r4, #1
   8084a:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   8084c:	f04f 0400 	mov.w	r4, #0
   80850:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80852:	f240 2502 	movw	r5, #514	; 0x202
   80856:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8085a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8085e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80862:	6845      	ldr	r5, [r0, #4]
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80864:	ea4f 0242 	mov.w	r2, r2, lsl #1
   80868:	fbb1 f1f2 	udiv	r1, r1, r2
   8086c:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80870:	ea4f 6102 	mov.w	r1, r2, lsl #24
			((uc_startup << ADC_MR_STARTUP_Pos) &
   80874:	ea4f 4303 	mov.w	r3, r3, lsl #16
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80878:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
   8087c:	ea42 4111 	orr.w	r1, r2, r1, lsr #16
   80880:	430d      	orrs	r5, r1
   80882:	6045      	str	r5, [r0, #4]
			((uc_startup << ADC_MR_STARTUP_Pos) &
			ADC_MR_STARTUP_Msk);
	return 0;
}
   80884:	4620      	mov	r0, r4
   80886:	bc30      	pop	{r4, r5}
   80888:	4770      	bx	lr
   8088a:	bf00      	nop

0008088c <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   8088c:	6843      	ldr	r3, [r0, #4]
   8088e:	ea4f 1101 	mov.w	r1, r1, lsl #4
   80892:	f001 0210 	and.w	r2, r1, #16
   80896:	4313      	orrs	r3, r2
   80898:	6043      	str	r3, [r0, #4]
   8089a:	4770      	bx	lr

0008089c <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   8089c:	6843      	ldr	r3, [r0, #4]
   8089e:	4319      	orrs	r1, r3
   808a0:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   808a4:	b2d3      	uxtb	r3, r2
   808a6:	4319      	orrs	r1, r3
   808a8:	6041      	str	r1, [r0, #4]
   808aa:	4770      	bx	lr

000808ac <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   808ac:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   808ae:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   808b0:	4322      	orrs	r2, r4
   808b2:	ea4f 6101 	mov.w	r1, r1, lsl #24
   808b6:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   808ba:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   808bc:	ea4f 7303 	mov.w	r3, r3, lsl #28
   808c0:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   808c4:	430a      	orrs	r2, r1
   808c6:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   808c8:	bc10      	pop	{r4}
   808ca:	4770      	bx	lr

000808cc <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   808cc:	f04f 0302 	mov.w	r3, #2
   808d0:	6003      	str	r3, [r0, #0]
   808d2:	4770      	bx	lr

000808d4 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   808d4:	f04f 0301 	mov.w	r3, #1
   808d8:	fa03 f101 	lsl.w	r1, r3, r1
   808dc:	6101      	str	r1, [r0, #16]
   808de:	4770      	bx	lr

000808e0 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   808e0:	290f      	cmp	r1, #15
   808e2:	d804      	bhi.n	808ee <adc_get_channel_value+0xe>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   808e4:	f101 0114 	add.w	r1, r1, #20
   808e8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   808ec:	4770      	bx	lr
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   808ee:	f04f 0000 	mov.w	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   808f2:	4770      	bx	lr

000808f4 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808f4:	b10a      	cbz	r2, 808fa <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   808f6:	6641      	str	r1, [r0, #100]	; 0x64
   808f8:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808fa:	6601      	str	r1, [r0, #96]	; 0x60
   808fc:	4770      	bx	lr
   808fe:	bf00      	nop

00080900 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80900:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80902:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80906:	d016      	beq.n	80936 <pio_set_peripheral+0x36>
   80908:	d804      	bhi.n	80914 <pio_set_peripheral+0x14>
   8090a:	b1c9      	cbz	r1, 80940 <pio_set_peripheral+0x40>
   8090c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80910:	d115      	bne.n	8093e <pio_set_peripheral+0x3e>
   80912:	e009      	b.n	80928 <pio_set_peripheral+0x28>
   80914:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80918:	d012      	beq.n	80940 <pio_set_peripheral+0x40>
   8091a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8091e:	d00f      	beq.n	80940 <pio_set_peripheral+0x40>
   80920:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80924:	d10b      	bne.n	8093e <pio_set_peripheral+0x3e>
   80926:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80928:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8092a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8092c:	400b      	ands	r3, r1
   8092e:	ea23 0302 	bic.w	r3, r3, r2
   80932:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80934:	e003      	b.n	8093e <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80936:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80938:	ea42 0103 	orr.w	r1, r2, r3
   8093c:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8093e:	6042      	str	r2, [r0, #4]
   80940:	4770      	bx	lr
   80942:	bf00      	nop

00080944 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80944:	6441      	str	r1, [r0, #68]	; 0x44
   80946:	4770      	bx	lr

00080948 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8094a:	4604      	mov	r4, r0
   8094c:	460d      	mov	r5, r1
   8094e:	4616      	mov	r6, r2
   80950:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   80952:	f640 1345 	movw	r3, #2373	; 0x945
   80956:	f2c0 0308 	movt	r3, #8
   8095a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8095c:	4620      	mov	r0, r4
   8095e:	4629      	mov	r1, r5
   80960:	9a06      	ldr	r2, [sp, #24]
   80962:	f640 03f5 	movw	r3, #2293	; 0x8f5
   80966:	f2c0 0308 	movt	r3, #8
   8096a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8096c:	b10f      	cbz	r7, 80972 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   8096e:	6525      	str	r5, [r4, #80]	; 0x50
   80970:	e000      	b.n	80974 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80972:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80974:	b10e      	cbz	r6, 8097a <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   80976:	6325      	str	r5, [r4, #48]	; 0x30
   80978:	e000      	b.n	8097c <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8097a:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8097c:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   8097e:	6025      	str	r5, [r4, #0]
   80980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80982:	bf00      	nop

00080984 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80984:	b570      	push	{r4, r5, r6, lr}
   80986:	4604      	mov	r4, r0
   80988:	460d      	mov	r5, r1
   8098a:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   8098c:	f640 1345 	movw	r3, #2373	; 0x945
   80990:	f2c0 0308 	movt	r3, #8
   80994:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   80996:	4620      	mov	r0, r4
   80998:	4629      	mov	r1, r5
   8099a:	f006 0201 	and.w	r2, r6, #1
   8099e:	f640 03f5 	movw	r3, #2293	; 0x8f5
   809a2:	f2c0 0308 	movt	r3, #8
   809a6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   809a8:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   809ac:	bf14      	ite	ne
   809ae:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   809b0:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   809b2:	f016 0f02 	tst.w	r6, #2
   809b6:	d002      	beq.n	809be <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   809b8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   809bc:	e004      	b.n	809c8 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   809be:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   809c2:	bf18      	it	ne
   809c4:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   809c8:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   809ca:	6025      	str	r5, [r4, #0]
   809cc:	bd70      	pop	{r4, r5, r6, pc}
   809ce:	bf00      	nop

000809d0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   809d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   809d2:	4770      	bx	lr

000809d4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   809d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   809d6:	4770      	bx	lr

000809d8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   809d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   809da:	b083      	sub	sp, #12
   809dc:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   809de:	ea4f 1650 	mov.w	r6, r0, lsr #5
   809e2:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   809e6:	f201 7207 	addw	r2, r1, #1799	; 0x707
   809ea:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   809ee:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   809f2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   809f6:	d042      	beq.n	80a7e <pio_configure_pin+0xa6>
   809f8:	d806      	bhi.n	80a08 <pio_configure_pin+0x30>
   809fa:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   809fe:	d00a      	beq.n	80a16 <pio_configure_pin+0x3e>
   80a00:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a04:	d164      	bne.n	80ad0 <pio_configure_pin+0xf8>
   80a06:	e020      	b.n	80a4a <pio_configure_pin+0x72>
   80a08:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a0c:	d046      	beq.n	80a9c <pio_configure_pin+0xc4>
   80a0e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a12:	d15d      	bne.n	80ad0 <pio_configure_pin+0xf8>
   80a14:	e042      	b.n	80a9c <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80a16:	f000 071f 	and.w	r7, r0, #31
   80a1a:	f04f 0401 	mov.w	r4, #1
   80a1e:	fa04 f707 	lsl.w	r7, r4, r7
   80a22:	4630      	mov	r0, r6
   80a24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a28:	463a      	mov	r2, r7
   80a2a:	f640 1301 	movw	r3, #2305	; 0x901
   80a2e:	f2c0 0308 	movt	r3, #8
   80a32:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80a34:	4630      	mov	r0, r6
   80a36:	4639      	mov	r1, r7
   80a38:	ea05 0204 	and.w	r2, r5, r4
   80a3c:	f640 03f5 	movw	r3, #2293	; 0x8f5
   80a40:	f2c0 0308 	movt	r3, #8
   80a44:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a46:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80a48:	e044      	b.n	80ad4 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a4a:	f000 001f 	and.w	r0, r0, #31
   80a4e:	f04f 0401 	mov.w	r4, #1
   80a52:	fa04 f700 	lsl.w	r7, r4, r0
   80a56:	4630      	mov	r0, r6
   80a58:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a5c:	463a      	mov	r2, r7
   80a5e:	f640 1301 	movw	r3, #2305	; 0x901
   80a62:	f2c0 0308 	movt	r3, #8
   80a66:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80a68:	4630      	mov	r0, r6
   80a6a:	4639      	mov	r1, r7
   80a6c:	ea05 0204 	and.w	r2, r5, r4
   80a70:	f640 03f5 	movw	r3, #2293	; 0x8f5
   80a74:	f2c0 0308 	movt	r3, #8
   80a78:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a7a:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80a7c:	e02a      	b.n	80ad4 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80a7e:	f000 021f 	and.w	r2, r0, #31
   80a82:	f04f 0401 	mov.w	r4, #1
   80a86:	4630      	mov	r0, r6
   80a88:	fa04 f102 	lsl.w	r1, r4, r2
   80a8c:	462a      	mov	r2, r5
   80a8e:	f640 1385 	movw	r3, #2437	; 0x985
   80a92:	f2c0 0308 	movt	r3, #8
   80a96:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a98:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80a9a:	e01b      	b.n	80ad4 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a9c:	f000 021f 	and.w	r2, r0, #31
   80aa0:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80aa4:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80aa8:	ea05 0104 	and.w	r1, r5, r4
   80aac:	9100      	str	r1, [sp, #0]
   80aae:	4630      	mov	r0, r6
   80ab0:	fa04 f102 	lsl.w	r1, r4, r2
   80ab4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80ab8:	bf14      	ite	ne
   80aba:	2200      	movne	r2, #0
   80abc:	2201      	moveq	r2, #1
   80abe:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80ac2:	f640 1549 	movw	r5, #2377	; 0x949
   80ac6:	f2c0 0508 	movt	r5, #8
   80aca:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80acc:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80ace:	e001      	b.n	80ad4 <pio_configure_pin+0xfc>

	default:
		return 0;
   80ad0:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80ad4:	b003      	add	sp, #12
   80ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080ad8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ada:	b083      	sub	sp, #12
   80adc:	4607      	mov	r7, r0
   80ade:	460e      	mov	r6, r1
   80ae0:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80ae2:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80ae6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80aea:	d036      	beq.n	80b5a <pio_configure_pin_group+0x82>
   80aec:	d806      	bhi.n	80afc <pio_configure_pin_group+0x24>
   80aee:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80af2:	d00a      	beq.n	80b0a <pio_configure_pin_group+0x32>
   80af4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80af8:	d14d      	bne.n	80b96 <pio_configure_pin_group+0xbe>
   80afa:	e01a      	b.n	80b32 <pio_configure_pin_group+0x5a>
   80afc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80b00:	d033      	beq.n	80b6a <pio_configure_pin_group+0x92>
   80b02:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80b06:	d146      	bne.n	80b96 <pio_configure_pin_group+0xbe>
   80b08:	e02f      	b.n	80b6a <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80b0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b0e:	4632      	mov	r2, r6
   80b10:	f640 1301 	movw	r3, #2305	; 0x901
   80b14:	f2c0 0308 	movt	r3, #8
   80b18:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80b1a:	4638      	mov	r0, r7
   80b1c:	4631      	mov	r1, r6
   80b1e:	f005 0201 	and.w	r2, r5, #1
   80b22:	f640 03f5 	movw	r3, #2293	; 0x8f5
   80b26:	f2c0 0308 	movt	r3, #8
   80b2a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b2c:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80b30:	e033      	b.n	80b9a <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b32:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b36:	4632      	mov	r2, r6
   80b38:	f640 1301 	movw	r3, #2305	; 0x901
   80b3c:	f2c0 0308 	movt	r3, #8
   80b40:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80b42:	4638      	mov	r0, r7
   80b44:	4631      	mov	r1, r6
   80b46:	f005 0201 	and.w	r2, r5, #1
   80b4a:	f640 03f5 	movw	r3, #2293	; 0x8f5
   80b4e:	f2c0 0308 	movt	r3, #8
   80b52:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b54:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80b58:	e01f      	b.n	80b9a <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80b5a:	f640 1385 	movw	r3, #2437	; 0x985
   80b5e:	f2c0 0308 	movt	r3, #8
   80b62:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b64:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80b68:	e017      	b.n	80b9a <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b6a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80b6e:	f005 0001 	and.w	r0, r5, #1
   80b72:	9000      	str	r0, [sp, #0]
   80b74:	4638      	mov	r0, r7
   80b76:	4631      	mov	r1, r6
   80b78:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b7c:	bf14      	ite	ne
   80b7e:	2200      	movne	r2, #0
   80b80:	2201      	moveq	r2, #1
   80b82:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b86:	f640 1449 	movw	r4, #2377	; 0x949
   80b8a:	f2c0 0408 	movt	r4, #8
   80b8e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80b90:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b94:	e001      	b.n	80b9a <pio_configure_pin_group+0xc2>

	default:
		return 0;
   80b96:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80b9a:	b003      	add	sp, #12
   80b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b9e:	bf00      	nop

00080ba0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80ba2:	4604      	mov	r4, r0
   80ba4:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80ba6:	f640 13d1 	movw	r3, #2513	; 0x9d1
   80baa:	f2c0 0308 	movt	r3, #8
   80bae:	4798      	blx	r3
   80bb0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80bb2:	4620      	mov	r0, r4
   80bb4:	f640 11d5 	movw	r1, #2517	; 0x9d5
   80bb8:	f2c0 0108 	movt	r1, #8
   80bbc:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   80bbe:	4005      	ands	r5, r0
   80bc0:	d014      	beq.n	80bec <pio_handler_process+0x4c>
   80bc2:	4c0b      	ldr	r4, [pc, #44]	; (80bf0 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   80bc4:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80bc6:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   80bca:	42b0      	cmp	r0, r6
   80bcc:	d10a      	bne.n	80be4 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80bce:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80bd2:	4229      	tst	r1, r5
   80bd4:	d006      	beq.n	80be4 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80bd6:	6822      	ldr	r2, [r4, #0]
   80bd8:	4630      	mov	r0, r6
   80bda:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80bdc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80be0:	ea25 0503 	bic.w	r5, r5, r3
   80be4:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80be8:	2d00      	cmp	r5, #0
   80bea:	d1eb      	bne.n	80bc4 <pio_handler_process+0x24>
   80bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80bee:	bf00      	nop
   80bf0:	20070950 	.word	0x20070950

00080bf4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80bf4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80bf6:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80bfa:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80bfe:	f04f 010b 	mov.w	r1, #11
   80c02:	f640 33a1 	movw	r3, #2977	; 0xba1
   80c06:	f2c0 0308 	movt	r3, #8
   80c0a:	4798      	blx	r3
   80c0c:	bd08      	pop	{r3, pc}
   80c0e:	bf00      	nop

00080c10 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80c10:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80c12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80c16:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80c1a:	f04f 010c 	mov.w	r1, #12
   80c1e:	f640 33a1 	movw	r3, #2977	; 0xba1
   80c22:	f2c0 0308 	movt	r3, #8
   80c26:	4798      	blx	r3
   80c28:	bd08      	pop	{r3, pc}
   80c2a:	bf00      	nop

00080c2c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c2c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c2e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80c32:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80c36:	f04f 010d 	mov.w	r1, #13
   80c3a:	f640 33a1 	movw	r3, #2977	; 0xba1
   80c3e:	f2c0 0308 	movt	r3, #8
   80c42:	4798      	blx	r3
   80c44:	bd08      	pop	{r3, pc}
   80c46:	bf00      	nop

00080c48 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80c48:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80c4a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   80c4e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80c52:	f04f 010e 	mov.w	r1, #14
   80c56:	f640 33a1 	movw	r3, #2977	; 0xba1
   80c5a:	f2c0 0308 	movt	r3, #8
   80c5e:	4798      	blx	r3
   80c60:	bd08      	pop	{r3, pc}
   80c62:	bf00      	nop

00080c64 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80c64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c68:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80c6e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80c72:	4308      	orrs	r0, r1
   80c74:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80c76:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80c78:	f010 0f08 	tst.w	r0, #8
   80c7c:	d007      	beq.n	80c8e <pmc_switch_mck_to_pllack+0x2a>
   80c7e:	e010      	b.n	80ca2 <pmc_switch_mck_to_pllack+0x3e>
   80c80:	f100 33ff 	add.w	r3, r0, #4294967295
   80c84:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80c86:	f010 0f08 	tst.w	r0, #8
   80c8a:	d038      	beq.n	80cfe <pmc_switch_mck_to_pllack+0x9a>
   80c8c:	e009      	b.n	80ca2 <pmc_switch_mck_to_pllack+0x3e>
   80c8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80c92:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80c96:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80c9a:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80c9c:	f011 0f08 	tst.w	r1, #8
   80ca0:	d0ee      	beq.n	80c80 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80ca2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80ca6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80caa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80cac:	f022 0303 	bic.w	r3, r2, #3
   80cb0:	f043 0002 	orr.w	r0, r3, #2
   80cb4:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cb6:	6e89      	ldr	r1, [r1, #104]	; 0x68
   80cb8:	f011 0f08 	tst.w	r1, #8
   80cbc:	d009      	beq.n	80cd2 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80cbe:	f04f 0000 	mov.w	r0, #0
   80cc2:	4770      	bx	lr
   80cc4:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cc8:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80cca:	f011 0f08 	tst.w	r1, #8
   80cce:	d013      	beq.n	80cf8 <pmc_switch_mck_to_pllack+0x94>
   80cd0:	e009      	b.n	80ce6 <pmc_switch_mck_to_pllack+0x82>
   80cd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cd6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80cda:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80cde:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80ce0:	f010 0f08 	tst.w	r0, #8
   80ce4:	d0ee      	beq.n	80cc4 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80ce6:	f04f 0000 	mov.w	r0, #0
   80cea:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80cec:	f04f 0001 	mov.w	r0, #1
   80cf0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80cf2:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80cf6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80cf8:	3b01      	subs	r3, #1
   80cfa:	d1f0      	bne.n	80cde <pmc_switch_mck_to_pllack+0x7a>
   80cfc:	e7f9      	b.n	80cf2 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80cfe:	1e58      	subs	r0, r3, #1
   80d00:	d1cb      	bne.n	80c9a <pmc_switch_mck_to_pllack+0x36>
   80d02:	e7f3      	b.n	80cec <pmc_switch_mck_to_pllack+0x88>

00080d04 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80d04:	b188      	cbz	r0, 80d2a <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80d0a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80d0e:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80d10:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80d14:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80d18:	4002      	ands	r2, r0
   80d1a:	f04f 0302 	mov.w	r3, #2
   80d1e:	f2c0 1337 	movt	r3, #311	; 0x137
   80d22:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d26:	6208      	str	r0, [r1, #32]
   80d28:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80d2e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d32:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80d34:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80d38:	f020 0203 	bic.w	r2, r0, #3
   80d3c:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80d40:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80d44:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80d48:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d4c:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80d52:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80d56:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d58:	f013 0f01 	tst.w	r3, #1
   80d5c:	d0fb      	beq.n	80d56 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80d5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80d62:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80d66:	6a08      	ldr	r0, [r1, #32]
   80d68:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80d6c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80d70:	620b      	str	r3, [r1, #32]
   80d72:	4770      	bx	lr

00080d74 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80d74:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80d78:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d7c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d7e:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80d82:	4770      	bx	lr

00080d84 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80d84:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80d88:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80d90:	629a      	str	r2, [r3, #40]	; 0x28
   80d92:	4770      	bx	lr

00080d94 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80d94:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80d98:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d9c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d9e:	f000 0002 	and.w	r0, r0, #2
   80da2:	4770      	bx	lr

00080da4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80da4:	282c      	cmp	r0, #44	; 0x2c
   80da6:	d835      	bhi.n	80e14 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   80da8:	281f      	cmp	r0, #31
   80daa:	d817      	bhi.n	80ddc <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80dac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80db0:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80db4:	698a      	ldr	r2, [r1, #24]
   80db6:	f04f 0301 	mov.w	r3, #1
   80dba:	fa03 f300 	lsl.w	r3, r3, r0
   80dbe:	401a      	ands	r2, r3
   80dc0:	4293      	cmp	r3, r2
   80dc2:	d02a      	beq.n	80e1a <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   80dc4:	f04f 0101 	mov.w	r1, #1
   80dc8:	fa01 f000 	lsl.w	r0, r1, r0
   80dcc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80dd0:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80dd4:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80dd6:	f04f 0000 	mov.w	r0, #0
   80dda:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80ddc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80de0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80de4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   80de8:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80dec:	f04f 0101 	mov.w	r1, #1
   80df0:	fa01 f100 	lsl.w	r1, r1, r0
   80df4:	400a      	ands	r2, r1
   80df6:	4291      	cmp	r1, r2
   80df8:	d012      	beq.n	80e20 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   80dfa:	f04f 0301 	mov.w	r3, #1
   80dfe:	fa03 f000 	lsl.w	r0, r3, r0
   80e02:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80e06:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80e0a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80e0e:	f04f 0000 	mov.w	r0, #0
   80e12:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80e14:	f04f 0001 	mov.w	r0, #1
   80e18:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80e1a:	f04f 0000 	mov.w	r0, #0
   80e1e:	4770      	bx	lr
   80e20:	f04f 0000 	mov.w	r0, #0
}
   80e24:	4770      	bx	lr
   80e26:	bf00      	nop

00080e28 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for SAM3N)
 * or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80e28:	b4f0      	push	{r4, r5, r6, r7}
   80e2a:	b08c      	sub	sp, #48	; 0x30
   80e2c:	4606      	mov	r6, r0
   80e2e:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80e30:	ac01      	add	r4, sp, #4
   80e32:	f247 559c 	movw	r5, #30108	; 0x759c
   80e36:	f2c0 0508 	movt	r5, #8
   80e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80e42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80e4a:	9b01      	ldr	r3, [sp, #4]
   80e4c:	fbb7 f0f3 	udiv	r0, r7, r3
   80e50:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80e54:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80e58:	d952      	bls.n	80f00 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80e5a:	9902      	ldr	r1, [sp, #8]
   80e5c:	fbb7 f2f1 	udiv	r2, r7, r1
   80e60:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80e64:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80e68:	d94f      	bls.n	80f0a <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80e6a:	9b03      	ldr	r3, [sp, #12]
   80e6c:	fbb7 f0f3 	udiv	r0, r7, r3
   80e70:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80e74:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80e78:	d94a      	bls.n	80f10 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80e7a:	9904      	ldr	r1, [sp, #16]
   80e7c:	fbb7 f2f1 	udiv	r2, r7, r1
   80e80:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80e84:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80e88:	d945      	bls.n	80f16 <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80e8a:	9b05      	ldr	r3, [sp, #20]
   80e8c:	fbb7 f0f3 	udiv	r0, r7, r3
   80e90:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80e94:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80e98:	d940      	bls.n	80f1c <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80e9a:	9906      	ldr	r1, [sp, #24]
   80e9c:	fbb7 f2f1 	udiv	r2, r7, r1
   80ea0:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ea4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80ea8:	d93b      	bls.n	80f22 <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80eaa:	9b07      	ldr	r3, [sp, #28]
   80eac:	fbb7 f0f3 	udiv	r0, r7, r3
   80eb0:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80eb4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80eb8:	d936      	bls.n	80f28 <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80eba:	9908      	ldr	r1, [sp, #32]
   80ebc:	fbb7 f2f1 	udiv	r2, r7, r1
   80ec0:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ec4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80ec8:	d931      	bls.n	80f2e <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   80ecc:	fbb7 f0f3 	udiv	r0, r7, r3
   80ed0:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ed4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80ed8:	d92c      	bls.n	80f34 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80eda:	990a      	ldr	r1, [sp, #40]	; 0x28
   80edc:	fbb7 f2f1 	udiv	r2, r7, r1
   80ee0:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ee4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80ee8:	d927      	bls.n	80f3a <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80eec:	fbb7 f0f3 	udiv	r0, r7, r3
   80ef0:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ef4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80ef8:	d922      	bls.n	80f40 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80efa:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80efe:	e022      	b.n	80f46 <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80f00:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   80f04:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   80f08:	e01d      	b.n	80f46 <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   80f0a:	f04f 0201 	mov.w	r2, #1
   80f0e:	e7f9      	b.n	80f04 <pwm_clocks_generate+0xdc>
   80f10:	f04f 0202 	mov.w	r2, #2
   80f14:	e7f6      	b.n	80f04 <pwm_clocks_generate+0xdc>
   80f16:	f04f 0203 	mov.w	r2, #3
   80f1a:	e7f3      	b.n	80f04 <pwm_clocks_generate+0xdc>
   80f1c:	f04f 0204 	mov.w	r2, #4
   80f20:	e7f0      	b.n	80f04 <pwm_clocks_generate+0xdc>
   80f22:	f04f 0205 	mov.w	r2, #5
   80f26:	e7ed      	b.n	80f04 <pwm_clocks_generate+0xdc>
   80f28:	f04f 0206 	mov.w	r2, #6
   80f2c:	e7ea      	b.n	80f04 <pwm_clocks_generate+0xdc>
   80f2e:	f04f 0207 	mov.w	r2, #7
   80f32:	e7e7      	b.n	80f04 <pwm_clocks_generate+0xdc>
   80f34:	f04f 0208 	mov.w	r2, #8
   80f38:	e7e4      	b.n	80f04 <pwm_clocks_generate+0xdc>
   80f3a:	f04f 0209 	mov.w	r2, #9
   80f3e:	e7e1      	b.n	80f04 <pwm_clocks_generate+0xdc>
   80f40:	f04f 020a 	mov.w	r2, #10
   80f44:	e7de      	b.n	80f04 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   80f46:	b00c      	add	sp, #48	; 0x30
   80f48:	bcf0      	pop	{r4, r5, r6, r7}
   80f4a:	4770      	bx	lr

00080f4c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80f4c:	b570      	push	{r4, r5, r6, lr}
   80f4e:	4606      	mov	r6, r0
   80f50:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80f52:	6808      	ldr	r0, [r1, #0]
   80f54:	b158      	cbz	r0, 80f6e <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80f56:	6889      	ldr	r1, [r1, #8]
   80f58:	f640 6329 	movw	r3, #3625	; 0xe29
   80f5c:	f2c0 0308 	movt	r3, #8
   80f60:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   80f62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   80f66:	4288      	cmp	r0, r1
   80f68:	d014      	beq.n	80f94 <pwm_init+0x48>
			return result;
		}

		clock = result;
   80f6a:	4605      	mov	r5, r0
   80f6c:	e001      	b.n	80f72 <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80f6e:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80f72:	6860      	ldr	r0, [r4, #4]
   80f74:	b158      	cbz	r0, 80f8e <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80f76:	68a1      	ldr	r1, [r4, #8]
   80f78:	f640 6229 	movw	r2, #3625	; 0xe29
   80f7c:	f2c0 0208 	movt	r2, #8
   80f80:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   80f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80f86:	4298      	cmp	r0, r3
   80f88:	d004      	beq.n	80f94 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   80f8a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if SAM3N
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80f8e:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80f90:	f04f 0000 	mov.w	r0, #0
}
   80f94:	bd70      	pop	{r4, r5, r6, pc}
   80f96:	bf00      	nop

00080f98 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80f98:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80f9a:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   80f9c:	f04f 0201 	mov.w	r2, #1
   80fa0:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80fa4:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   80fa6:	684c      	ldr	r4, [r1, #4]
   80fa8:	f004 050f 	and.w	r5, r4, #15
   80fac:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80fae:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80fb0:	4326      	orrs	r6, r4
   80fb2:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80fb4:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80fb8:	7d8c      	ldrb	r4, [r1, #22]
   80fba:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80fbe:	7dce      	ldrb	r6, [r1, #23]
   80fc0:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80fc4:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   80fc6:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   80fca:	f103 0510 	add.w	r5, r3, #16
   80fce:	ea4f 1445 	mov.w	r4, r5, lsl #5
   80fd2:	1905      	adds	r5, r0, r4
   80fd4:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80fd6:	68cc      	ldr	r4, [r1, #12]
   80fd8:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80fda:	690c      	ldr	r4, [r1, #16]
   80fdc:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   80fe0:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80fe4:	7d8c      	ldrb	r4, [r1, #22]
   80fe6:	b13c      	cbz	r4, 80ff8 <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80fe8:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80fea:	8b4c      	ldrh	r4, [r1, #26]
   80fec:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80ff0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   80ff4:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   80ff8:	7fcd      	ldrb	r5, [r1, #31]
   80ffa:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   80ffe:	7f8c      	ldrb	r4, [r1, #30]
   81000:	fa04 f403 	lsl.w	r4, r4, r3
   81004:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   81008:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   8100a:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   8100e:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   81012:	f891 4020 	ldrb.w	r4, [r1, #32]
   81016:	fa04 f403 	lsl.w	r4, r4, r3
   8101a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   8101e:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   81020:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81024:	b11c      	cbz	r4, 8102e <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   81026:	6a04      	ldr	r4, [r0, #32]
   81028:	4314      	orrs	r4, r2
   8102a:	6204      	str	r4, [r0, #32]
   8102c:	e003      	b.n	81036 <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8102e:	6a04      	ldr	r4, [r0, #32]
   81030:	ea24 0402 	bic.w	r4, r4, r2
   81034:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81036:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8103a:	2c01      	cmp	r4, #1
   8103c:	d103      	bne.n	81046 <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8103e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81040:	4314      	orrs	r4, r2
   81042:	6684      	str	r4, [r0, #104]	; 0x68
   81044:	e006      	b.n	81054 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   81046:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81048:	2a00      	cmp	r2, #0
   8104a:	bf14      	ite	ne
   8104c:	2400      	movne	r4, #0
   8104e:	f004 0401 	andeq.w	r4, r4, #1
   81052:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81054:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81058:	2c01      	cmp	r4, #1
   8105a:	d104      	bne.n	81066 <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8105c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8105e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   81062:	6682      	str	r2, [r0, #104]	; 0x68
   81064:	e006      	b.n	81074 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   81066:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81068:	0412      	lsls	r2, r2, #16
   8106a:	bf14      	ite	ne
   8106c:	2200      	movne	r2, #0
   8106e:	f004 0201 	andeq.w	r2, r4, #1
   81072:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81074:	2b03      	cmp	r3, #3
   81076:	d80f      	bhi.n	81098 <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   81078:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8107a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   8107e:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81082:	fa02 f203 	lsl.w	r2, r2, r3
   81086:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8108a:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8108e:	fa01 f303 	lsl.w	r3, r1, r3
   81092:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81094:	66c2      	str	r2, [r0, #108]	; 0x6c
   81096:	e010      	b.n	810ba <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   81098:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   8109c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8109e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   810a2:	f04f 02ff 	mov.w	r2, #255	; 0xff
   810a6:	fa02 f203 	lsl.w	r2, r2, r3
   810aa:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   810ae:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   810b2:	fa01 f303 	lsl.w	r3, r1, r3
   810b6:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   810b8:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   810ba:	f04f 0000 	mov.w	r0, #0
   810be:	bc70      	pop	{r4, r5, r6}
   810c0:	4770      	bx	lr
   810c2:	bf00      	nop

000810c4 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   810c4:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   810c6:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   810c8:	690b      	ldr	r3, [r1, #16]
   810ca:	4293      	cmp	r3, r2
   810cc:	d307      	bcc.n	810de <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   810ce:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   810d0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   810d4:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   810d8:	f04f 0000 	mov.w	r0, #0
   810dc:	e001      	b.n	810e2 <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   810de:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   810e2:	bc10      	pop	{r4}
   810e4:	4770      	bx	lr
   810e6:	bf00      	nop

000810e8 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   810e8:	f04f 0301 	mov.w	r3, #1
   810ec:	fa03 f101 	lsl.w	r1, r3, r1
   810f0:	6041      	str	r1, [r0, #4]
   810f2:	4770      	bx	lr

000810f4 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   810f4:	f04f 0301 	mov.w	r3, #1
   810f8:	fa03 f101 	lsl.w	r1, r3, r1
   810fc:	6081      	str	r1, [r0, #8]
   810fe:	4770      	bx	lr

00081100 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   81100:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81102:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81106:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81108:	f04f 0402 	mov.w	r4, #2
   8110c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8110e:	f04f 30ff 	mov.w	r0, #4294967295
   81112:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81114:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81116:	605a      	str	r2, [r3, #4]
}
   81118:	bc10      	pop	{r4}
   8111a:	4770      	bx	lr

0008111c <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   8111c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   81120:	4770      	bx	lr
   81122:	bf00      	nop

00081124 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81124:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81128:	f04f 0302 	mov.w	r3, #2
   8112c:	5043      	str	r3, [r0, r1]
   8112e:	4770      	bx	lr

00081130 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81130:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81132:	f04f 03ac 	mov.w	r3, #172	; 0xac
   81136:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81138:	680a      	ldr	r2, [r1, #0]
   8113a:	684c      	ldr	r4, [r1, #4]
   8113c:	fbb2 f3f4 	udiv	r3, r2, r4
   81140:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81144:	f103 34ff 	add.w	r4, r3, #4294967295
   81148:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8114c:	4294      	cmp	r4, r2
   8114e:	d80c      	bhi.n	8116a <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   81150:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81152:	6889      	ldr	r1, [r1, #8]
   81154:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81156:	f240 2302 	movw	r3, #514	; 0x202
   8115a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8115e:	f04f 0250 	mov.w	r2, #80	; 0x50
   81162:	6002      	str	r2, [r0, #0]

	return 0;
   81164:	f04f 0000 	mov.w	r0, #0
   81168:	e001      	b.n	8116e <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8116a:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8116e:	bc10      	pop	{r4}
   81170:	4770      	bx	lr
   81172:	bf00      	nop

00081174 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81174:	6943      	ldr	r3, [r0, #20]
   81176:	f013 0f02 	tst.w	r3, #2
   8117a:	d003      	beq.n	81184 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8117c:	61c1      	str	r1, [r0, #28]
	return 0;
   8117e:	f04f 0000 	mov.w	r0, #0
   81182:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81184:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81188:	4770      	bx	lr
   8118a:	bf00      	nop

0008118c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8118c:	6943      	ldr	r3, [r0, #20]
   8118e:	f013 0f01 	tst.w	r3, #1
   81192:	d004      	beq.n	8119e <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81194:	6980      	ldr	r0, [r0, #24]
   81196:	7008      	strb	r0, [r1, #0]
	return 0;
   81198:	f04f 0000 	mov.w	r0, #0
   8119c:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8119e:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   811a2:	4770      	bx	lr

000811a4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   811a4:	6943      	ldr	r3, [r0, #20]
   811a6:	f013 0f02 	tst.w	r3, #2
   811aa:	d007      	beq.n	811bc <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   811ac:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   811b0:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   811b4:	61c2      	str	r2, [r0, #28]
	return 0;
   811b6:	f04f 0000 	mov.w	r0, #0
   811ba:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   811bc:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   811c0:	4770      	bx	lr
   811c2:	bf00      	nop

000811c4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   811c4:	6943      	ldr	r3, [r0, #20]
   811c6:	f013 0f01 	tst.w	r3, #1
   811ca:	d008      	beq.n	811de <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   811cc:	6980      	ldr	r0, [r0, #24]
   811ce:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   811d2:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   811d6:	600b      	str	r3, [r1, #0]

	return 0;
   811d8:	f04f 0000 	mov.w	r0, #0
   811dc:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   811de:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   811e2:	4770      	bx	lr

000811e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   811e4:	e7fe      	b.n	811e4 <Dummy_Handler>
   811e6:	bf00      	nop

000811e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   811e8:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   811ea:	f240 0300 	movw	r3, #0
   811ee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   811f2:	f247 62e8 	movw	r2, #30440	; 0x76e8
   811f6:	f2c0 0208 	movt	r2, #8
   811fa:	429a      	cmp	r2, r3
   811fc:	d003      	beq.n	81206 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   811fe:	4840      	ldr	r0, [pc, #256]	; (81300 <Reset_Handler+0x118>)
   81200:	4940      	ldr	r1, [pc, #256]	; (81304 <Reset_Handler+0x11c>)
   81202:	4281      	cmp	r1, r0
   81204:	d304      	bcc.n	81210 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81206:	4b40      	ldr	r3, [pc, #256]	; (81308 <Reset_Handler+0x120>)
   81208:	4a40      	ldr	r2, [pc, #256]	; (8130c <Reset_Handler+0x124>)
   8120a:	429a      	cmp	r2, r3
   8120c:	d325      	bcc.n	8125a <Reset_Handler+0x72>
   8120e:	e042      	b.n	81296 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   81210:	4d3f      	ldr	r5, [pc, #252]	; (81310 <Reset_Handler+0x128>)
   81212:	4c40      	ldr	r4, [pc, #256]	; (81314 <Reset_Handler+0x12c>)
   81214:	1b63      	subs	r3, r4, r5
   81216:	f023 0503 	bic.w	r5, r3, #3
   8121a:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8121e:	f240 0200 	movw	r2, #0
   81222:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81226:	f247 61e8 	movw	r1, #30440	; 0x76e8
   8122a:	f2c0 0108 	movt	r1, #8
   8122e:	f105 0004 	add.w	r0, r5, #4
   81232:	f3c5 0480 	ubfx	r4, r5, #2, #1
   81236:	585d      	ldr	r5, [r3, r1]
   81238:	509d      	str	r5, [r3, r2]
   8123a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8123e:	4283      	cmp	r3, r0
   81240:	d155      	bne.n	812ee <Reset_Handler+0x106>
   81242:	e7e0      	b.n	81206 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   81244:	585d      	ldr	r5, [r3, r1]
   81246:	509d      	str	r5, [r3, r2]
   81248:	f103 0304 	add.w	r3, r3, #4
   8124c:	585c      	ldr	r4, [r3, r1]
   8124e:	509c      	str	r4, [r3, r2]
   81250:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81254:	4283      	cmp	r3, r0
   81256:	d1f5      	bne.n	81244 <Reset_Handler+0x5c>
   81258:	e7d5      	b.n	81206 <Reset_Handler+0x1e>
   8125a:	4d2f      	ldr	r5, [pc, #188]	; (81318 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   8125c:	492f      	ldr	r1, [pc, #188]	; (8131c <Reset_Handler+0x134>)
   8125e:	1b48      	subs	r0, r1, r5
   81260:	f020 0403 	bic.w	r4, r0, #3
   81264:	f640 03f8 	movw	r3, #2296	; 0x8f8
   81268:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8126c:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8126e:	f04f 0100 	mov.w	r1, #0
   81272:	1b50      	subs	r0, r2, r5
   81274:	f1a0 0004 	sub.w	r0, r0, #4
   81278:	f3c0 0480 	ubfx	r4, r0, #2, #1
   8127c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81280:	4295      	cmp	r5, r2
   81282:	d12d      	bne.n	812e0 <Reset_Handler+0xf8>
   81284:	e007      	b.n	81296 <Reset_Handler+0xae>
   81286:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   8128a:	6069      	str	r1, [r5, #4]
   8128c:	f105 0508 	add.w	r5, r5, #8
   81290:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81292:	4295      	cmp	r5, r2
   81294:	d1f7      	bne.n	81286 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81296:	f240 0500 	movw	r5, #0
   8129a:	f2c0 0508 	movt	r5, #8
   8129e:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   812a2:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   812a6:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   812aa:	f2ce 0000 	movt	r0, #57344	; 0xe000
   812ae:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   812b0:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   812b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   812b8:	d207      	bcs.n	812ca <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   812ba:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   812be:	f2ce 0300 	movt	r3, #57344	; 0xe000
   812c2:	689d      	ldr	r5, [r3, #8]
   812c4:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   812c8:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   812ca:	f643 4189 	movw	r1, #15497	; 0x3c89
   812ce:	f2c0 0108 	movt	r1, #8
   812d2:	4788      	blx	r1

	/* Branch to main function */
	main();
   812d4:	f243 3059 	movw	r0, #13145	; 0x3359
   812d8:	f2c0 0008 	movt	r0, #8
   812dc:	4780      	blx	r0
   812de:	e7fe      	b.n	812de <Reset_Handler+0xf6>
   812e0:	2c00      	cmp	r4, #0
   812e2:	d0d0      	beq.n	81286 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   812e4:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   812e8:	4295      	cmp	r5, r2
   812ea:	d1cc      	bne.n	81286 <Reset_Handler+0x9e>
   812ec:	e7d3      	b.n	81296 <Reset_Handler+0xae>
   812ee:	2c00      	cmp	r4, #0
   812f0:	d0a8      	beq.n	81244 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   812f2:	585c      	ldr	r4, [r3, r1]
   812f4:	509c      	str	r4, [r3, r2]
   812f6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   812fa:	4283      	cmp	r3, r0
   812fc:	d1a2      	bne.n	81244 <Reset_Handler+0x5c>
   812fe:	e782      	b.n	81206 <Reset_Handler+0x1e>
   81300:	200708f8 	.word	0x200708f8
   81304:	20070000 	.word	0x20070000
   81308:	2007ab4c 	.word	0x2007ab4c
   8130c:	200708f8 	.word	0x200708f8
   81310:	20070004 	.word	0x20070004
   81314:	200708fb 	.word	0x200708fb
   81318:	200708f4 	.word	0x200708f4
   8131c:	2007ab47 	.word	0x2007ab47

00081320 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81320:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81324:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81328:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8132a:	f000 0103 	and.w	r1, r0, #3
   8132e:	2903      	cmp	r1, #3
   81330:	f200 80b1 	bhi.w	81496 <SystemCoreClockUpdate+0x176>
   81334:	e8df f001 	tbb	[pc, r1]
   81338:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8133c:	f641 2010 	movw	r0, #6672	; 0x1a10
   81340:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81344:	6941      	ldr	r1, [r0, #20]
   81346:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8134a:	f240 0328 	movw	r3, #40	; 0x28
   8134e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81352:	bf14      	ite	ne
   81354:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81358:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8135c:	601a      	str	r2, [r3, #0]
   8135e:	e09a      	b.n	81496 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81360:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81364:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81368:	6a18      	ldr	r0, [r3, #32]
   8136a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   8136e:	d009      	beq.n	81384 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81370:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   81374:	f2c0 03b7 	movt	r3, #183	; 0xb7
   81378:	f240 0228 	movw	r2, #40	; 0x28
   8137c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81380:	6013      	str	r3, [r2, #0]
   81382:	e088      	b.n	81496 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81384:	f44f 6110 	mov.w	r1, #2304	; 0x900
   81388:	f2c0 013d 	movt	r1, #61	; 0x3d
   8138c:	f240 0228 	movw	r2, #40	; 0x28
   81390:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81394:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81396:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8139a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8139e:	6a18      	ldr	r0, [r3, #32]
   813a0:	f000 0170 	and.w	r1, r0, #112	; 0x70
   813a4:	2910      	cmp	r1, #16
   813a6:	d002      	beq.n	813ae <SystemCoreClockUpdate+0x8e>
   813a8:	2920      	cmp	r1, #32
   813aa:	d174      	bne.n	81496 <SystemCoreClockUpdate+0x176>
   813ac:	e009      	b.n	813c2 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   813ae:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   813b2:	f2c0 007a 	movt	r0, #122	; 0x7a
   813b6:	f240 0128 	movw	r1, #40	; 0x28
   813ba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   813be:	6008      	str	r0, [r1, #0]
				break;
   813c0:	e069      	b.n	81496 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   813c2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   813c6:	f2c0 03b7 	movt	r3, #183	; 0xb7
   813ca:	f240 0228 	movw	r2, #40	; 0x28
   813ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813d2:	6013      	str	r3, [r2, #0]
				break;
   813d4:	e05f      	b.n	81496 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   813d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   813da:	f2c4 020e 	movt	r2, #16398	; 0x400e
   813de:	6a13      	ldr	r3, [r2, #32]
   813e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   813e4:	d009      	beq.n	813fa <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   813e6:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   813ea:	f2c0 01b7 	movt	r1, #183	; 0xb7
   813ee:	f240 0228 	movw	r2, #40	; 0x28
   813f2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813f6:	6011      	str	r1, [r2, #0]
   813f8:	e027      	b.n	8144a <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   813fa:	f44f 6010 	mov.w	r0, #2304	; 0x900
   813fe:	f2c0 003d 	movt	r0, #61	; 0x3d
   81402:	f240 0128 	movw	r1, #40	; 0x28
   81406:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8140a:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8140c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   81410:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81414:	6a13      	ldr	r3, [r2, #32]
   81416:	f003 0070 	and.w	r0, r3, #112	; 0x70
   8141a:	2810      	cmp	r0, #16
   8141c:	d002      	beq.n	81424 <SystemCoreClockUpdate+0x104>
   8141e:	2820      	cmp	r0, #32
   81420:	d113      	bne.n	8144a <SystemCoreClockUpdate+0x12a>
   81422:	e009      	b.n	81438 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81424:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81428:	f2c0 037a 	movt	r3, #122	; 0x7a
   8142c:	f240 0028 	movw	r0, #40	; 0x28
   81430:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81434:	6003      	str	r3, [r0, #0]
				break;
   81436:	e008      	b.n	8144a <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81438:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   8143c:	f2c0 01b7 	movt	r1, #183	; 0xb7
   81440:	f240 0228 	movw	r2, #40	; 0x28
   81444:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81448:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8144a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8144e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81452:	6b18      	ldr	r0, [r3, #48]	; 0x30
   81454:	f000 0103 	and.w	r1, r0, #3
   81458:	2902      	cmp	r1, #2
   8145a:	d113      	bne.n	81484 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8145c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   81460:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81464:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81466:	6a89      	ldr	r1, [r1, #40]	; 0x28
   81468:	f240 0328 	movw	r3, #40	; 0x28
   8146c:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81470:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81474:	681a      	ldr	r2, [r3, #0]
   81476:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8147a:	b2c9      	uxtb	r1, r1
   8147c:	fbb0 f2f1 	udiv	r2, r0, r1
   81480:	601a      	str	r2, [r3, #0]
   81482:	e008      	b.n	81496 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81484:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   81488:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   8148c:	f240 0228 	movw	r2, #40	; 0x28
   81490:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81494:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81496:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8149a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8149e:	6b10      	ldr	r0, [r2, #48]	; 0x30
   814a0:	f000 0170 	and.w	r1, r0, #112	; 0x70
   814a4:	2970      	cmp	r1, #112	; 0x70
   814a6:	d10e      	bne.n	814c6 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   814a8:	f240 0328 	movw	r3, #40	; 0x28
   814ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   814b0:	6818      	ldr	r0, [r3, #0]
   814b2:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   814b6:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   814ba:	fba2 0100 	umull	r0, r1, r2, r0
   814be:	ea4f 0051 	mov.w	r0, r1, lsr #1
   814c2:	6018      	str	r0, [r3, #0]
   814c4:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   814c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   814ca:	f2c4 030e 	movt	r3, #16398	; 0x400e
   814ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   814d0:	f240 0028 	movw	r0, #40	; 0x28
   814d4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   814d8:	f3c2 1102 	ubfx	r1, r2, #4, #3
   814dc:	6803      	ldr	r3, [r0, #0]
   814de:	fa23 f301 	lsr.w	r3, r3, r1
   814e2:	6003      	str	r3, [r0, #0]
   814e4:	4770      	bx	lr
   814e6:	bf00      	nop

000814e8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   814e8:	f245 239f 	movw	r3, #21151	; 0x529f
   814ec:	f2c0 1357 	movt	r3, #343	; 0x157
   814f0:	4298      	cmp	r0, r3
   814f2:	d80c      	bhi.n	8150e <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   814f4:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   814f8:	f2c4 000e 	movt	r0, #16398	; 0x400e
   814fc:	f04f 0100 	mov.w	r1, #0
   81500:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81502:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   81506:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8150a:	6019      	str	r1, [r3, #0]
   8150c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8150e:	f64c 417f 	movw	r1, #52351	; 0xcc7f
   81512:	f2c0 2106 	movt	r1, #518	; 0x206
   81516:	4288      	cmp	r0, r1
   81518:	d80c      	bhi.n	81534 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8151a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   8151e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81522:	f44f 7180 	mov.w	r1, #256	; 0x100
   81526:	6019      	str	r1, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81528:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   8152c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81530:	6011      	str	r1, [r2, #0]
   81532:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81534:	f24b 733f 	movw	r3, #46911	; 0xb73f
   81538:	f2c0 3328 	movt	r3, #808	; 0x328
   8153c:	4298      	cmp	r0, r3
   8153e:	d80c      	bhi.n	8155a <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81540:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   81544:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81548:	f44f 7200 	mov.w	r2, #512	; 0x200
   8154c:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   8154e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   81552:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81556:	6002      	str	r2, [r0, #0]
   81558:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8155a:	f642 717f 	movw	r1, #12159	; 0x2f7f
   8155e:	f2c0 41a6 	movt	r1, #1190	; 0x4a6
   81562:	4288      	cmp	r0, r1
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   81564:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   81568:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8156c:	bf94      	ite	ls
   8156e:	f44f 7240 	movls.w	r2, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   81572:	f44f 6280 	movhi.w	r2, #1024	; 0x400
   81576:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   81578:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   8157c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81580:	601a      	str	r2, [r3, #0]
   81582:	4770      	bx	lr

00081584 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   81584:	f640 13b4 	movw	r3, #2484	; 0x9b4
   81588:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8158c:	6819      	ldr	r1, [r3, #0]
   8158e:	b941      	cbnz	r1, 815a2 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   81590:	f640 13b4 	movw	r3, #2484	; 0x9b4
   81594:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81598:	f64c 3250 	movw	r2, #52048	; 0xcb50
   8159c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   815a0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   815a2:	f640 11b4 	movw	r1, #2484	; 0x9b4
   815a6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   815aa:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   815ac:	1818      	adds	r0, r3, r0
   815ae:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   815b0:	4618      	mov	r0, r3
   815b2:	4770      	bx	lr

000815b4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   815b4:	f04f 30ff 	mov.w	r0, #4294967295
   815b8:	4770      	bx	lr
   815ba:	bf00      	nop

000815bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   815bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   815c0:	604b      	str	r3, [r1, #4]

	return 0;
}
   815c2:	f04f 0000 	mov.w	r0, #0
   815c6:	4770      	bx	lr

000815c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   815c8:	f04f 0001 	mov.w	r0, #1
   815cc:	4770      	bx	lr
   815ce:	bf00      	nop

000815d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   815d0:	f04f 0000 	mov.w	r0, #0
   815d4:	4770      	bx	lr
   815d6:	bf00      	nop

000815d8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   815d8:	f100 0308 	add.w	r3, r0, #8
   815dc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   815de:	f04f 32ff 	mov.w	r2, #4294967295
   815e2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   815e4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   815e6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   815e8:	f04f 0100 	mov.w	r1, #0
   815ec:	6001      	str	r1, [r0, #0]
   815ee:	4770      	bx	lr

000815f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   815f0:	f04f 0300 	mov.w	r3, #0
   815f4:	6103      	str	r3, [r0, #16]
   815f6:	4770      	bx	lr

000815f8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   815f8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   815fa:	685a      	ldr	r2, [r3, #4]
   815fc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   815fe:	6842      	ldr	r2, [r0, #4]
   81600:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81602:	685a      	ldr	r2, [r3, #4]
   81604:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   81606:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81608:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8160a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8160c:	6801      	ldr	r1, [r0, #0]
   8160e:	f101 0101 	add.w	r1, r1, #1
   81612:	6001      	str	r1, [r0, #0]
   81614:	4770      	bx	lr
   81616:	bf00      	nop

00081618 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   81618:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8161a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   8161c:	f1b4 3fff 	cmp.w	r4, #4294967295
   81620:	d101      	bne.n	81626 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   81622:	6903      	ldr	r3, [r0, #16]
   81624:	e00a      	b.n	8163c <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   81626:	f100 0308 	add.w	r3, r0, #8
   8162a:	68c2      	ldr	r2, [r0, #12]
   8162c:	6812      	ldr	r2, [r2, #0]
   8162e:	4294      	cmp	r4, r2
   81630:	d304      	bcc.n	8163c <vListInsert+0x24>
   81632:	685b      	ldr	r3, [r3, #4]
   81634:	685a      	ldr	r2, [r3, #4]
   81636:	6812      	ldr	r2, [r2, #0]
   81638:	4294      	cmp	r4, r2
   8163a:	d2fa      	bcs.n	81632 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8163c:	685a      	ldr	r2, [r3, #4]
   8163e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81640:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   81642:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   81644:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81646:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81648:	6801      	ldr	r1, [r0, #0]
   8164a:	f101 0101 	add.w	r1, r1, #1
   8164e:	6001      	str	r1, [r0, #0]
}
   81650:	bc10      	pop	{r4}
   81652:	4770      	bx	lr

00081654 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81654:	6843      	ldr	r3, [r0, #4]
   81656:	6882      	ldr	r2, [r0, #8]
   81658:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8165a:	6881      	ldr	r1, [r0, #8]
   8165c:	6843      	ldr	r3, [r0, #4]
   8165e:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81660:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81662:	684a      	ldr	r2, [r1, #4]
   81664:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81666:	bf04      	itt	eq
   81668:	6882      	ldreq	r2, [r0, #8]
   8166a:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8166c:	f04f 0300 	mov.w	r3, #0
   81670:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81672:	6808      	ldr	r0, [r1, #0]
   81674:	f100 32ff 	add.w	r2, r0, #4294967295
   81678:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   8167a:	6808      	ldr	r0, [r1, #0]
}
   8167c:	4770      	bx	lr
   8167e:	bf00      	nop

00081680 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81680:	4803      	ldr	r0, [pc, #12]	; (81690 <prvPortStartFirstTask+0x10>)
   81682:	6800      	ldr	r0, [r0, #0]
   81684:	6800      	ldr	r0, [r0, #0]
   81686:	f380 8808 	msr	MSP, r0
   8168a:	b662      	cpsie	i
   8168c:	df00      	svc	0
   8168e:	bf00      	nop
   81690:	e000ed08 	.word	0xe000ed08

00081694 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   81694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81698:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   8169c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   816a0:	f04f 0100 	mov.w	r1, #0
   816a4:	f840 1c0c 	str.w	r1, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   816a8:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   816ac:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
   816b0:	4770      	bx	lr
   816b2:	bf00      	nop

000816b4 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   816b4:	4b06      	ldr	r3, [pc, #24]	; (816d0 <pxCurrentTCBConst2>)
   816b6:	6819      	ldr	r1, [r3, #0]
   816b8:	6808      	ldr	r0, [r1, #0]
   816ba:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   816be:	f380 8809 	msr	PSP, r0
   816c2:	f04f 0000 	mov.w	r0, #0
   816c6:	f380 8811 	msr	BASEPRI, r0
   816ca:	f04e 0e0d 	orr.w	lr, lr, #13
   816ce:	4770      	bx	lr

000816d0 <pxCurrentTCBConst2>:
   816d0:	2007aa7c 	.word	0x2007aa7c

000816d4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   816d4:	f64e 5304 	movw	r3, #60676	; 0xed04
   816d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
   816dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   816e0:	601a      	str	r2, [r3, #0]
   816e2:	4770      	bx	lr

000816e4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   816e4:	f3ef 8011 	mrs	r0, BASEPRI
   816e8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   816ec:	f381 8811 	msr	BASEPRI, r1
   816f0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   816f2:	f04f 0000 	mov.w	r0, #0
   816f6:	bf00      	nop

000816f8 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   816f8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   816fa:	f241 63e5 	movw	r3, #5861	; 0x16e5
   816fe:	f2c0 0308 	movt	r3, #8
   81702:	4798      	blx	r3
	uxCriticalNesting++;
   81704:	f240 002c 	movw	r0, #44	; 0x2c
   81708:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8170c:	6802      	ldr	r2, [r0, #0]
   8170e:	f102 0201 	add.w	r2, r2, #1
   81712:	6002      	str	r2, [r0, #0]
   81714:	bd08      	pop	{r3, pc}
   81716:	bf00      	nop

00081718 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81718:	f380 8811 	msr	BASEPRI, r0
   8171c:	4770      	bx	lr
   8171e:	bf00      	nop

00081720 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81720:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   81722:	f240 022c 	movw	r2, #44	; 0x2c
   81726:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8172a:	6813      	ldr	r3, [r2, #0]
   8172c:	f103 30ff 	add.w	r0, r3, #4294967295
   81730:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
   81732:	b930      	cbnz	r0, 81742 <vPortExitCritical+0x22>
	{
		portENABLE_INTERRUPTS();
   81734:	f04f 0000 	mov.w	r0, #0
   81738:	f241 7119 	movw	r1, #5913	; 0x1719
   8173c:	f2c0 0108 	movt	r1, #8
   81740:	4788      	blx	r1
   81742:	bd08      	pop	{r3, pc}

00081744 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81744:	f3ef 8009 	mrs	r0, PSP
   81748:	4b0c      	ldr	r3, [pc, #48]	; (8177c <pxCurrentTCBConst>)
   8174a:	681a      	ldr	r2, [r3, #0]
   8174c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81750:	6010      	str	r0, [r2, #0]
   81752:	e92d 4008 	stmdb	sp!, {r3, lr}
   81756:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8175a:	f380 8811 	msr	BASEPRI, r0
   8175e:	f001 f877 	bl	82850 <vTaskSwitchContext>
   81762:	f04f 0000 	mov.w	r0, #0
   81766:	f380 8811 	msr	BASEPRI, r0
   8176a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8176e:	6819      	ldr	r1, [r3, #0]
   81770:	6808      	ldr	r0, [r1, #0]
   81772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81776:	f380 8809 	msr	PSP, r0
   8177a:	4770      	bx	lr

0008177c <pxCurrentTCBConst>:
   8177c:	2007aa7c 	.word	0x2007aa7c

00081780 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81780:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81782:	f64e 5304 	movw	r3, #60676	; 0xed04
   81786:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8178a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8178e:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81790:	f241 60e5 	movw	r0, #5861	; 0x16e5
   81794:	f2c0 0008 	movt	r0, #8
   81798:	4780      	blx	r0
	{
		vTaskIncrementTick();
   8179a:	f242 4121 	movw	r1, #9249	; 0x2421
   8179e:	f2c0 0108 	movt	r1, #8
   817a2:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   817a4:	f04f 0000 	mov.w	r0, #0
   817a8:	f241 7319 	movw	r3, #5913	; 0x1719
   817ac:	f2c0 0308 	movt	r3, #8
   817b0:	4798      	blx	r3
   817b2:	bd08      	pop	{r3, pc}

000817b4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   817b4:	f24e 0314 	movw	r3, #57364	; 0xe014
   817b8:	f2ce 0300 	movt	r3, #57344	; 0xe000
   817bc:	f644 021f 	movw	r2, #18463	; 0x481f
   817c0:	f2c0 0201 	movt	r2, #1
   817c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   817c6:	f24e 0010 	movw	r0, #57360	; 0xe010
   817ca:	f2ce 0000 	movt	r0, #57344	; 0xe000
   817ce:	f04f 0107 	mov.w	r1, #7
   817d2:	6001      	str	r1, [r0, #0]
   817d4:	4770      	bx	lr
   817d6:	bf00      	nop

000817d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   817d8:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   817da:	f64e 5320 	movw	r3, #60704	; 0xed20
   817de:	f2ce 0300 	movt	r3, #57344	; 0xe000
   817e2:	681a      	ldr	r2, [r3, #0]
   817e4:	f442 0070 	orr.w	r0, r2, #15728640	; 0xf00000
   817e8:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   817ea:	6819      	ldr	r1, [r3, #0]
   817ec:	f041 4470 	orr.w	r4, r1, #4026531840	; 0xf0000000
   817f0:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   817f2:	f241 73b5 	movw	r3, #6069	; 0x17b5
   817f6:	f2c0 0308 	movt	r3, #8
   817fa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   817fc:	f04f 0400 	mov.w	r4, #0
   81800:	f240 022c 	movw	r2, #44	; 0x2c
   81804:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81808:	6014      	str	r4, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8180a:	f241 6081 	movw	r0, #5761	; 0x1681
   8180e:	f2c0 0008 	movt	r0, #8
   81812:	4780      	blx	r0

	/* Should not get here! */
	return 0;
}
   81814:	4620      	mov	r0, r4
   81816:	bd10      	pop	{r4, pc}

00081818 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   81818:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8181a:	f64a 12bc 	movw	r2, #43452	; 0xa9bc
   8181e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81822:	e000      	b.n	81826 <prvInsertBlockIntoFreeList+0xe>
   81824:	461a      	mov	r2, r3
   81826:	6813      	ldr	r3, [r2, #0]
   81828:	4283      	cmp	r3, r0
   8182a:	d3fb      	bcc.n	81824 <prvInsertBlockIntoFreeList+0xc>
   8182c:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8182e:	6854      	ldr	r4, [r2, #4]
   81830:	1915      	adds	r5, r2, r4
   81832:	4285      	cmp	r5, r0
   81834:	d103      	bne.n	8183e <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81836:	6868      	ldr	r0, [r5, #4]
   81838:	1904      	adds	r4, r0, r4
   8183a:	6054      	str	r4, [r2, #4]
   8183c:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   8183e:	6842      	ldr	r2, [r0, #4]
   81840:	1884      	adds	r4, r0, r2
   81842:	42a3      	cmp	r3, r4
   81844:	d10f      	bne.n	81866 <prvInsertBlockIntoFreeList+0x4e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81846:	f64a 14b8 	movw	r4, #43448	; 0xa9b8
   8184a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8184e:	6824      	ldr	r4, [r4, #0]
   81850:	429c      	cmp	r4, r3
   81852:	d006      	beq.n	81862 <prvInsertBlockIntoFreeList+0x4a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81854:	685b      	ldr	r3, [r3, #4]
   81856:	189a      	adds	r2, r3, r2
   81858:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8185a:	680b      	ldr	r3, [r1, #0]
   8185c:	681a      	ldr	r2, [r3, #0]
   8185e:	6002      	str	r2, [r0, #0]
   81860:	e002      	b.n	81868 <prvInsertBlockIntoFreeList+0x50>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   81862:	6003      	str	r3, [r0, #0]
   81864:	e000      	b.n	81868 <prvInsertBlockIntoFreeList+0x50>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   81866:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81868:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8186a:	bf18      	it	ne
   8186c:	6008      	strne	r0, [r1, #0]
	}
}
   8186e:	bc30      	pop	{r4, r5}
   81870:	4770      	bx	lr
   81872:	bf00      	nop

00081874 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81874:	b538      	push	{r3, r4, r5, lr}
   81876:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81878:	f242 33e9 	movw	r3, #9193	; 0x23e9
   8187c:	f2c0 0308 	movt	r3, #8
   81880:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81882:	f64a 10b8 	movw	r0, #43448	; 0xa9b8
   81886:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8188a:	6801      	ldr	r1, [r0, #0]
   8188c:	bb21      	cbnz	r1, 818d8 <pvPortMalloc+0x64>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8188e:	f64a 12bc 	movw	r2, #43452	; 0xa9bc
   81892:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81896:	f640 13b8 	movw	r3, #2488	; 0x9b8
   8189a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8189e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   818a0:	f04f 0100 	mov.w	r1, #0
   818a4:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   818a6:	f503 421f 	add.w	r2, r3, #40704	; 0x9f00
   818aa:	f102 00f0 	add.w	r0, r2, #240	; 0xf0
   818ae:	f64a 15b8 	movw	r5, #43448	; 0xa9b8
   818b2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   818b6:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   818b8:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
	pxEnd->pxNextFreeBlock = NULL;
   818bc:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   818c0:	f649 71f0 	movw	r1, #40944	; 0x9ff0
   818c4:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   818c6:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   818c8:	f240 0330 	movw	r3, #48	; 0x30
   818cc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   818d0:	681a      	ldr	r2, [r3, #0]
   818d2:	f1a2 0210 	sub.w	r2, r2, #16
   818d6:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   818d8:	2c00      	cmp	r4, #0
   818da:	d03c      	beq.n	81956 <pvPortMalloc+0xe2>
		{
			xWantedSize += heapSTRUCT_SIZE;
   818dc:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   818e0:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   818e4:	bf1c      	itt	ne
   818e6:	f022 0207 	bicne.w	r2, r2, #7
   818ea:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   818ec:	f102 30ff 	add.w	r0, r2, #4294967295
   818f0:	f649 75fe 	movw	r5, #40958	; 0x9ffe
   818f4:	42a8      	cmp	r0, r5
   818f6:	d831      	bhi.n	8195c <pvPortMalloc+0xe8>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   818f8:	f64a 11bc 	movw	r1, #43452	; 0xa9bc
   818fc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81900:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81902:	e001      	b.n	81908 <pvPortMalloc+0x94>
   81904:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81906:	4604      	mov	r4, r0
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81908:	6863      	ldr	r3, [r4, #4]
   8190a:	429a      	cmp	r2, r3
   8190c:	d902      	bls.n	81914 <pvPortMalloc+0xa0>
   8190e:	6820      	ldr	r0, [r4, #0]
   81910:	2800      	cmp	r0, #0
   81912:	d1f7      	bne.n	81904 <pvPortMalloc+0x90>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81914:	f64a 15b8 	movw	r5, #43448	; 0xa9b8
   81918:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8191c:	682b      	ldr	r3, [r5, #0]
   8191e:	429c      	cmp	r4, r3
   81920:	d01f      	beq.n	81962 <pvPortMalloc+0xee>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   81922:	680d      	ldr	r5, [r1, #0]
   81924:	f105 0510 	add.w	r5, r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81928:	6820      	ldr	r0, [r4, #0]
   8192a:	6008      	str	r0, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8192c:	6861      	ldr	r1, [r4, #4]
   8192e:	1a8b      	subs	r3, r1, r2
   81930:	2b20      	cmp	r3, #32
   81932:	d907      	bls.n	81944 <pvPortMalloc+0xd0>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   81934:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81936:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81938:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   8193a:	f641 0219 	movw	r2, #6169	; 0x1819
   8193e:	f2c0 0208 	movt	r2, #8
   81942:	4790      	blx	r2
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81944:	f240 0030 	movw	r0, #48	; 0x30
   81948:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8194c:	6803      	ldr	r3, [r0, #0]
   8194e:	6861      	ldr	r1, [r4, #4]
   81950:	1a5a      	subs	r2, r3, r1
   81952:	6002      	str	r2, [r0, #0]
   81954:	e007      	b.n	81966 <pvPortMalloc+0xf2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81956:	f04f 0500 	mov.w	r5, #0
   8195a:	e004      	b.n	81966 <pvPortMalloc+0xf2>
   8195c:	f04f 0500 	mov.w	r5, #0
   81960:	e001      	b.n	81966 <pvPortMalloc+0xf2>
   81962:	f04f 0500 	mov.w	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   81966:	f242 50b1 	movw	r0, #9649	; 0x25b1
   8196a:	f2c0 0008 	movt	r0, #8
   8196e:	4780      	blx	r0
		}
	}
	#endif

	return pvReturn;
}
   81970:	4628      	mov	r0, r5
   81972:	bd38      	pop	{r3, r4, r5, pc}

00081974 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81974:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81976:	4604      	mov	r4, r0
   81978:	b1c8      	cbz	r0, 819ae <vPortFree+0x3a>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   8197a:	f242 33e9 	movw	r3, #9193	; 0x23e9
   8197e:	f2c0 0308 	movt	r3, #8
   81982:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   81984:	f240 0030 	movw	r0, #48	; 0x30
   81988:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8198c:	6801      	ldr	r1, [r0, #0]
   8198e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   81992:	188b      	adds	r3, r1, r2
   81994:	6003      	str	r3, [r0, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   81996:	f1a4 0010 	sub.w	r0, r4, #16
   8199a:	f641 0119 	movw	r1, #6169	; 0x1819
   8199e:	f2c0 0108 	movt	r1, #8
   819a2:	4788      	blx	r1
		}
		xTaskResumeAll();
   819a4:	f242 50b1 	movw	r0, #9649	; 0x25b1
   819a8:	f2c0 0008 	movt	r0, #8
   819ac:	4780      	blx	r0
   819ae:	bd10      	pop	{r4, pc}

000819b0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   819b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   819b2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   819b4:	f241 63f9 	movw	r3, #5881	; 0x16f9
   819b8:	f2c0 0308 	movt	r3, #8
   819bc:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   819be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   819c0:	2800      	cmp	r0, #0
   819c2:	dd1a      	ble.n	819fa <prvUnlockQueue+0x4a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   819c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   819c6:	b919      	cbnz	r1, 819d0 <prvUnlockQueue+0x20>
   819c8:	e017      	b.n	819fa <prvUnlockQueue+0x4a>
   819ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
   819cc:	b951      	cbnz	r1, 819e4 <prvUnlockQueue+0x34>
   819ce:	e014      	b.n	819fa <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   819d0:	f104 0624 	add.w	r6, r4, #36	; 0x24
   819d4:	f642 15d9 	movw	r5, #10713	; 0x29d9
   819d8:	f2c0 0508 	movt	r5, #8
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   819dc:	f642 375d 	movw	r7, #11101	; 0x2b5d
   819e0:	f2c0 0708 	movt	r7, #8
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   819e4:	4630      	mov	r0, r6
   819e6:	47a8      	blx	r5
   819e8:	b100      	cbz	r0, 819ec <prvUnlockQueue+0x3c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   819ea:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   819ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   819ee:	f102 33ff 	add.w	r3, r2, #4294967295
   819f2:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   819f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   819f6:	2800      	cmp	r0, #0
   819f8:	dce7      	bgt.n	819ca <prvUnlockQueue+0x1a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   819fa:	f04f 32ff 	mov.w	r2, #4294967295
   819fe:	64a2      	str	r2, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81a00:	f241 7321 	movw	r3, #5921	; 0x1721
   81a04:	f2c0 0308 	movt	r3, #8
   81a08:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81a0a:	f241 60f9 	movw	r0, #5881	; 0x16f9
   81a0e:	f2c0 0008 	movt	r0, #8
   81a12:	4780      	blx	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81a14:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81a16:	2900      	cmp	r1, #0
   81a18:	dd1a      	ble.n	81a50 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81a1a:	6922      	ldr	r2, [r4, #16]
   81a1c:	b91a      	cbnz	r2, 81a26 <prvUnlockQueue+0x76>
   81a1e:	e017      	b.n	81a50 <prvUnlockQueue+0xa0>
   81a20:	6922      	ldr	r2, [r4, #16]
   81a22:	b952      	cbnz	r2, 81a3a <prvUnlockQueue+0x8a>
   81a24:	e014      	b.n	81a50 <prvUnlockQueue+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81a26:	f104 0610 	add.w	r6, r4, #16
   81a2a:	f642 15d9 	movw	r5, #10713	; 0x29d9
   81a2e:	f2c0 0508 	movt	r5, #8
				{
					vTaskMissedYield();
   81a32:	f642 375d 	movw	r7, #11101	; 0x2b5d
   81a36:	f2c0 0708 	movt	r7, #8
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81a3a:	4630      	mov	r0, r6
   81a3c:	47a8      	blx	r5
   81a3e:	b100      	cbz	r0, 81a42 <prvUnlockQueue+0x92>
				{
					vTaskMissedYield();
   81a40:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81a42:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81a44:	f103 30ff 	add.w	r0, r3, #4294967295
   81a48:	6460      	str	r0, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81a4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81a4c:	2900      	cmp	r1, #0
   81a4e:	dce7      	bgt.n	81a20 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81a50:	f04f 33ff 	mov.w	r3, #4294967295
   81a54:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81a56:	f241 7021 	movw	r0, #5921	; 0x1721
   81a5a:	f2c0 0008 	movt	r0, #8
   81a5e:	4780      	blx	r0
   81a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81a62:	bf00      	nop

00081a64 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81a64:	b538      	push	{r3, r4, r5, lr}
   81a66:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81a68:	6805      	ldr	r5, [r0, #0]
   81a6a:	b175      	cbz	r5, 81a8a <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81a6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
   81a6e:	68c4      	ldr	r4, [r0, #12]
   81a70:	18a4      	adds	r4, r4, r2
   81a72:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81a74:	6840      	ldr	r0, [r0, #4]
   81a76:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81a78:	bf28      	it	cs
   81a7a:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81a7c:	4608      	mov	r0, r1
   81a7e:	68d9      	ldr	r1, [r3, #12]
   81a80:	f643 5315 	movw	r3, #15637	; 0x3d15
   81a84:	f2c0 0308 	movt	r3, #8
   81a88:	4798      	blx	r3
   81a8a:	bd38      	pop	{r3, r4, r5, pc}

00081a8c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   81a8c:	b510      	push	{r4, lr}
   81a8e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81a90:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81a92:	b963      	cbnz	r3, 81aae <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81a94:	6801      	ldr	r1, [r0, #0]
   81a96:	2900      	cmp	r1, #0
   81a98:	d12e      	bne.n	81af8 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81a9a:	6840      	ldr	r0, [r0, #4]
   81a9c:	f642 4349 	movw	r3, #11337	; 0x2c49
   81aa0:	f2c0 0308 	movt	r3, #8
   81aa4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   81aa6:	f04f 0000 	mov.w	r0, #0
   81aaa:	6060      	str	r0, [r4, #4]
   81aac:	e024      	b.n	81af8 <prvCopyDataToQueue+0x6c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81aae:	b982      	cbnz	r2, 81ad2 <prvCopyDataToQueue+0x46>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81ab0:	6880      	ldr	r0, [r0, #8]
   81ab2:	461a      	mov	r2, r3
   81ab4:	f643 5315 	movw	r3, #15637	; 0x3d15
   81ab8:	f2c0 0308 	movt	r3, #8
   81abc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81abe:	68a2      	ldr	r2, [r4, #8]
   81ac0:	6c21      	ldr	r1, [r4, #64]	; 0x40
   81ac2:	1850      	adds	r0, r2, r1
   81ac4:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81ac6:	6863      	ldr	r3, [r4, #4]
   81ac8:	4298      	cmp	r0, r3
   81aca:	d315      	bcc.n	81af8 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81acc:	6822      	ldr	r2, [r4, #0]
   81ace:	60a2      	str	r2, [r4, #8]
   81ad0:	e012      	b.n	81af8 <prvCopyDataToQueue+0x6c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81ad2:	68c0      	ldr	r0, [r0, #12]
   81ad4:	461a      	mov	r2, r3
   81ad6:	f643 5315 	movw	r3, #15637	; 0x3d15
   81ada:	f2c0 0308 	movt	r3, #8
   81ade:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   81ae0:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81ae2:	f1c2 0000 	rsb	r0, r2, #0
   81ae6:	68e1      	ldr	r1, [r4, #12]
   81ae8:	180b      	adds	r3, r1, r0
   81aea:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81aec:	6822      	ldr	r2, [r4, #0]
   81aee:	4293      	cmp	r3, r2
   81af0:	d202      	bcs.n	81af8 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81af2:	6861      	ldr	r1, [r4, #4]
   81af4:	1808      	adds	r0, r1, r0
   81af6:	60e0      	str	r0, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81af8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81afa:	f102 0201 	add.w	r2, r2, #1
   81afe:	63a2      	str	r2, [r4, #56]	; 0x38
   81b00:	bd10      	pop	{r4, pc}
   81b02:	bf00      	nop

00081b04 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81b04:	b538      	push	{r3, r4, r5, lr}
   81b06:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81b08:	4604      	mov	r4, r0
   81b0a:	b930      	cbnz	r0, 81b1a <xQueueGenericReset+0x16>
   81b0c:	f241 64e5 	movw	r4, #5861	; 0x16e5
   81b10:	f2c0 0408 	movt	r4, #8
   81b14:	47a0      	blx	r4
   81b16:	bf00      	nop
   81b18:	e7fd      	b.n	81b16 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   81b1a:	f241 63f9 	movw	r3, #5881	; 0x16f9
   81b1e:	f2c0 0308 	movt	r3, #8
   81b22:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81b24:	6823      	ldr	r3, [r4, #0]
   81b26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81b28:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81b2a:	fb00 3102 	mla	r1, r0, r2, r3
   81b2e:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81b30:	f04f 0100 	mov.w	r1, #0
   81b34:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81b36:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81b38:	f100 30ff 	add.w	r0, r0, #4294967295
   81b3c:	fb02 3300 	mla	r3, r2, r0, r3
   81b40:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81b42:	f04f 32ff 	mov.w	r2, #4294967295
   81b46:	6462      	str	r2, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81b48:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81b4a:	b985      	cbnz	r5, 81b6e <xQueueGenericReset+0x6a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81b4c:	6921      	ldr	r1, [r4, #16]
   81b4e:	b1c1      	cbz	r1, 81b82 <xQueueGenericReset+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81b50:	f104 0010 	add.w	r0, r4, #16
   81b54:	f642 13d9 	movw	r3, #10713	; 0x29d9
   81b58:	f2c0 0308 	movt	r3, #8
   81b5c:	4798      	blx	r3
   81b5e:	2801      	cmp	r0, #1
   81b60:	d10f      	bne.n	81b82 <xQueueGenericReset+0x7e>
				{
					portYIELD_WITHIN_API();
   81b62:	f241 60d5 	movw	r0, #5845	; 0x16d5
   81b66:	f2c0 0008 	movt	r0, #8
   81b6a:	4780      	blx	r0
   81b6c:	e009      	b.n	81b82 <xQueueGenericReset+0x7e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81b6e:	f104 0010 	add.w	r0, r4, #16
   81b72:	f241 55d9 	movw	r5, #5593	; 0x15d9
   81b76:	f2c0 0508 	movt	r5, #8
   81b7a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81b7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81b80:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81b82:	f241 7221 	movw	r2, #5921	; 0x1721
   81b86:	f2c0 0208 	movt	r2, #8
   81b8a:	4790      	blx	r2

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81b8c:	f04f 0001 	mov.w	r0, #1
   81b90:	bd38      	pop	{r3, r4, r5, pc}
   81b92:	bf00      	nop

00081b94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81b96:	460d      	mov	r5, r1
   81b98:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81b9a:	4606      	mov	r6, r0
   81b9c:	b1e0      	cbz	r0, 81bd8 <xQueueGenericCreate+0x44>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81b9e:	f04f 0050 	mov.w	r0, #80	; 0x50
   81ba2:	f641 0375 	movw	r3, #6261	; 0x1875
   81ba6:	f2c0 0308 	movt	r3, #8
   81baa:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81bac:	4604      	mov	r4, r0
   81bae:	b198      	cbz	r0, 81bd8 <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81bb0:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81bb4:	f100 0001 	add.w	r0, r0, #1
   81bb8:	f641 0175 	movw	r1, #6261	; 0x1875
   81bbc:	f2c0 0108 	movt	r1, #8
   81bc0:	4788      	blx	r1
   81bc2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81bc4:	b970      	cbnz	r0, 81be4 <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81bc6:	4620      	mov	r0, r4
   81bc8:	f641 1275 	movw	r2, #6517	; 0x1975
   81bcc:	f2c0 0208 	movt	r2, #8
   81bd0:	4790      	blx	r2
   81bd2:	e001      	b.n	81bd8 <xQueueGenericCreate+0x44>
			}
		}
	}

	configASSERT( xReturn );
   81bd4:	bf00      	nop
   81bd6:	e7fd      	b.n	81bd4 <xQueueGenericCreate+0x40>
   81bd8:	f241 60e5 	movw	r0, #5861	; 0x16e5
   81bdc:	f2c0 0008 	movt	r0, #8
   81be0:	4780      	blx	r0
   81be2:	e7f7      	b.n	81bd4 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81be4:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81be6:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81be8:	4620      	mov	r0, r4
   81bea:	f04f 0101 	mov.w	r1, #1
   81bee:	f641 3305 	movw	r3, #6917	; 0x1b05
   81bf2:	f2c0 0308 	movt	r3, #8
   81bf6:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81bf8:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81bfc:	4620      	mov	r0, r4
   81bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081c00 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c04:	b085      	sub	sp, #20
   81c06:	468a      	mov	sl, r1
   81c08:	9201      	str	r2, [sp, #4]
   81c0a:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81c0c:	4604      	mov	r4, r0
   81c0e:	b930      	cbnz	r0, 81c1e <xQueueGenericSend+0x1e>
   81c10:	f241 64e5 	movw	r4, #5861	; 0x16e5
   81c14:	f2c0 0408 	movt	r4, #8
   81c18:	47a0      	blx	r4
   81c1a:	bf00      	nop
   81c1c:	e7fd      	b.n	81c1a <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81c1e:	b941      	cbnz	r1, 81c32 <xQueueGenericSend+0x32>
   81c20:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81c22:	b14b      	cbz	r3, 81c38 <xQueueGenericSend+0x38>
   81c24:	f241 60e5 	movw	r0, #5861	; 0x16e5
   81c28:	f2c0 0008 	movt	r0, #8
   81c2c:	4780      	blx	r0
   81c2e:	bf00      	nop
   81c30:	e7fd      	b.n	81c2e <xQueueGenericSend+0x2e>
   81c32:	f04f 0700 	mov.w	r7, #0
   81c36:	e001      	b.n	81c3c <xQueueGenericSend+0x3c>
   81c38:	f04f 0700 	mov.w	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81c3c:	f241 66f9 	movw	r6, #5881	; 0x16f9
   81c40:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81c44:	f642 2b81 	movw	fp, #10881	; 0x2a81
   81c48:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81c4c:	f241 7521 	movw	r5, #5921	; 0x1721
   81c50:	f2c0 0508 	movt	r5, #8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81c54:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81c56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81c58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   81c5a:	428a      	cmp	r2, r1
   81c5c:	d21f      	bcs.n	81c9e <xQueueGenericSend+0x9e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81c5e:	4620      	mov	r0, r4
   81c60:	4651      	mov	r1, sl
   81c62:	9a00      	ldr	r2, [sp, #0]
   81c64:	f641 238d 	movw	r3, #6797	; 0x1a8d
   81c68:	f2c0 0308 	movt	r3, #8
   81c6c:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81c6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81c70:	b169      	cbz	r1, 81c8e <xQueueGenericSend+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81c72:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81c76:	f642 12d9 	movw	r2, #10713	; 0x29d9
   81c7a:	f2c0 0208 	movt	r2, #8
   81c7e:	4790      	blx	r2
   81c80:	2801      	cmp	r0, #1
   81c82:	d104      	bne.n	81c8e <xQueueGenericSend+0x8e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81c84:	f241 60d5 	movw	r0, #5845	; 0x16d5
   81c88:	f2c0 0008 	movt	r0, #8
   81c8c:	4780      	blx	r0
					}
				}

				taskEXIT_CRITICAL();
   81c8e:	f241 7321 	movw	r3, #5921	; 0x1721
   81c92:	f2c0 0308 	movt	r3, #8
   81c96:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81c98:	f04f 0001 	mov.w	r0, #1
   81c9c:	e066      	b.n	81d6c <xQueueGenericSend+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81c9e:	9b01      	ldr	r3, [sp, #4]
   81ca0:	b93b      	cbnz	r3, 81cb2 <xQueueGenericSend+0xb2>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81ca2:	f241 7221 	movw	r2, #5921	; 0x1721
   81ca6:	f2c0 0208 	movt	r2, #8
   81caa:	4790      	blx	r2

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81cac:	f04f 0000 	mov.w	r0, #0
   81cb0:	e05c      	b.n	81d6c <xQueueGenericSend+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
   81cb2:	b91f      	cbnz	r7, 81cbc <xQueueGenericSend+0xbc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81cb4:	a802      	add	r0, sp, #8
   81cb6:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81cb8:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81cbc:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81cbe:	f242 30e9 	movw	r0, #9193	; 0x23e9
   81cc2:	f2c0 0008 	movt	r0, #8
   81cc6:	4780      	blx	r0
		prvLockQueue( pxQueue );
   81cc8:	47b0      	blx	r6
   81cca:	6c62      	ldr	r2, [r4, #68]	; 0x44
   81ccc:	f1b2 3fff 	cmp.w	r2, #4294967295
   81cd0:	bf04      	itt	eq
   81cd2:	2200      	moveq	r2, #0
   81cd4:	6462      	streq	r2, [r4, #68]	; 0x44
   81cd6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81cd8:	f1b1 3fff 	cmp.w	r1, #4294967295
   81cdc:	bf04      	itt	eq
   81cde:	2100      	moveq	r1, #0
   81ce0:	64a1      	streq	r1, [r4, #72]	; 0x48
   81ce2:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81ce4:	a802      	add	r0, sp, #8
   81ce6:	a901      	add	r1, sp, #4
   81ce8:	f642 23b1 	movw	r3, #10929	; 0x2ab1
   81cec:	f2c0 0308 	movt	r3, #8
   81cf0:	4798      	blx	r3
   81cf2:	bb70      	cbnz	r0, 81d52 <xQueueGenericSend+0x152>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81cf4:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81cf6:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81cfa:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81cfe:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81d00:	45c1      	cmp	r9, r8
   81d02:	d11a      	bne.n	81d3a <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81d04:	f104 0010 	add.w	r0, r4, #16
   81d08:	9901      	ldr	r1, [sp, #4]
   81d0a:	f642 1211 	movw	r2, #10513	; 0x2911
   81d0e:	f2c0 0208 	movt	r2, #8
   81d12:	4790      	blx	r2
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81d14:	4620      	mov	r0, r4
   81d16:	f641 11b1 	movw	r1, #6577	; 0x19b1
   81d1a:	f2c0 0108 	movt	r1, #8
   81d1e:	4788      	blx	r1
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81d20:	f242 50b1 	movw	r0, #9649	; 0x25b1
   81d24:	f2c0 0008 	movt	r0, #8
   81d28:	4780      	blx	r0
   81d2a:	2800      	cmp	r0, #0
   81d2c:	d192      	bne.n	81c54 <xQueueGenericSend+0x54>
				{
					portYIELD_WITHIN_API();
   81d2e:	f241 63d5 	movw	r3, #5845	; 0x16d5
   81d32:	f2c0 0308 	movt	r3, #8
   81d36:	4798      	blx	r3
   81d38:	e78c      	b.n	81c54 <xQueueGenericSend+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81d3a:	4620      	mov	r0, r4
   81d3c:	f641 11b1 	movw	r1, #6577	; 0x19b1
   81d40:	f2c0 0108 	movt	r1, #8
   81d44:	4788      	blx	r1
				( void ) xTaskResumeAll();
   81d46:	f242 53b1 	movw	r3, #9649	; 0x25b1
   81d4a:	f2c0 0308 	movt	r3, #8
   81d4e:	4798      	blx	r3
   81d50:	e780      	b.n	81c54 <xQueueGenericSend+0x54>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81d52:	4620      	mov	r0, r4
   81d54:	f641 12b1 	movw	r2, #6577	; 0x19b1
   81d58:	f2c0 0208 	movt	r2, #8
   81d5c:	4790      	blx	r2
			( void ) xTaskResumeAll();
   81d5e:	f242 50b1 	movw	r0, #9649	; 0x25b1
   81d62:	f2c0 0008 	movt	r0, #8
   81d66:	4780      	blx	r0

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81d68:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   81d6c:	b005      	add	sp, #20
   81d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d72:	bf00      	nop

00081d74 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d78:	460e      	mov	r6, r1
   81d7a:	4615      	mov	r5, r2
   81d7c:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81d7e:	4604      	mov	r4, r0
   81d80:	b930      	cbnz	r0, 81d90 <xQueueGenericSendFromISR+0x1c>
   81d82:	f241 65e5 	movw	r5, #5861	; 0x16e5
   81d86:	f2c0 0508 	movt	r5, #8
   81d8a:	47a8      	blx	r5
   81d8c:	bf00      	nop
   81d8e:	e7fd      	b.n	81d8c <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81d90:	b941      	cbnz	r1, 81da4 <xQueueGenericSendFromISR+0x30>
   81d92:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81d94:	b133      	cbz	r3, 81da4 <xQueueGenericSendFromISR+0x30>
   81d96:	f241 60e5 	movw	r0, #5861	; 0x16e5
   81d9a:	f2c0 0008 	movt	r0, #8
   81d9e:	4780      	blx	r0
   81da0:	bf00      	nop
   81da2:	e7fd      	b.n	81da0 <xQueueGenericSendFromISR+0x2c>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81da4:	f241 61e5 	movw	r1, #5861	; 0x16e5
   81da8:	f2c0 0108 	movt	r1, #8
   81dac:	4788      	blx	r1
   81dae:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81db0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81db2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81db4:	429a      	cmp	r2, r3
   81db6:	d221      	bcs.n	81dfc <xQueueGenericSendFromISR+0x88>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81db8:	4620      	mov	r0, r4
   81dba:	4631      	mov	r1, r6
   81dbc:	4642      	mov	r2, r8
   81dbe:	f641 238d 	movw	r3, #6797	; 0x1a8d
   81dc2:	f2c0 0308 	movt	r3, #8
   81dc6:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81dc8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81dca:	f1b0 3fff 	cmp.w	r0, #4294967295
   81dce:	d10e      	bne.n	81dee <xQueueGenericSendFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81dd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   81dd2:	b1b2      	cbz	r2, 81e02 <xQueueGenericSendFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81dd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81dd8:	f642 14d9 	movw	r4, #10713	; 0x29d9
   81ddc:	f2c0 0408 	movt	r4, #8
   81de0:	47a0      	blx	r4
   81de2:	b188      	cbz	r0, 81e08 <xQueueGenericSendFromISR+0x94>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81de4:	b19d      	cbz	r5, 81e0e <xQueueGenericSendFromISR+0x9a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81de6:	f04f 0401 	mov.w	r4, #1
   81dea:	602c      	str	r4, [r5, #0]
   81dec:	e011      	b.n	81e12 <xQueueGenericSendFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81dee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81df0:	f101 0101 	add.w	r1, r1, #1
   81df4:	64a1      	str	r1, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81df6:	f04f 0401 	mov.w	r4, #1
   81dfa:	e00a      	b.n	81e12 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81dfc:	f04f 0400 	mov.w	r4, #0
   81e00:	e007      	b.n	81e12 <xQueueGenericSendFromISR+0x9e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81e02:	f04f 0401 	mov.w	r4, #1
   81e06:	e004      	b.n	81e12 <xQueueGenericSendFromISR+0x9e>
   81e08:	f04f 0401 	mov.w	r4, #1
   81e0c:	e001      	b.n	81e12 <xQueueGenericSendFromISR+0x9e>
   81e0e:	f04f 0401 	mov.w	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81e12:	4638      	mov	r0, r7
   81e14:	f241 7319 	movw	r3, #5913	; 0x1719
   81e18:	f2c0 0308 	movt	r3, #8
   81e1c:	4798      	blx	r3

	return xReturn;
}
   81e1e:	4620      	mov	r0, r4
   81e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081e24 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81e28:	b085      	sub	sp, #20
   81e2a:	4689      	mov	r9, r1
   81e2c:	9201      	str	r2, [sp, #4]
   81e2e:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81e30:	4604      	mov	r4, r0
   81e32:	b930      	cbnz	r0, 81e42 <xQueueGenericReceive+0x1e>
   81e34:	f241 64e5 	movw	r4, #5861	; 0x16e5
   81e38:	f2c0 0408 	movt	r4, #8
   81e3c:	47a0      	blx	r4
   81e3e:	bf00      	nop
   81e40:	e7fd      	b.n	81e3e <xQueueGenericReceive+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81e42:	b941      	cbnz	r1, 81e56 <xQueueGenericReceive+0x32>
   81e44:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81e46:	b14b      	cbz	r3, 81e5c <xQueueGenericReceive+0x38>
   81e48:	f241 60e5 	movw	r0, #5861	; 0x16e5
   81e4c:	f2c0 0008 	movt	r0, #8
   81e50:	4780      	blx	r0
   81e52:	bf00      	nop
   81e54:	e7fd      	b.n	81e52 <xQueueGenericReceive+0x2e>
   81e56:	f04f 0700 	mov.w	r7, #0
   81e5a:	e001      	b.n	81e60 <xQueueGenericReceive+0x3c>
   81e5c:	f04f 0700 	mov.w	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81e60:	f241 66f9 	movw	r6, #5881	; 0x16f9
   81e64:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81e68:	f642 2b81 	movw	fp, #10881	; 0x2a81
   81e6c:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81e70:	f241 7521 	movw	r5, #5921	; 0x1721
   81e74:	f2c0 0508 	movt	r5, #8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81e78:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81e7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   81e7c:	2900      	cmp	r1, #0
   81e7e:	d03f      	beq.n	81f00 <xQueueGenericReceive+0xdc>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81e80:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81e82:	4620      	mov	r0, r4
   81e84:	4649      	mov	r1, r9
   81e86:	f641 2365 	movw	r3, #6757	; 0x1a65
   81e8a:	f2c0 0308 	movt	r3, #8
   81e8e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81e90:	f1ba 0f00 	cmp.w	sl, #0
   81e94:	d11c      	bne.n	81ed0 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81e96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81e98:	f103 30ff 	add.w	r0, r3, #4294967295
   81e9c:	63a0      	str	r0, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81e9e:	6821      	ldr	r1, [r4, #0]
   81ea0:	b929      	cbnz	r1, 81eae <xQueueGenericReceive+0x8a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81ea2:	f642 326d 	movw	r2, #11117	; 0x2b6d
   81ea6:	f2c0 0208 	movt	r2, #8
   81eaa:	4790      	blx	r2
   81eac:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81eae:	6923      	ldr	r3, [r4, #16]
   81eb0:	b1f3      	cbz	r3, 81ef0 <xQueueGenericReceive+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81eb2:	f104 0010 	add.w	r0, r4, #16
   81eb6:	f642 11d9 	movw	r1, #10713	; 0x29d9
   81eba:	f2c0 0108 	movt	r1, #8
   81ebe:	4788      	blx	r1
   81ec0:	2801      	cmp	r0, #1
   81ec2:	d115      	bne.n	81ef0 <xQueueGenericReceive+0xcc>
						{
							portYIELD_WITHIN_API();
   81ec4:	f241 60d5 	movw	r0, #5845	; 0x16d5
   81ec8:	f2c0 0008 	movt	r0, #8
   81ecc:	4780      	blx	r0
   81ece:	e00f      	b.n	81ef0 <xQueueGenericReceive+0xcc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81ed0:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81ed2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   81ed4:	b160      	cbz	r0, 81ef0 <xQueueGenericReceive+0xcc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81ed6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81eda:	f642 11d9 	movw	r1, #10713	; 0x29d9
   81ede:	f2c0 0108 	movt	r1, #8
   81ee2:	4788      	blx	r1
   81ee4:	b120      	cbz	r0, 81ef0 <xQueueGenericReceive+0xcc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81ee6:	f241 62d5 	movw	r2, #5845	; 0x16d5
   81eea:	f2c0 0208 	movt	r2, #8
   81eee:	4790      	blx	r2
						}
					}
				}

				taskEXIT_CRITICAL();
   81ef0:	f241 7221 	movw	r2, #5921	; 0x1721
   81ef4:	f2c0 0208 	movt	r2, #8
   81ef8:	4790      	blx	r2
				return pdPASS;
   81efa:	f04f 0001 	mov.w	r0, #1
   81efe:	e071      	b.n	81fe4 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81f00:	9a01      	ldr	r2, [sp, #4]
   81f02:	b93a      	cbnz	r2, 81f14 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81f04:	f241 7221 	movw	r2, #5921	; 0x1721
   81f08:	f2c0 0208 	movt	r2, #8
   81f0c:	4790      	blx	r2
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81f0e:	f04f 0000 	mov.w	r0, #0
   81f12:	e067      	b.n	81fe4 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
   81f14:	b91f      	cbnz	r7, 81f1e <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81f16:	a802      	add	r0, sp, #8
   81f18:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81f1a:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81f1e:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81f20:	f242 33e9 	movw	r3, #9193	; 0x23e9
   81f24:	f2c0 0308 	movt	r3, #8
   81f28:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81f2a:	47b0      	blx	r6
   81f2c:	6c60      	ldr	r0, [r4, #68]	; 0x44
   81f2e:	f1b0 3fff 	cmp.w	r0, #4294967295
   81f32:	bf04      	itt	eq
   81f34:	2000      	moveq	r0, #0
   81f36:	6460      	streq	r0, [r4, #68]	; 0x44
   81f38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81f3a:	f1b1 3fff 	cmp.w	r1, #4294967295
   81f3e:	bf04      	itt	eq
   81f40:	2100      	moveq	r1, #0
   81f42:	64a1      	streq	r1, [r4, #72]	; 0x48
   81f44:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81f46:	a802      	add	r0, sp, #8
   81f48:	a901      	add	r1, sp, #4
   81f4a:	f642 22b1 	movw	r2, #10929	; 0x2ab1
   81f4e:	f2c0 0208 	movt	r2, #8
   81f52:	4790      	blx	r2
   81f54:	2800      	cmp	r0, #0
   81f56:	d138      	bne.n	81fca <xQueueGenericReceive+0x1a6>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81f58:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81f5a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81f5e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81f60:	f1b8 0f00 	cmp.w	r8, #0
   81f64:	d125      	bne.n	81fb2 <xQueueGenericReceive+0x18e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81f66:	6823      	ldr	r3, [r4, #0]
   81f68:	b93b      	cbnz	r3, 81f7a <xQueueGenericReceive+0x156>
					{
						portENTER_CRITICAL();
   81f6a:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81f6c:	6860      	ldr	r0, [r4, #4]
   81f6e:	f642 31a1 	movw	r1, #11169	; 0x2ba1
   81f72:	f2c0 0108 	movt	r1, #8
   81f76:	4788      	blx	r1
						}
						portEXIT_CRITICAL();
   81f78:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81f7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81f7e:	9901      	ldr	r1, [sp, #4]
   81f80:	f642 1211 	movw	r2, #10513	; 0x2911
   81f84:	f2c0 0208 	movt	r2, #8
   81f88:	4790      	blx	r2
				prvUnlockQueue( pxQueue );
   81f8a:	4620      	mov	r0, r4
   81f8c:	f641 13b1 	movw	r3, #6577	; 0x19b1
   81f90:	f2c0 0308 	movt	r3, #8
   81f94:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81f96:	f242 50b1 	movw	r0, #9649	; 0x25b1
   81f9a:	f2c0 0008 	movt	r0, #8
   81f9e:	4780      	blx	r0
   81fa0:	2800      	cmp	r0, #0
   81fa2:	f47f af69 	bne.w	81e78 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
   81fa6:	f241 61d5 	movw	r1, #5845	; 0x16d5
   81faa:	f2c0 0108 	movt	r1, #8
   81fae:	4788      	blx	r1
   81fb0:	e762      	b.n	81e78 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81fb2:	4620      	mov	r0, r4
   81fb4:	f641 11b1 	movw	r1, #6577	; 0x19b1
   81fb8:	f2c0 0108 	movt	r1, #8
   81fbc:	4788      	blx	r1
				( void ) xTaskResumeAll();
   81fbe:	f242 52b1 	movw	r2, #9649	; 0x25b1
   81fc2:	f2c0 0208 	movt	r2, #8
   81fc6:	4790      	blx	r2
   81fc8:	e756      	b.n	81e78 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81fca:	4620      	mov	r0, r4
   81fcc:	f641 13b1 	movw	r3, #6577	; 0x19b1
   81fd0:	f2c0 0308 	movt	r3, #8
   81fd4:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81fd6:	f242 50b1 	movw	r0, #9649	; 0x25b1
   81fda:	f2c0 0008 	movt	r0, #8
   81fde:	4780      	blx	r0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81fe0:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   81fe4:	b005      	add	sp, #20
   81fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fea:	bf00      	nop

00081fec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81fec:	b538      	push	{r3, r4, r5, lr}
   81fee:	4604      	mov	r4, r0
   81ff0:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81ff2:	f241 63f9 	movw	r3, #5881	; 0x16f9
   81ff6:	f2c0 0308 	movt	r3, #8
   81ffa:	4798      	blx	r3
   81ffc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   81ffe:	f1b0 3fff 	cmp.w	r0, #4294967295
   82002:	bf04      	itt	eq
   82004:	2000      	moveq	r0, #0
   82006:	6460      	streq	r0, [r4, #68]	; 0x44
   82008:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   8200a:	f1b1 3fff 	cmp.w	r1, #4294967295
   8200e:	bf04      	itt	eq
   82010:	2100      	moveq	r1, #0
   82012:	64a1      	streq	r1, [r4, #72]	; 0x48
   82014:	f241 7221 	movw	r2, #5921	; 0x1721
   82018:	f2c0 0208 	movt	r2, #8
   8201c:	4790      	blx	r2
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   8201e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82020:	b93b      	cbnz	r3, 82032 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82022:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82026:	4629      	mov	r1, r5
   82028:	f642 1285 	movw	r2, #10629	; 0x2985
   8202c:	f2c0 0208 	movt	r2, #8
   82030:	4790      	blx	r2
		}
		prvUnlockQueue( pxQueue );
   82032:	4620      	mov	r0, r4
   82034:	f641 11b1 	movw	r1, #6577	; 0x19b1
   82038:	f2c0 0108 	movt	r1, #8
   8203c:	4788      	blx	r1
   8203e:	bd38      	pop	{r3, r4, r5, pc}

00082040 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   82040:	b510      	push	{r4, lr}
   82042:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   82044:	f64a 237c 	movw	r3, #43644	; 0xaa7c
   82048:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8204c:	6818      	ldr	r0, [r3, #0]
   8204e:	6044      	str	r4, [r0, #4]

	if( xTimeToWake < xTickCount )
   82050:	f64a 2198 	movw	r1, #43672	; 0xaa98
   82054:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82058:	680a      	ldr	r2, [r1, #0]
   8205a:	4294      	cmp	r4, r2
   8205c:	d211      	bcs.n	82082 <prvAddCurrentTaskToDelayedList+0x42>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8205e:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   82062:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82066:	6810      	ldr	r0, [r2, #0]
   82068:	f64a 237c 	movw	r3, #43644	; 0xaa7c
   8206c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82070:	6819      	ldr	r1, [r3, #0]
   82072:	f101 0104 	add.w	r1, r1, #4
   82076:	f241 6219 	movw	r2, #5657	; 0x1619
   8207a:	f2c0 0208 	movt	r2, #8
   8207e:	4790      	blx	r2
   82080:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82082:	f64a 13dc 	movw	r3, #43484	; 0xa9dc
   82086:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8208a:	6818      	ldr	r0, [r3, #0]
   8208c:	f64a 217c 	movw	r1, #43644	; 0xaa7c
   82090:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82094:	6809      	ldr	r1, [r1, #0]
   82096:	f101 0104 	add.w	r1, r1, #4
   8209a:	f241 6219 	movw	r2, #5657	; 0x1619
   8209e:	f2c0 0208 	movt	r2, #8
   820a2:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   820a4:	f240 0034 	movw	r0, #52	; 0x34
   820a8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820ac:	6803      	ldr	r3, [r0, #0]
   820ae:	429c      	cmp	r4, r3
   820b0:	d204      	bcs.n	820bc <prvAddCurrentTaskToDelayedList+0x7c>
		{
			xNextTaskUnblockTime = xTimeToWake;
   820b2:	f240 0134 	movw	r1, #52	; 0x34
   820b6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   820ba:	600c      	str	r4, [r1, #0]
   820bc:	bd10      	pop	{r4, pc}
   820be:	bf00      	nop

000820c0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   820c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   820c4:	460f      	mov	r7, r1
   820c6:	4690      	mov	r8, r2
   820c8:	469a      	mov	sl, r3
   820ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   820cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   820ce:	4681      	mov	r9, r0
   820d0:	b930      	cbnz	r0, 820e0 <xTaskGenericCreate+0x20>
   820d2:	f241 67e5 	movw	r7, #5861	; 0x16e5
   820d6:	f2c0 0708 	movt	r7, #8
   820da:	47b8      	blx	r7
   820dc:	bf00      	nop
   820de:	e7fd      	b.n	820dc <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   820e0:	2d04      	cmp	r5, #4
   820e2:	d906      	bls.n	820f2 <xTaskGenericCreate+0x32>
   820e4:	f241 65e5 	movw	r5, #5861	; 0x16e5
   820e8:	f2c0 0508 	movt	r5, #8
   820ec:	47a8      	blx	r5
   820ee:	bf00      	nop
   820f0:	e7fd      	b.n	820ee <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   820f2:	f04f 004c 	mov.w	r0, #76	; 0x4c
   820f6:	f641 0375 	movw	r3, #6261	; 0x1875
   820fa:	f2c0 0308 	movt	r3, #8
   820fe:	4798      	blx	r3

	if( pxNewTCB != NULL )
   82100:	4604      	mov	r4, r0
   82102:	2800      	cmp	r0, #0
   82104:	f000 8127 	beq.w	82356 <xTaskGenericCreate+0x296>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   82108:	2e00      	cmp	r6, #0
   8210a:	f040 8122 	bne.w	82352 <xTaskGenericCreate+0x292>
   8210e:	ea4f 0088 	mov.w	r0, r8, lsl #2
   82112:	f641 0175 	movw	r1, #6261	; 0x1875
   82116:	f2c0 0108 	movt	r1, #8
   8211a:	4788      	blx	r1
   8211c:	4606      	mov	r6, r0
   8211e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   82120:	b930      	cbnz	r0, 82130 <xTaskGenericCreate+0x70>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   82122:	4620      	mov	r0, r4
   82124:	f641 1275 	movw	r2, #6517	; 0x1975
   82128:	f2c0 0208 	movt	r2, #8
   8212c:	4790      	blx	r2
   8212e:	e112      	b.n	82356 <xTaskGenericCreate+0x296>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   82130:	4630      	mov	r0, r6
   82132:	f04f 01a5 	mov.w	r1, #165	; 0xa5
   82136:	ea4f 0288 	mov.w	r2, r8, lsl #2
   8213a:	f643 5627 	movw	r6, #15655	; 0x3d27
   8213e:	f2c0 0608 	movt	r6, #8
   82142:	47b0      	blx	r6
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   82144:	f108 38ff 	add.w	r8, r8, #4294967295
   82148:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8214a:	eb00 0288 	add.w	r2, r0, r8, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   8214e:	f022 0b07 	bic.w	fp, r2, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   82152:	f104 0034 	add.w	r0, r4, #52	; 0x34
   82156:	4639      	mov	r1, r7
   82158:	f04f 020a 	mov.w	r2, #10
   8215c:	f643 67cd 	movw	r7, #16077	; 0x3ecd
   82160:	f2c0 0708 	movt	r7, #8
   82164:	47b8      	blx	r7
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   82166:	f04f 0300 	mov.w	r3, #0
   8216a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   8216e:	2d04      	cmp	r5, #4
   82170:	bf34      	ite	cc
   82172:	462e      	movcc	r6, r5
   82174:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   82176:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   82178:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8217a:	f104 0704 	add.w	r7, r4, #4
   8217e:	4638      	mov	r0, r7
   82180:	f241 58f1 	movw	r8, #5617	; 0x15f1
   82184:	f2c0 0808 	movt	r8, #8
   82188:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   8218a:	f104 0018 	add.w	r0, r4, #24
   8218e:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   82190:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   82192:	f1c6 0605 	rsb	r6, r6, #5
   82196:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   82198:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8219a:	4658      	mov	r0, fp
   8219c:	4649      	mov	r1, r9
   8219e:	4652      	mov	r2, sl
   821a0:	f241 6395 	movw	r3, #5781	; 0x1695
   821a4:	f2c0 0308 	movt	r3, #8
   821a8:	4798      	blx	r3
   821aa:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   821ac:	f010 0f07 	tst.w	r0, #7
   821b0:	d006      	beq.n	821c0 <xTaskGenericCreate+0x100>
   821b2:	f241 64e5 	movw	r4, #5861	; 0x16e5
   821b6:	f2c0 0408 	movt	r4, #8
   821ba:	47a0      	blx	r4
   821bc:	bf00      	nop
   821be:	e7fd      	b.n	821bc <xTaskGenericCreate+0xfc>

		if( ( void * ) pxCreatedTask != NULL )
   821c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   821c2:	b101      	cbz	r1, 821c6 <xTaskGenericCreate+0x106>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   821c4:	600c      	str	r4, [r1, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   821c6:	f241 60f9 	movw	r0, #5881	; 0x16f9
   821ca:	f2c0 0008 	movt	r0, #8
   821ce:	4780      	blx	r0
		{
			uxCurrentNumberOfTasks++;
   821d0:	f64a 23bc 	movw	r3, #43708	; 0xaabc
   821d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   821d8:	681a      	ldr	r2, [r3, #0]
   821da:	f102 0201 	add.w	r2, r2, #1
   821de:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   821e0:	f64a 217c 	movw	r1, #43644	; 0xaa7c
   821e4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   821e8:	6808      	ldr	r0, [r1, #0]
   821ea:	2800      	cmp	r0, #0
   821ec:	d149      	bne.n	82282 <xTaskGenericCreate+0x1c2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   821ee:	f64a 217c 	movw	r1, #43644	; 0xaa7c
   821f2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   821f6:	600c      	str	r4, [r1, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   821f8:	f64a 20bc 	movw	r0, #43708	; 0xaabc
   821fc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82200:	6803      	ldr	r3, [r0, #0]
   82202:	2b01      	cmp	r3, #1
   82204:	d150      	bne.n	822a8 <xTaskGenericCreate+0x1e8>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   82206:	f64a 2914 	movw	r9, #43540	; 0xaa14
   8220a:	f2c2 0907 	movt	r9, #8199	; 0x2007
   8220e:	4648      	mov	r0, r9
   82210:	f241 56d9 	movw	r6, #5593	; 0x15d9
   82214:	f2c0 0608 	movt	r6, #8
   82218:	47b0      	blx	r6
   8221a:	f109 0014 	add.w	r0, r9, #20
   8221e:	47b0      	blx	r6
   82220:	f109 0028 	add.w	r0, r9, #40	; 0x28
   82224:	47b0      	blx	r6
   82226:	f109 003c 	add.w	r0, r9, #60	; 0x3c
   8222a:	47b0      	blx	r6
   8222c:	f109 0050 	add.w	r0, r9, #80	; 0x50
   82230:	47b0      	blx	r6
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   82232:	f64a 29a4 	movw	r9, #43684	; 0xaaa4
   82236:	f2c2 0907 	movt	r9, #8199	; 0x2007
   8223a:	4648      	mov	r0, r9
   8223c:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   8223e:	f64a 18fc 	movw	r8, #43516	; 0xa9fc
   82242:	f2c2 0807 	movt	r8, #8199	; 0x2007
   82246:	4640      	mov	r0, r8
   82248:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   8224a:	f64a 2080 	movw	r0, #43648	; 0xaa80
   8224e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82252:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   82254:	f64a 10e8 	movw	r0, #43496	; 0xa9e8
   82258:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8225c:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   8225e:	f64a 10c8 	movw	r0, #43464	; 0xa9c8
   82262:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82266:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   82268:	f64a 12dc 	movw	r2, #43484	; 0xa9dc
   8226c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82270:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   82274:	f64a 219c 	movw	r1, #43676	; 0xaa9c
   82278:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8227c:	f8c1 8000 	str.w	r8, [r1]
   82280:	e012      	b.n	822a8 <xTaskGenericCreate+0x1e8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   82282:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   82286:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8228a:	681a      	ldr	r2, [r3, #0]
   8228c:	b962      	cbnz	r2, 822a8 <xTaskGenericCreate+0x1e8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8228e:	f64a 217c 	movw	r1, #43644	; 0xaa7c
   82292:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82296:	6808      	ldr	r0, [r1, #0]
   82298:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8229a:	429d      	cmp	r5, r3
   8229c:	d304      	bcc.n	822a8 <xTaskGenericCreate+0x1e8>
					{
						pxCurrentTCB = pxNewTCB;
   8229e:	f64a 227c 	movw	r2, #43644	; 0xaa7c
   822a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   822a6:	6014      	str	r4, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   822a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   822aa:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   822ae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822b2:	681a      	ldr	r2, [r3, #0]
   822b4:	4290      	cmp	r0, r2
   822b6:	d904      	bls.n	822c2 <xTaskGenericCreate+0x202>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   822b8:	f64a 21c0 	movw	r1, #43712	; 0xaac0
   822bc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   822c0:	6008      	str	r0, [r1, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   822c2:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   822c6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822ca:	681a      	ldr	r2, [r3, #0]
   822cc:	6422      	str	r2, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   822ce:	f102 0201 	add.w	r2, r2, #1
   822d2:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   822d4:	f64a 2110 	movw	r1, #43536	; 0xaa10
   822d8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   822dc:	680b      	ldr	r3, [r1, #0]
   822de:	4298      	cmp	r0, r3
   822e0:	d904      	bls.n	822ec <xTaskGenericCreate+0x22c>
   822e2:	f64a 2210 	movw	r2, #43536	; 0xaa10
   822e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   822ea:	6010      	str	r0, [r2, #0]
   822ec:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   822f0:	f64a 2014 	movw	r0, #43540	; 0xaa14
   822f4:	4603      	mov	r3, r0
   822f6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822fa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   822fe:	4639      	mov	r1, r7
   82300:	f241 52f9 	movw	r2, #5625	; 0x15f9
   82304:	f2c0 0208 	movt	r2, #8
   82308:	4790      	blx	r2

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8230a:	f241 7121 	movw	r1, #5921	; 0x1721
   8230e:	f2c0 0108 	movt	r1, #8
   82312:	4788      	blx	r1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   82314:	f64a 10e0 	movw	r0, #43488	; 0xa9e0
   82318:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8231c:	6803      	ldr	r3, [r0, #0]
   8231e:	b183      	cbz	r3, 82342 <xTaskGenericCreate+0x282>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82320:	f64a 227c 	movw	r2, #43644	; 0xaa7c
   82324:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82328:	6811      	ldr	r1, [r2, #0]
   8232a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   8232c:	4285      	cmp	r5, r0
   8232e:	d90c      	bls.n	8234a <xTaskGenericCreate+0x28a>
			{
				portYIELD_WITHIN_API();
   82330:	f241 63d5 	movw	r3, #5845	; 0x16d5
   82334:	f2c0 0308 	movt	r3, #8
   82338:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   8233a:	f04f 0001 	mov.w	r0, #1
   8233e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82342:	f04f 0001 	mov.w	r0, #1
   82346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8234a:	f04f 0001 	mov.w	r0, #1
   8234e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   82352:	6306      	str	r6, [r0, #48]	; 0x30
   82354:	e6ec      	b.n	82130 <xTaskGenericCreate+0x70>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   82356:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   8235a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8235e:	bf00      	nop

00082360 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   82360:	b510      	push	{r4, lr}
   82362:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   82364:	f04f 0300 	mov.w	r3, #0
   82368:	9300      	str	r3, [sp, #0]
   8236a:	9301      	str	r3, [sp, #4]
   8236c:	9302      	str	r3, [sp, #8]
   8236e:	9303      	str	r3, [sp, #12]
   82370:	f242 60fd 	movw	r0, #9981	; 0x26fd
   82374:	f2c0 0008 	movt	r0, #8
   82378:	f247 51dc 	movw	r1, #30172	; 0x75dc
   8237c:	f2c0 0108 	movt	r1, #8
   82380:	f04f 0282 	mov.w	r2, #130	; 0x82
   82384:	f242 04c1 	movw	r4, #8385	; 0x20c1
   82388:	f2c0 0408 	movt	r4, #8
   8238c:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8238e:	2801      	cmp	r0, #1
   82390:	d11f      	bne.n	823d2 <vTaskStartScheduler+0x72>
		{
			xReturn = xTimerCreateTimerTask();
   82392:	f642 5385 	movw	r3, #11653	; 0x2d85
   82396:	f2c0 0308 	movt	r3, #8
   8239a:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   8239c:	2801      	cmp	r0, #1
   8239e:	d118      	bne.n	823d2 <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   823a0:	f241 61e5 	movw	r1, #5861	; 0x16e5
   823a4:	f2c0 0108 	movt	r1, #8
   823a8:	4788      	blx	r1

		xSchedulerRunning = pdTRUE;
   823aa:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   823ae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   823b2:	f04f 0201 	mov.w	r2, #1
   823b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   823b8:	f64a 2098 	movw	r0, #43672	; 0xaa98
   823bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   823c0:	f04f 0100 	mov.w	r1, #0
   823c4:	6001      	str	r1, [r0, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   823c6:	f241 73d9 	movw	r3, #6105	; 0x17d9
   823ca:	f2c0 0308 	movt	r3, #8
   823ce:	4798      	blx	r3
   823d0:	e007      	b.n	823e2 <vTaskStartScheduler+0x82>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   823d2:	b930      	cbnz	r0, 823e2 <vTaskStartScheduler+0x82>
   823d4:	f241 60e5 	movw	r0, #5861	; 0x16e5
   823d8:	f2c0 0008 	movt	r0, #8
   823dc:	4780      	blx	r0
   823de:	bf00      	nop
   823e0:	e7fd      	b.n	823de <vTaskStartScheduler+0x7e>
}
   823e2:	b004      	add	sp, #16
   823e4:	bd10      	pop	{r4, pc}
   823e6:	bf00      	nop

000823e8 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   823e8:	f64a 2378 	movw	r3, #43640	; 0xaa78
   823ec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   823f0:	681a      	ldr	r2, [r3, #0]
   823f2:	f102 0201 	add.w	r2, r2, #1
   823f6:	601a      	str	r2, [r3, #0]
   823f8:	4770      	bx	lr
   823fa:	bf00      	nop

000823fc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   823fc:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   823fe:	f241 63f9 	movw	r3, #5881	; 0x16f9
   82402:	f2c0 0308 	movt	r3, #8
   82406:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82408:	f64a 2098 	movw	r0, #43672	; 0xaa98
   8240c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82410:	6804      	ldr	r4, [r0, #0]
	}
	taskEXIT_CRITICAL();
   82412:	f241 7121 	movw	r1, #5921	; 0x1721
   82416:	f2c0 0108 	movt	r1, #8
   8241a:	4788      	blx	r1

	return xTicks;
}
   8241c:	4620      	mov	r0, r4
   8241e:	bd10      	pop	{r4, pc}

00082420 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   82420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82424:	f64a 2378 	movw	r3, #43640	; 0xaa78
   82428:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8242c:	6818      	ldr	r0, [r3, #0]
   8242e:	2800      	cmp	r0, #0
   82430:	f040 80b3 	bne.w	8259a <vTaskIncrementTick+0x17a>
	{
		++xTickCount;
   82434:	f64a 2398 	movw	r3, #43672	; 0xaa98
   82438:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8243c:	6818      	ldr	r0, [r3, #0]
   8243e:	f100 0001 	add.w	r0, r0, #1
   82442:	6018      	str	r0, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   82444:	6819      	ldr	r1, [r3, #0]
   82446:	2900      	cmp	r1, #0
   82448:	d139      	bne.n	824be <vTaskIncrementTick+0x9e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8244a:	f64a 12dc 	movw	r2, #43484	; 0xa9dc
   8244e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82452:	6813      	ldr	r3, [r2, #0]
   82454:	6818      	ldr	r0, [r3, #0]
   82456:	b130      	cbz	r0, 82466 <vTaskIncrementTick+0x46>
   82458:	f241 65e5 	movw	r5, #5861	; 0x16e5
   8245c:	f2c0 0508 	movt	r5, #8
   82460:	47a8      	blx	r5
   82462:	bf00      	nop
   82464:	e7fd      	b.n	82462 <vTaskIncrementTick+0x42>

			pxTemp = pxDelayedTaskList;
   82466:	f64a 13dc 	movw	r3, #43484	; 0xa9dc
   8246a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8246e:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   82470:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   82474:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82478:	6810      	ldr	r0, [r2, #0]
   8247a:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8247c:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8247e:	f64a 2294 	movw	r2, #43668	; 0xaa94
   82482:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82486:	6811      	ldr	r1, [r2, #0]
   82488:	f101 0101 	add.w	r1, r1, #1
   8248c:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8248e:	681b      	ldr	r3, [r3, #0]
   82490:	6818      	ldr	r0, [r3, #0]
   82492:	b938      	cbnz	r0, 824a4 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   82494:	f240 0334 	movw	r3, #52	; 0x34
   82498:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8249c:	f04f 30ff 	mov.w	r0, #4294967295
   824a0:	6018      	str	r0, [r3, #0]
   824a2:	e00c      	b.n	824be <vTaskIncrementTick+0x9e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   824a4:	f64a 12dc 	movw	r2, #43484	; 0xa9dc
   824a8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   824ac:	6811      	ldr	r1, [r2, #0]
   824ae:	68cb      	ldr	r3, [r1, #12]
   824b0:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   824b2:	6842      	ldr	r2, [r0, #4]
   824b4:	f240 0134 	movw	r1, #52	; 0x34
   824b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   824bc:	600a      	str	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   824be:	f64a 2298 	movw	r2, #43672	; 0xaa98
   824c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   824c6:	6811      	ldr	r1, [r2, #0]
   824c8:	f240 0334 	movw	r3, #52	; 0x34
   824cc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824d0:	6818      	ldr	r0, [r3, #0]
   824d2:	4281      	cmp	r1, r0
   824d4:	d369      	bcc.n	825aa <vTaskIncrementTick+0x18a>
   824d6:	f64a 12dc 	movw	r2, #43484	; 0xa9dc
   824da:	f2c2 0207 	movt	r2, #8199	; 0x2007
   824de:	6811      	ldr	r1, [r2, #0]
   824e0:	680b      	ldr	r3, [r1, #0]
   824e2:	b17b      	cbz	r3, 82504 <vTaskIncrementTick+0xe4>
   824e4:	f64a 14dc 	movw	r4, #43484	; 0xa9dc
   824e8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   824ec:	6820      	ldr	r0, [r4, #0]
   824ee:	68c2      	ldr	r2, [r0, #12]
   824f0:	68d4      	ldr	r4, [r2, #12]
   824f2:	6863      	ldr	r3, [r4, #4]
   824f4:	f64a 2198 	movw	r1, #43672	; 0xaa98
   824f8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   824fc:	6808      	ldr	r0, [r1, #0]
   824fe:	4283      	cmp	r3, r0
   82500:	d91a      	bls.n	82538 <vTaskIncrementTick+0x118>
   82502:	e012      	b.n	8252a <vTaskIncrementTick+0x10a>
   82504:	f240 0334 	movw	r3, #52	; 0x34
   82508:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8250c:	f04f 30ff 	mov.w	r0, #4294967295
   82510:	6018      	str	r0, [r3, #0]
   82512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82516:	6834      	ldr	r4, [r6, #0]
   82518:	68e2      	ldr	r2, [r4, #12]
   8251a:	68d4      	ldr	r4, [r2, #12]
   8251c:	6863      	ldr	r3, [r4, #4]
   8251e:	4648      	mov	r0, r9
   82520:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82524:	6801      	ldr	r1, [r0, #0]
   82526:	428b      	cmp	r3, r1
   82528:	d91c      	bls.n	82564 <vTaskIncrementTick+0x144>
   8252a:	f240 0234 	movw	r2, #52	; 0x34
   8252e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82532:	6013      	str	r3, [r2, #0]
   82534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82538:	f241 6755 	movw	r7, #5717	; 0x1655
   8253c:	f2c0 0708 	movt	r7, #8
   82540:	f64a 2810 	movw	r8, #43536	; 0xaa10
   82544:	f2c2 0807 	movt	r8, #8199	; 0x2007
   82548:	f64a 2b14 	movw	fp, #43540	; 0xaa14
   8254c:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   82550:	f241 5af9 	movw	sl, #5625	; 0x15f9
   82554:	f2c0 0a08 	movt	sl, #8
   82558:	f64a 16dc 	movw	r6, #43484	; 0xa9dc
   8255c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82560:	f64a 2998 	movw	r9, #43672	; 0xaa98
   82564:	f104 0504 	add.w	r5, r4, #4
   82568:	4628      	mov	r0, r5
   8256a:	47b8      	blx	r7
   8256c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8256e:	b113      	cbz	r3, 82576 <vTaskIncrementTick+0x156>
   82570:	f104 0018 	add.w	r0, r4, #24
   82574:	47b8      	blx	r7
   82576:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   82578:	f8d8 2000 	ldr.w	r2, [r8]
   8257c:	4291      	cmp	r1, r2
   8257e:	bf88      	it	hi
   82580:	f8c8 1000 	strhi.w	r1, [r8]
   82584:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82588:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   8258c:	4629      	mov	r1, r5
   8258e:	47d0      	blx	sl
   82590:	6833      	ldr	r3, [r6, #0]
   82592:	6819      	ldr	r1, [r3, #0]
   82594:	2900      	cmp	r1, #0
   82596:	d1be      	bne.n	82516 <vTaskIncrementTick+0xf6>
   82598:	e7b4      	b.n	82504 <vTaskIncrementTick+0xe4>
	}
	else
	{
		++uxMissedTicks;
   8259a:	f64a 11c4 	movw	r1, #43460	; 0xa9c4
   8259e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   825a2:	680a      	ldr	r2, [r1, #0]
   825a4:	f102 0201 	add.w	r2, r2, #1
   825a8:	600a      	str	r2, [r1, #0]
   825aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825ae:	bf00      	nop

000825b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   825b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   825b4:	f64a 2378 	movw	r3, #43640	; 0xaa78
   825b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   825bc:	6818      	ldr	r0, [r3, #0]
   825be:	b930      	cbnz	r0, 825ce <xTaskResumeAll+0x1e>
   825c0:	f241 65e5 	movw	r5, #5861	; 0x16e5
   825c4:	f2c0 0508 	movt	r5, #8
   825c8:	47a8      	blx	r5
   825ca:	bf00      	nop
   825cc:	e7fd      	b.n	825ca <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   825ce:	f241 61f9 	movw	r1, #5881	; 0x16f9
   825d2:	f2c0 0108 	movt	r1, #8
   825d6:	4788      	blx	r1
	{
		--uxSchedulerSuspended;
   825d8:	f64a 2478 	movw	r4, #43640	; 0xaa78
   825dc:	f2c2 0407 	movt	r4, #8199	; 0x2007
   825e0:	6822      	ldr	r2, [r4, #0]
   825e2:	f102 33ff 	add.w	r3, r2, #4294967295
   825e6:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   825e8:	6820      	ldr	r0, [r4, #0]
   825ea:	2800      	cmp	r0, #0
   825ec:	d178      	bne.n	826e0 <xTaskResumeAll+0x130>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   825ee:	f64a 21bc 	movw	r1, #43708	; 0xaabc
   825f2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   825f6:	680c      	ldr	r4, [r1, #0]
   825f8:	bb4c      	cbnz	r4, 8264e <xTaskResumeAll+0x9e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   825fa:	f04f 0400 	mov.w	r4, #0
   825fe:	e074      	b.n	826ea <xTaskResumeAll+0x13a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   82600:	f8d8 200c 	ldr.w	r2, [r8, #12]
   82604:	68d4      	ldr	r4, [r2, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   82606:	f104 0018 	add.w	r0, r4, #24
   8260a:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8260c:	f104 0904 	add.w	r9, r4, #4
   82610:	4648      	mov	r0, r9
   82612:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   82614:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82616:	6830      	ldr	r0, [r6, #0]
   82618:	4283      	cmp	r3, r0
   8261a:	bf88      	it	hi
   8261c:	6033      	strhi	r3, [r6, #0]
   8261e:	4651      	mov	r1, sl
   82620:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82624:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   82628:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   8262c:	4649      	mov	r1, r9
   8262e:	f241 53f9 	movw	r3, #5625	; 0x15f9
   82632:	f2c0 0308 	movt	r3, #8
   82636:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82638:	f64a 207c 	movw	r0, #43644	; 0xaa7c
   8263c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82640:	6801      	ldr	r1, [r0, #0]
   82642:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   82644:	6aca      	ldr	r2, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   82646:	4294      	cmp	r4, r2
   82648:	bf28      	it	cs
   8264a:	2501      	movcs	r5, #1
   8264c:	e00f      	b.n	8266e <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   8264e:	f04f 0500 	mov.w	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82652:	f64a 2880 	movw	r8, #43648	; 0xaa80
   82656:	f2c2 0807 	movt	r8, #8199	; 0x2007
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   8265a:	f241 6755 	movw	r7, #5717	; 0x1655
   8265e:	f2c0 0708 	movt	r7, #8
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   82662:	f64a 2610 	movw	r6, #43536	; 0xaa10
   82666:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8266a:	f64a 2a14 	movw	sl, #43540	; 0xaa14
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8266e:	f8d8 2000 	ldr.w	r2, [r8]
   82672:	2a00      	cmp	r2, #0
   82674:	d1c4      	bne.n	82600 <xTaskResumeAll+0x50>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82676:	f64a 13c4 	movw	r3, #43460	; 0xa9c4
   8267a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8267e:	6818      	ldr	r0, [r3, #0]
   82680:	b1b0      	cbz	r0, 826b0 <xTaskResumeAll+0x100>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82682:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   82686:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8268a:	6813      	ldr	r3, [r2, #0]
   8268c:	b1cb      	cbz	r3, 826c2 <xTaskResumeAll+0x112>
					{
						vTaskIncrementTick();
   8268e:	f242 4521 	movw	r5, #9249	; 0x2421
   82692:	f2c0 0508 	movt	r5, #8
						--uxMissedTicks;
   82696:	f64a 14c4 	movw	r4, #43460	; 0xa9c4
   8269a:	f2c2 0407 	movt	r4, #8199	; 0x2007
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   8269e:	47a8      	blx	r5
						--uxMissedTicks;
   826a0:	6820      	ldr	r0, [r4, #0]
   826a2:	f100 31ff 	add.w	r1, r0, #4294967295
   826a6:	6021      	str	r1, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   826a8:	6822      	ldr	r2, [r4, #0]
   826aa:	2a00      	cmp	r2, #0
   826ac:	d1f7      	bne.n	8269e <xTaskResumeAll+0xee>
   826ae:	e008      	b.n	826c2 <xTaskResumeAll+0x112>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   826b0:	2d01      	cmp	r5, #1
   826b2:	d006      	beq.n	826c2 <xTaskResumeAll+0x112>
   826b4:	f64a 21b8 	movw	r1, #43704	; 0xaab8
   826b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   826bc:	680c      	ldr	r4, [r1, #0]
   826be:	2c01      	cmp	r4, #1
   826c0:	d111      	bne.n	826e6 <xTaskResumeAll+0x136>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   826c2:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   826c6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826ca:	f04f 0400 	mov.w	r4, #0
   826ce:	601c      	str	r4, [r3, #0]
					portYIELD_WITHIN_API();
   826d0:	f241 60d5 	movw	r0, #5845	; 0x16d5
   826d4:	f2c0 0008 	movt	r0, #8
   826d8:	4780      	blx	r0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   826da:	f04f 0401 	mov.w	r4, #1
   826de:	e004      	b.n	826ea <xTaskResumeAll+0x13a>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   826e0:	f04f 0400 	mov.w	r4, #0
   826e4:	e001      	b.n	826ea <xTaskResumeAll+0x13a>
   826e6:	f04f 0400 	mov.w	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   826ea:	f241 7121 	movw	r1, #5921	; 0x1721
   826ee:	f2c0 0108 	movt	r1, #8
   826f2:	4788      	blx	r1

	return xAlreadyYielded;
}
   826f4:	4620      	mov	r0, r4
   826f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   826fa:	bf00      	nop

000826fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   826fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82700:	f64a 15e4 	movw	r5, #43492	; 0xa9e4
   82704:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			vTaskSuspendAll();
   82708:	f242 38e9 	movw	r8, #9193	; 0x23e9
   8270c:	f2c0 0808 	movt	r8, #8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82710:	f64a 16e8 	movw	r6, #43496	; 0xa9e8
   82714:	f2c2 0607 	movt	r6, #8199	; 0x2007
			xTaskResumeAll();
   82718:	f242 57b1 	movw	r7, #9649	; 0x25b1
   8271c:	e02d      	b.n	8277a <prvIdleTask+0x7e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8271e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82720:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   82722:	463b      	mov	r3, r7
   82724:	f2c0 0308 	movt	r3, #8
   82728:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   8272a:	b334      	cbz	r4, 8277a <prvIdleTask+0x7e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8272c:	f241 60f9 	movw	r0, #5881	; 0x16f9
   82730:	f2c0 0008 	movt	r0, #8
   82734:	4780      	blx	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   82736:	68f1      	ldr	r1, [r6, #12]
   82738:	68cc      	ldr	r4, [r1, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8273a:	f104 0004 	add.w	r0, r4, #4
   8273e:	f241 6255 	movw	r2, #5717	; 0x1655
   82742:	f2c0 0208 	movt	r2, #8
   82746:	4790      	blx	r2
					--uxCurrentNumberOfTasks;
   82748:	f64a 23bc 	movw	r3, #43708	; 0xaabc
   8274c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82750:	6818      	ldr	r0, [r3, #0]
   82752:	f100 31ff 	add.w	r1, r0, #4294967295
   82756:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
   82758:	682a      	ldr	r2, [r5, #0]
   8275a:	f102 33ff 	add.w	r3, r2, #4294967295
   8275e:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   82760:	f241 7021 	movw	r0, #5921	; 0x1721
   82764:	f2c0 0008 	movt	r0, #8
   82768:	4780      	blx	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   8276a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8276c:	f641 1975 	movw	r9, #6517	; 0x1975
   82770:	f2c0 0908 	movt	r9, #8
   82774:	47c8      	blx	r9
		vPortFree( pxTCB );
   82776:	4620      	mov	r0, r4
   82778:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8277a:	682b      	ldr	r3, [r5, #0]
   8277c:	2b00      	cmp	r3, #0
   8277e:	d1ce      	bne.n	8271e <prvIdleTask+0x22>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82780:	f64a 2014 	movw	r0, #43540	; 0xaa14
   82784:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82788:	6801      	ldr	r1, [r0, #0]
   8278a:	2901      	cmp	r1, #1
   8278c:	d9f5      	bls.n	8277a <prvIdleTask+0x7e>
			{
				taskYIELD();
   8278e:	f241 62d5 	movw	r2, #5845	; 0x16d5
   82792:	f2c0 0208 	movt	r2, #8
   82796:	4790      	blx	r2
   82798:	e7ef      	b.n	8277a <prvIdleTask+0x7e>
   8279a:	bf00      	nop

0008279c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   8279c:	b538      	push	{r3, r4, r5, lr}
   8279e:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   827a0:	4605      	mov	r5, r0
   827a2:	b930      	cbnz	r0, 827b2 <vTaskDelayUntil+0x16>
   827a4:	f241 64e5 	movw	r4, #5861	; 0x16e5
   827a8:	f2c0 0408 	movt	r4, #8
   827ac:	47a0      	blx	r4
   827ae:	bf00      	nop
   827b0:	e7fd      	b.n	827ae <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
   827b2:	b931      	cbnz	r1, 827c2 <vTaskDelayUntil+0x26>
   827b4:	f241 65e5 	movw	r5, #5861	; 0x16e5
   827b8:	f2c0 0508 	movt	r5, #8
   827bc:	47a8      	blx	r5
   827be:	bf00      	nop
   827c0:	e7fd      	b.n	827be <vTaskDelayUntil+0x22>

		vTaskSuspendAll();
   827c2:	f242 33e9 	movw	r3, #9193	; 0x23e9
   827c6:	f2c0 0308 	movt	r3, #8
   827ca:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   827cc:	6828      	ldr	r0, [r5, #0]
   827ce:	1904      	adds	r4, r0, r4

			if( xTickCount < *pxPreviousWakeTime )
   827d0:	f64a 2298 	movw	r2, #43672	; 0xaa98
   827d4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   827d8:	6811      	ldr	r1, [r2, #0]
   827da:	4288      	cmp	r0, r1
   827dc:	d90a      	bls.n	827f4 <vTaskDelayUntil+0x58>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   827de:	42a0      	cmp	r0, r4
   827e0:	d932      	bls.n	82848 <vTaskDelayUntil+0xac>
   827e2:	f64a 2298 	movw	r2, #43672	; 0xaa98
   827e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   827ea:	6811      	ldr	r1, [r2, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   827ec:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   827ee:	428c      	cmp	r4, r1
   827f0:	d91c      	bls.n	8282c <vTaskDelayUntil+0x90>
   827f2:	e009      	b.n	82808 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   827f4:	42a0      	cmp	r0, r4
   827f6:	d825      	bhi.n	82844 <vTaskDelayUntil+0xa8>
   827f8:	f64a 2398 	movw	r3, #43672	; 0xaa98
   827fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82800:	6818      	ldr	r0, [r3, #0]
   82802:	4284      	cmp	r4, r0
   82804:	d81e      	bhi.n	82844 <vTaskDelayUntil+0xa8>
   82806:	e01f      	b.n	82848 <vTaskDelayUntil+0xac>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82808:	f64a 237c 	movw	r3, #43644	; 0xaa7c
   8280c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82810:	6818      	ldr	r0, [r3, #0]
   82812:	f100 0004 	add.w	r0, r0, #4
   82816:	f241 6255 	movw	r2, #5717	; 0x1655
   8281a:	f2c0 0208 	movt	r2, #8
   8281e:	4790      	blx	r2
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82820:	4620      	mov	r0, r4
   82822:	f242 0141 	movw	r1, #8257	; 0x2041
   82826:	f2c0 0108 	movt	r1, #8
   8282a:	4788      	blx	r1
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   8282c:	f242 50b1 	movw	r0, #9649	; 0x25b1
   82830:	f2c0 0008 	movt	r0, #8
   82834:	4780      	blx	r0

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82836:	b948      	cbnz	r0, 8284c <vTaskDelayUntil+0xb0>
		{
			portYIELD_WITHIN_API();
   82838:	f241 63d5 	movw	r3, #5845	; 0x16d5
   8283c:	f2c0 0308 	movt	r3, #8
   82840:	4798      	blx	r3
   82842:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82844:	602c      	str	r4, [r5, #0]
   82846:	e7df      	b.n	82808 <vTaskDelayUntil+0x6c>
   82848:	602c      	str	r4, [r5, #0]
   8284a:	e7ef      	b.n	8282c <vTaskDelayUntil+0x90>
   8284c:	bd38      	pop	{r3, r4, r5, pc}
   8284e:	bf00      	nop

00082850 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82850:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   82852:	f64a 2378 	movw	r3, #43640	; 0xaa78
   82856:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8285a:	6818      	ldr	r0, [r3, #0]
   8285c:	b9a8      	cbnz	r0, 8288a <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8285e:	f64a 2110 	movw	r1, #43536	; 0xaa10
   82862:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82866:	680a      	ldr	r2, [r1, #0]
   82868:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   8286c:	ea4f 0083 	mov.w	r0, r3, lsl #2
   82870:	f64a 2114 	movw	r1, #43540	; 0xaa14
   82874:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82878:	580a      	ldr	r2, [r1, r0]
   8287a:	bb52      	cbnz	r2, 828d2 <vTaskSwitchContext+0x82>
   8287c:	f64a 2310 	movw	r3, #43536	; 0xaa10
   82880:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82884:	6818      	ldr	r0, [r3, #0]
   82886:	b988      	cbnz	r0, 828ac <vTaskSwitchContext+0x5c>
   82888:	e009      	b.n	8289e <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   8288a:	f64a 21b8 	movw	r1, #43704	; 0xaab8
   8288e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82892:	f04f 0001 	mov.w	r0, #1
   82896:	6008      	str	r0, [r1, #0]
   82898:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8289a:	681a      	ldr	r2, [r3, #0]
   8289c:	b972      	cbnz	r2, 828bc <vTaskSwitchContext+0x6c>
   8289e:	f241 63e5 	movw	r3, #5861	; 0x16e5
   828a2:	f2c0 0308 	movt	r3, #8
   828a6:	4798      	blx	r3
   828a8:	bf00      	nop
   828aa:	e7fd      	b.n	828a8 <vTaskSwitchContext+0x58>
   828ac:	f64a 2310 	movw	r3, #43536	; 0xaa10
   828b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   828b4:	f64a 2114 	movw	r1, #43540	; 0xaa14
   828b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828bc:	681a      	ldr	r2, [r3, #0]
   828be:	f102 30ff 	add.w	r0, r2, #4294967295
   828c2:	6018      	str	r0, [r3, #0]
   828c4:	681a      	ldr	r2, [r3, #0]
   828c6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   828ca:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   828ce:	2a00      	cmp	r2, #0
   828d0:	d0e3      	beq.n	8289a <vTaskSwitchContext+0x4a>
   828d2:	f64a 2310 	movw	r3, #43536	; 0xaa10
   828d6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   828da:	6819      	ldr	r1, [r3, #0]
   828dc:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   828e0:	f64a 2214 	movw	r2, #43540	; 0xaa14
   828e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   828e8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   828ec:	6859      	ldr	r1, [r3, #4]
   828ee:	6848      	ldr	r0, [r1, #4]
   828f0:	6058      	str	r0, [r3, #4]
   828f2:	f103 0208 	add.w	r2, r3, #8
   828f6:	4290      	cmp	r0, r2
   828f8:	bf04      	itt	eq
   828fa:	6840      	ldreq	r0, [r0, #4]
   828fc:	6058      	streq	r0, [r3, #4]
   828fe:	685b      	ldr	r3, [r3, #4]
   82900:	68d9      	ldr	r1, [r3, #12]
   82902:	f64a 207c 	movw	r0, #43644	; 0xaa7c
   82906:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8290a:	6001      	str	r1, [r0, #0]
   8290c:	bd08      	pop	{r3, pc}
   8290e:	bf00      	nop

00082910 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   82910:	b538      	push	{r3, r4, r5, lr}
   82912:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   82914:	b930      	cbnz	r0, 82924 <vTaskPlaceOnEventList+0x14>
   82916:	f241 64e5 	movw	r4, #5861	; 0x16e5
   8291a:	f2c0 0408 	movt	r4, #8
   8291e:	47a0      	blx	r4
   82920:	bf00      	nop
   82922:	e7fd      	b.n	82920 <vTaskPlaceOnEventList+0x10>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82924:	f64a 257c 	movw	r5, #43644	; 0xaa7c
   82928:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8292c:	6829      	ldr	r1, [r5, #0]
   8292e:	f101 0118 	add.w	r1, r1, #24
   82932:	f241 6219 	movw	r2, #5657	; 0x1619
   82936:	f2c0 0208 	movt	r2, #8
   8293a:	4790      	blx	r2

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8293c:	6828      	ldr	r0, [r5, #0]
   8293e:	f100 0004 	add.w	r0, r0, #4
   82942:	f241 6155 	movw	r1, #5717	; 0x1655
   82946:	f2c0 0108 	movt	r1, #8
   8294a:	4788      	blx	r1
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   8294c:	f1b4 3fff 	cmp.w	r4, #4294967295
   82950:	d10c      	bne.n	8296c <vTaskPlaceOnEventList+0x5c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82952:	6829      	ldr	r1, [r5, #0]
   82954:	f64a 10c8 	movw	r0, #43464	; 0xa9c8
   82958:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8295c:	f101 0104 	add.w	r1, r1, #4
   82960:	f241 53f9 	movw	r3, #5625	; 0x15f9
   82964:	f2c0 0308 	movt	r3, #8
   82968:	4798      	blx	r3
   8296a:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   8296c:	f64a 2098 	movw	r0, #43672	; 0xaa98
   82970:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82974:	6803      	ldr	r3, [r0, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   82976:	18e0      	adds	r0, r4, r3
   82978:	f242 0241 	movw	r2, #8257	; 0x2041
   8297c:	f2c0 0208 	movt	r2, #8
   82980:	4790      	blx	r2
   82982:	bd38      	pop	{r3, r4, r5, pc}

00082984 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   82984:	b538      	push	{r3, r4, r5, lr}
   82986:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   82988:	b930      	cbnz	r0, 82998 <vTaskPlaceOnEventListRestricted+0x14>
   8298a:	f241 64e5 	movw	r4, #5861	; 0x16e5
   8298e:	f2c0 0408 	movt	r4, #8
   82992:	47a0      	blx	r4
   82994:	bf00      	nop
   82996:	e7fd      	b.n	82994 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82998:	f64a 247c 	movw	r4, #43644	; 0xaa7c
   8299c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   829a0:	6821      	ldr	r1, [r4, #0]
   829a2:	f101 0118 	add.w	r1, r1, #24
   829a6:	f241 52f9 	movw	r2, #5625	; 0x15f9
   829aa:	f2c0 0208 	movt	r2, #8
   829ae:	4790      	blx	r2

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   829b0:	6820      	ldr	r0, [r4, #0]
   829b2:	f100 0004 	add.w	r0, r0, #4
   829b6:	f241 6155 	movw	r1, #5717	; 0x1655
   829ba:	f2c0 0108 	movt	r1, #8
   829be:	4788      	blx	r1
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   829c0:	f64a 2098 	movw	r0, #43672	; 0xaa98
   829c4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   829c8:	6803      	ldr	r3, [r0, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   829ca:	18e8      	adds	r0, r5, r3
   829cc:	f242 0241 	movw	r2, #8257	; 0x2041
   829d0:	f2c0 0208 	movt	r2, #8
   829d4:	4790      	blx	r2
   829d6:	bd38      	pop	{r3, r4, r5, pc}

000829d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   829d8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   829da:	68c3      	ldr	r3, [r0, #12]
   829dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   829de:	b934      	cbnz	r4, 829ee <xTaskRemoveFromEventList+0x16>
   829e0:	f241 64e5 	movw	r4, #5861	; 0x16e5
   829e4:	f2c0 0408 	movt	r4, #8
   829e8:	47a0      	blx	r4
   829ea:	bf00      	nop
   829ec:	e7fd      	b.n	829ea <xTaskRemoveFromEventList+0x12>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   829ee:	f104 0518 	add.w	r5, r4, #24
   829f2:	4628      	mov	r0, r5
   829f4:	f241 6155 	movw	r1, #5717	; 0x1655
   829f8:	f2c0 0108 	movt	r1, #8
   829fc:	4788      	blx	r1

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   829fe:	f64a 2078 	movw	r0, #43640	; 0xaa78
   82a02:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82a06:	6802      	ldr	r2, [r0, #0]
   82a08:	bb22      	cbnz	r2, 82a54 <xTaskRemoveFromEventList+0x7c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   82a0a:	f104 0504 	add.w	r5, r4, #4
   82a0e:	4628      	mov	r0, r5
   82a10:	f241 6155 	movw	r1, #5717	; 0x1655
   82a14:	f2c0 0108 	movt	r1, #8
   82a18:	4788      	blx	r1
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   82a1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82a1c:	f64a 2210 	movw	r2, #43536	; 0xaa10
   82a20:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a24:	6813      	ldr	r3, [r2, #0]
   82a26:	4298      	cmp	r0, r3
   82a28:	d904      	bls.n	82a34 <xTaskRemoveFromEventList+0x5c>
   82a2a:	f64a 2110 	movw	r1, #43536	; 0xaa10
   82a2e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82a32:	6008      	str	r0, [r1, #0]
   82a34:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82a38:	f64a 2014 	movw	r0, #43540	; 0xaa14
   82a3c:	4602      	mov	r2, r0
   82a3e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a42:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   82a46:	4629      	mov	r1, r5
   82a48:	f241 53f9 	movw	r3, #5625	; 0x15f9
   82a4c:	f2c0 0308 	movt	r3, #8
   82a50:	4798      	blx	r3
   82a52:	e009      	b.n	82a68 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   82a54:	f64a 2080 	movw	r0, #43648	; 0xaa80
   82a58:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82a5c:	4629      	mov	r1, r5
   82a5e:	f241 53f9 	movw	r3, #5625	; 0x15f9
   82a62:	f2c0 0308 	movt	r3, #8
   82a66:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82a68:	f64a 217c 	movw	r1, #43644	; 0xaa7c
   82a6c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82a70:	680a      	ldr	r2, [r1, #0]
   82a72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82a74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   82a76:	4298      	cmp	r0, r3
   82a78:	bf34      	ite	cc
   82a7a:	2000      	movcc	r0, #0
   82a7c:	2001      	movcs	r0, #1
   82a7e:	bd38      	pop	{r3, r4, r5, pc}

00082a80 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   82a80:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   82a82:	4603      	mov	r3, r0
   82a84:	b930      	cbnz	r0, 82a94 <vTaskSetTimeOutState+0x14>
   82a86:	f241 63e5 	movw	r3, #5861	; 0x16e5
   82a8a:	f2c0 0308 	movt	r3, #8
   82a8e:	4798      	blx	r3
   82a90:	bf00      	nop
   82a92:	e7fd      	b.n	82a90 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   82a94:	f64a 2294 	movw	r2, #43668	; 0xaa94
   82a98:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a9c:	6810      	ldr	r0, [r2, #0]
   82a9e:	6018      	str	r0, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   82aa0:	f64a 2198 	movw	r1, #43672	; 0xaa98
   82aa4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82aa8:	680a      	ldr	r2, [r1, #0]
   82aaa:	605a      	str	r2, [r3, #4]
   82aac:	bd08      	pop	{r3, pc}
   82aae:	bf00      	nop

00082ab0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82ab0:	b538      	push	{r3, r4, r5, lr}
   82ab2:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82ab4:	4604      	mov	r4, r0
   82ab6:	b930      	cbnz	r0, 82ac6 <xTaskCheckForTimeOut+0x16>
   82ab8:	f241 62e5 	movw	r2, #5861	; 0x16e5
   82abc:	f2c0 0208 	movt	r2, #8
   82ac0:	4790      	blx	r2
   82ac2:	bf00      	nop
   82ac4:	e7fd      	b.n	82ac2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   82ac6:	b931      	cbnz	r1, 82ad6 <xTaskCheckForTimeOut+0x26>
   82ac8:	f241 65e5 	movw	r5, #5861	; 0x16e5
   82acc:	f2c0 0508 	movt	r5, #8
   82ad0:	47a8      	blx	r5
   82ad2:	bf00      	nop
   82ad4:	e7fd      	b.n	82ad2 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
   82ad6:	f241 63f9 	movw	r3, #5881	; 0x16f9
   82ada:	f2c0 0308 	movt	r3, #8
   82ade:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   82ae0:	6828      	ldr	r0, [r5, #0]
   82ae2:	f1b0 3fff 	cmp.w	r0, #4294967295
   82ae6:	d029      	beq.n	82b3c <xTaskCheckForTimeOut+0x8c>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   82ae8:	f64a 2294 	movw	r2, #43668	; 0xaa94
   82aec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82af0:	6811      	ldr	r1, [r2, #0]
   82af2:	6823      	ldr	r3, [r4, #0]
   82af4:	428b      	cmp	r3, r1
   82af6:	d007      	beq.n	82b08 <xTaskCheckForTimeOut+0x58>
   82af8:	f64a 2298 	movw	r2, #43672	; 0xaa98
   82afc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b00:	6811      	ldr	r1, [r2, #0]
   82b02:	6863      	ldr	r3, [r4, #4]
   82b04:	428b      	cmp	r3, r1
   82b06:	d91c      	bls.n	82b42 <xTaskCheckForTimeOut+0x92>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   82b08:	f64a 2298 	movw	r2, #43672	; 0xaa98
   82b0c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b10:	6811      	ldr	r1, [r2, #0]
   82b12:	6863      	ldr	r3, [r4, #4]
   82b14:	1aca      	subs	r2, r1, r3
   82b16:	4290      	cmp	r0, r2
   82b18:	d916      	bls.n	82b48 <xTaskCheckForTimeOut+0x98>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   82b1a:	f64a 2198 	movw	r1, #43672	; 0xaa98
   82b1e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b22:	680a      	ldr	r2, [r1, #0]
   82b24:	1a9b      	subs	r3, r3, r2
   82b26:	1818      	adds	r0, r3, r0
   82b28:	6028      	str	r0, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82b2a:	4620      	mov	r0, r4
   82b2c:	f642 2481 	movw	r4, #10881	; 0x2a81
   82b30:	f2c0 0408 	movt	r4, #8
   82b34:	47a0      	blx	r4
			xReturn = pdFALSE;
   82b36:	f04f 0400 	mov.w	r4, #0
   82b3a:	e007      	b.n	82b4c <xTaskCheckForTimeOut+0x9c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82b3c:	f04f 0400 	mov.w	r4, #0
   82b40:	e004      	b.n	82b4c <xTaskCheckForTimeOut+0x9c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82b42:	f04f 0401 	mov.w	r4, #1
   82b46:	e001      	b.n	82b4c <xTaskCheckForTimeOut+0x9c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   82b48:	f04f 0401 	mov.w	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   82b4c:	f241 7121 	movw	r1, #5921	; 0x1721
   82b50:	f2c0 0108 	movt	r1, #8
   82b54:	4788      	blx	r1

	return xReturn;
}
   82b56:	4620      	mov	r0, r4
   82b58:	bd38      	pop	{r3, r4, r5, pc}
   82b5a:	bf00      	nop

00082b5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   82b5c:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   82b60:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b64:	f04f 0201 	mov.w	r2, #1
   82b68:	601a      	str	r2, [r3, #0]
   82b6a:	4770      	bx	lr

00082b6c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82b6c:	f64a 237c 	movw	r3, #43644	; 0xaa7c
   82b70:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b74:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   82b76:	4770      	bx	lr

00082b78 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   82b78:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   82b7c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b80:	6818      	ldr	r0, [r3, #0]
   82b82:	b148      	cbz	r0, 82b98 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82b84:	f64a 2178 	movw	r1, #43640	; 0xaa78
   82b88:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b8c:	680a      	ldr	r2, [r1, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   82b8e:	2a00      	cmp	r2, #0
   82b90:	bf14      	ite	ne
   82b92:	2002      	movne	r0, #2
   82b94:	2001      	moveq	r0, #1
   82b96:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82b98:	f04f 0000 	mov.w	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   82b9c:	4770      	bx	lr
   82b9e:	bf00      	nop

00082ba0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   82ba0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   82ba2:	4604      	mov	r4, r0
   82ba4:	2800      	cmp	r0, #0
   82ba6:	d04e      	beq.n	82c46 <vTaskPriorityInherit+0xa6>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   82ba8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82baa:	f64a 227c 	movw	r2, #43644	; 0xaa7c
   82bae:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82bb2:	6810      	ldr	r0, [r2, #0]
   82bb4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82bb6:	428b      	cmp	r3, r1
   82bb8:	d245      	bcs.n	82c46 <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   82bba:	f64a 227c 	movw	r2, #43644	; 0xaa7c
   82bbe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82bc2:	6810      	ldr	r0, [r2, #0]
   82bc4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82bc6:	f1c1 0205 	rsb	r2, r1, #5
   82bca:	61a2      	str	r2, [r4, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82bcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82bd0:	f64a 2014 	movw	r0, #43540	; 0xaa14
   82bd4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82bd8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   82bdc:	6962      	ldr	r2, [r4, #20]
   82bde:	428a      	cmp	r2, r1
   82be0:	d12a      	bne.n	82c38 <vTaskPriorityInherit+0x98>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82be2:	f104 0504 	add.w	r5, r4, #4
   82be6:	4628      	mov	r0, r5
   82be8:	f241 6255 	movw	r2, #5717	; 0x1655
   82bec:	f2c0 0208 	movt	r2, #8
   82bf0:	4790      	blx	r2
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82bf2:	f64a 237c 	movw	r3, #43644	; 0xaa7c
   82bf6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82bfa:	6818      	ldr	r0, [r3, #0]
   82bfc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82bfe:	62e1      	str	r1, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82c00:	f64a 2210 	movw	r2, #43536	; 0xaa10
   82c04:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82c08:	6813      	ldr	r3, [r2, #0]
   82c0a:	4299      	cmp	r1, r3
   82c0c:	d904      	bls.n	82c18 <vTaskPriorityInherit+0x78>
   82c0e:	f64a 2010 	movw	r0, #43536	; 0xaa10
   82c12:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c16:	6001      	str	r1, [r0, #0]
   82c18:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82c1c:	f64a 2214 	movw	r2, #43540	; 0xaa14
   82c20:	4613      	mov	r3, r2
   82c22:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82c26:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   82c2a:	4629      	mov	r1, r5
   82c2c:	f241 52f9 	movw	r2, #5625	; 0x15f9
   82c30:	f2c0 0208 	movt	r2, #8
   82c34:	4790      	blx	r2
   82c36:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82c38:	f64a 237c 	movw	r3, #43644	; 0xaa7c
   82c3c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82c40:	6818      	ldr	r0, [r3, #0]
   82c42:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82c44:	62e1      	str	r1, [r4, #44]	; 0x2c
   82c46:	bd38      	pop	{r3, r4, r5, pc}

00082c48 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82c48:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82c4a:	4604      	mov	r4, r0
   82c4c:	b350      	cbz	r0, 82ca4 <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82c4e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82c50:	6c83      	ldr	r3, [r0, #72]	; 0x48
   82c52:	429a      	cmp	r2, r3
   82c54:	d026      	beq.n	82ca4 <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82c56:	f100 0504 	add.w	r5, r0, #4
   82c5a:	4628      	mov	r0, r5
   82c5c:	f241 6155 	movw	r1, #5717	; 0x1655
   82c60:	f2c0 0108 	movt	r1, #8
   82c64:	4788      	blx	r1
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   82c66:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82c68:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82c6a:	f1c0 0205 	rsb	r2, r0, #5
   82c6e:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82c70:	f64a 2310 	movw	r3, #43536	; 0xaa10
   82c74:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82c78:	6819      	ldr	r1, [r3, #0]
   82c7a:	4288      	cmp	r0, r1
   82c7c:	d904      	bls.n	82c88 <vTaskPriorityDisinherit+0x40>
   82c7e:	f64a 2210 	movw	r2, #43536	; 0xaa10
   82c82:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82c86:	6010      	str	r0, [r2, #0]
   82c88:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82c8c:	f64a 2014 	movw	r0, #43540	; 0xaa14
   82c90:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c94:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82c98:	4629      	mov	r1, r5
   82c9a:	f241 52f9 	movw	r2, #5625	; 0x15f9
   82c9e:	f2c0 0208 	movt	r2, #8
   82ca2:	4790      	blx	r2
   82ca4:	bd38      	pop	{r3, r4, r5, pc}
   82ca6:	bf00      	nop

00082ca8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82ca8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82caa:	f241 63f9 	movw	r3, #5881	; 0x16f9
   82cae:	f2c0 0308 	movt	r3, #8
   82cb2:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   82cb4:	f64a 20f4 	movw	r0, #43764	; 0xaaf4
   82cb8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82cbc:	6801      	ldr	r1, [r0, #0]
   82cbe:	bb49      	cbnz	r1, 82d14 <prvCheckForValidListAndQueue+0x6c>
		{
			vListInitialise( &xActiveTimerList1 );
   82cc0:	f64a 25c8 	movw	r5, #43720	; 0xaac8
   82cc4:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82cc8:	4628      	mov	r0, r5
   82cca:	f241 56d9 	movw	r6, #5593	; 0x15d9
   82cce:	f2c0 0608 	movt	r6, #8
   82cd2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82cd4:	f64a 24dc 	movw	r4, #43740	; 0xaadc
   82cd8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82cdc:	4620      	mov	r0, r4
   82cde:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   82ce0:	f64a 22c4 	movw	r2, #43716	; 0xaac4
   82ce4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82ce8:	6015      	str	r5, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82cea:	f64a 23f8 	movw	r3, #43768	; 0xaaf8
   82cee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82cf2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82cf4:	f04f 0005 	mov.w	r0, #5
   82cf8:	f04f 010c 	mov.w	r1, #12
   82cfc:	f04f 0200 	mov.w	r2, #0
   82d00:	f641 3395 	movw	r3, #7061	; 0x1b95
   82d04:	f2c0 0308 	movt	r3, #8
   82d08:	4798      	blx	r3
   82d0a:	f64a 21f4 	movw	r1, #43764	; 0xaaf4
   82d0e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82d12:	6008      	str	r0, [r1, #0]
		}
	}
	taskEXIT_CRITICAL();
   82d14:	f241 7021 	movw	r0, #5921	; 0x1721
   82d18:	f2c0 0008 	movt	r0, #8
   82d1c:	4780      	blx	r0
   82d1e:	bd70      	pop	{r4, r5, r6, pc}

00082d20 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82d20:	b510      	push	{r4, lr}
   82d22:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   82d24:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82d26:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   82d28:	4291      	cmp	r1, r2
   82d2a:	d812      	bhi.n	82d52 <prvInsertTimerInActiveList+0x32>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   82d2c:	1ad0      	subs	r0, r2, r3
   82d2e:	69a1      	ldr	r1, [r4, #24]
   82d30:	4288      	cmp	r0, r1
   82d32:	d221      	bcs.n	82d78 <prvInsertTimerInActiveList+0x58>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   82d34:	f64a 23f8 	movw	r3, #43768	; 0xaaf8
   82d38:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82d3c:	6818      	ldr	r0, [r3, #0]
   82d3e:	f104 0104 	add.w	r1, r4, #4
   82d42:	f241 6219 	movw	r2, #5657	; 0x1619
   82d46:	f2c0 0208 	movt	r2, #8
   82d4a:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82d4c:	f04f 0000 	mov.w	r0, #0
   82d50:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   82d52:	429a      	cmp	r2, r3
   82d54:	d201      	bcs.n	82d5a <prvInsertTimerInActiveList+0x3a>
   82d56:	4299      	cmp	r1, r3
   82d58:	d211      	bcs.n	82d7e <prvInsertTimerInActiveList+0x5e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82d5a:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   82d5e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82d62:	6818      	ldr	r0, [r3, #0]
   82d64:	f104 0104 	add.w	r1, r4, #4
   82d68:	f241 6219 	movw	r2, #5657	; 0x1619
   82d6c:	f2c0 0208 	movt	r2, #8
   82d70:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82d72:	f04f 0000 	mov.w	r0, #0
   82d76:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   82d78:	f04f 0001 	mov.w	r0, #1
   82d7c:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   82d7e:	f04f 0001 	mov.w	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   82d82:	bd10      	pop	{r4, pc}

00082d84 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82d84:	b510      	push	{r4, lr}
   82d86:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82d88:	f642 43a9 	movw	r3, #11433	; 0x2ca9
   82d8c:	f2c0 0308 	movt	r3, #8
   82d90:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82d92:	f64a 20f4 	movw	r0, #43764	; 0xaaf4
   82d96:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82d9a:	6801      	ldr	r1, [r0, #0]
   82d9c:	b1b9      	cbz	r1, 82dce <xTimerCreateTimerTask+0x4a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   82d9e:	f04f 0204 	mov.w	r2, #4
   82da2:	9200      	str	r2, [sp, #0]
   82da4:	f04f 0300 	mov.w	r3, #0
   82da8:	9301      	str	r3, [sp, #4]
   82daa:	9302      	str	r3, [sp, #8]
   82dac:	9303      	str	r3, [sp, #12]
   82dae:	f642 7025 	movw	r0, #12069	; 0x2f25
   82db2:	f2c0 0008 	movt	r0, #8
   82db6:	f247 51e8 	movw	r1, #30184	; 0x75e8
   82dba:	f2c0 0108 	movt	r1, #8
   82dbe:	f44f 7282 	mov.w	r2, #260	; 0x104
   82dc2:	f242 04c1 	movw	r4, #8385	; 0x20c1
   82dc6:	f2c0 0408 	movt	r4, #8
   82dca:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82dcc:	b930      	cbnz	r0, 82ddc <xTimerCreateTimerTask+0x58>
   82dce:	f241 64e5 	movw	r4, #5861	; 0x16e5
   82dd2:	f2c0 0408 	movt	r4, #8
   82dd6:	47a0      	blx	r4
   82dd8:	bf00      	nop
   82dda:	e7fd      	b.n	82dd8 <xTimerCreateTimerTask+0x54>
	return xReturn;
}
   82ddc:	b004      	add	sp, #16
   82dde:	bd10      	pop	{r4, pc}

00082de0 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   82de0:	b510      	push	{r4, lr}
   82de2:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   82de4:	f64a 24f4 	movw	r4, #43764	; 0xaaf4
   82de8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82dec:	6824      	ldr	r4, [r4, #0]
   82dee:	b32c      	cbz	r4, 82e3c <xTimerGenericCommand+0x5c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   82df0:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82df2:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   82df4:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   82df6:	b9b3      	cbnz	r3, 82e26 <xTimerGenericCommand+0x46>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   82df8:	f642 3379 	movw	r3, #11129	; 0x2b79
   82dfc:	f2c0 0308 	movt	r3, #8
   82e00:	4798      	blx	r3
   82e02:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   82e04:	f64a 23f4 	movw	r3, #43764	; 0xaaf4
   82e08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82e0c:	6818      	ldr	r0, [r3, #0]
   82e0e:	a901      	add	r1, sp, #4
   82e10:	bf07      	ittee	eq
   82e12:	9a06      	ldreq	r2, [sp, #24]
   82e14:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   82e16:	2200      	movne	r2, #0
   82e18:	4613      	movne	r3, r2
   82e1a:	f641 4401 	movw	r4, #7169	; 0x1c01
   82e1e:	f2c0 0408 	movt	r4, #8
   82e22:	47a0      	blx	r4
   82e24:	e00c      	b.n	82e40 <xTimerGenericCommand+0x60>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   82e26:	4620      	mov	r0, r4
   82e28:	a901      	add	r1, sp, #4
   82e2a:	461a      	mov	r2, r3
   82e2c:	f04f 0300 	mov.w	r3, #0
   82e30:	f641 5475 	movw	r4, #7541	; 0x1d75
   82e34:	f2c0 0408 	movt	r4, #8
   82e38:	47a0      	blx	r4
   82e3a:	e001      	b.n	82e40 <xTimerGenericCommand+0x60>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   82e3c:	f04f 0000 	mov.w	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   82e40:	b004      	add	sp, #16
   82e42:	bd10      	pop	{r4, pc}

00082e44 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   82e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e48:	b085      	sub	sp, #20
   82e4a:	4682      	mov	sl, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   82e4c:	f242 33fd 	movw	r3, #9213	; 0x23fd
   82e50:	f2c0 0308 	movt	r3, #8
   82e54:	4798      	blx	r3
   82e56:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
   82e58:	f64a 20f0 	movw	r0, #43760	; 0xaaf0
   82e5c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82e60:	6801      	ldr	r1, [r0, #0]
   82e62:	4589      	cmp	r9, r1
   82e64:	d24f      	bcs.n	82f06 <prvSampleTimeNow+0xc2>
   82e66:	e02b      	b.n	82ec0 <prvSampleTimeNow+0x7c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82e68:	68dc      	ldr	r4, [r3, #12]
   82e6a:	6826      	ldr	r6, [r4, #0]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82e6c:	68dd      	ldr	r5, [r3, #12]
   82e6e:	68ec      	ldr	r4, [r5, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82e70:	f104 0504 	add.w	r5, r4, #4
   82e74:	4628      	mov	r0, r5
   82e76:	47c0      	blx	r8

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82e78:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82e7a:	4620      	mov	r0, r4
   82e7c:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82e7e:	69e0      	ldr	r0, [r4, #28]
   82e80:	2801      	cmp	r0, #1
   82e82:	d12c      	bne.n	82ede <prvSampleTimeNow+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82e84:	69a3      	ldr	r3, [r4, #24]
   82e86:	18f2      	adds	r2, r6, r3
			if( xReloadTime > xNextExpireTime )
   82e88:	42b2      	cmp	r2, r6
   82e8a:	d909      	bls.n	82ea0 <prvSampleTimeNow+0x5c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82e8c:	6062      	str	r2, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82e8e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82e90:	6838      	ldr	r0, [r7, #0]
   82e92:	4629      	mov	r1, r5
   82e94:	f241 6319 	movw	r3, #5657	; 0x1619
   82e98:	f2c0 0308 	movt	r3, #8
   82e9c:	4798      	blx	r3
   82e9e:	e01e      	b.n	82ede <prvSampleTimeNow+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82ea0:	f8cd b000 	str.w	fp, [sp]
   82ea4:	4620      	mov	r0, r4
   82ea6:	4659      	mov	r1, fp
   82ea8:	4632      	mov	r2, r6
   82eaa:	465b      	mov	r3, fp
   82eac:	9c03      	ldr	r4, [sp, #12]
   82eae:	47a0      	blx	r4
				configASSERT( xResult );
   82eb0:	b9a8      	cbnz	r0, 82ede <prvSampleTimeNow+0x9a>
   82eb2:	f241 66e5 	movw	r6, #5861	; 0x16e5
   82eb6:	f2c0 0608 	movt	r6, #8
   82eba:	47b0      	blx	r6
   82ebc:	bf00      	nop
   82ebe:	e7fd      	b.n	82ebc <prvSampleTimeNow+0x78>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82ec0:	f64a 27c4 	movw	r7, #43716	; 0xaac4
   82ec4:	f2c2 0707 	movt	r7, #8199	; 0x2007
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82ec8:	f241 6855 	movw	r8, #5717	; 0x1655
   82ecc:	f2c0 0808 	movt	r8, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82ed0:	f04f 0b00 	mov.w	fp, #0
   82ed4:	f642 53e1 	movw	r3, #11745	; 0x2de1
   82ed8:	f2c0 0308 	movt	r3, #8
   82edc:	9303      	str	r3, [sp, #12]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82ede:	683b      	ldr	r3, [r7, #0]
   82ee0:	6818      	ldr	r0, [r3, #0]
   82ee2:	2800      	cmp	r0, #0
   82ee4:	d1c0      	bne.n	82e68 <prvSampleTimeNow+0x24>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82ee6:	f64a 22f8 	movw	r2, #43768	; 0xaaf8
   82eea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82eee:	6811      	ldr	r1, [r2, #0]
   82ef0:	f64a 20c4 	movw	r0, #43716	; 0xaac4
   82ef4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ef8:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82efa:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82efc:	f04f 0301 	mov.w	r3, #1
   82f00:	f8ca 3000 	str.w	r3, [sl]
   82f04:	e003      	b.n	82f0e <prvSampleTimeNow+0xca>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82f06:	f04f 0200 	mov.w	r2, #0
   82f0a:	f8ca 2000 	str.w	r2, [sl]
	}

	xLastTime = xTimeNow;
   82f0e:	f64a 22f0 	movw	r2, #43760	; 0xaaf0
   82f12:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82f16:	f8c2 9000 	str.w	r9, [r2]

	return xTimeNow;
}
   82f1a:	4648      	mov	r0, r9
   82f1c:	b005      	add	sp, #20
   82f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f22:	bf00      	nop

00082f24 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f28:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82f2a:	f64a 2bc4 	movw	fp, #43716	; 0xaac4
   82f2e:	f2c2 0b07 	movt	fp, #8199	; 0x2007
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82f32:	f242 33e9 	movw	r3, #9193	; 0x23e9
   82f36:	f2c0 0308 	movt	r3, #8
   82f3a:	9303      	str	r3, [sp, #12]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82f3c:	f642 6a45 	movw	sl, #11845	; 0x2e45
   82f40:	f2c0 0a08 	movt	sl, #8
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82f44:	f8db 0000 	ldr.w	r0, [fp]
   82f48:	6802      	ldr	r2, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
   82f4a:	2a00      	cmp	r2, #0
   82f4c:	f000 80c4 	beq.w	830d8 <prvTimerTask+0x1b4>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82f50:	68c7      	ldr	r7, [r0, #12]
   82f52:	683d      	ldr	r5, [r7, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82f54:	9b03      	ldr	r3, [sp, #12]
   82f56:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82f58:	a804      	add	r0, sp, #16
   82f5a:	47d0      	blx	sl
   82f5c:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82f5e:	9804      	ldr	r0, [sp, #16]
   82f60:	2800      	cmp	r0, #0
   82f62:	d150      	bne.n	83006 <prvTimerTask+0xe2>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82f64:	42b5      	cmp	r5, r6
   82f66:	d837      	bhi.n	82fd8 <prvTimerTask+0xb4>
			{
				xTaskResumeAll();
   82f68:	f242 57b1 	movw	r7, #9649	; 0x25b1
   82f6c:	f2c0 0708 	movt	r7, #8
   82f70:	47b8      	blx	r7
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82f72:	f8db 3000 	ldr.w	r3, [fp]
   82f76:	68d8      	ldr	r0, [r3, #12]
   82f78:	68c4      	ldr	r4, [r0, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82f7a:	f104 0004 	add.w	r0, r4, #4
   82f7e:	f241 6255 	movw	r2, #5717	; 0x1655
   82f82:	f2c0 0208 	movt	r2, #8
   82f86:	4790      	blx	r2
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82f88:	69e1      	ldr	r1, [r4, #28]
   82f8a:	2901      	cmp	r1, #1
   82f8c:	d11e      	bne.n	82fcc <prvTimerTask+0xa8>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82f8e:	69a7      	ldr	r7, [r4, #24]
   82f90:	4620      	mov	r0, r4
   82f92:	19e9      	adds	r1, r5, r7
   82f94:	4632      	mov	r2, r6
   82f96:	462b      	mov	r3, r5
   82f98:	f642 5621 	movw	r6, #11553	; 0x2d21
   82f9c:	f2c0 0608 	movt	r6, #8
   82fa0:	47b0      	blx	r6
   82fa2:	2801      	cmp	r0, #1
   82fa4:	d112      	bne.n	82fcc <prvTimerTask+0xa8>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82fa6:	f04f 0300 	mov.w	r3, #0
   82faa:	9300      	str	r3, [sp, #0]
   82fac:	4620      	mov	r0, r4
   82fae:	4619      	mov	r1, r3
   82fb0:	462a      	mov	r2, r5
   82fb2:	f642 55e1 	movw	r5, #11745	; 0x2de1
   82fb6:	f2c0 0508 	movt	r5, #8
   82fba:	47a8      	blx	r5
			configASSERT( xResult );
   82fbc:	b930      	cbnz	r0, 82fcc <prvTimerTask+0xa8>
   82fbe:	f241 67e5 	movw	r7, #5861	; 0x16e5
   82fc2:	f2c0 0708 	movt	r7, #8
   82fc6:	47b8      	blx	r7
   82fc8:	bf00      	nop
   82fca:	e7fd      	b.n	82fc8 <prvTimerTask+0xa4>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82fce:	4620      	mov	r0, r4
   82fd0:	4798      	blx	r3
   82fd2:	e01d      	b.n	83010 <prvTimerTask+0xec>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   82fd4:	f04f 0500 	mov.w	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82fd8:	f64a 21f4 	movw	r1, #43764	; 0xaaf4
   82fdc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82fe0:	6808      	ldr	r0, [r1, #0]
   82fe2:	1ba9      	subs	r1, r5, r6
   82fe4:	f641 76ed 	movw	r6, #8173	; 0x1fed
   82fe8:	f2c0 0608 	movt	r6, #8
   82fec:	47b0      	blx	r6

				if( xTaskResumeAll() == pdFALSE )
   82fee:	f242 54b1 	movw	r4, #9649	; 0x25b1
   82ff2:	f2c0 0408 	movt	r4, #8
   82ff6:	47a0      	blx	r4
   82ff8:	b950      	cbnz	r0, 83010 <prvTimerTask+0xec>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82ffa:	f241 65d5 	movw	r5, #5845	; 0x16d5
   82ffe:	f2c0 0508 	movt	r5, #8
   83002:	47a8      	blx	r5
   83004:	e004      	b.n	83010 <prvTimerTask+0xec>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   83006:	f242 52b1 	movw	r2, #9649	; 0x25b1
   8300a:	f2c0 0208 	movt	r2, #8
   8300e:	4790      	blx	r2
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83010:	a804      	add	r0, sp, #16
   83012:	47d0      	blx	sl
   83014:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   83016:	f64a 26f4 	movw	r6, #43764	; 0xaaf4
   8301a:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8301e:	f641 6525 	movw	r5, #7717	; 0x1e25
   83022:	f2c0 0508 	movt	r5, #8
		if( pxTimer != NULL )
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   83026:	f241 6855 	movw	r8, #5717	; 0x1655
   8302a:	f2c0 0808 	movt	r8, #8
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8302e:	f642 5921 	movw	r9, #11553	; 0x2d21
   83032:	f2c0 0908 	movt	r9, #8
   83036:	e046      	b.n	830c6 <prvTimerTask+0x1a2>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   83038:	9c07      	ldr	r4, [sp, #28]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   8303a:	b124      	cbz	r4, 83046 <prvTimerTask+0x122>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   8303c:	6960      	ldr	r0, [r4, #20]
   8303e:	b110      	cbz	r0, 83046 <prvTimerTask+0x122>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   83040:	f104 0004 	add.w	r0, r4, #4
   83044:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   83046:	9a05      	ldr	r2, [sp, #20]
   83048:	2a02      	cmp	r2, #2
   8304a:	d026      	beq.n	8309a <prvTimerTask+0x176>
   8304c:	2a03      	cmp	r2, #3
   8304e:	d034      	beq.n	830ba <prvTimerTask+0x196>
   83050:	2a00      	cmp	r2, #0
   83052:	d138      	bne.n	830c6 <prvTimerTask+0x1a2>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   83054:	9b06      	ldr	r3, [sp, #24]
   83056:	69a1      	ldr	r1, [r4, #24]
   83058:	4620      	mov	r0, r4
   8305a:	1859      	adds	r1, r3, r1
   8305c:	463a      	mov	r2, r7
   8305e:	47c8      	blx	r9
   83060:	2801      	cmp	r0, #1
   83062:	d130      	bne.n	830c6 <prvTimerTask+0x1a2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83064:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83066:	4620      	mov	r0, r4
   83068:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8306a:	69e0      	ldr	r0, [r4, #28]
   8306c:	2801      	cmp	r0, #1
   8306e:	d12a      	bne.n	830c6 <prvTimerTask+0x1a2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   83070:	69a2      	ldr	r2, [r4, #24]
   83072:	f04f 0300 	mov.w	r3, #0
   83076:	9300      	str	r3, [sp, #0]
   83078:	4620      	mov	r0, r4
   8307a:	4619      	mov	r1, r3
   8307c:	9c06      	ldr	r4, [sp, #24]
   8307e:	1912      	adds	r2, r2, r4
   83080:	f642 54e1 	movw	r4, #11745	; 0x2de1
   83084:	f2c0 0408 	movt	r4, #8
   83088:	47a0      	blx	r4
						configASSERT( xResult );
   8308a:	b9e0      	cbnz	r0, 830c6 <prvTimerTask+0x1a2>
   8308c:	f241 65e5 	movw	r5, #5861	; 0x16e5
   83090:	f2c0 0508 	movt	r5, #8
   83094:	47a8      	blx	r5
   83096:	bf00      	nop
   83098:	e7fd      	b.n	83096 <prvTimerTask+0x172>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8309a:	9b06      	ldr	r3, [sp, #24]
   8309c:	61a3      	str	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8309e:	b933      	cbnz	r3, 830ae <prvTimerTask+0x18a>
   830a0:	f241 66e5 	movw	r6, #5861	; 0x16e5
   830a4:	f2c0 0608 	movt	r6, #8
   830a8:	47b0      	blx	r6
   830aa:	bf00      	nop
   830ac:	e7fd      	b.n	830aa <prvTimerTask+0x186>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   830ae:	4620      	mov	r0, r4
   830b0:	18f9      	adds	r1, r7, r3
   830b2:	463a      	mov	r2, r7
   830b4:	463b      	mov	r3, r7
   830b6:	47c8      	blx	r9
   830b8:	e005      	b.n	830c6 <prvTimerTask+0x1a2>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   830ba:	4620      	mov	r0, r4
   830bc:	f641 1175 	movw	r1, #6517	; 0x1975
   830c0:	f2c0 0108 	movt	r1, #8
   830c4:	4788      	blx	r1

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   830c6:	6830      	ldr	r0, [r6, #0]
   830c8:	a905      	add	r1, sp, #20
   830ca:	f04f 0200 	mov.w	r2, #0
   830ce:	4613      	mov	r3, r2
   830d0:	47a8      	blx	r5
   830d2:	2800      	cmp	r0, #0
   830d4:	d1b0      	bne.n	83038 <prvTimerTask+0x114>
   830d6:	e735      	b.n	82f44 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   830d8:	9903      	ldr	r1, [sp, #12]
   830da:	4788      	blx	r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   830dc:	a804      	add	r0, sp, #16
   830de:	47d0      	blx	sl
   830e0:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   830e2:	9c04      	ldr	r4, [sp, #16]
   830e4:	2c00      	cmp	r4, #0
   830e6:	f43f af75 	beq.w	82fd4 <prvTimerTask+0xb0>
   830ea:	e78c      	b.n	83006 <prvTimerTask+0xe2>

000830ec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   830ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   830ee:	b083      	sub	sp, #12
   830f0:	4604      	mov	r4, r0
   830f2:	460d      	mov	r5, r1
	uint32_t val = 0;
   830f4:	f04f 0300 	mov.w	r3, #0
   830f8:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   830fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
   830fe:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83102:	4284      	cmp	r4, r0
   83104:	d10d      	bne.n	83122 <usart_serial_getchar+0x36>
		while (uart_read((Uart*)p_usart, data));
   83106:	f44f 6600 	mov.w	r6, #2048	; 0x800
   8310a:	f2c4 060e 	movt	r6, #16398	; 0x400e
   8310e:	f241 178d 	movw	r7, #4493	; 0x118d
   83112:	f2c0 0708 	movt	r7, #8
   83116:	4630      	mov	r0, r6
   83118:	4629      	mov	r1, r5
   8311a:	47b8      	blx	r7
   8311c:	2800      	cmp	r0, #0
   8311e:	d1fa      	bne.n	83116 <usart_serial_getchar+0x2a>
   83120:	e02b      	b.n	8317a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   83126:	f2c4 0109 	movt	r1, #16393	; 0x4009
   8312a:	428c      	cmp	r4, r1
   8312c:	d10f      	bne.n	8314e <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
   8312e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   83132:	f2c4 0609 	movt	r6, #16393	; 0x4009
   83136:	f241 17c5 	movw	r7, #4549	; 0x11c5
   8313a:	f2c0 0708 	movt	r7, #8
   8313e:	4630      	mov	r0, r6
   83140:	a901      	add	r1, sp, #4
   83142:	47b8      	blx	r7
   83144:	2800      	cmp	r0, #0
   83146:	d1fa      	bne.n	8313e <usart_serial_getchar+0x52>
		*data = (uint8_t)(val & 0xFF);
   83148:	9801      	ldr	r0, [sp, #4]
   8314a:	7028      	strb	r0, [r5, #0]
   8314c:	e02b      	b.n	831a6 <usart_serial_getchar+0xba>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8314e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   83152:	f2c4 0209 	movt	r2, #16393	; 0x4009
   83156:	4294      	cmp	r4, r2
   83158:	d10f      	bne.n	8317a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
   8315a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   8315e:	f2c4 0409 	movt	r4, #16393	; 0x4009
   83162:	f241 16c5 	movw	r6, #4549	; 0x11c5
   83166:	f2c0 0608 	movt	r6, #8
   8316a:	4620      	mov	r0, r4
   8316c:	a901      	add	r1, sp, #4
   8316e:	47b0      	blx	r6
   83170:	2800      	cmp	r0, #0
   83172:	d1fa      	bne.n	8316a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   83174:	9b01      	ldr	r3, [sp, #4]
   83176:	702b      	strb	r3, [r5, #0]
   83178:	e02a      	b.n	831d0 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8317a:	f04f 0100 	mov.w	r1, #0
   8317e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   83182:	428c      	cmp	r4, r1
   83184:	d10f      	bne.n	831a6 <usart_serial_getchar+0xba>
		while (usart_read(p_usart, &val));
   83186:	f04f 0400 	mov.w	r4, #0
   8318a:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8318e:	f241 16c5 	movw	r6, #4549	; 0x11c5
   83192:	f2c0 0608 	movt	r6, #8
   83196:	4620      	mov	r0, r4
   83198:	a901      	add	r1, sp, #4
   8319a:	47b0      	blx	r6
   8319c:	2800      	cmp	r0, #0
   8319e:	d1fa      	bne.n	83196 <usart_serial_getchar+0xaa>
		*data = (uint8_t)(val & 0xFF);
   831a0:	9801      	ldr	r0, [sp, #4]
   831a2:	7028      	strb	r0, [r5, #0]
   831a4:	e014      	b.n	831d0 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   831a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   831aa:	f2c4 020a 	movt	r2, #16394	; 0x400a
   831ae:	4294      	cmp	r4, r2
   831b0:	d10e      	bne.n	831d0 <usart_serial_getchar+0xe4>
		while (usart_read(p_usart, &val));
   831b2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   831b6:	f2c4 040a 	movt	r4, #16394	; 0x400a
   831ba:	f241 16c5 	movw	r6, #4549	; 0x11c5
   831be:	f2c0 0608 	movt	r6, #8
   831c2:	4620      	mov	r0, r4
   831c4:	a901      	add	r1, sp, #4
   831c6:	47b0      	blx	r6
   831c8:	2800      	cmp	r0, #0
   831ca:	d1fa      	bne.n	831c2 <usart_serial_getchar+0xd6>
		*data = (uint8_t)(val & 0xFF);
   831cc:	9b01      	ldr	r3, [sp, #4]
   831ce:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   831d0:	b003      	add	sp, #12
   831d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000831d4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   831d4:	b570      	push	{r4, r5, r6, lr}
   831d6:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   831d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   831dc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   831e0:	4298      	cmp	r0, r3
   831e2:	d10f      	bne.n	83204 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   831e4:	f44f 6500 	mov.w	r5, #2048	; 0x800
   831e8:	f2c4 050e 	movt	r5, #16398	; 0x400e
   831ec:	f241 1675 	movw	r6, #4469	; 0x1175
   831f0:	f2c0 0608 	movt	r6, #8
   831f4:	4628      	mov	r0, r5
   831f6:	4621      	mov	r1, r4
   831f8:	47b0      	blx	r6
   831fa:	2800      	cmp	r0, #0
   831fc:	d1fa      	bne.n	831f4 <usart_serial_putchar+0x20>
		return 1;
   831fe:	f04f 0001 	mov.w	r0, #1
   83202:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   83208:	f2c4 0109 	movt	r1, #16393	; 0x4009
   8320c:	4288      	cmp	r0, r1
   8320e:	d10f      	bne.n	83230 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   83210:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   83214:	f2c4 0509 	movt	r5, #16393	; 0x4009
   83218:	f241 16a5 	movw	r6, #4517	; 0x11a5
   8321c:	f2c0 0608 	movt	r6, #8
   83220:	4628      	mov	r0, r5
   83222:	4621      	mov	r1, r4
   83224:	47b0      	blx	r6
   83226:	2800      	cmp	r0, #0
   83228:	d1fa      	bne.n	83220 <usart_serial_putchar+0x4c>
		return 1;
   8322a:	f04f 0001 	mov.w	r0, #1
   8322e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   83230:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   83234:	f2c4 0209 	movt	r2, #16393	; 0x4009
   83238:	4290      	cmp	r0, r2
   8323a:	d10f      	bne.n	8325c <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   8323c:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   83240:	f2c4 0509 	movt	r5, #16393	; 0x4009
   83244:	f241 16a5 	movw	r6, #4517	; 0x11a5
   83248:	f2c0 0608 	movt	r6, #8
   8324c:	4628      	mov	r0, r5
   8324e:	4621      	mov	r1, r4
   83250:	47b0      	blx	r6
   83252:	2800      	cmp	r0, #0
   83254:	d1fa      	bne.n	8324c <usart_serial_putchar+0x78>
		return 1;
   83256:	f04f 0001 	mov.w	r0, #1
   8325a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8325c:	f04f 0300 	mov.w	r3, #0
   83260:	f2c4 030a 	movt	r3, #16394	; 0x400a
   83264:	4298      	cmp	r0, r3
   83266:	d10f      	bne.n	83288 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   83268:	f04f 0500 	mov.w	r5, #0
   8326c:	f2c4 050a 	movt	r5, #16394	; 0x400a
   83270:	f241 16a5 	movw	r6, #4517	; 0x11a5
   83274:	f2c0 0608 	movt	r6, #8
   83278:	4628      	mov	r0, r5
   8327a:	4621      	mov	r1, r4
   8327c:	47b0      	blx	r6
   8327e:	2800      	cmp	r0, #0
   83280:	d1fa      	bne.n	83278 <usart_serial_putchar+0xa4>
		return 1;
   83282:	f04f 0001 	mov.w	r0, #1
   83286:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8328c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   83290:	4288      	cmp	r0, r1
   83292:	d10f      	bne.n	832b4 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   83294:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83298:	f2c4 050a 	movt	r5, #16394	; 0x400a
   8329c:	f241 16a5 	movw	r6, #4517	; 0x11a5
   832a0:	f2c0 0608 	movt	r6, #8
   832a4:	4628      	mov	r0, r5
   832a6:	4621      	mov	r1, r4
   832a8:	47b0      	blx	r6
   832aa:	2800      	cmp	r0, #0
   832ac:	d1fa      	bne.n	832a4 <usart_serial_putchar+0xd0>
		return 1;
   832ae:	f04f 0001 	mov.w	r0, #1
   832b2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   832b4:	f04f 0000 	mov.w	r0, #0
}
   832b8:	bd70      	pop	{r4, r5, r6, pc}
   832ba:	bf00      	nop

000832bc <configure_console>:


void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio.
*  Note that the baudrate, parity and other parameters must be set in */
{
   832bc:	b530      	push	{r4, r5, lr}
   832be:	b085      	sub	sp, #20
   832c0:	f04f 0008 	mov.w	r0, #8
   832c4:	f640 55a5 	movw	r5, #3493	; 0xda5
   832c8:	f2c0 0508 	movt	r5, #8
   832cc:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   832ce:	f44f 6400 	mov.w	r4, #2048	; 0x800
   832d2:	f2c4 040e 	movt	r4, #16398	; 0x400e
   832d6:	f64a 3344 	movw	r3, #43844	; 0xab44
   832da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   832de:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   832e0:	f64a 3040 	movw	r0, #43840	; 0xab40
   832e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   832e8:	f243 12d5 	movw	r2, #12757	; 0x31d5
   832ec:	f2c0 0208 	movt	r2, #8
   832f0:	6002      	str	r2, [r0, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   832f2:	f64a 313c 	movw	r1, #43836	; 0xab3c
   832f6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   832fa:	f243 03ed 	movw	r3, #12525	; 0x30ed
   832fe:	f2c0 0308 	movt	r3, #8
   83302:	600b      	str	r3, [r1, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   83304:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   83308:	f2c0 5001 	movt	r0, #1281	; 0x501
   8330c:	9000      	str	r0, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   8330e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   83312:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   83314:	f44f 6100 	mov.w	r1, #2048	; 0x800
   83318:	9102      	str	r1, [sp, #8]
   8331a:	f04f 0008 	mov.w	r0, #8
   8331e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   83320:	4620      	mov	r0, r4
   83322:	4669      	mov	r1, sp
   83324:	f241 1531 	movw	r5, #4401	; 0x1131
   83328:	f2c0 0508 	movt	r5, #8
   8332c:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8332e:	f240 0538 	movw	r5, #56	; 0x38
   83332:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83336:	682c      	ldr	r4, [r5, #0]
   83338:	68a0      	ldr	r0, [r4, #8]
   8333a:	f04f 0100 	mov.w	r1, #0
   8333e:	f643 5437 	movw	r4, #15671	; 0x3d37
   83342:	f2c0 0408 	movt	r4, #8
   83346:	47a0      	blx	r4
	setbuf(stdin, NULL);
   83348:	682b      	ldr	r3, [r5, #0]
   8334a:	6858      	ldr	r0, [r3, #4]
   8334c:	f04f 0100 	mov.w	r1, #0
   83350:	47a0      	blx	r4
	};
	
	/* Configure console UART */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   83352:	b005      	add	sp, #20
   83354:	bd30      	pop	{r4, r5, pc}
   83356:	bf00      	nop

00083358 <main>:
#include "TestFunctions.h"
#include "PIDControl.h"
#include "MatlabPlot.h"

int main (void)
{
   83358:	b510      	push	{r4, lr}
   8335a:	b084      	sub	sp, #16
	sysclk_init();			// Initialize system clock
   8335c:	f240 13a5 	movw	r3, #421	; 0x1a5
   83360:	f2c0 0308 	movt	r3, #8
   83364:	4798      	blx	r3
	board_init();			// Initialize Arduino Due board
   83366:	f240 70a1 	movw	r0, #1953	; 0x7a1
   8336a:	f2c0 0008 	movt	r0, #8
   8336e:	4780      	blx	r0
	configure_console();	// Initialize terminal window
   83370:	f243 21bd 	movw	r1, #12989	; 0x32bd
   83374:	f2c0 0108 	movt	r1, #8
   83378:	4788      	blx	r1
	adc_setup();			// Initialize ADC
   8337a:	f240 5281 	movw	r2, #1409	; 0x581
   8337e:	f2c0 0208 	movt	r2, #8
   83382:	4790      	blx	r2
	pwm_setup();			// Initialize PWM
   83384:	f240 44b9 	movw	r4, #1209	; 0x4b9
   83388:	f2c0 0408 	movt	r4, #8
   8338c:	47a0      	blx	r4
	motorshield_setup();	// Initialize motor shield
   8338e:	f240 23f9 	movw	r3, #761	; 0x2f9
   83392:	f2c0 0308 	movt	r3, #8
   83396:	4798      	blx	r3
	delay_init();			// Initialize delay
   83398:	f240 201d 	movw	r0, #541	; 0x21d
   8339c:	f2c0 0008 	movt	r0, #8
   833a0:	4780      	blx	r0
	//}
	
	//pid_control();
	
	/* Create the first task for monitoring the processor activity */
	if (xTaskCreate(pid_control, (const signed char * const) "PID Control", 1024, NULL, 2, NULL) != pdPASS)
   833a2:	f04f 0102 	mov.w	r1, #2
   833a6:	9100      	str	r1, [sp, #0]
   833a8:	f04f 0300 	mov.w	r3, #0
   833ac:	9301      	str	r3, [sp, #4]
   833ae:	9302      	str	r3, [sp, #8]
   833b0:	9303      	str	r3, [sp, #12]
   833b2:	f240 3025 	movw	r0, #805	; 0x325
   833b6:	f2c0 0008 	movt	r0, #8
   833ba:	f247 51f0 	movw	r1, #30192	; 0x75f0
   833be:	f2c0 0108 	movt	r1, #8
   833c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   833c6:	f242 04c1 	movw	r4, #8385	; 0x20c1
   833ca:	f2c0 0408 	movt	r4, #8
   833ce:	47a0      	blx	r4
   833d0:	2801      	cmp	r0, #1
   833d2:	d002      	beq.n	833da <main+0x82>
	{
		printf("Failed to create PID Control task\r\n");
   833d4:	4813      	ldr	r0, [pc, #76]	; (83424 <main+0xcc>)
   833d6:	4a14      	ldr	r2, [pc, #80]	; (83428 <main+0xd0>)
   833d8:	4790      	blx	r2
	}
	
	if (xTaskCreate(plot_values, (const signed char * const) "Plot Values", 1024, NULL, 1, NULL) != pdPASS)
   833da:	f04f 0301 	mov.w	r3, #1
   833de:	9300      	str	r3, [sp, #0]
   833e0:	f04f 0300 	mov.w	r3, #0
   833e4:	9301      	str	r3, [sp, #4]
   833e6:	9302      	str	r3, [sp, #8]
   833e8:	9303      	str	r3, [sp, #12]
   833ea:	f240 206d 	movw	r0, #621	; 0x26d
   833ee:	f2c0 0008 	movt	r0, #8
   833f2:	f247 6120 	movw	r1, #30240	; 0x7620
   833f6:	f2c0 0108 	movt	r1, #8
   833fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   833fe:	f242 04c1 	movw	r4, #8385	; 0x20c1
   83402:	f2c0 0408 	movt	r4, #8
   83406:	47a0      	blx	r4
   83408:	2801      	cmp	r0, #1
   8340a:	d002      	beq.n	83412 <main+0xba>
	{
		printf("Failed to create PID Control task\r\n");
   8340c:	4805      	ldr	r0, [pc, #20]	; (83424 <main+0xcc>)
   8340e:	4906      	ldr	r1, [pc, #24]	; (83428 <main+0xd0>)
   83410:	4788      	blx	r1
	}
	
	/* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   83412:	f242 3061 	movw	r0, #9057	; 0x2361
   83416:	f2c0 0008 	movt	r0, #8
   8341a:	4780      	blx	r0
}
   8341c:	f04f 0000 	mov.w	r0, #0
   83420:	b004      	add	sp, #16
   83422:	bd10      	pop	{r4, pc}
   83424:	000875fc 	.word	0x000875fc
   83428:	00083cd5 	.word	0x00083cd5

0008342c <__aeabi_drsub>:
   8342c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83430:	e002      	b.n	83438 <__adddf3>
   83432:	bf00      	nop

00083434 <__aeabi_dsub>:
   83434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083438 <__adddf3>:
   83438:	b530      	push	{r4, r5, lr}
   8343a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8343e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83442:	ea94 0f05 	teq	r4, r5
   83446:	bf08      	it	eq
   83448:	ea90 0f02 	teqeq	r0, r2
   8344c:	bf1f      	itttt	ne
   8344e:	ea54 0c00 	orrsne.w	ip, r4, r0
   83452:	ea55 0c02 	orrsne.w	ip, r5, r2
   83456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8345a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8345e:	f000 80e2 	beq.w	83626 <__adddf3+0x1ee>
   83462:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8346a:	bfb8      	it	lt
   8346c:	426d      	neglt	r5, r5
   8346e:	dd0c      	ble.n	8348a <__adddf3+0x52>
   83470:	442c      	add	r4, r5
   83472:	ea80 0202 	eor.w	r2, r0, r2
   83476:	ea81 0303 	eor.w	r3, r1, r3
   8347a:	ea82 0000 	eor.w	r0, r2, r0
   8347e:	ea83 0101 	eor.w	r1, r3, r1
   83482:	ea80 0202 	eor.w	r2, r0, r2
   83486:	ea81 0303 	eor.w	r3, r1, r3
   8348a:	2d36      	cmp	r5, #54	; 0x36
   8348c:	bf88      	it	hi
   8348e:	bd30      	pophi	{r4, r5, pc}
   83490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83494:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8349c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   834a0:	d002      	beq.n	834a8 <__adddf3+0x70>
   834a2:	4240      	negs	r0, r0
   834a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   834a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   834ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   834b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   834b4:	d002      	beq.n	834bc <__adddf3+0x84>
   834b6:	4252      	negs	r2, r2
   834b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   834bc:	ea94 0f05 	teq	r4, r5
   834c0:	f000 80a7 	beq.w	83612 <__adddf3+0x1da>
   834c4:	f1a4 0401 	sub.w	r4, r4, #1
   834c8:	f1d5 0e20 	rsbs	lr, r5, #32
   834cc:	db0d      	blt.n	834ea <__adddf3+0xb2>
   834ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   834d2:	fa22 f205 	lsr.w	r2, r2, r5
   834d6:	1880      	adds	r0, r0, r2
   834d8:	f141 0100 	adc.w	r1, r1, #0
   834dc:	fa03 f20e 	lsl.w	r2, r3, lr
   834e0:	1880      	adds	r0, r0, r2
   834e2:	fa43 f305 	asr.w	r3, r3, r5
   834e6:	4159      	adcs	r1, r3
   834e8:	e00e      	b.n	83508 <__adddf3+0xd0>
   834ea:	f1a5 0520 	sub.w	r5, r5, #32
   834ee:	f10e 0e20 	add.w	lr, lr, #32
   834f2:	2a01      	cmp	r2, #1
   834f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   834f8:	bf28      	it	cs
   834fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   834fe:	fa43 f305 	asr.w	r3, r3, r5
   83502:	18c0      	adds	r0, r0, r3
   83504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8350c:	d507      	bpl.n	8351e <__adddf3+0xe6>
   8350e:	f04f 0e00 	mov.w	lr, #0
   83512:	f1dc 0c00 	rsbs	ip, ip, #0
   83516:	eb7e 0000 	sbcs.w	r0, lr, r0
   8351a:	eb6e 0101 	sbc.w	r1, lr, r1
   8351e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83522:	d31b      	bcc.n	8355c <__adddf3+0x124>
   83524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83528:	d30c      	bcc.n	83544 <__adddf3+0x10c>
   8352a:	0849      	lsrs	r1, r1, #1
   8352c:	ea5f 0030 	movs.w	r0, r0, rrx
   83530:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83534:	f104 0401 	add.w	r4, r4, #1
   83538:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8353c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83540:	f080 809a 	bcs.w	83678 <__adddf3+0x240>
   83544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83548:	bf08      	it	eq
   8354a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8354e:	f150 0000 	adcs.w	r0, r0, #0
   83552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83556:	ea41 0105 	orr.w	r1, r1, r5
   8355a:	bd30      	pop	{r4, r5, pc}
   8355c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83560:	4140      	adcs	r0, r0
   83562:	eb41 0101 	adc.w	r1, r1, r1
   83566:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8356a:	f1a4 0401 	sub.w	r4, r4, #1
   8356e:	d1e9      	bne.n	83544 <__adddf3+0x10c>
   83570:	f091 0f00 	teq	r1, #0
   83574:	bf04      	itt	eq
   83576:	4601      	moveq	r1, r0
   83578:	2000      	moveq	r0, #0
   8357a:	fab1 f381 	clz	r3, r1
   8357e:	bf08      	it	eq
   83580:	3320      	addeq	r3, #32
   83582:	f1a3 030b 	sub.w	r3, r3, #11
   83586:	f1b3 0220 	subs.w	r2, r3, #32
   8358a:	da0c      	bge.n	835a6 <__adddf3+0x16e>
   8358c:	320c      	adds	r2, #12
   8358e:	dd08      	ble.n	835a2 <__adddf3+0x16a>
   83590:	f102 0c14 	add.w	ip, r2, #20
   83594:	f1c2 020c 	rsb	r2, r2, #12
   83598:	fa01 f00c 	lsl.w	r0, r1, ip
   8359c:	fa21 f102 	lsr.w	r1, r1, r2
   835a0:	e00c      	b.n	835bc <__adddf3+0x184>
   835a2:	f102 0214 	add.w	r2, r2, #20
   835a6:	bfd8      	it	le
   835a8:	f1c2 0c20 	rsble	ip, r2, #32
   835ac:	fa01 f102 	lsl.w	r1, r1, r2
   835b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   835b4:	bfdc      	itt	le
   835b6:	ea41 010c 	orrle.w	r1, r1, ip
   835ba:	4090      	lslle	r0, r2
   835bc:	1ae4      	subs	r4, r4, r3
   835be:	bfa2      	ittt	ge
   835c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   835c4:	4329      	orrge	r1, r5
   835c6:	bd30      	popge	{r4, r5, pc}
   835c8:	ea6f 0404 	mvn.w	r4, r4
   835cc:	3c1f      	subs	r4, #31
   835ce:	da1c      	bge.n	8360a <__adddf3+0x1d2>
   835d0:	340c      	adds	r4, #12
   835d2:	dc0e      	bgt.n	835f2 <__adddf3+0x1ba>
   835d4:	f104 0414 	add.w	r4, r4, #20
   835d8:	f1c4 0220 	rsb	r2, r4, #32
   835dc:	fa20 f004 	lsr.w	r0, r0, r4
   835e0:	fa01 f302 	lsl.w	r3, r1, r2
   835e4:	ea40 0003 	orr.w	r0, r0, r3
   835e8:	fa21 f304 	lsr.w	r3, r1, r4
   835ec:	ea45 0103 	orr.w	r1, r5, r3
   835f0:	bd30      	pop	{r4, r5, pc}
   835f2:	f1c4 040c 	rsb	r4, r4, #12
   835f6:	f1c4 0220 	rsb	r2, r4, #32
   835fa:	fa20 f002 	lsr.w	r0, r0, r2
   835fe:	fa01 f304 	lsl.w	r3, r1, r4
   83602:	ea40 0003 	orr.w	r0, r0, r3
   83606:	4629      	mov	r1, r5
   83608:	bd30      	pop	{r4, r5, pc}
   8360a:	fa21 f004 	lsr.w	r0, r1, r4
   8360e:	4629      	mov	r1, r5
   83610:	bd30      	pop	{r4, r5, pc}
   83612:	f094 0f00 	teq	r4, #0
   83616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8361a:	bf06      	itte	eq
   8361c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83620:	3401      	addeq	r4, #1
   83622:	3d01      	subne	r5, #1
   83624:	e74e      	b.n	834c4 <__adddf3+0x8c>
   83626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8362a:	bf18      	it	ne
   8362c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83630:	d029      	beq.n	83686 <__adddf3+0x24e>
   83632:	ea94 0f05 	teq	r4, r5
   83636:	bf08      	it	eq
   83638:	ea90 0f02 	teqeq	r0, r2
   8363c:	d005      	beq.n	8364a <__adddf3+0x212>
   8363e:	ea54 0c00 	orrs.w	ip, r4, r0
   83642:	bf04      	itt	eq
   83644:	4619      	moveq	r1, r3
   83646:	4610      	moveq	r0, r2
   83648:	bd30      	pop	{r4, r5, pc}
   8364a:	ea91 0f03 	teq	r1, r3
   8364e:	bf1e      	ittt	ne
   83650:	2100      	movne	r1, #0
   83652:	2000      	movne	r0, #0
   83654:	bd30      	popne	{r4, r5, pc}
   83656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8365a:	d105      	bne.n	83668 <__adddf3+0x230>
   8365c:	0040      	lsls	r0, r0, #1
   8365e:	4149      	adcs	r1, r1
   83660:	bf28      	it	cs
   83662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83666:	bd30      	pop	{r4, r5, pc}
   83668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8366c:	bf3c      	itt	cc
   8366e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83672:	bd30      	popcc	{r4, r5, pc}
   83674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8367c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83680:	f04f 0000 	mov.w	r0, #0
   83684:	bd30      	pop	{r4, r5, pc}
   83686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8368a:	bf1a      	itte	ne
   8368c:	4619      	movne	r1, r3
   8368e:	4610      	movne	r0, r2
   83690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83694:	bf1c      	itt	ne
   83696:	460b      	movne	r3, r1
   83698:	4602      	movne	r2, r0
   8369a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8369e:	bf06      	itte	eq
   836a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   836a4:	ea91 0f03 	teqeq	r1, r3
   836a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   836ac:	bd30      	pop	{r4, r5, pc}
   836ae:	bf00      	nop

000836b0 <__aeabi_ui2d>:
   836b0:	f090 0f00 	teq	r0, #0
   836b4:	bf04      	itt	eq
   836b6:	2100      	moveq	r1, #0
   836b8:	4770      	bxeq	lr
   836ba:	b530      	push	{r4, r5, lr}
   836bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   836c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   836c4:	f04f 0500 	mov.w	r5, #0
   836c8:	f04f 0100 	mov.w	r1, #0
   836cc:	e750      	b.n	83570 <__adddf3+0x138>
   836ce:	bf00      	nop

000836d0 <__aeabi_i2d>:
   836d0:	f090 0f00 	teq	r0, #0
   836d4:	bf04      	itt	eq
   836d6:	2100      	moveq	r1, #0
   836d8:	4770      	bxeq	lr
   836da:	b530      	push	{r4, r5, lr}
   836dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   836e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   836e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   836e8:	bf48      	it	mi
   836ea:	4240      	negmi	r0, r0
   836ec:	f04f 0100 	mov.w	r1, #0
   836f0:	e73e      	b.n	83570 <__adddf3+0x138>
   836f2:	bf00      	nop

000836f4 <__aeabi_f2d>:
   836f4:	0042      	lsls	r2, r0, #1
   836f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   836fa:	ea4f 0131 	mov.w	r1, r1, rrx
   836fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83702:	bf1f      	itttt	ne
   83704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8370c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83710:	4770      	bxne	lr
   83712:	f092 0f00 	teq	r2, #0
   83716:	bf14      	ite	ne
   83718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8371c:	4770      	bxeq	lr
   8371e:	b530      	push	{r4, r5, lr}
   83720:	f44f 7460 	mov.w	r4, #896	; 0x380
   83724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8372c:	e720      	b.n	83570 <__adddf3+0x138>
   8372e:	bf00      	nop

00083730 <__aeabi_ul2d>:
   83730:	ea50 0201 	orrs.w	r2, r0, r1
   83734:	bf08      	it	eq
   83736:	4770      	bxeq	lr
   83738:	b530      	push	{r4, r5, lr}
   8373a:	f04f 0500 	mov.w	r5, #0
   8373e:	e00a      	b.n	83756 <__aeabi_l2d+0x16>

00083740 <__aeabi_l2d>:
   83740:	ea50 0201 	orrs.w	r2, r0, r1
   83744:	bf08      	it	eq
   83746:	4770      	bxeq	lr
   83748:	b530      	push	{r4, r5, lr}
   8374a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8374e:	d502      	bpl.n	83756 <__aeabi_l2d+0x16>
   83750:	4240      	negs	r0, r0
   83752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83756:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8375a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8375e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83762:	f43f aedc 	beq.w	8351e <__adddf3+0xe6>
   83766:	f04f 0203 	mov.w	r2, #3
   8376a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8376e:	bf18      	it	ne
   83770:	3203      	addne	r2, #3
   83772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83776:	bf18      	it	ne
   83778:	3203      	addne	r2, #3
   8377a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8377e:	f1c2 0320 	rsb	r3, r2, #32
   83782:	fa00 fc03 	lsl.w	ip, r0, r3
   83786:	fa20 f002 	lsr.w	r0, r0, r2
   8378a:	fa01 fe03 	lsl.w	lr, r1, r3
   8378e:	ea40 000e 	orr.w	r0, r0, lr
   83792:	fa21 f102 	lsr.w	r1, r1, r2
   83796:	4414      	add	r4, r2
   83798:	e6c1      	b.n	8351e <__adddf3+0xe6>
   8379a:	bf00      	nop

0008379c <__aeabi_dmul>:
   8379c:	b570      	push	{r4, r5, r6, lr}
   8379e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   837a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   837a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   837aa:	bf1d      	ittte	ne
   837ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   837b0:	ea94 0f0c 	teqne	r4, ip
   837b4:	ea95 0f0c 	teqne	r5, ip
   837b8:	f000 f8de 	bleq	83978 <__aeabi_dmul+0x1dc>
   837bc:	442c      	add	r4, r5
   837be:	ea81 0603 	eor.w	r6, r1, r3
   837c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   837c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   837ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   837ce:	bf18      	it	ne
   837d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   837d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   837d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   837dc:	d038      	beq.n	83850 <__aeabi_dmul+0xb4>
   837de:	fba0 ce02 	umull	ip, lr, r0, r2
   837e2:	f04f 0500 	mov.w	r5, #0
   837e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   837ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   837ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   837f2:	f04f 0600 	mov.w	r6, #0
   837f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   837fa:	f09c 0f00 	teq	ip, #0
   837fe:	bf18      	it	ne
   83800:	f04e 0e01 	orrne.w	lr, lr, #1
   83804:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83808:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8380c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83810:	d204      	bcs.n	8381c <__aeabi_dmul+0x80>
   83812:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83816:	416d      	adcs	r5, r5
   83818:	eb46 0606 	adc.w	r6, r6, r6
   8381c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83820:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83824:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83828:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8382c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83830:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83834:	bf88      	it	hi
   83836:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8383a:	d81e      	bhi.n	8387a <__aeabi_dmul+0xde>
   8383c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83840:	bf08      	it	eq
   83842:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83846:	f150 0000 	adcs.w	r0, r0, #0
   8384a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8384e:	bd70      	pop	{r4, r5, r6, pc}
   83850:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83854:	ea46 0101 	orr.w	r1, r6, r1
   83858:	ea40 0002 	orr.w	r0, r0, r2
   8385c:	ea81 0103 	eor.w	r1, r1, r3
   83860:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83864:	bfc2      	ittt	gt
   83866:	ebd4 050c 	rsbsgt	r5, r4, ip
   8386a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8386e:	bd70      	popgt	{r4, r5, r6, pc}
   83870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83874:	f04f 0e00 	mov.w	lr, #0
   83878:	3c01      	subs	r4, #1
   8387a:	f300 80ab 	bgt.w	839d4 <__aeabi_dmul+0x238>
   8387e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83882:	bfde      	ittt	le
   83884:	2000      	movle	r0, #0
   83886:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8388a:	bd70      	pople	{r4, r5, r6, pc}
   8388c:	f1c4 0400 	rsb	r4, r4, #0
   83890:	3c20      	subs	r4, #32
   83892:	da35      	bge.n	83900 <__aeabi_dmul+0x164>
   83894:	340c      	adds	r4, #12
   83896:	dc1b      	bgt.n	838d0 <__aeabi_dmul+0x134>
   83898:	f104 0414 	add.w	r4, r4, #20
   8389c:	f1c4 0520 	rsb	r5, r4, #32
   838a0:	fa00 f305 	lsl.w	r3, r0, r5
   838a4:	fa20 f004 	lsr.w	r0, r0, r4
   838a8:	fa01 f205 	lsl.w	r2, r1, r5
   838ac:	ea40 0002 	orr.w	r0, r0, r2
   838b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   838b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   838b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   838bc:	fa21 f604 	lsr.w	r6, r1, r4
   838c0:	eb42 0106 	adc.w	r1, r2, r6
   838c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   838c8:	bf08      	it	eq
   838ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   838ce:	bd70      	pop	{r4, r5, r6, pc}
   838d0:	f1c4 040c 	rsb	r4, r4, #12
   838d4:	f1c4 0520 	rsb	r5, r4, #32
   838d8:	fa00 f304 	lsl.w	r3, r0, r4
   838dc:	fa20 f005 	lsr.w	r0, r0, r5
   838e0:	fa01 f204 	lsl.w	r2, r1, r4
   838e4:	ea40 0002 	orr.w	r0, r0, r2
   838e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   838ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   838f0:	f141 0100 	adc.w	r1, r1, #0
   838f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   838f8:	bf08      	it	eq
   838fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   838fe:	bd70      	pop	{r4, r5, r6, pc}
   83900:	f1c4 0520 	rsb	r5, r4, #32
   83904:	fa00 f205 	lsl.w	r2, r0, r5
   83908:	ea4e 0e02 	orr.w	lr, lr, r2
   8390c:	fa20 f304 	lsr.w	r3, r0, r4
   83910:	fa01 f205 	lsl.w	r2, r1, r5
   83914:	ea43 0302 	orr.w	r3, r3, r2
   83918:	fa21 f004 	lsr.w	r0, r1, r4
   8391c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83920:	fa21 f204 	lsr.w	r2, r1, r4
   83924:	ea20 0002 	bic.w	r0, r0, r2
   83928:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8392c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83930:	bf08      	it	eq
   83932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83936:	bd70      	pop	{r4, r5, r6, pc}
   83938:	f094 0f00 	teq	r4, #0
   8393c:	d10f      	bne.n	8395e <__aeabi_dmul+0x1c2>
   8393e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83942:	0040      	lsls	r0, r0, #1
   83944:	eb41 0101 	adc.w	r1, r1, r1
   83948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8394c:	bf08      	it	eq
   8394e:	3c01      	subeq	r4, #1
   83950:	d0f7      	beq.n	83942 <__aeabi_dmul+0x1a6>
   83952:	ea41 0106 	orr.w	r1, r1, r6
   83956:	f095 0f00 	teq	r5, #0
   8395a:	bf18      	it	ne
   8395c:	4770      	bxne	lr
   8395e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83962:	0052      	lsls	r2, r2, #1
   83964:	eb43 0303 	adc.w	r3, r3, r3
   83968:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8396c:	bf08      	it	eq
   8396e:	3d01      	subeq	r5, #1
   83970:	d0f7      	beq.n	83962 <__aeabi_dmul+0x1c6>
   83972:	ea43 0306 	orr.w	r3, r3, r6
   83976:	4770      	bx	lr
   83978:	ea94 0f0c 	teq	r4, ip
   8397c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83980:	bf18      	it	ne
   83982:	ea95 0f0c 	teqne	r5, ip
   83986:	d00c      	beq.n	839a2 <__aeabi_dmul+0x206>
   83988:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8398c:	bf18      	it	ne
   8398e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83992:	d1d1      	bne.n	83938 <__aeabi_dmul+0x19c>
   83994:	ea81 0103 	eor.w	r1, r1, r3
   83998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8399c:	f04f 0000 	mov.w	r0, #0
   839a0:	bd70      	pop	{r4, r5, r6, pc}
   839a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   839a6:	bf06      	itte	eq
   839a8:	4610      	moveq	r0, r2
   839aa:	4619      	moveq	r1, r3
   839ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   839b0:	d019      	beq.n	839e6 <__aeabi_dmul+0x24a>
   839b2:	ea94 0f0c 	teq	r4, ip
   839b6:	d102      	bne.n	839be <__aeabi_dmul+0x222>
   839b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   839bc:	d113      	bne.n	839e6 <__aeabi_dmul+0x24a>
   839be:	ea95 0f0c 	teq	r5, ip
   839c2:	d105      	bne.n	839d0 <__aeabi_dmul+0x234>
   839c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   839c8:	bf1c      	itt	ne
   839ca:	4610      	movne	r0, r2
   839cc:	4619      	movne	r1, r3
   839ce:	d10a      	bne.n	839e6 <__aeabi_dmul+0x24a>
   839d0:	ea81 0103 	eor.w	r1, r1, r3
   839d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   839d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   839dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   839e0:	f04f 0000 	mov.w	r0, #0
   839e4:	bd70      	pop	{r4, r5, r6, pc}
   839e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   839ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   839ee:	bd70      	pop	{r4, r5, r6, pc}

000839f0 <__aeabi_ddiv>:
   839f0:	b570      	push	{r4, r5, r6, lr}
   839f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   839f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   839fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   839fe:	bf1d      	ittte	ne
   83a00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83a04:	ea94 0f0c 	teqne	r4, ip
   83a08:	ea95 0f0c 	teqne	r5, ip
   83a0c:	f000 f8a7 	bleq	83b5e <__aeabi_ddiv+0x16e>
   83a10:	eba4 0405 	sub.w	r4, r4, r5
   83a14:	ea81 0e03 	eor.w	lr, r1, r3
   83a18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83a1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83a20:	f000 8088 	beq.w	83b34 <__aeabi_ddiv+0x144>
   83a24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83a28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83a2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83a30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83a34:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83a38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   83a3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83a40:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83a44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83a48:	429d      	cmp	r5, r3
   83a4a:	bf08      	it	eq
   83a4c:	4296      	cmpeq	r6, r2
   83a4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83a52:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83a56:	d202      	bcs.n	83a5e <__aeabi_ddiv+0x6e>
   83a58:	085b      	lsrs	r3, r3, #1
   83a5a:	ea4f 0232 	mov.w	r2, r2, rrx
   83a5e:	1ab6      	subs	r6, r6, r2
   83a60:	eb65 0503 	sbc.w	r5, r5, r3
   83a64:	085b      	lsrs	r3, r3, #1
   83a66:	ea4f 0232 	mov.w	r2, r2, rrx
   83a6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   83a6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83a72:	ebb6 0e02 	subs.w	lr, r6, r2
   83a76:	eb75 0e03 	sbcs.w	lr, r5, r3
   83a7a:	bf22      	ittt	cs
   83a7c:	1ab6      	subcs	r6, r6, r2
   83a7e:	4675      	movcs	r5, lr
   83a80:	ea40 000c 	orrcs.w	r0, r0, ip
   83a84:	085b      	lsrs	r3, r3, #1
   83a86:	ea4f 0232 	mov.w	r2, r2, rrx
   83a8a:	ebb6 0e02 	subs.w	lr, r6, r2
   83a8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   83a92:	bf22      	ittt	cs
   83a94:	1ab6      	subcs	r6, r6, r2
   83a96:	4675      	movcs	r5, lr
   83a98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83a9c:	085b      	lsrs	r3, r3, #1
   83a9e:	ea4f 0232 	mov.w	r2, r2, rrx
   83aa2:	ebb6 0e02 	subs.w	lr, r6, r2
   83aa6:	eb75 0e03 	sbcs.w	lr, r5, r3
   83aaa:	bf22      	ittt	cs
   83aac:	1ab6      	subcs	r6, r6, r2
   83aae:	4675      	movcs	r5, lr
   83ab0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83ab4:	085b      	lsrs	r3, r3, #1
   83ab6:	ea4f 0232 	mov.w	r2, r2, rrx
   83aba:	ebb6 0e02 	subs.w	lr, r6, r2
   83abe:	eb75 0e03 	sbcs.w	lr, r5, r3
   83ac2:	bf22      	ittt	cs
   83ac4:	1ab6      	subcs	r6, r6, r2
   83ac6:	4675      	movcs	r5, lr
   83ac8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83acc:	ea55 0e06 	orrs.w	lr, r5, r6
   83ad0:	d018      	beq.n	83b04 <__aeabi_ddiv+0x114>
   83ad2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83ad6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   83ada:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83ade:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83ae2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83ae6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   83aea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   83aee:	d1c0      	bne.n	83a72 <__aeabi_ddiv+0x82>
   83af0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83af4:	d10b      	bne.n	83b0e <__aeabi_ddiv+0x11e>
   83af6:	ea41 0100 	orr.w	r1, r1, r0
   83afa:	f04f 0000 	mov.w	r0, #0
   83afe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83b02:	e7b6      	b.n	83a72 <__aeabi_ddiv+0x82>
   83b04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83b08:	bf04      	itt	eq
   83b0a:	4301      	orreq	r1, r0
   83b0c:	2000      	moveq	r0, #0
   83b0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83b12:	bf88      	it	hi
   83b14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83b18:	f63f aeaf 	bhi.w	8387a <__aeabi_dmul+0xde>
   83b1c:	ebb5 0c03 	subs.w	ip, r5, r3
   83b20:	bf04      	itt	eq
   83b22:	ebb6 0c02 	subseq.w	ip, r6, r2
   83b26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83b2a:	f150 0000 	adcs.w	r0, r0, #0
   83b2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83b32:	bd70      	pop	{r4, r5, r6, pc}
   83b34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83b38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83b3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83b40:	bfc2      	ittt	gt
   83b42:	ebd4 050c 	rsbsgt	r5, r4, ip
   83b46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83b4a:	bd70      	popgt	{r4, r5, r6, pc}
   83b4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83b50:	f04f 0e00 	mov.w	lr, #0
   83b54:	3c01      	subs	r4, #1
   83b56:	e690      	b.n	8387a <__aeabi_dmul+0xde>
   83b58:	ea45 0e06 	orr.w	lr, r5, r6
   83b5c:	e68d      	b.n	8387a <__aeabi_dmul+0xde>
   83b5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83b62:	ea94 0f0c 	teq	r4, ip
   83b66:	bf08      	it	eq
   83b68:	ea95 0f0c 	teqeq	r5, ip
   83b6c:	f43f af3b 	beq.w	839e6 <__aeabi_dmul+0x24a>
   83b70:	ea94 0f0c 	teq	r4, ip
   83b74:	d10a      	bne.n	83b8c <__aeabi_ddiv+0x19c>
   83b76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83b7a:	f47f af34 	bne.w	839e6 <__aeabi_dmul+0x24a>
   83b7e:	ea95 0f0c 	teq	r5, ip
   83b82:	f47f af25 	bne.w	839d0 <__aeabi_dmul+0x234>
   83b86:	4610      	mov	r0, r2
   83b88:	4619      	mov	r1, r3
   83b8a:	e72c      	b.n	839e6 <__aeabi_dmul+0x24a>
   83b8c:	ea95 0f0c 	teq	r5, ip
   83b90:	d106      	bne.n	83ba0 <__aeabi_ddiv+0x1b0>
   83b92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83b96:	f43f aefd 	beq.w	83994 <__aeabi_dmul+0x1f8>
   83b9a:	4610      	mov	r0, r2
   83b9c:	4619      	mov	r1, r3
   83b9e:	e722      	b.n	839e6 <__aeabi_dmul+0x24a>
   83ba0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83ba4:	bf18      	it	ne
   83ba6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83baa:	f47f aec5 	bne.w	83938 <__aeabi_dmul+0x19c>
   83bae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83bb2:	f47f af0d 	bne.w	839d0 <__aeabi_dmul+0x234>
   83bb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   83bba:	f47f aeeb 	bne.w	83994 <__aeabi_dmul+0x1f8>
   83bbe:	e712      	b.n	839e6 <__aeabi_dmul+0x24a>

00083bc0 <__aeabi_d2iz>:
   83bc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83bc8:	d215      	bcs.n	83bf6 <__aeabi_d2iz+0x36>
   83bca:	d511      	bpl.n	83bf0 <__aeabi_d2iz+0x30>
   83bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83bd4:	d912      	bls.n	83bfc <__aeabi_d2iz+0x3c>
   83bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83be2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83be6:	fa23 f002 	lsr.w	r0, r3, r2
   83bea:	bf18      	it	ne
   83bec:	4240      	negne	r0, r0
   83bee:	4770      	bx	lr
   83bf0:	f04f 0000 	mov.w	r0, #0
   83bf4:	4770      	bx	lr
   83bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83bfa:	d105      	bne.n	83c08 <__aeabi_d2iz+0x48>
   83bfc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   83c00:	bf08      	it	eq
   83c02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83c06:	4770      	bx	lr
   83c08:	f04f 0000 	mov.w	r0, #0
   83c0c:	4770      	bx	lr
   83c0e:	bf00      	nop

00083c10 <__aeabi_d2uiz>:
   83c10:	004a      	lsls	r2, r1, #1
   83c12:	d211      	bcs.n	83c38 <__aeabi_d2uiz+0x28>
   83c14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83c18:	d211      	bcs.n	83c3e <__aeabi_d2uiz+0x2e>
   83c1a:	d50d      	bpl.n	83c38 <__aeabi_d2uiz+0x28>
   83c1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83c20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83c24:	d40e      	bmi.n	83c44 <__aeabi_d2uiz+0x34>
   83c26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83c2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83c32:	fa23 f002 	lsr.w	r0, r3, r2
   83c36:	4770      	bx	lr
   83c38:	f04f 0000 	mov.w	r0, #0
   83c3c:	4770      	bx	lr
   83c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83c42:	d102      	bne.n	83c4a <__aeabi_d2uiz+0x3a>
   83c44:	f04f 30ff 	mov.w	r0, #4294967295
   83c48:	4770      	bx	lr
   83c4a:	f04f 0000 	mov.w	r0, #0
   83c4e:	4770      	bx	lr

00083c50 <atexit>:
   83c50:	4601      	mov	r1, r0
   83c52:	2000      	movs	r0, #0
   83c54:	4602      	mov	r2, r0
   83c56:	4603      	mov	r3, r0
   83c58:	f001 ba3c 	b.w	850d4 <__register_exitproc>

00083c5c <__libc_fini_array>:
   83c5c:	b570      	push	{r4, r5, r6, lr}
   83c5e:	4b08      	ldr	r3, [pc, #32]	; (83c80 <__libc_fini_array+0x24>)
   83c60:	4c08      	ldr	r4, [pc, #32]	; (83c84 <__libc_fini_array+0x28>)
   83c62:	2500      	movs	r5, #0
   83c64:	1ae0      	subs	r0, r4, r3
   83c66:	1084      	asrs	r4, r0, #2
   83c68:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   83c6c:	3d04      	subs	r5, #4
   83c6e:	b11c      	cbz	r4, 83c78 <__libc_fini_array+0x1c>
   83c70:	5972      	ldr	r2, [r6, r5]
   83c72:	4790      	blx	r2
   83c74:	3c01      	subs	r4, #1
   83c76:	e7f9      	b.n	83c6c <__libc_fini_array+0x10>
   83c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   83c7c:	f003 bd28 	b.w	876d0 <_fini>
   83c80:	000876dc 	.word	0x000876dc
   83c84:	000876e0 	.word	0x000876e0

00083c88 <__libc_init_array>:
   83c88:	b538      	push	{r3, r4, r5, lr}
   83c8a:	4d0e      	ldr	r5, [pc, #56]	; (83cc4 <__libc_init_array+0x3c>)
   83c8c:	4b0e      	ldr	r3, [pc, #56]	; (83cc8 <__libc_init_array+0x40>)
   83c8e:	2400      	movs	r4, #0
   83c90:	1ae8      	subs	r0, r5, r3
   83c92:	1085      	asrs	r5, r0, #2
   83c94:	42ac      	cmp	r4, r5
   83c96:	d005      	beq.n	83ca4 <__libc_init_array+0x1c>
   83c98:	490b      	ldr	r1, [pc, #44]	; (83cc8 <__libc_init_array+0x40>)
   83c9a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   83c9e:	4790      	blx	r2
   83ca0:	3401      	adds	r4, #1
   83ca2:	e7f7      	b.n	83c94 <__libc_init_array+0xc>
   83ca4:	f003 fd0a 	bl	876bc <_init>
   83ca8:	4908      	ldr	r1, [pc, #32]	; (83ccc <__libc_init_array+0x44>)
   83caa:	4a09      	ldr	r2, [pc, #36]	; (83cd0 <__libc_init_array+0x48>)
   83cac:	1a54      	subs	r4, r2, r1
   83cae:	10a5      	asrs	r5, r4, #2
   83cb0:	2400      	movs	r4, #0
   83cb2:	42ac      	cmp	r4, r5
   83cb4:	d005      	beq.n	83cc2 <__libc_init_array+0x3a>
   83cb6:	4b05      	ldr	r3, [pc, #20]	; (83ccc <__libc_init_array+0x44>)
   83cb8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   83cbc:	4780      	blx	r0
   83cbe:	3401      	adds	r4, #1
   83cc0:	e7f7      	b.n	83cb2 <__libc_init_array+0x2a>
   83cc2:	bd38      	pop	{r3, r4, r5, pc}
   83cc4:	000876c8 	.word	0x000876c8
   83cc8:	000876c8 	.word	0x000876c8
   83ccc:	000876c8 	.word	0x000876c8
   83cd0:	000876d0 	.word	0x000876d0

00083cd4 <iprintf>:
   83cd4:	b40f      	push	{r0, r1, r2, r3}
   83cd6:	b507      	push	{r0, r1, r2, lr}
   83cd8:	4906      	ldr	r1, [pc, #24]	; (83cf4 <iprintf+0x20>)
   83cda:	ab04      	add	r3, sp, #16
   83cdc:	6808      	ldr	r0, [r1, #0]
   83cde:	f853 2b04 	ldr.w	r2, [r3], #4
   83ce2:	6881      	ldr	r1, [r0, #8]
   83ce4:	9301      	str	r3, [sp, #4]
   83ce6:	f000 fd37 	bl	84758 <_vfiprintf_r>
   83cea:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   83cee:	b004      	add	sp, #16
   83cf0:	4770      	bx	lr
   83cf2:	bf00      	nop
   83cf4:	20070038 	.word	0x20070038

00083cf8 <_iprintf_r>:
   83cf8:	b40e      	push	{r1, r2, r3}
   83cfa:	b503      	push	{r0, r1, lr}
   83cfc:	ab03      	add	r3, sp, #12
   83cfe:	f853 2b04 	ldr.w	r2, [r3], #4
   83d02:	6881      	ldr	r1, [r0, #8]
   83d04:	9301      	str	r3, [sp, #4]
   83d06:	f000 fd27 	bl	84758 <_vfiprintf_r>
   83d0a:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   83d0e:	b003      	add	sp, #12
   83d10:	4770      	bx	lr
   83d12:	bf00      	nop

00083d14 <memcpy>:
   83d14:	b510      	push	{r4, lr}
   83d16:	2300      	movs	r3, #0
   83d18:	4293      	cmp	r3, r2
   83d1a:	d003      	beq.n	83d24 <memcpy+0x10>
   83d1c:	5ccc      	ldrb	r4, [r1, r3]
   83d1e:	54c4      	strb	r4, [r0, r3]
   83d20:	3301      	adds	r3, #1
   83d22:	e7f9      	b.n	83d18 <memcpy+0x4>
   83d24:	bd10      	pop	{r4, pc}

00083d26 <memset>:
   83d26:	1882      	adds	r2, r0, r2
   83d28:	4603      	mov	r3, r0
   83d2a:	4293      	cmp	r3, r2
   83d2c:	d002      	beq.n	83d34 <memset+0xe>
   83d2e:	f803 1b01 	strb.w	r1, [r3], #1
   83d32:	e7fa      	b.n	83d2a <memset+0x4>
   83d34:	4770      	bx	lr

00083d36 <setbuf>:
   83d36:	2900      	cmp	r1, #0
   83d38:	bf0c      	ite	eq
   83d3a:	2202      	moveq	r2, #2
   83d3c:	2200      	movne	r2, #0
   83d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83d42:	f000 b801 	b.w	83d48 <setvbuf>
	...

00083d48 <setvbuf>:
   83d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d4c:	461d      	mov	r5, r3
   83d4e:	4b37      	ldr	r3, [pc, #220]	; (83e2c <setvbuf+0xe4>)
   83d50:	4604      	mov	r4, r0
   83d52:	6818      	ldr	r0, [r3, #0]
   83d54:	460e      	mov	r6, r1
   83d56:	4617      	mov	r7, r2
   83d58:	4698      	mov	r8, r3
   83d5a:	b118      	cbz	r0, 83d64 <setvbuf+0x1c>
   83d5c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   83d5e:	b90a      	cbnz	r2, 83d64 <setvbuf+0x1c>
   83d60:	f001 fb02 	bl	85368 <__sinit>
   83d64:	2f02      	cmp	r7, #2
   83d66:	d85d      	bhi.n	83e24 <setvbuf+0xdc>
   83d68:	2d00      	cmp	r5, #0
   83d6a:	db5b      	blt.n	83e24 <setvbuf+0xdc>
   83d6c:	4621      	mov	r1, r4
   83d6e:	f8d8 0000 	ldr.w	r0, [r8]
   83d72:	f001 fa07 	bl	85184 <_fflush_r>
   83d76:	89a1      	ldrh	r1, [r4, #12]
   83d78:	2000      	movs	r0, #0
   83d7a:	f001 0380 	and.w	r3, r1, #128	; 0x80
   83d7e:	b21a      	sxth	r2, r3
   83d80:	6060      	str	r0, [r4, #4]
   83d82:	61a0      	str	r0, [r4, #24]
   83d84:	b122      	cbz	r2, 83d90 <setvbuf+0x48>
   83d86:	4829      	ldr	r0, [pc, #164]	; (83e2c <setvbuf+0xe4>)
   83d88:	6921      	ldr	r1, [r4, #16]
   83d8a:	6800      	ldr	r0, [r0, #0]
   83d8c:	f001 fc2a 	bl	855e4 <_free_r>
   83d90:	89a1      	ldrh	r1, [r4, #12]
   83d92:	2f02      	cmp	r7, #2
   83d94:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   83d98:	81a3      	strh	r3, [r4, #12]
   83d9a:	d012      	beq.n	83dc2 <setvbuf+0x7a>
   83d9c:	bb36      	cbnz	r6, 83dec <setvbuf+0xa4>
   83d9e:	2d00      	cmp	r5, #0
   83da0:	bf08      	it	eq
   83da2:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   83da6:	4628      	mov	r0, r5
   83da8:	f001 ff20 	bl	85bec <malloc>
   83dac:	4606      	mov	r6, r0
   83dae:	b9c8      	cbnz	r0, 83de4 <setvbuf+0x9c>
   83db0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83db4:	f001 ff1a 	bl	85bec <malloc>
   83db8:	4606      	mov	r6, r0
   83dba:	b988      	cbnz	r0, 83de0 <setvbuf+0x98>
   83dbc:	f04f 30ff 	mov.w	r0, #4294967295
   83dc0:	e000      	b.n	83dc4 <setvbuf+0x7c>
   83dc2:	2000      	movs	r0, #0
   83dc4:	89a1      	ldrh	r1, [r4, #12]
   83dc6:	2200      	movs	r2, #0
   83dc8:	f041 0302 	orr.w	r3, r1, #2
   83dcc:	81a3      	strh	r3, [r4, #12]
   83dce:	f104 0143 	add.w	r1, r4, #67	; 0x43
   83dd2:	2301      	movs	r3, #1
   83dd4:	60a2      	str	r2, [r4, #8]
   83dd6:	6021      	str	r1, [r4, #0]
   83dd8:	6121      	str	r1, [r4, #16]
   83dda:	6163      	str	r3, [r4, #20]
   83ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83de0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83de4:	89a2      	ldrh	r2, [r4, #12]
   83de6:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   83dea:	81a0      	strh	r0, [r4, #12]
   83dec:	2f01      	cmp	r7, #1
   83dee:	d105      	bne.n	83dfc <setvbuf+0xb4>
   83df0:	89a1      	ldrh	r1, [r4, #12]
   83df2:	426a      	negs	r2, r5
   83df4:	f041 0301 	orr.w	r3, r1, #1
   83df8:	81a3      	strh	r3, [r4, #12]
   83dfa:	61a2      	str	r2, [r4, #24]
   83dfc:	480b      	ldr	r0, [pc, #44]	; (83e2c <setvbuf+0xe4>)
   83dfe:	89a2      	ldrh	r2, [r4, #12]
   83e00:	6801      	ldr	r1, [r0, #0]
   83e02:	4b0b      	ldr	r3, [pc, #44]	; (83e30 <setvbuf+0xe8>)
   83e04:	f002 0008 	and.w	r0, r2, #8
   83e08:	b200      	sxth	r0, r0
   83e0a:	63cb      	str	r3, [r1, #60]	; 0x3c
   83e0c:	6026      	str	r6, [r4, #0]
   83e0e:	6126      	str	r6, [r4, #16]
   83e10:	6165      	str	r5, [r4, #20]
   83e12:	b148      	cbz	r0, 83e28 <setvbuf+0xe0>
   83e14:	f012 0f03 	tst.w	r2, #3
   83e18:	bf18      	it	ne
   83e1a:	2500      	movne	r5, #0
   83e1c:	60a5      	str	r5, [r4, #8]
   83e1e:	2000      	movs	r0, #0
   83e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e24:	f04f 30ff 	mov.w	r0, #4294967295
   83e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e2c:	20070038 	.word	0x20070038
   83e30:	000852dd 	.word	0x000852dd

00083e34 <_sprintf_r>:
   83e34:	b40c      	push	{r2, r3}
   83e36:	b510      	push	{r4, lr}
   83e38:	b09c      	sub	sp, #112	; 0x70
   83e3a:	ab1e      	add	r3, sp, #120	; 0x78
   83e3c:	9102      	str	r1, [sp, #8]
   83e3e:	9106      	str	r1, [sp, #24]
   83e40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   83e44:	f853 2b04 	ldr.w	r2, [r3], #4
   83e48:	9104      	str	r1, [sp, #16]
   83e4a:	9107      	str	r1, [sp, #28]
   83e4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83e50:	f8ad 1016 	strh.w	r1, [sp, #22]
   83e54:	f44f 7402 	mov.w	r4, #520	; 0x208
   83e58:	a902      	add	r1, sp, #8
   83e5a:	9301      	str	r3, [sp, #4]
   83e5c:	f8ad 4014 	strh.w	r4, [sp, #20]
   83e60:	f000 f84a 	bl	83ef8 <_svfprintf_r>
   83e64:	9b02      	ldr	r3, [sp, #8]
   83e66:	2200      	movs	r2, #0
   83e68:	701a      	strb	r2, [r3, #0]
   83e6a:	b01c      	add	sp, #112	; 0x70
   83e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83e70:	b002      	add	sp, #8
   83e72:	4770      	bx	lr

00083e74 <sprintf>:
   83e74:	b40e      	push	{r1, r2, r3}
   83e76:	b500      	push	{lr}
   83e78:	b09c      	sub	sp, #112	; 0x70
   83e7a:	9002      	str	r0, [sp, #8]
   83e7c:	9006      	str	r0, [sp, #24]
   83e7e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   83e82:	ab1d      	add	r3, sp, #116	; 0x74
   83e84:	9004      	str	r0, [sp, #16]
   83e86:	9007      	str	r0, [sp, #28]
   83e88:	f44f 7102 	mov.w	r1, #520	; 0x208
   83e8c:	480a      	ldr	r0, [pc, #40]	; (83eb8 <sprintf+0x44>)
   83e8e:	f853 2b04 	ldr.w	r2, [r3], #4
   83e92:	f8ad 1014 	strh.w	r1, [sp, #20]
   83e96:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83e9a:	f8ad 1016 	strh.w	r1, [sp, #22]
   83e9e:	6800      	ldr	r0, [r0, #0]
   83ea0:	a902      	add	r1, sp, #8
   83ea2:	9301      	str	r3, [sp, #4]
   83ea4:	f000 f828 	bl	83ef8 <_svfprintf_r>
   83ea8:	9b02      	ldr	r3, [sp, #8]
   83eaa:	2200      	movs	r2, #0
   83eac:	701a      	strb	r2, [r3, #0]
   83eae:	b01c      	add	sp, #112	; 0x70
   83eb0:	f85d eb04 	ldr.w	lr, [sp], #4
   83eb4:	b003      	add	sp, #12
   83eb6:	4770      	bx	lr
   83eb8:	20070038 	.word	0x20070038

00083ebc <strlen>:
   83ebc:	4603      	mov	r3, r0
   83ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
   83ec2:	2a00      	cmp	r2, #0
   83ec4:	d1fb      	bne.n	83ebe <strlen+0x2>
   83ec6:	1a18      	subs	r0, r3, r0
   83ec8:	3801      	subs	r0, #1
   83eca:	4770      	bx	lr

00083ecc <strncpy>:
   83ecc:	b530      	push	{r4, r5, lr}
   83ece:	3901      	subs	r1, #1
   83ed0:	4603      	mov	r3, r0
   83ed2:	461c      	mov	r4, r3
   83ed4:	b13a      	cbz	r2, 83ee6 <strncpy+0x1a>
   83ed6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   83eda:	3a01      	subs	r2, #1
   83edc:	f803 5b01 	strb.w	r5, [r3], #1
   83ee0:	461c      	mov	r4, r3
   83ee2:	2d00      	cmp	r5, #0
   83ee4:	d1f5      	bne.n	83ed2 <strncpy+0x6>
   83ee6:	1899      	adds	r1, r3, r2
   83ee8:	428c      	cmp	r4, r1
   83eea:	d003      	beq.n	83ef4 <strncpy+0x28>
   83eec:	2200      	movs	r2, #0
   83eee:	f804 2b01 	strb.w	r2, [r4], #1
   83ef2:	e7f9      	b.n	83ee8 <strncpy+0x1c>
   83ef4:	bd30      	pop	{r4, r5, pc}
	...

00083ef8 <_svfprintf_r>:
   83ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83efc:	461e      	mov	r6, r3
   83efe:	898b      	ldrh	r3, [r1, #12]
   83f00:	4689      	mov	r9, r1
   83f02:	f003 0180 	and.w	r1, r3, #128	; 0x80
   83f06:	4614      	mov	r4, r2
   83f08:	b20a      	sxth	r2, r1
   83f0a:	b0a9      	sub	sp, #164	; 0xa4
   83f0c:	4683      	mov	fp, r0
   83f0e:	b19a      	cbz	r2, 83f38 <_svfprintf_r+0x40>
   83f10:	f8d9 3010 	ldr.w	r3, [r9, #16]
   83f14:	b983      	cbnz	r3, 83f38 <_svfprintf_r+0x40>
   83f16:	2140      	movs	r1, #64	; 0x40
   83f18:	f001 fe78 	bl	85c0c <_malloc_r>
   83f1c:	f8c9 0000 	str.w	r0, [r9]
   83f20:	f8c9 0010 	str.w	r0, [r9, #16]
   83f24:	b928      	cbnz	r0, 83f32 <_svfprintf_r+0x3a>
   83f26:	220c      	movs	r2, #12
   83f28:	f8cb 2000 	str.w	r2, [fp]
   83f2c:	f04f 30ff 	mov.w	r0, #4294967295
   83f30:	e3da      	b.n	846e8 <_svfprintf_r+0x7f0>
   83f32:	2040      	movs	r0, #64	; 0x40
   83f34:	f8c9 0014 	str.w	r0, [r9, #20]
   83f38:	2100      	movs	r1, #0
   83f3a:	ad18      	add	r5, sp, #96	; 0x60
   83f3c:	950b      	str	r5, [sp, #44]	; 0x2c
   83f3e:	910d      	str	r1, [sp, #52]	; 0x34
   83f40:	910c      	str	r1, [sp, #48]	; 0x30
   83f42:	9401      	str	r4, [sp, #4]
   83f44:	9105      	str	r1, [sp, #20]
   83f46:	9104      	str	r1, [sp, #16]
   83f48:	46a8      	mov	r8, r5
   83f4a:	9b01      	ldr	r3, [sp, #4]
   83f4c:	461c      	mov	r4, r3
   83f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
   83f52:	b91a      	cbnz	r2, 83f5c <_svfprintf_r+0x64>
   83f54:	9801      	ldr	r0, [sp, #4]
   83f56:	1a25      	subs	r5, r4, r0
   83f58:	d103      	bne.n	83f62 <_svfprintf_r+0x6a>
   83f5a:	e01d      	b.n	83f98 <_svfprintf_r+0xa0>
   83f5c:	2a25      	cmp	r2, #37	; 0x25
   83f5e:	d1f5      	bne.n	83f4c <_svfprintf_r+0x54>
   83f60:	e7f8      	b.n	83f54 <_svfprintf_r+0x5c>
   83f62:	9a01      	ldr	r2, [sp, #4]
   83f64:	990d      	ldr	r1, [sp, #52]	; 0x34
   83f66:	e888 0024 	stmia.w	r8, {r2, r5}
   83f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83f6c:	194b      	adds	r3, r1, r5
   83f6e:	1c50      	adds	r0, r2, #1
   83f70:	2807      	cmp	r0, #7
   83f72:	930d      	str	r3, [sp, #52]	; 0x34
   83f74:	900c      	str	r0, [sp, #48]	; 0x30
   83f76:	dc02      	bgt.n	83f7e <_svfprintf_r+0x86>
   83f78:	f108 0808 	add.w	r8, r8, #8
   83f7c:	e009      	b.n	83f92 <_svfprintf_r+0x9a>
   83f7e:	4658      	mov	r0, fp
   83f80:	4649      	mov	r1, r9
   83f82:	aa0b      	add	r2, sp, #44	; 0x2c
   83f84:	f002 fa3e 	bl	86404 <__ssprint_r>
   83f88:	2800      	cmp	r0, #0
   83f8a:	f040 83a2 	bne.w	846d2 <_svfprintf_r+0x7da>
   83f8e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83f92:	9904      	ldr	r1, [sp, #16]
   83f94:	194b      	adds	r3, r1, r5
   83f96:	9304      	str	r3, [sp, #16]
   83f98:	7822      	ldrb	r2, [r4, #0]
   83f9a:	2a00      	cmp	r2, #0
   83f9c:	f000 8392 	beq.w	846c4 <_svfprintf_r+0x7cc>
   83fa0:	2200      	movs	r2, #0
   83fa2:	3401      	adds	r4, #1
   83fa4:	9401      	str	r4, [sp, #4]
   83fa6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83faa:	f04f 3cff 	mov.w	ip, #4294967295
   83fae:	9203      	str	r2, [sp, #12]
   83fb0:	4617      	mov	r7, r2
   83fb2:	9801      	ldr	r0, [sp, #4]
   83fb4:	f810 3b01 	ldrb.w	r3, [r0], #1
   83fb8:	9001      	str	r0, [sp, #4]
   83fba:	2b63      	cmp	r3, #99	; 0x63
   83fbc:	f000 80b3 	beq.w	84126 <_svfprintf_r+0x22e>
   83fc0:	dc33      	bgt.n	8402a <_svfprintf_r+0x132>
   83fc2:	2b39      	cmp	r3, #57	; 0x39
   83fc4:	dc1a      	bgt.n	83ffc <_svfprintf_r+0x104>
   83fc6:	2b31      	cmp	r3, #49	; 0x31
   83fc8:	f280 8091 	bge.w	840ee <_svfprintf_r+0x1f6>
   83fcc:	2b2b      	cmp	r3, #43	; 0x2b
   83fce:	d101      	bne.n	83fd4 <_svfprintf_r+0xdc>
   83fd0:	461a      	mov	r2, r3
   83fd2:	e7ee      	b.n	83fb2 <_svfprintf_r+0xba>
   83fd4:	dc0a      	bgt.n	83fec <_svfprintf_r+0xf4>
   83fd6:	2b23      	cmp	r3, #35	; 0x23
   83fd8:	d055      	beq.n	84086 <_svfprintf_r+0x18e>
   83fda:	2b2a      	cmp	r3, #42	; 0x2a
   83fdc:	d056      	beq.n	8408c <_svfprintf_r+0x194>
   83fde:	2b20      	cmp	r3, #32
   83fe0:	f040 81f5 	bne.w	843ce <_svfprintf_r+0x4d6>
   83fe4:	2a00      	cmp	r2, #0
   83fe6:	bf08      	it	eq
   83fe8:	2220      	moveq	r2, #32
   83fea:	e7e2      	b.n	83fb2 <_svfprintf_r+0xba>
   83fec:	2b2e      	cmp	r3, #46	; 0x2e
   83fee:	d058      	beq.n	840a2 <_svfprintf_r+0x1aa>
   83ff0:	2b30      	cmp	r3, #48	; 0x30
   83ff2:	d079      	beq.n	840e8 <_svfprintf_r+0x1f0>
   83ff4:	2b2d      	cmp	r3, #45	; 0x2d
   83ff6:	f040 81ea 	bne.w	843ce <_svfprintf_r+0x4d6>
   83ffa:	e04f      	b.n	8409c <_svfprintf_r+0x1a4>
   83ffc:	2b4f      	cmp	r3, #79	; 0x4f
   83ffe:	f000 80de 	beq.w	841be <_svfprintf_r+0x2c6>
   84002:	dc07      	bgt.n	84014 <_svfprintf_r+0x11c>
   84004:	2b44      	cmp	r3, #68	; 0x44
   84006:	f040 81e2 	bne.w	843ce <_svfprintf_r+0x4d6>
   8400a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8400e:	f047 0710 	orr.w	r7, r7, #16
   84012:	e090      	b.n	84136 <_svfprintf_r+0x23e>
   84014:	2b55      	cmp	r3, #85	; 0x55
   84016:	f000 811f 	beq.w	84258 <_svfprintf_r+0x360>
   8401a:	2b58      	cmp	r3, #88	; 0x58
   8401c:	f040 81d7 	bne.w	843ce <_svfprintf_r+0x4d6>
   84020:	4dae      	ldr	r5, [pc, #696]	; (842dc <_svfprintf_r+0x3e4>)
   84022:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84026:	9505      	str	r5, [sp, #20]
   84028:	e130      	b.n	8428c <_svfprintf_r+0x394>
   8402a:	2b6f      	cmp	r3, #111	; 0x6f
   8402c:	f000 80c9 	beq.w	841c2 <_svfprintf_r+0x2ca>
   84030:	dc10      	bgt.n	84054 <_svfprintf_r+0x15c>
   84032:	2b69      	cmp	r3, #105	; 0x69
   84034:	d024      	beq.n	84080 <_svfprintf_r+0x188>
   84036:	dc07      	bgt.n	84048 <_svfprintf_r+0x150>
   84038:	2b64      	cmp	r3, #100	; 0x64
   8403a:	d021      	beq.n	84080 <_svfprintf_r+0x188>
   8403c:	2b68      	cmp	r3, #104	; 0x68
   8403e:	f040 81c6 	bne.w	843ce <_svfprintf_r+0x4d6>
   84042:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   84046:	e7b4      	b.n	83fb2 <_svfprintf_r+0xba>
   84048:	2b6c      	cmp	r3, #108	; 0x6c
   8404a:	d05f      	beq.n	8410c <_svfprintf_r+0x214>
   8404c:	2b6e      	cmp	r3, #110	; 0x6e
   8404e:	f040 81be 	bne.w	843ce <_svfprintf_r+0x4d6>
   84052:	e096      	b.n	84182 <_svfprintf_r+0x28a>
   84054:	2b73      	cmp	r3, #115	; 0x73
   84056:	f000 80df 	beq.w	84218 <_svfprintf_r+0x320>
   8405a:	dc06      	bgt.n	8406a <_svfprintf_r+0x172>
   8405c:	2b70      	cmp	r3, #112	; 0x70
   8405e:	f000 80cd 	beq.w	841fc <_svfprintf_r+0x304>
   84062:	2b71      	cmp	r3, #113	; 0x71
   84064:	f040 81b3 	bne.w	843ce <_svfprintf_r+0x4d6>
   84068:	e05a      	b.n	84120 <_svfprintf_r+0x228>
   8406a:	2b75      	cmp	r3, #117	; 0x75
   8406c:	f000 80f6 	beq.w	8425c <_svfprintf_r+0x364>
   84070:	2b78      	cmp	r3, #120	; 0x78
   84072:	f040 81ac 	bne.w	843ce <_svfprintf_r+0x4d6>
   84076:	4d9a      	ldr	r5, [pc, #616]	; (842e0 <_svfprintf_r+0x3e8>)
   84078:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8407c:	9505      	str	r5, [sp, #20]
   8407e:	e105      	b.n	8428c <_svfprintf_r+0x394>
   84080:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84084:	e057      	b.n	84136 <_svfprintf_r+0x23e>
   84086:	f047 0701 	orr.w	r7, r7, #1
   8408a:	e792      	b.n	83fb2 <_svfprintf_r+0xba>
   8408c:	1d33      	adds	r3, r6, #4
   8408e:	6836      	ldr	r6, [r6, #0]
   84090:	2e00      	cmp	r6, #0
   84092:	9603      	str	r6, [sp, #12]
   84094:	da15      	bge.n	840c2 <_svfprintf_r+0x1ca>
   84096:	4270      	negs	r0, r6
   84098:	9003      	str	r0, [sp, #12]
   8409a:	461e      	mov	r6, r3
   8409c:	f047 0704 	orr.w	r7, r7, #4
   840a0:	e787      	b.n	83fb2 <_svfprintf_r+0xba>
   840a2:	9901      	ldr	r1, [sp, #4]
   840a4:	f811 3b01 	ldrb.w	r3, [r1], #1
   840a8:	2b2a      	cmp	r3, #42	; 0x2a
   840aa:	9101      	str	r1, [sp, #4]
   840ac:	d10b      	bne.n	840c6 <_svfprintf_r+0x1ce>
   840ae:	f8d6 c000 	ldr.w	ip, [r6]
   840b2:	1d33      	adds	r3, r6, #4
   840b4:	f1bc 0f00 	cmp.w	ip, #0
   840b8:	da03      	bge.n	840c2 <_svfprintf_r+0x1ca>
   840ba:	461e      	mov	r6, r3
   840bc:	f04f 3cff 	mov.w	ip, #4294967295
   840c0:	e777      	b.n	83fb2 <_svfprintf_r+0xba>
   840c2:	461e      	mov	r6, r3
   840c4:	e775      	b.n	83fb2 <_svfprintf_r+0xba>
   840c6:	f04f 0c00 	mov.w	ip, #0
   840ca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   840ce:	2809      	cmp	r0, #9
   840d0:	d807      	bhi.n	840e2 <_svfprintf_r+0x1ea>
   840d2:	9901      	ldr	r1, [sp, #4]
   840d4:	230a      	movs	r3, #10
   840d6:	fb03 0c0c 	mla	ip, r3, ip, r0
   840da:	f811 3b01 	ldrb.w	r3, [r1], #1
   840de:	9101      	str	r1, [sp, #4]
   840e0:	e7f3      	b.n	840ca <_svfprintf_r+0x1d2>
   840e2:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   840e6:	e768      	b.n	83fba <_svfprintf_r+0xc2>
   840e8:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   840ec:	e761      	b.n	83fb2 <_svfprintf_r+0xba>
   840ee:	9801      	ldr	r0, [sp, #4]
   840f0:	2100      	movs	r1, #0
   840f2:	3b30      	subs	r3, #48	; 0x30
   840f4:	240a      	movs	r4, #10
   840f6:	fb04 3101 	mla	r1, r4, r1, r3
   840fa:	f810 3b01 	ldrb.w	r3, [r0], #1
   840fe:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   84102:	2c09      	cmp	r4, #9
   84104:	9001      	str	r0, [sp, #4]
   84106:	d9f4      	bls.n	840f2 <_svfprintf_r+0x1fa>
   84108:	9103      	str	r1, [sp, #12]
   8410a:	e756      	b.n	83fba <_svfprintf_r+0xc2>
   8410c:	9901      	ldr	r1, [sp, #4]
   8410e:	780b      	ldrb	r3, [r1, #0]
   84110:	2b6c      	cmp	r3, #108	; 0x6c
   84112:	d102      	bne.n	8411a <_svfprintf_r+0x222>
   84114:	1c48      	adds	r0, r1, #1
   84116:	9001      	str	r0, [sp, #4]
   84118:	e002      	b.n	84120 <_svfprintf_r+0x228>
   8411a:	f047 0710 	orr.w	r7, r7, #16
   8411e:	e748      	b.n	83fb2 <_svfprintf_r+0xba>
   84120:	f047 0720 	orr.w	r7, r7, #32
   84124:	e745      	b.n	83fb2 <_svfprintf_r+0xba>
   84126:	6832      	ldr	r2, [r6, #0]
   84128:	2500      	movs	r5, #0
   8412a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8412e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84132:	3604      	adds	r6, #4
   84134:	e155      	b.n	843e2 <_svfprintf_r+0x4ea>
   84136:	06ba      	lsls	r2, r7, #26
   84138:	d507      	bpl.n	8414a <_svfprintf_r+0x252>
   8413a:	3607      	adds	r6, #7
   8413c:	f026 0507 	bic.w	r5, r6, #7
   84140:	f105 0608 	add.w	r6, r5, #8
   84144:	e9d5 4500 	ldrd	r4, r5, [r5]
   84148:	e00f      	b.n	8416a <_svfprintf_r+0x272>
   8414a:	f017 0f10 	tst.w	r7, #16
   8414e:	f106 0104 	add.w	r1, r6, #4
   84152:	d001      	beq.n	84158 <_svfprintf_r+0x260>
   84154:	6832      	ldr	r2, [r6, #0]
   84156:	e005      	b.n	84164 <_svfprintf_r+0x26c>
   84158:	f017 0f40 	tst.w	r7, #64	; 0x40
   8415c:	6832      	ldr	r2, [r6, #0]
   8415e:	d001      	beq.n	84164 <_svfprintf_r+0x26c>
   84160:	b214      	sxth	r4, r2
   84162:	e000      	b.n	84166 <_svfprintf_r+0x26e>
   84164:	4614      	mov	r4, r2
   84166:	17e5      	asrs	r5, r4, #31
   84168:	460e      	mov	r6, r1
   8416a:	2c00      	cmp	r4, #0
   8416c:	f175 0200 	sbcs.w	r2, r5, #0
   84170:	f280 80b8 	bge.w	842e4 <_svfprintf_r+0x3ec>
   84174:	232d      	movs	r3, #45	; 0x2d
   84176:	4264      	negs	r4, r4
   84178:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8417c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   84180:	e0b0      	b.n	842e4 <_svfprintf_r+0x3ec>
   84182:	f017 0f20 	tst.w	r7, #32
   84186:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8418a:	f106 0204 	add.w	r2, r6, #4
   8418e:	d005      	beq.n	8419c <_svfprintf_r+0x2a4>
   84190:	9c04      	ldr	r4, [sp, #16]
   84192:	6835      	ldr	r5, [r6, #0]
   84194:	17e0      	asrs	r0, r4, #31
   84196:	602c      	str	r4, [r5, #0]
   84198:	6068      	str	r0, [r5, #4]
   8419a:	e004      	b.n	841a6 <_svfprintf_r+0x2ae>
   8419c:	06fb      	lsls	r3, r7, #27
   8419e:	d504      	bpl.n	841aa <_svfprintf_r+0x2b2>
   841a0:	6833      	ldr	r3, [r6, #0]
   841a2:	9904      	ldr	r1, [sp, #16]
   841a4:	6019      	str	r1, [r3, #0]
   841a6:	4616      	mov	r6, r2
   841a8:	e6cf      	b.n	83f4a <_svfprintf_r+0x52>
   841aa:	6830      	ldr	r0, [r6, #0]
   841ac:	9c04      	ldr	r4, [sp, #16]
   841ae:	f017 0f40 	tst.w	r7, #64	; 0x40
   841b2:	f106 0604 	add.w	r6, r6, #4
   841b6:	bf14      	ite	ne
   841b8:	8004      	strhne	r4, [r0, #0]
   841ba:	6004      	streq	r4, [r0, #0]
   841bc:	e6c5      	b.n	83f4a <_svfprintf_r+0x52>
   841be:	f047 0710 	orr.w	r7, r7, #16
   841c2:	f017 0020 	ands.w	r0, r7, #32
   841c6:	d008      	beq.n	841da <_svfprintf_r+0x2e2>
   841c8:	1df3      	adds	r3, r6, #7
   841ca:	f023 0507 	bic.w	r5, r3, #7
   841ce:	f105 0608 	add.w	r6, r5, #8
   841d2:	e9d5 4500 	ldrd	r4, r5, [r5]
   841d6:	2000      	movs	r0, #0
   841d8:	e07c      	b.n	842d4 <_svfprintf_r+0x3dc>
   841da:	f017 0110 	ands.w	r1, r7, #16
   841de:	f106 0204 	add.w	r2, r6, #4
   841e2:	d106      	bne.n	841f2 <_svfprintf_r+0x2fa>
   841e4:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   841e8:	d003      	beq.n	841f2 <_svfprintf_r+0x2fa>
   841ea:	8834      	ldrh	r4, [r6, #0]
   841ec:	2500      	movs	r5, #0
   841ee:	4616      	mov	r6, r2
   841f0:	e7f1      	b.n	841d6 <_svfprintf_r+0x2de>
   841f2:	6836      	ldr	r6, [r6, #0]
   841f4:	2500      	movs	r5, #0
   841f6:	4634      	mov	r4, r6
   841f8:	4616      	mov	r6, r2
   841fa:	e06b      	b.n	842d4 <_svfprintf_r+0x3dc>
   841fc:	4b38      	ldr	r3, [pc, #224]	; (842e0 <_svfprintf_r+0x3e8>)
   841fe:	2130      	movs	r1, #48	; 0x30
   84200:	2278      	movs	r2, #120	; 0x78
   84202:	6834      	ldr	r4, [r6, #0]
   84204:	2500      	movs	r5, #0
   84206:	f047 0702 	orr.w	r7, r7, #2
   8420a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8420e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   84212:	3604      	adds	r6, #4
   84214:	9305      	str	r3, [sp, #20]
   84216:	e05c      	b.n	842d2 <_svfprintf_r+0x3da>
   84218:	4631      	mov	r1, r6
   8421a:	2500      	movs	r5, #0
   8421c:	f8d1 a000 	ldr.w	sl, [r1]
   84220:	3604      	adds	r6, #4
   84222:	45ac      	cmp	ip, r5
   84224:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84228:	4650      	mov	r0, sl
   8422a:	db11      	blt.n	84250 <_svfprintf_r+0x358>
   8422c:	4662      	mov	r2, ip
   8422e:	4629      	mov	r1, r5
   84230:	f8cd c000 	str.w	ip, [sp]
   84234:	f001 feec 	bl	86010 <memchr>
   84238:	f8dd c000 	ldr.w	ip, [sp]
   8423c:	2800      	cmp	r0, #0
   8423e:	f000 80d4 	beq.w	843ea <_svfprintf_r+0x4f2>
   84242:	ebca 0400 	rsb	r4, sl, r0
   84246:	4564      	cmp	r4, ip
   84248:	f340 80d1 	ble.w	843ee <_svfprintf_r+0x4f6>
   8424c:	4664      	mov	r4, ip
   8424e:	e0ce      	b.n	843ee <_svfprintf_r+0x4f6>
   84250:	f7ff fe34 	bl	83ebc <strlen>
   84254:	4604      	mov	r4, r0
   84256:	e0ca      	b.n	843ee <_svfprintf_r+0x4f6>
   84258:	f047 0710 	orr.w	r7, r7, #16
   8425c:	06bd      	lsls	r5, r7, #26
   8425e:	d506      	bpl.n	8426e <_svfprintf_r+0x376>
   84260:	1df0      	adds	r0, r6, #7
   84262:	f020 0407 	bic.w	r4, r0, #7
   84266:	f104 0608 	add.w	r6, r4, #8
   8426a:	cc30      	ldmia	r4, {r4, r5}
   8426c:	e00c      	b.n	84288 <_svfprintf_r+0x390>
   8426e:	f017 0f10 	tst.w	r7, #16
   84272:	f106 0304 	add.w	r3, r6, #4
   84276:	d103      	bne.n	84280 <_svfprintf_r+0x388>
   84278:	067c      	lsls	r4, r7, #25
   8427a:	d501      	bpl.n	84280 <_svfprintf_r+0x388>
   8427c:	8834      	ldrh	r4, [r6, #0]
   8427e:	e001      	b.n	84284 <_svfprintf_r+0x38c>
   84280:	6835      	ldr	r5, [r6, #0]
   84282:	462c      	mov	r4, r5
   84284:	2500      	movs	r5, #0
   84286:	461e      	mov	r6, r3
   84288:	2001      	movs	r0, #1
   8428a:	e023      	b.n	842d4 <_svfprintf_r+0x3dc>
   8428c:	06b8      	lsls	r0, r7, #26
   8428e:	d507      	bpl.n	842a0 <_svfprintf_r+0x3a8>
   84290:	1df4      	adds	r4, r6, #7
   84292:	f024 0107 	bic.w	r1, r4, #7
   84296:	f101 0608 	add.w	r6, r1, #8
   8429a:	e9d1 4500 	ldrd	r4, r5, [r1]
   8429e:	e00c      	b.n	842ba <_svfprintf_r+0x3c2>
   842a0:	f017 0f10 	tst.w	r7, #16
   842a4:	f106 0004 	add.w	r0, r6, #4
   842a8:	d103      	bne.n	842b2 <_svfprintf_r+0x3ba>
   842aa:	0679      	lsls	r1, r7, #25
   842ac:	d501      	bpl.n	842b2 <_svfprintf_r+0x3ba>
   842ae:	8834      	ldrh	r4, [r6, #0]
   842b0:	e001      	b.n	842b6 <_svfprintf_r+0x3be>
   842b2:	6836      	ldr	r6, [r6, #0]
   842b4:	4634      	mov	r4, r6
   842b6:	2500      	movs	r5, #0
   842b8:	4606      	mov	r6, r0
   842ba:	07fa      	lsls	r2, r7, #31
   842bc:	d509      	bpl.n	842d2 <_svfprintf_r+0x3da>
   842be:	ea54 0205 	orrs.w	r2, r4, r5
   842c2:	d006      	beq.n	842d2 <_svfprintf_r+0x3da>
   842c4:	2230      	movs	r2, #48	; 0x30
   842c6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   842ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   842ce:	f047 0702 	orr.w	r7, r7, #2
   842d2:	2002      	movs	r0, #2
   842d4:	2100      	movs	r1, #0
   842d6:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   842da:	e004      	b.n	842e6 <_svfprintf_r+0x3ee>
   842dc:	00087652 	.word	0x00087652
   842e0:	00087663 	.word	0x00087663
   842e4:	2001      	movs	r0, #1
   842e6:	f1bc 0f00 	cmp.w	ip, #0
   842ea:	bfa8      	it	ge
   842ec:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   842f0:	ea54 0105 	orrs.w	r1, r4, r5
   842f4:	d102      	bne.n	842fc <_svfprintf_r+0x404>
   842f6:	f1bc 0f00 	cmp.w	ip, #0
   842fa:	d058      	beq.n	843ae <_svfprintf_r+0x4b6>
   842fc:	2801      	cmp	r0, #1
   842fe:	d01d      	beq.n	8433c <_svfprintf_r+0x444>
   84300:	2802      	cmp	r0, #2
   84302:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84306:	d041      	beq.n	8438c <_svfprintf_r+0x494>
   84308:	f004 0207 	and.w	r2, r4, #7
   8430c:	08e4      	lsrs	r4, r4, #3
   8430e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   84312:	08e9      	lsrs	r1, r5, #3
   84314:	4604      	mov	r4, r0
   84316:	460d      	mov	r5, r1
   84318:	3230      	adds	r2, #48	; 0x30
   8431a:	ea54 0105 	orrs.w	r1, r4, r5
   8431e:	469a      	mov	sl, r3
   84320:	701a      	strb	r2, [r3, #0]
   84322:	f103 33ff 	add.w	r3, r3, #4294967295
   84326:	d1ef      	bne.n	84308 <_svfprintf_r+0x410>
   84328:	07f8      	lsls	r0, r7, #31
   8432a:	4655      	mov	r5, sl
   8432c:	d54a      	bpl.n	843c4 <_svfprintf_r+0x4cc>
   8432e:	2a30      	cmp	r2, #48	; 0x30
   84330:	d048      	beq.n	843c4 <_svfprintf_r+0x4cc>
   84332:	2230      	movs	r2, #48	; 0x30
   84334:	469a      	mov	sl, r3
   84336:	f805 2c01 	strb.w	r2, [r5, #-1]
   8433a:	e043      	b.n	843c4 <_svfprintf_r+0x4cc>
   8433c:	2d00      	cmp	r5, #0
   8433e:	bf08      	it	eq
   84340:	2c0a      	cmpeq	r4, #10
   84342:	d203      	bcs.n	8434c <_svfprintf_r+0x454>
   84344:	3430      	adds	r4, #48	; 0x30
   84346:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8434a:	e036      	b.n	843ba <_svfprintf_r+0x4c2>
   8434c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84350:	9302      	str	r3, [sp, #8]
   84352:	4620      	mov	r0, r4
   84354:	4629      	mov	r1, r5
   84356:	220a      	movs	r2, #10
   84358:	2300      	movs	r3, #0
   8435a:	f8cd c000 	str.w	ip, [sp]
   8435e:	f002 fe2d 	bl	86fbc <__aeabi_uldivmod>
   84362:	9802      	ldr	r0, [sp, #8]
   84364:	3230      	adds	r2, #48	; 0x30
   84366:	f800 2901 	strb.w	r2, [r0], #-1
   8436a:	4629      	mov	r1, r5
   8436c:	220a      	movs	r2, #10
   8436e:	2300      	movs	r3, #0
   84370:	f8dd a008 	ldr.w	sl, [sp, #8]
   84374:	9002      	str	r0, [sp, #8]
   84376:	4620      	mov	r0, r4
   84378:	f002 fe20 	bl	86fbc <__aeabi_uldivmod>
   8437c:	4604      	mov	r4, r0
   8437e:	460d      	mov	r5, r1
   84380:	ea54 0105 	orrs.w	r1, r4, r5
   84384:	f8dd c000 	ldr.w	ip, [sp]
   84388:	d1e3      	bne.n	84352 <_svfprintf_r+0x45a>
   8438a:	e01b      	b.n	843c4 <_svfprintf_r+0x4cc>
   8438c:	9905      	ldr	r1, [sp, #20]
   8438e:	f004 000f 	and.w	r0, r4, #15
   84392:	0924      	lsrs	r4, r4, #4
   84394:	5c0a      	ldrb	r2, [r1, r0]
   84396:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8439a:	0929      	lsrs	r1, r5, #4
   8439c:	4604      	mov	r4, r0
   8439e:	460d      	mov	r5, r1
   843a0:	469a      	mov	sl, r3
   843a2:	f803 2901 	strb.w	r2, [r3], #-1
   843a6:	ea54 0205 	orrs.w	r2, r4, r5
   843aa:	d1ef      	bne.n	8438c <_svfprintf_r+0x494>
   843ac:	e00a      	b.n	843c4 <_svfprintf_r+0x4cc>
   843ae:	b938      	cbnz	r0, 843c0 <_svfprintf_r+0x4c8>
   843b0:	07f9      	lsls	r1, r7, #31
   843b2:	d505      	bpl.n	843c0 <_svfprintf_r+0x4c8>
   843b4:	2030      	movs	r0, #48	; 0x30
   843b6:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   843ba:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   843be:	e001      	b.n	843c4 <_svfprintf_r+0x4cc>
   843c0:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   843c4:	ad18      	add	r5, sp, #96	; 0x60
   843c6:	ebca 0405 	rsb	r4, sl, r5
   843ca:	4665      	mov	r5, ip
   843cc:	e00f      	b.n	843ee <_svfprintf_r+0x4f6>
   843ce:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   843d2:	2b00      	cmp	r3, #0
   843d4:	f000 8176 	beq.w	846c4 <_svfprintf_r+0x7cc>
   843d8:	2500      	movs	r5, #0
   843da:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   843de:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   843e2:	2401      	movs	r4, #1
   843e4:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   843e8:	e001      	b.n	843ee <_svfprintf_r+0x4f6>
   843ea:	4664      	mov	r4, ip
   843ec:	4605      	mov	r5, r0
   843ee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   843f2:	42ac      	cmp	r4, r5
   843f4:	bfac      	ite	ge
   843f6:	4621      	movge	r1, r4
   843f8:	4629      	movlt	r1, r5
   843fa:	9102      	str	r1, [sp, #8]
   843fc:	b113      	cbz	r3, 84404 <_svfprintf_r+0x50c>
   843fe:	9802      	ldr	r0, [sp, #8]
   84400:	1c42      	adds	r2, r0, #1
   84402:	9202      	str	r2, [sp, #8]
   84404:	f017 0102 	ands.w	r1, r7, #2
   84408:	9106      	str	r1, [sp, #24]
   8440a:	d002      	beq.n	84412 <_svfprintf_r+0x51a>
   8440c:	9b02      	ldr	r3, [sp, #8]
   8440e:	1c98      	adds	r0, r3, #2
   84410:	9002      	str	r0, [sp, #8]
   84412:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   84416:	9207      	str	r2, [sp, #28]
   84418:	d13c      	bne.n	84494 <_svfprintf_r+0x59c>
   8441a:	9903      	ldr	r1, [sp, #12]
   8441c:	9b02      	ldr	r3, [sp, #8]
   8441e:	1acb      	subs	r3, r1, r3
   84420:	2b00      	cmp	r3, #0
   84422:	dd37      	ble.n	84494 <_svfprintf_r+0x59c>
   84424:	48a5      	ldr	r0, [pc, #660]	; (846bc <_svfprintf_r+0x7c4>)
   84426:	2b10      	cmp	r3, #16
   84428:	f8c8 0000 	str.w	r0, [r8]
   8442c:	dd1b      	ble.n	84466 <_svfprintf_r+0x56e>
   8442e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84430:	2110      	movs	r1, #16
   84432:	980d      	ldr	r0, [sp, #52]	; 0x34
   84434:	f8c8 1004 	str.w	r1, [r8, #4]
   84438:	1c51      	adds	r1, r2, #1
   8443a:	3010      	adds	r0, #16
   8443c:	2907      	cmp	r1, #7
   8443e:	900d      	str	r0, [sp, #52]	; 0x34
   84440:	910c      	str	r1, [sp, #48]	; 0x30
   84442:	dc02      	bgt.n	8444a <_svfprintf_r+0x552>
   84444:	f108 0808 	add.w	r8, r8, #8
   84448:	e00b      	b.n	84462 <_svfprintf_r+0x56a>
   8444a:	4658      	mov	r0, fp
   8444c:	4649      	mov	r1, r9
   8444e:	aa0b      	add	r2, sp, #44	; 0x2c
   84450:	9300      	str	r3, [sp, #0]
   84452:	f001 ffd7 	bl	86404 <__ssprint_r>
   84456:	9b00      	ldr	r3, [sp, #0]
   84458:	2800      	cmp	r0, #0
   8445a:	f040 813a 	bne.w	846d2 <_svfprintf_r+0x7da>
   8445e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84462:	3b10      	subs	r3, #16
   84464:	e7de      	b.n	84424 <_svfprintf_r+0x52c>
   84466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84468:	f8c8 3004 	str.w	r3, [r8, #4]
   8446c:	18d1      	adds	r1, r2, r3
   8446e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84470:	910d      	str	r1, [sp, #52]	; 0x34
   84472:	1c58      	adds	r0, r3, #1
   84474:	2807      	cmp	r0, #7
   84476:	900c      	str	r0, [sp, #48]	; 0x30
   84478:	dc02      	bgt.n	84480 <_svfprintf_r+0x588>
   8447a:	f108 0808 	add.w	r8, r8, #8
   8447e:	e009      	b.n	84494 <_svfprintf_r+0x59c>
   84480:	4658      	mov	r0, fp
   84482:	4649      	mov	r1, r9
   84484:	aa0b      	add	r2, sp, #44	; 0x2c
   84486:	f001 ffbd 	bl	86404 <__ssprint_r>
   8448a:	2800      	cmp	r0, #0
   8448c:	f040 8121 	bne.w	846d2 <_svfprintf_r+0x7da>
   84490:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84494:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   84498:	b1da      	cbz	r2, 844d2 <_svfprintf_r+0x5da>
   8449a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8449e:	f8c8 1000 	str.w	r1, [r8]
   844a2:	990c      	ldr	r1, [sp, #48]	; 0x30
   844a4:	2301      	movs	r3, #1
   844a6:	980d      	ldr	r0, [sp, #52]	; 0x34
   844a8:	f8c8 3004 	str.w	r3, [r8, #4]
   844ac:	1c4b      	adds	r3, r1, #1
   844ae:	1c42      	adds	r2, r0, #1
   844b0:	2b07      	cmp	r3, #7
   844b2:	920d      	str	r2, [sp, #52]	; 0x34
   844b4:	930c      	str	r3, [sp, #48]	; 0x30
   844b6:	dc02      	bgt.n	844be <_svfprintf_r+0x5c6>
   844b8:	f108 0808 	add.w	r8, r8, #8
   844bc:	e009      	b.n	844d2 <_svfprintf_r+0x5da>
   844be:	4658      	mov	r0, fp
   844c0:	4649      	mov	r1, r9
   844c2:	aa0b      	add	r2, sp, #44	; 0x2c
   844c4:	f001 ff9e 	bl	86404 <__ssprint_r>
   844c8:	2800      	cmp	r0, #0
   844ca:	f040 8102 	bne.w	846d2 <_svfprintf_r+0x7da>
   844ce:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   844d2:	9806      	ldr	r0, [sp, #24]
   844d4:	b1d0      	cbz	r0, 8450c <_svfprintf_r+0x614>
   844d6:	aa0a      	add	r2, sp, #40	; 0x28
   844d8:	f8c8 2000 	str.w	r2, [r8]
   844dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   844de:	2102      	movs	r1, #2
   844e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   844e2:	f8c8 1004 	str.w	r1, [r8, #4]
   844e6:	1c51      	adds	r1, r2, #1
   844e8:	1c98      	adds	r0, r3, #2
   844ea:	2907      	cmp	r1, #7
   844ec:	900d      	str	r0, [sp, #52]	; 0x34
   844ee:	910c      	str	r1, [sp, #48]	; 0x30
   844f0:	dc02      	bgt.n	844f8 <_svfprintf_r+0x600>
   844f2:	f108 0808 	add.w	r8, r8, #8
   844f6:	e009      	b.n	8450c <_svfprintf_r+0x614>
   844f8:	4658      	mov	r0, fp
   844fa:	4649      	mov	r1, r9
   844fc:	aa0b      	add	r2, sp, #44	; 0x2c
   844fe:	f001 ff81 	bl	86404 <__ssprint_r>
   84502:	2800      	cmp	r0, #0
   84504:	f040 80e5 	bne.w	846d2 <_svfprintf_r+0x7da>
   84508:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8450c:	9b07      	ldr	r3, [sp, #28]
   8450e:	2b80      	cmp	r3, #128	; 0x80
   84510:	d13c      	bne.n	8458c <_svfprintf_r+0x694>
   84512:	9803      	ldr	r0, [sp, #12]
   84514:	9a02      	ldr	r2, [sp, #8]
   84516:	1a83      	subs	r3, r0, r2
   84518:	2b00      	cmp	r3, #0
   8451a:	dd37      	ble.n	8458c <_svfprintf_r+0x694>
   8451c:	4968      	ldr	r1, [pc, #416]	; (846c0 <_svfprintf_r+0x7c8>)
   8451e:	2b10      	cmp	r3, #16
   84520:	f8c8 1000 	str.w	r1, [r8]
   84524:	dd1b      	ble.n	8455e <_svfprintf_r+0x666>
   84526:	980c      	ldr	r0, [sp, #48]	; 0x30
   84528:	2210      	movs	r2, #16
   8452a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8452c:	f8c8 2004 	str.w	r2, [r8, #4]
   84530:	1c42      	adds	r2, r0, #1
   84532:	3110      	adds	r1, #16
   84534:	2a07      	cmp	r2, #7
   84536:	910d      	str	r1, [sp, #52]	; 0x34
   84538:	920c      	str	r2, [sp, #48]	; 0x30
   8453a:	dc02      	bgt.n	84542 <_svfprintf_r+0x64a>
   8453c:	f108 0808 	add.w	r8, r8, #8
   84540:	e00b      	b.n	8455a <_svfprintf_r+0x662>
   84542:	4658      	mov	r0, fp
   84544:	4649      	mov	r1, r9
   84546:	aa0b      	add	r2, sp, #44	; 0x2c
   84548:	9300      	str	r3, [sp, #0]
   8454a:	f001 ff5b 	bl	86404 <__ssprint_r>
   8454e:	9b00      	ldr	r3, [sp, #0]
   84550:	2800      	cmp	r0, #0
   84552:	f040 80be 	bne.w	846d2 <_svfprintf_r+0x7da>
   84556:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8455a:	3b10      	subs	r3, #16
   8455c:	e7de      	b.n	8451c <_svfprintf_r+0x624>
   8455e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84560:	980d      	ldr	r0, [sp, #52]	; 0x34
   84562:	1c51      	adds	r1, r2, #1
   84564:	f8c8 3004 	str.w	r3, [r8, #4]
   84568:	2907      	cmp	r1, #7
   8456a:	4403      	add	r3, r0
   8456c:	930d      	str	r3, [sp, #52]	; 0x34
   8456e:	910c      	str	r1, [sp, #48]	; 0x30
   84570:	dc02      	bgt.n	84578 <_svfprintf_r+0x680>
   84572:	f108 0808 	add.w	r8, r8, #8
   84576:	e009      	b.n	8458c <_svfprintf_r+0x694>
   84578:	4658      	mov	r0, fp
   8457a:	4649      	mov	r1, r9
   8457c:	aa0b      	add	r2, sp, #44	; 0x2c
   8457e:	f001 ff41 	bl	86404 <__ssprint_r>
   84582:	2800      	cmp	r0, #0
   84584:	f040 80a5 	bne.w	846d2 <_svfprintf_r+0x7da>
   84588:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8458c:	1b2d      	subs	r5, r5, r4
   8458e:	2d00      	cmp	r5, #0
   84590:	dd34      	ble.n	845fc <_svfprintf_r+0x704>
   84592:	484b      	ldr	r0, [pc, #300]	; (846c0 <_svfprintf_r+0x7c8>)
   84594:	2d10      	cmp	r5, #16
   84596:	f8c8 0000 	str.w	r0, [r8]
   8459a:	dd19      	ble.n	845d0 <_svfprintf_r+0x6d8>
   8459c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8459e:	990d      	ldr	r1, [sp, #52]	; 0x34
   845a0:	1c43      	adds	r3, r0, #1
   845a2:	2210      	movs	r2, #16
   845a4:	3110      	adds	r1, #16
   845a6:	2b07      	cmp	r3, #7
   845a8:	f8c8 2004 	str.w	r2, [r8, #4]
   845ac:	910d      	str	r1, [sp, #52]	; 0x34
   845ae:	930c      	str	r3, [sp, #48]	; 0x30
   845b0:	dc02      	bgt.n	845b8 <_svfprintf_r+0x6c0>
   845b2:	f108 0808 	add.w	r8, r8, #8
   845b6:	e009      	b.n	845cc <_svfprintf_r+0x6d4>
   845b8:	4658      	mov	r0, fp
   845ba:	4649      	mov	r1, r9
   845bc:	aa0b      	add	r2, sp, #44	; 0x2c
   845be:	f001 ff21 	bl	86404 <__ssprint_r>
   845c2:	2800      	cmp	r0, #0
   845c4:	f040 8085 	bne.w	846d2 <_svfprintf_r+0x7da>
   845c8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   845cc:	3d10      	subs	r5, #16
   845ce:	e7e0      	b.n	84592 <_svfprintf_r+0x69a>
   845d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   845d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   845d4:	1c51      	adds	r1, r2, #1
   845d6:	f8c8 5004 	str.w	r5, [r8, #4]
   845da:	2907      	cmp	r1, #7
   845dc:	441d      	add	r5, r3
   845de:	950d      	str	r5, [sp, #52]	; 0x34
   845e0:	910c      	str	r1, [sp, #48]	; 0x30
   845e2:	dc02      	bgt.n	845ea <_svfprintf_r+0x6f2>
   845e4:	f108 0808 	add.w	r8, r8, #8
   845e8:	e008      	b.n	845fc <_svfprintf_r+0x704>
   845ea:	4658      	mov	r0, fp
   845ec:	4649      	mov	r1, r9
   845ee:	aa0b      	add	r2, sp, #44	; 0x2c
   845f0:	f001 ff08 	bl	86404 <__ssprint_r>
   845f4:	2800      	cmp	r0, #0
   845f6:	d16c      	bne.n	846d2 <_svfprintf_r+0x7da>
   845f8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   845fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   845fe:	980d      	ldr	r0, [sp, #52]	; 0x34
   84600:	1c5a      	adds	r2, r3, #1
   84602:	f8c8 4004 	str.w	r4, [r8, #4]
   84606:	2a07      	cmp	r2, #7
   84608:	4404      	add	r4, r0
   8460a:	f8c8 a000 	str.w	sl, [r8]
   8460e:	940d      	str	r4, [sp, #52]	; 0x34
   84610:	920c      	str	r2, [sp, #48]	; 0x30
   84612:	dc02      	bgt.n	8461a <_svfprintf_r+0x722>
   84614:	f108 0308 	add.w	r3, r8, #8
   84618:	e007      	b.n	8462a <_svfprintf_r+0x732>
   8461a:	4658      	mov	r0, fp
   8461c:	4649      	mov	r1, r9
   8461e:	aa0b      	add	r2, sp, #44	; 0x2c
   84620:	f001 fef0 	bl	86404 <__ssprint_r>
   84624:	2800      	cmp	r0, #0
   84626:	d154      	bne.n	846d2 <_svfprintf_r+0x7da>
   84628:	ab18      	add	r3, sp, #96	; 0x60
   8462a:	077a      	lsls	r2, r7, #29
   8462c:	d40b      	bmi.n	84646 <_svfprintf_r+0x74e>
   8462e:	9804      	ldr	r0, [sp, #16]
   84630:	9b02      	ldr	r3, [sp, #8]
   84632:	9a03      	ldr	r2, [sp, #12]
   84634:	990d      	ldr	r1, [sp, #52]	; 0x34
   84636:	4293      	cmp	r3, r2
   84638:	bfac      	ite	ge
   8463a:	18c0      	addge	r0, r0, r3
   8463c:	1880      	addlt	r0, r0, r2
   8463e:	9004      	str	r0, [sp, #16]
   84640:	2900      	cmp	r1, #0
   84642:	d036      	beq.n	846b2 <_svfprintf_r+0x7ba>
   84644:	e02f      	b.n	846a6 <_svfprintf_r+0x7ae>
   84646:	9c03      	ldr	r4, [sp, #12]
   84648:	9902      	ldr	r1, [sp, #8]
   8464a:	1a64      	subs	r4, r4, r1
   8464c:	2c00      	cmp	r4, #0
   8464e:	ddee      	ble.n	8462e <_svfprintf_r+0x736>
   84650:	481a      	ldr	r0, [pc, #104]	; (846bc <_svfprintf_r+0x7c4>)
   84652:	2c10      	cmp	r4, #16
   84654:	6018      	str	r0, [r3, #0]
   84656:	dd15      	ble.n	84684 <_svfprintf_r+0x78c>
   84658:	990c      	ldr	r1, [sp, #48]	; 0x30
   8465a:	2010      	movs	r0, #16
   8465c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8465e:	6058      	str	r0, [r3, #4]
   84660:	1c48      	adds	r0, r1, #1
   84662:	3210      	adds	r2, #16
   84664:	2807      	cmp	r0, #7
   84666:	920d      	str	r2, [sp, #52]	; 0x34
   84668:	900c      	str	r0, [sp, #48]	; 0x30
   8466a:	dc01      	bgt.n	84670 <_svfprintf_r+0x778>
   8466c:	3308      	adds	r3, #8
   8466e:	e007      	b.n	84680 <_svfprintf_r+0x788>
   84670:	4658      	mov	r0, fp
   84672:	4649      	mov	r1, r9
   84674:	aa0b      	add	r2, sp, #44	; 0x2c
   84676:	f001 fec5 	bl	86404 <__ssprint_r>
   8467a:	2800      	cmp	r0, #0
   8467c:	d129      	bne.n	846d2 <_svfprintf_r+0x7da>
   8467e:	ab18      	add	r3, sp, #96	; 0x60
   84680:	3c10      	subs	r4, #16
   84682:	e7e5      	b.n	84650 <_svfprintf_r+0x758>
   84684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84686:	605c      	str	r4, [r3, #4]
   84688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8468a:	1c51      	adds	r1, r2, #1
   8468c:	191c      	adds	r4, r3, r4
   8468e:	2907      	cmp	r1, #7
   84690:	940d      	str	r4, [sp, #52]	; 0x34
   84692:	910c      	str	r1, [sp, #48]	; 0x30
   84694:	ddcb      	ble.n	8462e <_svfprintf_r+0x736>
   84696:	4658      	mov	r0, fp
   84698:	4649      	mov	r1, r9
   8469a:	aa0b      	add	r2, sp, #44	; 0x2c
   8469c:	f001 feb2 	bl	86404 <__ssprint_r>
   846a0:	2800      	cmp	r0, #0
   846a2:	d0c4      	beq.n	8462e <_svfprintf_r+0x736>
   846a4:	e015      	b.n	846d2 <_svfprintf_r+0x7da>
   846a6:	4658      	mov	r0, fp
   846a8:	4649      	mov	r1, r9
   846aa:	aa0b      	add	r2, sp, #44	; 0x2c
   846ac:	f001 feaa 	bl	86404 <__ssprint_r>
   846b0:	b978      	cbnz	r0, 846d2 <_svfprintf_r+0x7da>
   846b2:	2500      	movs	r5, #0
   846b4:	950c      	str	r5, [sp, #48]	; 0x30
   846b6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   846ba:	e446      	b.n	83f4a <_svfprintf_r+0x52>
   846bc:	00087632 	.word	0x00087632
   846c0:	00087642 	.word	0x00087642
   846c4:	980d      	ldr	r0, [sp, #52]	; 0x34
   846c6:	b120      	cbz	r0, 846d2 <_svfprintf_r+0x7da>
   846c8:	4658      	mov	r0, fp
   846ca:	4649      	mov	r1, r9
   846cc:	aa0b      	add	r2, sp, #44	; 0x2c
   846ce:	f001 fe99 	bl	86404 <__ssprint_r>
   846d2:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   846d6:	9b04      	ldr	r3, [sp, #16]
   846d8:	f002 0140 	and.w	r1, r2, #64	; 0x40
   846dc:	b208      	sxth	r0, r1
   846de:	2800      	cmp	r0, #0
   846e0:	bf18      	it	ne
   846e2:	f04f 33ff 	movne.w	r3, #4294967295
   846e6:	4618      	mov	r0, r3
   846e8:	b029      	add	sp, #164	; 0xa4
   846ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846ee:	bf00      	nop

000846f0 <__sprint_r>:
   846f0:	6893      	ldr	r3, [r2, #8]
   846f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   846f6:	4681      	mov	r9, r0
   846f8:	460f      	mov	r7, r1
   846fa:	4614      	mov	r4, r2
   846fc:	b91b      	cbnz	r3, 84706 <__sprint_r+0x16>
   846fe:	6053      	str	r3, [r2, #4]
   84700:	4618      	mov	r0, r3
   84702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84706:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   84708:	049b      	lsls	r3, r3, #18
   8470a:	d51e      	bpl.n	8474a <__sprint_r+0x5a>
   8470c:	6815      	ldr	r5, [r2, #0]
   8470e:	68a0      	ldr	r0, [r4, #8]
   84710:	3508      	adds	r5, #8
   84712:	b1c8      	cbz	r0, 84748 <__sprint_r+0x58>
   84714:	f855 1c04 	ldr.w	r1, [r5, #-4]
   84718:	f855 ac08 	ldr.w	sl, [r5, #-8]
   8471c:	ea4f 0891 	mov.w	r8, r1, lsr #2
   84720:	2600      	movs	r6, #0
   84722:	4546      	cmp	r6, r8
   84724:	da09      	bge.n	8473a <__sprint_r+0x4a>
   84726:	4648      	mov	r0, r9
   84728:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   8472c:	463a      	mov	r2, r7
   8472e:	f000 fe97 	bl	85460 <_fputwc_r>
   84732:	1c43      	adds	r3, r0, #1
   84734:	d00b      	beq.n	8474e <__sprint_r+0x5e>
   84736:	3601      	adds	r6, #1
   84738:	e7f3      	b.n	84722 <__sprint_r+0x32>
   8473a:	68a2      	ldr	r2, [r4, #8]
   8473c:	ea4f 0888 	mov.w	r8, r8, lsl #2
   84740:	ebc8 0302 	rsb	r3, r8, r2
   84744:	60a3      	str	r3, [r4, #8]
   84746:	e7e2      	b.n	8470e <__sprint_r+0x1e>
   84748:	e001      	b.n	8474e <__sprint_r+0x5e>
   8474a:	f001 f801 	bl	85750 <__sfvwrite_r>
   8474e:	2100      	movs	r1, #0
   84750:	60a1      	str	r1, [r4, #8]
   84752:	6061      	str	r1, [r4, #4]
   84754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084758 <_vfiprintf_r>:
   84758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8475c:	4689      	mov	r9, r1
   8475e:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
   84762:	4614      	mov	r4, r2
   84764:	461e      	mov	r6, r3
   84766:	4683      	mov	fp, r0
   84768:	b118      	cbz	r0, 84772 <_vfiprintf_r+0x1a>
   8476a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8476c:	b90b      	cbnz	r3, 84772 <_vfiprintf_r+0x1a>
   8476e:	f000 fdfb 	bl	85368 <__sinit>
   84772:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   84776:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   8477a:	b211      	sxth	r1, r2
   8477c:	b949      	cbnz	r1, 84792 <_vfiprintf_r+0x3a>
   8477e:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   84782:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   84786:	f8a9 300c 	strh.w	r3, [r9, #12]
   8478a:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   8478e:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   84792:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   84796:	f001 0308 	and.w	r3, r1, #8
   8479a:	b218      	sxth	r0, r3
   8479c:	b148      	cbz	r0, 847b2 <_vfiprintf_r+0x5a>
   8479e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   847a2:	b132      	cbz	r2, 847b2 <_vfiprintf_r+0x5a>
   847a4:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   847a8:	f000 011a 	and.w	r1, r0, #26
   847ac:	290a      	cmp	r1, #10
   847ae:	d149      	bne.n	84844 <_vfiprintf_r+0xec>
   847b0:	e00a      	b.n	847c8 <_vfiprintf_r+0x70>
   847b2:	4658      	mov	r0, fp
   847b4:	4649      	mov	r1, r9
   847b6:	f000 fc31 	bl	8501c <__swsetup_r>
   847ba:	2800      	cmp	r0, #0
   847bc:	d0f2      	beq.n	847a4 <_vfiprintf_r+0x4c>
   847be:	f04f 31ff 	mov.w	r1, #4294967295
   847c2:	9102      	str	r1, [sp, #8]
   847c4:	f000 bc15 	b.w	84ff2 <_vfiprintf_r+0x89a>
   847c8:	f8b9 300e 	ldrh.w	r3, [r9, #14]
   847cc:	0419      	lsls	r1, r3, #16
   847ce:	d439      	bmi.n	84844 <_vfiprintf_r+0xec>
   847d0:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
   847d4:	f8d9 201c 	ldr.w	r2, [r9, #28]
   847d8:	f020 0002 	bic.w	r0, r0, #2
   847dc:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
   847e0:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   847e4:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
   847e8:	9131      	str	r1, [sp, #196]	; 0xc4
   847ea:	a832      	add	r0, sp, #200	; 0xc8
   847ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
   847f0:	921f      	str	r2, [sp, #124]	; 0x7c
   847f2:	2200      	movs	r2, #0
   847f4:	9321      	str	r3, [sp, #132]	; 0x84
   847f6:	9018      	str	r0, [sp, #96]	; 0x60
   847f8:	901c      	str	r0, [sp, #112]	; 0x70
   847fa:	911a      	str	r1, [sp, #104]	; 0x68
   847fc:	911d      	str	r1, [sp, #116]	; 0x74
   847fe:	921e      	str	r2, [sp, #120]	; 0x78
   84800:	4658      	mov	r0, fp
   84802:	a918      	add	r1, sp, #96	; 0x60
   84804:	4622      	mov	r2, r4
   84806:	4633      	mov	r3, r6
   84808:	f7ff ffa6 	bl	84758 <_vfiprintf_r>
   8480c:	2800      	cmp	r0, #0
   8480e:	9002      	str	r0, [sp, #8]
   84810:	db09      	blt.n	84826 <_vfiprintf_r+0xce>
   84812:	4658      	mov	r0, fp
   84814:	a918      	add	r1, sp, #96	; 0x60
   84816:	f000 fcb5 	bl	85184 <_fflush_r>
   8481a:	9b02      	ldr	r3, [sp, #8]
   8481c:	2800      	cmp	r0, #0
   8481e:	bf18      	it	ne
   84820:	f04f 33ff 	movne.w	r3, #4294967295
   84824:	9302      	str	r3, [sp, #8]
   84826:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
   8482a:	f000 0140 	and.w	r1, r0, #64	; 0x40
   8482e:	b20a      	sxth	r2, r1
   84830:	2a00      	cmp	r2, #0
   84832:	f000 83de 	beq.w	84ff2 <_vfiprintf_r+0x89a>
   84836:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8483a:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   8483e:	f8a9 000c 	strh.w	r0, [r9, #12]
   84842:	e3d6      	b.n	84ff2 <_vfiprintf_r+0x89a>
   84844:	2200      	movs	r2, #0
   84846:	ad32      	add	r5, sp, #200	; 0xc8
   84848:	950b      	str	r5, [sp, #44]	; 0x2c
   8484a:	920d      	str	r2, [sp, #52]	; 0x34
   8484c:	920c      	str	r2, [sp, #48]	; 0x30
   8484e:	9401      	str	r4, [sp, #4]
   84850:	9205      	str	r2, [sp, #20]
   84852:	9202      	str	r2, [sp, #8]
   84854:	46a8      	mov	r8, r5
   84856:	9801      	ldr	r0, [sp, #4]
   84858:	4604      	mov	r4, r0
   8485a:	f810 1b01 	ldrb.w	r1, [r0], #1
   8485e:	b919      	cbnz	r1, 84868 <_vfiprintf_r+0x110>
   84860:	9b01      	ldr	r3, [sp, #4]
   84862:	1ae5      	subs	r5, r4, r3
   84864:	d103      	bne.n	8486e <_vfiprintf_r+0x116>
   84866:	e01d      	b.n	848a4 <_vfiprintf_r+0x14c>
   84868:	2925      	cmp	r1, #37	; 0x25
   8486a:	d1f5      	bne.n	84858 <_vfiprintf_r+0x100>
   8486c:	e7f8      	b.n	84860 <_vfiprintf_r+0x108>
   8486e:	9901      	ldr	r1, [sp, #4]
   84870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84872:	e888 0022 	stmia.w	r8, {r1, r5}
   84876:	990c      	ldr	r1, [sp, #48]	; 0x30
   84878:	1950      	adds	r0, r2, r5
   8487a:	1c4b      	adds	r3, r1, #1
   8487c:	2b07      	cmp	r3, #7
   8487e:	900d      	str	r0, [sp, #52]	; 0x34
   84880:	930c      	str	r3, [sp, #48]	; 0x30
   84882:	dc02      	bgt.n	8488a <_vfiprintf_r+0x132>
   84884:	f108 0808 	add.w	r8, r8, #8
   84888:	e009      	b.n	8489e <_vfiprintf_r+0x146>
   8488a:	4658      	mov	r0, fp
   8488c:	4649      	mov	r1, r9
   8488e:	aa0b      	add	r2, sp, #44	; 0x2c
   84890:	f7ff ff2e 	bl	846f0 <__sprint_r>
   84894:	2800      	cmp	r0, #0
   84896:	f040 83a4 	bne.w	84fe2 <_vfiprintf_r+0x88a>
   8489a:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   8489e:	9a02      	ldr	r2, [sp, #8]
   848a0:	1950      	adds	r0, r2, r5
   848a2:	9002      	str	r0, [sp, #8]
   848a4:	7821      	ldrb	r1, [r4, #0]
   848a6:	2900      	cmp	r1, #0
   848a8:	f000 8394 	beq.w	84fd4 <_vfiprintf_r+0x87c>
   848ac:	2200      	movs	r2, #0
   848ae:	3401      	adds	r4, #1
   848b0:	9401      	str	r4, [sp, #4]
   848b2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   848b6:	f04f 3cff 	mov.w	ip, #4294967295
   848ba:	9204      	str	r2, [sp, #16]
   848bc:	4617      	mov	r7, r2
   848be:	9801      	ldr	r0, [sp, #4]
   848c0:	f810 3b01 	ldrb.w	r3, [r0], #1
   848c4:	9001      	str	r0, [sp, #4]
   848c6:	2b63      	cmp	r3, #99	; 0x63
   848c8:	f000 80b3 	beq.w	84a32 <_vfiprintf_r+0x2da>
   848cc:	dc33      	bgt.n	84936 <_vfiprintf_r+0x1de>
   848ce:	2b39      	cmp	r3, #57	; 0x39
   848d0:	dc1a      	bgt.n	84908 <_vfiprintf_r+0x1b0>
   848d2:	2b31      	cmp	r3, #49	; 0x31
   848d4:	f280 8091 	bge.w	849fa <_vfiprintf_r+0x2a2>
   848d8:	2b2b      	cmp	r3, #43	; 0x2b
   848da:	d101      	bne.n	848e0 <_vfiprintf_r+0x188>
   848dc:	461a      	mov	r2, r3
   848de:	e7ee      	b.n	848be <_vfiprintf_r+0x166>
   848e0:	dc0a      	bgt.n	848f8 <_vfiprintf_r+0x1a0>
   848e2:	2b23      	cmp	r3, #35	; 0x23
   848e4:	d055      	beq.n	84992 <_vfiprintf_r+0x23a>
   848e6:	2b2a      	cmp	r3, #42	; 0x2a
   848e8:	d056      	beq.n	84998 <_vfiprintf_r+0x240>
   848ea:	2b20      	cmp	r3, #32
   848ec:	f040 81f7 	bne.w	84cde <_vfiprintf_r+0x586>
   848f0:	2a00      	cmp	r2, #0
   848f2:	bf08      	it	eq
   848f4:	2220      	moveq	r2, #32
   848f6:	e7e2      	b.n	848be <_vfiprintf_r+0x166>
   848f8:	2b2e      	cmp	r3, #46	; 0x2e
   848fa:	d058      	beq.n	849ae <_vfiprintf_r+0x256>
   848fc:	2b30      	cmp	r3, #48	; 0x30
   848fe:	d079      	beq.n	849f4 <_vfiprintf_r+0x29c>
   84900:	2b2d      	cmp	r3, #45	; 0x2d
   84902:	f040 81ec 	bne.w	84cde <_vfiprintf_r+0x586>
   84906:	e04f      	b.n	849a8 <_vfiprintf_r+0x250>
   84908:	2b4f      	cmp	r3, #79	; 0x4f
   8490a:	f000 80de 	beq.w	84aca <_vfiprintf_r+0x372>
   8490e:	dc07      	bgt.n	84920 <_vfiprintf_r+0x1c8>
   84910:	2b44      	cmp	r3, #68	; 0x44
   84912:	f040 81e4 	bne.w	84cde <_vfiprintf_r+0x586>
   84916:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8491a:	f047 0710 	orr.w	r7, r7, #16
   8491e:	e090      	b.n	84a42 <_vfiprintf_r+0x2ea>
   84920:	2b55      	cmp	r3, #85	; 0x55
   84922:	f000 811f 	beq.w	84b64 <_vfiprintf_r+0x40c>
   84926:	2b58      	cmp	r3, #88	; 0x58
   84928:	f040 81d9 	bne.w	84cde <_vfiprintf_r+0x586>
   8492c:	4dae      	ldr	r5, [pc, #696]	; (84be8 <_vfiprintf_r+0x490>)
   8492e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84932:	9505      	str	r5, [sp, #20]
   84934:	e130      	b.n	84b98 <_vfiprintf_r+0x440>
   84936:	2b6f      	cmp	r3, #111	; 0x6f
   84938:	f000 80c9 	beq.w	84ace <_vfiprintf_r+0x376>
   8493c:	dc10      	bgt.n	84960 <_vfiprintf_r+0x208>
   8493e:	2b69      	cmp	r3, #105	; 0x69
   84940:	d024      	beq.n	8498c <_vfiprintf_r+0x234>
   84942:	dc07      	bgt.n	84954 <_vfiprintf_r+0x1fc>
   84944:	2b64      	cmp	r3, #100	; 0x64
   84946:	d021      	beq.n	8498c <_vfiprintf_r+0x234>
   84948:	2b68      	cmp	r3, #104	; 0x68
   8494a:	f040 81c8 	bne.w	84cde <_vfiprintf_r+0x586>
   8494e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   84952:	e7b4      	b.n	848be <_vfiprintf_r+0x166>
   84954:	2b6c      	cmp	r3, #108	; 0x6c
   84956:	d05f      	beq.n	84a18 <_vfiprintf_r+0x2c0>
   84958:	2b6e      	cmp	r3, #110	; 0x6e
   8495a:	f040 81c0 	bne.w	84cde <_vfiprintf_r+0x586>
   8495e:	e096      	b.n	84a8e <_vfiprintf_r+0x336>
   84960:	2b73      	cmp	r3, #115	; 0x73
   84962:	f000 80df 	beq.w	84b24 <_vfiprintf_r+0x3cc>
   84966:	dc06      	bgt.n	84976 <_vfiprintf_r+0x21e>
   84968:	2b70      	cmp	r3, #112	; 0x70
   8496a:	f000 80cd 	beq.w	84b08 <_vfiprintf_r+0x3b0>
   8496e:	2b71      	cmp	r3, #113	; 0x71
   84970:	f040 81b5 	bne.w	84cde <_vfiprintf_r+0x586>
   84974:	e05a      	b.n	84a2c <_vfiprintf_r+0x2d4>
   84976:	2b75      	cmp	r3, #117	; 0x75
   84978:	f000 80f6 	beq.w	84b68 <_vfiprintf_r+0x410>
   8497c:	2b78      	cmp	r3, #120	; 0x78
   8497e:	f040 81ae 	bne.w	84cde <_vfiprintf_r+0x586>
   84982:	4d9a      	ldr	r5, [pc, #616]	; (84bec <_vfiprintf_r+0x494>)
   84984:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84988:	9505      	str	r5, [sp, #20]
   8498a:	e105      	b.n	84b98 <_vfiprintf_r+0x440>
   8498c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84990:	e057      	b.n	84a42 <_vfiprintf_r+0x2ea>
   84992:	f047 0701 	orr.w	r7, r7, #1
   84996:	e792      	b.n	848be <_vfiprintf_r+0x166>
   84998:	1d33      	adds	r3, r6, #4
   8499a:	6836      	ldr	r6, [r6, #0]
   8499c:	2e00      	cmp	r6, #0
   8499e:	9604      	str	r6, [sp, #16]
   849a0:	da15      	bge.n	849ce <_vfiprintf_r+0x276>
   849a2:	4270      	negs	r0, r6
   849a4:	9004      	str	r0, [sp, #16]
   849a6:	461e      	mov	r6, r3
   849a8:	f047 0704 	orr.w	r7, r7, #4
   849ac:	e787      	b.n	848be <_vfiprintf_r+0x166>
   849ae:	9901      	ldr	r1, [sp, #4]
   849b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   849b4:	2b2a      	cmp	r3, #42	; 0x2a
   849b6:	9101      	str	r1, [sp, #4]
   849b8:	d10b      	bne.n	849d2 <_vfiprintf_r+0x27a>
   849ba:	f8d6 c000 	ldr.w	ip, [r6]
   849be:	1d33      	adds	r3, r6, #4
   849c0:	f1bc 0f00 	cmp.w	ip, #0
   849c4:	da03      	bge.n	849ce <_vfiprintf_r+0x276>
   849c6:	461e      	mov	r6, r3
   849c8:	f04f 3cff 	mov.w	ip, #4294967295
   849cc:	e777      	b.n	848be <_vfiprintf_r+0x166>
   849ce:	461e      	mov	r6, r3
   849d0:	e775      	b.n	848be <_vfiprintf_r+0x166>
   849d2:	f04f 0c00 	mov.w	ip, #0
   849d6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   849da:	2809      	cmp	r0, #9
   849dc:	d807      	bhi.n	849ee <_vfiprintf_r+0x296>
   849de:	9901      	ldr	r1, [sp, #4]
   849e0:	230a      	movs	r3, #10
   849e2:	fb03 0c0c 	mla	ip, r3, ip, r0
   849e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   849ea:	9101      	str	r1, [sp, #4]
   849ec:	e7f3      	b.n	849d6 <_vfiprintf_r+0x27e>
   849ee:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   849f2:	e768      	b.n	848c6 <_vfiprintf_r+0x16e>
   849f4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   849f8:	e761      	b.n	848be <_vfiprintf_r+0x166>
   849fa:	9801      	ldr	r0, [sp, #4]
   849fc:	2100      	movs	r1, #0
   849fe:	3b30      	subs	r3, #48	; 0x30
   84a00:	240a      	movs	r4, #10
   84a02:	fb04 3101 	mla	r1, r4, r1, r3
   84a06:	f810 3b01 	ldrb.w	r3, [r0], #1
   84a0a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   84a0e:	2c09      	cmp	r4, #9
   84a10:	9001      	str	r0, [sp, #4]
   84a12:	d9f4      	bls.n	849fe <_vfiprintf_r+0x2a6>
   84a14:	9104      	str	r1, [sp, #16]
   84a16:	e756      	b.n	848c6 <_vfiprintf_r+0x16e>
   84a18:	9901      	ldr	r1, [sp, #4]
   84a1a:	780b      	ldrb	r3, [r1, #0]
   84a1c:	2b6c      	cmp	r3, #108	; 0x6c
   84a1e:	d102      	bne.n	84a26 <_vfiprintf_r+0x2ce>
   84a20:	1c48      	adds	r0, r1, #1
   84a22:	9001      	str	r0, [sp, #4]
   84a24:	e002      	b.n	84a2c <_vfiprintf_r+0x2d4>
   84a26:	f047 0710 	orr.w	r7, r7, #16
   84a2a:	e748      	b.n	848be <_vfiprintf_r+0x166>
   84a2c:	f047 0720 	orr.w	r7, r7, #32
   84a30:	e745      	b.n	848be <_vfiprintf_r+0x166>
   84a32:	6832      	ldr	r2, [r6, #0]
   84a34:	2500      	movs	r5, #0
   84a36:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   84a3a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84a3e:	3604      	adds	r6, #4
   84a40:	e157      	b.n	84cf2 <_vfiprintf_r+0x59a>
   84a42:	06ba      	lsls	r2, r7, #26
   84a44:	d507      	bpl.n	84a56 <_vfiprintf_r+0x2fe>
   84a46:	3607      	adds	r6, #7
   84a48:	f026 0507 	bic.w	r5, r6, #7
   84a4c:	f105 0608 	add.w	r6, r5, #8
   84a50:	e9d5 4500 	ldrd	r4, r5, [r5]
   84a54:	e00f      	b.n	84a76 <_vfiprintf_r+0x31e>
   84a56:	f017 0f10 	tst.w	r7, #16
   84a5a:	f106 0104 	add.w	r1, r6, #4
   84a5e:	d001      	beq.n	84a64 <_vfiprintf_r+0x30c>
   84a60:	6832      	ldr	r2, [r6, #0]
   84a62:	e005      	b.n	84a70 <_vfiprintf_r+0x318>
   84a64:	f017 0f40 	tst.w	r7, #64	; 0x40
   84a68:	6832      	ldr	r2, [r6, #0]
   84a6a:	d001      	beq.n	84a70 <_vfiprintf_r+0x318>
   84a6c:	b214      	sxth	r4, r2
   84a6e:	e000      	b.n	84a72 <_vfiprintf_r+0x31a>
   84a70:	4614      	mov	r4, r2
   84a72:	17e5      	asrs	r5, r4, #31
   84a74:	460e      	mov	r6, r1
   84a76:	2c00      	cmp	r4, #0
   84a78:	f175 0200 	sbcs.w	r2, r5, #0
   84a7c:	f280 80b8 	bge.w	84bf0 <_vfiprintf_r+0x498>
   84a80:	232d      	movs	r3, #45	; 0x2d
   84a82:	4264      	negs	r4, r4
   84a84:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84a88:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   84a8c:	e0b0      	b.n	84bf0 <_vfiprintf_r+0x498>
   84a8e:	f017 0f20 	tst.w	r7, #32
   84a92:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84a96:	f106 0204 	add.w	r2, r6, #4
   84a9a:	d005      	beq.n	84aa8 <_vfiprintf_r+0x350>
   84a9c:	9c02      	ldr	r4, [sp, #8]
   84a9e:	6835      	ldr	r5, [r6, #0]
   84aa0:	17e0      	asrs	r0, r4, #31
   84aa2:	602c      	str	r4, [r5, #0]
   84aa4:	6068      	str	r0, [r5, #4]
   84aa6:	e004      	b.n	84ab2 <_vfiprintf_r+0x35a>
   84aa8:	06fb      	lsls	r3, r7, #27
   84aaa:	d504      	bpl.n	84ab6 <_vfiprintf_r+0x35e>
   84aac:	6833      	ldr	r3, [r6, #0]
   84aae:	9902      	ldr	r1, [sp, #8]
   84ab0:	6019      	str	r1, [r3, #0]
   84ab2:	4616      	mov	r6, r2
   84ab4:	e6cf      	b.n	84856 <_vfiprintf_r+0xfe>
   84ab6:	6830      	ldr	r0, [r6, #0]
   84ab8:	9c02      	ldr	r4, [sp, #8]
   84aba:	f017 0f40 	tst.w	r7, #64	; 0x40
   84abe:	f106 0604 	add.w	r6, r6, #4
   84ac2:	bf14      	ite	ne
   84ac4:	8004      	strhne	r4, [r0, #0]
   84ac6:	6004      	streq	r4, [r0, #0]
   84ac8:	e6c5      	b.n	84856 <_vfiprintf_r+0xfe>
   84aca:	f047 0710 	orr.w	r7, r7, #16
   84ace:	f017 0020 	ands.w	r0, r7, #32
   84ad2:	d008      	beq.n	84ae6 <_vfiprintf_r+0x38e>
   84ad4:	1df3      	adds	r3, r6, #7
   84ad6:	f023 0507 	bic.w	r5, r3, #7
   84ada:	f105 0608 	add.w	r6, r5, #8
   84ade:	e9d5 4500 	ldrd	r4, r5, [r5]
   84ae2:	2000      	movs	r0, #0
   84ae4:	e07c      	b.n	84be0 <_vfiprintf_r+0x488>
   84ae6:	f017 0110 	ands.w	r1, r7, #16
   84aea:	f106 0204 	add.w	r2, r6, #4
   84aee:	d106      	bne.n	84afe <_vfiprintf_r+0x3a6>
   84af0:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   84af4:	d003      	beq.n	84afe <_vfiprintf_r+0x3a6>
   84af6:	8834      	ldrh	r4, [r6, #0]
   84af8:	2500      	movs	r5, #0
   84afa:	4616      	mov	r6, r2
   84afc:	e7f1      	b.n	84ae2 <_vfiprintf_r+0x38a>
   84afe:	6836      	ldr	r6, [r6, #0]
   84b00:	2500      	movs	r5, #0
   84b02:	4634      	mov	r4, r6
   84b04:	4616      	mov	r6, r2
   84b06:	e06b      	b.n	84be0 <_vfiprintf_r+0x488>
   84b08:	4b38      	ldr	r3, [pc, #224]	; (84bec <_vfiprintf_r+0x494>)
   84b0a:	2130      	movs	r1, #48	; 0x30
   84b0c:	2278      	movs	r2, #120	; 0x78
   84b0e:	6834      	ldr	r4, [r6, #0]
   84b10:	2500      	movs	r5, #0
   84b12:	f047 0702 	orr.w	r7, r7, #2
   84b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   84b1a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   84b1e:	3604      	adds	r6, #4
   84b20:	9305      	str	r3, [sp, #20]
   84b22:	e05c      	b.n	84bde <_vfiprintf_r+0x486>
   84b24:	4631      	mov	r1, r6
   84b26:	2500      	movs	r5, #0
   84b28:	f8d1 a000 	ldr.w	sl, [r1]
   84b2c:	3604      	adds	r6, #4
   84b2e:	45ac      	cmp	ip, r5
   84b30:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84b34:	4650      	mov	r0, sl
   84b36:	db11      	blt.n	84b5c <_vfiprintf_r+0x404>
   84b38:	4662      	mov	r2, ip
   84b3a:	4629      	mov	r1, r5
   84b3c:	f8cd c000 	str.w	ip, [sp]
   84b40:	f001 fa66 	bl	86010 <memchr>
   84b44:	f8dd c000 	ldr.w	ip, [sp]
   84b48:	2800      	cmp	r0, #0
   84b4a:	f000 80d6 	beq.w	84cfa <_vfiprintf_r+0x5a2>
   84b4e:	ebca 0400 	rsb	r4, sl, r0
   84b52:	4564      	cmp	r4, ip
   84b54:	f340 80d3 	ble.w	84cfe <_vfiprintf_r+0x5a6>
   84b58:	4664      	mov	r4, ip
   84b5a:	e0d0      	b.n	84cfe <_vfiprintf_r+0x5a6>
   84b5c:	f7ff f9ae 	bl	83ebc <strlen>
   84b60:	4604      	mov	r4, r0
   84b62:	e0cc      	b.n	84cfe <_vfiprintf_r+0x5a6>
   84b64:	f047 0710 	orr.w	r7, r7, #16
   84b68:	06bd      	lsls	r5, r7, #26
   84b6a:	d506      	bpl.n	84b7a <_vfiprintf_r+0x422>
   84b6c:	1df0      	adds	r0, r6, #7
   84b6e:	f020 0407 	bic.w	r4, r0, #7
   84b72:	f104 0608 	add.w	r6, r4, #8
   84b76:	cc30      	ldmia	r4, {r4, r5}
   84b78:	e00c      	b.n	84b94 <_vfiprintf_r+0x43c>
   84b7a:	f017 0f10 	tst.w	r7, #16
   84b7e:	f106 0304 	add.w	r3, r6, #4
   84b82:	d103      	bne.n	84b8c <_vfiprintf_r+0x434>
   84b84:	067c      	lsls	r4, r7, #25
   84b86:	d501      	bpl.n	84b8c <_vfiprintf_r+0x434>
   84b88:	8834      	ldrh	r4, [r6, #0]
   84b8a:	e001      	b.n	84b90 <_vfiprintf_r+0x438>
   84b8c:	6835      	ldr	r5, [r6, #0]
   84b8e:	462c      	mov	r4, r5
   84b90:	2500      	movs	r5, #0
   84b92:	461e      	mov	r6, r3
   84b94:	2001      	movs	r0, #1
   84b96:	e023      	b.n	84be0 <_vfiprintf_r+0x488>
   84b98:	06b8      	lsls	r0, r7, #26
   84b9a:	d507      	bpl.n	84bac <_vfiprintf_r+0x454>
   84b9c:	1df4      	adds	r4, r6, #7
   84b9e:	f024 0107 	bic.w	r1, r4, #7
   84ba2:	f101 0608 	add.w	r6, r1, #8
   84ba6:	e9d1 4500 	ldrd	r4, r5, [r1]
   84baa:	e00c      	b.n	84bc6 <_vfiprintf_r+0x46e>
   84bac:	f017 0f10 	tst.w	r7, #16
   84bb0:	f106 0004 	add.w	r0, r6, #4
   84bb4:	d103      	bne.n	84bbe <_vfiprintf_r+0x466>
   84bb6:	0679      	lsls	r1, r7, #25
   84bb8:	d501      	bpl.n	84bbe <_vfiprintf_r+0x466>
   84bba:	8834      	ldrh	r4, [r6, #0]
   84bbc:	e001      	b.n	84bc2 <_vfiprintf_r+0x46a>
   84bbe:	6836      	ldr	r6, [r6, #0]
   84bc0:	4634      	mov	r4, r6
   84bc2:	2500      	movs	r5, #0
   84bc4:	4606      	mov	r6, r0
   84bc6:	07fa      	lsls	r2, r7, #31
   84bc8:	d509      	bpl.n	84bde <_vfiprintf_r+0x486>
   84bca:	ea54 0205 	orrs.w	r2, r4, r5
   84bce:	d006      	beq.n	84bde <_vfiprintf_r+0x486>
   84bd0:	2230      	movs	r2, #48	; 0x30
   84bd2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   84bd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   84bda:	f047 0702 	orr.w	r7, r7, #2
   84bde:	2002      	movs	r0, #2
   84be0:	2100      	movs	r1, #0
   84be2:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   84be6:	e004      	b.n	84bf2 <_vfiprintf_r+0x49a>
   84be8:	00087652 	.word	0x00087652
   84bec:	00087663 	.word	0x00087663
   84bf0:	2001      	movs	r0, #1
   84bf2:	f1bc 0f00 	cmp.w	ip, #0
   84bf6:	bfa8      	it	ge
   84bf8:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   84bfc:	ea54 0105 	orrs.w	r1, r4, r5
   84c00:	d102      	bne.n	84c08 <_vfiprintf_r+0x4b0>
   84c02:	f1bc 0f00 	cmp.w	ip, #0
   84c06:	d05a      	beq.n	84cbe <_vfiprintf_r+0x566>
   84c08:	2801      	cmp	r0, #1
   84c0a:	d01d      	beq.n	84c48 <_vfiprintf_r+0x4f0>
   84c0c:	2802      	cmp	r0, #2
   84c0e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84c12:	d043      	beq.n	84c9c <_vfiprintf_r+0x544>
   84c14:	f004 0207 	and.w	r2, r4, #7
   84c18:	08e4      	lsrs	r4, r4, #3
   84c1a:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   84c1e:	08e9      	lsrs	r1, r5, #3
   84c20:	4604      	mov	r4, r0
   84c22:	460d      	mov	r5, r1
   84c24:	3230      	adds	r2, #48	; 0x30
   84c26:	ea54 0105 	orrs.w	r1, r4, r5
   84c2a:	469a      	mov	sl, r3
   84c2c:	701a      	strb	r2, [r3, #0]
   84c2e:	f103 33ff 	add.w	r3, r3, #4294967295
   84c32:	d1ef      	bne.n	84c14 <_vfiprintf_r+0x4bc>
   84c34:	07f8      	lsls	r0, r7, #31
   84c36:	4655      	mov	r5, sl
   84c38:	d54c      	bpl.n	84cd4 <_vfiprintf_r+0x57c>
   84c3a:	2a30      	cmp	r2, #48	; 0x30
   84c3c:	d04a      	beq.n	84cd4 <_vfiprintf_r+0x57c>
   84c3e:	2230      	movs	r2, #48	; 0x30
   84c40:	469a      	mov	sl, r3
   84c42:	f805 2c01 	strb.w	r2, [r5, #-1]
   84c46:	e045      	b.n	84cd4 <_vfiprintf_r+0x57c>
   84c48:	2d00      	cmp	r5, #0
   84c4a:	bf08      	it	eq
   84c4c:	2c0a      	cmpeq	r4, #10
   84c4e:	d205      	bcs.n	84c5c <_vfiprintf_r+0x504>
   84c50:	3430      	adds	r4, #48	; 0x30
   84c52:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   84c56:	f80a 4f27 	strb.w	r4, [sl, #39]!
   84c5a:	e03b      	b.n	84cd4 <_vfiprintf_r+0x57c>
   84c5c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84c60:	9303      	str	r3, [sp, #12]
   84c62:	4620      	mov	r0, r4
   84c64:	4629      	mov	r1, r5
   84c66:	220a      	movs	r2, #10
   84c68:	2300      	movs	r3, #0
   84c6a:	f8cd c000 	str.w	ip, [sp]
   84c6e:	f002 f9a5 	bl	86fbc <__aeabi_uldivmod>
   84c72:	9803      	ldr	r0, [sp, #12]
   84c74:	3230      	adds	r2, #48	; 0x30
   84c76:	f800 2901 	strb.w	r2, [r0], #-1
   84c7a:	4629      	mov	r1, r5
   84c7c:	220a      	movs	r2, #10
   84c7e:	2300      	movs	r3, #0
   84c80:	f8dd a00c 	ldr.w	sl, [sp, #12]
   84c84:	9003      	str	r0, [sp, #12]
   84c86:	4620      	mov	r0, r4
   84c88:	f002 f998 	bl	86fbc <__aeabi_uldivmod>
   84c8c:	4604      	mov	r4, r0
   84c8e:	460d      	mov	r5, r1
   84c90:	ea54 0105 	orrs.w	r1, r4, r5
   84c94:	f8dd c000 	ldr.w	ip, [sp]
   84c98:	d1e3      	bne.n	84c62 <_vfiprintf_r+0x50a>
   84c9a:	e01b      	b.n	84cd4 <_vfiprintf_r+0x57c>
   84c9c:	9905      	ldr	r1, [sp, #20]
   84c9e:	f004 000f 	and.w	r0, r4, #15
   84ca2:	0924      	lsrs	r4, r4, #4
   84ca4:	5c0a      	ldrb	r2, [r1, r0]
   84ca6:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   84caa:	0929      	lsrs	r1, r5, #4
   84cac:	4604      	mov	r4, r0
   84cae:	460d      	mov	r5, r1
   84cb0:	469a      	mov	sl, r3
   84cb2:	f803 2901 	strb.w	r2, [r3], #-1
   84cb6:	ea54 0205 	orrs.w	r2, r4, r5
   84cba:	d1ef      	bne.n	84c9c <_vfiprintf_r+0x544>
   84cbc:	e00a      	b.n	84cd4 <_vfiprintf_r+0x57c>
   84cbe:	b938      	cbnz	r0, 84cd0 <_vfiprintf_r+0x578>
   84cc0:	07f9      	lsls	r1, r7, #31
   84cc2:	d505      	bpl.n	84cd0 <_vfiprintf_r+0x578>
   84cc4:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   84cc8:	2030      	movs	r0, #48	; 0x30
   84cca:	f80a 0f27 	strb.w	r0, [sl, #39]!
   84cce:	e001      	b.n	84cd4 <_vfiprintf_r+0x57c>
   84cd0:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   84cd4:	ad18      	add	r5, sp, #96	; 0x60
   84cd6:	ebca 0405 	rsb	r4, sl, r5
   84cda:	4665      	mov	r5, ip
   84cdc:	e00f      	b.n	84cfe <_vfiprintf_r+0x5a6>
   84cde:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84ce2:	2b00      	cmp	r3, #0
   84ce4:	f000 8176 	beq.w	84fd4 <_vfiprintf_r+0x87c>
   84ce8:	2500      	movs	r5, #0
   84cea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   84cee:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84cf2:	2401      	movs	r4, #1
   84cf4:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   84cf8:	e001      	b.n	84cfe <_vfiprintf_r+0x5a6>
   84cfa:	4664      	mov	r4, ip
   84cfc:	4605      	mov	r5, r0
   84cfe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   84d02:	42ac      	cmp	r4, r5
   84d04:	bfac      	ite	ge
   84d06:	4621      	movge	r1, r4
   84d08:	4629      	movlt	r1, r5
   84d0a:	9103      	str	r1, [sp, #12]
   84d0c:	b113      	cbz	r3, 84d14 <_vfiprintf_r+0x5bc>
   84d0e:	9803      	ldr	r0, [sp, #12]
   84d10:	1c42      	adds	r2, r0, #1
   84d12:	9203      	str	r2, [sp, #12]
   84d14:	f017 0102 	ands.w	r1, r7, #2
   84d18:	9106      	str	r1, [sp, #24]
   84d1a:	d002      	beq.n	84d22 <_vfiprintf_r+0x5ca>
   84d1c:	9b03      	ldr	r3, [sp, #12]
   84d1e:	1c98      	adds	r0, r3, #2
   84d20:	9003      	str	r0, [sp, #12]
   84d22:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   84d26:	9207      	str	r2, [sp, #28]
   84d28:	d13c      	bne.n	84da4 <_vfiprintf_r+0x64c>
   84d2a:	9904      	ldr	r1, [sp, #16]
   84d2c:	9b03      	ldr	r3, [sp, #12]
   84d2e:	1acb      	subs	r3, r1, r3
   84d30:	2b00      	cmp	r3, #0
   84d32:	dd37      	ble.n	84da4 <_vfiprintf_r+0x64c>
   84d34:	48a5      	ldr	r0, [pc, #660]	; (84fcc <_vfiprintf_r+0x874>)
   84d36:	2b10      	cmp	r3, #16
   84d38:	f8c8 0000 	str.w	r0, [r8]
   84d3c:	dd1b      	ble.n	84d76 <_vfiprintf_r+0x61e>
   84d3e:	990c      	ldr	r1, [sp, #48]	; 0x30
   84d40:	2210      	movs	r2, #16
   84d42:	980d      	ldr	r0, [sp, #52]	; 0x34
   84d44:	f8c8 2004 	str.w	r2, [r8, #4]
   84d48:	1c4a      	adds	r2, r1, #1
   84d4a:	3010      	adds	r0, #16
   84d4c:	2a07      	cmp	r2, #7
   84d4e:	900d      	str	r0, [sp, #52]	; 0x34
   84d50:	920c      	str	r2, [sp, #48]	; 0x30
   84d52:	dc02      	bgt.n	84d5a <_vfiprintf_r+0x602>
   84d54:	f108 0808 	add.w	r8, r8, #8
   84d58:	e00b      	b.n	84d72 <_vfiprintf_r+0x61a>
   84d5a:	4658      	mov	r0, fp
   84d5c:	4649      	mov	r1, r9
   84d5e:	aa0b      	add	r2, sp, #44	; 0x2c
   84d60:	9300      	str	r3, [sp, #0]
   84d62:	f7ff fcc5 	bl	846f0 <__sprint_r>
   84d66:	9b00      	ldr	r3, [sp, #0]
   84d68:	2800      	cmp	r0, #0
   84d6a:	f040 813a 	bne.w	84fe2 <_vfiprintf_r+0x88a>
   84d6e:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84d72:	3b10      	subs	r3, #16
   84d74:	e7de      	b.n	84d34 <_vfiprintf_r+0x5dc>
   84d76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84d78:	f8c8 3004 	str.w	r3, [r8, #4]
   84d7c:	18d1      	adds	r1, r2, r3
   84d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84d80:	910d      	str	r1, [sp, #52]	; 0x34
   84d82:	1c58      	adds	r0, r3, #1
   84d84:	2807      	cmp	r0, #7
   84d86:	900c      	str	r0, [sp, #48]	; 0x30
   84d88:	dc02      	bgt.n	84d90 <_vfiprintf_r+0x638>
   84d8a:	f108 0808 	add.w	r8, r8, #8
   84d8e:	e009      	b.n	84da4 <_vfiprintf_r+0x64c>
   84d90:	4658      	mov	r0, fp
   84d92:	4649      	mov	r1, r9
   84d94:	aa0b      	add	r2, sp, #44	; 0x2c
   84d96:	f7ff fcab 	bl	846f0 <__sprint_r>
   84d9a:	2800      	cmp	r0, #0
   84d9c:	f040 8121 	bne.w	84fe2 <_vfiprintf_r+0x88a>
   84da0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84da4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   84da8:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   84dac:	b1ca      	cbz	r2, 84de2 <_vfiprintf_r+0x68a>
   84dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84db0:	2301      	movs	r3, #1
   84db2:	980d      	ldr	r0, [sp, #52]	; 0x34
   84db4:	f8c8 3004 	str.w	r3, [r8, #4]
   84db8:	1c53      	adds	r3, r2, #1
   84dba:	f8c8 1000 	str.w	r1, [r8]
   84dbe:	1c41      	adds	r1, r0, #1
   84dc0:	2b07      	cmp	r3, #7
   84dc2:	910d      	str	r1, [sp, #52]	; 0x34
   84dc4:	930c      	str	r3, [sp, #48]	; 0x30
   84dc6:	dc02      	bgt.n	84dce <_vfiprintf_r+0x676>
   84dc8:	f108 0808 	add.w	r8, r8, #8
   84dcc:	e009      	b.n	84de2 <_vfiprintf_r+0x68a>
   84dce:	4658      	mov	r0, fp
   84dd0:	4649      	mov	r1, r9
   84dd2:	aa0b      	add	r2, sp, #44	; 0x2c
   84dd4:	f7ff fc8c 	bl	846f0 <__sprint_r>
   84dd8:	2800      	cmp	r0, #0
   84dda:	f040 8102 	bne.w	84fe2 <_vfiprintf_r+0x88a>
   84dde:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84de2:	9806      	ldr	r0, [sp, #24]
   84de4:	b1d0      	cbz	r0, 84e1c <_vfiprintf_r+0x6c4>
   84de6:	a90a      	add	r1, sp, #40	; 0x28
   84de8:	f8c8 1000 	str.w	r1, [r8]
   84dec:	990c      	ldr	r1, [sp, #48]	; 0x30
   84dee:	2202      	movs	r2, #2
   84df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84df2:	f8c8 2004 	str.w	r2, [r8, #4]
   84df6:	1c4a      	adds	r2, r1, #1
   84df8:	1c98      	adds	r0, r3, #2
   84dfa:	2a07      	cmp	r2, #7
   84dfc:	900d      	str	r0, [sp, #52]	; 0x34
   84dfe:	920c      	str	r2, [sp, #48]	; 0x30
   84e00:	dc02      	bgt.n	84e08 <_vfiprintf_r+0x6b0>
   84e02:	f108 0808 	add.w	r8, r8, #8
   84e06:	e009      	b.n	84e1c <_vfiprintf_r+0x6c4>
   84e08:	4658      	mov	r0, fp
   84e0a:	4649      	mov	r1, r9
   84e0c:	aa0b      	add	r2, sp, #44	; 0x2c
   84e0e:	f7ff fc6f 	bl	846f0 <__sprint_r>
   84e12:	2800      	cmp	r0, #0
   84e14:	f040 80e5 	bne.w	84fe2 <_vfiprintf_r+0x88a>
   84e18:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84e1c:	9b07      	ldr	r3, [sp, #28]
   84e1e:	2b80      	cmp	r3, #128	; 0x80
   84e20:	d13c      	bne.n	84e9c <_vfiprintf_r+0x744>
   84e22:	9804      	ldr	r0, [sp, #16]
   84e24:	9903      	ldr	r1, [sp, #12]
   84e26:	1a43      	subs	r3, r0, r1
   84e28:	2b00      	cmp	r3, #0
   84e2a:	dd37      	ble.n	84e9c <_vfiprintf_r+0x744>
   84e2c:	4a68      	ldr	r2, [pc, #416]	; (84fd0 <_vfiprintf_r+0x878>)
   84e2e:	2b10      	cmp	r3, #16
   84e30:	f8c8 2000 	str.w	r2, [r8]
   84e34:	dd1b      	ble.n	84e6e <_vfiprintf_r+0x716>
   84e36:	980c      	ldr	r0, [sp, #48]	; 0x30
   84e38:	2110      	movs	r1, #16
   84e3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84e3c:	f8c8 1004 	str.w	r1, [r8, #4]
   84e40:	1c41      	adds	r1, r0, #1
   84e42:	3210      	adds	r2, #16
   84e44:	2907      	cmp	r1, #7
   84e46:	920d      	str	r2, [sp, #52]	; 0x34
   84e48:	910c      	str	r1, [sp, #48]	; 0x30
   84e4a:	dc02      	bgt.n	84e52 <_vfiprintf_r+0x6fa>
   84e4c:	f108 0808 	add.w	r8, r8, #8
   84e50:	e00b      	b.n	84e6a <_vfiprintf_r+0x712>
   84e52:	4658      	mov	r0, fp
   84e54:	4649      	mov	r1, r9
   84e56:	aa0b      	add	r2, sp, #44	; 0x2c
   84e58:	9300      	str	r3, [sp, #0]
   84e5a:	f7ff fc49 	bl	846f0 <__sprint_r>
   84e5e:	9b00      	ldr	r3, [sp, #0]
   84e60:	2800      	cmp	r0, #0
   84e62:	f040 80be 	bne.w	84fe2 <_vfiprintf_r+0x88a>
   84e66:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84e6a:	3b10      	subs	r3, #16
   84e6c:	e7de      	b.n	84e2c <_vfiprintf_r+0x6d4>
   84e6e:	990c      	ldr	r1, [sp, #48]	; 0x30
   84e70:	980d      	ldr	r0, [sp, #52]	; 0x34
   84e72:	1c4a      	adds	r2, r1, #1
   84e74:	f8c8 3004 	str.w	r3, [r8, #4]
   84e78:	2a07      	cmp	r2, #7
   84e7a:	4403      	add	r3, r0
   84e7c:	930d      	str	r3, [sp, #52]	; 0x34
   84e7e:	920c      	str	r2, [sp, #48]	; 0x30
   84e80:	dc02      	bgt.n	84e88 <_vfiprintf_r+0x730>
   84e82:	f108 0808 	add.w	r8, r8, #8
   84e86:	e009      	b.n	84e9c <_vfiprintf_r+0x744>
   84e88:	4658      	mov	r0, fp
   84e8a:	4649      	mov	r1, r9
   84e8c:	aa0b      	add	r2, sp, #44	; 0x2c
   84e8e:	f7ff fc2f 	bl	846f0 <__sprint_r>
   84e92:	2800      	cmp	r0, #0
   84e94:	f040 80a5 	bne.w	84fe2 <_vfiprintf_r+0x88a>
   84e98:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84e9c:	1b2d      	subs	r5, r5, r4
   84e9e:	2d00      	cmp	r5, #0
   84ea0:	dd34      	ble.n	84f0c <_vfiprintf_r+0x7b4>
   84ea2:	484b      	ldr	r0, [pc, #300]	; (84fd0 <_vfiprintf_r+0x878>)
   84ea4:	2d10      	cmp	r5, #16
   84ea6:	f8c8 0000 	str.w	r0, [r8]
   84eaa:	dd19      	ble.n	84ee0 <_vfiprintf_r+0x788>
   84eac:	980c      	ldr	r0, [sp, #48]	; 0x30
   84eae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84eb0:	1c43      	adds	r3, r0, #1
   84eb2:	2110      	movs	r1, #16
   84eb4:	3210      	adds	r2, #16
   84eb6:	2b07      	cmp	r3, #7
   84eb8:	f8c8 1004 	str.w	r1, [r8, #4]
   84ebc:	920d      	str	r2, [sp, #52]	; 0x34
   84ebe:	930c      	str	r3, [sp, #48]	; 0x30
   84ec0:	dc02      	bgt.n	84ec8 <_vfiprintf_r+0x770>
   84ec2:	f108 0808 	add.w	r8, r8, #8
   84ec6:	e009      	b.n	84edc <_vfiprintf_r+0x784>
   84ec8:	4658      	mov	r0, fp
   84eca:	4649      	mov	r1, r9
   84ecc:	aa0b      	add	r2, sp, #44	; 0x2c
   84ece:	f7ff fc0f 	bl	846f0 <__sprint_r>
   84ed2:	2800      	cmp	r0, #0
   84ed4:	f040 8085 	bne.w	84fe2 <_vfiprintf_r+0x88a>
   84ed8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84edc:	3d10      	subs	r5, #16
   84ede:	e7e0      	b.n	84ea2 <_vfiprintf_r+0x74a>
   84ee0:	990c      	ldr	r1, [sp, #48]	; 0x30
   84ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84ee4:	1c4a      	adds	r2, r1, #1
   84ee6:	f8c8 5004 	str.w	r5, [r8, #4]
   84eea:	2a07      	cmp	r2, #7
   84eec:	441d      	add	r5, r3
   84eee:	950d      	str	r5, [sp, #52]	; 0x34
   84ef0:	920c      	str	r2, [sp, #48]	; 0x30
   84ef2:	dc02      	bgt.n	84efa <_vfiprintf_r+0x7a2>
   84ef4:	f108 0808 	add.w	r8, r8, #8
   84ef8:	e008      	b.n	84f0c <_vfiprintf_r+0x7b4>
   84efa:	4658      	mov	r0, fp
   84efc:	4649      	mov	r1, r9
   84efe:	aa0b      	add	r2, sp, #44	; 0x2c
   84f00:	f7ff fbf6 	bl	846f0 <__sprint_r>
   84f04:	2800      	cmp	r0, #0
   84f06:	d16c      	bne.n	84fe2 <_vfiprintf_r+0x88a>
   84f08:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84f0e:	980d      	ldr	r0, [sp, #52]	; 0x34
   84f10:	1c59      	adds	r1, r3, #1
   84f12:	f8c8 4004 	str.w	r4, [r8, #4]
   84f16:	2907      	cmp	r1, #7
   84f18:	4404      	add	r4, r0
   84f1a:	f8c8 a000 	str.w	sl, [r8]
   84f1e:	940d      	str	r4, [sp, #52]	; 0x34
   84f20:	910c      	str	r1, [sp, #48]	; 0x30
   84f22:	dc02      	bgt.n	84f2a <_vfiprintf_r+0x7d2>
   84f24:	f108 0308 	add.w	r3, r8, #8
   84f28:	e007      	b.n	84f3a <_vfiprintf_r+0x7e2>
   84f2a:	4658      	mov	r0, fp
   84f2c:	4649      	mov	r1, r9
   84f2e:	aa0b      	add	r2, sp, #44	; 0x2c
   84f30:	f7ff fbde 	bl	846f0 <__sprint_r>
   84f34:	2800      	cmp	r0, #0
   84f36:	d154      	bne.n	84fe2 <_vfiprintf_r+0x88a>
   84f38:	ab32      	add	r3, sp, #200	; 0xc8
   84f3a:	077a      	lsls	r2, r7, #29
   84f3c:	d40b      	bmi.n	84f56 <_vfiprintf_r+0x7fe>
   84f3e:	9802      	ldr	r0, [sp, #8]
   84f40:	9b03      	ldr	r3, [sp, #12]
   84f42:	9904      	ldr	r1, [sp, #16]
   84f44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84f46:	428b      	cmp	r3, r1
   84f48:	bfac      	ite	ge
   84f4a:	18c0      	addge	r0, r0, r3
   84f4c:	1840      	addlt	r0, r0, r1
   84f4e:	9002      	str	r0, [sp, #8]
   84f50:	2a00      	cmp	r2, #0
   84f52:	d036      	beq.n	84fc2 <_vfiprintf_r+0x86a>
   84f54:	e02f      	b.n	84fb6 <_vfiprintf_r+0x85e>
   84f56:	9c04      	ldr	r4, [sp, #16]
   84f58:	9a03      	ldr	r2, [sp, #12]
   84f5a:	1aa4      	subs	r4, r4, r2
   84f5c:	2c00      	cmp	r4, #0
   84f5e:	ddee      	ble.n	84f3e <_vfiprintf_r+0x7e6>
   84f60:	481a      	ldr	r0, [pc, #104]	; (84fcc <_vfiprintf_r+0x874>)
   84f62:	2c10      	cmp	r4, #16
   84f64:	6018      	str	r0, [r3, #0]
   84f66:	dd15      	ble.n	84f94 <_vfiprintf_r+0x83c>
   84f68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84f6a:	2010      	movs	r0, #16
   84f6c:	990d      	ldr	r1, [sp, #52]	; 0x34
   84f6e:	6058      	str	r0, [r3, #4]
   84f70:	1c50      	adds	r0, r2, #1
   84f72:	3110      	adds	r1, #16
   84f74:	2807      	cmp	r0, #7
   84f76:	910d      	str	r1, [sp, #52]	; 0x34
   84f78:	900c      	str	r0, [sp, #48]	; 0x30
   84f7a:	dc01      	bgt.n	84f80 <_vfiprintf_r+0x828>
   84f7c:	3308      	adds	r3, #8
   84f7e:	e007      	b.n	84f90 <_vfiprintf_r+0x838>
   84f80:	4658      	mov	r0, fp
   84f82:	4649      	mov	r1, r9
   84f84:	aa0b      	add	r2, sp, #44	; 0x2c
   84f86:	f7ff fbb3 	bl	846f0 <__sprint_r>
   84f8a:	2800      	cmp	r0, #0
   84f8c:	d129      	bne.n	84fe2 <_vfiprintf_r+0x88a>
   84f8e:	ab32      	add	r3, sp, #200	; 0xc8
   84f90:	3c10      	subs	r4, #16
   84f92:	e7e5      	b.n	84f60 <_vfiprintf_r+0x808>
   84f94:	990c      	ldr	r1, [sp, #48]	; 0x30
   84f96:	605c      	str	r4, [r3, #4]
   84f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84f9a:	1c4a      	adds	r2, r1, #1
   84f9c:	191c      	adds	r4, r3, r4
   84f9e:	2a07      	cmp	r2, #7
   84fa0:	940d      	str	r4, [sp, #52]	; 0x34
   84fa2:	920c      	str	r2, [sp, #48]	; 0x30
   84fa4:	ddcb      	ble.n	84f3e <_vfiprintf_r+0x7e6>
   84fa6:	4658      	mov	r0, fp
   84fa8:	4649      	mov	r1, r9
   84faa:	aa0b      	add	r2, sp, #44	; 0x2c
   84fac:	f7ff fba0 	bl	846f0 <__sprint_r>
   84fb0:	2800      	cmp	r0, #0
   84fb2:	d0c4      	beq.n	84f3e <_vfiprintf_r+0x7e6>
   84fb4:	e015      	b.n	84fe2 <_vfiprintf_r+0x88a>
   84fb6:	4658      	mov	r0, fp
   84fb8:	4649      	mov	r1, r9
   84fba:	aa0b      	add	r2, sp, #44	; 0x2c
   84fbc:	f7ff fb98 	bl	846f0 <__sprint_r>
   84fc0:	b978      	cbnz	r0, 84fe2 <_vfiprintf_r+0x88a>
   84fc2:	2500      	movs	r5, #0
   84fc4:	950c      	str	r5, [sp, #48]	; 0x30
   84fc6:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84fca:	e444      	b.n	84856 <_vfiprintf_r+0xfe>
   84fcc:	00087674 	.word	0x00087674
   84fd0:	00087684 	.word	0x00087684
   84fd4:	980d      	ldr	r0, [sp, #52]	; 0x34
   84fd6:	b120      	cbz	r0, 84fe2 <_vfiprintf_r+0x88a>
   84fd8:	4658      	mov	r0, fp
   84fda:	4649      	mov	r1, r9
   84fdc:	aa0b      	add	r2, sp, #44	; 0x2c
   84fde:	f7ff fb87 	bl	846f0 <__sprint_r>
   84fe2:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   84fe6:	f001 0240 	and.w	r2, r1, #64	; 0x40
   84fea:	b213      	sxth	r3, r2
   84fec:	2b00      	cmp	r3, #0
   84fee:	f47f abe6 	bne.w	847be <_vfiprintf_r+0x66>
   84ff2:	9802      	ldr	r0, [sp, #8]
   84ff4:	b033      	add	sp, #204	; 0xcc
   84ff6:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   84ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00084ffe <vfiprintf>:
   84ffe:	b530      	push	{r4, r5, lr}
   85000:	4613      	mov	r3, r2
   85002:	4a05      	ldr	r2, [pc, #20]	; (85018 <vfiprintf+0x1a>)
   85004:	4605      	mov	r5, r0
   85006:	460c      	mov	r4, r1
   85008:	6810      	ldr	r0, [r2, #0]
   8500a:	4629      	mov	r1, r5
   8500c:	4622      	mov	r2, r4
   8500e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85012:	f7ff bba1 	b.w	84758 <_vfiprintf_r>
   85016:	bf00      	nop
   85018:	20070038 	.word	0x20070038

0008501c <__swsetup_r>:
   8501c:	b538      	push	{r3, r4, r5, lr}
   8501e:	4b2c      	ldr	r3, [pc, #176]	; (850d0 <__swsetup_r+0xb4>)
   85020:	4605      	mov	r5, r0
   85022:	6818      	ldr	r0, [r3, #0]
   85024:	460c      	mov	r4, r1
   85026:	b118      	cbz	r0, 85030 <__swsetup_r+0x14>
   85028:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8502a:	b90a      	cbnz	r2, 85030 <__swsetup_r+0x14>
   8502c:	f000 f99c 	bl	85368 <__sinit>
   85030:	89a0      	ldrh	r0, [r4, #12]
   85032:	f000 0108 	and.w	r1, r0, #8
   85036:	b20b      	sxth	r3, r1
   85038:	bb0b      	cbnz	r3, 8507e <__swsetup_r+0x62>
   8503a:	f000 0210 	and.w	r2, r0, #16
   8503e:	b211      	sxth	r1, r2
   85040:	b911      	cbnz	r1, 85048 <__swsetup_r+0x2c>
   85042:	f04f 30ff 	mov.w	r0, #4294967295
   85046:	bd38      	pop	{r3, r4, r5, pc}
   85048:	f000 0004 	and.w	r0, r0, #4
   8504c:	b203      	sxth	r3, r0
   8504e:	b193      	cbz	r3, 85076 <__swsetup_r+0x5a>
   85050:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85052:	b141      	cbz	r1, 85066 <__swsetup_r+0x4a>
   85054:	f104 0240 	add.w	r2, r4, #64	; 0x40
   85058:	4291      	cmp	r1, r2
   8505a:	d002      	beq.n	85062 <__swsetup_r+0x46>
   8505c:	4628      	mov	r0, r5
   8505e:	f000 fac1 	bl	855e4 <_free_r>
   85062:	2100      	movs	r1, #0
   85064:	6321      	str	r1, [r4, #48]	; 0x30
   85066:	89a0      	ldrh	r0, [r4, #12]
   85068:	6921      	ldr	r1, [r4, #16]
   8506a:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   8506e:	2200      	movs	r2, #0
   85070:	81a3      	strh	r3, [r4, #12]
   85072:	6062      	str	r2, [r4, #4]
   85074:	6021      	str	r1, [r4, #0]
   85076:	89a0      	ldrh	r0, [r4, #12]
   85078:	f040 0308 	orr.w	r3, r0, #8
   8507c:	81a3      	strh	r3, [r4, #12]
   8507e:	6922      	ldr	r2, [r4, #16]
   85080:	b94a      	cbnz	r2, 85096 <__swsetup_r+0x7a>
   85082:	89a1      	ldrh	r1, [r4, #12]
   85084:	f401 7020 	and.w	r0, r1, #640	; 0x280
   85088:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8508c:	d003      	beq.n	85096 <__swsetup_r+0x7a>
   8508e:	4628      	mov	r0, r5
   85090:	4621      	mov	r1, r4
   85092:	f000 fd3f 	bl	85b14 <__smakebuf_r>
   85096:	89a3      	ldrh	r3, [r4, #12]
   85098:	f013 0201 	ands.w	r2, r3, #1
   8509c:	d005      	beq.n	850aa <__swsetup_r+0x8e>
   8509e:	6961      	ldr	r1, [r4, #20]
   850a0:	2200      	movs	r2, #0
   850a2:	4248      	negs	r0, r1
   850a4:	60a2      	str	r2, [r4, #8]
   850a6:	61a0      	str	r0, [r4, #24]
   850a8:	e007      	b.n	850ba <__swsetup_r+0x9e>
   850aa:	f003 0102 	and.w	r1, r3, #2
   850ae:	b208      	sxth	r0, r1
   850b0:	b908      	cbnz	r0, 850b6 <__swsetup_r+0x9a>
   850b2:	6963      	ldr	r3, [r4, #20]
   850b4:	e000      	b.n	850b8 <__swsetup_r+0x9c>
   850b6:	4613      	mov	r3, r2
   850b8:	60a3      	str	r3, [r4, #8]
   850ba:	6923      	ldr	r3, [r4, #16]
   850bc:	b933      	cbnz	r3, 850cc <__swsetup_r+0xb0>
   850be:	89a2      	ldrh	r2, [r4, #12]
   850c0:	f002 0180 	and.w	r1, r2, #128	; 0x80
   850c4:	b208      	sxth	r0, r1
   850c6:	2800      	cmp	r0, #0
   850c8:	d1bb      	bne.n	85042 <__swsetup_r+0x26>
   850ca:	bd38      	pop	{r3, r4, r5, pc}
   850cc:	2000      	movs	r0, #0
   850ce:	bd38      	pop	{r3, r4, r5, pc}
   850d0:	20070038 	.word	0x20070038

000850d4 <__register_exitproc>:
   850d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   850d8:	4698      	mov	r8, r3
   850da:	4b23      	ldr	r3, [pc, #140]	; (85168 <__register_exitproc+0x94>)
   850dc:	4606      	mov	r6, r0
   850de:	681c      	ldr	r4, [r3, #0]
   850e0:	460f      	mov	r7, r1
   850e2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   850e6:	4691      	mov	r9, r2
   850e8:	b918      	cbnz	r0, 850f2 <__register_exitproc+0x1e>
   850ea:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   850ee:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   850f2:	6841      	ldr	r1, [r0, #4]
   850f4:	291f      	cmp	r1, #31
   850f6:	dd16      	ble.n	85126 <__register_exitproc+0x52>
   850f8:	481c      	ldr	r0, [pc, #112]	; (8516c <__register_exitproc+0x98>)
   850fa:	b918      	cbnz	r0, 85104 <__register_exitproc+0x30>
   850fc:	f04f 30ff 	mov.w	r0, #4294967295
   85100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85104:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85108:	f000 fd70 	bl	85bec <malloc>
   8510c:	2800      	cmp	r0, #0
   8510e:	d0f5      	beq.n	850fc <__register_exitproc+0x28>
   85110:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   85114:	2500      	movs	r5, #0
   85116:	6045      	str	r5, [r0, #4]
   85118:	6002      	str	r2, [r0, #0]
   8511a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8511e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   85122:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   85126:	b1b6      	cbz	r6, 85156 <__register_exitproc+0x82>
   85128:	6844      	ldr	r4, [r0, #4]
   8512a:	2201      	movs	r2, #1
   8512c:	fa02 f204 	lsl.w	r2, r2, r4
   85130:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   85134:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   85138:	4311      	orrs	r1, r2
   8513a:	2e02      	cmp	r6, #2
   8513c:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   85140:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   85144:	461c      	mov	r4, r3
   85146:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8514a:	d104      	bne.n	85156 <__register_exitproc+0x82>
   8514c:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   85150:	431a      	orrs	r2, r3
   85152:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   85156:	6841      	ldr	r1, [r0, #4]
   85158:	1c8b      	adds	r3, r1, #2
   8515a:	1c4a      	adds	r2, r1, #1
   8515c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   85160:	6042      	str	r2, [r0, #4]
   85162:	2000      	movs	r0, #0
   85164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85168:	0008762c 	.word	0x0008762c
   8516c:	00085bed 	.word	0x00085bed

00085170 <register_fini>:
   85170:	4b02      	ldr	r3, [pc, #8]	; (8517c <register_fini+0xc>)
   85172:	b113      	cbz	r3, 8517a <register_fini+0xa>
   85174:	4802      	ldr	r0, [pc, #8]	; (85180 <register_fini+0x10>)
   85176:	f7fe bd6b 	b.w	83c50 <atexit>
   8517a:	4770      	bx	lr
   8517c:	00000000 	.word	0x00000000
   85180:	00083c5d 	.word	0x00083c5d

00085184 <_fflush_r>:
   85184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85188:	460c      	mov	r4, r1
   8518a:	4605      	mov	r5, r0
   8518c:	b118      	cbz	r0, 85196 <_fflush_r+0x12>
   8518e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85190:	b90b      	cbnz	r3, 85196 <_fflush_r+0x12>
   85192:	f000 f8e9 	bl	85368 <__sinit>
   85196:	89a2      	ldrh	r2, [r4, #12]
   85198:	b332      	cbz	r2, 851e8 <_fflush_r+0x64>
   8519a:	f002 0008 	and.w	r0, r2, #8
   8519e:	b201      	sxth	r1, r0
   851a0:	2900      	cmp	r1, #0
   851a2:	d162      	bne.n	8526a <_fflush_r+0xe6>
   851a4:	6861      	ldr	r1, [r4, #4]
   851a6:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   851aa:	2900      	cmp	r1, #0
   851ac:	81a0      	strh	r0, [r4, #12]
   851ae:	dc02      	bgt.n	851b6 <_fflush_r+0x32>
   851b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   851b2:	2b00      	cmp	r3, #0
   851b4:	dd18      	ble.n	851e8 <_fflush_r+0x64>
   851b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   851b8:	b1b6      	cbz	r6, 851e8 <_fflush_r+0x64>
   851ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   851be:	2000      	movs	r0, #0
   851c0:	b212      	sxth	r2, r2
   851c2:	682f      	ldr	r7, [r5, #0]
   851c4:	6028      	str	r0, [r5, #0]
   851c6:	b10a      	cbz	r2, 851cc <_fflush_r+0x48>
   851c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   851ca:	e010      	b.n	851ee <_fflush_r+0x6a>
   851cc:	2301      	movs	r3, #1
   851ce:	4628      	mov	r0, r5
   851d0:	69e1      	ldr	r1, [r4, #28]
   851d2:	47b0      	blx	r6
   851d4:	4602      	mov	r2, r0
   851d6:	3001      	adds	r0, #1
   851d8:	d109      	bne.n	851ee <_fflush_r+0x6a>
   851da:	6829      	ldr	r1, [r5, #0]
   851dc:	b139      	cbz	r1, 851ee <_fflush_r+0x6a>
   851de:	291d      	cmp	r1, #29
   851e0:	d001      	beq.n	851e6 <_fflush_r+0x62>
   851e2:	2916      	cmp	r1, #22
   851e4:	d14e      	bne.n	85284 <_fflush_r+0x100>
   851e6:	602f      	str	r7, [r5, #0]
   851e8:	2000      	movs	r0, #0
   851ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   851ee:	89a6      	ldrh	r6, [r4, #12]
   851f0:	f006 0104 	and.w	r1, r6, #4
   851f4:	b20b      	sxth	r3, r1
   851f6:	b12b      	cbz	r3, 85204 <_fflush_r+0x80>
   851f8:	6860      	ldr	r0, [r4, #4]
   851fa:	6b26      	ldr	r6, [r4, #48]	; 0x30
   851fc:	1a12      	subs	r2, r2, r0
   851fe:	b10e      	cbz	r6, 85204 <_fflush_r+0x80>
   85200:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   85202:	1a52      	subs	r2, r2, r1
   85204:	69e1      	ldr	r1, [r4, #28]
   85206:	2300      	movs	r3, #0
   85208:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   8520a:	4628      	mov	r0, r5
   8520c:	47b0      	blx	r6
   8520e:	1c41      	adds	r1, r0, #1
   85210:	d105      	bne.n	8521e <_fflush_r+0x9a>
   85212:	682a      	ldr	r2, [r5, #0]
   85214:	b11a      	cbz	r2, 8521e <_fflush_r+0x9a>
   85216:	2a1d      	cmp	r2, #29
   85218:	d001      	beq.n	8521e <_fflush_r+0x9a>
   8521a:	2a16      	cmp	r2, #22
   8521c:	d11f      	bne.n	8525e <_fflush_r+0xda>
   8521e:	89a3      	ldrh	r3, [r4, #12]
   85220:	2100      	movs	r1, #0
   85222:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   85226:	81a2      	strh	r2, [r4, #12]
   85228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   8522c:	6922      	ldr	r2, [r4, #16]
   8522e:	6061      	str	r1, [r4, #4]
   85230:	b219      	sxth	r1, r3
   85232:	6022      	str	r2, [r4, #0]
   85234:	b121      	cbz	r1, 85240 <_fflush_r+0xbc>
   85236:	1c42      	adds	r2, r0, #1
   85238:	d101      	bne.n	8523e <_fflush_r+0xba>
   8523a:	682a      	ldr	r2, [r5, #0]
   8523c:	b902      	cbnz	r2, 85240 <_fflush_r+0xbc>
   8523e:	6520      	str	r0, [r4, #80]	; 0x50
   85240:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85242:	602f      	str	r7, [r5, #0]
   85244:	2900      	cmp	r1, #0
   85246:	d0cf      	beq.n	851e8 <_fflush_r+0x64>
   85248:	f104 0040 	add.w	r0, r4, #64	; 0x40
   8524c:	4281      	cmp	r1, r0
   8524e:	d002      	beq.n	85256 <_fflush_r+0xd2>
   85250:	4628      	mov	r0, r5
   85252:	f000 f9c7 	bl	855e4 <_free_r>
   85256:	2000      	movs	r0, #0
   85258:	6320      	str	r0, [r4, #48]	; 0x30
   8525a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8525e:	89a3      	ldrh	r3, [r4, #12]
   85260:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   85264:	81a1      	strh	r1, [r4, #12]
   85266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8526a:	6926      	ldr	r6, [r4, #16]
   8526c:	2e00      	cmp	r6, #0
   8526e:	d0bb      	beq.n	851e8 <_fflush_r+0x64>
   85270:	0792      	lsls	r2, r2, #30
   85272:	6823      	ldr	r3, [r4, #0]
   85274:	bf0c      	ite	eq
   85276:	6962      	ldreq	r2, [r4, #20]
   85278:	2200      	movne	r2, #0
   8527a:	ebc6 0803 	rsb	r8, r6, r3
   8527e:	6026      	str	r6, [r4, #0]
   85280:	60a2      	str	r2, [r4, #8]
   85282:	e012      	b.n	852aa <_fflush_r+0x126>
   85284:	89a3      	ldrh	r3, [r4, #12]
   85286:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   8528a:	81a0      	strh	r0, [r4, #12]
   8528c:	f04f 30ff 	mov.w	r0, #4294967295
   85290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85294:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85296:	4628      	mov	r0, r5
   85298:	69e1      	ldr	r1, [r4, #28]
   8529a:	4632      	mov	r2, r6
   8529c:	4643      	mov	r3, r8
   8529e:	47b8      	blx	r7
   852a0:	2800      	cmp	r0, #0
   852a2:	ddef      	ble.n	85284 <_fflush_r+0x100>
   852a4:	1836      	adds	r6, r6, r0
   852a6:	ebc0 0808 	rsb	r8, r0, r8
   852aa:	f1b8 0f00 	cmp.w	r8, #0
   852ae:	dcf1      	bgt.n	85294 <_fflush_r+0x110>
   852b0:	e79a      	b.n	851e8 <_fflush_r+0x64>

000852b2 <fflush>:
   852b2:	4601      	mov	r1, r0
   852b4:	b920      	cbnz	r0, 852c0 <fflush+0xe>
   852b6:	4804      	ldr	r0, [pc, #16]	; (852c8 <fflush+0x16>)
   852b8:	4904      	ldr	r1, [pc, #16]	; (852cc <fflush+0x1a>)
   852ba:	6800      	ldr	r0, [r0, #0]
   852bc:	f000 bbc4 	b.w	85a48 <_fwalk_reent>
   852c0:	4b03      	ldr	r3, [pc, #12]	; (852d0 <fflush+0x1e>)
   852c2:	6818      	ldr	r0, [r3, #0]
   852c4:	f7ff bf5e 	b.w	85184 <_fflush_r>
   852c8:	0008762c 	.word	0x0008762c
   852cc:	00085185 	.word	0x00085185
   852d0:	20070038 	.word	0x20070038

000852d4 <__fp_lock>:
   852d4:	2000      	movs	r0, #0
   852d6:	4770      	bx	lr

000852d8 <__fp_unlock>:
   852d8:	2000      	movs	r0, #0
   852da:	4770      	bx	lr

000852dc <_cleanup_r>:
   852dc:	4901      	ldr	r1, [pc, #4]	; (852e4 <_cleanup_r+0x8>)
   852de:	f000 bb92 	b.w	85a06 <_fwalk>
   852e2:	bf00      	nop
   852e4:	00086f21 	.word	0x00086f21

000852e8 <std.isra.0>:
   852e8:	2300      	movs	r3, #0
   852ea:	b510      	push	{r4, lr}
   852ec:	4604      	mov	r4, r0
   852ee:	6003      	str	r3, [r0, #0]
   852f0:	6043      	str	r3, [r0, #4]
   852f2:	6083      	str	r3, [r0, #8]
   852f4:	8181      	strh	r1, [r0, #12]
   852f6:	6643      	str	r3, [r0, #100]	; 0x64
   852f8:	81c2      	strh	r2, [r0, #14]
   852fa:	6103      	str	r3, [r0, #16]
   852fc:	6143      	str	r3, [r0, #20]
   852fe:	6183      	str	r3, [r0, #24]
   85300:	4619      	mov	r1, r3
   85302:	2208      	movs	r2, #8
   85304:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   85308:	f7fe fd0d 	bl	83d26 <memset>
   8530c:	4804      	ldr	r0, [pc, #16]	; (85320 <std.isra.0+0x38>)
   8530e:	4905      	ldr	r1, [pc, #20]	; (85324 <std.isra.0+0x3c>)
   85310:	4a05      	ldr	r2, [pc, #20]	; (85328 <std.isra.0+0x40>)
   85312:	4b06      	ldr	r3, [pc, #24]	; (8532c <std.isra.0+0x44>)
   85314:	61e4      	str	r4, [r4, #28]
   85316:	6220      	str	r0, [r4, #32]
   85318:	6261      	str	r1, [r4, #36]	; 0x24
   8531a:	62a2      	str	r2, [r4, #40]	; 0x28
   8531c:	62e3      	str	r3, [r4, #44]	; 0x2c
   8531e:	bd10      	pop	{r4, pc}
   85320:	00086361 	.word	0x00086361
   85324:	00086387 	.word	0x00086387
   85328:	000863c3 	.word	0x000863c3
   8532c:	000863e7 	.word	0x000863e7

00085330 <__sfmoreglue>:
   85330:	b570      	push	{r4, r5, r6, lr}
   85332:	2568      	movs	r5, #104	; 0x68
   85334:	434d      	muls	r5, r1
   85336:	460e      	mov	r6, r1
   85338:	f105 010c 	add.w	r1, r5, #12
   8533c:	f000 fc66 	bl	85c0c <_malloc_r>
   85340:	4604      	mov	r4, r0
   85342:	b140      	cbz	r0, 85356 <__sfmoreglue+0x26>
   85344:	f100 000c 	add.w	r0, r0, #12
   85348:	2100      	movs	r1, #0
   8534a:	e884 0042 	stmia.w	r4, {r1, r6}
   8534e:	60a0      	str	r0, [r4, #8]
   85350:	462a      	mov	r2, r5
   85352:	f7fe fce8 	bl	83d26 <memset>
   85356:	4620      	mov	r0, r4
   85358:	bd70      	pop	{r4, r5, r6, pc}

0008535a <_cleanup>:
   8535a:	4b02      	ldr	r3, [pc, #8]	; (85364 <_cleanup+0xa>)
   8535c:	6818      	ldr	r0, [r3, #0]
   8535e:	f7ff bfbd 	b.w	852dc <_cleanup_r>
   85362:	bf00      	nop
   85364:	0008762c 	.word	0x0008762c

00085368 <__sinit>:
   85368:	b538      	push	{r3, r4, r5, lr}
   8536a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8536c:	4604      	mov	r4, r0
   8536e:	b9eb      	cbnz	r3, 853ac <__sinit+0x44>
   85370:	4a0f      	ldr	r2, [pc, #60]	; (853b0 <__sinit+0x48>)
   85372:	2501      	movs	r5, #1
   85374:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   85378:	63c2      	str	r2, [r0, #60]	; 0x3c
   8537a:	6385      	str	r5, [r0, #56]	; 0x38
   8537c:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   85380:	2003      	movs	r0, #3
   85382:	461a      	mov	r2, r3
   85384:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   85388:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   8538c:	6860      	ldr	r0, [r4, #4]
   8538e:	2104      	movs	r1, #4
   85390:	f7ff ffaa 	bl	852e8 <std.isra.0>
   85394:	68a0      	ldr	r0, [r4, #8]
   85396:	2109      	movs	r1, #9
   85398:	462a      	mov	r2, r5
   8539a:	f7ff ffa5 	bl	852e8 <std.isra.0>
   8539e:	68e0      	ldr	r0, [r4, #12]
   853a0:	2112      	movs	r1, #18
   853a2:	2202      	movs	r2, #2
   853a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   853a8:	f7ff bf9e 	b.w	852e8 <std.isra.0>
   853ac:	bd38      	pop	{r3, r4, r5, pc}
   853ae:	bf00      	nop
   853b0:	000852dd 	.word	0x000852dd

000853b4 <__sfp>:
   853b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   853b6:	4b1d      	ldr	r3, [pc, #116]	; (8542c <__sfp+0x78>)
   853b8:	4607      	mov	r7, r0
   853ba:	681e      	ldr	r6, [r3, #0]
   853bc:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   853be:	b910      	cbnz	r0, 853c6 <__sfp+0x12>
   853c0:	4630      	mov	r0, r6
   853c2:	f7ff ffd1 	bl	85368 <__sinit>
   853c6:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   853ca:	68b4      	ldr	r4, [r6, #8]
   853cc:	6871      	ldr	r1, [r6, #4]
   853ce:	3901      	subs	r1, #1
   853d0:	d404      	bmi.n	853dc <__sfp+0x28>
   853d2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   853d6:	b185      	cbz	r5, 853fa <__sfp+0x46>
   853d8:	3468      	adds	r4, #104	; 0x68
   853da:	e7f8      	b.n	853ce <__sfp+0x1a>
   853dc:	6832      	ldr	r2, [r6, #0]
   853de:	b10a      	cbz	r2, 853e4 <__sfp+0x30>
   853e0:	6836      	ldr	r6, [r6, #0]
   853e2:	e7f2      	b.n	853ca <__sfp+0x16>
   853e4:	4638      	mov	r0, r7
   853e6:	2104      	movs	r1, #4
   853e8:	f7ff ffa2 	bl	85330 <__sfmoreglue>
   853ec:	6030      	str	r0, [r6, #0]
   853ee:	2800      	cmp	r0, #0
   853f0:	d1f6      	bne.n	853e0 <__sfp+0x2c>
   853f2:	240c      	movs	r4, #12
   853f4:	603c      	str	r4, [r7, #0]
   853f6:	4604      	mov	r4, r0
   853f8:	e015      	b.n	85426 <__sfp+0x72>
   853fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   853fe:	2001      	movs	r0, #1
   85400:	81a0      	strh	r0, [r4, #12]
   85402:	81e3      	strh	r3, [r4, #14]
   85404:	6665      	str	r5, [r4, #100]	; 0x64
   85406:	6025      	str	r5, [r4, #0]
   85408:	60a5      	str	r5, [r4, #8]
   8540a:	6065      	str	r5, [r4, #4]
   8540c:	6125      	str	r5, [r4, #16]
   8540e:	6165      	str	r5, [r4, #20]
   85410:	61a5      	str	r5, [r4, #24]
   85412:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   85416:	4629      	mov	r1, r5
   85418:	2208      	movs	r2, #8
   8541a:	f7fe fc84 	bl	83d26 <memset>
   8541e:	6325      	str	r5, [r4, #48]	; 0x30
   85420:	6365      	str	r5, [r4, #52]	; 0x34
   85422:	6465      	str	r5, [r4, #68]	; 0x44
   85424:	64a5      	str	r5, [r4, #72]	; 0x48
   85426:	4620      	mov	r0, r4
   85428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8542a:	bf00      	nop
   8542c:	0008762c 	.word	0x0008762c

00085430 <__sfp_lock_acquire>:
   85430:	4770      	bx	lr

00085432 <__sfp_lock_release>:
   85432:	4770      	bx	lr

00085434 <__sinit_lock_acquire>:
   85434:	4770      	bx	lr

00085436 <__sinit_lock_release>:
   85436:	4770      	bx	lr

00085438 <__fp_lock_all>:
   85438:	4b02      	ldr	r3, [pc, #8]	; (85444 <__fp_lock_all+0xc>)
   8543a:	4903      	ldr	r1, [pc, #12]	; (85448 <__fp_lock_all+0x10>)
   8543c:	6818      	ldr	r0, [r3, #0]
   8543e:	f000 bae2 	b.w	85a06 <_fwalk>
   85442:	bf00      	nop
   85444:	20070038 	.word	0x20070038
   85448:	000852d5 	.word	0x000852d5

0008544c <__fp_unlock_all>:
   8544c:	4b02      	ldr	r3, [pc, #8]	; (85458 <__fp_unlock_all+0xc>)
   8544e:	4903      	ldr	r1, [pc, #12]	; (8545c <__fp_unlock_all+0x10>)
   85450:	6818      	ldr	r0, [r3, #0]
   85452:	f000 bad8 	b.w	85a06 <_fwalk>
   85456:	bf00      	nop
   85458:	20070038 	.word	0x20070038
   8545c:	000852d9 	.word	0x000852d9

00085460 <_fputwc_r>:
   85460:	8993      	ldrh	r3, [r2, #12]
   85462:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   85466:	4614      	mov	r4, r2
   85468:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   8546c:	4680      	mov	r8, r0
   8546e:	b210      	sxth	r0, r2
   85470:	460e      	mov	r6, r1
   85472:	b930      	cbnz	r0, 85482 <_fputwc_r+0x22>
   85474:	6e67      	ldr	r7, [r4, #100]	; 0x64
   85476:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   8547a:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   8547e:	81a1      	strh	r1, [r4, #12]
   85480:	6663      	str	r3, [r4, #100]	; 0x64
   85482:	f000 fb29 	bl	85ad8 <__locale_mb_cur_max>
   85486:	2801      	cmp	r0, #1
   85488:	d106      	bne.n	85498 <_fputwc_r+0x38>
   8548a:	b12e      	cbz	r6, 85498 <_fputwc_r+0x38>
   8548c:	2eff      	cmp	r6, #255	; 0xff
   8548e:	d803      	bhi.n	85498 <_fputwc_r+0x38>
   85490:	f88d 6004 	strb.w	r6, [sp, #4]
   85494:	4607      	mov	r7, r0
   85496:	e00f      	b.n	854b8 <_fputwc_r+0x58>
   85498:	4632      	mov	r2, r6
   8549a:	4640      	mov	r0, r8
   8549c:	a901      	add	r1, sp, #4
   8549e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   854a2:	f001 fc83 	bl	86dac <_wcrtomb_r>
   854a6:	1c42      	adds	r2, r0, #1
   854a8:	4607      	mov	r7, r0
   854aa:	d105      	bne.n	854b8 <_fputwc_r+0x58>
   854ac:	89a2      	ldrh	r2, [r4, #12]
   854ae:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   854b2:	81a0      	strh	r0, [r4, #12]
   854b4:	4638      	mov	r0, r7
   854b6:	e031      	b.n	8551c <_fputwc_r+0xbc>
   854b8:	2500      	movs	r5, #0
   854ba:	42bd      	cmp	r5, r7
   854bc:	d02a      	beq.n	85514 <_fputwc_r+0xb4>
   854be:	68a1      	ldr	r1, [r4, #8]
   854c0:	ab01      	add	r3, sp, #4
   854c2:	1e4a      	subs	r2, r1, #1
   854c4:	2a00      	cmp	r2, #0
   854c6:	60a2      	str	r2, [r4, #8]
   854c8:	da1a      	bge.n	85500 <_fputwc_r+0xa0>
   854ca:	69a0      	ldr	r0, [r4, #24]
   854cc:	4282      	cmp	r2, r0
   854ce:	db0c      	blt.n	854ea <_fputwc_r+0x8a>
   854d0:	6821      	ldr	r1, [r4, #0]
   854d2:	5d5a      	ldrb	r2, [r3, r5]
   854d4:	700a      	strb	r2, [r1, #0]
   854d6:	6823      	ldr	r3, [r4, #0]
   854d8:	7819      	ldrb	r1, [r3, #0]
   854da:	290a      	cmp	r1, #10
   854dc:	d003      	beq.n	854e6 <_fputwc_r+0x86>
   854de:	3301      	adds	r3, #1
   854e0:	2200      	movs	r2, #0
   854e2:	6023      	str	r3, [r4, #0]
   854e4:	e013      	b.n	8550e <_fputwc_r+0xae>
   854e6:	4640      	mov	r0, r8
   854e8:	e001      	b.n	854ee <_fputwc_r+0x8e>
   854ea:	5d59      	ldrb	r1, [r3, r5]
   854ec:	4640      	mov	r0, r8
   854ee:	4622      	mov	r2, r4
   854f0:	f001 fc02 	bl	86cf8 <__swbuf_r>
   854f4:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   854f8:	4248      	negs	r0, r1
   854fa:	eb50 0201 	adcs.w	r2, r0, r1
   854fe:	e006      	b.n	8550e <_fputwc_r+0xae>
   85500:	6820      	ldr	r0, [r4, #0]
   85502:	5d59      	ldrb	r1, [r3, r5]
   85504:	7001      	strb	r1, [r0, #0]
   85506:	6822      	ldr	r2, [r4, #0]
   85508:	1c53      	adds	r3, r2, #1
   8550a:	6023      	str	r3, [r4, #0]
   8550c:	e000      	b.n	85510 <_fputwc_r+0xb0>
   8550e:	b91a      	cbnz	r2, 85518 <_fputwc_r+0xb8>
   85510:	3501      	adds	r5, #1
   85512:	e7d2      	b.n	854ba <_fputwc_r+0x5a>
   85514:	4630      	mov	r0, r6
   85516:	e001      	b.n	8551c <_fputwc_r+0xbc>
   85518:	f04f 30ff 	mov.w	r0, #4294967295
   8551c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00085520 <fputwc>:
   85520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85522:	4c08      	ldr	r4, [pc, #32]	; (85544 <fputwc+0x24>)
   85524:	4607      	mov	r7, r0
   85526:	6820      	ldr	r0, [r4, #0]
   85528:	460e      	mov	r6, r1
   8552a:	b118      	cbz	r0, 85534 <fputwc+0x14>
   8552c:	6b85      	ldr	r5, [r0, #56]	; 0x38
   8552e:	b90d      	cbnz	r5, 85534 <fputwc+0x14>
   85530:	f7ff ff1a 	bl	85368 <__sinit>
   85534:	6820      	ldr	r0, [r4, #0]
   85536:	4639      	mov	r1, r7
   85538:	4632      	mov	r2, r6
   8553a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8553e:	f7ff bf8f 	b.w	85460 <_fputwc_r>
   85542:	bf00      	nop
   85544:	20070038 	.word	0x20070038

00085548 <_malloc_trim_r>:
   85548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8554a:	4d23      	ldr	r5, [pc, #140]	; (855d8 <_malloc_trim_r+0x90>)
   8554c:	460e      	mov	r6, r1
   8554e:	4604      	mov	r4, r0
   85550:	f000 fd86 	bl	86060 <__malloc_lock>
   85554:	68ab      	ldr	r3, [r5, #8]
   85556:	685f      	ldr	r7, [r3, #4]
   85558:	f027 0703 	bic.w	r7, r7, #3
   8555c:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   85560:	1b81      	subs	r1, r0, r6
   85562:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   85566:	f022 060f 	bic.w	r6, r2, #15
   8556a:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8556e:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   85572:	da04      	bge.n	8557e <_malloc_trim_r+0x36>
   85574:	4620      	mov	r0, r4
   85576:	f000 fd74 	bl	86062 <__malloc_unlock>
   8557a:	2000      	movs	r0, #0
   8557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8557e:	2100      	movs	r1, #0
   85580:	4620      	mov	r0, r4
   85582:	f000 fedd 	bl	86340 <_sbrk_r>
   85586:	68ab      	ldr	r3, [r5, #8]
   85588:	19d9      	adds	r1, r3, r7
   8558a:	4288      	cmp	r0, r1
   8558c:	d1f2      	bne.n	85574 <_malloc_trim_r+0x2c>
   8558e:	4271      	negs	r1, r6
   85590:	4620      	mov	r0, r4
   85592:	f000 fed5 	bl	86340 <_sbrk_r>
   85596:	3001      	adds	r0, #1
   85598:	d110      	bne.n	855bc <_malloc_trim_r+0x74>
   8559a:	2100      	movs	r1, #0
   8559c:	4620      	mov	r0, r4
   8559e:	f000 fecf 	bl	86340 <_sbrk_r>
   855a2:	68ab      	ldr	r3, [r5, #8]
   855a4:	1ac2      	subs	r2, r0, r3
   855a6:	2a0f      	cmp	r2, #15
   855a8:	dde4      	ble.n	85574 <_malloc_trim_r+0x2c>
   855aa:	490c      	ldr	r1, [pc, #48]	; (855dc <_malloc_trim_r+0x94>)
   855ac:	f042 0201 	orr.w	r2, r2, #1
   855b0:	6809      	ldr	r1, [r1, #0]
   855b2:	605a      	str	r2, [r3, #4]
   855b4:	1a40      	subs	r0, r0, r1
   855b6:	490a      	ldr	r1, [pc, #40]	; (855e0 <_malloc_trim_r+0x98>)
   855b8:	6008      	str	r0, [r1, #0]
   855ba:	e7db      	b.n	85574 <_malloc_trim_r+0x2c>
   855bc:	4b08      	ldr	r3, [pc, #32]	; (855e0 <_malloc_trim_r+0x98>)
   855be:	68a8      	ldr	r0, [r5, #8]
   855c0:	681a      	ldr	r2, [r3, #0]
   855c2:	1bbf      	subs	r7, r7, r6
   855c4:	f047 0701 	orr.w	r7, r7, #1
   855c8:	6047      	str	r7, [r0, #4]
   855ca:	1b96      	subs	r6, r2, r6
   855cc:	4620      	mov	r0, r4
   855ce:	601e      	str	r6, [r3, #0]
   855d0:	f000 fd47 	bl	86062 <__malloc_unlock>
   855d4:	2001      	movs	r0, #1
   855d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   855d8:	200704e4 	.word	0x200704e4
   855dc:	200708ec 	.word	0x200708ec
   855e0:	2007ab00 	.word	0x2007ab00

000855e4 <_free_r>:
   855e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   855e6:	4606      	mov	r6, r0
   855e8:	460d      	mov	r5, r1
   855ea:	2900      	cmp	r1, #0
   855ec:	f000 80a6 	beq.w	8573c <_free_r+0x158>
   855f0:	f000 fd36 	bl	86060 <__malloc_lock>
   855f4:	f855 cc04 	ldr.w	ip, [r5, #-4]
   855f8:	4f51      	ldr	r7, [pc, #324]	; (85740 <_free_r+0x15c>)
   855fa:	f1a5 0308 	sub.w	r3, r5, #8
   855fe:	f02c 0201 	bic.w	r2, ip, #1
   85602:	189c      	adds	r4, r3, r2
   85604:	68b9      	ldr	r1, [r7, #8]
   85606:	6860      	ldr	r0, [r4, #4]
   85608:	428c      	cmp	r4, r1
   8560a:	f020 0003 	bic.w	r0, r0, #3
   8560e:	f00c 0101 	and.w	r1, ip, #1
   85612:	d11c      	bne.n	8564e <_free_r+0x6a>
   85614:	1882      	adds	r2, r0, r2
   85616:	b939      	cbnz	r1, 85628 <_free_r+0x44>
   85618:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8561c:	1a5b      	subs	r3, r3, r1
   8561e:	6898      	ldr	r0, [r3, #8]
   85620:	1852      	adds	r2, r2, r1
   85622:	68d9      	ldr	r1, [r3, #12]
   85624:	60c1      	str	r1, [r0, #12]
   85626:	6088      	str	r0, [r1, #8]
   85628:	4845      	ldr	r0, [pc, #276]	; (85740 <_free_r+0x15c>)
   8562a:	f042 0101 	orr.w	r1, r2, #1
   8562e:	6059      	str	r1, [r3, #4]
   85630:	6083      	str	r3, [r0, #8]
   85632:	4b44      	ldr	r3, [pc, #272]	; (85744 <_free_r+0x160>)
   85634:	6819      	ldr	r1, [r3, #0]
   85636:	428a      	cmp	r2, r1
   85638:	d304      	bcc.n	85644 <_free_r+0x60>
   8563a:	4a43      	ldr	r2, [pc, #268]	; (85748 <_free_r+0x164>)
   8563c:	4630      	mov	r0, r6
   8563e:	6811      	ldr	r1, [r2, #0]
   85640:	f7ff ff82 	bl	85548 <_malloc_trim_r>
   85644:	4630      	mov	r0, r6
   85646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8564a:	f000 bd0a 	b.w	86062 <__malloc_unlock>
   8564e:	6060      	str	r0, [r4, #4]
   85650:	b959      	cbnz	r1, 8566a <_free_r+0x86>
   85652:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85656:	3708      	adds	r7, #8
   85658:	1b5b      	subs	r3, r3, r5
   8565a:	1952      	adds	r2, r2, r5
   8565c:	689d      	ldr	r5, [r3, #8]
   8565e:	42bd      	cmp	r5, r7
   85660:	d005      	beq.n	8566e <_free_r+0x8a>
   85662:	68df      	ldr	r7, [r3, #12]
   85664:	60ef      	str	r7, [r5, #12]
   85666:	60bd      	str	r5, [r7, #8]
   85668:	e002      	b.n	85670 <_free_r+0x8c>
   8566a:	2100      	movs	r1, #0
   8566c:	e000      	b.n	85670 <_free_r+0x8c>
   8566e:	2101      	movs	r1, #1
   85670:	1825      	adds	r5, r4, r0
   85672:	686d      	ldr	r5, [r5, #4]
   85674:	f015 0f01 	tst.w	r5, #1
   85678:	d10f      	bne.n	8569a <_free_r+0xb6>
   8567a:	1812      	adds	r2, r2, r0
   8567c:	b949      	cbnz	r1, 85692 <_free_r+0xae>
   8567e:	68a0      	ldr	r0, [r4, #8]
   85680:	4d32      	ldr	r5, [pc, #200]	; (8574c <_free_r+0x168>)
   85682:	42a8      	cmp	r0, r5
   85684:	d105      	bne.n	85692 <_free_r+0xae>
   85686:	60eb      	str	r3, [r5, #12]
   85688:	60ab      	str	r3, [r5, #8]
   8568a:	60d8      	str	r0, [r3, #12]
   8568c:	6098      	str	r0, [r3, #8]
   8568e:	2101      	movs	r1, #1
   85690:	e003      	b.n	8569a <_free_r+0xb6>
   85692:	68e0      	ldr	r0, [r4, #12]
   85694:	68a4      	ldr	r4, [r4, #8]
   85696:	60e0      	str	r0, [r4, #12]
   85698:	6084      	str	r4, [r0, #8]
   8569a:	f042 0001 	orr.w	r0, r2, #1
   8569e:	6058      	str	r0, [r3, #4]
   856a0:	509a      	str	r2, [r3, r2]
   856a2:	2900      	cmp	r1, #0
   856a4:	d1ce      	bne.n	85644 <_free_r+0x60>
   856a6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   856aa:	d20c      	bcs.n	856c6 <_free_r+0xe2>
   856ac:	08d2      	lsrs	r2, r2, #3
   856ae:	1090      	asrs	r0, r2, #2
   856b0:	2401      	movs	r4, #1
   856b2:	fa04 f400 	lsl.w	r4, r4, r0
   856b6:	4922      	ldr	r1, [pc, #136]	; (85740 <_free_r+0x15c>)
   856b8:	6848      	ldr	r0, [r1, #4]
   856ba:	4320      	orrs	r0, r4
   856bc:	6048      	str	r0, [r1, #4]
   856be:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   856c2:	6881      	ldr	r1, [r0, #8]
   856c4:	e035      	b.n	85732 <_free_r+0x14e>
   856c6:	0a54      	lsrs	r4, r2, #9
   856c8:	2c04      	cmp	r4, #4
   856ca:	d802      	bhi.n	856d2 <_free_r+0xee>
   856cc:	0994      	lsrs	r4, r2, #6
   856ce:	3438      	adds	r4, #56	; 0x38
   856d0:	e016      	b.n	85700 <_free_r+0x11c>
   856d2:	2c14      	cmp	r4, #20
   856d4:	d801      	bhi.n	856da <_free_r+0xf6>
   856d6:	345b      	adds	r4, #91	; 0x5b
   856d8:	e012      	b.n	85700 <_free_r+0x11c>
   856da:	2c54      	cmp	r4, #84	; 0x54
   856dc:	d802      	bhi.n	856e4 <_free_r+0x100>
   856de:	0b14      	lsrs	r4, r2, #12
   856e0:	346e      	adds	r4, #110	; 0x6e
   856e2:	e00d      	b.n	85700 <_free_r+0x11c>
   856e4:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   856e8:	d802      	bhi.n	856f0 <_free_r+0x10c>
   856ea:	0bd4      	lsrs	r4, r2, #15
   856ec:	3477      	adds	r4, #119	; 0x77
   856ee:	e007      	b.n	85700 <_free_r+0x11c>
   856f0:	f240 5554 	movw	r5, #1364	; 0x554
   856f4:	42ac      	cmp	r4, r5
   856f6:	d802      	bhi.n	856fe <_free_r+0x11a>
   856f8:	0c94      	lsrs	r4, r2, #18
   856fa:	347c      	adds	r4, #124	; 0x7c
   856fc:	e000      	b.n	85700 <_free_r+0x11c>
   856fe:	247e      	movs	r4, #126	; 0x7e
   85700:	4d0f      	ldr	r5, [pc, #60]	; (85740 <_free_r+0x15c>)
   85702:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   85706:	6881      	ldr	r1, [r0, #8]
   85708:	4281      	cmp	r1, r0
   8570a:	d10c      	bne.n	85726 <_free_r+0x142>
   8570c:	2201      	movs	r2, #1
   8570e:	10a4      	asrs	r4, r4, #2
   85710:	fa02 f404 	lsl.w	r4, r2, r4
   85714:	6868      	ldr	r0, [r5, #4]
   85716:	ea44 0200 	orr.w	r2, r4, r0
   8571a:	606a      	str	r2, [r5, #4]
   8571c:	4608      	mov	r0, r1
   8571e:	e008      	b.n	85732 <_free_r+0x14e>
   85720:	6889      	ldr	r1, [r1, #8]
   85722:	4281      	cmp	r1, r0
   85724:	d004      	beq.n	85730 <_free_r+0x14c>
   85726:	684c      	ldr	r4, [r1, #4]
   85728:	f024 0403 	bic.w	r4, r4, #3
   8572c:	42a2      	cmp	r2, r4
   8572e:	d3f7      	bcc.n	85720 <_free_r+0x13c>
   85730:	68c8      	ldr	r0, [r1, #12]
   85732:	60d8      	str	r0, [r3, #12]
   85734:	6099      	str	r1, [r3, #8]
   85736:	6083      	str	r3, [r0, #8]
   85738:	60cb      	str	r3, [r1, #12]
   8573a:	e783      	b.n	85644 <_free_r+0x60>
   8573c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8573e:	bf00      	nop
   85740:	200704e4 	.word	0x200704e4
   85744:	200708f0 	.word	0x200708f0
   85748:	2007aafc 	.word	0x2007aafc
   8574c:	200704ec 	.word	0x200704ec

00085750 <__sfvwrite_r>:
   85750:	6893      	ldr	r3, [r2, #8]
   85752:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85756:	4606      	mov	r6, r0
   85758:	460c      	mov	r4, r1
   8575a:	4691      	mov	r9, r2
   8575c:	b90b      	cbnz	r3, 85762 <__sfvwrite_r+0x12>
   8575e:	2000      	movs	r0, #0
   85760:	e14f      	b.n	85a02 <__sfvwrite_r+0x2b2>
   85762:	8988      	ldrh	r0, [r1, #12]
   85764:	f000 0108 	and.w	r1, r0, #8
   85768:	b20a      	sxth	r2, r1
   8576a:	b10a      	cbz	r2, 85770 <__sfvwrite_r+0x20>
   8576c:	6923      	ldr	r3, [r4, #16]
   8576e:	b95b      	cbnz	r3, 85788 <__sfvwrite_r+0x38>
   85770:	4630      	mov	r0, r6
   85772:	4621      	mov	r1, r4
   85774:	f7ff fc52 	bl	8501c <__swsetup_r>
   85778:	b130      	cbz	r0, 85788 <__sfvwrite_r+0x38>
   8577a:	89a1      	ldrh	r1, [r4, #12]
   8577c:	2209      	movs	r2, #9
   8577e:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   85782:	81a0      	strh	r0, [r4, #12]
   85784:	6032      	str	r2, [r6, #0]
   85786:	e13a      	b.n	859fe <__sfvwrite_r+0x2ae>
   85788:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   8578c:	f8d9 8000 	ldr.w	r8, [r9]
   85790:	f00a 0c02 	and.w	ip, sl, #2
   85794:	fa0f f58c 	sxth.w	r5, ip
   85798:	b315      	cbz	r5, 857e0 <__sfvwrite_r+0x90>
   8579a:	f04f 0a00 	mov.w	sl, #0
   8579e:	4657      	mov	r7, sl
   857a0:	b937      	cbnz	r7, 857b0 <__sfvwrite_r+0x60>
   857a2:	f8d8 a000 	ldr.w	sl, [r8]
   857a6:	f8d8 7004 	ldr.w	r7, [r8, #4]
   857aa:	f108 0808 	add.w	r8, r8, #8
   857ae:	e7f7      	b.n	857a0 <__sfvwrite_r+0x50>
   857b0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   857b4:	bf34      	ite	cc
   857b6:	463b      	movcc	r3, r7
   857b8:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   857bc:	4630      	mov	r0, r6
   857be:	69e1      	ldr	r1, [r4, #28]
   857c0:	4652      	mov	r2, sl
   857c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   857c4:	47a8      	blx	r5
   857c6:	2800      	cmp	r0, #0
   857c8:	f340 8115 	ble.w	859f6 <__sfvwrite_r+0x2a6>
   857cc:	f8d9 1008 	ldr.w	r1, [r9, #8]
   857d0:	4482      	add	sl, r0
   857d2:	1a3f      	subs	r7, r7, r0
   857d4:	1a08      	subs	r0, r1, r0
   857d6:	f8c9 0008 	str.w	r0, [r9, #8]
   857da:	2800      	cmp	r0, #0
   857dc:	d1e0      	bne.n	857a0 <__sfvwrite_r+0x50>
   857de:	e7be      	b.n	8575e <__sfvwrite_r+0xe>
   857e0:	f01a 0a01 	ands.w	sl, sl, #1
   857e4:	d004      	beq.n	857f0 <__sfvwrite_r+0xa0>
   857e6:	46ab      	mov	fp, r5
   857e8:	9501      	str	r5, [sp, #4]
   857ea:	462f      	mov	r7, r5
   857ec:	46aa      	mov	sl, r5
   857ee:	e0c7      	b.n	85980 <__sfvwrite_r+0x230>
   857f0:	4655      	mov	r5, sl
   857f2:	b935      	cbnz	r5, 85802 <__sfvwrite_r+0xb2>
   857f4:	f8d8 a000 	ldr.w	sl, [r8]
   857f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
   857fc:	f108 0808 	add.w	r8, r8, #8
   85800:	e7f7      	b.n	857f2 <__sfvwrite_r+0xa2>
   85802:	89a2      	ldrh	r2, [r4, #12]
   85804:	f8d4 b008 	ldr.w	fp, [r4, #8]
   85808:	f402 7000 	and.w	r0, r2, #512	; 0x200
   8580c:	b203      	sxth	r3, r0
   8580e:	2b00      	cmp	r3, #0
   85810:	d052      	beq.n	858b8 <__sfvwrite_r+0x168>
   85812:	455d      	cmp	r5, fp
   85814:	d340      	bcc.n	85898 <__sfvwrite_r+0x148>
   85816:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8581a:	d03b      	beq.n	85894 <__sfvwrite_r+0x144>
   8581c:	6963      	ldr	r3, [r4, #20]
   8581e:	f04f 0b03 	mov.w	fp, #3
   85822:	fb0b f303 	mul.w	r3, fp, r3
   85826:	6921      	ldr	r1, [r4, #16]
   85828:	6827      	ldr	r7, [r4, #0]
   8582a:	2002      	movs	r0, #2
   8582c:	1a7f      	subs	r7, r7, r1
   8582e:	fb93 fcf0 	sdiv	ip, r3, r0
   85832:	1c7b      	adds	r3, r7, #1
   85834:	1958      	adds	r0, r3, r5
   85836:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8583a:	4584      	cmp	ip, r0
   8583c:	bf28      	it	cs
   8583e:	4660      	movcs	r0, ip
   85840:	b213      	sxth	r3, r2
   85842:	9001      	str	r0, [sp, #4]
   85844:	4630      	mov	r0, r6
   85846:	b17b      	cbz	r3, 85868 <__sfvwrite_r+0x118>
   85848:	9901      	ldr	r1, [sp, #4]
   8584a:	f000 f9df 	bl	85c0c <_malloc_r>
   8584e:	4683      	mov	fp, r0
   85850:	b198      	cbz	r0, 8587a <__sfvwrite_r+0x12a>
   85852:	6921      	ldr	r1, [r4, #16]
   85854:	463a      	mov	r2, r7
   85856:	f7fe fa5d 	bl	83d14 <memcpy>
   8585a:	89a1      	ldrh	r1, [r4, #12]
   8585c:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   85860:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   85864:	81a2      	strh	r2, [r4, #12]
   85866:	e00b      	b.n	85880 <__sfvwrite_r+0x130>
   85868:	9a01      	ldr	r2, [sp, #4]
   8586a:	f000 fbfb 	bl	86064 <_realloc_r>
   8586e:	4683      	mov	fp, r0
   85870:	b930      	cbnz	r0, 85880 <__sfvwrite_r+0x130>
   85872:	4630      	mov	r0, r6
   85874:	6921      	ldr	r1, [r4, #16]
   85876:	f7ff feb5 	bl	855e4 <_free_r>
   8587a:	230c      	movs	r3, #12
   8587c:	6033      	str	r3, [r6, #0]
   8587e:	e0ba      	b.n	859f6 <__sfvwrite_r+0x2a6>
   85880:	9901      	ldr	r1, [sp, #4]
   85882:	eb0b 0307 	add.w	r3, fp, r7
   85886:	1bcf      	subs	r7, r1, r7
   85888:	f8c4 b010 	str.w	fp, [r4, #16]
   8588c:	6023      	str	r3, [r4, #0]
   8588e:	6161      	str	r1, [r4, #20]
   85890:	46ab      	mov	fp, r5
   85892:	60a7      	str	r7, [r4, #8]
   85894:	455d      	cmp	r5, fp
   85896:	d200      	bcs.n	8589a <__sfvwrite_r+0x14a>
   85898:	46ab      	mov	fp, r5
   8589a:	465a      	mov	r2, fp
   8589c:	4651      	mov	r1, sl
   8589e:	6820      	ldr	r0, [r4, #0]
   858a0:	f000 fbc4 	bl	8602c <memmove>
   858a4:	68a0      	ldr	r0, [r4, #8]
   858a6:	6823      	ldr	r3, [r4, #0]
   858a8:	ebcb 0200 	rsb	r2, fp, r0
   858ac:	eb03 010b 	add.w	r1, r3, fp
   858b0:	60a2      	str	r2, [r4, #8]
   858b2:	6021      	str	r1, [r4, #0]
   858b4:	46ab      	mov	fp, r5
   858b6:	e02a      	b.n	8590e <__sfvwrite_r+0x1be>
   858b8:	6820      	ldr	r0, [r4, #0]
   858ba:	6921      	ldr	r1, [r4, #16]
   858bc:	4288      	cmp	r0, r1
   858be:	d90f      	bls.n	858e0 <__sfvwrite_r+0x190>
   858c0:	455d      	cmp	r5, fp
   858c2:	d90d      	bls.n	858e0 <__sfvwrite_r+0x190>
   858c4:	4651      	mov	r1, sl
   858c6:	465a      	mov	r2, fp
   858c8:	f000 fbb0 	bl	8602c <memmove>
   858cc:	6822      	ldr	r2, [r4, #0]
   858ce:	4621      	mov	r1, r4
   858d0:	eb02 000b 	add.w	r0, r2, fp
   858d4:	6020      	str	r0, [r4, #0]
   858d6:	4630      	mov	r0, r6
   858d8:	f7ff fc54 	bl	85184 <_fflush_r>
   858dc:	b1b8      	cbz	r0, 8590e <__sfvwrite_r+0x1be>
   858de:	e08a      	b.n	859f6 <__sfvwrite_r+0x2a6>
   858e0:	6963      	ldr	r3, [r4, #20]
   858e2:	429d      	cmp	r5, r3
   858e4:	d308      	bcc.n	858f8 <__sfvwrite_r+0x1a8>
   858e6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   858e8:	4630      	mov	r0, r6
   858ea:	69e1      	ldr	r1, [r4, #28]
   858ec:	4652      	mov	r2, sl
   858ee:	47b8      	blx	r7
   858f0:	f1b0 0b00 	subs.w	fp, r0, #0
   858f4:	dc0b      	bgt.n	8590e <__sfvwrite_r+0x1be>
   858f6:	e07e      	b.n	859f6 <__sfvwrite_r+0x2a6>
   858f8:	4651      	mov	r1, sl
   858fa:	462a      	mov	r2, r5
   858fc:	f000 fb96 	bl	8602c <memmove>
   85900:	68a2      	ldr	r2, [r4, #8]
   85902:	6823      	ldr	r3, [r4, #0]
   85904:	1b50      	subs	r0, r2, r5
   85906:	1959      	adds	r1, r3, r5
   85908:	46ab      	mov	fp, r5
   8590a:	60a0      	str	r0, [r4, #8]
   8590c:	6021      	str	r1, [r4, #0]
   8590e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   85912:	44da      	add	sl, fp
   85914:	ebcb 0200 	rsb	r2, fp, r0
   85918:	ebcb 0505 	rsb	r5, fp, r5
   8591c:	f8c9 2008 	str.w	r2, [r9, #8]
   85920:	2a00      	cmp	r2, #0
   85922:	f47f af66 	bne.w	857f2 <__sfvwrite_r+0xa2>
   85926:	e71a      	b.n	8575e <__sfvwrite_r+0xe>
   85928:	9801      	ldr	r0, [sp, #4]
   8592a:	2800      	cmp	r0, #0
   8592c:	d032      	beq.n	85994 <__sfvwrite_r+0x244>
   8592e:	6820      	ldr	r0, [r4, #0]
   85930:	6921      	ldr	r1, [r4, #16]
   85932:	45d3      	cmp	fp, sl
   85934:	bf34      	ite	cc
   85936:	465b      	movcc	r3, fp
   85938:	4653      	movcs	r3, sl
   8593a:	4288      	cmp	r0, r1
   8593c:	68a5      	ldr	r5, [r4, #8]
   8593e:	f8d4 e014 	ldr.w	lr, [r4, #20]
   85942:	d937      	bls.n	859b4 <__sfvwrite_r+0x264>
   85944:	4475      	add	r5, lr
   85946:	42ab      	cmp	r3, r5
   85948:	dd34      	ble.n	859b4 <__sfvwrite_r+0x264>
   8594a:	4639      	mov	r1, r7
   8594c:	462a      	mov	r2, r5
   8594e:	f000 fb6d 	bl	8602c <memmove>
   85952:	6820      	ldr	r0, [r4, #0]
   85954:	4621      	mov	r1, r4
   85956:	1943      	adds	r3, r0, r5
   85958:	6023      	str	r3, [r4, #0]
   8595a:	4630      	mov	r0, r6
   8595c:	f7ff fc12 	bl	85184 <_fflush_r>
   85960:	2800      	cmp	r0, #0
   85962:	d148      	bne.n	859f6 <__sfvwrite_r+0x2a6>
   85964:	ebbb 0b05 	subs.w	fp, fp, r5
   85968:	d03d      	beq.n	859e6 <__sfvwrite_r+0x296>
   8596a:	f8d9 2008 	ldr.w	r2, [r9, #8]
   8596e:	197f      	adds	r7, r7, r5
   85970:	ebc5 0a0a 	rsb	sl, r5, sl
   85974:	1b55      	subs	r5, r2, r5
   85976:	f8c9 5008 	str.w	r5, [r9, #8]
   8597a:	2d00      	cmp	r5, #0
   8597c:	f43f aeef 	beq.w	8575e <__sfvwrite_r+0xe>
   85980:	f1ba 0f00 	cmp.w	sl, #0
   85984:	d1d0      	bne.n	85928 <__sfvwrite_r+0x1d8>
   85986:	2100      	movs	r1, #0
   85988:	e898 0480 	ldmia.w	r8, {r7, sl}
   8598c:	9101      	str	r1, [sp, #4]
   8598e:	f108 0808 	add.w	r8, r8, #8
   85992:	e7f5      	b.n	85980 <__sfvwrite_r+0x230>
   85994:	4638      	mov	r0, r7
   85996:	210a      	movs	r1, #10
   85998:	4652      	mov	r2, sl
   8599a:	f000 fb39 	bl	86010 <memchr>
   8599e:	b120      	cbz	r0, 859aa <__sfvwrite_r+0x25a>
   859a0:	f100 0101 	add.w	r1, r0, #1
   859a4:	ebc7 0b01 	rsb	fp, r7, r1
   859a8:	e001      	b.n	859ae <__sfvwrite_r+0x25e>
   859aa:	f10a 0b01 	add.w	fp, sl, #1
   859ae:	2201      	movs	r2, #1
   859b0:	9201      	str	r2, [sp, #4]
   859b2:	e7bc      	b.n	8592e <__sfvwrite_r+0x1de>
   859b4:	4573      	cmp	r3, lr
   859b6:	db08      	blt.n	859ca <__sfvwrite_r+0x27a>
   859b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   859ba:	4630      	mov	r0, r6
   859bc:	69e1      	ldr	r1, [r4, #28]
   859be:	463a      	mov	r2, r7
   859c0:	4673      	mov	r3, lr
   859c2:	47a8      	blx	r5
   859c4:	1e05      	subs	r5, r0, #0
   859c6:	dccd      	bgt.n	85964 <__sfvwrite_r+0x214>
   859c8:	e015      	b.n	859f6 <__sfvwrite_r+0x2a6>
   859ca:	461a      	mov	r2, r3
   859cc:	4639      	mov	r1, r7
   859ce:	9300      	str	r3, [sp, #0]
   859d0:	f000 fb2c 	bl	8602c <memmove>
   859d4:	9b00      	ldr	r3, [sp, #0]
   859d6:	6825      	ldr	r5, [r4, #0]
   859d8:	68a0      	ldr	r0, [r4, #8]
   859da:	18e9      	adds	r1, r5, r3
   859dc:	1ac2      	subs	r2, r0, r3
   859de:	60a2      	str	r2, [r4, #8]
   859e0:	6021      	str	r1, [r4, #0]
   859e2:	461d      	mov	r5, r3
   859e4:	e7be      	b.n	85964 <__sfvwrite_r+0x214>
   859e6:	4630      	mov	r0, r6
   859e8:	4621      	mov	r1, r4
   859ea:	f7ff fbcb 	bl	85184 <_fflush_r>
   859ee:	b910      	cbnz	r0, 859f6 <__sfvwrite_r+0x2a6>
   859f0:	f8cd b004 	str.w	fp, [sp, #4]
   859f4:	e7b9      	b.n	8596a <__sfvwrite_r+0x21a>
   859f6:	89a2      	ldrh	r2, [r4, #12]
   859f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   859fc:	81a3      	strh	r3, [r4, #12]
   859fe:	f04f 30ff 	mov.w	r0, #4294967295
   85a02:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085a06 <_fwalk>:
   85a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a0a:	4604      	mov	r4, r0
   85a0c:	4688      	mov	r8, r1
   85a0e:	f7ff fd0f 	bl	85430 <__sfp_lock_acquire>
   85a12:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   85a16:	2600      	movs	r6, #0
   85a18:	b18c      	cbz	r4, 85a3e <_fwalk+0x38>
   85a1a:	68a5      	ldr	r5, [r4, #8]
   85a1c:	6867      	ldr	r7, [r4, #4]
   85a1e:	3f01      	subs	r7, #1
   85a20:	d40b      	bmi.n	85a3a <_fwalk+0x34>
   85a22:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85a26:	b133      	cbz	r3, 85a36 <_fwalk+0x30>
   85a28:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   85a2c:	1c43      	adds	r3, r0, #1
   85a2e:	d002      	beq.n	85a36 <_fwalk+0x30>
   85a30:	4628      	mov	r0, r5
   85a32:	47c0      	blx	r8
   85a34:	4306      	orrs	r6, r0
   85a36:	3568      	adds	r5, #104	; 0x68
   85a38:	e7f1      	b.n	85a1e <_fwalk+0x18>
   85a3a:	6824      	ldr	r4, [r4, #0]
   85a3c:	e7ec      	b.n	85a18 <_fwalk+0x12>
   85a3e:	f7ff fcf8 	bl	85432 <__sfp_lock_release>
   85a42:	4630      	mov	r0, r6
   85a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085a48 <_fwalk_reent>:
   85a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85a4c:	4680      	mov	r8, r0
   85a4e:	4689      	mov	r9, r1
   85a50:	f7ff fcee 	bl	85430 <__sfp_lock_acquire>
   85a54:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   85a58:	2600      	movs	r6, #0
   85a5a:	b194      	cbz	r4, 85a82 <_fwalk_reent+0x3a>
   85a5c:	68a5      	ldr	r5, [r4, #8]
   85a5e:	6867      	ldr	r7, [r4, #4]
   85a60:	3f01      	subs	r7, #1
   85a62:	d40c      	bmi.n	85a7e <_fwalk_reent+0x36>
   85a64:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85a68:	b13b      	cbz	r3, 85a7a <_fwalk_reent+0x32>
   85a6a:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   85a6e:	1c43      	adds	r3, r0, #1
   85a70:	d003      	beq.n	85a7a <_fwalk_reent+0x32>
   85a72:	4640      	mov	r0, r8
   85a74:	4629      	mov	r1, r5
   85a76:	47c8      	blx	r9
   85a78:	4306      	orrs	r6, r0
   85a7a:	3568      	adds	r5, #104	; 0x68
   85a7c:	e7f0      	b.n	85a60 <_fwalk_reent+0x18>
   85a7e:	6824      	ldr	r4, [r4, #0]
   85a80:	e7eb      	b.n	85a5a <_fwalk_reent+0x12>
   85a82:	f7ff fcd6 	bl	85432 <__sfp_lock_release>
   85a86:	4630      	mov	r0, r6
   85a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085a8c <_setlocale_r>:
   85a8c:	b510      	push	{r4, lr}
   85a8e:	4614      	mov	r4, r2
   85a90:	b90a      	cbnz	r2, 85a96 <_setlocale_r+0xa>
   85a92:	480c      	ldr	r0, [pc, #48]	; (85ac4 <_setlocale_r+0x38>)
   85a94:	bd10      	pop	{r4, pc}
   85a96:	4610      	mov	r0, r2
   85a98:	490b      	ldr	r1, [pc, #44]	; (85ac8 <_setlocale_r+0x3c>)
   85a9a:	f000 fca8 	bl	863ee <strcmp>
   85a9e:	2800      	cmp	r0, #0
   85aa0:	d0f7      	beq.n	85a92 <_setlocale_r+0x6>
   85aa2:	4620      	mov	r0, r4
   85aa4:	4907      	ldr	r1, [pc, #28]	; (85ac4 <_setlocale_r+0x38>)
   85aa6:	f000 fca2 	bl	863ee <strcmp>
   85aaa:	2800      	cmp	r0, #0
   85aac:	d0f1      	beq.n	85a92 <_setlocale_r+0x6>
   85aae:	4620      	mov	r0, r4
   85ab0:	4906      	ldr	r1, [pc, #24]	; (85acc <_setlocale_r+0x40>)
   85ab2:	f000 fc9c 	bl	863ee <strcmp>
   85ab6:	4b03      	ldr	r3, [pc, #12]	; (85ac4 <_setlocale_r+0x38>)
   85ab8:	2800      	cmp	r0, #0
   85aba:	bf0c      	ite	eq
   85abc:	4618      	moveq	r0, r3
   85abe:	2000      	movne	r0, #0
   85ac0:	bd10      	pop	{r4, pc}
   85ac2:	bf00      	nop
   85ac4:	00087630 	.word	0x00087630
   85ac8:	00087694 	.word	0x00087694
   85acc:	0008769b 	.word	0x0008769b

00085ad0 <__locale_charset>:
   85ad0:	4800      	ldr	r0, [pc, #0]	; (85ad4 <__locale_charset+0x4>)
   85ad2:	4770      	bx	lr
   85ad4:	20070468 	.word	0x20070468

00085ad8 <__locale_mb_cur_max>:
   85ad8:	4b01      	ldr	r3, [pc, #4]	; (85ae0 <__locale_mb_cur_max+0x8>)
   85ada:	6a18      	ldr	r0, [r3, #32]
   85adc:	4770      	bx	lr
   85ade:	bf00      	nop
   85ae0:	20070468 	.word	0x20070468

00085ae4 <__locale_msgcharset>:
   85ae4:	4800      	ldr	r0, [pc, #0]	; (85ae8 <__locale_msgcharset+0x4>)
   85ae6:	4770      	bx	lr
   85ae8:	2007048c 	.word	0x2007048c

00085aec <__locale_cjk_lang>:
   85aec:	2000      	movs	r0, #0
   85aee:	4770      	bx	lr

00085af0 <_localeconv_r>:
   85af0:	4800      	ldr	r0, [pc, #0]	; (85af4 <_localeconv_r+0x4>)
   85af2:	4770      	bx	lr
   85af4:	200704ac 	.word	0x200704ac

00085af8 <setlocale>:
   85af8:	460a      	mov	r2, r1
   85afa:	4903      	ldr	r1, [pc, #12]	; (85b08 <setlocale+0x10>)
   85afc:	4603      	mov	r3, r0
   85afe:	6808      	ldr	r0, [r1, #0]
   85b00:	4619      	mov	r1, r3
   85b02:	f7ff bfc3 	b.w	85a8c <_setlocale_r>
   85b06:	bf00      	nop
   85b08:	20070038 	.word	0x20070038

00085b0c <localeconv>:
   85b0c:	4800      	ldr	r0, [pc, #0]	; (85b10 <localeconv+0x4>)
   85b0e:	4770      	bx	lr
   85b10:	200704ac 	.word	0x200704ac

00085b14 <__smakebuf_r>:
   85b14:	b5f0      	push	{r4, r5, r6, r7, lr}
   85b16:	898b      	ldrh	r3, [r1, #12]
   85b18:	460c      	mov	r4, r1
   85b1a:	f003 0102 	and.w	r1, r3, #2
   85b1e:	b20a      	sxth	r2, r1
   85b20:	b091      	sub	sp, #68	; 0x44
   85b22:	4606      	mov	r6, r0
   85b24:	2a00      	cmp	r2, #0
   85b26:	d13f      	bne.n	85ba8 <__smakebuf_r+0x94>
   85b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85b2c:	2900      	cmp	r1, #0
   85b2e:	da0d      	bge.n	85b4c <__smakebuf_r+0x38>
   85b30:	89a7      	ldrh	r7, [r4, #12]
   85b32:	f007 0280 	and.w	r2, r7, #128	; 0x80
   85b36:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   85b3a:	b210      	sxth	r0, r2
   85b3c:	2800      	cmp	r0, #0
   85b3e:	bf0c      	ite	eq
   85b40:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   85b44:	2540      	movne	r5, #64	; 0x40
   85b46:	81a3      	strh	r3, [r4, #12]
   85b48:	2700      	movs	r7, #0
   85b4a:	e020      	b.n	85b8e <__smakebuf_r+0x7a>
   85b4c:	aa01      	add	r2, sp, #4
   85b4e:	f001 f9ef 	bl	86f30 <_fstat_r>
   85b52:	2800      	cmp	r0, #0
   85b54:	dbec      	blt.n	85b30 <__smakebuf_r+0x1c>
   85b56:	9802      	ldr	r0, [sp, #8]
   85b58:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   85b5c:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   85b60:	425f      	negs	r7, r3
   85b62:	415f      	adcs	r7, r3
   85b64:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   85b68:	d10b      	bne.n	85b82 <__smakebuf_r+0x6e>
   85b6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   85b6c:	4a1d      	ldr	r2, [pc, #116]	; (85be4 <__smakebuf_r+0xd0>)
   85b6e:	4291      	cmp	r1, r2
   85b70:	d107      	bne.n	85b82 <__smakebuf_r+0x6e>
   85b72:	89a3      	ldrh	r3, [r4, #12]
   85b74:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85b78:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   85b7c:	81a1      	strh	r1, [r4, #12]
   85b7e:	64e5      	str	r5, [r4, #76]	; 0x4c
   85b80:	e005      	b.n	85b8e <__smakebuf_r+0x7a>
   85b82:	89a0      	ldrh	r0, [r4, #12]
   85b84:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   85b88:	81a5      	strh	r5, [r4, #12]
   85b8a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85b8e:	4630      	mov	r0, r6
   85b90:	4629      	mov	r1, r5
   85b92:	f000 f83b 	bl	85c0c <_malloc_r>
   85b96:	b970      	cbnz	r0, 85bb6 <__smakebuf_r+0xa2>
   85b98:	89a3      	ldrh	r3, [r4, #12]
   85b9a:	f403 7200 	and.w	r2, r3, #512	; 0x200
   85b9e:	b210      	sxth	r0, r2
   85ba0:	b9e8      	cbnz	r0, 85bde <__smakebuf_r+0xca>
   85ba2:	f043 0102 	orr.w	r1, r3, #2
   85ba6:	81a1      	strh	r1, [r4, #12]
   85ba8:	f104 0343 	add.w	r3, r4, #67	; 0x43
   85bac:	2201      	movs	r2, #1
   85bae:	6023      	str	r3, [r4, #0]
   85bb0:	6123      	str	r3, [r4, #16]
   85bb2:	6162      	str	r2, [r4, #20]
   85bb4:	e013      	b.n	85bde <__smakebuf_r+0xca>
   85bb6:	89a2      	ldrh	r2, [r4, #12]
   85bb8:	490b      	ldr	r1, [pc, #44]	; (85be8 <__smakebuf_r+0xd4>)
   85bba:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   85bbe:	63f1      	str	r1, [r6, #60]	; 0x3c
   85bc0:	81a3      	strh	r3, [r4, #12]
   85bc2:	6020      	str	r0, [r4, #0]
   85bc4:	6120      	str	r0, [r4, #16]
   85bc6:	6165      	str	r5, [r4, #20]
   85bc8:	b14f      	cbz	r7, 85bde <__smakebuf_r+0xca>
   85bca:	4630      	mov	r0, r6
   85bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85bd0:	f001 f9c0 	bl	86f54 <_isatty_r>
   85bd4:	b118      	cbz	r0, 85bde <__smakebuf_r+0xca>
   85bd6:	89a0      	ldrh	r0, [r4, #12]
   85bd8:	f040 0101 	orr.w	r1, r0, #1
   85bdc:	81a1      	strh	r1, [r4, #12]
   85bde:	b011      	add	sp, #68	; 0x44
   85be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85be2:	bf00      	nop
   85be4:	000863c3 	.word	0x000863c3
   85be8:	000852dd 	.word	0x000852dd

00085bec <malloc>:
   85bec:	4b02      	ldr	r3, [pc, #8]	; (85bf8 <malloc+0xc>)
   85bee:	4601      	mov	r1, r0
   85bf0:	6818      	ldr	r0, [r3, #0]
   85bf2:	f000 b80b 	b.w	85c0c <_malloc_r>
   85bf6:	bf00      	nop
   85bf8:	20070038 	.word	0x20070038

00085bfc <free>:
   85bfc:	4b02      	ldr	r3, [pc, #8]	; (85c08 <free+0xc>)
   85bfe:	4601      	mov	r1, r0
   85c00:	6818      	ldr	r0, [r3, #0]
   85c02:	f7ff bcef 	b.w	855e4 <_free_r>
   85c06:	bf00      	nop
   85c08:	20070038 	.word	0x20070038

00085c0c <_malloc_r>:
   85c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85c10:	f101 040b 	add.w	r4, r1, #11
   85c14:	2c16      	cmp	r4, #22
   85c16:	4606      	mov	r6, r0
   85c18:	d903      	bls.n	85c22 <_malloc_r+0x16>
   85c1a:	f034 0407 	bics.w	r4, r4, #7
   85c1e:	d501      	bpl.n	85c24 <_malloc_r+0x18>
   85c20:	e002      	b.n	85c28 <_malloc_r+0x1c>
   85c22:	2410      	movs	r4, #16
   85c24:	428c      	cmp	r4, r1
   85c26:	d202      	bcs.n	85c2e <_malloc_r+0x22>
   85c28:	250c      	movs	r5, #12
   85c2a:	6035      	str	r5, [r6, #0]
   85c2c:	e1d9      	b.n	85fe2 <_malloc_r+0x3d6>
   85c2e:	4630      	mov	r0, r6
   85c30:	f000 fa16 	bl	86060 <__malloc_lock>
   85c34:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   85c38:	d214      	bcs.n	85c64 <_malloc_r+0x58>
   85c3a:	4da0      	ldr	r5, [pc, #640]	; (85ebc <_malloc_r+0x2b0>)
   85c3c:	08e1      	lsrs	r1, r4, #3
   85c3e:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   85c42:	68c5      	ldr	r5, [r0, #12]
   85c44:	4285      	cmp	r5, r0
   85c46:	d105      	bne.n	85c54 <_malloc_r+0x48>
   85c48:	f105 0308 	add.w	r3, r5, #8
   85c4c:	696d      	ldr	r5, [r5, #20]
   85c4e:	1c8a      	adds	r2, r1, #2
   85c50:	429d      	cmp	r5, r3
   85c52:	d044      	beq.n	85cde <_malloc_r+0xd2>
   85c54:	68e8      	ldr	r0, [r5, #12]
   85c56:	68a9      	ldr	r1, [r5, #8]
   85c58:	686a      	ldr	r2, [r5, #4]
   85c5a:	60c8      	str	r0, [r1, #12]
   85c5c:	f022 0303 	bic.w	r3, r2, #3
   85c60:	6081      	str	r1, [r0, #8]
   85c62:	e059      	b.n	85d18 <_malloc_r+0x10c>
   85c64:	0a62      	lsrs	r2, r4, #9
   85c66:	d101      	bne.n	85c6c <_malloc_r+0x60>
   85c68:	08e2      	lsrs	r2, r4, #3
   85c6a:	e01b      	b.n	85ca4 <_malloc_r+0x98>
   85c6c:	2a04      	cmp	r2, #4
   85c6e:	d802      	bhi.n	85c76 <_malloc_r+0x6a>
   85c70:	09a2      	lsrs	r2, r4, #6
   85c72:	3238      	adds	r2, #56	; 0x38
   85c74:	e016      	b.n	85ca4 <_malloc_r+0x98>
   85c76:	2a14      	cmp	r2, #20
   85c78:	d801      	bhi.n	85c7e <_malloc_r+0x72>
   85c7a:	325b      	adds	r2, #91	; 0x5b
   85c7c:	e012      	b.n	85ca4 <_malloc_r+0x98>
   85c7e:	2a54      	cmp	r2, #84	; 0x54
   85c80:	d802      	bhi.n	85c88 <_malloc_r+0x7c>
   85c82:	0b22      	lsrs	r2, r4, #12
   85c84:	326e      	adds	r2, #110	; 0x6e
   85c86:	e00d      	b.n	85ca4 <_malloc_r+0x98>
   85c88:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85c8c:	d802      	bhi.n	85c94 <_malloc_r+0x88>
   85c8e:	0be2      	lsrs	r2, r4, #15
   85c90:	3277      	adds	r2, #119	; 0x77
   85c92:	e007      	b.n	85ca4 <_malloc_r+0x98>
   85c94:	f240 5354 	movw	r3, #1364	; 0x554
   85c98:	429a      	cmp	r2, r3
   85c9a:	d802      	bhi.n	85ca2 <_malloc_r+0x96>
   85c9c:	0ca2      	lsrs	r2, r4, #18
   85c9e:	327c      	adds	r2, #124	; 0x7c
   85ca0:	e000      	b.n	85ca4 <_malloc_r+0x98>
   85ca2:	227e      	movs	r2, #126	; 0x7e
   85ca4:	4885      	ldr	r0, [pc, #532]	; (85ebc <_malloc_r+0x2b0>)
   85ca6:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   85caa:	68dd      	ldr	r5, [r3, #12]
   85cac:	429d      	cmp	r5, r3
   85cae:	d015      	beq.n	85cdc <_malloc_r+0xd0>
   85cb0:	6869      	ldr	r1, [r5, #4]
   85cb2:	f021 0103 	bic.w	r1, r1, #3
   85cb6:	1b08      	subs	r0, r1, r4
   85cb8:	280f      	cmp	r0, #15
   85cba:	dd01      	ble.n	85cc0 <_malloc_r+0xb4>
   85cbc:	3a01      	subs	r2, #1
   85cbe:	e00d      	b.n	85cdc <_malloc_r+0xd0>
   85cc0:	2800      	cmp	r0, #0
   85cc2:	db09      	blt.n	85cd8 <_malloc_r+0xcc>
   85cc4:	68eb      	ldr	r3, [r5, #12]
   85cc6:	68aa      	ldr	r2, [r5, #8]
   85cc8:	60d3      	str	r3, [r2, #12]
   85cca:	609a      	str	r2, [r3, #8]
   85ccc:	186b      	adds	r3, r5, r1
   85cce:	685a      	ldr	r2, [r3, #4]
   85cd0:	f042 0001 	orr.w	r0, r2, #1
   85cd4:	6058      	str	r0, [r3, #4]
   85cd6:	e190      	b.n	85ffa <_malloc_r+0x3ee>
   85cd8:	68ed      	ldr	r5, [r5, #12]
   85cda:	e7e7      	b.n	85cac <_malloc_r+0xa0>
   85cdc:	3201      	adds	r2, #1
   85cde:	4977      	ldr	r1, [pc, #476]	; (85ebc <_malloc_r+0x2b0>)
   85ce0:	690d      	ldr	r5, [r1, #16]
   85ce2:	f101 0708 	add.w	r7, r1, #8
   85ce6:	42bd      	cmp	r5, r7
   85ce8:	d068      	beq.n	85dbc <_malloc_r+0x1b0>
   85cea:	6868      	ldr	r0, [r5, #4]
   85cec:	f020 0303 	bic.w	r3, r0, #3
   85cf0:	1b18      	subs	r0, r3, r4
   85cf2:	280f      	cmp	r0, #15
   85cf4:	dd0c      	ble.n	85d10 <_malloc_r+0x104>
   85cf6:	192b      	adds	r3, r5, r4
   85cf8:	614b      	str	r3, [r1, #20]
   85cfa:	610b      	str	r3, [r1, #16]
   85cfc:	f044 0401 	orr.w	r4, r4, #1
   85d00:	f040 0101 	orr.w	r1, r0, #1
   85d04:	606c      	str	r4, [r5, #4]
   85d06:	60df      	str	r7, [r3, #12]
   85d08:	609f      	str	r7, [r3, #8]
   85d0a:	6059      	str	r1, [r3, #4]
   85d0c:	5018      	str	r0, [r3, r0]
   85d0e:	e174      	b.n	85ffa <_malloc_r+0x3ee>
   85d10:	2800      	cmp	r0, #0
   85d12:	614f      	str	r7, [r1, #20]
   85d14:	610f      	str	r7, [r1, #16]
   85d16:	db01      	blt.n	85d1c <_malloc_r+0x110>
   85d18:	18eb      	adds	r3, r5, r3
   85d1a:	e7d8      	b.n	85cce <_malloc_r+0xc2>
   85d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85d20:	d20f      	bcs.n	85d42 <_malloc_r+0x136>
   85d22:	08db      	lsrs	r3, r3, #3
   85d24:	1098      	asrs	r0, r3, #2
   85d26:	2701      	movs	r7, #1
   85d28:	fa07 f700 	lsl.w	r7, r7, r0
   85d2c:	6848      	ldr	r0, [r1, #4]
   85d2e:	4307      	orrs	r7, r0
   85d30:	604f      	str	r7, [r1, #4]
   85d32:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   85d36:	688b      	ldr	r3, [r1, #8]
   85d38:	60e9      	str	r1, [r5, #12]
   85d3a:	60ab      	str	r3, [r5, #8]
   85d3c:	60dd      	str	r5, [r3, #12]
   85d3e:	608d      	str	r5, [r1, #8]
   85d40:	e03c      	b.n	85dbc <_malloc_r+0x1b0>
   85d42:	0a58      	lsrs	r0, r3, #9
   85d44:	2804      	cmp	r0, #4
   85d46:	d802      	bhi.n	85d4e <_malloc_r+0x142>
   85d48:	0998      	lsrs	r0, r3, #6
   85d4a:	3038      	adds	r0, #56	; 0x38
   85d4c:	e016      	b.n	85d7c <_malloc_r+0x170>
   85d4e:	2814      	cmp	r0, #20
   85d50:	d801      	bhi.n	85d56 <_malloc_r+0x14a>
   85d52:	305b      	adds	r0, #91	; 0x5b
   85d54:	e012      	b.n	85d7c <_malloc_r+0x170>
   85d56:	2854      	cmp	r0, #84	; 0x54
   85d58:	d802      	bhi.n	85d60 <_malloc_r+0x154>
   85d5a:	0b18      	lsrs	r0, r3, #12
   85d5c:	306e      	adds	r0, #110	; 0x6e
   85d5e:	e00d      	b.n	85d7c <_malloc_r+0x170>
   85d60:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85d64:	d802      	bhi.n	85d6c <_malloc_r+0x160>
   85d66:	0bd8      	lsrs	r0, r3, #15
   85d68:	3077      	adds	r0, #119	; 0x77
   85d6a:	e007      	b.n	85d7c <_malloc_r+0x170>
   85d6c:	f240 5754 	movw	r7, #1364	; 0x554
   85d70:	42b8      	cmp	r0, r7
   85d72:	d802      	bhi.n	85d7a <_malloc_r+0x16e>
   85d74:	0c98      	lsrs	r0, r3, #18
   85d76:	307c      	adds	r0, #124	; 0x7c
   85d78:	e000      	b.n	85d7c <_malloc_r+0x170>
   85d7a:	207e      	movs	r0, #126	; 0x7e
   85d7c:	f8df e13c 	ldr.w	lr, [pc, #316]	; 85ebc <_malloc_r+0x2b0>
   85d80:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   85d84:	68b9      	ldr	r1, [r7, #8]
   85d86:	42b9      	cmp	r1, r7
   85d88:	d10e      	bne.n	85da8 <_malloc_r+0x19c>
   85d8a:	1087      	asrs	r7, r0, #2
   85d8c:	2301      	movs	r3, #1
   85d8e:	fa03 f007 	lsl.w	r0, r3, r7
   85d92:	f8de 7004 	ldr.w	r7, [lr, #4]
   85d96:	ea40 0307 	orr.w	r3, r0, r7
   85d9a:	f8ce 3004 	str.w	r3, [lr, #4]
   85d9e:	4608      	mov	r0, r1
   85da0:	e008      	b.n	85db4 <_malloc_r+0x1a8>
   85da2:	6889      	ldr	r1, [r1, #8]
   85da4:	42b9      	cmp	r1, r7
   85da6:	d004      	beq.n	85db2 <_malloc_r+0x1a6>
   85da8:	6848      	ldr	r0, [r1, #4]
   85daa:	f020 0003 	bic.w	r0, r0, #3
   85dae:	4283      	cmp	r3, r0
   85db0:	d3f7      	bcc.n	85da2 <_malloc_r+0x196>
   85db2:	68c8      	ldr	r0, [r1, #12]
   85db4:	60e8      	str	r0, [r5, #12]
   85db6:	60a9      	str	r1, [r5, #8]
   85db8:	60cd      	str	r5, [r1, #12]
   85dba:	6085      	str	r5, [r0, #8]
   85dbc:	1095      	asrs	r5, r2, #2
   85dbe:	2001      	movs	r0, #1
   85dc0:	fa00 f305 	lsl.w	r3, r0, r5
   85dc4:	4f3d      	ldr	r7, [pc, #244]	; (85ebc <_malloc_r+0x2b0>)
   85dc6:	6879      	ldr	r1, [r7, #4]
   85dc8:	428b      	cmp	r3, r1
   85dca:	d85d      	bhi.n	85e88 <_malloc_r+0x27c>
   85dcc:	420b      	tst	r3, r1
   85dce:	d105      	bne.n	85ddc <_malloc_r+0x1d0>
   85dd0:	f022 0203 	bic.w	r2, r2, #3
   85dd4:	005b      	lsls	r3, r3, #1
   85dd6:	3204      	adds	r2, #4
   85dd8:	420b      	tst	r3, r1
   85dda:	d0fb      	beq.n	85dd4 <_malloc_r+0x1c8>
   85ddc:	4d37      	ldr	r5, [pc, #220]	; (85ebc <_malloc_r+0x2b0>)
   85dde:	4610      	mov	r0, r2
   85de0:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   85de4:	4677      	mov	r7, lr
   85de6:	68fd      	ldr	r5, [r7, #12]
   85de8:	42bd      	cmp	r5, r7
   85dea:	d02d      	beq.n	85e48 <_malloc_r+0x23c>
   85dec:	6869      	ldr	r1, [r5, #4]
   85dee:	f021 0c03 	bic.w	ip, r1, #3
   85df2:	ebc4 010c 	rsb	r1, r4, ip
   85df6:	290f      	cmp	r1, #15
   85df8:	dd13      	ble.n	85e22 <_malloc_r+0x216>
   85dfa:	192b      	adds	r3, r5, r4
   85dfc:	f044 0401 	orr.w	r4, r4, #1
   85e00:	68ea      	ldr	r2, [r5, #12]
   85e02:	606c      	str	r4, [r5, #4]
   85e04:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85e08:	5059      	str	r1, [r3, r1]
   85e0a:	60c2      	str	r2, [r0, #12]
   85e0c:	6090      	str	r0, [r2, #8]
   85e0e:	4a2b      	ldr	r2, [pc, #172]	; (85ebc <_malloc_r+0x2b0>)
   85e10:	f041 0001 	orr.w	r0, r1, #1
   85e14:	6153      	str	r3, [r2, #20]
   85e16:	6113      	str	r3, [r2, #16]
   85e18:	3208      	adds	r2, #8
   85e1a:	60da      	str	r2, [r3, #12]
   85e1c:	609a      	str	r2, [r3, #8]
   85e1e:	6058      	str	r0, [r3, #4]
   85e20:	e00c      	b.n	85e3c <_malloc_r+0x230>
   85e22:	2900      	cmp	r1, #0
   85e24:	db0e      	blt.n	85e44 <_malloc_r+0x238>
   85e26:	eb05 000c 	add.w	r0, r5, ip
   85e2a:	6842      	ldr	r2, [r0, #4]
   85e2c:	68e9      	ldr	r1, [r5, #12]
   85e2e:	f042 0301 	orr.w	r3, r2, #1
   85e32:	6043      	str	r3, [r0, #4]
   85e34:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85e38:	60c1      	str	r1, [r0, #12]
   85e3a:	6088      	str	r0, [r1, #8]
   85e3c:	4630      	mov	r0, r6
   85e3e:	f000 f910 	bl	86062 <__malloc_unlock>
   85e42:	e0de      	b.n	86002 <_malloc_r+0x3f6>
   85e44:	68ed      	ldr	r5, [r5, #12]
   85e46:	e7cf      	b.n	85de8 <_malloc_r+0x1dc>
   85e48:	3001      	adds	r0, #1
   85e4a:	0781      	lsls	r1, r0, #30
   85e4c:	f105 0708 	add.w	r7, r5, #8
   85e50:	d1c9      	bne.n	85de6 <_malloc_r+0x1da>
   85e52:	4671      	mov	r1, lr
   85e54:	0795      	lsls	r5, r2, #30
   85e56:	d105      	bne.n	85e64 <_malloc_r+0x258>
   85e58:	4a18      	ldr	r2, [pc, #96]	; (85ebc <_malloc_r+0x2b0>)
   85e5a:	6855      	ldr	r5, [r2, #4]
   85e5c:	ea25 0503 	bic.w	r5, r5, r3
   85e60:	6055      	str	r5, [r2, #4]
   85e62:	e005      	b.n	85e70 <_malloc_r+0x264>
   85e64:	f1a1 0708 	sub.w	r7, r1, #8
   85e68:	6809      	ldr	r1, [r1, #0]
   85e6a:	3a01      	subs	r2, #1
   85e6c:	42b9      	cmp	r1, r7
   85e6e:	d0f1      	beq.n	85e54 <_malloc_r+0x248>
   85e70:	4f12      	ldr	r7, [pc, #72]	; (85ebc <_malloc_r+0x2b0>)
   85e72:	005b      	lsls	r3, r3, #1
   85e74:	687f      	ldr	r7, [r7, #4]
   85e76:	42bb      	cmp	r3, r7
   85e78:	d806      	bhi.n	85e88 <_malloc_r+0x27c>
   85e7a:	b12b      	cbz	r3, 85e88 <_malloc_r+0x27c>
   85e7c:	4602      	mov	r2, r0
   85e7e:	423b      	tst	r3, r7
   85e80:	d1ac      	bne.n	85ddc <_malloc_r+0x1d0>
   85e82:	3204      	adds	r2, #4
   85e84:	005b      	lsls	r3, r3, #1
   85e86:	e7fa      	b.n	85e7e <_malloc_r+0x272>
   85e88:	4b0c      	ldr	r3, [pc, #48]	; (85ebc <_malloc_r+0x2b0>)
   85e8a:	689f      	ldr	r7, [r3, #8]
   85e8c:	4619      	mov	r1, r3
   85e8e:	6878      	ldr	r0, [r7, #4]
   85e90:	f020 0903 	bic.w	r9, r0, #3
   85e94:	45a1      	cmp	r9, r4
   85e96:	d304      	bcc.n	85ea2 <_malloc_r+0x296>
   85e98:	ebc4 0009 	rsb	r0, r4, r9
   85e9c:	280f      	cmp	r0, #15
   85e9e:	f300 80a2 	bgt.w	85fe6 <_malloc_r+0x3da>
   85ea2:	4a07      	ldr	r2, [pc, #28]	; (85ec0 <_malloc_r+0x2b4>)
   85ea4:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   85ea8:	6815      	ldr	r5, [r2, #0]
   85eaa:	3301      	adds	r3, #1
   85eac:	eb07 0a09 	add.w	sl, r7, r9
   85eb0:	eb04 0805 	add.w	r8, r4, r5
   85eb4:	d106      	bne.n	85ec4 <_malloc_r+0x2b8>
   85eb6:	f108 0810 	add.w	r8, r8, #16
   85eba:	e00b      	b.n	85ed4 <_malloc_r+0x2c8>
   85ebc:	200704e4 	.word	0x200704e4
   85ec0:	2007aafc 	.word	0x2007aafc
   85ec4:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   85ec8:	f100 010f 	add.w	r1, r0, #15
   85ecc:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   85ed0:	f022 080f 	bic.w	r8, r2, #15
   85ed4:	4630      	mov	r0, r6
   85ed6:	4641      	mov	r1, r8
   85ed8:	f000 fa32 	bl	86340 <_sbrk_r>
   85edc:	1c42      	adds	r2, r0, #1
   85ede:	4605      	mov	r5, r0
   85ee0:	d071      	beq.n	85fc6 <_malloc_r+0x3ba>
   85ee2:	4550      	cmp	r0, sl
   85ee4:	d202      	bcs.n	85eec <_malloc_r+0x2e0>
   85ee6:	4b48      	ldr	r3, [pc, #288]	; (86008 <_malloc_r+0x3fc>)
   85ee8:	429f      	cmp	r7, r3
   85eea:	d16c      	bne.n	85fc6 <_malloc_r+0x3ba>
   85eec:	4847      	ldr	r0, [pc, #284]	; (8600c <_malloc_r+0x400>)
   85eee:	4555      	cmp	r5, sl
   85ef0:	6841      	ldr	r1, [r0, #4]
   85ef2:	4a45      	ldr	r2, [pc, #276]	; (86008 <_malloc_r+0x3fc>)
   85ef4:	eb08 0301 	add.w	r3, r8, r1
   85ef8:	6043      	str	r3, [r0, #4]
   85efa:	d107      	bne.n	85f0c <_malloc_r+0x300>
   85efc:	0529      	lsls	r1, r5, #20
   85efe:	d105      	bne.n	85f0c <_malloc_r+0x300>
   85f00:	6895      	ldr	r5, [r2, #8]
   85f02:	44c8      	add	r8, r9
   85f04:	f048 0001 	orr.w	r0, r8, #1
   85f08:	6068      	str	r0, [r5, #4]
   85f0a:	e051      	b.n	85fb0 <_malloc_r+0x3a4>
   85f0c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   85f10:	1c42      	adds	r2, r0, #1
   85f12:	d103      	bne.n	85f1c <_malloc_r+0x310>
   85f14:	4a3c      	ldr	r2, [pc, #240]	; (86008 <_malloc_r+0x3fc>)
   85f16:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   85f1a:	e005      	b.n	85f28 <_malloc_r+0x31c>
   85f1c:	ebca 0a05 	rsb	sl, sl, r5
   85f20:	eb03 010a 	add.w	r1, r3, sl
   85f24:	4b39      	ldr	r3, [pc, #228]	; (8600c <_malloc_r+0x400>)
   85f26:	6059      	str	r1, [r3, #4]
   85f28:	f015 0007 	ands.w	r0, r5, #7
   85f2c:	bf1c      	itt	ne
   85f2e:	f1c0 0008 	rsbne	r0, r0, #8
   85f32:	182d      	addne	r5, r5, r0
   85f34:	eb05 0c08 	add.w	ip, r5, r8
   85f38:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   85f3c:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   85f40:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   85f44:	4641      	mov	r1, r8
   85f46:	4630      	mov	r0, r6
   85f48:	f000 f9fa 	bl	86340 <_sbrk_r>
   85f4c:	4a2f      	ldr	r2, [pc, #188]	; (8600c <_malloc_r+0x400>)
   85f4e:	1c43      	adds	r3, r0, #1
   85f50:	6853      	ldr	r3, [r2, #4]
   85f52:	bf08      	it	eq
   85f54:	f04f 0800 	moveq.w	r8, #0
   85f58:	eb08 0103 	add.w	r1, r8, r3
   85f5c:	bf08      	it	eq
   85f5e:	4628      	moveq	r0, r5
   85f60:	6051      	str	r1, [r2, #4]
   85f62:	1b40      	subs	r0, r0, r5
   85f64:	4a28      	ldr	r2, [pc, #160]	; (86008 <_malloc_r+0x3fc>)
   85f66:	eb00 0308 	add.w	r3, r0, r8
   85f6a:	f043 0101 	orr.w	r1, r3, #1
   85f6e:	4297      	cmp	r7, r2
   85f70:	6095      	str	r5, [r2, #8]
   85f72:	6069      	str	r1, [r5, #4]
   85f74:	d01c      	beq.n	85fb0 <_malloc_r+0x3a4>
   85f76:	f1b9 0f0f 	cmp.w	r9, #15
   85f7a:	d802      	bhi.n	85f82 <_malloc_r+0x376>
   85f7c:	2201      	movs	r2, #1
   85f7e:	606a      	str	r2, [r5, #4]
   85f80:	e021      	b.n	85fc6 <_malloc_r+0x3ba>
   85f82:	687d      	ldr	r5, [r7, #4]
   85f84:	f1a9 090c 	sub.w	r9, r9, #12
   85f88:	f029 0907 	bic.w	r9, r9, #7
   85f8c:	f005 0201 	and.w	r2, r5, #1
   85f90:	2105      	movs	r1, #5
   85f92:	eb07 0309 	add.w	r3, r7, r9
   85f96:	ea49 0002 	orr.w	r0, r9, r2
   85f9a:	f1b9 0f0f 	cmp.w	r9, #15
   85f9e:	6078      	str	r0, [r7, #4]
   85fa0:	6059      	str	r1, [r3, #4]
   85fa2:	6099      	str	r1, [r3, #8]
   85fa4:	d904      	bls.n	85fb0 <_malloc_r+0x3a4>
   85fa6:	4630      	mov	r0, r6
   85fa8:	f107 0108 	add.w	r1, r7, #8
   85fac:	f7ff fb1a 	bl	855e4 <_free_r>
   85fb0:	4a16      	ldr	r2, [pc, #88]	; (8600c <_malloc_r+0x400>)
   85fb2:	6853      	ldr	r3, [r2, #4]
   85fb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   85fb6:	6b15      	ldr	r5, [r2, #48]	; 0x30
   85fb8:	428b      	cmp	r3, r1
   85fba:	bf88      	it	hi
   85fbc:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   85fbe:	42ab      	cmp	r3, r5
   85fc0:	bf84      	itt	hi
   85fc2:	4d12      	ldrhi	r5, [pc, #72]	; (8600c <_malloc_r+0x400>)
   85fc4:	632b      	strhi	r3, [r5, #48]	; 0x30
   85fc6:	4810      	ldr	r0, [pc, #64]	; (86008 <_malloc_r+0x3fc>)
   85fc8:	6882      	ldr	r2, [r0, #8]
   85fca:	6853      	ldr	r3, [r2, #4]
   85fcc:	f023 0103 	bic.w	r1, r3, #3
   85fd0:	42a1      	cmp	r1, r4
   85fd2:	ebc4 0001 	rsb	r0, r4, r1
   85fd6:	d301      	bcc.n	85fdc <_malloc_r+0x3d0>
   85fd8:	280f      	cmp	r0, #15
   85fda:	dc04      	bgt.n	85fe6 <_malloc_r+0x3da>
   85fdc:	4630      	mov	r0, r6
   85fde:	f000 f840 	bl	86062 <__malloc_unlock>
   85fe2:	2500      	movs	r5, #0
   85fe4:	e00d      	b.n	86002 <_malloc_r+0x3f6>
   85fe6:	4a08      	ldr	r2, [pc, #32]	; (86008 <_malloc_r+0x3fc>)
   85fe8:	f044 0301 	orr.w	r3, r4, #1
   85fec:	6895      	ldr	r5, [r2, #8]
   85fee:	f040 0101 	orr.w	r1, r0, #1
   85ff2:	192c      	adds	r4, r5, r4
   85ff4:	606b      	str	r3, [r5, #4]
   85ff6:	6094      	str	r4, [r2, #8]
   85ff8:	6061      	str	r1, [r4, #4]
   85ffa:	4630      	mov	r0, r6
   85ffc:	f000 f831 	bl	86062 <__malloc_unlock>
   86000:	3508      	adds	r5, #8
   86002:	4628      	mov	r0, r5
   86004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86008:	200704e4 	.word	0x200704e4
   8600c:	2007aafc 	.word	0x2007aafc

00086010 <memchr>:
   86010:	b510      	push	{r4, lr}
   86012:	b2c9      	uxtb	r1, r1
   86014:	4603      	mov	r3, r0
   86016:	1882      	adds	r2, r0, r2
   86018:	4293      	cmp	r3, r2
   8601a:	4618      	mov	r0, r3
   8601c:	d004      	beq.n	86028 <memchr+0x18>
   8601e:	7804      	ldrb	r4, [r0, #0]
   86020:	3301      	adds	r3, #1
   86022:	428c      	cmp	r4, r1
   86024:	d1f8      	bne.n	86018 <memchr+0x8>
   86026:	e000      	b.n	8602a <memchr+0x1a>
   86028:	2000      	movs	r0, #0
   8602a:	bd10      	pop	{r4, pc}

0008602c <memmove>:
   8602c:	4281      	cmp	r1, r0
   8602e:	b570      	push	{r4, r5, r6, lr}
   86030:	d20e      	bcs.n	86050 <memmove+0x24>
   86032:	188c      	adds	r4, r1, r2
   86034:	42a0      	cmp	r0, r4
   86036:	d20b      	bcs.n	86050 <memmove+0x24>
   86038:	1885      	adds	r5, r0, r2
   8603a:	4613      	mov	r3, r2
   8603c:	f113 33ff 	adds.w	r3, r3, #4294967295
   86040:	d305      	bcc.n	8604e <memmove+0x22>
   86042:	4251      	negs	r1, r2
   86044:	1866      	adds	r6, r4, r1
   86046:	5cf6      	ldrb	r6, [r6, r3]
   86048:	1869      	adds	r1, r5, r1
   8604a:	54ce      	strb	r6, [r1, r3]
   8604c:	e7f6      	b.n	8603c <memmove+0x10>
   8604e:	bd70      	pop	{r4, r5, r6, pc}
   86050:	2300      	movs	r3, #0
   86052:	4293      	cmp	r3, r2
   86054:	d003      	beq.n	8605e <memmove+0x32>
   86056:	5ccc      	ldrb	r4, [r1, r3]
   86058:	54c4      	strb	r4, [r0, r3]
   8605a:	3301      	adds	r3, #1
   8605c:	e7f9      	b.n	86052 <memmove+0x26>
   8605e:	bd70      	pop	{r4, r5, r6, pc}

00086060 <__malloc_lock>:
   86060:	4770      	bx	lr

00086062 <__malloc_unlock>:
   86062:	4770      	bx	lr

00086064 <_realloc_r>:
   86064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86068:	4681      	mov	r9, r0
   8606a:	4616      	mov	r6, r2
   8606c:	460c      	mov	r4, r1
   8606e:	b921      	cbnz	r1, 8607a <_realloc_r+0x16>
   86070:	4611      	mov	r1, r2
   86072:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86076:	f7ff bdc9 	b.w	85c0c <_malloc_r>
   8607a:	f7ff fff1 	bl	86060 <__malloc_lock>
   8607e:	f106 070b 	add.w	r7, r6, #11
   86082:	f854 5c04 	ldr.w	r5, [r4, #-4]
   86086:	2f16      	cmp	r7, #22
   86088:	f1a4 0b08 	sub.w	fp, r4, #8
   8608c:	f025 0803 	bic.w	r8, r5, #3
   86090:	d903      	bls.n	8609a <_realloc_r+0x36>
   86092:	f037 0707 	bics.w	r7, r7, #7
   86096:	d501      	bpl.n	8609c <_realloc_r+0x38>
   86098:	e002      	b.n	860a0 <_realloc_r+0x3c>
   8609a:	2710      	movs	r7, #16
   8609c:	42b7      	cmp	r7, r6
   8609e:	d204      	bcs.n	860aa <_realloc_r+0x46>
   860a0:	200c      	movs	r0, #12
   860a2:	f8c9 0000 	str.w	r0, [r9]
   860a6:	2600      	movs	r6, #0
   860a8:	e145      	b.n	86336 <_realloc_r+0x2d2>
   860aa:	45b8      	cmp	r8, r7
   860ac:	f280 811a 	bge.w	862e4 <_realloc_r+0x280>
   860b0:	4aa2      	ldr	r2, [pc, #648]	; (8633c <_realloc_r+0x2d8>)
   860b2:	eb0b 0308 	add.w	r3, fp, r8
   860b6:	6891      	ldr	r1, [r2, #8]
   860b8:	428b      	cmp	r3, r1
   860ba:	d006      	beq.n	860ca <_realloc_r+0x66>
   860bc:	6858      	ldr	r0, [r3, #4]
   860be:	f020 0201 	bic.w	r2, r0, #1
   860c2:	1898      	adds	r0, r3, r2
   860c4:	6842      	ldr	r2, [r0, #4]
   860c6:	07d0      	lsls	r0, r2, #31
   860c8:	d426      	bmi.n	86118 <_realloc_r+0xb4>
   860ca:	685a      	ldr	r2, [r3, #4]
   860cc:	428b      	cmp	r3, r1
   860ce:	f022 0003 	bic.w	r0, r2, #3
   860d2:	eb00 0a08 	add.w	sl, r0, r8
   860d6:	d118      	bne.n	8610a <_realloc_r+0xa6>
   860d8:	f107 0210 	add.w	r2, r7, #16
   860dc:	4592      	cmp	sl, r2
   860de:	db1d      	blt.n	8611c <_realloc_r+0xb8>
   860e0:	ebc7 0a0a 	rsb	sl, r7, sl
   860e4:	eb0b 0507 	add.w	r5, fp, r7
   860e8:	f04a 0101 	orr.w	r1, sl, #1
   860ec:	6069      	str	r1, [r5, #4]
   860ee:	f854 2c04 	ldr.w	r2, [r4, #-4]
   860f2:	4e92      	ldr	r6, [pc, #584]	; (8633c <_realloc_r+0x2d8>)
   860f4:	f002 0301 	and.w	r3, r2, #1
   860f8:	431f      	orrs	r7, r3
   860fa:	60b5      	str	r5, [r6, #8]
   860fc:	f844 7c04 	str.w	r7, [r4, #-4]
   86100:	4648      	mov	r0, r9
   86102:	f7ff ffae 	bl	86062 <__malloc_unlock>
   86106:	4626      	mov	r6, r4
   86108:	e115      	b.n	86336 <_realloc_r+0x2d2>
   8610a:	45ba      	cmp	sl, r7
   8610c:	db06      	blt.n	8611c <_realloc_r+0xb8>
   8610e:	68dd      	ldr	r5, [r3, #12]
   86110:	689e      	ldr	r6, [r3, #8]
   86112:	60f5      	str	r5, [r6, #12]
   86114:	60ae      	str	r6, [r5, #8]
   86116:	e0e6      	b.n	862e6 <_realloc_r+0x282>
   86118:	2000      	movs	r0, #0
   8611a:	4603      	mov	r3, r0
   8611c:	07ea      	lsls	r2, r5, #31
   8611e:	f100 8091 	bmi.w	86244 <_realloc_r+0x1e0>
   86122:	f854 5c08 	ldr.w	r5, [r4, #-8]
   86126:	ebc5 050b 	rsb	r5, r5, fp
   8612a:	686a      	ldr	r2, [r5, #4]
   8612c:	f022 0203 	bic.w	r2, r2, #3
   86130:	2b00      	cmp	r3, #0
   86132:	d051      	beq.n	861d8 <_realloc_r+0x174>
   86134:	eb02 0a08 	add.w	sl, r2, r8
   86138:	428b      	cmp	r3, r1
   8613a:	4482      	add	sl, r0
   8613c:	d145      	bne.n	861ca <_realloc_r+0x166>
   8613e:	f107 0310 	add.w	r3, r7, #16
   86142:	459a      	cmp	sl, r3
   86144:	db48      	blt.n	861d8 <_realloc_r+0x174>
   86146:	462e      	mov	r6, r5
   86148:	68e9      	ldr	r1, [r5, #12]
   8614a:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8614e:	f1a8 0204 	sub.w	r2, r8, #4
   86152:	2a24      	cmp	r2, #36	; 0x24
   86154:	60d9      	str	r1, [r3, #12]
   86156:	608b      	str	r3, [r1, #8]
   86158:	d825      	bhi.n	861a6 <_realloc_r+0x142>
   8615a:	2a13      	cmp	r2, #19
   8615c:	d91b      	bls.n	86196 <_realloc_r+0x132>
   8615e:	6821      	ldr	r1, [r4, #0]
   86160:	2a1b      	cmp	r2, #27
   86162:	60a9      	str	r1, [r5, #8]
   86164:	6863      	ldr	r3, [r4, #4]
   86166:	60eb      	str	r3, [r5, #12]
   86168:	d803      	bhi.n	86172 <_realloc_r+0x10e>
   8616a:	f105 0010 	add.w	r0, r5, #16
   8616e:	3408      	adds	r4, #8
   86170:	e012      	b.n	86198 <_realloc_r+0x134>
   86172:	68a0      	ldr	r0, [r4, #8]
   86174:	2a24      	cmp	r2, #36	; 0x24
   86176:	6128      	str	r0, [r5, #16]
   86178:	68e1      	ldr	r1, [r4, #12]
   8617a:	6169      	str	r1, [r5, #20]
   8617c:	d003      	beq.n	86186 <_realloc_r+0x122>
   8617e:	f105 0018 	add.w	r0, r5, #24
   86182:	3410      	adds	r4, #16
   86184:	e008      	b.n	86198 <_realloc_r+0x134>
   86186:	6922      	ldr	r2, [r4, #16]
   86188:	f105 0020 	add.w	r0, r5, #32
   8618c:	61aa      	str	r2, [r5, #24]
   8618e:	6963      	ldr	r3, [r4, #20]
   86190:	3418      	adds	r4, #24
   86192:	61eb      	str	r3, [r5, #28]
   86194:	e000      	b.n	86198 <_realloc_r+0x134>
   86196:	4630      	mov	r0, r6
   86198:	6821      	ldr	r1, [r4, #0]
   8619a:	6001      	str	r1, [r0, #0]
   8619c:	6862      	ldr	r2, [r4, #4]
   8619e:	6042      	str	r2, [r0, #4]
   861a0:	68a3      	ldr	r3, [r4, #8]
   861a2:	6083      	str	r3, [r0, #8]
   861a4:	e003      	b.n	861ae <_realloc_r+0x14a>
   861a6:	4630      	mov	r0, r6
   861a8:	4621      	mov	r1, r4
   861aa:	f7ff ff3f 	bl	8602c <memmove>
   861ae:	ebc7 0a0a 	rsb	sl, r7, sl
   861b2:	19e8      	adds	r0, r5, r7
   861b4:	f04a 0201 	orr.w	r2, sl, #1
   861b8:	6042      	str	r2, [r0, #4]
   861ba:	686b      	ldr	r3, [r5, #4]
   861bc:	495f      	ldr	r1, [pc, #380]	; (8633c <_realloc_r+0x2d8>)
   861be:	6088      	str	r0, [r1, #8]
   861c0:	f003 0001 	and.w	r0, r3, #1
   861c4:	4307      	orrs	r7, r0
   861c6:	606f      	str	r7, [r5, #4]
   861c8:	e088      	b.n	862dc <_realloc_r+0x278>
   861ca:	45ba      	cmp	sl, r7
   861cc:	db04      	blt.n	861d8 <_realloc_r+0x174>
   861ce:	68d9      	ldr	r1, [r3, #12]
   861d0:	6898      	ldr	r0, [r3, #8]
   861d2:	60c1      	str	r1, [r0, #12]
   861d4:	6088      	str	r0, [r1, #8]
   861d6:	e003      	b.n	861e0 <_realloc_r+0x17c>
   861d8:	eb02 0a08 	add.w	sl, r2, r8
   861dc:	45ba      	cmp	sl, r7
   861de:	db31      	blt.n	86244 <_realloc_r+0x1e0>
   861e0:	4628      	mov	r0, r5
   861e2:	68eb      	ldr	r3, [r5, #12]
   861e4:	f850 1f08 	ldr.w	r1, [r0, #8]!
   861e8:	f1a8 0204 	sub.w	r2, r8, #4
   861ec:	2a24      	cmp	r2, #36	; 0x24
   861ee:	60cb      	str	r3, [r1, #12]
   861f0:	6099      	str	r1, [r3, #8]
   861f2:	d823      	bhi.n	8623c <_realloc_r+0x1d8>
   861f4:	2a13      	cmp	r2, #19
   861f6:	d91a      	bls.n	8622e <_realloc_r+0x1ca>
   861f8:	6820      	ldr	r0, [r4, #0]
   861fa:	2a1b      	cmp	r2, #27
   861fc:	60a8      	str	r0, [r5, #8]
   861fe:	6866      	ldr	r6, [r4, #4]
   86200:	60ee      	str	r6, [r5, #12]
   86202:	d803      	bhi.n	8620c <_realloc_r+0x1a8>
   86204:	f105 0010 	add.w	r0, r5, #16
   86208:	3408      	adds	r4, #8
   8620a:	e010      	b.n	8622e <_realloc_r+0x1ca>
   8620c:	68a3      	ldr	r3, [r4, #8]
   8620e:	2a24      	cmp	r2, #36	; 0x24
   86210:	612b      	str	r3, [r5, #16]
   86212:	68e1      	ldr	r1, [r4, #12]
   86214:	6169      	str	r1, [r5, #20]
   86216:	d003      	beq.n	86220 <_realloc_r+0x1bc>
   86218:	f105 0018 	add.w	r0, r5, #24
   8621c:	3410      	adds	r4, #16
   8621e:	e006      	b.n	8622e <_realloc_r+0x1ca>
   86220:	6922      	ldr	r2, [r4, #16]
   86222:	61aa      	str	r2, [r5, #24]
   86224:	6960      	ldr	r0, [r4, #20]
   86226:	3418      	adds	r4, #24
   86228:	61e8      	str	r0, [r5, #28]
   8622a:	f105 0020 	add.w	r0, r5, #32
   8622e:	6826      	ldr	r6, [r4, #0]
   86230:	6006      	str	r6, [r0, #0]
   86232:	6863      	ldr	r3, [r4, #4]
   86234:	6043      	str	r3, [r0, #4]
   86236:	68a1      	ldr	r1, [r4, #8]
   86238:	6081      	str	r1, [r0, #8]
   8623a:	e055      	b.n	862e8 <_realloc_r+0x284>
   8623c:	4621      	mov	r1, r4
   8623e:	f7ff fef5 	bl	8602c <memmove>
   86242:	e051      	b.n	862e8 <_realloc_r+0x284>
   86244:	4631      	mov	r1, r6
   86246:	4648      	mov	r0, r9
   86248:	f7ff fce0 	bl	85c0c <_malloc_r>
   8624c:	4606      	mov	r6, r0
   8624e:	2800      	cmp	r0, #0
   86250:	d044      	beq.n	862dc <_realloc_r+0x278>
   86252:	f854 1c04 	ldr.w	r1, [r4, #-4]
   86256:	f1a0 0208 	sub.w	r2, r0, #8
   8625a:	f021 0301 	bic.w	r3, r1, #1
   8625e:	eb0b 0103 	add.w	r1, fp, r3
   86262:	428a      	cmp	r2, r1
   86264:	d106      	bne.n	86274 <_realloc_r+0x210>
   86266:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8626a:	f026 0503 	bic.w	r5, r6, #3
   8626e:	eb05 0a08 	add.w	sl, r5, r8
   86272:	e038      	b.n	862e6 <_realloc_r+0x282>
   86274:	f1a8 0204 	sub.w	r2, r8, #4
   86278:	2a24      	cmp	r2, #36	; 0x24
   8627a:	d828      	bhi.n	862ce <_realloc_r+0x26a>
   8627c:	2a13      	cmp	r2, #19
   8627e:	d91e      	bls.n	862be <_realloc_r+0x25a>
   86280:	6823      	ldr	r3, [r4, #0]
   86282:	2a1b      	cmp	r2, #27
   86284:	6003      	str	r3, [r0, #0]
   86286:	6861      	ldr	r1, [r4, #4]
   86288:	6041      	str	r1, [r0, #4]
   8628a:	d804      	bhi.n	86296 <_realloc_r+0x232>
   8628c:	f100 0008 	add.w	r0, r0, #8
   86290:	f104 0208 	add.w	r2, r4, #8
   86294:	e014      	b.n	862c0 <_realloc_r+0x25c>
   86296:	68a0      	ldr	r0, [r4, #8]
   86298:	2a24      	cmp	r2, #36	; 0x24
   8629a:	60b0      	str	r0, [r6, #8]
   8629c:	68e3      	ldr	r3, [r4, #12]
   8629e:	60f3      	str	r3, [r6, #12]
   862a0:	d004      	beq.n	862ac <_realloc_r+0x248>
   862a2:	f106 0010 	add.w	r0, r6, #16
   862a6:	f104 0210 	add.w	r2, r4, #16
   862aa:	e009      	b.n	862c0 <_realloc_r+0x25c>
   862ac:	6922      	ldr	r2, [r4, #16]
   862ae:	f106 0018 	add.w	r0, r6, #24
   862b2:	6132      	str	r2, [r6, #16]
   862b4:	6961      	ldr	r1, [r4, #20]
   862b6:	f104 0218 	add.w	r2, r4, #24
   862ba:	6171      	str	r1, [r6, #20]
   862bc:	e000      	b.n	862c0 <_realloc_r+0x25c>
   862be:	4622      	mov	r2, r4
   862c0:	6813      	ldr	r3, [r2, #0]
   862c2:	6003      	str	r3, [r0, #0]
   862c4:	6851      	ldr	r1, [r2, #4]
   862c6:	6041      	str	r1, [r0, #4]
   862c8:	6892      	ldr	r2, [r2, #8]
   862ca:	6082      	str	r2, [r0, #8]
   862cc:	e002      	b.n	862d4 <_realloc_r+0x270>
   862ce:	4621      	mov	r1, r4
   862d0:	f7ff feac 	bl	8602c <memmove>
   862d4:	4648      	mov	r0, r9
   862d6:	4621      	mov	r1, r4
   862d8:	f7ff f984 	bl	855e4 <_free_r>
   862dc:	4648      	mov	r0, r9
   862de:	f7ff fec0 	bl	86062 <__malloc_unlock>
   862e2:	e028      	b.n	86336 <_realloc_r+0x2d2>
   862e4:	46c2      	mov	sl, r8
   862e6:	465d      	mov	r5, fp
   862e8:	ebc7 000a 	rsb	r0, r7, sl
   862ec:	280f      	cmp	r0, #15
   862ee:	686a      	ldr	r2, [r5, #4]
   862f0:	d911      	bls.n	86316 <_realloc_r+0x2b2>
   862f2:	f002 0601 	and.w	r6, r2, #1
   862f6:	19e9      	adds	r1, r5, r7
   862f8:	f040 0301 	orr.w	r3, r0, #1
   862fc:	4337      	orrs	r7, r6
   862fe:	606f      	str	r7, [r5, #4]
   86300:	1808      	adds	r0, r1, r0
   86302:	604b      	str	r3, [r1, #4]
   86304:	6842      	ldr	r2, [r0, #4]
   86306:	3108      	adds	r1, #8
   86308:	f042 0601 	orr.w	r6, r2, #1
   8630c:	6046      	str	r6, [r0, #4]
   8630e:	4648      	mov	r0, r9
   86310:	f7ff f968 	bl	855e4 <_free_r>
   86314:	e00a      	b.n	8632c <_realloc_r+0x2c8>
   86316:	f002 0601 	and.w	r6, r2, #1
   8631a:	ea4a 0306 	orr.w	r3, sl, r6
   8631e:	606b      	str	r3, [r5, #4]
   86320:	eb05 010a 	add.w	r1, r5, sl
   86324:	6848      	ldr	r0, [r1, #4]
   86326:	f040 0201 	orr.w	r2, r0, #1
   8632a:	604a      	str	r2, [r1, #4]
   8632c:	4648      	mov	r0, r9
   8632e:	f7ff fe98 	bl	86062 <__malloc_unlock>
   86332:	f105 0608 	add.w	r6, r5, #8
   86336:	4630      	mov	r0, r6
   86338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8633c:	200704e4 	.word	0x200704e4

00086340 <_sbrk_r>:
   86340:	b538      	push	{r3, r4, r5, lr}
   86342:	4c06      	ldr	r4, [pc, #24]	; (8635c <_sbrk_r+0x1c>)
   86344:	2300      	movs	r3, #0
   86346:	4605      	mov	r5, r0
   86348:	4608      	mov	r0, r1
   8634a:	6023      	str	r3, [r4, #0]
   8634c:	f7fb f91a 	bl	81584 <_sbrk>
   86350:	1c43      	adds	r3, r0, #1
   86352:	d102      	bne.n	8635a <_sbrk_r+0x1a>
   86354:	6821      	ldr	r1, [r4, #0]
   86356:	b101      	cbz	r1, 8635a <_sbrk_r+0x1a>
   86358:	6029      	str	r1, [r5, #0]
   8635a:	bd38      	pop	{r3, r4, r5, pc}
   8635c:	2007ab48 	.word	0x2007ab48

00086360 <__sread>:
   86360:	b510      	push	{r4, lr}
   86362:	460c      	mov	r4, r1
   86364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86368:	f000 fe16 	bl	86f98 <_read_r>
   8636c:	2800      	cmp	r0, #0
   8636e:	db03      	blt.n	86378 <__sread+0x18>
   86370:	6d22      	ldr	r2, [r4, #80]	; 0x50
   86372:	1813      	adds	r3, r2, r0
   86374:	6523      	str	r3, [r4, #80]	; 0x50
   86376:	bd10      	pop	{r4, pc}
   86378:	89a3      	ldrh	r3, [r4, #12]
   8637a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   8637e:	81a1      	strh	r1, [r4, #12]
   86380:	bd10      	pop	{r4, pc}

00086382 <__seofread>:
   86382:	2000      	movs	r0, #0
   86384:	4770      	bx	lr

00086386 <__swrite>:
   86386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8638a:	461d      	mov	r5, r3
   8638c:	898b      	ldrh	r3, [r1, #12]
   8638e:	460c      	mov	r4, r1
   86390:	f403 7180 	and.w	r1, r3, #256	; 0x100
   86394:	4616      	mov	r6, r2
   86396:	b20a      	sxth	r2, r1
   86398:	4607      	mov	r7, r0
   8639a:	b12a      	cbz	r2, 863a8 <__swrite+0x22>
   8639c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   863a0:	2200      	movs	r2, #0
   863a2:	2302      	movs	r3, #2
   863a4:	f000 fde6 	bl	86f74 <_lseek_r>
   863a8:	89a0      	ldrh	r0, [r4, #12]
   863aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   863ae:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   863b2:	81a3      	strh	r3, [r4, #12]
   863b4:	4638      	mov	r0, r7
   863b6:	4632      	mov	r2, r6
   863b8:	462b      	mov	r3, r5
   863ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   863be:	f000 bd4b 	b.w	86e58 <_write_r>

000863c2 <__sseek>:
   863c2:	b510      	push	{r4, lr}
   863c4:	460c      	mov	r4, r1
   863c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   863ca:	f000 fdd3 	bl	86f74 <_lseek_r>
   863ce:	1c43      	adds	r3, r0, #1
   863d0:	89a3      	ldrh	r3, [r4, #12]
   863d2:	d103      	bne.n	863dc <__sseek+0x1a>
   863d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   863d8:	81a2      	strh	r2, [r4, #12]
   863da:	bd10      	pop	{r4, pc}
   863dc:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   863e0:	81a1      	strh	r1, [r4, #12]
   863e2:	6520      	str	r0, [r4, #80]	; 0x50
   863e4:	bd10      	pop	{r4, pc}

000863e6 <__sclose>:
   863e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   863ea:	f000 bd47 	b.w	86e7c <_close_r>

000863ee <strcmp>:
   863ee:	f810 2b01 	ldrb.w	r2, [r0], #1
   863f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   863f6:	2a01      	cmp	r2, #1
   863f8:	bf28      	it	cs
   863fa:	429a      	cmpcs	r2, r3
   863fc:	d0f7      	beq.n	863ee <strcmp>
   863fe:	eba2 0003 	sub.w	r0, r2, r3
   86402:	4770      	bx	lr

00086404 <__ssprint_r>:
   86404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86408:	4607      	mov	r7, r0
   8640a:	6890      	ldr	r0, [r2, #8]
   8640c:	460c      	mov	r4, r1
   8640e:	4615      	mov	r5, r2
   86410:	f8d2 8000 	ldr.w	r8, [r2]
   86414:	b908      	cbnz	r0, 8641a <__ssprint_r+0x16>
   86416:	6050      	str	r0, [r2, #4]
   86418:	e06f      	b.n	864fa <__ssprint_r+0xf6>
   8641a:	f04f 0b00 	mov.w	fp, #0
   8641e:	465e      	mov	r6, fp
   86420:	b936      	cbnz	r6, 86430 <__ssprint_r+0x2c>
   86422:	f8d8 b000 	ldr.w	fp, [r8]
   86426:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8642a:	f108 0808 	add.w	r8, r8, #8
   8642e:	e7f7      	b.n	86420 <__ssprint_r+0x1c>
   86430:	68a3      	ldr	r3, [r4, #8]
   86432:	429e      	cmp	r6, r3
   86434:	d34c      	bcc.n	864d0 <__ssprint_r+0xcc>
   86436:	89a2      	ldrh	r2, [r4, #12]
   86438:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8643c:	d046      	beq.n	864cc <__ssprint_r+0xc8>
   8643e:	6823      	ldr	r3, [r4, #0]
   86440:	6960      	ldr	r0, [r4, #20]
   86442:	6921      	ldr	r1, [r4, #16]
   86444:	f04f 0a03 	mov.w	sl, #3
   86448:	ebc1 0903 	rsb	r9, r1, r3
   8644c:	fb0a f300 	mul.w	r3, sl, r0
   86450:	2002      	movs	r0, #2
   86452:	fb93 faf0 	sdiv	sl, r3, r0
   86456:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8645a:	f109 0301 	add.w	r3, r9, #1
   8645e:	1998      	adds	r0, r3, r6
   86460:	b213      	sxth	r3, r2
   86462:	4582      	cmp	sl, r0
   86464:	bf38      	it	cc
   86466:	4682      	movcc	sl, r0
   86468:	4638      	mov	r0, r7
   8646a:	b183      	cbz	r3, 8648e <__ssprint_r+0x8a>
   8646c:	4651      	mov	r1, sl
   8646e:	f7ff fbcd 	bl	85c0c <_malloc_r>
   86472:	b1a8      	cbz	r0, 864a0 <__ssprint_r+0x9c>
   86474:	6921      	ldr	r1, [r4, #16]
   86476:	464a      	mov	r2, r9
   86478:	9001      	str	r0, [sp, #4]
   8647a:	f7fd fc4b 	bl	83d14 <memcpy>
   8647e:	89a0      	ldrh	r0, [r4, #12]
   86480:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   86484:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   86488:	81a1      	strh	r1, [r4, #12]
   8648a:	9901      	ldr	r1, [sp, #4]
   8648c:	e014      	b.n	864b8 <__ssprint_r+0xb4>
   8648e:	4652      	mov	r2, sl
   86490:	f7ff fde8 	bl	86064 <_realloc_r>
   86494:	4601      	mov	r1, r0
   86496:	b978      	cbnz	r0, 864b8 <__ssprint_r+0xb4>
   86498:	4638      	mov	r0, r7
   8649a:	6921      	ldr	r1, [r4, #16]
   8649c:	f7ff f8a2 	bl	855e4 <_free_r>
   864a0:	89a3      	ldrh	r3, [r4, #12]
   864a2:	200c      	movs	r0, #12
   864a4:	2100      	movs	r1, #0
   864a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   864aa:	6038      	str	r0, [r7, #0]
   864ac:	81a2      	strh	r2, [r4, #12]
   864ae:	f04f 30ff 	mov.w	r0, #4294967295
   864b2:	60a9      	str	r1, [r5, #8]
   864b4:	6069      	str	r1, [r5, #4]
   864b6:	e020      	b.n	864fa <__ssprint_r+0xf6>
   864b8:	eb01 0309 	add.w	r3, r1, r9
   864bc:	ebc9 000a 	rsb	r0, r9, sl
   864c0:	6023      	str	r3, [r4, #0]
   864c2:	6121      	str	r1, [r4, #16]
   864c4:	f8c4 a014 	str.w	sl, [r4, #20]
   864c8:	4633      	mov	r3, r6
   864ca:	60a0      	str	r0, [r4, #8]
   864cc:	429e      	cmp	r6, r3
   864ce:	d200      	bcs.n	864d2 <__ssprint_r+0xce>
   864d0:	4633      	mov	r3, r6
   864d2:	461a      	mov	r2, r3
   864d4:	4659      	mov	r1, fp
   864d6:	6820      	ldr	r0, [r4, #0]
   864d8:	9301      	str	r3, [sp, #4]
   864da:	f7ff fda7 	bl	8602c <memmove>
   864de:	68a2      	ldr	r2, [r4, #8]
   864e0:	9901      	ldr	r1, [sp, #4]
   864e2:	6823      	ldr	r3, [r4, #0]
   864e4:	1a50      	subs	r0, r2, r1
   864e6:	185a      	adds	r2, r3, r1
   864e8:	68a9      	ldr	r1, [r5, #8]
   864ea:	60a0      	str	r0, [r4, #8]
   864ec:	1b8e      	subs	r6, r1, r6
   864ee:	6022      	str	r2, [r4, #0]
   864f0:	60ae      	str	r6, [r5, #8]
   864f2:	2e00      	cmp	r6, #0
   864f4:	d195      	bne.n	86422 <__ssprint_r+0x1e>
   864f6:	606e      	str	r6, [r5, #4]
   864f8:	4630      	mov	r0, r6
   864fa:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000864fe <_svfiprintf_r>:
   864fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86502:	461e      	mov	r6, r3
   86504:	898b      	ldrh	r3, [r1, #12]
   86506:	4689      	mov	r9, r1
   86508:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8650c:	4614      	mov	r4, r2
   8650e:	b20a      	sxth	r2, r1
   86510:	b0a9      	sub	sp, #164	; 0xa4
   86512:	4683      	mov	fp, r0
   86514:	b19a      	cbz	r2, 8653e <_svfiprintf_r+0x40>
   86516:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8651a:	b983      	cbnz	r3, 8653e <_svfiprintf_r+0x40>
   8651c:	2140      	movs	r1, #64	; 0x40
   8651e:	f7ff fb75 	bl	85c0c <_malloc_r>
   86522:	f8c9 0000 	str.w	r0, [r9]
   86526:	f8c9 0010 	str.w	r0, [r9, #16]
   8652a:	b928      	cbnz	r0, 86538 <_svfiprintf_r+0x3a>
   8652c:	220c      	movs	r2, #12
   8652e:	f8cb 2000 	str.w	r2, [fp]
   86532:	f04f 30ff 	mov.w	r0, #4294967295
   86536:	e3db      	b.n	86cf0 <_svfiprintf_r+0x7f2>
   86538:	2040      	movs	r0, #64	; 0x40
   8653a:	f8c9 0014 	str.w	r0, [r9, #20]
   8653e:	2100      	movs	r1, #0
   86540:	ad18      	add	r5, sp, #96	; 0x60
   86542:	950b      	str	r5, [sp, #44]	; 0x2c
   86544:	910d      	str	r1, [sp, #52]	; 0x34
   86546:	910c      	str	r1, [sp, #48]	; 0x30
   86548:	9401      	str	r4, [sp, #4]
   8654a:	9105      	str	r1, [sp, #20]
   8654c:	9104      	str	r1, [sp, #16]
   8654e:	46a8      	mov	r8, r5
   86550:	9b01      	ldr	r3, [sp, #4]
   86552:	461c      	mov	r4, r3
   86554:	f813 2b01 	ldrb.w	r2, [r3], #1
   86558:	b91a      	cbnz	r2, 86562 <_svfiprintf_r+0x64>
   8655a:	9801      	ldr	r0, [sp, #4]
   8655c:	1a25      	subs	r5, r4, r0
   8655e:	d103      	bne.n	86568 <_svfiprintf_r+0x6a>
   86560:	e01d      	b.n	8659e <_svfiprintf_r+0xa0>
   86562:	2a25      	cmp	r2, #37	; 0x25
   86564:	d1f5      	bne.n	86552 <_svfiprintf_r+0x54>
   86566:	e7f8      	b.n	8655a <_svfiprintf_r+0x5c>
   86568:	9a01      	ldr	r2, [sp, #4]
   8656a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8656c:	e888 0024 	stmia.w	r8, {r2, r5}
   86570:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86572:	194b      	adds	r3, r1, r5
   86574:	1c50      	adds	r0, r2, #1
   86576:	2807      	cmp	r0, #7
   86578:	930d      	str	r3, [sp, #52]	; 0x34
   8657a:	900c      	str	r0, [sp, #48]	; 0x30
   8657c:	dc02      	bgt.n	86584 <_svfiprintf_r+0x86>
   8657e:	f108 0808 	add.w	r8, r8, #8
   86582:	e009      	b.n	86598 <_svfiprintf_r+0x9a>
   86584:	4658      	mov	r0, fp
   86586:	4649      	mov	r1, r9
   86588:	aa0b      	add	r2, sp, #44	; 0x2c
   8658a:	f7ff ff3b 	bl	86404 <__ssprint_r>
   8658e:	2800      	cmp	r0, #0
   86590:	f040 83a3 	bne.w	86cda <_svfiprintf_r+0x7dc>
   86594:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86598:	9904      	ldr	r1, [sp, #16]
   8659a:	194b      	adds	r3, r1, r5
   8659c:	9304      	str	r3, [sp, #16]
   8659e:	7822      	ldrb	r2, [r4, #0]
   865a0:	2a00      	cmp	r2, #0
   865a2:	f000 8393 	beq.w	86ccc <_svfiprintf_r+0x7ce>
   865a6:	2200      	movs	r2, #0
   865a8:	3401      	adds	r4, #1
   865aa:	9401      	str	r4, [sp, #4]
   865ac:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   865b0:	f04f 3cff 	mov.w	ip, #4294967295
   865b4:	9203      	str	r2, [sp, #12]
   865b6:	4617      	mov	r7, r2
   865b8:	9801      	ldr	r0, [sp, #4]
   865ba:	f810 3b01 	ldrb.w	r3, [r0], #1
   865be:	9001      	str	r0, [sp, #4]
   865c0:	2b63      	cmp	r3, #99	; 0x63
   865c2:	f000 80b3 	beq.w	8672c <_svfiprintf_r+0x22e>
   865c6:	dc33      	bgt.n	86630 <_svfiprintf_r+0x132>
   865c8:	2b39      	cmp	r3, #57	; 0x39
   865ca:	dc1a      	bgt.n	86602 <_svfiprintf_r+0x104>
   865cc:	2b31      	cmp	r3, #49	; 0x31
   865ce:	f280 8091 	bge.w	866f4 <_svfiprintf_r+0x1f6>
   865d2:	2b2b      	cmp	r3, #43	; 0x2b
   865d4:	d101      	bne.n	865da <_svfiprintf_r+0xdc>
   865d6:	461a      	mov	r2, r3
   865d8:	e7ee      	b.n	865b8 <_svfiprintf_r+0xba>
   865da:	dc0a      	bgt.n	865f2 <_svfiprintf_r+0xf4>
   865dc:	2b23      	cmp	r3, #35	; 0x23
   865de:	d055      	beq.n	8668c <_svfiprintf_r+0x18e>
   865e0:	2b2a      	cmp	r3, #42	; 0x2a
   865e2:	d056      	beq.n	86692 <_svfiprintf_r+0x194>
   865e4:	2b20      	cmp	r3, #32
   865e6:	f040 81f6 	bne.w	869d6 <_svfiprintf_r+0x4d8>
   865ea:	2a00      	cmp	r2, #0
   865ec:	bf08      	it	eq
   865ee:	2220      	moveq	r2, #32
   865f0:	e7e2      	b.n	865b8 <_svfiprintf_r+0xba>
   865f2:	2b2e      	cmp	r3, #46	; 0x2e
   865f4:	d058      	beq.n	866a8 <_svfiprintf_r+0x1aa>
   865f6:	2b30      	cmp	r3, #48	; 0x30
   865f8:	d079      	beq.n	866ee <_svfiprintf_r+0x1f0>
   865fa:	2b2d      	cmp	r3, #45	; 0x2d
   865fc:	f040 81eb 	bne.w	869d6 <_svfiprintf_r+0x4d8>
   86600:	e04f      	b.n	866a2 <_svfiprintf_r+0x1a4>
   86602:	2b4f      	cmp	r3, #79	; 0x4f
   86604:	f000 80de 	beq.w	867c4 <_svfiprintf_r+0x2c6>
   86608:	dc07      	bgt.n	8661a <_svfiprintf_r+0x11c>
   8660a:	2b44      	cmp	r3, #68	; 0x44
   8660c:	f040 81e3 	bne.w	869d6 <_svfiprintf_r+0x4d8>
   86610:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   86614:	f047 0710 	orr.w	r7, r7, #16
   86618:	e090      	b.n	8673c <_svfiprintf_r+0x23e>
   8661a:	2b55      	cmp	r3, #85	; 0x55
   8661c:	f000 811f 	beq.w	8685e <_svfiprintf_r+0x360>
   86620:	2b58      	cmp	r3, #88	; 0x58
   86622:	f040 81d8 	bne.w	869d6 <_svfiprintf_r+0x4d8>
   86626:	4daf      	ldr	r5, [pc, #700]	; (868e4 <_svfiprintf_r+0x3e6>)
   86628:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8662c:	9505      	str	r5, [sp, #20]
   8662e:	e130      	b.n	86892 <_svfiprintf_r+0x394>
   86630:	2b6f      	cmp	r3, #111	; 0x6f
   86632:	f000 80c9 	beq.w	867c8 <_svfiprintf_r+0x2ca>
   86636:	dc10      	bgt.n	8665a <_svfiprintf_r+0x15c>
   86638:	2b69      	cmp	r3, #105	; 0x69
   8663a:	d024      	beq.n	86686 <_svfiprintf_r+0x188>
   8663c:	dc07      	bgt.n	8664e <_svfiprintf_r+0x150>
   8663e:	2b64      	cmp	r3, #100	; 0x64
   86640:	d021      	beq.n	86686 <_svfiprintf_r+0x188>
   86642:	2b68      	cmp	r3, #104	; 0x68
   86644:	f040 81c7 	bne.w	869d6 <_svfiprintf_r+0x4d8>
   86648:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8664c:	e7b4      	b.n	865b8 <_svfiprintf_r+0xba>
   8664e:	2b6c      	cmp	r3, #108	; 0x6c
   86650:	d05f      	beq.n	86712 <_svfiprintf_r+0x214>
   86652:	2b6e      	cmp	r3, #110	; 0x6e
   86654:	f040 81bf 	bne.w	869d6 <_svfiprintf_r+0x4d8>
   86658:	e096      	b.n	86788 <_svfiprintf_r+0x28a>
   8665a:	2b73      	cmp	r3, #115	; 0x73
   8665c:	f000 80df 	beq.w	8681e <_svfiprintf_r+0x320>
   86660:	dc06      	bgt.n	86670 <_svfiprintf_r+0x172>
   86662:	2b70      	cmp	r3, #112	; 0x70
   86664:	f000 80cd 	beq.w	86802 <_svfiprintf_r+0x304>
   86668:	2b71      	cmp	r3, #113	; 0x71
   8666a:	f040 81b4 	bne.w	869d6 <_svfiprintf_r+0x4d8>
   8666e:	e05a      	b.n	86726 <_svfiprintf_r+0x228>
   86670:	2b75      	cmp	r3, #117	; 0x75
   86672:	f000 80f6 	beq.w	86862 <_svfiprintf_r+0x364>
   86676:	2b78      	cmp	r3, #120	; 0x78
   86678:	f040 81ad 	bne.w	869d6 <_svfiprintf_r+0x4d8>
   8667c:	4d9a      	ldr	r5, [pc, #616]	; (868e8 <_svfiprintf_r+0x3ea>)
   8667e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   86682:	9505      	str	r5, [sp, #20]
   86684:	e105      	b.n	86892 <_svfiprintf_r+0x394>
   86686:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8668a:	e057      	b.n	8673c <_svfiprintf_r+0x23e>
   8668c:	f047 0701 	orr.w	r7, r7, #1
   86690:	e792      	b.n	865b8 <_svfiprintf_r+0xba>
   86692:	1d33      	adds	r3, r6, #4
   86694:	6836      	ldr	r6, [r6, #0]
   86696:	2e00      	cmp	r6, #0
   86698:	9603      	str	r6, [sp, #12]
   8669a:	da15      	bge.n	866c8 <_svfiprintf_r+0x1ca>
   8669c:	4270      	negs	r0, r6
   8669e:	9003      	str	r0, [sp, #12]
   866a0:	461e      	mov	r6, r3
   866a2:	f047 0704 	orr.w	r7, r7, #4
   866a6:	e787      	b.n	865b8 <_svfiprintf_r+0xba>
   866a8:	9901      	ldr	r1, [sp, #4]
   866aa:	f811 3b01 	ldrb.w	r3, [r1], #1
   866ae:	2b2a      	cmp	r3, #42	; 0x2a
   866b0:	9101      	str	r1, [sp, #4]
   866b2:	d10b      	bne.n	866cc <_svfiprintf_r+0x1ce>
   866b4:	f8d6 c000 	ldr.w	ip, [r6]
   866b8:	1d33      	adds	r3, r6, #4
   866ba:	f1bc 0f00 	cmp.w	ip, #0
   866be:	da03      	bge.n	866c8 <_svfiprintf_r+0x1ca>
   866c0:	461e      	mov	r6, r3
   866c2:	f04f 3cff 	mov.w	ip, #4294967295
   866c6:	e777      	b.n	865b8 <_svfiprintf_r+0xba>
   866c8:	461e      	mov	r6, r3
   866ca:	e775      	b.n	865b8 <_svfiprintf_r+0xba>
   866cc:	f04f 0c00 	mov.w	ip, #0
   866d0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   866d4:	2809      	cmp	r0, #9
   866d6:	d807      	bhi.n	866e8 <_svfiprintf_r+0x1ea>
   866d8:	9901      	ldr	r1, [sp, #4]
   866da:	230a      	movs	r3, #10
   866dc:	fb03 0c0c 	mla	ip, r3, ip, r0
   866e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   866e4:	9101      	str	r1, [sp, #4]
   866e6:	e7f3      	b.n	866d0 <_svfiprintf_r+0x1d2>
   866e8:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   866ec:	e768      	b.n	865c0 <_svfiprintf_r+0xc2>
   866ee:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   866f2:	e761      	b.n	865b8 <_svfiprintf_r+0xba>
   866f4:	9801      	ldr	r0, [sp, #4]
   866f6:	2100      	movs	r1, #0
   866f8:	3b30      	subs	r3, #48	; 0x30
   866fa:	240a      	movs	r4, #10
   866fc:	fb04 3101 	mla	r1, r4, r1, r3
   86700:	f810 3b01 	ldrb.w	r3, [r0], #1
   86704:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   86708:	2c09      	cmp	r4, #9
   8670a:	9001      	str	r0, [sp, #4]
   8670c:	d9f4      	bls.n	866f8 <_svfiprintf_r+0x1fa>
   8670e:	9103      	str	r1, [sp, #12]
   86710:	e756      	b.n	865c0 <_svfiprintf_r+0xc2>
   86712:	9901      	ldr	r1, [sp, #4]
   86714:	780b      	ldrb	r3, [r1, #0]
   86716:	2b6c      	cmp	r3, #108	; 0x6c
   86718:	d102      	bne.n	86720 <_svfiprintf_r+0x222>
   8671a:	1c48      	adds	r0, r1, #1
   8671c:	9001      	str	r0, [sp, #4]
   8671e:	e002      	b.n	86726 <_svfiprintf_r+0x228>
   86720:	f047 0710 	orr.w	r7, r7, #16
   86724:	e748      	b.n	865b8 <_svfiprintf_r+0xba>
   86726:	f047 0720 	orr.w	r7, r7, #32
   8672a:	e745      	b.n	865b8 <_svfiprintf_r+0xba>
   8672c:	6832      	ldr	r2, [r6, #0]
   8672e:	2500      	movs	r5, #0
   86730:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   86734:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   86738:	3604      	adds	r6, #4
   8673a:	e156      	b.n	869ea <_svfiprintf_r+0x4ec>
   8673c:	06ba      	lsls	r2, r7, #26
   8673e:	d507      	bpl.n	86750 <_svfiprintf_r+0x252>
   86740:	3607      	adds	r6, #7
   86742:	f026 0507 	bic.w	r5, r6, #7
   86746:	f105 0608 	add.w	r6, r5, #8
   8674a:	e9d5 4500 	ldrd	r4, r5, [r5]
   8674e:	e00f      	b.n	86770 <_svfiprintf_r+0x272>
   86750:	f017 0f10 	tst.w	r7, #16
   86754:	f106 0104 	add.w	r1, r6, #4
   86758:	d001      	beq.n	8675e <_svfiprintf_r+0x260>
   8675a:	6832      	ldr	r2, [r6, #0]
   8675c:	e005      	b.n	8676a <_svfiprintf_r+0x26c>
   8675e:	f017 0f40 	tst.w	r7, #64	; 0x40
   86762:	6832      	ldr	r2, [r6, #0]
   86764:	d001      	beq.n	8676a <_svfiprintf_r+0x26c>
   86766:	b214      	sxth	r4, r2
   86768:	e000      	b.n	8676c <_svfiprintf_r+0x26e>
   8676a:	4614      	mov	r4, r2
   8676c:	17e5      	asrs	r5, r4, #31
   8676e:	460e      	mov	r6, r1
   86770:	2c00      	cmp	r4, #0
   86772:	f175 0200 	sbcs.w	r2, r5, #0
   86776:	f280 80b9 	bge.w	868ec <_svfiprintf_r+0x3ee>
   8677a:	232d      	movs	r3, #45	; 0x2d
   8677c:	4264      	negs	r4, r4
   8677e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   86782:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   86786:	e0b1      	b.n	868ec <_svfiprintf_r+0x3ee>
   86788:	f017 0f20 	tst.w	r7, #32
   8678c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   86790:	f106 0204 	add.w	r2, r6, #4
   86794:	d005      	beq.n	867a2 <_svfiprintf_r+0x2a4>
   86796:	9c04      	ldr	r4, [sp, #16]
   86798:	6835      	ldr	r5, [r6, #0]
   8679a:	17e0      	asrs	r0, r4, #31
   8679c:	602c      	str	r4, [r5, #0]
   8679e:	6068      	str	r0, [r5, #4]
   867a0:	e004      	b.n	867ac <_svfiprintf_r+0x2ae>
   867a2:	06fb      	lsls	r3, r7, #27
   867a4:	d504      	bpl.n	867b0 <_svfiprintf_r+0x2b2>
   867a6:	6833      	ldr	r3, [r6, #0]
   867a8:	9904      	ldr	r1, [sp, #16]
   867aa:	6019      	str	r1, [r3, #0]
   867ac:	4616      	mov	r6, r2
   867ae:	e6cf      	b.n	86550 <_svfiprintf_r+0x52>
   867b0:	6830      	ldr	r0, [r6, #0]
   867b2:	9c04      	ldr	r4, [sp, #16]
   867b4:	f017 0f40 	tst.w	r7, #64	; 0x40
   867b8:	f106 0604 	add.w	r6, r6, #4
   867bc:	bf14      	ite	ne
   867be:	8004      	strhne	r4, [r0, #0]
   867c0:	6004      	streq	r4, [r0, #0]
   867c2:	e6c5      	b.n	86550 <_svfiprintf_r+0x52>
   867c4:	f047 0710 	orr.w	r7, r7, #16
   867c8:	f017 0020 	ands.w	r0, r7, #32
   867cc:	d008      	beq.n	867e0 <_svfiprintf_r+0x2e2>
   867ce:	1df3      	adds	r3, r6, #7
   867d0:	f023 0507 	bic.w	r5, r3, #7
   867d4:	f105 0608 	add.w	r6, r5, #8
   867d8:	e9d5 4500 	ldrd	r4, r5, [r5]
   867dc:	2000      	movs	r0, #0
   867de:	e07c      	b.n	868da <_svfiprintf_r+0x3dc>
   867e0:	f017 0110 	ands.w	r1, r7, #16
   867e4:	f106 0204 	add.w	r2, r6, #4
   867e8:	d106      	bne.n	867f8 <_svfiprintf_r+0x2fa>
   867ea:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   867ee:	d003      	beq.n	867f8 <_svfiprintf_r+0x2fa>
   867f0:	8834      	ldrh	r4, [r6, #0]
   867f2:	2500      	movs	r5, #0
   867f4:	4616      	mov	r6, r2
   867f6:	e7f1      	b.n	867dc <_svfiprintf_r+0x2de>
   867f8:	6836      	ldr	r6, [r6, #0]
   867fa:	2500      	movs	r5, #0
   867fc:	4634      	mov	r4, r6
   867fe:	4616      	mov	r6, r2
   86800:	e06b      	b.n	868da <_svfiprintf_r+0x3dc>
   86802:	4b39      	ldr	r3, [pc, #228]	; (868e8 <_svfiprintf_r+0x3ea>)
   86804:	2130      	movs	r1, #48	; 0x30
   86806:	2278      	movs	r2, #120	; 0x78
   86808:	6834      	ldr	r4, [r6, #0]
   8680a:	2500      	movs	r5, #0
   8680c:	f047 0702 	orr.w	r7, r7, #2
   86810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   86814:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   86818:	3604      	adds	r6, #4
   8681a:	9305      	str	r3, [sp, #20]
   8681c:	e05c      	b.n	868d8 <_svfiprintf_r+0x3da>
   8681e:	4631      	mov	r1, r6
   86820:	2500      	movs	r5, #0
   86822:	f8d1 a000 	ldr.w	sl, [r1]
   86826:	3604      	adds	r6, #4
   86828:	45ac      	cmp	ip, r5
   8682a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8682e:	4650      	mov	r0, sl
   86830:	db11      	blt.n	86856 <_svfiprintf_r+0x358>
   86832:	4662      	mov	r2, ip
   86834:	4629      	mov	r1, r5
   86836:	f8cd c000 	str.w	ip, [sp]
   8683a:	f7ff fbe9 	bl	86010 <memchr>
   8683e:	f8dd c000 	ldr.w	ip, [sp]
   86842:	2800      	cmp	r0, #0
   86844:	f000 80d5 	beq.w	869f2 <_svfiprintf_r+0x4f4>
   86848:	ebca 0400 	rsb	r4, sl, r0
   8684c:	4564      	cmp	r4, ip
   8684e:	f340 80d2 	ble.w	869f6 <_svfiprintf_r+0x4f8>
   86852:	4664      	mov	r4, ip
   86854:	e0cf      	b.n	869f6 <_svfiprintf_r+0x4f8>
   86856:	f7fd fb31 	bl	83ebc <strlen>
   8685a:	4604      	mov	r4, r0
   8685c:	e0cb      	b.n	869f6 <_svfiprintf_r+0x4f8>
   8685e:	f047 0710 	orr.w	r7, r7, #16
   86862:	06bd      	lsls	r5, r7, #26
   86864:	d506      	bpl.n	86874 <_svfiprintf_r+0x376>
   86866:	1df0      	adds	r0, r6, #7
   86868:	f020 0407 	bic.w	r4, r0, #7
   8686c:	f104 0608 	add.w	r6, r4, #8
   86870:	cc30      	ldmia	r4, {r4, r5}
   86872:	e00c      	b.n	8688e <_svfiprintf_r+0x390>
   86874:	f017 0f10 	tst.w	r7, #16
   86878:	f106 0304 	add.w	r3, r6, #4
   8687c:	d103      	bne.n	86886 <_svfiprintf_r+0x388>
   8687e:	067c      	lsls	r4, r7, #25
   86880:	d501      	bpl.n	86886 <_svfiprintf_r+0x388>
   86882:	8834      	ldrh	r4, [r6, #0]
   86884:	e001      	b.n	8688a <_svfiprintf_r+0x38c>
   86886:	6835      	ldr	r5, [r6, #0]
   86888:	462c      	mov	r4, r5
   8688a:	2500      	movs	r5, #0
   8688c:	461e      	mov	r6, r3
   8688e:	2001      	movs	r0, #1
   86890:	e023      	b.n	868da <_svfiprintf_r+0x3dc>
   86892:	06b8      	lsls	r0, r7, #26
   86894:	d507      	bpl.n	868a6 <_svfiprintf_r+0x3a8>
   86896:	1df4      	adds	r4, r6, #7
   86898:	f024 0107 	bic.w	r1, r4, #7
   8689c:	f101 0608 	add.w	r6, r1, #8
   868a0:	e9d1 4500 	ldrd	r4, r5, [r1]
   868a4:	e00c      	b.n	868c0 <_svfiprintf_r+0x3c2>
   868a6:	f017 0f10 	tst.w	r7, #16
   868aa:	f106 0004 	add.w	r0, r6, #4
   868ae:	d103      	bne.n	868b8 <_svfiprintf_r+0x3ba>
   868b0:	0679      	lsls	r1, r7, #25
   868b2:	d501      	bpl.n	868b8 <_svfiprintf_r+0x3ba>
   868b4:	8834      	ldrh	r4, [r6, #0]
   868b6:	e001      	b.n	868bc <_svfiprintf_r+0x3be>
   868b8:	6836      	ldr	r6, [r6, #0]
   868ba:	4634      	mov	r4, r6
   868bc:	2500      	movs	r5, #0
   868be:	4606      	mov	r6, r0
   868c0:	07fa      	lsls	r2, r7, #31
   868c2:	d509      	bpl.n	868d8 <_svfiprintf_r+0x3da>
   868c4:	ea54 0205 	orrs.w	r2, r4, r5
   868c8:	d006      	beq.n	868d8 <_svfiprintf_r+0x3da>
   868ca:	2230      	movs	r2, #48	; 0x30
   868cc:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   868d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   868d4:	f047 0702 	orr.w	r7, r7, #2
   868d8:	2002      	movs	r0, #2
   868da:	2100      	movs	r1, #0
   868dc:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   868e0:	e005      	b.n	868ee <_svfiprintf_r+0x3f0>
   868e2:	bf00      	nop
   868e4:	00087652 	.word	0x00087652
   868e8:	00087663 	.word	0x00087663
   868ec:	2001      	movs	r0, #1
   868ee:	f1bc 0f00 	cmp.w	ip, #0
   868f2:	bfa8      	it	ge
   868f4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   868f8:	ea54 0105 	orrs.w	r1, r4, r5
   868fc:	d102      	bne.n	86904 <_svfiprintf_r+0x406>
   868fe:	f1bc 0f00 	cmp.w	ip, #0
   86902:	d058      	beq.n	869b6 <_svfiprintf_r+0x4b8>
   86904:	2801      	cmp	r0, #1
   86906:	d01d      	beq.n	86944 <_svfiprintf_r+0x446>
   86908:	2802      	cmp	r0, #2
   8690a:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8690e:	d041      	beq.n	86994 <_svfiprintf_r+0x496>
   86910:	f004 0207 	and.w	r2, r4, #7
   86914:	08e4      	lsrs	r4, r4, #3
   86916:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8691a:	08e9      	lsrs	r1, r5, #3
   8691c:	4604      	mov	r4, r0
   8691e:	460d      	mov	r5, r1
   86920:	3230      	adds	r2, #48	; 0x30
   86922:	ea54 0105 	orrs.w	r1, r4, r5
   86926:	469a      	mov	sl, r3
   86928:	701a      	strb	r2, [r3, #0]
   8692a:	f103 33ff 	add.w	r3, r3, #4294967295
   8692e:	d1ef      	bne.n	86910 <_svfiprintf_r+0x412>
   86930:	07f8      	lsls	r0, r7, #31
   86932:	4655      	mov	r5, sl
   86934:	d54a      	bpl.n	869cc <_svfiprintf_r+0x4ce>
   86936:	2a30      	cmp	r2, #48	; 0x30
   86938:	d048      	beq.n	869cc <_svfiprintf_r+0x4ce>
   8693a:	2230      	movs	r2, #48	; 0x30
   8693c:	469a      	mov	sl, r3
   8693e:	f805 2c01 	strb.w	r2, [r5, #-1]
   86942:	e043      	b.n	869cc <_svfiprintf_r+0x4ce>
   86944:	2d00      	cmp	r5, #0
   86946:	bf08      	it	eq
   86948:	2c0a      	cmpeq	r4, #10
   8694a:	d203      	bcs.n	86954 <_svfiprintf_r+0x456>
   8694c:	3430      	adds	r4, #48	; 0x30
   8694e:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   86952:	e036      	b.n	869c2 <_svfiprintf_r+0x4c4>
   86954:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   86958:	9302      	str	r3, [sp, #8]
   8695a:	4620      	mov	r0, r4
   8695c:	4629      	mov	r1, r5
   8695e:	220a      	movs	r2, #10
   86960:	2300      	movs	r3, #0
   86962:	f8cd c000 	str.w	ip, [sp]
   86966:	f000 fb29 	bl	86fbc <__aeabi_uldivmod>
   8696a:	9802      	ldr	r0, [sp, #8]
   8696c:	3230      	adds	r2, #48	; 0x30
   8696e:	f800 2901 	strb.w	r2, [r0], #-1
   86972:	4629      	mov	r1, r5
   86974:	220a      	movs	r2, #10
   86976:	2300      	movs	r3, #0
   86978:	f8dd a008 	ldr.w	sl, [sp, #8]
   8697c:	9002      	str	r0, [sp, #8]
   8697e:	4620      	mov	r0, r4
   86980:	f000 fb1c 	bl	86fbc <__aeabi_uldivmod>
   86984:	4604      	mov	r4, r0
   86986:	460d      	mov	r5, r1
   86988:	ea54 0105 	orrs.w	r1, r4, r5
   8698c:	f8dd c000 	ldr.w	ip, [sp]
   86990:	d1e3      	bne.n	8695a <_svfiprintf_r+0x45c>
   86992:	e01b      	b.n	869cc <_svfiprintf_r+0x4ce>
   86994:	9905      	ldr	r1, [sp, #20]
   86996:	f004 000f 	and.w	r0, r4, #15
   8699a:	0924      	lsrs	r4, r4, #4
   8699c:	5c0a      	ldrb	r2, [r1, r0]
   8699e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   869a2:	0929      	lsrs	r1, r5, #4
   869a4:	4604      	mov	r4, r0
   869a6:	460d      	mov	r5, r1
   869a8:	469a      	mov	sl, r3
   869aa:	f803 2901 	strb.w	r2, [r3], #-1
   869ae:	ea54 0205 	orrs.w	r2, r4, r5
   869b2:	d1ef      	bne.n	86994 <_svfiprintf_r+0x496>
   869b4:	e00a      	b.n	869cc <_svfiprintf_r+0x4ce>
   869b6:	b938      	cbnz	r0, 869c8 <_svfiprintf_r+0x4ca>
   869b8:	07f9      	lsls	r1, r7, #31
   869ba:	d505      	bpl.n	869c8 <_svfiprintf_r+0x4ca>
   869bc:	2030      	movs	r0, #48	; 0x30
   869be:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   869c2:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   869c6:	e001      	b.n	869cc <_svfiprintf_r+0x4ce>
   869c8:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   869cc:	ad18      	add	r5, sp, #96	; 0x60
   869ce:	ebca 0405 	rsb	r4, sl, r5
   869d2:	4665      	mov	r5, ip
   869d4:	e00f      	b.n	869f6 <_svfiprintf_r+0x4f8>
   869d6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   869da:	2b00      	cmp	r3, #0
   869dc:	f000 8176 	beq.w	86ccc <_svfiprintf_r+0x7ce>
   869e0:	2500      	movs	r5, #0
   869e2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   869e6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   869ea:	2401      	movs	r4, #1
   869ec:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   869f0:	e001      	b.n	869f6 <_svfiprintf_r+0x4f8>
   869f2:	4664      	mov	r4, ip
   869f4:	4605      	mov	r5, r0
   869f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   869fa:	42ac      	cmp	r4, r5
   869fc:	bfac      	ite	ge
   869fe:	4621      	movge	r1, r4
   86a00:	4629      	movlt	r1, r5
   86a02:	9102      	str	r1, [sp, #8]
   86a04:	b113      	cbz	r3, 86a0c <_svfiprintf_r+0x50e>
   86a06:	9802      	ldr	r0, [sp, #8]
   86a08:	1c42      	adds	r2, r0, #1
   86a0a:	9202      	str	r2, [sp, #8]
   86a0c:	f017 0102 	ands.w	r1, r7, #2
   86a10:	9106      	str	r1, [sp, #24]
   86a12:	d002      	beq.n	86a1a <_svfiprintf_r+0x51c>
   86a14:	9b02      	ldr	r3, [sp, #8]
   86a16:	1c98      	adds	r0, r3, #2
   86a18:	9002      	str	r0, [sp, #8]
   86a1a:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   86a1e:	9207      	str	r2, [sp, #28]
   86a20:	d13c      	bne.n	86a9c <_svfiprintf_r+0x59e>
   86a22:	9903      	ldr	r1, [sp, #12]
   86a24:	9b02      	ldr	r3, [sp, #8]
   86a26:	1acb      	subs	r3, r1, r3
   86a28:	2b00      	cmp	r3, #0
   86a2a:	dd37      	ble.n	86a9c <_svfiprintf_r+0x59e>
   86a2c:	48a5      	ldr	r0, [pc, #660]	; (86cc4 <_svfiprintf_r+0x7c6>)
   86a2e:	2b10      	cmp	r3, #16
   86a30:	f8c8 0000 	str.w	r0, [r8]
   86a34:	dd1b      	ble.n	86a6e <_svfiprintf_r+0x570>
   86a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86a38:	2110      	movs	r1, #16
   86a3a:	980d      	ldr	r0, [sp, #52]	; 0x34
   86a3c:	f8c8 1004 	str.w	r1, [r8, #4]
   86a40:	1c51      	adds	r1, r2, #1
   86a42:	3010      	adds	r0, #16
   86a44:	2907      	cmp	r1, #7
   86a46:	900d      	str	r0, [sp, #52]	; 0x34
   86a48:	910c      	str	r1, [sp, #48]	; 0x30
   86a4a:	dc02      	bgt.n	86a52 <_svfiprintf_r+0x554>
   86a4c:	f108 0808 	add.w	r8, r8, #8
   86a50:	e00b      	b.n	86a6a <_svfiprintf_r+0x56c>
   86a52:	4658      	mov	r0, fp
   86a54:	4649      	mov	r1, r9
   86a56:	aa0b      	add	r2, sp, #44	; 0x2c
   86a58:	9300      	str	r3, [sp, #0]
   86a5a:	f7ff fcd3 	bl	86404 <__ssprint_r>
   86a5e:	9b00      	ldr	r3, [sp, #0]
   86a60:	2800      	cmp	r0, #0
   86a62:	f040 813a 	bne.w	86cda <_svfiprintf_r+0x7dc>
   86a66:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86a6a:	3b10      	subs	r3, #16
   86a6c:	e7de      	b.n	86a2c <_svfiprintf_r+0x52e>
   86a6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86a70:	f8c8 3004 	str.w	r3, [r8, #4]
   86a74:	18d1      	adds	r1, r2, r3
   86a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86a78:	910d      	str	r1, [sp, #52]	; 0x34
   86a7a:	1c58      	adds	r0, r3, #1
   86a7c:	2807      	cmp	r0, #7
   86a7e:	900c      	str	r0, [sp, #48]	; 0x30
   86a80:	dc02      	bgt.n	86a88 <_svfiprintf_r+0x58a>
   86a82:	f108 0808 	add.w	r8, r8, #8
   86a86:	e009      	b.n	86a9c <_svfiprintf_r+0x59e>
   86a88:	4658      	mov	r0, fp
   86a8a:	4649      	mov	r1, r9
   86a8c:	aa0b      	add	r2, sp, #44	; 0x2c
   86a8e:	f7ff fcb9 	bl	86404 <__ssprint_r>
   86a92:	2800      	cmp	r0, #0
   86a94:	f040 8121 	bne.w	86cda <_svfiprintf_r+0x7dc>
   86a98:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86a9c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   86aa0:	b1da      	cbz	r2, 86ada <_svfiprintf_r+0x5dc>
   86aa2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   86aa6:	f8c8 1000 	str.w	r1, [r8]
   86aaa:	990c      	ldr	r1, [sp, #48]	; 0x30
   86aac:	2301      	movs	r3, #1
   86aae:	980d      	ldr	r0, [sp, #52]	; 0x34
   86ab0:	f8c8 3004 	str.w	r3, [r8, #4]
   86ab4:	1c4b      	adds	r3, r1, #1
   86ab6:	1c42      	adds	r2, r0, #1
   86ab8:	2b07      	cmp	r3, #7
   86aba:	920d      	str	r2, [sp, #52]	; 0x34
   86abc:	930c      	str	r3, [sp, #48]	; 0x30
   86abe:	dc02      	bgt.n	86ac6 <_svfiprintf_r+0x5c8>
   86ac0:	f108 0808 	add.w	r8, r8, #8
   86ac4:	e009      	b.n	86ada <_svfiprintf_r+0x5dc>
   86ac6:	4658      	mov	r0, fp
   86ac8:	4649      	mov	r1, r9
   86aca:	aa0b      	add	r2, sp, #44	; 0x2c
   86acc:	f7ff fc9a 	bl	86404 <__ssprint_r>
   86ad0:	2800      	cmp	r0, #0
   86ad2:	f040 8102 	bne.w	86cda <_svfiprintf_r+0x7dc>
   86ad6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86ada:	9806      	ldr	r0, [sp, #24]
   86adc:	b1d0      	cbz	r0, 86b14 <_svfiprintf_r+0x616>
   86ade:	aa0a      	add	r2, sp, #40	; 0x28
   86ae0:	f8c8 2000 	str.w	r2, [r8]
   86ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86ae6:	2102      	movs	r1, #2
   86ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86aea:	f8c8 1004 	str.w	r1, [r8, #4]
   86aee:	1c51      	adds	r1, r2, #1
   86af0:	1c98      	adds	r0, r3, #2
   86af2:	2907      	cmp	r1, #7
   86af4:	900d      	str	r0, [sp, #52]	; 0x34
   86af6:	910c      	str	r1, [sp, #48]	; 0x30
   86af8:	dc02      	bgt.n	86b00 <_svfiprintf_r+0x602>
   86afa:	f108 0808 	add.w	r8, r8, #8
   86afe:	e009      	b.n	86b14 <_svfiprintf_r+0x616>
   86b00:	4658      	mov	r0, fp
   86b02:	4649      	mov	r1, r9
   86b04:	aa0b      	add	r2, sp, #44	; 0x2c
   86b06:	f7ff fc7d 	bl	86404 <__ssprint_r>
   86b0a:	2800      	cmp	r0, #0
   86b0c:	f040 80e5 	bne.w	86cda <_svfiprintf_r+0x7dc>
   86b10:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86b14:	9b07      	ldr	r3, [sp, #28]
   86b16:	2b80      	cmp	r3, #128	; 0x80
   86b18:	d13c      	bne.n	86b94 <_svfiprintf_r+0x696>
   86b1a:	9803      	ldr	r0, [sp, #12]
   86b1c:	9a02      	ldr	r2, [sp, #8]
   86b1e:	1a83      	subs	r3, r0, r2
   86b20:	2b00      	cmp	r3, #0
   86b22:	dd37      	ble.n	86b94 <_svfiprintf_r+0x696>
   86b24:	4968      	ldr	r1, [pc, #416]	; (86cc8 <_svfiprintf_r+0x7ca>)
   86b26:	2b10      	cmp	r3, #16
   86b28:	f8c8 1000 	str.w	r1, [r8]
   86b2c:	dd1b      	ble.n	86b66 <_svfiprintf_r+0x668>
   86b2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b30:	2210      	movs	r2, #16
   86b32:	990d      	ldr	r1, [sp, #52]	; 0x34
   86b34:	f8c8 2004 	str.w	r2, [r8, #4]
   86b38:	1c42      	adds	r2, r0, #1
   86b3a:	3110      	adds	r1, #16
   86b3c:	2a07      	cmp	r2, #7
   86b3e:	910d      	str	r1, [sp, #52]	; 0x34
   86b40:	920c      	str	r2, [sp, #48]	; 0x30
   86b42:	dc02      	bgt.n	86b4a <_svfiprintf_r+0x64c>
   86b44:	f108 0808 	add.w	r8, r8, #8
   86b48:	e00b      	b.n	86b62 <_svfiprintf_r+0x664>
   86b4a:	4658      	mov	r0, fp
   86b4c:	4649      	mov	r1, r9
   86b4e:	aa0b      	add	r2, sp, #44	; 0x2c
   86b50:	9300      	str	r3, [sp, #0]
   86b52:	f7ff fc57 	bl	86404 <__ssprint_r>
   86b56:	9b00      	ldr	r3, [sp, #0]
   86b58:	2800      	cmp	r0, #0
   86b5a:	f040 80be 	bne.w	86cda <_svfiprintf_r+0x7dc>
   86b5e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86b62:	3b10      	subs	r3, #16
   86b64:	e7de      	b.n	86b24 <_svfiprintf_r+0x626>
   86b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86b68:	980d      	ldr	r0, [sp, #52]	; 0x34
   86b6a:	1c51      	adds	r1, r2, #1
   86b6c:	f8c8 3004 	str.w	r3, [r8, #4]
   86b70:	2907      	cmp	r1, #7
   86b72:	4403      	add	r3, r0
   86b74:	930d      	str	r3, [sp, #52]	; 0x34
   86b76:	910c      	str	r1, [sp, #48]	; 0x30
   86b78:	dc02      	bgt.n	86b80 <_svfiprintf_r+0x682>
   86b7a:	f108 0808 	add.w	r8, r8, #8
   86b7e:	e009      	b.n	86b94 <_svfiprintf_r+0x696>
   86b80:	4658      	mov	r0, fp
   86b82:	4649      	mov	r1, r9
   86b84:	aa0b      	add	r2, sp, #44	; 0x2c
   86b86:	f7ff fc3d 	bl	86404 <__ssprint_r>
   86b8a:	2800      	cmp	r0, #0
   86b8c:	f040 80a5 	bne.w	86cda <_svfiprintf_r+0x7dc>
   86b90:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86b94:	1b2d      	subs	r5, r5, r4
   86b96:	2d00      	cmp	r5, #0
   86b98:	dd34      	ble.n	86c04 <_svfiprintf_r+0x706>
   86b9a:	484b      	ldr	r0, [pc, #300]	; (86cc8 <_svfiprintf_r+0x7ca>)
   86b9c:	2d10      	cmp	r5, #16
   86b9e:	f8c8 0000 	str.w	r0, [r8]
   86ba2:	dd19      	ble.n	86bd8 <_svfiprintf_r+0x6da>
   86ba4:	980c      	ldr	r0, [sp, #48]	; 0x30
   86ba6:	990d      	ldr	r1, [sp, #52]	; 0x34
   86ba8:	1c43      	adds	r3, r0, #1
   86baa:	2210      	movs	r2, #16
   86bac:	3110      	adds	r1, #16
   86bae:	2b07      	cmp	r3, #7
   86bb0:	f8c8 2004 	str.w	r2, [r8, #4]
   86bb4:	910d      	str	r1, [sp, #52]	; 0x34
   86bb6:	930c      	str	r3, [sp, #48]	; 0x30
   86bb8:	dc02      	bgt.n	86bc0 <_svfiprintf_r+0x6c2>
   86bba:	f108 0808 	add.w	r8, r8, #8
   86bbe:	e009      	b.n	86bd4 <_svfiprintf_r+0x6d6>
   86bc0:	4658      	mov	r0, fp
   86bc2:	4649      	mov	r1, r9
   86bc4:	aa0b      	add	r2, sp, #44	; 0x2c
   86bc6:	f7ff fc1d 	bl	86404 <__ssprint_r>
   86bca:	2800      	cmp	r0, #0
   86bcc:	f040 8085 	bne.w	86cda <_svfiprintf_r+0x7dc>
   86bd0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86bd4:	3d10      	subs	r5, #16
   86bd6:	e7e0      	b.n	86b9a <_svfiprintf_r+0x69c>
   86bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86bdc:	1c51      	adds	r1, r2, #1
   86bde:	f8c8 5004 	str.w	r5, [r8, #4]
   86be2:	2907      	cmp	r1, #7
   86be4:	441d      	add	r5, r3
   86be6:	950d      	str	r5, [sp, #52]	; 0x34
   86be8:	910c      	str	r1, [sp, #48]	; 0x30
   86bea:	dc02      	bgt.n	86bf2 <_svfiprintf_r+0x6f4>
   86bec:	f108 0808 	add.w	r8, r8, #8
   86bf0:	e008      	b.n	86c04 <_svfiprintf_r+0x706>
   86bf2:	4658      	mov	r0, fp
   86bf4:	4649      	mov	r1, r9
   86bf6:	aa0b      	add	r2, sp, #44	; 0x2c
   86bf8:	f7ff fc04 	bl	86404 <__ssprint_r>
   86bfc:	2800      	cmp	r0, #0
   86bfe:	d16c      	bne.n	86cda <_svfiprintf_r+0x7dc>
   86c00:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86c06:	980d      	ldr	r0, [sp, #52]	; 0x34
   86c08:	1c5a      	adds	r2, r3, #1
   86c0a:	f8c8 4004 	str.w	r4, [r8, #4]
   86c0e:	2a07      	cmp	r2, #7
   86c10:	4404      	add	r4, r0
   86c12:	f8c8 a000 	str.w	sl, [r8]
   86c16:	940d      	str	r4, [sp, #52]	; 0x34
   86c18:	920c      	str	r2, [sp, #48]	; 0x30
   86c1a:	dc02      	bgt.n	86c22 <_svfiprintf_r+0x724>
   86c1c:	f108 0308 	add.w	r3, r8, #8
   86c20:	e007      	b.n	86c32 <_svfiprintf_r+0x734>
   86c22:	4658      	mov	r0, fp
   86c24:	4649      	mov	r1, r9
   86c26:	aa0b      	add	r2, sp, #44	; 0x2c
   86c28:	f7ff fbec 	bl	86404 <__ssprint_r>
   86c2c:	2800      	cmp	r0, #0
   86c2e:	d154      	bne.n	86cda <_svfiprintf_r+0x7dc>
   86c30:	ab18      	add	r3, sp, #96	; 0x60
   86c32:	077a      	lsls	r2, r7, #29
   86c34:	d40b      	bmi.n	86c4e <_svfiprintf_r+0x750>
   86c36:	9804      	ldr	r0, [sp, #16]
   86c38:	9b02      	ldr	r3, [sp, #8]
   86c3a:	9a03      	ldr	r2, [sp, #12]
   86c3c:	990d      	ldr	r1, [sp, #52]	; 0x34
   86c3e:	4293      	cmp	r3, r2
   86c40:	bfac      	ite	ge
   86c42:	18c0      	addge	r0, r0, r3
   86c44:	1880      	addlt	r0, r0, r2
   86c46:	9004      	str	r0, [sp, #16]
   86c48:	2900      	cmp	r1, #0
   86c4a:	d036      	beq.n	86cba <_svfiprintf_r+0x7bc>
   86c4c:	e02f      	b.n	86cae <_svfiprintf_r+0x7b0>
   86c4e:	9c03      	ldr	r4, [sp, #12]
   86c50:	9902      	ldr	r1, [sp, #8]
   86c52:	1a64      	subs	r4, r4, r1
   86c54:	2c00      	cmp	r4, #0
   86c56:	ddee      	ble.n	86c36 <_svfiprintf_r+0x738>
   86c58:	481a      	ldr	r0, [pc, #104]	; (86cc4 <_svfiprintf_r+0x7c6>)
   86c5a:	2c10      	cmp	r4, #16
   86c5c:	6018      	str	r0, [r3, #0]
   86c5e:	dd15      	ble.n	86c8c <_svfiprintf_r+0x78e>
   86c60:	990c      	ldr	r1, [sp, #48]	; 0x30
   86c62:	2010      	movs	r0, #16
   86c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86c66:	6058      	str	r0, [r3, #4]
   86c68:	1c48      	adds	r0, r1, #1
   86c6a:	3210      	adds	r2, #16
   86c6c:	2807      	cmp	r0, #7
   86c6e:	920d      	str	r2, [sp, #52]	; 0x34
   86c70:	900c      	str	r0, [sp, #48]	; 0x30
   86c72:	dc01      	bgt.n	86c78 <_svfiprintf_r+0x77a>
   86c74:	3308      	adds	r3, #8
   86c76:	e007      	b.n	86c88 <_svfiprintf_r+0x78a>
   86c78:	4658      	mov	r0, fp
   86c7a:	4649      	mov	r1, r9
   86c7c:	aa0b      	add	r2, sp, #44	; 0x2c
   86c7e:	f7ff fbc1 	bl	86404 <__ssprint_r>
   86c82:	2800      	cmp	r0, #0
   86c84:	d129      	bne.n	86cda <_svfiprintf_r+0x7dc>
   86c86:	ab18      	add	r3, sp, #96	; 0x60
   86c88:	3c10      	subs	r4, #16
   86c8a:	e7e5      	b.n	86c58 <_svfiprintf_r+0x75a>
   86c8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86c8e:	605c      	str	r4, [r3, #4]
   86c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86c92:	1c51      	adds	r1, r2, #1
   86c94:	191c      	adds	r4, r3, r4
   86c96:	2907      	cmp	r1, #7
   86c98:	940d      	str	r4, [sp, #52]	; 0x34
   86c9a:	910c      	str	r1, [sp, #48]	; 0x30
   86c9c:	ddcb      	ble.n	86c36 <_svfiprintf_r+0x738>
   86c9e:	4658      	mov	r0, fp
   86ca0:	4649      	mov	r1, r9
   86ca2:	aa0b      	add	r2, sp, #44	; 0x2c
   86ca4:	f7ff fbae 	bl	86404 <__ssprint_r>
   86ca8:	2800      	cmp	r0, #0
   86caa:	d0c4      	beq.n	86c36 <_svfiprintf_r+0x738>
   86cac:	e015      	b.n	86cda <_svfiprintf_r+0x7dc>
   86cae:	4658      	mov	r0, fp
   86cb0:	4649      	mov	r1, r9
   86cb2:	aa0b      	add	r2, sp, #44	; 0x2c
   86cb4:	f7ff fba6 	bl	86404 <__ssprint_r>
   86cb8:	b978      	cbnz	r0, 86cda <_svfiprintf_r+0x7dc>
   86cba:	2500      	movs	r5, #0
   86cbc:	950c      	str	r5, [sp, #48]	; 0x30
   86cbe:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86cc2:	e445      	b.n	86550 <_svfiprintf_r+0x52>
   86cc4:	0008769c 	.word	0x0008769c
   86cc8:	000876ac 	.word	0x000876ac
   86ccc:	980d      	ldr	r0, [sp, #52]	; 0x34
   86cce:	b120      	cbz	r0, 86cda <_svfiprintf_r+0x7dc>
   86cd0:	4658      	mov	r0, fp
   86cd2:	4649      	mov	r1, r9
   86cd4:	aa0b      	add	r2, sp, #44	; 0x2c
   86cd6:	f7ff fb95 	bl	86404 <__ssprint_r>
   86cda:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   86cde:	9b04      	ldr	r3, [sp, #16]
   86ce0:	f002 0140 	and.w	r1, r2, #64	; 0x40
   86ce4:	b208      	sxth	r0, r1
   86ce6:	2800      	cmp	r0, #0
   86ce8:	bf18      	it	ne
   86cea:	f04f 33ff 	movne.w	r3, #4294967295
   86cee:	4618      	mov	r0, r3
   86cf0:	b029      	add	sp, #164	; 0xa4
   86cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86cf6:	bf00      	nop

00086cf8 <__swbuf_r>:
   86cf8:	b570      	push	{r4, r5, r6, lr}
   86cfa:	460d      	mov	r5, r1
   86cfc:	4614      	mov	r4, r2
   86cfe:	4606      	mov	r6, r0
   86d00:	b118      	cbz	r0, 86d0a <__swbuf_r+0x12>
   86d02:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86d04:	b90b      	cbnz	r3, 86d0a <__swbuf_r+0x12>
   86d06:	f7fe fb2f 	bl	85368 <__sinit>
   86d0a:	89a1      	ldrh	r1, [r4, #12]
   86d0c:	69a0      	ldr	r0, [r4, #24]
   86d0e:	f001 0208 	and.w	r2, r1, #8
   86d12:	b213      	sxth	r3, r2
   86d14:	60a0      	str	r0, [r4, #8]
   86d16:	b10b      	cbz	r3, 86d1c <__swbuf_r+0x24>
   86d18:	6920      	ldr	r0, [r4, #16]
   86d1a:	b958      	cbnz	r0, 86d34 <__swbuf_r+0x3c>
   86d1c:	4630      	mov	r0, r6
   86d1e:	4621      	mov	r1, r4
   86d20:	f7fe f97c 	bl	8501c <__swsetup_r>
   86d24:	b130      	cbz	r0, 86d34 <__swbuf_r+0x3c>
   86d26:	89a5      	ldrh	r5, [r4, #12]
   86d28:	2009      	movs	r0, #9
   86d2a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   86d2e:	81a1      	strh	r1, [r4, #12]
   86d30:	6030      	str	r0, [r6, #0]
   86d32:	e017      	b.n	86d64 <__swbuf_r+0x6c>
   86d34:	89a1      	ldrh	r1, [r4, #12]
   86d36:	b2ed      	uxtb	r5, r5
   86d38:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   86d3c:	b213      	sxth	r3, r2
   86d3e:	b933      	cbnz	r3, 86d4e <__swbuf_r+0x56>
   86d40:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   86d44:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86d46:	81a0      	strh	r0, [r4, #12]
   86d48:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   86d4c:	6662      	str	r2, [r4, #100]	; 0x64
   86d4e:	6820      	ldr	r0, [r4, #0]
   86d50:	6923      	ldr	r3, [r4, #16]
   86d52:	6961      	ldr	r1, [r4, #20]
   86d54:	1ac0      	subs	r0, r0, r3
   86d56:	4288      	cmp	r0, r1
   86d58:	db07      	blt.n	86d6a <__swbuf_r+0x72>
   86d5a:	4630      	mov	r0, r6
   86d5c:	4621      	mov	r1, r4
   86d5e:	f7fe fa11 	bl	85184 <_fflush_r>
   86d62:	b110      	cbz	r0, 86d6a <__swbuf_r+0x72>
   86d64:	f04f 35ff 	mov.w	r5, #4294967295
   86d68:	e015      	b.n	86d96 <__swbuf_r+0x9e>
   86d6a:	68a2      	ldr	r2, [r4, #8]
   86d6c:	6821      	ldr	r1, [r4, #0]
   86d6e:	1e53      	subs	r3, r2, #1
   86d70:	60a3      	str	r3, [r4, #8]
   86d72:	f801 5b01 	strb.w	r5, [r1], #1
   86d76:	6962      	ldr	r2, [r4, #20]
   86d78:	3001      	adds	r0, #1
   86d7a:	4290      	cmp	r0, r2
   86d7c:	6021      	str	r1, [r4, #0]
   86d7e:	d004      	beq.n	86d8a <__swbuf_r+0x92>
   86d80:	89a3      	ldrh	r3, [r4, #12]
   86d82:	07db      	lsls	r3, r3, #31
   86d84:	d507      	bpl.n	86d96 <__swbuf_r+0x9e>
   86d86:	2d0a      	cmp	r5, #10
   86d88:	d105      	bne.n	86d96 <__swbuf_r+0x9e>
   86d8a:	4630      	mov	r0, r6
   86d8c:	4621      	mov	r1, r4
   86d8e:	f7fe f9f9 	bl	85184 <_fflush_r>
   86d92:	2800      	cmp	r0, #0
   86d94:	d1e6      	bne.n	86d64 <__swbuf_r+0x6c>
   86d96:	4628      	mov	r0, r5
   86d98:	bd70      	pop	{r4, r5, r6, pc}

00086d9a <__swbuf>:
   86d9a:	460a      	mov	r2, r1
   86d9c:	4902      	ldr	r1, [pc, #8]	; (86da8 <__swbuf+0xe>)
   86d9e:	4603      	mov	r3, r0
   86da0:	6808      	ldr	r0, [r1, #0]
   86da2:	4619      	mov	r1, r3
   86da4:	f7ff bfa8 	b.w	86cf8 <__swbuf_r>
   86da8:	20070038 	.word	0x20070038

00086dac <_wcrtomb_r>:
   86dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86db0:	461d      	mov	r5, r3
   86db2:	4b10      	ldr	r3, [pc, #64]	; (86df4 <_wcrtomb_r+0x48>)
   86db4:	b086      	sub	sp, #24
   86db6:	4604      	mov	r4, r0
   86db8:	4690      	mov	r8, r2
   86dba:	460e      	mov	r6, r1
   86dbc:	681f      	ldr	r7, [r3, #0]
   86dbe:	b939      	cbnz	r1, 86dd0 <_wcrtomb_r+0x24>
   86dc0:	f7fe fe86 	bl	85ad0 <__locale_charset>
   86dc4:	9500      	str	r5, [sp, #0]
   86dc6:	4603      	mov	r3, r0
   86dc8:	a903      	add	r1, sp, #12
   86dca:	4620      	mov	r0, r4
   86dcc:	4632      	mov	r2, r6
   86dce:	e006      	b.n	86dde <_wcrtomb_r+0x32>
   86dd0:	f7fe fe7e 	bl	85ad0 <__locale_charset>
   86dd4:	9500      	str	r5, [sp, #0]
   86dd6:	4603      	mov	r3, r0
   86dd8:	4631      	mov	r1, r6
   86dda:	4620      	mov	r0, r4
   86ddc:	4642      	mov	r2, r8
   86dde:	47b8      	blx	r7
   86de0:	1c43      	adds	r3, r0, #1
   86de2:	d103      	bne.n	86dec <_wcrtomb_r+0x40>
   86de4:	2100      	movs	r1, #0
   86de6:	228a      	movs	r2, #138	; 0x8a
   86de8:	6029      	str	r1, [r5, #0]
   86dea:	6022      	str	r2, [r4, #0]
   86dec:	b006      	add	sp, #24
   86dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86df2:	bf00      	nop
   86df4:	200708f4 	.word	0x200708f4

00086df8 <wcrtomb>:
   86df8:	b530      	push	{r4, r5, lr}
   86dfa:	4613      	mov	r3, r2
   86dfc:	4a04      	ldr	r2, [pc, #16]	; (86e10 <wcrtomb+0x18>)
   86dfe:	4605      	mov	r5, r0
   86e00:	460c      	mov	r4, r1
   86e02:	6810      	ldr	r0, [r2, #0]
   86e04:	4629      	mov	r1, r5
   86e06:	4622      	mov	r2, r4
   86e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86e0c:	f7ff bfce 	b.w	86dac <_wcrtomb_r>
   86e10:	20070038 	.word	0x20070038

00086e14 <__ascii_wctomb>:
   86e14:	b149      	cbz	r1, 86e2a <__ascii_wctomb+0x16>
   86e16:	2aff      	cmp	r2, #255	; 0xff
   86e18:	d904      	bls.n	86e24 <__ascii_wctomb+0x10>
   86e1a:	238a      	movs	r3, #138	; 0x8a
   86e1c:	6003      	str	r3, [r0, #0]
   86e1e:	f04f 30ff 	mov.w	r0, #4294967295
   86e22:	4770      	bx	lr
   86e24:	700a      	strb	r2, [r1, #0]
   86e26:	2001      	movs	r0, #1
   86e28:	4770      	bx	lr
   86e2a:	4608      	mov	r0, r1
   86e2c:	4770      	bx	lr

00086e2e <_wctomb_r>:
   86e2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   86e32:	4698      	mov	r8, r3
   86e34:	4b07      	ldr	r3, [pc, #28]	; (86e54 <_wctomb_r+0x26>)
   86e36:	4605      	mov	r5, r0
   86e38:	460f      	mov	r7, r1
   86e3a:	4616      	mov	r6, r2
   86e3c:	681c      	ldr	r4, [r3, #0]
   86e3e:	f7fe fe47 	bl	85ad0 <__locale_charset>
   86e42:	f8cd 8000 	str.w	r8, [sp]
   86e46:	4603      	mov	r3, r0
   86e48:	4639      	mov	r1, r7
   86e4a:	4628      	mov	r0, r5
   86e4c:	4632      	mov	r2, r6
   86e4e:	47a0      	blx	r4
   86e50:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   86e54:	200708f4 	.word	0x200708f4

00086e58 <_write_r>:
   86e58:	b538      	push	{r3, r4, r5, lr}
   86e5a:	4c07      	ldr	r4, [pc, #28]	; (86e78 <_write_r+0x20>)
   86e5c:	4605      	mov	r5, r0
   86e5e:	2000      	movs	r0, #0
   86e60:	6020      	str	r0, [r4, #0]
   86e62:	4608      	mov	r0, r1
   86e64:	4611      	mov	r1, r2
   86e66:	461a      	mov	r2, r3
   86e68:	f7f9 fc4a 	bl	80700 <_write>
   86e6c:	1c43      	adds	r3, r0, #1
   86e6e:	d102      	bne.n	86e76 <_write_r+0x1e>
   86e70:	6823      	ldr	r3, [r4, #0]
   86e72:	b103      	cbz	r3, 86e76 <_write_r+0x1e>
   86e74:	602b      	str	r3, [r5, #0]
   86e76:	bd38      	pop	{r3, r4, r5, pc}
   86e78:	2007ab48 	.word	0x2007ab48

00086e7c <_close_r>:
   86e7c:	b538      	push	{r3, r4, r5, lr}
   86e7e:	4c06      	ldr	r4, [pc, #24]	; (86e98 <_close_r+0x1c>)
   86e80:	2300      	movs	r3, #0
   86e82:	4605      	mov	r5, r0
   86e84:	4608      	mov	r0, r1
   86e86:	6023      	str	r3, [r4, #0]
   86e88:	f7fa fb94 	bl	815b4 <_close>
   86e8c:	1c43      	adds	r3, r0, #1
   86e8e:	d102      	bne.n	86e96 <_close_r+0x1a>
   86e90:	6821      	ldr	r1, [r4, #0]
   86e92:	b101      	cbz	r1, 86e96 <_close_r+0x1a>
   86e94:	6029      	str	r1, [r5, #0]
   86e96:	bd38      	pop	{r3, r4, r5, pc}
   86e98:	2007ab48 	.word	0x2007ab48

00086e9c <_fclose_r>:
   86e9c:	b570      	push	{r4, r5, r6, lr}
   86e9e:	4605      	mov	r5, r0
   86ea0:	460c      	mov	r4, r1
   86ea2:	2900      	cmp	r1, #0
   86ea4:	d039      	beq.n	86f1a <_fclose_r+0x7e>
   86ea6:	f7fe fac3 	bl	85430 <__sfp_lock_acquire>
   86eaa:	b125      	cbz	r5, 86eb6 <_fclose_r+0x1a>
   86eac:	6bab      	ldr	r3, [r5, #56]	; 0x38
   86eae:	b913      	cbnz	r3, 86eb6 <_fclose_r+0x1a>
   86eb0:	4628      	mov	r0, r5
   86eb2:	f7fe fa59 	bl	85368 <__sinit>
   86eb6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   86eba:	b35e      	cbz	r6, 86f14 <_fclose_r+0x78>
   86ebc:	4628      	mov	r0, r5
   86ebe:	4621      	mov	r1, r4
   86ec0:	f7fe f960 	bl	85184 <_fflush_r>
   86ec4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   86ec6:	4606      	mov	r6, r0
   86ec8:	b13a      	cbz	r2, 86eda <_fclose_r+0x3e>
   86eca:	4628      	mov	r0, r5
   86ecc:	69e1      	ldr	r1, [r4, #28]
   86ece:	4790      	blx	r2
   86ed0:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   86ed4:	bf28      	it	cs
   86ed6:	f04f 36ff 	movcs.w	r6, #4294967295
   86eda:	89a0      	ldrh	r0, [r4, #12]
   86edc:	f000 0180 	and.w	r1, r0, #128	; 0x80
   86ee0:	b20b      	sxth	r3, r1
   86ee2:	b11b      	cbz	r3, 86eec <_fclose_r+0x50>
   86ee4:	4628      	mov	r0, r5
   86ee6:	6921      	ldr	r1, [r4, #16]
   86ee8:	f7fe fb7c 	bl	855e4 <_free_r>
   86eec:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86eee:	b141      	cbz	r1, 86f02 <_fclose_r+0x66>
   86ef0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   86ef4:	4291      	cmp	r1, r2
   86ef6:	d002      	beq.n	86efe <_fclose_r+0x62>
   86ef8:	4628      	mov	r0, r5
   86efa:	f7fe fb73 	bl	855e4 <_free_r>
   86efe:	2000      	movs	r0, #0
   86f00:	6320      	str	r0, [r4, #48]	; 0x30
   86f02:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86f04:	b121      	cbz	r1, 86f10 <_fclose_r+0x74>
   86f06:	4628      	mov	r0, r5
   86f08:	f7fe fb6c 	bl	855e4 <_free_r>
   86f0c:	2100      	movs	r1, #0
   86f0e:	6461      	str	r1, [r4, #68]	; 0x44
   86f10:	2300      	movs	r3, #0
   86f12:	81a3      	strh	r3, [r4, #12]
   86f14:	f7fe fa8d 	bl	85432 <__sfp_lock_release>
   86f18:	e000      	b.n	86f1c <_fclose_r+0x80>
   86f1a:	460e      	mov	r6, r1
   86f1c:	4630      	mov	r0, r6
   86f1e:	bd70      	pop	{r4, r5, r6, pc}

00086f20 <fclose>:
   86f20:	4b02      	ldr	r3, [pc, #8]	; (86f2c <fclose+0xc>)
   86f22:	4601      	mov	r1, r0
   86f24:	6818      	ldr	r0, [r3, #0]
   86f26:	f7ff bfb9 	b.w	86e9c <_fclose_r>
   86f2a:	bf00      	nop
   86f2c:	20070038 	.word	0x20070038

00086f30 <_fstat_r>:
   86f30:	b538      	push	{r3, r4, r5, lr}
   86f32:	4c07      	ldr	r4, [pc, #28]	; (86f50 <_fstat_r+0x20>)
   86f34:	2300      	movs	r3, #0
   86f36:	4605      	mov	r5, r0
   86f38:	4608      	mov	r0, r1
   86f3a:	4611      	mov	r1, r2
   86f3c:	6023      	str	r3, [r4, #0]
   86f3e:	f7fa fb3d 	bl	815bc <_fstat>
   86f42:	1c43      	adds	r3, r0, #1
   86f44:	d102      	bne.n	86f4c <_fstat_r+0x1c>
   86f46:	6821      	ldr	r1, [r4, #0]
   86f48:	b101      	cbz	r1, 86f4c <_fstat_r+0x1c>
   86f4a:	6029      	str	r1, [r5, #0]
   86f4c:	bd38      	pop	{r3, r4, r5, pc}
   86f4e:	bf00      	nop
   86f50:	2007ab48 	.word	0x2007ab48

00086f54 <_isatty_r>:
   86f54:	b538      	push	{r3, r4, r5, lr}
   86f56:	4c06      	ldr	r4, [pc, #24]	; (86f70 <_isatty_r+0x1c>)
   86f58:	2300      	movs	r3, #0
   86f5a:	4605      	mov	r5, r0
   86f5c:	4608      	mov	r0, r1
   86f5e:	6023      	str	r3, [r4, #0]
   86f60:	f7fa fb32 	bl	815c8 <_isatty>
   86f64:	1c43      	adds	r3, r0, #1
   86f66:	d102      	bne.n	86f6e <_isatty_r+0x1a>
   86f68:	6821      	ldr	r1, [r4, #0]
   86f6a:	b101      	cbz	r1, 86f6e <_isatty_r+0x1a>
   86f6c:	6029      	str	r1, [r5, #0]
   86f6e:	bd38      	pop	{r3, r4, r5, pc}
   86f70:	2007ab48 	.word	0x2007ab48

00086f74 <_lseek_r>:
   86f74:	b538      	push	{r3, r4, r5, lr}
   86f76:	4c07      	ldr	r4, [pc, #28]	; (86f94 <_lseek_r+0x20>)
   86f78:	4605      	mov	r5, r0
   86f7a:	2000      	movs	r0, #0
   86f7c:	6020      	str	r0, [r4, #0]
   86f7e:	4608      	mov	r0, r1
   86f80:	4611      	mov	r1, r2
   86f82:	461a      	mov	r2, r3
   86f84:	f7fa fb24 	bl	815d0 <_lseek>
   86f88:	1c43      	adds	r3, r0, #1
   86f8a:	d102      	bne.n	86f92 <_lseek_r+0x1e>
   86f8c:	6823      	ldr	r3, [r4, #0]
   86f8e:	b103      	cbz	r3, 86f92 <_lseek_r+0x1e>
   86f90:	602b      	str	r3, [r5, #0]
   86f92:	bd38      	pop	{r3, r4, r5, pc}
   86f94:	2007ab48 	.word	0x2007ab48

00086f98 <_read_r>:
   86f98:	b538      	push	{r3, r4, r5, lr}
   86f9a:	4c07      	ldr	r4, [pc, #28]	; (86fb8 <_read_r+0x20>)
   86f9c:	4605      	mov	r5, r0
   86f9e:	2000      	movs	r0, #0
   86fa0:	6020      	str	r0, [r4, #0]
   86fa2:	4608      	mov	r0, r1
   86fa4:	4611      	mov	r1, r2
   86fa6:	461a      	mov	r2, r3
   86fa8:	f7f9 fb66 	bl	80678 <_read>
   86fac:	1c43      	adds	r3, r0, #1
   86fae:	d102      	bne.n	86fb6 <_read_r+0x1e>
   86fb0:	6823      	ldr	r3, [r4, #0]
   86fb2:	b103      	cbz	r3, 86fb6 <_read_r+0x1e>
   86fb4:	602b      	str	r3, [r5, #0]
   86fb6:	bd38      	pop	{r3, r4, r5, pc}
   86fb8:	2007ab48 	.word	0x2007ab48

00086fbc <__aeabi_uldivmod>:
   86fbc:	b94b      	cbnz	r3, 86fd2 <__aeabi_uldivmod+0x16>
   86fbe:	b942      	cbnz	r2, 86fd2 <__aeabi_uldivmod+0x16>
   86fc0:	2900      	cmp	r1, #0
   86fc2:	bf08      	it	eq
   86fc4:	2800      	cmpeq	r0, #0
   86fc6:	d002      	beq.n	86fce <__aeabi_uldivmod+0x12>
   86fc8:	f04f 31ff 	mov.w	r1, #4294967295
   86fcc:	4608      	mov	r0, r1
   86fce:	f000 b83b 	b.w	87048 <__aeabi_idiv0>
   86fd2:	b082      	sub	sp, #8
   86fd4:	46ec      	mov	ip, sp
   86fd6:	e92d 5000 	stmdb	sp!, {ip, lr}
   86fda:	f000 f81d 	bl	87018 <__gnu_uldivmod_helper>
   86fde:	f8dd e004 	ldr.w	lr, [sp, #4]
   86fe2:	b002      	add	sp, #8
   86fe4:	bc0c      	pop	{r2, r3}
   86fe6:	4770      	bx	lr

00086fe8 <__gnu_ldivmod_helper>:
   86fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86fec:	4616      	mov	r6, r2
   86fee:	4698      	mov	r8, r3
   86ff0:	4604      	mov	r4, r0
   86ff2:	460d      	mov	r5, r1
   86ff4:	f000 f82a 	bl	8704c <__divdi3>
   86ff8:	fb06 fc01 	mul.w	ip, r6, r1
   86ffc:	fba6 2300 	umull	r2, r3, r6, r0
   87000:	fb00 c708 	mla	r7, r0, r8, ip
   87004:	18fb      	adds	r3, r7, r3
   87006:	1aa2      	subs	r2, r4, r2
   87008:	eb65 0303 	sbc.w	r3, r5, r3
   8700c:	9c06      	ldr	r4, [sp, #24]
   8700e:	e9c4 2300 	strd	r2, r3, [r4]
   87012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87016:	bf00      	nop

00087018 <__gnu_uldivmod_helper>:
   87018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8701c:	4690      	mov	r8, r2
   8701e:	4606      	mov	r6, r0
   87020:	460f      	mov	r7, r1
   87022:	461d      	mov	r5, r3
   87024:	f000 f970 	bl	87308 <__udivdi3>
   87028:	fb00 f305 	mul.w	r3, r0, r5
   8702c:	fba0 4508 	umull	r4, r5, r0, r8
   87030:	fb08 3801 	mla	r8, r8, r1, r3
   87034:	9b06      	ldr	r3, [sp, #24]
   87036:	4445      	add	r5, r8
   87038:	1b34      	subs	r4, r6, r4
   8703a:	eb67 0505 	sbc.w	r5, r7, r5
   8703e:	e9c3 4500 	strd	r4, r5, [r3]
   87042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87046:	bf00      	nop

00087048 <__aeabi_idiv0>:
   87048:	4770      	bx	lr
   8704a:	bf00      	nop

0008704c <__divdi3>:
   8704c:	2900      	cmp	r1, #0
   8704e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   87052:	461d      	mov	r5, r3
   87054:	f2c0 809d 	blt.w	87192 <__divdi3+0x146>
   87058:	2400      	movs	r4, #0
   8705a:	2d00      	cmp	r5, #0
   8705c:	f2c0 8094 	blt.w	87188 <__divdi3+0x13c>
   87060:	4680      	mov	r8, r0
   87062:	460f      	mov	r7, r1
   87064:	4694      	mov	ip, r2
   87066:	461e      	mov	r6, r3
   87068:	bbe3      	cbnz	r3, 870e4 <__divdi3+0x98>
   8706a:	428a      	cmp	r2, r1
   8706c:	d955      	bls.n	8711a <__divdi3+0xce>
   8706e:	fab2 f782 	clz	r7, r2
   87072:	b147      	cbz	r7, 87086 <__divdi3+0x3a>
   87074:	f1c7 0520 	rsb	r5, r7, #32
   87078:	fa20 f605 	lsr.w	r6, r0, r5
   8707c:	fa01 f107 	lsl.w	r1, r1, r7
   87080:	40ba      	lsls	r2, r7
   87082:	40b8      	lsls	r0, r7
   87084:	4331      	orrs	r1, r6
   87086:	0c17      	lsrs	r7, r2, #16
   87088:	fbb1 f6f7 	udiv	r6, r1, r7
   8708c:	fa1f fc82 	uxth.w	ip, r2
   87090:	fb07 1116 	mls	r1, r7, r6, r1
   87094:	fb0c f506 	mul.w	r5, ip, r6
   87098:	0c03      	lsrs	r3, r0, #16
   8709a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8709e:	429d      	cmp	r5, r3
   870a0:	d908      	bls.n	870b4 <__divdi3+0x68>
   870a2:	1e71      	subs	r1, r6, #1
   870a4:	189b      	adds	r3, r3, r2
   870a6:	f080 8113 	bcs.w	872d0 <__divdi3+0x284>
   870aa:	429d      	cmp	r5, r3
   870ac:	f240 8110 	bls.w	872d0 <__divdi3+0x284>
   870b0:	3e02      	subs	r6, #2
   870b2:	189b      	adds	r3, r3, r2
   870b4:	1b59      	subs	r1, r3, r5
   870b6:	fbb1 f5f7 	udiv	r5, r1, r7
   870ba:	fb07 1315 	mls	r3, r7, r5, r1
   870be:	fb0c fc05 	mul.w	ip, ip, r5
   870c2:	b280      	uxth	r0, r0
   870c4:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   870c8:	458c      	cmp	ip, r1
   870ca:	d907      	bls.n	870dc <__divdi3+0x90>
   870cc:	1e6b      	subs	r3, r5, #1
   870ce:	188a      	adds	r2, r1, r2
   870d0:	f080 8100 	bcs.w	872d4 <__divdi3+0x288>
   870d4:	4594      	cmp	ip, r2
   870d6:	f240 80fd 	bls.w	872d4 <__divdi3+0x288>
   870da:	3d02      	subs	r5, #2
   870dc:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   870e0:	2500      	movs	r5, #0
   870e2:	e003      	b.n	870ec <__divdi3+0xa0>
   870e4:	428b      	cmp	r3, r1
   870e6:	d90c      	bls.n	87102 <__divdi3+0xb6>
   870e8:	2500      	movs	r5, #0
   870ea:	4629      	mov	r1, r5
   870ec:	460a      	mov	r2, r1
   870ee:	462b      	mov	r3, r5
   870f0:	b114      	cbz	r4, 870f8 <__divdi3+0xac>
   870f2:	4252      	negs	r2, r2
   870f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   870f8:	4610      	mov	r0, r2
   870fa:	4619      	mov	r1, r3
   870fc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   87100:	4770      	bx	lr
   87102:	fab3 f583 	clz	r5, r3
   87106:	2d00      	cmp	r5, #0
   87108:	f040 8087 	bne.w	8721a <__divdi3+0x1ce>
   8710c:	428b      	cmp	r3, r1
   8710e:	d301      	bcc.n	87114 <__divdi3+0xc8>
   87110:	4282      	cmp	r2, r0
   87112:	d8ea      	bhi.n	870ea <__divdi3+0x9e>
   87114:	2500      	movs	r5, #0
   87116:	2101      	movs	r1, #1
   87118:	e7e8      	b.n	870ec <__divdi3+0xa0>
   8711a:	b912      	cbnz	r2, 87122 <__divdi3+0xd6>
   8711c:	2601      	movs	r6, #1
   8711e:	fbb6 f2f2 	udiv	r2, r6, r2
   87122:	fab2 f682 	clz	r6, r2
   87126:	2e00      	cmp	r6, #0
   87128:	d139      	bne.n	8719e <__divdi3+0x152>
   8712a:	1a8e      	subs	r6, r1, r2
   8712c:	0c13      	lsrs	r3, r2, #16
   8712e:	fa1f fc82 	uxth.w	ip, r2
   87132:	2501      	movs	r5, #1
   87134:	fbb6 f7f3 	udiv	r7, r6, r3
   87138:	fb03 6117 	mls	r1, r3, r7, r6
   8713c:	fb0c f807 	mul.w	r8, ip, r7
   87140:	ea4f 4910 	mov.w	r9, r0, lsr #16
   87144:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   87148:	45b0      	cmp	r8, r6
   8714a:	d906      	bls.n	8715a <__divdi3+0x10e>
   8714c:	1e79      	subs	r1, r7, #1
   8714e:	18b6      	adds	r6, r6, r2
   87150:	d202      	bcs.n	87158 <__divdi3+0x10c>
   87152:	45b0      	cmp	r8, r6
   87154:	f200 80d3 	bhi.w	872fe <__divdi3+0x2b2>
   87158:	460f      	mov	r7, r1
   8715a:	ebc8 0606 	rsb	r6, r8, r6
   8715e:	fbb6 f1f3 	udiv	r1, r6, r3
   87162:	fb03 6311 	mls	r3, r3, r1, r6
   87166:	fb0c fc01 	mul.w	ip, ip, r1
   8716a:	b280      	uxth	r0, r0
   8716c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   87170:	459c      	cmp	ip, r3
   87172:	d906      	bls.n	87182 <__divdi3+0x136>
   87174:	1e4e      	subs	r6, r1, #1
   87176:	189a      	adds	r2, r3, r2
   87178:	d202      	bcs.n	87180 <__divdi3+0x134>
   8717a:	4594      	cmp	ip, r2
   8717c:	f200 80c2 	bhi.w	87304 <__divdi3+0x2b8>
   87180:	4631      	mov	r1, r6
   87182:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   87186:	e7b1      	b.n	870ec <__divdi3+0xa0>
   87188:	43e4      	mvns	r4, r4
   8718a:	4252      	negs	r2, r2
   8718c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   87190:	e766      	b.n	87060 <__divdi3+0x14>
   87192:	4240      	negs	r0, r0
   87194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87198:	f04f 34ff 	mov.w	r4, #4294967295
   8719c:	e75d      	b.n	8705a <__divdi3+0xe>
   8719e:	40b2      	lsls	r2, r6
   871a0:	f1c6 0920 	rsb	r9, r6, #32
   871a4:	fa21 f709 	lsr.w	r7, r1, r9
   871a8:	fa20 f909 	lsr.w	r9, r0, r9
   871ac:	fa01 f106 	lsl.w	r1, r1, r6
   871b0:	0c13      	lsrs	r3, r2, #16
   871b2:	fbb7 f8f3 	udiv	r8, r7, r3
   871b6:	fa1f fc82 	uxth.w	ip, r2
   871ba:	fb03 7718 	mls	r7, r3, r8, r7
   871be:	fb0c f508 	mul.w	r5, ip, r8
   871c2:	ea49 0901 	orr.w	r9, r9, r1
   871c6:	ea4f 4119 	mov.w	r1, r9, lsr #16
   871ca:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   871ce:	40b0      	lsls	r0, r6
   871d0:	42bd      	cmp	r5, r7
   871d2:	d90a      	bls.n	871ea <__divdi3+0x19e>
   871d4:	18bf      	adds	r7, r7, r2
   871d6:	f108 36ff 	add.w	r6, r8, #4294967295
   871da:	f080 808e 	bcs.w	872fa <__divdi3+0x2ae>
   871de:	42bd      	cmp	r5, r7
   871e0:	f240 808b 	bls.w	872fa <__divdi3+0x2ae>
   871e4:	f1a8 0802 	sub.w	r8, r8, #2
   871e8:	18bf      	adds	r7, r7, r2
   871ea:	1b79      	subs	r1, r7, r5
   871ec:	fbb1 f5f3 	udiv	r5, r1, r3
   871f0:	fb03 1715 	mls	r7, r3, r5, r1
   871f4:	fb0c f605 	mul.w	r6, ip, r5
   871f8:	fa1f f989 	uxth.w	r9, r9
   871fc:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   87200:	428e      	cmp	r6, r1
   87202:	d906      	bls.n	87212 <__divdi3+0x1c6>
   87204:	1e6f      	subs	r7, r5, #1
   87206:	1889      	adds	r1, r1, r2
   87208:	d271      	bcs.n	872ee <__divdi3+0x2a2>
   8720a:	428e      	cmp	r6, r1
   8720c:	d96f      	bls.n	872ee <__divdi3+0x2a2>
   8720e:	3d02      	subs	r5, #2
   87210:	1889      	adds	r1, r1, r2
   87212:	1b8e      	subs	r6, r1, r6
   87214:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   87218:	e78c      	b.n	87134 <__divdi3+0xe8>
   8721a:	f1c5 0120 	rsb	r1, r5, #32
   8721e:	fa22 f301 	lsr.w	r3, r2, r1
   87222:	fa06 f605 	lsl.w	r6, r6, r5
   87226:	fa27 f201 	lsr.w	r2, r7, r1
   8722a:	fa07 f705 	lsl.w	r7, r7, r5
   8722e:	fa20 f101 	lsr.w	r1, r0, r1
   87232:	431e      	orrs	r6, r3
   87234:	ea4f 4916 	mov.w	r9, r6, lsr #16
   87238:	fbb2 f8f9 	udiv	r8, r2, r9
   8723c:	fa1f fa86 	uxth.w	sl, r6
   87240:	fb09 2218 	mls	r2, r9, r8, r2
   87244:	fb0a fb08 	mul.w	fp, sl, r8
   87248:	430f      	orrs	r7, r1
   8724a:	0c3b      	lsrs	r3, r7, #16
   8724c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   87250:	4593      	cmp	fp, r2
   87252:	fa0c fc05 	lsl.w	ip, ip, r5
   87256:	d908      	bls.n	8726a <__divdi3+0x21e>
   87258:	1992      	adds	r2, r2, r6
   8725a:	f108 31ff 	add.w	r1, r8, #4294967295
   8725e:	d24a      	bcs.n	872f6 <__divdi3+0x2aa>
   87260:	4593      	cmp	fp, r2
   87262:	d948      	bls.n	872f6 <__divdi3+0x2aa>
   87264:	f1a8 0802 	sub.w	r8, r8, #2
   87268:	1992      	adds	r2, r2, r6
   8726a:	ebcb 0302 	rsb	r3, fp, r2
   8726e:	fbb3 f1f9 	udiv	r1, r3, r9
   87272:	fb09 3211 	mls	r2, r9, r1, r3
   87276:	fb0a fa01 	mul.w	sl, sl, r1
   8727a:	b2bf      	uxth	r7, r7
   8727c:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   87280:	459a      	cmp	sl, r3
   87282:	d906      	bls.n	87292 <__divdi3+0x246>
   87284:	1e4a      	subs	r2, r1, #1
   87286:	199b      	adds	r3, r3, r6
   87288:	d233      	bcs.n	872f2 <__divdi3+0x2a6>
   8728a:	459a      	cmp	sl, r3
   8728c:	d931      	bls.n	872f2 <__divdi3+0x2a6>
   8728e:	3902      	subs	r1, #2
   87290:	199b      	adds	r3, r3, r6
   87292:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   87296:	0c0f      	lsrs	r7, r1, #16
   87298:	fa1f f88c 	uxth.w	r8, ip
   8729c:	fb08 f607 	mul.w	r6, r8, r7
   872a0:	b28a      	uxth	r2, r1
   872a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   872a6:	fb08 f802 	mul.w	r8, r8, r2
   872aa:	fb0c 6202 	mla	r2, ip, r2, r6
   872ae:	fb0c fc07 	mul.w	ip, ip, r7
   872b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   872b6:	4296      	cmp	r6, r2
   872b8:	bf88      	it	hi
   872ba:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   872be:	ebca 0303 	rsb	r3, sl, r3
   872c2:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   872c6:	4563      	cmp	r3, ip
   872c8:	d30e      	bcc.n	872e8 <__divdi3+0x29c>
   872ca:	d005      	beq.n	872d8 <__divdi3+0x28c>
   872cc:	2500      	movs	r5, #0
   872ce:	e70d      	b.n	870ec <__divdi3+0xa0>
   872d0:	460e      	mov	r6, r1
   872d2:	e6ef      	b.n	870b4 <__divdi3+0x68>
   872d4:	461d      	mov	r5, r3
   872d6:	e701      	b.n	870dc <__divdi3+0x90>
   872d8:	fa00 f005 	lsl.w	r0, r0, r5
   872dc:	fa1f f888 	uxth.w	r8, r8
   872e0:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   872e4:	42a8      	cmp	r0, r5
   872e6:	d2f1      	bcs.n	872cc <__divdi3+0x280>
   872e8:	3901      	subs	r1, #1
   872ea:	2500      	movs	r5, #0
   872ec:	e6fe      	b.n	870ec <__divdi3+0xa0>
   872ee:	463d      	mov	r5, r7
   872f0:	e78f      	b.n	87212 <__divdi3+0x1c6>
   872f2:	4611      	mov	r1, r2
   872f4:	e7cd      	b.n	87292 <__divdi3+0x246>
   872f6:	4688      	mov	r8, r1
   872f8:	e7b7      	b.n	8726a <__divdi3+0x21e>
   872fa:	46b0      	mov	r8, r6
   872fc:	e775      	b.n	871ea <__divdi3+0x19e>
   872fe:	3f02      	subs	r7, #2
   87300:	18b6      	adds	r6, r6, r2
   87302:	e72a      	b.n	8715a <__divdi3+0x10e>
   87304:	3902      	subs	r1, #2
   87306:	e73c      	b.n	87182 <__divdi3+0x136>

00087308 <__udivdi3>:
   87308:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8730c:	4614      	mov	r4, r2
   8730e:	4605      	mov	r5, r0
   87310:	460e      	mov	r6, r1
   87312:	2b00      	cmp	r3, #0
   87314:	d13d      	bne.n	87392 <__udivdi3+0x8a>
   87316:	428a      	cmp	r2, r1
   87318:	d949      	bls.n	873ae <__udivdi3+0xa6>
   8731a:	fab2 f782 	clz	r7, r2
   8731e:	b147      	cbz	r7, 87332 <__udivdi3+0x2a>
   87320:	f1c7 0120 	rsb	r1, r7, #32
   87324:	fa20 f201 	lsr.w	r2, r0, r1
   87328:	fa06 f607 	lsl.w	r6, r6, r7
   8732c:	40bc      	lsls	r4, r7
   8732e:	40bd      	lsls	r5, r7
   87330:	4316      	orrs	r6, r2
   87332:	0c22      	lsrs	r2, r4, #16
   87334:	fbb6 f0f2 	udiv	r0, r6, r2
   87338:	b2a1      	uxth	r1, r4
   8733a:	fb02 6610 	mls	r6, r2, r0, r6
   8733e:	fb01 f300 	mul.w	r3, r1, r0
   87342:	0c2f      	lsrs	r7, r5, #16
   87344:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   87348:	42b3      	cmp	r3, r6
   8734a:	d908      	bls.n	8735e <__udivdi3+0x56>
   8734c:	1e47      	subs	r7, r0, #1
   8734e:	1936      	adds	r6, r6, r4
   87350:	f080 80fa 	bcs.w	87548 <__udivdi3+0x240>
   87354:	42b3      	cmp	r3, r6
   87356:	f240 80f7 	bls.w	87548 <__udivdi3+0x240>
   8735a:	3802      	subs	r0, #2
   8735c:	1936      	adds	r6, r6, r4
   8735e:	1af6      	subs	r6, r6, r3
   87360:	fbb6 f3f2 	udiv	r3, r6, r2
   87364:	fb02 6213 	mls	r2, r2, r3, r6
   87368:	fb01 f103 	mul.w	r1, r1, r3
   8736c:	b2ad      	uxth	r5, r5
   8736e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   87372:	4291      	cmp	r1, r2
   87374:	d907      	bls.n	87386 <__udivdi3+0x7e>
   87376:	1e5e      	subs	r6, r3, #1
   87378:	1912      	adds	r2, r2, r4
   8737a:	f080 80e7 	bcs.w	8754c <__udivdi3+0x244>
   8737e:	4291      	cmp	r1, r2
   87380:	f240 80e4 	bls.w	8754c <__udivdi3+0x244>
   87384:	3b02      	subs	r3, #2
   87386:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8738a:	2100      	movs	r1, #0
   8738c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   87390:	4770      	bx	lr
   87392:	428b      	cmp	r3, r1
   87394:	d843      	bhi.n	8741e <__udivdi3+0x116>
   87396:	fab3 f483 	clz	r4, r3
   8739a:	2c00      	cmp	r4, #0
   8739c:	d142      	bne.n	87424 <__udivdi3+0x11c>
   8739e:	428b      	cmp	r3, r1
   873a0:	d302      	bcc.n	873a8 <__udivdi3+0xa0>
   873a2:	4282      	cmp	r2, r0
   873a4:	f200 80e1 	bhi.w	8756a <__udivdi3+0x262>
   873a8:	2100      	movs	r1, #0
   873aa:	2001      	movs	r0, #1
   873ac:	e7ee      	b.n	8738c <__udivdi3+0x84>
   873ae:	b912      	cbnz	r2, 873b6 <__udivdi3+0xae>
   873b0:	2701      	movs	r7, #1
   873b2:	fbb7 f4f2 	udiv	r4, r7, r2
   873b6:	fab4 f284 	clz	r2, r4
   873ba:	2a00      	cmp	r2, #0
   873bc:	f040 8089 	bne.w	874d2 <__udivdi3+0x1ca>
   873c0:	1b0a      	subs	r2, r1, r4
   873c2:	0c23      	lsrs	r3, r4, #16
   873c4:	b2a7      	uxth	r7, r4
   873c6:	2101      	movs	r1, #1
   873c8:	fbb2 f6f3 	udiv	r6, r2, r3
   873cc:	fb03 2216 	mls	r2, r3, r6, r2
   873d0:	fb07 f006 	mul.w	r0, r7, r6
   873d4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   873d8:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   873dc:	4290      	cmp	r0, r2
   873de:	d907      	bls.n	873f0 <__udivdi3+0xe8>
   873e0:	1912      	adds	r2, r2, r4
   873e2:	f106 3cff 	add.w	ip, r6, #4294967295
   873e6:	d202      	bcs.n	873ee <__udivdi3+0xe6>
   873e8:	4290      	cmp	r0, r2
   873ea:	f200 80d0 	bhi.w	8758e <__udivdi3+0x286>
   873ee:	4666      	mov	r6, ip
   873f0:	1a12      	subs	r2, r2, r0
   873f2:	fbb2 f0f3 	udiv	r0, r2, r3
   873f6:	fb03 2310 	mls	r3, r3, r0, r2
   873fa:	fb07 f700 	mul.w	r7, r7, r0
   873fe:	b2ad      	uxth	r5, r5
   87400:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   87404:	429f      	cmp	r7, r3
   87406:	d907      	bls.n	87418 <__udivdi3+0x110>
   87408:	1e42      	subs	r2, r0, #1
   8740a:	191b      	adds	r3, r3, r4
   8740c:	f080 80a0 	bcs.w	87550 <__udivdi3+0x248>
   87410:	429f      	cmp	r7, r3
   87412:	f240 809d 	bls.w	87550 <__udivdi3+0x248>
   87416:	3802      	subs	r0, #2
   87418:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8741c:	e7b6      	b.n	8738c <__udivdi3+0x84>
   8741e:	2100      	movs	r1, #0
   87420:	4608      	mov	r0, r1
   87422:	e7b3      	b.n	8738c <__udivdi3+0x84>
   87424:	f1c4 0620 	rsb	r6, r4, #32
   87428:	fa22 f706 	lsr.w	r7, r2, r6
   8742c:	fa03 f304 	lsl.w	r3, r3, r4
   87430:	fa21 f506 	lsr.w	r5, r1, r6
   87434:	fa01 f104 	lsl.w	r1, r1, r4
   87438:	fa20 f606 	lsr.w	r6, r0, r6
   8743c:	433b      	orrs	r3, r7
   8743e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   87442:	fbb5 f7fc 	udiv	r7, r5, ip
   87446:	fa1f f883 	uxth.w	r8, r3
   8744a:	fb0c 5517 	mls	r5, ip, r7, r5
   8744e:	fb08 f907 	mul.w	r9, r8, r7
   87452:	ea46 0a01 	orr.w	sl, r6, r1
   87456:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8745a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8745e:	45a9      	cmp	r9, r5
   87460:	fa02 f204 	lsl.w	r2, r2, r4
   87464:	d904      	bls.n	87470 <__udivdi3+0x168>
   87466:	1e7e      	subs	r6, r7, #1
   87468:	18ed      	adds	r5, r5, r3
   8746a:	f0c0 8081 	bcc.w	87570 <__udivdi3+0x268>
   8746e:	4637      	mov	r7, r6
   87470:	ebc9 0105 	rsb	r1, r9, r5
   87474:	fbb1 f6fc 	udiv	r6, r1, ip
   87478:	fb0c 1516 	mls	r5, ip, r6, r1
   8747c:	fb08 f806 	mul.w	r8, r8, r6
   87480:	fa1f fa8a 	uxth.w	sl, sl
   87484:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   87488:	4588      	cmp	r8, r1
   8748a:	d903      	bls.n	87494 <__udivdi3+0x18c>
   8748c:	1e75      	subs	r5, r6, #1
   8748e:	18c9      	adds	r1, r1, r3
   87490:	d374      	bcc.n	8757c <__udivdi3+0x274>
   87492:	462e      	mov	r6, r5
   87494:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   87498:	0c37      	lsrs	r7, r6, #16
   8749a:	fa1f fc82 	uxth.w	ip, r2
   8749e:	fb0c f507 	mul.w	r5, ip, r7
   874a2:	0c12      	lsrs	r2, r2, #16
   874a4:	b2b3      	uxth	r3, r6
   874a6:	fb0c fc03 	mul.w	ip, ip, r3
   874aa:	fb02 5303 	mla	r3, r2, r3, r5
   874ae:	fb02 f207 	mul.w	r2, r2, r7
   874b2:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   874b6:	429d      	cmp	r5, r3
   874b8:	bf88      	it	hi
   874ba:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   874be:	ebc8 0101 	rsb	r1, r8, r1
   874c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   874c6:	4291      	cmp	r1, r2
   874c8:	d34c      	bcc.n	87564 <__udivdi3+0x25c>
   874ca:	d043      	beq.n	87554 <__udivdi3+0x24c>
   874cc:	4630      	mov	r0, r6
   874ce:	2100      	movs	r1, #0
   874d0:	e75c      	b.n	8738c <__udivdi3+0x84>
   874d2:	4094      	lsls	r4, r2
   874d4:	f1c2 0520 	rsb	r5, r2, #32
   874d8:	fa21 f605 	lsr.w	r6, r1, r5
   874dc:	fa20 f505 	lsr.w	r5, r0, r5
   874e0:	fa01 f102 	lsl.w	r1, r1, r2
   874e4:	0c23      	lsrs	r3, r4, #16
   874e6:	fbb6 fcf3 	udiv	ip, r6, r3
   874ea:	b2a7      	uxth	r7, r4
   874ec:	fb03 661c 	mls	r6, r3, ip, r6
   874f0:	fb07 f80c 	mul.w	r8, r7, ip
   874f4:	4329      	orrs	r1, r5
   874f6:	0c0d      	lsrs	r5, r1, #16
   874f8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   874fc:	45b0      	cmp	r8, r6
   874fe:	fa00 f502 	lsl.w	r5, r0, r2
   87502:	d908      	bls.n	87516 <__udivdi3+0x20e>
   87504:	1936      	adds	r6, r6, r4
   87506:	f10c 30ff 	add.w	r0, ip, #4294967295
   8750a:	d23e      	bcs.n	8758a <__udivdi3+0x282>
   8750c:	45b0      	cmp	r8, r6
   8750e:	d93c      	bls.n	8758a <__udivdi3+0x282>
   87510:	f1ac 0c02 	sub.w	ip, ip, #2
   87514:	1936      	adds	r6, r6, r4
   87516:	ebc8 0206 	rsb	r2, r8, r6
   8751a:	fbb2 f0f3 	udiv	r0, r2, r3
   8751e:	fb03 2610 	mls	r6, r3, r0, r2
   87522:	fb07 f800 	mul.w	r8, r7, r0
   87526:	b289      	uxth	r1, r1
   87528:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8752c:	4590      	cmp	r8, r2
   8752e:	d906      	bls.n	8753e <__udivdi3+0x236>
   87530:	1e46      	subs	r6, r0, #1
   87532:	1912      	adds	r2, r2, r4
   87534:	d227      	bcs.n	87586 <__udivdi3+0x27e>
   87536:	4590      	cmp	r8, r2
   87538:	d925      	bls.n	87586 <__udivdi3+0x27e>
   8753a:	3802      	subs	r0, #2
   8753c:	1912      	adds	r2, r2, r4
   8753e:	ebc8 0202 	rsb	r2, r8, r2
   87542:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   87546:	e73f      	b.n	873c8 <__udivdi3+0xc0>
   87548:	4638      	mov	r0, r7
   8754a:	e708      	b.n	8735e <__udivdi3+0x56>
   8754c:	4633      	mov	r3, r6
   8754e:	e71a      	b.n	87386 <__udivdi3+0x7e>
   87550:	4610      	mov	r0, r2
   87552:	e761      	b.n	87418 <__udivdi3+0x110>
   87554:	fa00 f004 	lsl.w	r0, r0, r4
   87558:	fa1f fc8c 	uxth.w	ip, ip
   8755c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   87560:	4298      	cmp	r0, r3
   87562:	d2b3      	bcs.n	874cc <__udivdi3+0x1c4>
   87564:	1e70      	subs	r0, r6, #1
   87566:	2100      	movs	r1, #0
   87568:	e710      	b.n	8738c <__udivdi3+0x84>
   8756a:	4621      	mov	r1, r4
   8756c:	4620      	mov	r0, r4
   8756e:	e70d      	b.n	8738c <__udivdi3+0x84>
   87570:	45a9      	cmp	r9, r5
   87572:	f67f af7c 	bls.w	8746e <__udivdi3+0x166>
   87576:	3f02      	subs	r7, #2
   87578:	18ed      	adds	r5, r5, r3
   8757a:	e779      	b.n	87470 <__udivdi3+0x168>
   8757c:	4588      	cmp	r8, r1
   8757e:	d988      	bls.n	87492 <__udivdi3+0x18a>
   87580:	3e02      	subs	r6, #2
   87582:	18c9      	adds	r1, r1, r3
   87584:	e786      	b.n	87494 <__udivdi3+0x18c>
   87586:	4630      	mov	r0, r6
   87588:	e7d9      	b.n	8753e <__udivdi3+0x236>
   8758a:	4684      	mov	ip, r0
   8758c:	e7c3      	b.n	87516 <__udivdi3+0x20e>
   8758e:	3e02      	subs	r6, #2
   87590:	1912      	adds	r2, r2, r4
   87592:	e72d      	b.n	873f0 <__udivdi3+0xe8>
   87594:	00006425 	.word	0x00006425
   87598:	000a7325 	.word	0x000a7325
   8759c:	00000001 	.word	0x00000001
   875a0:	00000002 	.word	0x00000002
   875a4:	00000004 	.word	0x00000004
   875a8:	00000008 	.word	0x00000008
   875ac:	00000010 	.word	0x00000010
   875b0:	00000020 	.word	0x00000020
   875b4:	00000040 	.word	0x00000040
   875b8:	00000080 	.word	0x00000080
   875bc:	00000100 	.word	0x00000100
   875c0:	00000200 	.word	0x00000200
   875c4:	00000400 	.word	0x00000400
   875c8:	09097325 	.word	0x09097325
   875cc:	25096325 	.word	0x25096325
   875d0:	75250975 	.word	0x75250975
   875d4:	0d752509 	.word	0x0d752509
   875d8:	0000000a 	.word	0x0000000a
   875dc:	454c4449 	.word	0x454c4449
   875e0:	00000000 	.word	0x00000000
   875e4:	00000a0d 	.word	0x00000a0d
   875e8:	20726d54 	.word	0x20726d54
   875ec:	00637653 	.word	0x00637653
   875f0:	20444950 	.word	0x20444950
   875f4:	746e6f43 	.word	0x746e6f43
   875f8:	006c6f72 	.word	0x006c6f72
   875fc:	6c696146 	.word	0x6c696146
   87600:	74206465 	.word	0x74206465
   87604:	7263206f 	.word	0x7263206f
   87608:	65746165 	.word	0x65746165
   8760c:	44495020 	.word	0x44495020
   87610:	6e6f4320 	.word	0x6e6f4320
   87614:	6c6f7274 	.word	0x6c6f7274
   87618:	73617420 	.word	0x73617420
   8761c:	000a0d6b 	.word	0x000a0d6b
   87620:	746f6c50 	.word	0x746f6c50
   87624:	6c615620 	.word	0x6c615620
   87628:	00736575 	.word	0x00736575

0008762c <_global_impure_ptr>:
   8762c:	20070040 20200043                                @.. C.

00087632 <blanks.6650>:
   87632:	20202020 20202020 20202020 20202020                     

00087642 <zeroes.6651>:
   87642:	30303030 30303030 30303030 30303030     0000000000000000
   87652:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   87662:	32313000 36353433 61393837 65646362     .0123456789abcde
   87672:	20200066                                         f.

00087674 <blanks.6678>:
   87674:	20202020 20202020 20202020 20202020                     

00087684 <zeroes.6679>:
   87684:	30303030 30303030 30303030 30303030     0000000000000000
   87694:	49534f50 002e0058                       POSIX...

0008769c <blanks.6664>:
   8769c:	20202020 20202020 20202020 20202020                     

000876ac <zeroes.6665>:
   876ac:	30303030 30303030 30303030 30303030     0000000000000000

000876bc <_init>:
   876bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   876be:	bf00      	nop
   876c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   876c2:	bc08      	pop	{r3}
   876c4:	469e      	mov	lr, r3
   876c6:	4770      	bx	lr

000876c8 <__init_array_start>:
   876c8:	00085171 	.word	0x00085171

000876cc <__frame_dummy_init_array_entry>:
   876cc:	0008016d                                m...

000876d0 <_fini>:
   876d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   876d2:	bf00      	nop
   876d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   876d6:	bc08      	pop	{r3}
   876d8:	469e      	mov	lr, r3
   876da:	4770      	bx	lr

000876dc <__fini_array_start>:
   876dc:	00080145 	.word	0x00080145
