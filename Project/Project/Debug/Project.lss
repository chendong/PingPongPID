
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007734  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00087734  00087734  0000f734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000900  20070000  0008773c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000a254  20070900  00088040  00010900  2**3
                  ALLOC
  4 .stack        00002004  2007ab54  00092294  00010900  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010900  2**0
                  CONTENTS, READONLY
  6 .comment      00000070  00000000  00000000  00010929  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003217b  00000000  00000000  00010999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000093df  00000000  00000000  00042b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001109f  00000000  00000000  0004bef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000017e0  00000000  00000000  0005cf98  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001448  00000000  00000000  0005e778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bb64  00000000  00000000  0005fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f865  00000000  00000000  0007b724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00068cf8  00000000  00000000  0009af89  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000030bc  00000000  00000000  00103c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cb58 	.word	0x2007cb58
   80004:	0008123d 	.word	0x0008123d
   80008:	00081239 	.word	0x00081239
   8000c:	00081239 	.word	0x00081239
   80010:	00081239 	.word	0x00081239
   80014:	00081239 	.word	0x00081239
   80018:	00081239 	.word	0x00081239
	...
   8002c:	00081709 	.word	0x00081709
   80030:	00081239 	.word	0x00081239
   80034:	00000000 	.word	0x00000000
   80038:	00081799 	.word	0x00081799
   8003c:	000817d5 	.word	0x000817d5
   80040:	00081239 	.word	0x00081239
   80044:	00081239 	.word	0x00081239
   80048:	00081239 	.word	0x00081239
   8004c:	00081239 	.word	0x00081239
   80050:	00081239 	.word	0x00081239
   80054:	00081239 	.word	0x00081239
   80058:	00081239 	.word	0x00081239
   8005c:	00081239 	.word	0x00081239
   80060:	00081239 	.word	0x00081239
   80064:	00081239 	.word	0x00081239
   80068:	00000000 	.word	0x00000000
   8006c:	00080c49 	.word	0x00080c49
   80070:	00080c65 	.word	0x00080c65
   80074:	00080c81 	.word	0x00080c81
   80078:	00080c9d 	.word	0x00080c9d
	...
   80084:	00081239 	.word	0x00081239
   80088:	00081239 	.word	0x00081239
   8008c:	00081239 	.word	0x00081239
   80090:	00081239 	.word	0x00081239
   80094:	00081239 	.word	0x00081239
   80098:	00081239 	.word	0x00081239
   8009c:	00081239 	.word	0x00081239
   800a0:	00081239 	.word	0x00081239
   800a4:	00000000 	.word	0x00000000
   800a8:	00081239 	.word	0x00081239
   800ac:	00081239 	.word	0x00081239
   800b0:	00081239 	.word	0x00081239
   800b4:	00081239 	.word	0x00081239
   800b8:	00081239 	.word	0x00081239
   800bc:	00081239 	.word	0x00081239
   800c0:	00081239 	.word	0x00081239
   800c4:	00081239 	.word	0x00081239
   800c8:	00081239 	.word	0x00081239
   800cc:	00081239 	.word	0x00081239
   800d0:	00081239 	.word	0x00081239
   800d4:	00081239 	.word	0x00081239
   800d8:	00081239 	.word	0x00081239
   800dc:	00081239 	.word	0x00081239
   800e0:	00081239 	.word	0x00081239
   800e4:	00081239 	.word	0x00081239
   800e8:	00081239 	.word	0x00081239
   800ec:	00081239 	.word	0x00081239
   800f0:	00081239 	.word	0x00081239

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008773c 	.word	0x0008773c
   80110:	0008773f 	.word	0x0008773f
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008773c 	.word	0x0008773c
   8013c:	0008773c 	.word	0x0008773c
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070900 	.word	0x20070900
   80164:	00000000 	.word	0x00000000
   80168:	0008773c 	.word	0x0008773c

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008773c 	.word	0x0008773c
   80198:	20070904 	.word	0x20070904
   8019c:	0008773c 	.word	0x0008773c
   801a0:	00000000 	.word	0x00000000

000801a4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   801a4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   801a6:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   801aa:	f2c0 5001 	movt	r0, #1281	; 0x501
   801ae:	f241 533d 	movw	r3, #5437	; 0x153d
   801b2:	f2c0 0308 	movt	r3, #8
   801b6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801b8:	f04f 0000 	mov.w	r0, #0
   801bc:	f04f 013e 	mov.w	r1, #62	; 0x3e
   801c0:	f640 5259 	movw	r2, #3417	; 0xd59
   801c4:	f2c0 0208 	movt	r2, #8
   801c8:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   801ca:	f640 54c9 	movw	r4, #3529	; 0xdc9
   801ce:	f2c0 0408 	movt	r4, #8
   801d2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   801d4:	2800      	cmp	r0, #0
   801d6:	d0fc      	beq.n	801d2 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   801d8:	f640 50d9 	movw	r0, #3545	; 0xdd9
   801dc:	f2c0 0008 	movt	r0, #8
   801e0:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   801e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   801e6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   801ea:	f643 7301 	movw	r3, #16129	; 0x3f01
   801ee:	f2c2 030d 	movt	r3, #8205	; 0x200d
   801f2:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   801f4:	f640 54e9 	movw	r4, #3561	; 0xde9
   801f8:	f2c0 0408 	movt	r4, #8
   801fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   801fe:	2800      	cmp	r0, #0
   80200:	d0fc      	beq.n	801fc <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80202:	f04f 0010 	mov.w	r0, #16
   80206:	f640 42b9 	movw	r2, #3257	; 0xcb9
   8020a:	f2c0 0208 	movt	r2, #8
   8020e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80210:	f241 3075 	movw	r0, #4981	; 0x1375
   80214:	f2c0 0008 	movt	r0, #8
   80218:	4780      	blx	r0
   8021a:	bd10      	pop	{r4, pc}

0008021c <delay_init>:

#include "asf.h"
#include "DelayFunctions.h"

int delay_init(void)
{
   8021c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   8021e:	f04f 001b 	mov.w	r0, #27
   80222:	f640 53f9 	movw	r3, #3577	; 0xdf9
   80226:	f2c0 0308 	movt	r3, #8
   8022a:	4798      	blx	r3
	tc_init(TC0,0,0);
   8022c:	f04f 0400 	mov.w	r4, #0
   80230:	f2c4 0408 	movt	r4, #16392	; 0x4008
   80234:	4620      	mov	r0, r4
   80236:	f04f 0100 	mov.w	r1, #0
   8023a:	460a      	mov	r2, r1
   8023c:	f241 1355 	movw	r3, #4437	; 0x1155
   80240:	f2c0 0308 	movt	r3, #8
   80244:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80246:	4620      	mov	r0, r4
   80248:	f04f 0100 	mov.w	r1, #0
   8024c:	f241 1271 	movw	r2, #4465	; 0x1171
   80250:	f2c0 0208 	movt	r2, #8
   80254:	4790      	blx	r2
	tc_stop(TC0,0);
   80256:	4620      	mov	r0, r4
   80258:	f04f 0100 	mov.w	r1, #0
   8025c:	f241 1379 	movw	r3, #4473	; 0x1179
   80260:	f2c0 0308 	movt	r3, #8
   80264:	4798      	blx	r3
	return 0;
}
   80266:	f04f 0000 	mov.w	r0, #0
   8026a:	bd10      	pop	{r4, pc}

0008026c <uart_config>:
 * Configures UART communication with a certain baud rate.
 */
void uart_config(uint32_t baud)
{
	/* reset and disable receiver & transmitter */
	UART_CR = UART_CR_RSTRX | UART_CR_RSTTX	| UART_CR_RXDIS | UART_CR_TXDIS;
   8026c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80270:	f2c4 030e 	movt	r3, #16398	; 0x400e
	/* configure baud rate */
	UART_BRGR = (MCK >> 4) / baud;
   80274:	f44f 6202 	mov.w	r2, #2080	; 0x820
   80278:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8027c:	f641 31d0 	movw	r1, #7120	; 0x1bd0
   80280:	f2c0 0150 	movt	r1, #80	; 0x50
   80284:	fbb1 f0f0 	udiv	r0, r1, r0
   80288:	6010      	str	r0, [r2, #0]
	/* configure mode */
	UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;
   8028a:	f640 0204 	movw	r2, #2052	; 0x804
   8028e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80292:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80296:	6011      	str	r1, [r2, #0]
	/* enable receiver and transmitter */
	UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80298:	f04f 0050 	mov.w	r0, #80	; 0x50
   8029c:	6018      	str	r0, [r3, #0]
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8029e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
   802a2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   802a6:	f44f 7280 	mov.w	r2, #256	; 0x100
   802aa:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   802ac:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   802ae:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   802b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   802b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
   802b6:	f421 7080 	bic.w	r0, r1, #256	; 0x100
   802ba:	6718      	str	r0, [r3, #112]	; 0x70
   802bc:	4770      	bx	lr
   802be:	bf00      	nop

000802c0 <uart_receiver_ready>:
 * Receiver Ready?
 * Return 1 if "Receiver Ready" flag is set, otherwise 0.
 */
int uart_receiver_ready(void)
{
	return (UART_SR & UART_SR_RXRDY);
   802c0:	f640 0314 	movw	r3, #2068	; 0x814
   802c4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   802c8:	6818      	ldr	r0, [r3, #0]
}
   802ca:	f000 0001 	and.w	r0, r0, #1
   802ce:	4770      	bx	lr

000802d0 <plot_values>:
#include "io_uart.h"

uint8_t valuesSet = 0;
uint8_t done = 112;

void plot_values(void *p){
   802d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802d4:	b084      	sub	sp, #16
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = 100;		//ms
	xLastWakeTime = xTaskGetTickCount();
   802d6:	f242 4351 	movw	r3, #9297	; 0x2451
   802da:	f2c0 0308 	movt	r3, #8
   802de:	4798      	blx	r3
   802e0:	ae04      	add	r6, sp, #16
   802e2:	f846 0d04 	str.w	r0, [r6, #-4]!
	
	uart_config(115200);
   802e6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
   802ea:	f240 216d 	movw	r1, #621	; 0x26d
   802ee:	f2c0 0108 	movt	r1, #8
   802f2:	4788      	blx	r1

	while(1){
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   802f4:	f242 77f1 	movw	r7, #10225	; 0x27f1
   802f8:	f2c0 0708 	movt	r7, #8
			while(uart_receiver_ready())
   802fc:	f240 24c1 	movw	r4, #705	; 0x2c1
   80300:	f2c0 0408 	movt	r4, #8
			{
				//uint8_t done = 112;
				char matlabStr[10];
				sprintf(matlabStr, "%d", done);
   80304:	f247 58e8 	movw	r8, #30184	; 0x75e8
   80308:	f2c0 0808 	movt	r8, #8
	xLastWakeTime = xTaskGetTickCount();
	
	uart_config(115200);

	while(1){
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   8030c:	4630      	mov	r0, r6
   8030e:	f04f 0164 	mov.w	r1, #100	; 0x64
   80312:	47b8      	blx	r7
			while(uart_receiver_ready())
			{
				//uint8_t done = 112;
				char matlabStr[10];
				sprintf(matlabStr, "%d", done);
   80314:	f240 0000 	movw	r0, #0
   80318:	4605      	mov	r5, r0
   8031a:	f2c2 0507 	movt	r5, #8199	; 0x2007
	
	uart_config(115200);

	while(1){
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
			while(uart_receiver_ready())
   8031e:	e011      	b.n	80344 <plot_values+0x74>
			{
				//uint8_t done = 112;
				char matlabStr[10];
				sprintf(matlabStr, "%d", done);
   80320:	4668      	mov	r0, sp
   80322:	4641      	mov	r1, r8
   80324:	782a      	ldrb	r2, [r5, #0]
   80326:	f643 63c9 	movw	r3, #16073	; 0x3ec9
   8032a:	f2c0 0308 	movt	r3, #8
   8032e:	4798      	blx	r3
				printf("%s\n",matlabStr);
   80330:	f247 50ec 	movw	r0, #30188	; 0x75ec
   80334:	f2c0 0008 	movt	r0, #8
   80338:	4669      	mov	r1, sp
   8033a:	f643 5229 	movw	r2, #15657	; 0x3d29
   8033e:	f2c0 0208 	movt	r2, #8
   80342:	4790      	blx	r2
	
	uart_config(115200);

	while(1){
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
			while(uart_receiver_ready())
   80344:	47a0      	blx	r4
   80346:	2800      	cmp	r0, #0
   80348:	d0e0      	beq.n	8030c <plot_values+0x3c>
   8034a:	e7e9      	b.n	80320 <plot_values+0x50>

0008034c <motorshield_setup>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8034c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   80350:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80354:	f44f 7280 	mov.w	r2, #256	; 0x100
   80358:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8035a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8035e:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80360:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80364:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80368:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   8036c:	6101      	str	r1, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8036e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80372:	6301      	str	r1, [r0, #48]	; 0x30
   80374:	4770      	bx	lr
   80376:	bf00      	nop

00080378 <pid_control>:
uint8_t valuesSet;


/* PID control */
void pid_control(void *p)
{	
   80378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8037c:	b087      	sub	sp, #28
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = 100;		//ms
	xLastWakeTime = xTaskGetTickCount();
   8037e:	f242 4351 	movw	r3, #9297	; 0x2451
   80382:	f2c0 0308 	movt	r3, #8
   80386:	4798      	blx	r3
   80388:	9005      	str	r0, [sp, #20]
	
	//if(valuesSet == 1){
		while(1)
		{
				current_value = sensor_read();
   8038a:	f240 6259 	movw	r2, #1625	; 0x659
   8038e:	f2c0 0208 	movt	r2, #8
   80392:	4790      	blx	r2
   80394:	f64a 3138 	movw	r1, #43832	; 0xab38
   80398:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8039c:	8008      	strh	r0, [r1, #0]
				error = setpoint - current_value;
   8039e:	f240 0418 	movw	r4, #24
   803a2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   803a6:	8827      	ldrh	r7, [r4, #0]
   803a8:	1a38      	subs	r0, r7, r0
   803aa:	b287      	uxth	r7, r0
   803ac:	f64a 3540 	movw	r5, #43840	; 0xab40
   803b0:	f2c2 0507 	movt	r5, #8199	; 0x2007
   803b4:	802f      	strh	r7, [r5, #0]
		
				sum = (sum + prev_error);
   803b6:	f640 1620 	movw	r6, #2336	; 0x920
   803ba:	f2c2 0607 	movt	r6, #8199	; 0x2007
   803be:	f9b6 b000 	ldrsh.w	fp, [r6]
   803c2:	f64a 333c 	movw	r3, #43836	; 0xab3c
   803c6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   803ca:	681a      	ldr	r2, [r3, #0]
   803cc:	eb0b 0002 	add.w	r0, fp, r2
   803d0:	6018      	str	r0, [r3, #0]
				integral = (sum * (dT/Ti));
   803d2:	f240 0128 	movw	r1, #40	; 0x28
   803d6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803da:	e9d1 4500 	ldrd	r4, r5, [r1]
   803de:	e9cd 4502 	strd	r4, r5, [sp, #8]
   803e2:	f243 7825 	movw	r8, #14117	; 0x3725
   803e6:	f2c0 0808 	movt	r8, #8
   803ea:	47c0      	blx	r8
   803ec:	e9cd 0100 	strd	r0, r1, [sp]
   803f0:	f643 2445 	movw	r4, #14917	; 0x3a45
   803f4:	f2c0 0408 	movt	r4, #8
   803f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   803fc:	f240 0520 	movw	r5, #32
   80400:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80404:	e9d5 2300 	ldrd	r2, r3, [r5]
   80408:	47a0      	blx	r4
   8040a:	4602      	mov	r2, r0
   8040c:	460b      	mov	r3, r1
   8040e:	f243 76f1 	movw	r6, #14321	; 0x37f1
   80412:	f2c0 0608 	movt	r6, #8
   80416:	e9dd 0100 	ldrd	r0, r1, [sp]
   8041a:	47b0      	blx	r6
   8041c:	f643 4a65 	movw	sl, #15461	; 0x3c65
   80420:	f2c0 0a08 	movt	sl, #8
   80424:	47d0      	blx	sl
   80426:	b283      	uxth	r3, r0
   80428:	9300      	str	r3, [sp, #0]
   8042a:	f640 121c 	movw	r2, #2332	; 0x91c
   8042e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80432:	8010      	strh	r0, [r2, #0]
				derivate = ((Td/dT) * (error - prev_error));
   80434:	fa0f f987 	sxth.w	r9, r7
   80438:	f240 0010 	movw	r0, #16
   8043c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80440:	c803      	ldmia	r0, {r0, r1}
   80442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80446:	47a0      	blx	r4
   80448:	4604      	mov	r4, r0
   8044a:	460d      	mov	r5, r1
   8044c:	ebcb 0009 	rsb	r0, fp, r9
   80450:	47c0      	blx	r8
   80452:	4602      	mov	r2, r0
   80454:	460b      	mov	r3, r1
   80456:	4620      	mov	r0, r4
   80458:	4629      	mov	r1, r5
   8045a:	47b0      	blx	r6
   8045c:	47d0      	blx	sl
   8045e:	b281      	uxth	r1, r0
   80460:	f640 131e 	movw	r3, #2334	; 0x91e
   80464:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80468:	8018      	strh	r0, [r3, #0]
				PID = (Kp* (error + integral + derivate))*100;
   8046a:	9a00      	ldr	r2, [sp, #0]
   8046c:	eb09 0002 	add.w	r0, r9, r2
   80470:	1840      	adds	r0, r0, r1
   80472:	47c0      	blx	r8
   80474:	f240 0408 	movw	r4, #8
   80478:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8047c:	e9d4 2300 	ldrd	r2, r3, [r4]
   80480:	47b0      	blx	r6
   80482:	f04f 0200 	mov.w	r2, #0
   80486:	f04f 0300 	mov.w	r3, #0
   8048a:	f2c4 0359 	movt	r3, #16473	; 0x4059
   8048e:	47b0      	blx	r6
   80490:	f643 4615 	movw	r6, #15381	; 0x3c15
   80494:	f2c0 0608 	movt	r6, #8
   80498:	47b0      	blx	r6
   8049a:	f64a 353a 	movw	r5, #43834	; 0xab3a
   8049e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   804a2:	8028      	strh	r0, [r5, #0]
				prev_error = error;
   804a4:	f640 1120 	movw	r1, #2336	; 0x920
   804a8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   804ac:	800f      	strh	r7, [r1, #0]
				//printf("C: %d, E: %d, P: %d\n", current_value, error, PID);
		
				if(PID > 800)
   804ae:	b207      	sxth	r7, r0
   804b0:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   804b4:	dd07      	ble.n	804c6 <pid_control+0x14e>
				{
					PID = 800;
   804b6:	f64a 363a 	movw	r6, #43834	; 0xab3a
   804ba:	f2c2 0607 	movt	r6, #8199	; 0x2007
   804be:	f44f 7548 	mov.w	r5, #800	; 0x320
   804c2:	8035      	strh	r5, [r6, #0]
   804c4:	e00e      	b.n	804e4 <pid_control+0x16c>
				}
				if(PID < 0)
   804c6:	f64a 333a 	movw	r3, #43834	; 0xab3a
   804ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   804ce:	f9b3 2000 	ldrsh.w	r2, [r3]
   804d2:	2a00      	cmp	r2, #0
   804d4:	da06      	bge.n	804e4 <pid_control+0x16c>
				{
					PID = 0;
   804d6:	f64a 303a 	movw	r0, #43834	; 0xab3a
   804da:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804de:	f04f 0400 	mov.w	r4, #0
   804e2:	8004      	strh	r4, [r0, #0]
				}
				pwm_update(PID);
   804e4:	f64a 313a 	movw	r1, #43834	; 0xab3a
   804e8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   804ec:	f9b1 0000 	ldrsh.w	r0, [r1]
   804f0:	f240 57b5 	movw	r7, #1461	; 0x5b5
   804f4:	f2c0 0708 	movt	r7, #8
   804f8:	47b8      	blx	r7
				//printf("PID: %d\n", PID);	
			vTaskDelayUntil( &xLastWakeTime, xTimeIncrement); /* Wait for the next cycle */
   804fa:	a805      	add	r0, sp, #20
   804fc:	f04f 0164 	mov.w	r1, #100	; 0x64
   80500:	f242 73f1 	movw	r3, #10225	; 0x27f1
   80504:	f2c0 0308 	movt	r3, #8
   80508:	4798      	blx	r3
				
			}
   8050a:	e73e      	b.n	8038a <pid_control+0x12>

0008050c <pwm_setup>:
static pwm_channel_t pwm_channel_instance;			// Define the PWM channel instance in order to configure channel


/* Initialize PWM for pin DAC1 */
void pwm_setup(void)
{
   8050c:	b530      	push	{r4, r5, lr}
   8050e:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);					// Enable the module clock for PWM peripheral
   80510:	f04f 0024 	mov.w	r0, #36	; 0x24
   80514:	f640 53f9 	movw	r3, #3577	; 0xdf9
   80518:	f2c0 0308 	movt	r3, #8
   8051c:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);			// Disable channel 0
   8051e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   80522:	f2c4 0509 	movt	r5, #16393	; 0x4009
   80526:	4628      	mov	r0, r5
   80528:	f04f 0100 	mov.w	r1, #0
   8052c:	f241 1249 	movw	r2, #4425	; 0x1149
   80530:	f2c0 0208 	movt	r2, #8
   80534:	4790      	blx	r2
	
	pwm_clock_t clock_setting = {					// Setup clock for PWM module
   80536:	f244 2040 	movw	r0, #16960	; 0x4240
   8053a:	f2c0 000f 	movt	r0, #15
   8053e:	9001      	str	r0, [sp, #4]
   80540:	f04f 0400 	mov.w	r4, #0
   80544:	9402      	str	r4, [sp, #8]
   80546:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   8054a:	f2c0 5101 	movt	r1, #1281	; 0x501
   8054e:	9103      	str	r1, [sp, #12]
		.ul_clka = 1000 * 1000,						// Clock A is configured, frequencey = 1KHz, period = 1000
		.ul_clkb = 0,								// Clock B is not used
		.ul_mck = sysclk_get_cpu_hz()				// System main clock = 48MHz   (eller sysclk_get_cpu_hz() ?), sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   80550:	4628      	mov	r0, r5
   80552:	a901      	add	r1, sp, #4
   80554:	f640 73a1 	movw	r3, #4001	; 0xfa1
   80558:	f2c0 0308 	movt	r3, #8
   8055c:	4798      	blx	r3
	
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;			// Clock A as source clock
   8055e:	f640 1124 	movw	r1, #2340	; 0x924
   80562:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80566:	f04f 020b 	mov.w	r2, #11
   8056a:	604a      	str	r2, [r1, #4]
	pwm_channel_instance.ul_period = 1000;
   8056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80570:	6108      	str	r0, [r1, #16]
	pwm_channel_instance.ul_duty = 0;
   80572:	60cc      	str	r4, [r1, #12]
	pwm_channel_instance.channel = PWM_CHANNEL;						// Configure channel 0
   80574:	600c      	str	r4, [r1, #0]
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;				// Period is left-aligned
   80576:	810c      	strh	r4, [r1, #8]
	pwm_channel_instance.polarity = PWM_LOW;						// Output waveform starts at a low level
   80578:	728c      	strb	r4, [r1, #10]
	
	pwm_channel_init(PWM, &pwm_channel_instance);					// Initialize channel instance
   8057a:	4628      	mov	r0, r5
   8057c:	f640 72ed 	movw	r2, #4077	; 0xfed
   80580:	f2c0 0208 	movt	r2, #8
   80584:	4790      	blx	r2
	pio_set_peripheral(PIOB, PIO_PERIPH_B, PIO_PB16B_PWML0);		// Setup PWM for pin DAC1
   80586:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   8058a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8058e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80596:	f640 1355 	movw	r3, #2389	; 0x955
   8059a:	f2c0 0308 	movt	r3, #8
   8059e:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL);							// Enable channel 6
   805a0:	4628      	mov	r0, r5
   805a2:	4621      	mov	r1, r4
   805a4:	f241 123d 	movw	r2, #4413	; 0x113d
   805a8:	f2c0 0208 	movt	r2, #8
   805ac:	4790      	blx	r2
}
   805ae:	b005      	add	sp, #20
   805b0:	bd30      	pop	{r4, r5, pc}
   805b2:	bf00      	nop

000805b4 <pwm_update>:


/* Update duty cycle */
void pwm_update(int duty_cycle)
{
   805b4:	b508      	push	{r3, lr}
   805b6:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel_instance, duty_cycle);
   805b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   805bc:	f2c4 0009 	movt	r0, #16393	; 0x4009
   805c0:	f640 1124 	movw	r1, #2340	; 0x924
   805c4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   805c8:	f241 1319 	movw	r3, #4377	; 0x1119
   805cc:	f2c0 0308 	movt	r3, #8
   805d0:	4798      	blx	r3
   805d2:	bd08      	pop	{r3, pc}

000805d4 <adc_setup>:
#include "SensorFunctions.h"


/* Initialize ADC for pin A8 */
void adc_setup(void)
{
   805d4:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);							// Enable specified peripheral clock
   805d6:	f04f 0025 	mov.w	r0, #37	; 0x25
   805da:	f640 53f9 	movw	r3, #3577	; 0xdf9
   805de:	f2c0 0308 	movt	r3, #8
   805e2:	4798      	blx	r3
	
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);		// Initialize the given ADC with the specified ADC clock and startup time
   805e4:	f04f 0400 	mov.w	r4, #0
   805e8:	f2c4 040c 	movt	r4, #16396	; 0x400c
   805ec:	4620      	mov	r0, r4
   805ee:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   805f2:	f6c0 2103 	movt	r1, #2563	; 0xa03
   805f6:	f244 2240 	movw	r2, #16960	; 0x4240
   805fa:	f2c0 020f 	movt	r2, #15
   805fe:	f04f 0308 	mov.w	r3, #8
   80602:	f640 0599 	movw	r5, #2201	; 0x899
   80606:	f2c0 0508 	movt	r5, #8
   8060a:	47a8      	blx	r5
															// sysclk_get_main_hz() is used to get master clock frequency
															// ADC_CLOCK gives the ADC clock frequency
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);	// Configure ADC timing
   8060c:	4620      	mov	r0, r4
   8060e:	f04f 0100 	mov.w	r1, #0
   80612:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80616:	f04f 0301 	mov.w	r3, #1
   8061a:	f640 1501 	movw	r5, #2305	; 0x901
   8061e:	f2c0 0508 	movt	r5, #8
   80622:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);			// Set ADC resolution with 12 bits, 2^12 = 4096 (voltage read converted to number between 0-4095)
   80624:	4620      	mov	r0, r4
   80626:	f04f 0100 	mov.w	r1, #0
   8062a:	f640 02e1 	movw	r2, #2273	; 0x8e1
   8062e:	f2c0 0208 	movt	r2, #8
   80632:	4790      	blx	r2
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// Enable specified ADC channel (pin A8)
   80634:	4620      	mov	r0, r4
   80636:	f04f 010a 	mov.w	r1, #10
   8063a:	f640 1329 	movw	r3, #2345	; 0x929
   8063e:	f2c0 0308 	movt	r3, #8
   80642:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// Configure software conversion trigger
   80644:	4620      	mov	r0, r4
   80646:	f04f 0100 	mov.w	r1, #0
   8064a:	460a      	mov	r2, r1
   8064c:	f640 03f1 	movw	r3, #2289	; 0x8f1
   80650:	f2c0 0308 	movt	r3, #8
   80654:	4798      	blx	r3
   80656:	bd38      	pop	{r3, r4, r5, pc}

00080658 <sensor_read>:
* 45-40cm = 1660
* 40-35cm = 1510
* 35-30cm = 1380	max value
*/
uint16_t sensor_read(void)
{
   80658:	b510      	push	{r4, lr}
	uint16_t distance = 0;	
	
	while(1)
	{	
		adc_start(ADC);
   8065a:	f04f 0400 	mov.w	r4, #0
   8065e:	f2c4 040c 	movt	r4, #16396	; 0x400c
   80662:	4620      	mov	r0, r4
   80664:	f640 1321 	movw	r3, #2337	; 0x921
   80668:	f2c0 0308 	movt	r3, #8
   8066c:	4798      	blx	r3
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
   8066e:	4620      	mov	r0, r4
   80670:	f04f 010a 	mov.w	r1, #10
   80674:	f640 1235 	movw	r2, #2357	; 0x935
   80678:	f2c0 0208 	movt	r2, #8
   8067c:	4790      	blx	r2
   8067e:	b280      	uxth	r0, r0
		//printf("sensor: %d\n", sensor_value);
	
		if(sensor_value > 2145)
   80680:	f640 0161 	movw	r1, #2145	; 0x861
   80684:	4288      	cmp	r0, r1
   80686:	d815      	bhi.n	806b4 <sensor_read+0x5c>
		{
			distance = 30;
		}
		else if(sensor_value < 2145 && sensor_value >= 2090)
   80688:	f6a0 032a 	subw	r3, r0, #2090	; 0x82a
   8068c:	b29a      	uxth	r2, r3
   8068e:	2a36      	cmp	r2, #54	; 0x36
   80690:	d913      	bls.n	806ba <sensor_read+0x62>
		{
			distance = 35;
		}
		else if(sensor_value < 2090 && sensor_value >= 2015)
   80692:	f2a0 71df 	subw	r1, r0, #2015	; 0x7df
   80696:	b28b      	uxth	r3, r1
   80698:	2b4a      	cmp	r3, #74	; 0x4a
   8069a:	d911      	bls.n	806c0 <sensor_read+0x68>
		{
			distance = 40;
		}
		else if(sensor_value < 2015 && sensor_value >= 1890)
   8069c:	f2a0 7262 	subw	r2, r0, #1890	; 0x762
   806a0:	b291      	uxth	r1, r2
   806a2:	297c      	cmp	r1, #124	; 0x7c
   806a4:	d90f      	bls.n	806c6 <sensor_read+0x6e>
* 40-35cm = 1510
* 35-30cm = 1380	max value
*/
uint16_t sensor_read(void)
{
	uint16_t distance = 0;	
   806a6:	f240 7361 	movw	r3, #1889	; 0x761
   806aa:	4298      	cmp	r0, r3
   806ac:	bf94      	ite	ls
   806ae:	2032      	movls	r0, #50	; 0x32
   806b0:	2000      	movhi	r0, #0
   806b2:	bd10      	pop	{r4, pc}
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
		//printf("sensor: %d\n", sensor_value);
	
		if(sensor_value > 2145)
		{
			distance = 30;
   806b4:	f04f 001e 	mov.w	r0, #30
   806b8:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 2145 && sensor_value >= 2090)
		{
			distance = 35;
   806ba:	f04f 0023 	mov.w	r0, #35	; 0x23
   806be:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 2090 && sensor_value >= 2015)
		{
			distance = 40;
   806c0:	f04f 0028 	mov.w	r0, #40	; 0x28
   806c4:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 2015 && sensor_value >= 1890)
		{
			distance = 45;
   806c6:	f04f 002d 	mov.w	r0, #45	; 0x2d
		//printf("Sensor value: %d, Distance: %d\n", sensor_value, distance);
		return distance;
		
	}
	
}
   806ca:	bd10      	pop	{r4, pc}

000806cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   806cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   806d0:	460c      	mov	r4, r1
   806d2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   806d4:	bb48      	cbnz	r0, 8072a <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   806d6:	2a00      	cmp	r2, #0
   806d8:	dd2b      	ble.n	80732 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   806da:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   806dc:	f64a 364c 	movw	r6, #43852	; 0xab4c
   806e0:	f2c2 0607 	movt	r6, #8199	; 0x2007
   806e4:	f64a 3544 	movw	r5, #43844	; 0xab44
   806e8:	f2c2 0507 	movt	r5, #8199	; 0x2007
   806ec:	ea6f 0901 	mvn.w	r9, r1
   806f0:	eb07 0009 	add.w	r0, r7, r9
   806f4:	f000 0901 	and.w	r9, r0, #1
   806f8:	6830      	ldr	r0, [r6, #0]
   806fa:	682b      	ldr	r3, [r5, #0]
   806fc:	4798      	blx	r3
		ptr++;
   806fe:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80702:	42bc      	cmp	r4, r7
   80704:	d119      	bne.n	8073a <_read+0x6e>
   80706:	e00d      	b.n	80724 <_read+0x58>
		ptr_get(stdio_base, ptr);
   80708:	6830      	ldr	r0, [r6, #0]
   8070a:	682b      	ldr	r3, [r5, #0]
   8070c:	4621      	mov	r1, r4
   8070e:	4798      	blx	r3
		ptr++;
   80710:	f104 0401 	add.w	r4, r4, #1
   80714:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80716:	6830      	ldr	r0, [r6, #0]
   80718:	682a      	ldr	r2, [r5, #0]
   8071a:	4790      	blx	r2
		ptr++;
   8071c:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80720:	42bc      	cmp	r4, r7
   80722:	d1f1      	bne.n	80708 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80724:	4640      	mov	r0, r8
   80726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8072a:	f04f 30ff 	mov.w	r0, #4294967295
   8072e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   80732:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8073a:	f1b9 0f00 	cmp.w	r9, #0
   8073e:	d0e3      	beq.n	80708 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80740:	6830      	ldr	r0, [r6, #0]
   80742:	682a      	ldr	r2, [r5, #0]
   80744:	4621      	mov	r1, r4
   80746:	4790      	blx	r2
		ptr++;
   80748:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8074c:	42bc      	cmp	r4, r7
   8074e:	d1db      	bne.n	80708 <_read+0x3c>
   80750:	e7e8      	b.n	80724 <_read+0x58>
   80752:	bf00      	nop

00080754 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80758:	460d      	mov	r5, r1
   8075a:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8075c:	f100 30ff 	add.w	r0, r0, #4294967295
   80760:	2802      	cmp	r0, #2
   80762:	d824      	bhi.n	807ae <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   80764:	b332      	cbz	r2, 807b4 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80766:	f64a 364c 	movw	r6, #43852	; 0xab4c
   8076a:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8076e:	f64a 3748 	movw	r7, #43848	; 0xab48
   80772:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80776:	f04f 0400 	mov.w	r4, #0
   8077a:	f102 39ff 	add.w	r9, r2, #4294967295
   8077e:	f009 0901 	and.w	r9, r9, #1
   80782:	6830      	ldr	r0, [r6, #0]
   80784:	683b      	ldr	r3, [r7, #0]
   80786:	5d09      	ldrb	r1, [r1, r4]
   80788:	4798      	blx	r3
   8078a:	42a0      	cmp	r0, r4
   8078c:	da1a      	bge.n	807c4 <_write+0x70>
   8078e:	e014      	b.n	807ba <_write+0x66>
   80790:	6830      	ldr	r0, [r6, #0]
   80792:	683b      	ldr	r3, [r7, #0]
   80794:	5d29      	ldrb	r1, [r5, r4]
   80796:	4798      	blx	r3
   80798:	2800      	cmp	r0, #0
   8079a:	db0e      	blt.n	807ba <_write+0x66>
			return -1;
		}
		++nChars;
   8079c:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   807a0:	6830      	ldr	r0, [r6, #0]
   807a2:	683a      	ldr	r2, [r7, #0]
   807a4:	5d29      	ldrb	r1, [r5, r4]
   807a6:	4790      	blx	r2
   807a8:	2800      	cmp	r0, #0
   807aa:	da1d      	bge.n	807e8 <_write+0x94>
   807ac:	e005      	b.n	807ba <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   807ae:	f04f 34ff 	mov.w	r4, #4294967295
   807b2:	e004      	b.n	807be <_write+0x6a>
	}

	for (; len != 0; --len) {
   807b4:	f04f 0400 	mov.w	r4, #0
   807b8:	e001      	b.n	807be <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   807ba:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   807be:	4620      	mov	r0, r4
   807c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   807c4:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   807c8:	45a0      	cmp	r8, r4
   807ca:	d0f8      	beq.n	807be <_write+0x6a>
   807cc:	f1b9 0f00 	cmp.w	r9, #0
   807d0:	d0de      	beq.n	80790 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   807d2:	6830      	ldr	r0, [r6, #0]
   807d4:	683a      	ldr	r2, [r7, #0]
   807d6:	5d29      	ldrb	r1, [r5, r4]
   807d8:	4790      	blx	r2
   807da:	2800      	cmp	r0, #0
   807dc:	dbed      	blt.n	807ba <_write+0x66>
			return -1;
		}
		++nChars;
   807de:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   807e2:	45a0      	cmp	r8, r4
   807e4:	d1d4      	bne.n	80790 <_write+0x3c>
   807e6:	e7ea      	b.n	807be <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   807e8:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   807ec:	45a0      	cmp	r8, r4
   807ee:	d1cf      	bne.n	80790 <_write+0x3c>
   807f0:	e7e5      	b.n	807be <_write+0x6a>
   807f2:	bf00      	nop

000807f4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   807f4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   807f6:	f641 2350 	movw	r3, #6736	; 0x1a50
   807fa:	f2c4 030e 	movt	r3, #16398	; 0x400e
   807fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80802:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80804:	f04f 000b 	mov.w	r0, #11
   80808:	f640 54f9 	movw	r4, #3577	; 0xdf9
   8080c:	f2c0 0408 	movt	r4, #8
   80810:	47a0      	blx	r4
   80812:	f04f 000c 	mov.w	r0, #12
   80816:	47a0      	blx	r4
   80818:	f04f 000d 	mov.w	r0, #13
   8081c:	47a0      	blx	r4
   8081e:	f04f 000e 	mov.w	r0, #14
   80822:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80824:	f04f 003b 	mov.w	r0, #59	; 0x3b
   80828:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8082c:	f640 242d 	movw	r4, #2605	; 0xa2d
   80830:	f2c0 0408 	movt	r4, #8
   80834:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80836:	f04f 0055 	mov.w	r0, #85	; 0x55
   8083a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8083e:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80840:	f04f 0056 	mov.w	r0, #86	; 0x56
   80844:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80848:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8084a:	f04f 0068 	mov.w	r0, #104	; 0x68
   8084e:	f04f 0179 	mov.w	r1, #121	; 0x79
   80852:	f6c2 0100 	movt	r1, #10240	; 0x2800
   80856:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80858:	f04f 005c 	mov.w	r0, #92	; 0x5c
   8085c:	f04f 0101 	mov.w	r1, #1
   80860:	f6c2 0100 	movt	r1, #10240	; 0x2800
   80864:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80866:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   8086a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8086e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80872:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80876:	f640 332d 	movw	r3, #2861	; 0xb2d
   8087a:	f2c0 0308 	movt	r3, #8
   8087e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80880:	f04f 002b 	mov.w	r0, #43	; 0x2b
   80884:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80888:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8088a:	f04f 002a 	mov.w	r0, #42	; 0x2a
   8088e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80892:	47a0      	blx	r4
   80894:	bd10      	pop	{r4, pc}
   80896:	bf00      	nop

00080898 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const uint8_t uc_startup)
{
   80898:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8089a:	f04f 0401 	mov.w	r4, #1
   8089e:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   808a0:	f04f 0400 	mov.w	r4, #0
   808a4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   808a6:	f240 2502 	movw	r5, #514	; 0x202
   808aa:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   808ae:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   808b2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   808b6:	6845      	ldr	r5, [r0, #4]
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   808b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   808bc:	fbb1 f1f2 	udiv	r1, r1, r2
   808c0:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   808c4:	ea4f 6102 	mov.w	r1, r2, lsl #24
			((uc_startup << ADC_MR_STARTUP_Pos) &
   808c8:	ea4f 4303 	mov.w	r3, r3, lsl #16
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   808cc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
   808d0:	ea42 4111 	orr.w	r1, r2, r1, lsr #16
   808d4:	430d      	orrs	r5, r1
   808d6:	6045      	str	r5, [r0, #4]
			((uc_startup << ADC_MR_STARTUP_Pos) &
			ADC_MR_STARTUP_Msk);
	return 0;
}
   808d8:	4620      	mov	r0, r4
   808da:	bc30      	pop	{r4, r5}
   808dc:	4770      	bx	lr
   808de:	bf00      	nop

000808e0 <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   808e0:	6843      	ldr	r3, [r0, #4]
   808e2:	ea4f 1101 	mov.w	r1, r1, lsl #4
   808e6:	f001 0210 	and.w	r2, r1, #16
   808ea:	4313      	orrs	r3, r2
   808ec:	6043      	str	r3, [r0, #4]
   808ee:	4770      	bx	lr

000808f0 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   808f0:	6843      	ldr	r3, [r0, #4]
   808f2:	4319      	orrs	r1, r3
   808f4:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   808f8:	b2d3      	uxtb	r3, r2
   808fa:	4319      	orrs	r1, r3
   808fc:	6041      	str	r1, [r0, #4]
   808fe:	4770      	bx	lr

00080900 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80900:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80902:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80904:	4322      	orrs	r2, r4
   80906:	ea4f 6101 	mov.w	r1, r1, lsl #24
   8090a:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   8090e:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80910:	ea4f 7303 	mov.w	r3, r3, lsl #28
   80914:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   80918:	430a      	orrs	r2, r1
   8091a:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   8091c:	bc10      	pop	{r4}
   8091e:	4770      	bx	lr

00080920 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80920:	f04f 0302 	mov.w	r3, #2
   80924:	6003      	str	r3, [r0, #0]
   80926:	4770      	bx	lr

00080928 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80928:	f04f 0301 	mov.w	r3, #1
   8092c:	fa03 f101 	lsl.w	r1, r3, r1
   80930:	6101      	str	r1, [r0, #16]
   80932:	4770      	bx	lr

00080934 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   80934:	290f      	cmp	r1, #15
   80936:	d804      	bhi.n	80942 <adc_get_channel_value+0xe>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   80938:	f101 0114 	add.w	r1, r1, #20
   8093c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   80940:	4770      	bx	lr
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   80942:	f04f 0000 	mov.w	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   80946:	4770      	bx	lr

00080948 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80948:	b10a      	cbz	r2, 8094e <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   8094a:	6641      	str	r1, [r0, #100]	; 0x64
   8094c:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8094e:	6601      	str	r1, [r0, #96]	; 0x60
   80950:	4770      	bx	lr
   80952:	bf00      	nop

00080954 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80954:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80956:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8095a:	d016      	beq.n	8098a <pio_set_peripheral+0x36>
   8095c:	d804      	bhi.n	80968 <pio_set_peripheral+0x14>
   8095e:	b1c9      	cbz	r1, 80994 <pio_set_peripheral+0x40>
   80960:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80964:	d115      	bne.n	80992 <pio_set_peripheral+0x3e>
   80966:	e009      	b.n	8097c <pio_set_peripheral+0x28>
   80968:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8096c:	d012      	beq.n	80994 <pio_set_peripheral+0x40>
   8096e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80972:	d00f      	beq.n	80994 <pio_set_peripheral+0x40>
   80974:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80978:	d10b      	bne.n	80992 <pio_set_peripheral+0x3e>
   8097a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8097c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8097e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80980:	400b      	ands	r3, r1
   80982:	ea23 0302 	bic.w	r3, r3, r2
   80986:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80988:	e003      	b.n	80992 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8098a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8098c:	ea42 0103 	orr.w	r1, r2, r3
   80990:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80992:	6042      	str	r2, [r0, #4]
   80994:	4770      	bx	lr
   80996:	bf00      	nop

00080998 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80998:	6441      	str	r1, [r0, #68]	; 0x44
   8099a:	4770      	bx	lr

0008099c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8099e:	4604      	mov	r4, r0
   809a0:	460d      	mov	r5, r1
   809a2:	4616      	mov	r6, r2
   809a4:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   809a6:	f640 1399 	movw	r3, #2457	; 0x999
   809aa:	f2c0 0308 	movt	r3, #8
   809ae:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   809b0:	4620      	mov	r0, r4
   809b2:	4629      	mov	r1, r5
   809b4:	9a06      	ldr	r2, [sp, #24]
   809b6:	f640 1349 	movw	r3, #2377	; 0x949
   809ba:	f2c0 0308 	movt	r3, #8
   809be:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   809c0:	b10f      	cbz	r7, 809c6 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   809c2:	6525      	str	r5, [r4, #80]	; 0x50
   809c4:	e000      	b.n	809c8 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   809c6:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   809c8:	b10e      	cbz	r6, 809ce <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   809ca:	6325      	str	r5, [r4, #48]	; 0x30
   809cc:	e000      	b.n	809d0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   809ce:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   809d0:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   809d2:	6025      	str	r5, [r4, #0]
   809d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   809d6:	bf00      	nop

000809d8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   809d8:	b570      	push	{r4, r5, r6, lr}
   809da:	4604      	mov	r4, r0
   809dc:	460d      	mov	r5, r1
   809de:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   809e0:	f640 1399 	movw	r3, #2457	; 0x999
   809e4:	f2c0 0308 	movt	r3, #8
   809e8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   809ea:	4620      	mov	r0, r4
   809ec:	4629      	mov	r1, r5
   809ee:	f006 0201 	and.w	r2, r6, #1
   809f2:	f640 1349 	movw	r3, #2377	; 0x949
   809f6:	f2c0 0308 	movt	r3, #8
   809fa:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   809fc:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   80a00:	bf14      	ite	ne
   80a02:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80a04:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80a06:	f016 0f02 	tst.w	r6, #2
   80a0a:	d002      	beq.n	80a12 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   80a0c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   80a10:	e004      	b.n	80a1c <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80a12:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   80a16:	bf18      	it	ne
   80a18:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80a1c:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   80a1e:	6025      	str	r5, [r4, #0]
   80a20:	bd70      	pop	{r4, r5, r6, pc}
   80a22:	bf00      	nop

00080a24 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80a24:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80a26:	4770      	bx	lr

00080a28 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80a28:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80a2a:	4770      	bx	lr

00080a2c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a2e:	b083      	sub	sp, #12
   80a30:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80a32:	ea4f 1650 	mov.w	r6, r0, lsr #5
   80a36:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   80a3a:	f201 7207 	addw	r2, r1, #1799	; 0x707
   80a3e:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a42:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   80a46:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80a4a:	d042      	beq.n	80ad2 <pio_configure_pin+0xa6>
   80a4c:	d806      	bhi.n	80a5c <pio_configure_pin+0x30>
   80a4e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80a52:	d00a      	beq.n	80a6a <pio_configure_pin+0x3e>
   80a54:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a58:	d164      	bne.n	80b24 <pio_configure_pin+0xf8>
   80a5a:	e020      	b.n	80a9e <pio_configure_pin+0x72>
   80a5c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a60:	d046      	beq.n	80af0 <pio_configure_pin+0xc4>
   80a62:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a66:	d15d      	bne.n	80b24 <pio_configure_pin+0xf8>
   80a68:	e042      	b.n	80af0 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80a6a:	f000 071f 	and.w	r7, r0, #31
   80a6e:	f04f 0401 	mov.w	r4, #1
   80a72:	fa04 f707 	lsl.w	r7, r4, r7
   80a76:	4630      	mov	r0, r6
   80a78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a7c:	463a      	mov	r2, r7
   80a7e:	f640 1355 	movw	r3, #2389	; 0x955
   80a82:	f2c0 0308 	movt	r3, #8
   80a86:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80a88:	4630      	mov	r0, r6
   80a8a:	4639      	mov	r1, r7
   80a8c:	ea05 0204 	and.w	r2, r5, r4
   80a90:	f640 1349 	movw	r3, #2377	; 0x949
   80a94:	f2c0 0308 	movt	r3, #8
   80a98:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a9a:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80a9c:	e044      	b.n	80b28 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a9e:	f000 001f 	and.w	r0, r0, #31
   80aa2:	f04f 0401 	mov.w	r4, #1
   80aa6:	fa04 f700 	lsl.w	r7, r4, r0
   80aaa:	4630      	mov	r0, r6
   80aac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ab0:	463a      	mov	r2, r7
   80ab2:	f640 1355 	movw	r3, #2389	; 0x955
   80ab6:	f2c0 0308 	movt	r3, #8
   80aba:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80abc:	4630      	mov	r0, r6
   80abe:	4639      	mov	r1, r7
   80ac0:	ea05 0204 	and.w	r2, r5, r4
   80ac4:	f640 1349 	movw	r3, #2377	; 0x949
   80ac8:	f2c0 0308 	movt	r3, #8
   80acc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80ace:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80ad0:	e02a      	b.n	80b28 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80ad2:	f000 021f 	and.w	r2, r0, #31
   80ad6:	f04f 0401 	mov.w	r4, #1
   80ada:	4630      	mov	r0, r6
   80adc:	fa04 f102 	lsl.w	r1, r4, r2
   80ae0:	462a      	mov	r2, r5
   80ae2:	f640 13d9 	movw	r3, #2521	; 0x9d9
   80ae6:	f2c0 0308 	movt	r3, #8
   80aea:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80aec:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80aee:	e01b      	b.n	80b28 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80af0:	f000 021f 	and.w	r2, r0, #31
   80af4:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80af8:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80afc:	ea05 0104 	and.w	r1, r5, r4
   80b00:	9100      	str	r1, [sp, #0]
   80b02:	4630      	mov	r0, r6
   80b04:	fa04 f102 	lsl.w	r1, r4, r2
   80b08:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80b0c:	bf14      	ite	ne
   80b0e:	2200      	movne	r2, #0
   80b10:	2201      	moveq	r2, #1
   80b12:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b16:	f640 159d 	movw	r5, #2461	; 0x99d
   80b1a:	f2c0 0508 	movt	r5, #8
   80b1e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80b20:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b22:	e001      	b.n	80b28 <pio_configure_pin+0xfc>

	default:
		return 0;
   80b24:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80b28:	b003      	add	sp, #12
   80b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080b2c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b2e:	b083      	sub	sp, #12
   80b30:	4607      	mov	r7, r0
   80b32:	460e      	mov	r6, r1
   80b34:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80b36:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80b3a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80b3e:	d036      	beq.n	80bae <pio_configure_pin_group+0x82>
   80b40:	d806      	bhi.n	80b50 <pio_configure_pin_group+0x24>
   80b42:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80b46:	d00a      	beq.n	80b5e <pio_configure_pin_group+0x32>
   80b48:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80b4c:	d14d      	bne.n	80bea <pio_configure_pin_group+0xbe>
   80b4e:	e01a      	b.n	80b86 <pio_configure_pin_group+0x5a>
   80b50:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80b54:	d033      	beq.n	80bbe <pio_configure_pin_group+0x92>
   80b56:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80b5a:	d146      	bne.n	80bea <pio_configure_pin_group+0xbe>
   80b5c:	e02f      	b.n	80bbe <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80b5e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b62:	4632      	mov	r2, r6
   80b64:	f640 1355 	movw	r3, #2389	; 0x955
   80b68:	f2c0 0308 	movt	r3, #8
   80b6c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80b6e:	4638      	mov	r0, r7
   80b70:	4631      	mov	r1, r6
   80b72:	f005 0201 	and.w	r2, r5, #1
   80b76:	f640 1349 	movw	r3, #2377	; 0x949
   80b7a:	f2c0 0308 	movt	r3, #8
   80b7e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b80:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80b84:	e033      	b.n	80bee <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b86:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b8a:	4632      	mov	r2, r6
   80b8c:	f640 1355 	movw	r3, #2389	; 0x955
   80b90:	f2c0 0308 	movt	r3, #8
   80b94:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80b96:	4638      	mov	r0, r7
   80b98:	4631      	mov	r1, r6
   80b9a:	f005 0201 	and.w	r2, r5, #1
   80b9e:	f640 1349 	movw	r3, #2377	; 0x949
   80ba2:	f2c0 0308 	movt	r3, #8
   80ba6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80ba8:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80bac:	e01f      	b.n	80bee <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80bae:	f640 13d9 	movw	r3, #2521	; 0x9d9
   80bb2:	f2c0 0308 	movt	r3, #8
   80bb6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80bb8:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80bbc:	e017      	b.n	80bee <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80bbe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80bc2:	f005 0001 	and.w	r0, r5, #1
   80bc6:	9000      	str	r0, [sp, #0]
   80bc8:	4638      	mov	r0, r7
   80bca:	4631      	mov	r1, r6
   80bcc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80bd0:	bf14      	ite	ne
   80bd2:	2200      	movne	r2, #0
   80bd4:	2201      	moveq	r2, #1
   80bd6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80bda:	f640 149d 	movw	r4, #2461	; 0x99d
   80bde:	f2c0 0408 	movt	r4, #8
   80be2:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80be4:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80be8:	e001      	b.n	80bee <pio_configure_pin_group+0xc2>

	default:
		return 0;
   80bea:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80bee:	b003      	add	sp, #12
   80bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80bf2:	bf00      	nop

00080bf4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bf6:	4604      	mov	r4, r0
   80bf8:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80bfa:	f640 2325 	movw	r3, #2597	; 0xa25
   80bfe:	f2c0 0308 	movt	r3, #8
   80c02:	4798      	blx	r3
   80c04:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80c06:	4620      	mov	r0, r4
   80c08:	f640 2129 	movw	r1, #2601	; 0xa29
   80c0c:	f2c0 0108 	movt	r1, #8
   80c10:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   80c12:	4005      	ands	r5, r0
   80c14:	d014      	beq.n	80c40 <pio_handler_process+0x4c>
   80c16:	4c0b      	ldr	r4, [pc, #44]	; (80c44 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   80c18:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80c1a:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   80c1e:	42b0      	cmp	r0, r6
   80c20:	d10a      	bne.n	80c38 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c22:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80c26:	4229      	tst	r1, r5
   80c28:	d006      	beq.n	80c38 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c2a:	6822      	ldr	r2, [r4, #0]
   80c2c:	4630      	mov	r0, r6
   80c2e:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80c30:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80c34:	ea25 0503 	bic.w	r5, r5, r3
   80c38:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80c3c:	2d00      	cmp	r5, #0
   80c3e:	d1eb      	bne.n	80c18 <pio_handler_process+0x24>
   80c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c42:	bf00      	nop
   80c44:	20070958 	.word	0x20070958

00080c48 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80c48:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80c4a:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80c4e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80c52:	f04f 010b 	mov.w	r1, #11
   80c56:	f640 33f5 	movw	r3, #3061	; 0xbf5
   80c5a:	f2c0 0308 	movt	r3, #8
   80c5e:	4798      	blx	r3
   80c60:	bd08      	pop	{r3, pc}
   80c62:	bf00      	nop

00080c64 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80c64:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80c66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80c6a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80c6e:	f04f 010c 	mov.w	r1, #12
   80c72:	f640 33f5 	movw	r3, #3061	; 0xbf5
   80c76:	f2c0 0308 	movt	r3, #8
   80c7a:	4798      	blx	r3
   80c7c:	bd08      	pop	{r3, pc}
   80c7e:	bf00      	nop

00080c80 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c80:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c82:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80c86:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80c8a:	f04f 010d 	mov.w	r1, #13
   80c8e:	f640 33f5 	movw	r3, #3061	; 0xbf5
   80c92:	f2c0 0308 	movt	r3, #8
   80c96:	4798      	blx	r3
   80c98:	bd08      	pop	{r3, pc}
   80c9a:	bf00      	nop

00080c9c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80c9c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80c9e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   80ca2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ca6:	f04f 010e 	mov.w	r1, #14
   80caa:	f640 33f5 	movw	r3, #3061	; 0xbf5
   80cae:	f2c0 0308 	movt	r3, #8
   80cb2:	4798      	blx	r3
   80cb4:	bd08      	pop	{r3, pc}
   80cb6:	bf00      	nop

00080cb8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80cb8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80cbc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80cc2:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80cc6:	4308      	orrs	r0, r1
   80cc8:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cca:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80ccc:	f010 0f08 	tst.w	r0, #8
   80cd0:	d007      	beq.n	80ce2 <pmc_switch_mck_to_pllack+0x2a>
   80cd2:	e010      	b.n	80cf6 <pmc_switch_mck_to_pllack+0x3e>
   80cd4:	f100 33ff 	add.w	r3, r0, #4294967295
   80cd8:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80cda:	f010 0f08 	tst.w	r0, #8
   80cde:	d038      	beq.n	80d52 <pmc_switch_mck_to_pllack+0x9a>
   80ce0:	e009      	b.n	80cf6 <pmc_switch_mck_to_pllack+0x3e>
   80ce2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80ce6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80cea:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80cee:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80cf0:	f011 0f08 	tst.w	r1, #8
   80cf4:	d0ee      	beq.n	80cd4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80cf6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80cfa:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80cfe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80d00:	f022 0303 	bic.w	r3, r2, #3
   80d04:	f043 0002 	orr.w	r0, r3, #2
   80d08:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d0a:	6e89      	ldr	r1, [r1, #104]	; 0x68
   80d0c:	f011 0f08 	tst.w	r1, #8
   80d10:	d009      	beq.n	80d26 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80d12:	f04f 0000 	mov.w	r0, #0
   80d16:	4770      	bx	lr
   80d18:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d1c:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80d1e:	f011 0f08 	tst.w	r1, #8
   80d22:	d013      	beq.n	80d4c <pmc_switch_mck_to_pllack+0x94>
   80d24:	e009      	b.n	80d3a <pmc_switch_mck_to_pllack+0x82>
   80d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80d2e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80d32:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80d34:	f010 0f08 	tst.w	r0, #8
   80d38:	d0ee      	beq.n	80d18 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80d3a:	f04f 0000 	mov.w	r0, #0
   80d3e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80d40:	f04f 0001 	mov.w	r0, #1
   80d44:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80d46:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80d4a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d4c:	3b01      	subs	r3, #1
   80d4e:	d1f0      	bne.n	80d32 <pmc_switch_mck_to_pllack+0x7a>
   80d50:	e7f9      	b.n	80d46 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d52:	1e58      	subs	r0, r3, #1
   80d54:	d1cb      	bne.n	80cee <pmc_switch_mck_to_pllack+0x36>
   80d56:	e7f3      	b.n	80d40 <pmc_switch_mck_to_pllack+0x88>

00080d58 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80d58:	b188      	cbz	r0, 80d7e <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80d5e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80d62:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80d64:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80d68:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80d6c:	4002      	ands	r2, r0
   80d6e:	f04f 0302 	mov.w	r3, #2
   80d72:	f2c0 1337 	movt	r3, #311	; 0x137
   80d76:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d7a:	6208      	str	r0, [r1, #32]
   80d7c:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80d82:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d86:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80d88:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80d8c:	f020 0203 	bic.w	r2, r0, #3
   80d90:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80d94:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80d98:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80d9c:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80da0:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80da2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80da6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80daa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80dac:	f013 0f01 	tst.w	r3, #1
   80db0:	d0fb      	beq.n	80daa <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80db2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80db6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80dba:	6a08      	ldr	r0, [r1, #32]
   80dbc:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80dc0:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80dc4:	620b      	str	r3, [r1, #32]
   80dc6:	4770      	bx	lr

00080dc8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80dc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80dcc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80dd0:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80dd2:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80dd6:	4770      	bx	lr

00080dd8 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80dd8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80ddc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80de0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80de4:	629a      	str	r2, [r3, #40]	; 0x28
   80de6:	4770      	bx	lr

00080de8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80de8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80dec:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80df0:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80df2:	f000 0002 	and.w	r0, r0, #2
   80df6:	4770      	bx	lr

00080df8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80df8:	282c      	cmp	r0, #44	; 0x2c
   80dfa:	d835      	bhi.n	80e68 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   80dfc:	281f      	cmp	r0, #31
   80dfe:	d817      	bhi.n	80e30 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80e00:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80e04:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80e08:	698a      	ldr	r2, [r1, #24]
   80e0a:	f04f 0301 	mov.w	r3, #1
   80e0e:	fa03 f300 	lsl.w	r3, r3, r0
   80e12:	401a      	ands	r2, r3
   80e14:	4293      	cmp	r3, r2
   80e16:	d02a      	beq.n	80e6e <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   80e18:	f04f 0101 	mov.w	r1, #1
   80e1c:	fa01 f000 	lsl.w	r0, r1, r0
   80e20:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80e24:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80e28:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80e2a:	f04f 0000 	mov.w	r0, #0
   80e2e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80e30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80e34:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80e38:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   80e3c:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80e40:	f04f 0101 	mov.w	r1, #1
   80e44:	fa01 f100 	lsl.w	r1, r1, r0
   80e48:	400a      	ands	r2, r1
   80e4a:	4291      	cmp	r1, r2
   80e4c:	d012      	beq.n	80e74 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   80e4e:	f04f 0301 	mov.w	r3, #1
   80e52:	fa03 f000 	lsl.w	r0, r3, r0
   80e56:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80e5a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80e5e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80e62:	f04f 0000 	mov.w	r0, #0
   80e66:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80e68:	f04f 0001 	mov.w	r0, #1
   80e6c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80e6e:	f04f 0000 	mov.w	r0, #0
   80e72:	4770      	bx	lr
   80e74:	f04f 0000 	mov.w	r0, #0
}
   80e78:	4770      	bx	lr
   80e7a:	bf00      	nop

00080e7c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for SAM3N)
 * or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80e7c:	b4f0      	push	{r4, r5, r6, r7}
   80e7e:	b08c      	sub	sp, #48	; 0x30
   80e80:	4606      	mov	r6, r0
   80e82:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80e84:	ac01      	add	r4, sp, #4
   80e86:	f247 55f0 	movw	r5, #30192	; 0x75f0
   80e8a:	f2c0 0508 	movt	r5, #8
   80e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80e96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80e9e:	9b01      	ldr	r3, [sp, #4]
   80ea0:	fbb7 f0f3 	udiv	r0, r7, r3
   80ea4:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ea8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80eac:	d952      	bls.n	80f54 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80eae:	9902      	ldr	r1, [sp, #8]
   80eb0:	fbb7 f2f1 	udiv	r2, r7, r1
   80eb4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80eb8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80ebc:	d94f      	bls.n	80f5e <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80ebe:	9b03      	ldr	r3, [sp, #12]
   80ec0:	fbb7 f0f3 	udiv	r0, r7, r3
   80ec4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ec8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80ecc:	d94a      	bls.n	80f64 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80ece:	9904      	ldr	r1, [sp, #16]
   80ed0:	fbb7 f2f1 	udiv	r2, r7, r1
   80ed4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ed8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80edc:	d945      	bls.n	80f6a <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80ede:	9b05      	ldr	r3, [sp, #20]
   80ee0:	fbb7 f0f3 	udiv	r0, r7, r3
   80ee4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ee8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80eec:	d940      	bls.n	80f70 <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80eee:	9906      	ldr	r1, [sp, #24]
   80ef0:	fbb7 f2f1 	udiv	r2, r7, r1
   80ef4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ef8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80efc:	d93b      	bls.n	80f76 <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80efe:	9b07      	ldr	r3, [sp, #28]
   80f00:	fbb7 f0f3 	udiv	r0, r7, r3
   80f04:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80f08:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80f0c:	d936      	bls.n	80f7c <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80f0e:	9908      	ldr	r1, [sp, #32]
   80f10:	fbb7 f2f1 	udiv	r2, r7, r1
   80f14:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80f18:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80f1c:	d931      	bls.n	80f82 <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   80f20:	fbb7 f0f3 	udiv	r0, r7, r3
   80f24:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80f28:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80f2c:	d92c      	bls.n	80f88 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
   80f30:	fbb7 f2f1 	udiv	r2, r7, r1
   80f34:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80f38:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80f3c:	d927      	bls.n	80f8e <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80f40:	fbb7 f0f3 	udiv	r0, r7, r3
   80f44:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80f48:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80f4c:	d922      	bls.n	80f94 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80f4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80f52:	e022      	b.n	80f9a <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80f54:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   80f58:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   80f5c:	e01d      	b.n	80f9a <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   80f5e:	f04f 0201 	mov.w	r2, #1
   80f62:	e7f9      	b.n	80f58 <pwm_clocks_generate+0xdc>
   80f64:	f04f 0202 	mov.w	r2, #2
   80f68:	e7f6      	b.n	80f58 <pwm_clocks_generate+0xdc>
   80f6a:	f04f 0203 	mov.w	r2, #3
   80f6e:	e7f3      	b.n	80f58 <pwm_clocks_generate+0xdc>
   80f70:	f04f 0204 	mov.w	r2, #4
   80f74:	e7f0      	b.n	80f58 <pwm_clocks_generate+0xdc>
   80f76:	f04f 0205 	mov.w	r2, #5
   80f7a:	e7ed      	b.n	80f58 <pwm_clocks_generate+0xdc>
   80f7c:	f04f 0206 	mov.w	r2, #6
   80f80:	e7ea      	b.n	80f58 <pwm_clocks_generate+0xdc>
   80f82:	f04f 0207 	mov.w	r2, #7
   80f86:	e7e7      	b.n	80f58 <pwm_clocks_generate+0xdc>
   80f88:	f04f 0208 	mov.w	r2, #8
   80f8c:	e7e4      	b.n	80f58 <pwm_clocks_generate+0xdc>
   80f8e:	f04f 0209 	mov.w	r2, #9
   80f92:	e7e1      	b.n	80f58 <pwm_clocks_generate+0xdc>
   80f94:	f04f 020a 	mov.w	r2, #10
   80f98:	e7de      	b.n	80f58 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   80f9a:	b00c      	add	sp, #48	; 0x30
   80f9c:	bcf0      	pop	{r4, r5, r6, r7}
   80f9e:	4770      	bx	lr

00080fa0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80fa0:	b570      	push	{r4, r5, r6, lr}
   80fa2:	4606      	mov	r6, r0
   80fa4:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80fa6:	6808      	ldr	r0, [r1, #0]
   80fa8:	b158      	cbz	r0, 80fc2 <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80faa:	6889      	ldr	r1, [r1, #8]
   80fac:	f640 637d 	movw	r3, #3709	; 0xe7d
   80fb0:	f2c0 0308 	movt	r3, #8
   80fb4:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   80fb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   80fba:	4288      	cmp	r0, r1
   80fbc:	d014      	beq.n	80fe8 <pwm_init+0x48>
			return result;
		}

		clock = result;
   80fbe:	4605      	mov	r5, r0
   80fc0:	e001      	b.n	80fc6 <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80fc2:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80fc6:	6860      	ldr	r0, [r4, #4]
   80fc8:	b158      	cbz	r0, 80fe2 <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80fca:	68a1      	ldr	r1, [r4, #8]
   80fcc:	f640 627d 	movw	r2, #3709	; 0xe7d
   80fd0:	f2c0 0208 	movt	r2, #8
   80fd4:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   80fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80fda:	4298      	cmp	r0, r3
   80fdc:	d004      	beq.n	80fe8 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   80fde:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if SAM3N
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80fe2:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80fe4:	f04f 0000 	mov.w	r0, #0
}
   80fe8:	bd70      	pop	{r4, r5, r6, pc}
   80fea:	bf00      	nop

00080fec <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80fec:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80fee:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   80ff0:	f04f 0201 	mov.w	r2, #1
   80ff4:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80ff8:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   80ffa:	684c      	ldr	r4, [r1, #4]
   80ffc:	f004 050f 	and.w	r5, r4, #15
   81000:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   81002:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81004:	4326      	orrs	r6, r4
   81006:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   81008:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   8100c:	7d8c      	ldrb	r4, [r1, #22]
   8100e:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   81012:	7dce      	ldrb	r6, [r1, #23]
   81014:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   81018:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   8101a:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   8101e:	f103 0510 	add.w	r5, r3, #16
   81022:	ea4f 1445 	mov.w	r4, r5, lsl #5
   81026:	1905      	adds	r5, r0, r4
   81028:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8102a:	68cc      	ldr	r4, [r1, #12]
   8102c:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   8102e:	690c      	ldr	r4, [r1, #16]
   81030:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   81034:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   81038:	7d8c      	ldrb	r4, [r1, #22]
   8103a:	b13c      	cbz	r4, 8104c <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8103c:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8103e:	8b4c      	ldrh	r4, [r1, #26]
   81040:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   81044:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   81048:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   8104c:	7fcd      	ldrb	r5, [r1, #31]
   8104e:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   81052:	7f8c      	ldrb	r4, [r1, #30]
   81054:	fa04 f403 	lsl.w	r4, r4, r3
   81058:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   8105c:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   8105e:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81062:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   81066:	f891 4020 	ldrb.w	r4, [r1, #32]
   8106a:	fa04 f403 	lsl.w	r4, r4, r3
   8106e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   81072:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   81074:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81078:	b11c      	cbz	r4, 81082 <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   8107a:	6a04      	ldr	r4, [r0, #32]
   8107c:	4314      	orrs	r4, r2
   8107e:	6204      	str	r4, [r0, #32]
   81080:	e003      	b.n	8108a <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81082:	6a04      	ldr	r4, [r0, #32]
   81084:	ea24 0402 	bic.w	r4, r4, r2
   81088:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8108a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8108e:	2c01      	cmp	r4, #1
   81090:	d103      	bne.n	8109a <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81092:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81094:	4314      	orrs	r4, r2
   81096:	6684      	str	r4, [r0, #104]	; 0x68
   81098:	e006      	b.n	810a8 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   8109a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8109c:	2a00      	cmp	r2, #0
   8109e:	bf14      	ite	ne
   810a0:	2400      	movne	r4, #0
   810a2:	f004 0401 	andeq.w	r4, r4, #1
   810a6:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   810a8:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   810ac:	2c01      	cmp	r4, #1
   810ae:	d104      	bne.n	810ba <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   810b0:	6e84      	ldr	r4, [r0, #104]	; 0x68
   810b2:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   810b6:	6682      	str	r2, [r0, #104]	; 0x68
   810b8:	e006      	b.n	810c8 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   810ba:	6e84      	ldr	r4, [r0, #104]	; 0x68
   810bc:	0412      	lsls	r2, r2, #16
   810be:	bf14      	ite	ne
   810c0:	2200      	movne	r2, #0
   810c2:	f004 0201 	andeq.w	r2, r4, #1
   810c6:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   810c8:	2b03      	cmp	r3, #3
   810ca:	d80f      	bhi.n	810ec <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   810cc:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   810ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   810d2:	f04f 02ff 	mov.w	r2, #255	; 0xff
   810d6:	fa02 f203 	lsl.w	r2, r2, r3
   810da:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   810de:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   810e2:	fa01 f303 	lsl.w	r3, r1, r3
   810e6:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   810e8:	66c2      	str	r2, [r0, #108]	; 0x6c
   810ea:	e010      	b.n	8110e <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   810ec:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   810f0:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   810f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   810f6:	f04f 02ff 	mov.w	r2, #255	; 0xff
   810fa:	fa02 f203 	lsl.w	r2, r2, r3
   810fe:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81102:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81106:	fa01 f303 	lsl.w	r3, r1, r3
   8110a:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8110c:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   8110e:	f04f 0000 	mov.w	r0, #0
   81112:	bc70      	pop	{r4, r5, r6}
   81114:	4770      	bx	lr
   81116:	bf00      	nop

00081118 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   81118:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8111a:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   8111c:	690b      	ldr	r3, [r1, #16]
   8111e:	4293      	cmp	r3, r2
   81120:	d307      	bcc.n	81132 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   81122:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   81124:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   81128:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   8112c:	f04f 0000 	mov.w	r0, #0
   81130:	e001      	b.n	81136 <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   81132:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   81136:	bc10      	pop	{r4}
   81138:	4770      	bx	lr
   8113a:	bf00      	nop

0008113c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   8113c:	f04f 0301 	mov.w	r3, #1
   81140:	fa03 f101 	lsl.w	r1, r3, r1
   81144:	6041      	str	r1, [r0, #4]
   81146:	4770      	bx	lr

00081148 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81148:	f04f 0301 	mov.w	r3, #1
   8114c:	fa03 f101 	lsl.w	r1, r3, r1
   81150:	6081      	str	r1, [r0, #8]
   81152:	4770      	bx	lr

00081154 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   81154:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81156:	ea4f 1181 	mov.w	r1, r1, lsl #6
   8115a:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8115c:	f04f 0402 	mov.w	r4, #2
   81160:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81162:	f04f 30ff 	mov.w	r0, #4294967295
   81166:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81168:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8116a:	605a      	str	r2, [r3, #4]
}
   8116c:	bc10      	pop	{r4}
   8116e:	4770      	bx	lr

00081170 <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   81170:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   81174:	4770      	bx	lr
   81176:	bf00      	nop

00081178 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81178:	ea4f 1181 	mov.w	r1, r1, lsl #6
   8117c:	f04f 0302 	mov.w	r3, #2
   81180:	5043      	str	r3, [r0, r1]
   81182:	4770      	bx	lr

00081184 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81184:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81186:	f04f 03ac 	mov.w	r3, #172	; 0xac
   8118a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8118c:	680a      	ldr	r2, [r1, #0]
   8118e:	684c      	ldr	r4, [r1, #4]
   81190:	fbb2 f3f4 	udiv	r3, r2, r4
   81194:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81198:	f103 34ff 	add.w	r4, r3, #4294967295
   8119c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   811a0:	4294      	cmp	r4, r2
   811a2:	d80c      	bhi.n	811be <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   811a4:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   811a6:	6889      	ldr	r1, [r1, #8]
   811a8:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   811aa:	f240 2302 	movw	r3, #514	; 0x202
   811ae:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   811b2:	f04f 0250 	mov.w	r2, #80	; 0x50
   811b6:	6002      	str	r2, [r0, #0]

	return 0;
   811b8:	f04f 0000 	mov.w	r0, #0
   811bc:	e001      	b.n	811c2 <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   811be:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   811c2:	bc10      	pop	{r4}
   811c4:	4770      	bx	lr
   811c6:	bf00      	nop

000811c8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   811c8:	6943      	ldr	r3, [r0, #20]
   811ca:	f013 0f02 	tst.w	r3, #2
   811ce:	d003      	beq.n	811d8 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   811d0:	61c1      	str	r1, [r0, #28]
	return 0;
   811d2:	f04f 0000 	mov.w	r0, #0
   811d6:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   811d8:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   811dc:	4770      	bx	lr
   811de:	bf00      	nop

000811e0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   811e0:	6943      	ldr	r3, [r0, #20]
   811e2:	f013 0f01 	tst.w	r3, #1
   811e6:	d004      	beq.n	811f2 <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   811e8:	6980      	ldr	r0, [r0, #24]
   811ea:	7008      	strb	r0, [r1, #0]
	return 0;
   811ec:	f04f 0000 	mov.w	r0, #0
   811f0:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   811f2:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   811f6:	4770      	bx	lr

000811f8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   811f8:	6943      	ldr	r3, [r0, #20]
   811fa:	f013 0f02 	tst.w	r3, #2
   811fe:	d007      	beq.n	81210 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81200:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   81204:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   81208:	61c2      	str	r2, [r0, #28]
	return 0;
   8120a:	f04f 0000 	mov.w	r0, #0
   8120e:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81210:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81214:	4770      	bx	lr
   81216:	bf00      	nop

00081218 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81218:	6943      	ldr	r3, [r0, #20]
   8121a:	f013 0f01 	tst.w	r3, #1
   8121e:	d008      	beq.n	81232 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81220:	6980      	ldr	r0, [r0, #24]
   81222:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   81226:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   8122a:	600b      	str	r3, [r1, #0]

	return 0;
   8122c:	f04f 0000 	mov.w	r0, #0
   81230:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   81232:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   81236:	4770      	bx	lr

00081238 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81238:	e7fe      	b.n	81238 <Dummy_Handler>
   8123a:	bf00      	nop

0008123c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8123c:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8123e:	f240 0300 	movw	r3, #0
   81242:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81246:	f247 723c 	movw	r2, #30524	; 0x773c
   8124a:	f2c0 0208 	movt	r2, #8
   8124e:	429a      	cmp	r2, r3
   81250:	d003      	beq.n	8125a <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   81252:	4840      	ldr	r0, [pc, #256]	; (81354 <Reset_Handler+0x118>)
   81254:	4940      	ldr	r1, [pc, #256]	; (81358 <Reset_Handler+0x11c>)
   81256:	4281      	cmp	r1, r0
   81258:	d304      	bcc.n	81264 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8125a:	4b40      	ldr	r3, [pc, #256]	; (8135c <Reset_Handler+0x120>)
   8125c:	4a40      	ldr	r2, [pc, #256]	; (81360 <Reset_Handler+0x124>)
   8125e:	429a      	cmp	r2, r3
   81260:	d325      	bcc.n	812ae <Reset_Handler+0x72>
   81262:	e042      	b.n	812ea <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   81264:	4d3f      	ldr	r5, [pc, #252]	; (81364 <Reset_Handler+0x128>)
   81266:	4c40      	ldr	r4, [pc, #256]	; (81368 <Reset_Handler+0x12c>)
   81268:	1b63      	subs	r3, r4, r5
   8126a:	f023 0503 	bic.w	r5, r3, #3
   8126e:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   81272:	f240 0200 	movw	r2, #0
   81276:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8127a:	f247 713c 	movw	r1, #30524	; 0x773c
   8127e:	f2c0 0108 	movt	r1, #8
   81282:	f105 0004 	add.w	r0, r5, #4
   81286:	f3c5 0480 	ubfx	r4, r5, #2, #1
   8128a:	585d      	ldr	r5, [r3, r1]
   8128c:	509d      	str	r5, [r3, r2]
   8128e:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81292:	4283      	cmp	r3, r0
   81294:	d155      	bne.n	81342 <Reset_Handler+0x106>
   81296:	e7e0      	b.n	8125a <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   81298:	585d      	ldr	r5, [r3, r1]
   8129a:	509d      	str	r5, [r3, r2]
   8129c:	f103 0304 	add.w	r3, r3, #4
   812a0:	585c      	ldr	r4, [r3, r1]
   812a2:	509c      	str	r4, [r3, r2]
   812a4:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   812a8:	4283      	cmp	r3, r0
   812aa:	d1f5      	bne.n	81298 <Reset_Handler+0x5c>
   812ac:	e7d5      	b.n	8125a <Reset_Handler+0x1e>
   812ae:	4d2f      	ldr	r5, [pc, #188]	; (8136c <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   812b0:	492f      	ldr	r1, [pc, #188]	; (81370 <Reset_Handler+0x134>)
   812b2:	1b48      	subs	r0, r1, r5
   812b4:	f020 0403 	bic.w	r4, r0, #3
   812b8:	f640 1300 	movw	r3, #2304	; 0x900
   812bc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   812c0:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   812c2:	f04f 0100 	mov.w	r1, #0
   812c6:	1b50      	subs	r0, r2, r5
   812c8:	f1a0 0004 	sub.w	r0, r0, #4
   812cc:	f3c0 0480 	ubfx	r4, r0, #2, #1
   812d0:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   812d4:	4295      	cmp	r5, r2
   812d6:	d12d      	bne.n	81334 <Reset_Handler+0xf8>
   812d8:	e007      	b.n	812ea <Reset_Handler+0xae>
   812da:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   812de:	6069      	str	r1, [r5, #4]
   812e0:	f105 0508 	add.w	r5, r5, #8
   812e4:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   812e6:	4295      	cmp	r5, r2
   812e8:	d1f7      	bne.n	812da <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   812ea:	f240 0500 	movw	r5, #0
   812ee:	f2c0 0508 	movt	r5, #8
   812f2:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   812f6:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   812fa:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   812fe:	f2ce 0000 	movt	r0, #57344	; 0xe000
   81302:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81304:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   81308:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   8130c:	d207      	bcs.n	8131e <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8130e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   81312:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81316:	689d      	ldr	r5, [r3, #8]
   81318:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   8131c:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8131e:	f643 41dd 	movw	r1, #15581	; 0x3cdd
   81322:	f2c0 0108 	movt	r1, #8
   81326:	4788      	blx	r1

	/* Branch to main function */
	main();
   81328:	f243 30ad 	movw	r0, #13229	; 0x33ad
   8132c:	f2c0 0008 	movt	r0, #8
   81330:	4780      	blx	r0
   81332:	e7fe      	b.n	81332 <Reset_Handler+0xf6>
   81334:	2c00      	cmp	r4, #0
   81336:	d0d0      	beq.n	812da <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81338:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8133c:	4295      	cmp	r5, r2
   8133e:	d1cc      	bne.n	812da <Reset_Handler+0x9e>
   81340:	e7d3      	b.n	812ea <Reset_Handler+0xae>
   81342:	2c00      	cmp	r4, #0
   81344:	d0a8      	beq.n	81298 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   81346:	585c      	ldr	r4, [r3, r1]
   81348:	509c      	str	r4, [r3, r2]
   8134a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8134e:	4283      	cmp	r3, r0
   81350:	d1a2      	bne.n	81298 <Reset_Handler+0x5c>
   81352:	e782      	b.n	8125a <Reset_Handler+0x1e>
   81354:	20070900 	.word	0x20070900
   81358:	20070000 	.word	0x20070000
   8135c:	2007ab54 	.word	0x2007ab54
   81360:	20070900 	.word	0x20070900
   81364:	20070004 	.word	0x20070004
   81368:	20070903 	.word	0x20070903
   8136c:	200708fc 	.word	0x200708fc
   81370:	2007ab4f 	.word	0x2007ab4f

00081374 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81374:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81378:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8137c:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8137e:	f000 0103 	and.w	r1, r0, #3
   81382:	2903      	cmp	r1, #3
   81384:	f200 80b1 	bhi.w	814ea <SystemCoreClockUpdate+0x176>
   81388:	e8df f001 	tbb	[pc, r1]
   8138c:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81390:	f641 2010 	movw	r0, #6672	; 0x1a10
   81394:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81398:	6941      	ldr	r1, [r0, #20]
   8139a:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8139e:	f240 0330 	movw	r3, #48	; 0x30
   813a2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   813a6:	bf14      	ite	ne
   813a8:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   813ac:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   813b0:	601a      	str	r2, [r3, #0]
   813b2:	e09a      	b.n	814ea <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   813b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   813b8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   813bc:	6a18      	ldr	r0, [r3, #32]
   813be:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   813c2:	d009      	beq.n	813d8 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   813c4:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   813c8:	f2c0 03b7 	movt	r3, #183	; 0xb7
   813cc:	f240 0230 	movw	r2, #48	; 0x30
   813d0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813d4:	6013      	str	r3, [r2, #0]
   813d6:	e088      	b.n	814ea <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   813d8:	f44f 6110 	mov.w	r1, #2304	; 0x900
   813dc:	f2c0 013d 	movt	r1, #61	; 0x3d
   813e0:	f240 0230 	movw	r2, #48	; 0x30
   813e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813e8:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   813ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   813ee:	f2c4 030e 	movt	r3, #16398	; 0x400e
   813f2:	6a18      	ldr	r0, [r3, #32]
   813f4:	f000 0170 	and.w	r1, r0, #112	; 0x70
   813f8:	2910      	cmp	r1, #16
   813fa:	d002      	beq.n	81402 <SystemCoreClockUpdate+0x8e>
   813fc:	2920      	cmp	r1, #32
   813fe:	d174      	bne.n	814ea <SystemCoreClockUpdate+0x176>
   81400:	e009      	b.n	81416 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81402:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81406:	f2c0 007a 	movt	r0, #122	; 0x7a
   8140a:	f240 0130 	movw	r1, #48	; 0x30
   8140e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81412:	6008      	str	r0, [r1, #0]
				break;
   81414:	e069      	b.n	814ea <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81416:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   8141a:	f2c0 03b7 	movt	r3, #183	; 0xb7
   8141e:	f240 0230 	movw	r2, #48	; 0x30
   81422:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81426:	6013      	str	r3, [r2, #0]
				break;
   81428:	e05f      	b.n	814ea <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8142a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8142e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81432:	6a13      	ldr	r3, [r2, #32]
   81434:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81438:	d009      	beq.n	8144e <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8143a:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   8143e:	f2c0 01b7 	movt	r1, #183	; 0xb7
   81442:	f240 0230 	movw	r2, #48	; 0x30
   81446:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8144a:	6011      	str	r1, [r2, #0]
   8144c:	e027      	b.n	8149e <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8144e:	f44f 6010 	mov.w	r0, #2304	; 0x900
   81452:	f2c0 003d 	movt	r0, #61	; 0x3d
   81456:	f240 0130 	movw	r1, #48	; 0x30
   8145a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8145e:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81460:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   81464:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81468:	6a13      	ldr	r3, [r2, #32]
   8146a:	f003 0070 	and.w	r0, r3, #112	; 0x70
   8146e:	2810      	cmp	r0, #16
   81470:	d002      	beq.n	81478 <SystemCoreClockUpdate+0x104>
   81472:	2820      	cmp	r0, #32
   81474:	d113      	bne.n	8149e <SystemCoreClockUpdate+0x12a>
   81476:	e009      	b.n	8148c <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81478:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   8147c:	f2c0 037a 	movt	r3, #122	; 0x7a
   81480:	f240 0030 	movw	r0, #48	; 0x30
   81484:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81488:	6003      	str	r3, [r0, #0]
				break;
   8148a:	e008      	b.n	8149e <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8148c:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   81490:	f2c0 01b7 	movt	r1, #183	; 0xb7
   81494:	f240 0230 	movw	r2, #48	; 0x30
   81498:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8149c:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8149e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   814a2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   814a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   814a8:	f000 0103 	and.w	r1, r0, #3
   814ac:	2902      	cmp	r1, #2
   814ae:	d113      	bne.n	814d8 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   814b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   814b4:	f2c4 010e 	movt	r1, #16398	; 0x400e
   814b8:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   814ba:	6a89      	ldr	r1, [r1, #40]	; 0x28
   814bc:	f240 0330 	movw	r3, #48	; 0x30
   814c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   814c4:	f3c0 400a 	ubfx	r0, r0, #16, #11
   814c8:	681a      	ldr	r2, [r3, #0]
   814ca:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   814ce:	b2c9      	uxtb	r1, r1
   814d0:	fbb0 f2f1 	udiv	r2, r0, r1
   814d4:	601a      	str	r2, [r3, #0]
   814d6:	e008      	b.n	814ea <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   814d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   814dc:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   814e0:	f240 0230 	movw	r2, #48	; 0x30
   814e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   814e8:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   814ea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   814ee:	f2c4 020e 	movt	r2, #16398	; 0x400e
   814f2:	6b10      	ldr	r0, [r2, #48]	; 0x30
   814f4:	f000 0170 	and.w	r1, r0, #112	; 0x70
   814f8:	2970      	cmp	r1, #112	; 0x70
   814fa:	d10e      	bne.n	8151a <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   814fc:	f240 0330 	movw	r3, #48	; 0x30
   81500:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81504:	6818      	ldr	r0, [r3, #0]
   81506:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   8150a:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   8150e:	fba2 0100 	umull	r0, r1, r2, r0
   81512:	ea4f 0051 	mov.w	r0, r1, lsr #1
   81516:	6018      	str	r0, [r3, #0]
   81518:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8151a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8151e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81524:	f240 0030 	movw	r0, #48	; 0x30
   81528:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8152c:	f3c2 1102 	ubfx	r1, r2, #4, #3
   81530:	6803      	ldr	r3, [r0, #0]
   81532:	fa23 f301 	lsr.w	r3, r3, r1
   81536:	6003      	str	r3, [r0, #0]
   81538:	4770      	bx	lr
   8153a:	bf00      	nop

0008153c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   8153c:	f245 239f 	movw	r3, #21151	; 0x529f
   81540:	f2c0 1357 	movt	r3, #343	; 0x157
   81544:	4298      	cmp	r0, r3
   81546:	d80c      	bhi.n	81562 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81548:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8154c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81550:	f04f 0100 	mov.w	r1, #0
   81554:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81556:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   8155a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8155e:	6019      	str	r1, [r3, #0]
   81560:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   81562:	f64c 417f 	movw	r1, #52351	; 0xcc7f
   81566:	f2c0 2106 	movt	r1, #518	; 0x206
   8156a:	4288      	cmp	r0, r1
   8156c:	d80c      	bhi.n	81588 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8156e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   81572:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81576:	f44f 7180 	mov.w	r1, #256	; 0x100
   8157a:	6019      	str	r1, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   8157c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   81580:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81584:	6011      	str	r1, [r2, #0]
   81586:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81588:	f24b 733f 	movw	r3, #46911	; 0xb73f
   8158c:	f2c0 3328 	movt	r3, #808	; 0x328
   81590:	4298      	cmp	r0, r3
   81592:	d80c      	bhi.n	815ae <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81594:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   81598:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8159c:	f44f 7200 	mov.w	r2, #512	; 0x200
   815a0:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   815a2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   815a6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   815aa:	6002      	str	r2, [r0, #0]
   815ac:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   815ae:	f642 717f 	movw	r1, #12159	; 0x2f7f
   815b2:	f2c0 41a6 	movt	r1, #1190	; 0x4a6
   815b6:	4288      	cmp	r0, r1
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   815b8:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   815bc:	f2c4 000e 	movt	r0, #16398	; 0x400e
   815c0:	bf94      	ite	ls
   815c2:	f44f 7240 	movls.w	r2, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   815c6:	f44f 6280 	movhi.w	r2, #1024	; 0x400
   815ca:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   815cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   815d0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   815d4:	601a      	str	r2, [r3, #0]
   815d6:	4770      	bx	lr

000815d8 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   815d8:	f640 13bc 	movw	r3, #2492	; 0x9bc
   815dc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   815e0:	6819      	ldr	r1, [r3, #0]
   815e2:	b941      	cbnz	r1, 815f6 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   815e4:	f640 13bc 	movw	r3, #2492	; 0x9bc
   815e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   815ec:	f64c 3258 	movw	r2, #52056	; 0xcb58
   815f0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   815f4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   815f6:	f640 11bc 	movw	r1, #2492	; 0x9bc
   815fa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   815fe:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   81600:	1818      	adds	r0, r3, r0
   81602:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   81604:	4618      	mov	r0, r3
   81606:	4770      	bx	lr

00081608 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81608:	f04f 30ff 	mov.w	r0, #4294967295
   8160c:	4770      	bx	lr
   8160e:	bf00      	nop

00081610 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81614:	604b      	str	r3, [r1, #4]

	return 0;
}
   81616:	f04f 0000 	mov.w	r0, #0
   8161a:	4770      	bx	lr

0008161c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8161c:	f04f 0001 	mov.w	r0, #1
   81620:	4770      	bx	lr
   81622:	bf00      	nop

00081624 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81624:	f04f 0000 	mov.w	r0, #0
   81628:	4770      	bx	lr
   8162a:	bf00      	nop

0008162c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   8162c:	f100 0308 	add.w	r3, r0, #8
   81630:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   81632:	f04f 32ff 	mov.w	r2, #4294967295
   81636:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   81638:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8163a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   8163c:	f04f 0100 	mov.w	r1, #0
   81640:	6001      	str	r1, [r0, #0]
   81642:	4770      	bx	lr

00081644 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81644:	f04f 0300 	mov.w	r3, #0
   81648:	6103      	str	r3, [r0, #16]
   8164a:	4770      	bx	lr

0008164c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8164c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8164e:	685a      	ldr	r2, [r3, #4]
   81650:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81652:	6842      	ldr	r2, [r0, #4]
   81654:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81656:	685a      	ldr	r2, [r3, #4]
   81658:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8165a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8165c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8165e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81660:	6801      	ldr	r1, [r0, #0]
   81662:	f101 0101 	add.w	r1, r1, #1
   81666:	6001      	str	r1, [r0, #0]
   81668:	4770      	bx	lr
   8166a:	bf00      	nop

0008166c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8166c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8166e:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   81670:	f1b4 3fff 	cmp.w	r4, #4294967295
   81674:	d101      	bne.n	8167a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   81676:	6903      	ldr	r3, [r0, #16]
   81678:	e00a      	b.n	81690 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8167a:	f100 0308 	add.w	r3, r0, #8
   8167e:	68c2      	ldr	r2, [r0, #12]
   81680:	6812      	ldr	r2, [r2, #0]
   81682:	4294      	cmp	r4, r2
   81684:	d304      	bcc.n	81690 <vListInsert+0x24>
   81686:	685b      	ldr	r3, [r3, #4]
   81688:	685a      	ldr	r2, [r3, #4]
   8168a:	6812      	ldr	r2, [r2, #0]
   8168c:	4294      	cmp	r4, r2
   8168e:	d2fa      	bcs.n	81686 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   81690:	685a      	ldr	r2, [r3, #4]
   81692:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81694:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   81696:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   81698:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8169a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8169c:	6801      	ldr	r1, [r0, #0]
   8169e:	f101 0101 	add.w	r1, r1, #1
   816a2:	6001      	str	r1, [r0, #0]
}
   816a4:	bc10      	pop	{r4}
   816a6:	4770      	bx	lr

000816a8 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   816a8:	6843      	ldr	r3, [r0, #4]
   816aa:	6882      	ldr	r2, [r0, #8]
   816ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   816ae:	6881      	ldr	r1, [r0, #8]
   816b0:	6843      	ldr	r3, [r0, #4]
   816b2:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   816b4:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   816b6:	684a      	ldr	r2, [r1, #4]
   816b8:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   816ba:	bf04      	itt	eq
   816bc:	6882      	ldreq	r2, [r0, #8]
   816be:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   816c0:	f04f 0300 	mov.w	r3, #0
   816c4:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   816c6:	6808      	ldr	r0, [r1, #0]
   816c8:	f100 32ff 	add.w	r2, r0, #4294967295
   816cc:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   816ce:	6808      	ldr	r0, [r1, #0]
}
   816d0:	4770      	bx	lr
   816d2:	bf00      	nop

000816d4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   816d4:	4803      	ldr	r0, [pc, #12]	; (816e4 <prvPortStartFirstTask+0x10>)
   816d6:	6800      	ldr	r0, [r0, #0]
   816d8:	6800      	ldr	r0, [r0, #0]
   816da:	f380 8808 	msr	MSP, r0
   816de:	b662      	cpsie	i
   816e0:	df00      	svc	0
   816e2:	bf00      	nop
   816e4:	e000ed08 	.word	0xe000ed08

000816e8 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   816e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   816ec:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   816f0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   816f4:	f04f 0100 	mov.w	r1, #0
   816f8:	f840 1c0c 	str.w	r1, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   816fc:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   81700:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
   81704:	4770      	bx	lr
   81706:	bf00      	nop

00081708 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81708:	4b06      	ldr	r3, [pc, #24]	; (81724 <pxCurrentTCBConst2>)
   8170a:	6819      	ldr	r1, [r3, #0]
   8170c:	6808      	ldr	r0, [r1, #0]
   8170e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81712:	f380 8809 	msr	PSP, r0
   81716:	f04f 0000 	mov.w	r0, #0
   8171a:	f380 8811 	msr	BASEPRI, r0
   8171e:	f04e 0e0d 	orr.w	lr, lr, #13
   81722:	4770      	bx	lr

00081724 <pxCurrentTCBConst2>:
   81724:	2007aa84 	.word	0x2007aa84

00081728 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81728:	f64e 5304 	movw	r3, #60676	; 0xed04
   8172c:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81734:	601a      	str	r2, [r3, #0]
   81736:	4770      	bx	lr

00081738 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81738:	f3ef 8011 	mrs	r0, BASEPRI
   8173c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81740:	f381 8811 	msr	BASEPRI, r1
   81744:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   81746:	f04f 0000 	mov.w	r0, #0
   8174a:	bf00      	nop

0008174c <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   8174c:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8174e:	f241 7339 	movw	r3, #5945	; 0x1739
   81752:	f2c0 0308 	movt	r3, #8
   81756:	4798      	blx	r3
	uxCriticalNesting++;
   81758:	f240 0034 	movw	r0, #52	; 0x34
   8175c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81760:	6802      	ldr	r2, [r0, #0]
   81762:	f102 0201 	add.w	r2, r2, #1
   81766:	6002      	str	r2, [r0, #0]
   81768:	bd08      	pop	{r3, pc}
   8176a:	bf00      	nop

0008176c <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   8176c:	f380 8811 	msr	BASEPRI, r0
   81770:	4770      	bx	lr
   81772:	bf00      	nop

00081774 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81774:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   81776:	f240 0234 	movw	r2, #52	; 0x34
   8177a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8177e:	6813      	ldr	r3, [r2, #0]
   81780:	f103 30ff 	add.w	r0, r3, #4294967295
   81784:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
   81786:	b930      	cbnz	r0, 81796 <vPortExitCritical+0x22>
	{
		portENABLE_INTERRUPTS();
   81788:	f04f 0000 	mov.w	r0, #0
   8178c:	f241 716d 	movw	r1, #5997	; 0x176d
   81790:	f2c0 0108 	movt	r1, #8
   81794:	4788      	blx	r1
   81796:	bd08      	pop	{r3, pc}

00081798 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81798:	f3ef 8009 	mrs	r0, PSP
   8179c:	4b0c      	ldr	r3, [pc, #48]	; (817d0 <pxCurrentTCBConst>)
   8179e:	681a      	ldr	r2, [r3, #0]
   817a0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   817a4:	6010      	str	r0, [r2, #0]
   817a6:	e92d 4008 	stmdb	sp!, {r3, lr}
   817aa:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   817ae:	f380 8811 	msr	BASEPRI, r0
   817b2:	f001 f877 	bl	828a4 <vTaskSwitchContext>
   817b6:	f04f 0000 	mov.w	r0, #0
   817ba:	f380 8811 	msr	BASEPRI, r0
   817be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   817c2:	6819      	ldr	r1, [r3, #0]
   817c4:	6808      	ldr	r0, [r1, #0]
   817c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   817ca:	f380 8809 	msr	PSP, r0
   817ce:	4770      	bx	lr

000817d0 <pxCurrentTCBConst>:
   817d0:	2007aa84 	.word	0x2007aa84

000817d4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   817d4:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   817d6:	f64e 5304 	movw	r3, #60676	; 0xed04
   817da:	f2ce 0300 	movt	r3, #57344	; 0xe000
   817de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   817e2:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   817e4:	f241 7039 	movw	r0, #5945	; 0x1739
   817e8:	f2c0 0008 	movt	r0, #8
   817ec:	4780      	blx	r0
	{
		vTaskIncrementTick();
   817ee:	f242 4175 	movw	r1, #9333	; 0x2475
   817f2:	f2c0 0108 	movt	r1, #8
   817f6:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   817f8:	f04f 0000 	mov.w	r0, #0
   817fc:	f241 736d 	movw	r3, #5997	; 0x176d
   81800:	f2c0 0308 	movt	r3, #8
   81804:	4798      	blx	r3
   81806:	bd08      	pop	{r3, pc}

00081808 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   81808:	f24e 0314 	movw	r3, #57364	; 0xe014
   8180c:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81810:	f644 021f 	movw	r2, #18463	; 0x481f
   81814:	f2c0 0201 	movt	r2, #1
   81818:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8181a:	f24e 0010 	movw	r0, #57360	; 0xe010
   8181e:	f2ce 0000 	movt	r0, #57344	; 0xe000
   81822:	f04f 0107 	mov.w	r1, #7
   81826:	6001      	str	r1, [r0, #0]
   81828:	4770      	bx	lr
   8182a:	bf00      	nop

0008182c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   8182c:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8182e:	f64e 5320 	movw	r3, #60704	; 0xed20
   81832:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81836:	681a      	ldr	r2, [r3, #0]
   81838:	f442 0070 	orr.w	r0, r2, #15728640	; 0xf00000
   8183c:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   8183e:	6819      	ldr	r1, [r3, #0]
   81840:	f041 4470 	orr.w	r4, r1, #4026531840	; 0xf0000000
   81844:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81846:	f641 0309 	movw	r3, #6153	; 0x1809
   8184a:	f2c0 0308 	movt	r3, #8
   8184e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81850:	f04f 0400 	mov.w	r4, #0
   81854:	f240 0234 	movw	r2, #52	; 0x34
   81858:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8185c:	6014      	str	r4, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8185e:	f241 60d5 	movw	r0, #5845	; 0x16d5
   81862:	f2c0 0008 	movt	r0, #8
   81866:	4780      	blx	r0

	/* Should not get here! */
	return 0;
}
   81868:	4620      	mov	r0, r4
   8186a:	bd10      	pop	{r4, pc}

0008186c <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   8186c:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8186e:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   81872:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81876:	e000      	b.n	8187a <prvInsertBlockIntoFreeList+0xe>
   81878:	461a      	mov	r2, r3
   8187a:	6813      	ldr	r3, [r2, #0]
   8187c:	4283      	cmp	r3, r0
   8187e:	d3fb      	bcc.n	81878 <prvInsertBlockIntoFreeList+0xc>
   81880:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81882:	6854      	ldr	r4, [r2, #4]
   81884:	1915      	adds	r5, r2, r4
   81886:	4285      	cmp	r5, r0
   81888:	d103      	bne.n	81892 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8188a:	6868      	ldr	r0, [r5, #4]
   8188c:	1904      	adds	r4, r0, r4
   8188e:	6054      	str	r4, [r2, #4]
   81890:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81892:	6842      	ldr	r2, [r0, #4]
   81894:	1884      	adds	r4, r0, r2
   81896:	42a3      	cmp	r3, r4
   81898:	d10f      	bne.n	818ba <prvInsertBlockIntoFreeList+0x4e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8189a:	f64a 14c0 	movw	r4, #43456	; 0xa9c0
   8189e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   818a2:	6824      	ldr	r4, [r4, #0]
   818a4:	429c      	cmp	r4, r3
   818a6:	d006      	beq.n	818b6 <prvInsertBlockIntoFreeList+0x4a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   818a8:	685b      	ldr	r3, [r3, #4]
   818aa:	189a      	adds	r2, r3, r2
   818ac:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   818ae:	680b      	ldr	r3, [r1, #0]
   818b0:	681a      	ldr	r2, [r3, #0]
   818b2:	6002      	str	r2, [r0, #0]
   818b4:	e002      	b.n	818bc <prvInsertBlockIntoFreeList+0x50>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   818b6:	6003      	str	r3, [r0, #0]
   818b8:	e000      	b.n	818bc <prvInsertBlockIntoFreeList+0x50>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   818ba:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   818bc:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   818be:	bf18      	it	ne
   818c0:	6008      	strne	r0, [r1, #0]
	}
}
   818c2:	bc30      	pop	{r4, r5}
   818c4:	4770      	bx	lr
   818c6:	bf00      	nop

000818c8 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   818c8:	b538      	push	{r3, r4, r5, lr}
   818ca:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   818cc:	f242 433d 	movw	r3, #9277	; 0x243d
   818d0:	f2c0 0308 	movt	r3, #8
   818d4:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   818d6:	f64a 10c0 	movw	r0, #43456	; 0xa9c0
   818da:	f2c2 0007 	movt	r0, #8199	; 0x2007
   818de:	6801      	ldr	r1, [r0, #0]
   818e0:	bb21      	cbnz	r1, 8192c <pvPortMalloc+0x64>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   818e2:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   818e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   818ea:	f640 13c0 	movw	r3, #2496	; 0x9c0
   818ee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   818f2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   818f4:	f04f 0100 	mov.w	r1, #0
   818f8:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   818fa:	f503 421f 	add.w	r2, r3, #40704	; 0x9f00
   818fe:	f102 00f0 	add.w	r0, r2, #240	; 0xf0
   81902:	f64a 15c0 	movw	r5, #43456	; 0xa9c0
   81906:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8190a:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   8190c:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
	pxEnd->pxNextFreeBlock = NULL;
   81910:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   81914:	f649 71f0 	movw	r1, #40944	; 0x9ff0
   81918:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8191a:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8191c:	f240 0338 	movw	r3, #56	; 0x38
   81920:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81924:	681a      	ldr	r2, [r3, #0]
   81926:	f1a2 0210 	sub.w	r2, r2, #16
   8192a:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   8192c:	2c00      	cmp	r4, #0
   8192e:	d03c      	beq.n	819aa <pvPortMalloc+0xe2>
		{
			xWantedSize += heapSTRUCT_SIZE;
   81930:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   81934:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81938:	bf1c      	itt	ne
   8193a:	f022 0207 	bicne.w	r2, r2, #7
   8193e:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81940:	f102 30ff 	add.w	r0, r2, #4294967295
   81944:	f649 75fe 	movw	r5, #40958	; 0x9ffe
   81948:	42a8      	cmp	r0, r5
   8194a:	d831      	bhi.n	819b0 <pvPortMalloc+0xe8>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   8194c:	f64a 11c4 	movw	r1, #43460	; 0xa9c4
   81950:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81954:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81956:	e001      	b.n	8195c <pvPortMalloc+0x94>
   81958:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   8195a:	4604      	mov	r4, r0
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8195c:	6863      	ldr	r3, [r4, #4]
   8195e:	429a      	cmp	r2, r3
   81960:	d902      	bls.n	81968 <pvPortMalloc+0xa0>
   81962:	6820      	ldr	r0, [r4, #0]
   81964:	2800      	cmp	r0, #0
   81966:	d1f7      	bne.n	81958 <pvPortMalloc+0x90>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81968:	f64a 15c0 	movw	r5, #43456	; 0xa9c0
   8196c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81970:	682b      	ldr	r3, [r5, #0]
   81972:	429c      	cmp	r4, r3
   81974:	d01f      	beq.n	819b6 <pvPortMalloc+0xee>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   81976:	680d      	ldr	r5, [r1, #0]
   81978:	f105 0510 	add.w	r5, r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   8197c:	6820      	ldr	r0, [r4, #0]
   8197e:	6008      	str	r0, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81980:	6861      	ldr	r1, [r4, #4]
   81982:	1a8b      	subs	r3, r1, r2
   81984:	2b20      	cmp	r3, #32
   81986:	d907      	bls.n	81998 <pvPortMalloc+0xd0>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   81988:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8198a:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   8198c:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   8198e:	f641 026d 	movw	r2, #6253	; 0x186d
   81992:	f2c0 0208 	movt	r2, #8
   81996:	4790      	blx	r2
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81998:	f240 0038 	movw	r0, #56	; 0x38
   8199c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   819a0:	6803      	ldr	r3, [r0, #0]
   819a2:	6861      	ldr	r1, [r4, #4]
   819a4:	1a5a      	subs	r2, r3, r1
   819a6:	6002      	str	r2, [r0, #0]
   819a8:	e007      	b.n	819ba <pvPortMalloc+0xf2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   819aa:	f04f 0500 	mov.w	r5, #0
   819ae:	e004      	b.n	819ba <pvPortMalloc+0xf2>
   819b0:	f04f 0500 	mov.w	r5, #0
   819b4:	e001      	b.n	819ba <pvPortMalloc+0xf2>
   819b6:	f04f 0500 	mov.w	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   819ba:	f242 6005 	movw	r0, #9733	; 0x2605
   819be:	f2c0 0008 	movt	r0, #8
   819c2:	4780      	blx	r0
		}
	}
	#endif

	return pvReturn;
}
   819c4:	4628      	mov	r0, r5
   819c6:	bd38      	pop	{r3, r4, r5, pc}

000819c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   819c8:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   819ca:	4604      	mov	r4, r0
   819cc:	b1c8      	cbz	r0, 81a02 <vPortFree+0x3a>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   819ce:	f242 433d 	movw	r3, #9277	; 0x243d
   819d2:	f2c0 0308 	movt	r3, #8
   819d6:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   819d8:	f240 0038 	movw	r0, #56	; 0x38
   819dc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   819e0:	6801      	ldr	r1, [r0, #0]
   819e2:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   819e6:	188b      	adds	r3, r1, r2
   819e8:	6003      	str	r3, [r0, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   819ea:	f1a4 0010 	sub.w	r0, r4, #16
   819ee:	f641 016d 	movw	r1, #6253	; 0x186d
   819f2:	f2c0 0108 	movt	r1, #8
   819f6:	4788      	blx	r1
		}
		xTaskResumeAll();
   819f8:	f242 6005 	movw	r0, #9733	; 0x2605
   819fc:	f2c0 0008 	movt	r0, #8
   81a00:	4780      	blx	r0
   81a02:	bd10      	pop	{r4, pc}

00081a04 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81a06:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81a08:	f241 734d 	movw	r3, #5965	; 0x174d
   81a0c:	f2c0 0308 	movt	r3, #8
   81a10:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81a12:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81a14:	2800      	cmp	r0, #0
   81a16:	dd1a      	ble.n	81a4e <prvUnlockQueue+0x4a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81a18:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81a1a:	b919      	cbnz	r1, 81a24 <prvUnlockQueue+0x20>
   81a1c:	e017      	b.n	81a4e <prvUnlockQueue+0x4a>
   81a1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81a20:	b951      	cbnz	r1, 81a38 <prvUnlockQueue+0x34>
   81a22:	e014      	b.n	81a4e <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81a24:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81a28:	f642 252d 	movw	r5, #10797	; 0x2a2d
   81a2c:	f2c0 0508 	movt	r5, #8
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81a30:	f642 37b1 	movw	r7, #11185	; 0x2bb1
   81a34:	f2c0 0708 	movt	r7, #8
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81a38:	4630      	mov	r0, r6
   81a3a:	47a8      	blx	r5
   81a3c:	b100      	cbz	r0, 81a40 <prvUnlockQueue+0x3c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81a3e:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81a40:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   81a42:	f102 33ff 	add.w	r3, r2, #4294967295
   81a46:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81a48:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81a4a:	2800      	cmp	r0, #0
   81a4c:	dce7      	bgt.n	81a1e <prvUnlockQueue+0x1a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81a4e:	f04f 32ff 	mov.w	r2, #4294967295
   81a52:	64a2      	str	r2, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81a54:	f241 7375 	movw	r3, #6005	; 0x1775
   81a58:	f2c0 0308 	movt	r3, #8
   81a5c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81a5e:	f241 704d 	movw	r0, #5965	; 0x174d
   81a62:	f2c0 0008 	movt	r0, #8
   81a66:	4780      	blx	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81a68:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81a6a:	2900      	cmp	r1, #0
   81a6c:	dd1a      	ble.n	81aa4 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81a6e:	6922      	ldr	r2, [r4, #16]
   81a70:	b91a      	cbnz	r2, 81a7a <prvUnlockQueue+0x76>
   81a72:	e017      	b.n	81aa4 <prvUnlockQueue+0xa0>
   81a74:	6922      	ldr	r2, [r4, #16]
   81a76:	b952      	cbnz	r2, 81a8e <prvUnlockQueue+0x8a>
   81a78:	e014      	b.n	81aa4 <prvUnlockQueue+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81a7a:	f104 0610 	add.w	r6, r4, #16
   81a7e:	f642 252d 	movw	r5, #10797	; 0x2a2d
   81a82:	f2c0 0508 	movt	r5, #8
				{
					vTaskMissedYield();
   81a86:	f642 37b1 	movw	r7, #11185	; 0x2bb1
   81a8a:	f2c0 0708 	movt	r7, #8
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81a8e:	4630      	mov	r0, r6
   81a90:	47a8      	blx	r5
   81a92:	b100      	cbz	r0, 81a96 <prvUnlockQueue+0x92>
				{
					vTaskMissedYield();
   81a94:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81a96:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81a98:	f103 30ff 	add.w	r0, r3, #4294967295
   81a9c:	6460      	str	r0, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81a9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81aa0:	2900      	cmp	r1, #0
   81aa2:	dce7      	bgt.n	81a74 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81aa4:	f04f 33ff 	mov.w	r3, #4294967295
   81aa8:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81aaa:	f241 7075 	movw	r0, #6005	; 0x1775
   81aae:	f2c0 0008 	movt	r0, #8
   81ab2:	4780      	blx	r0
   81ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81ab6:	bf00      	nop

00081ab8 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81ab8:	b538      	push	{r3, r4, r5, lr}
   81aba:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81abc:	6805      	ldr	r5, [r0, #0]
   81abe:	b175      	cbz	r5, 81ade <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81ac0:	6c02      	ldr	r2, [r0, #64]	; 0x40
   81ac2:	68c4      	ldr	r4, [r0, #12]
   81ac4:	18a4      	adds	r4, r4, r2
   81ac6:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81ac8:	6840      	ldr	r0, [r0, #4]
   81aca:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81acc:	bf28      	it	cs
   81ace:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81ad0:	4608      	mov	r0, r1
   81ad2:	68d9      	ldr	r1, [r3, #12]
   81ad4:	f643 5369 	movw	r3, #15721	; 0x3d69
   81ad8:	f2c0 0308 	movt	r3, #8
   81adc:	4798      	blx	r3
   81ade:	bd38      	pop	{r3, r4, r5, pc}

00081ae0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   81ae0:	b510      	push	{r4, lr}
   81ae2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81ae4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81ae6:	b963      	cbnz	r3, 81b02 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81ae8:	6801      	ldr	r1, [r0, #0]
   81aea:	2900      	cmp	r1, #0
   81aec:	d12e      	bne.n	81b4c <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81aee:	6840      	ldr	r0, [r0, #4]
   81af0:	f642 439d 	movw	r3, #11421	; 0x2c9d
   81af4:	f2c0 0308 	movt	r3, #8
   81af8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   81afa:	f04f 0000 	mov.w	r0, #0
   81afe:	6060      	str	r0, [r4, #4]
   81b00:	e024      	b.n	81b4c <prvCopyDataToQueue+0x6c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81b02:	b982      	cbnz	r2, 81b26 <prvCopyDataToQueue+0x46>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81b04:	6880      	ldr	r0, [r0, #8]
   81b06:	461a      	mov	r2, r3
   81b08:	f643 5369 	movw	r3, #15721	; 0x3d69
   81b0c:	f2c0 0308 	movt	r3, #8
   81b10:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81b12:	68a2      	ldr	r2, [r4, #8]
   81b14:	6c21      	ldr	r1, [r4, #64]	; 0x40
   81b16:	1850      	adds	r0, r2, r1
   81b18:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81b1a:	6863      	ldr	r3, [r4, #4]
   81b1c:	4298      	cmp	r0, r3
   81b1e:	d315      	bcc.n	81b4c <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81b20:	6822      	ldr	r2, [r4, #0]
   81b22:	60a2      	str	r2, [r4, #8]
   81b24:	e012      	b.n	81b4c <prvCopyDataToQueue+0x6c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81b26:	68c0      	ldr	r0, [r0, #12]
   81b28:	461a      	mov	r2, r3
   81b2a:	f643 5369 	movw	r3, #15721	; 0x3d69
   81b2e:	f2c0 0308 	movt	r3, #8
   81b32:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   81b34:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81b36:	f1c2 0000 	rsb	r0, r2, #0
   81b3a:	68e1      	ldr	r1, [r4, #12]
   81b3c:	180b      	adds	r3, r1, r0
   81b3e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81b40:	6822      	ldr	r2, [r4, #0]
   81b42:	4293      	cmp	r3, r2
   81b44:	d202      	bcs.n	81b4c <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81b46:	6861      	ldr	r1, [r4, #4]
   81b48:	1808      	adds	r0, r1, r0
   81b4a:	60e0      	str	r0, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81b4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81b4e:	f102 0201 	add.w	r2, r2, #1
   81b52:	63a2      	str	r2, [r4, #56]	; 0x38
   81b54:	bd10      	pop	{r4, pc}
   81b56:	bf00      	nop

00081b58 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81b58:	b538      	push	{r3, r4, r5, lr}
   81b5a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81b5c:	4604      	mov	r4, r0
   81b5e:	b930      	cbnz	r0, 81b6e <xQueueGenericReset+0x16>
   81b60:	f241 7439 	movw	r4, #5945	; 0x1739
   81b64:	f2c0 0408 	movt	r4, #8
   81b68:	47a0      	blx	r4
   81b6a:	bf00      	nop
   81b6c:	e7fd      	b.n	81b6a <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   81b6e:	f241 734d 	movw	r3, #5965	; 0x174d
   81b72:	f2c0 0308 	movt	r3, #8
   81b76:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81b78:	6823      	ldr	r3, [r4, #0]
   81b7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81b7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81b7e:	fb00 3102 	mla	r1, r0, r2, r3
   81b82:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81b84:	f04f 0100 	mov.w	r1, #0
   81b88:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81b8a:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81b8c:	f100 30ff 	add.w	r0, r0, #4294967295
   81b90:	fb02 3300 	mla	r3, r2, r0, r3
   81b94:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81b96:	f04f 32ff 	mov.w	r2, #4294967295
   81b9a:	6462      	str	r2, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81b9c:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81b9e:	b985      	cbnz	r5, 81bc2 <xQueueGenericReset+0x6a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81ba0:	6921      	ldr	r1, [r4, #16]
   81ba2:	b1c1      	cbz	r1, 81bd6 <xQueueGenericReset+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81ba4:	f104 0010 	add.w	r0, r4, #16
   81ba8:	f642 232d 	movw	r3, #10797	; 0x2a2d
   81bac:	f2c0 0308 	movt	r3, #8
   81bb0:	4798      	blx	r3
   81bb2:	2801      	cmp	r0, #1
   81bb4:	d10f      	bne.n	81bd6 <xQueueGenericReset+0x7e>
				{
					portYIELD_WITHIN_API();
   81bb6:	f241 7029 	movw	r0, #5929	; 0x1729
   81bba:	f2c0 0008 	movt	r0, #8
   81bbe:	4780      	blx	r0
   81bc0:	e009      	b.n	81bd6 <xQueueGenericReset+0x7e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81bc2:	f104 0010 	add.w	r0, r4, #16
   81bc6:	f241 652d 	movw	r5, #5677	; 0x162d
   81bca:	f2c0 0508 	movt	r5, #8
   81bce:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81bd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81bd4:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81bd6:	f241 7275 	movw	r2, #6005	; 0x1775
   81bda:	f2c0 0208 	movt	r2, #8
   81bde:	4790      	blx	r2

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81be0:	f04f 0001 	mov.w	r0, #1
   81be4:	bd38      	pop	{r3, r4, r5, pc}
   81be6:	bf00      	nop

00081be8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81bea:	460d      	mov	r5, r1
   81bec:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81bee:	4606      	mov	r6, r0
   81bf0:	b1e0      	cbz	r0, 81c2c <xQueueGenericCreate+0x44>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81bf2:	f04f 0050 	mov.w	r0, #80	; 0x50
   81bf6:	f641 03c9 	movw	r3, #6345	; 0x18c9
   81bfa:	f2c0 0308 	movt	r3, #8
   81bfe:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81c00:	4604      	mov	r4, r0
   81c02:	b198      	cbz	r0, 81c2c <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81c04:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81c08:	f100 0001 	add.w	r0, r0, #1
   81c0c:	f641 01c9 	movw	r1, #6345	; 0x18c9
   81c10:	f2c0 0108 	movt	r1, #8
   81c14:	4788      	blx	r1
   81c16:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81c18:	b970      	cbnz	r0, 81c38 <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81c1a:	4620      	mov	r0, r4
   81c1c:	f641 12c9 	movw	r2, #6601	; 0x19c9
   81c20:	f2c0 0208 	movt	r2, #8
   81c24:	4790      	blx	r2
   81c26:	e001      	b.n	81c2c <xQueueGenericCreate+0x44>
			}
		}
	}

	configASSERT( xReturn );
   81c28:	bf00      	nop
   81c2a:	e7fd      	b.n	81c28 <xQueueGenericCreate+0x40>
   81c2c:	f241 7039 	movw	r0, #5945	; 0x1739
   81c30:	f2c0 0008 	movt	r0, #8
   81c34:	4780      	blx	r0
   81c36:	e7f7      	b.n	81c28 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81c38:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81c3a:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81c3c:	4620      	mov	r0, r4
   81c3e:	f04f 0101 	mov.w	r1, #1
   81c42:	f641 3359 	movw	r3, #7001	; 0x1b59
   81c46:	f2c0 0308 	movt	r3, #8
   81c4a:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81c4c:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81c50:	4620      	mov	r0, r4
   81c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081c54 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c58:	b085      	sub	sp, #20
   81c5a:	468a      	mov	sl, r1
   81c5c:	9201      	str	r2, [sp, #4]
   81c5e:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81c60:	4604      	mov	r4, r0
   81c62:	b930      	cbnz	r0, 81c72 <xQueueGenericSend+0x1e>
   81c64:	f241 7439 	movw	r4, #5945	; 0x1739
   81c68:	f2c0 0408 	movt	r4, #8
   81c6c:	47a0      	blx	r4
   81c6e:	bf00      	nop
   81c70:	e7fd      	b.n	81c6e <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81c72:	b941      	cbnz	r1, 81c86 <xQueueGenericSend+0x32>
   81c74:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81c76:	b14b      	cbz	r3, 81c8c <xQueueGenericSend+0x38>
   81c78:	f241 7039 	movw	r0, #5945	; 0x1739
   81c7c:	f2c0 0008 	movt	r0, #8
   81c80:	4780      	blx	r0
   81c82:	bf00      	nop
   81c84:	e7fd      	b.n	81c82 <xQueueGenericSend+0x2e>
   81c86:	f04f 0700 	mov.w	r7, #0
   81c8a:	e001      	b.n	81c90 <xQueueGenericSend+0x3c>
   81c8c:	f04f 0700 	mov.w	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81c90:	f241 764d 	movw	r6, #5965	; 0x174d
   81c94:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81c98:	f642 2bd5 	movw	fp, #10965	; 0x2ad5
   81c9c:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81ca0:	f241 7575 	movw	r5, #6005	; 0x1775
   81ca4:	f2c0 0508 	movt	r5, #8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81ca8:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81caa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81cac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   81cae:	428a      	cmp	r2, r1
   81cb0:	d21f      	bcs.n	81cf2 <xQueueGenericSend+0x9e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81cb2:	4620      	mov	r0, r4
   81cb4:	4651      	mov	r1, sl
   81cb6:	9a00      	ldr	r2, [sp, #0]
   81cb8:	f641 23e1 	movw	r3, #6881	; 0x1ae1
   81cbc:	f2c0 0308 	movt	r3, #8
   81cc0:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81cc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81cc4:	b169      	cbz	r1, 81ce2 <xQueueGenericSend+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81cc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81cca:	f642 222d 	movw	r2, #10797	; 0x2a2d
   81cce:	f2c0 0208 	movt	r2, #8
   81cd2:	4790      	blx	r2
   81cd4:	2801      	cmp	r0, #1
   81cd6:	d104      	bne.n	81ce2 <xQueueGenericSend+0x8e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81cd8:	f241 7029 	movw	r0, #5929	; 0x1729
   81cdc:	f2c0 0008 	movt	r0, #8
   81ce0:	4780      	blx	r0
					}
				}

				taskEXIT_CRITICAL();
   81ce2:	f241 7375 	movw	r3, #6005	; 0x1775
   81ce6:	f2c0 0308 	movt	r3, #8
   81cea:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81cec:	f04f 0001 	mov.w	r0, #1
   81cf0:	e066      	b.n	81dc0 <xQueueGenericSend+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81cf2:	9b01      	ldr	r3, [sp, #4]
   81cf4:	b93b      	cbnz	r3, 81d06 <xQueueGenericSend+0xb2>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81cf6:	f241 7275 	movw	r2, #6005	; 0x1775
   81cfa:	f2c0 0208 	movt	r2, #8
   81cfe:	4790      	blx	r2

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81d00:	f04f 0000 	mov.w	r0, #0
   81d04:	e05c      	b.n	81dc0 <xQueueGenericSend+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
   81d06:	b91f      	cbnz	r7, 81d10 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81d08:	a802      	add	r0, sp, #8
   81d0a:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81d0c:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81d10:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81d12:	f242 403d 	movw	r0, #9277	; 0x243d
   81d16:	f2c0 0008 	movt	r0, #8
   81d1a:	4780      	blx	r0
		prvLockQueue( pxQueue );
   81d1c:	47b0      	blx	r6
   81d1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   81d20:	f1b2 3fff 	cmp.w	r2, #4294967295
   81d24:	bf04      	itt	eq
   81d26:	2200      	moveq	r2, #0
   81d28:	6462      	streq	r2, [r4, #68]	; 0x44
   81d2a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81d2c:	f1b1 3fff 	cmp.w	r1, #4294967295
   81d30:	bf04      	itt	eq
   81d32:	2100      	moveq	r1, #0
   81d34:	64a1      	streq	r1, [r4, #72]	; 0x48
   81d36:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81d38:	a802      	add	r0, sp, #8
   81d3a:	a901      	add	r1, sp, #4
   81d3c:	f642 3305 	movw	r3, #11013	; 0x2b05
   81d40:	f2c0 0308 	movt	r3, #8
   81d44:	4798      	blx	r3
   81d46:	bb70      	cbnz	r0, 81da6 <xQueueGenericSend+0x152>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81d48:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81d4a:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81d4e:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81d52:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81d54:	45c1      	cmp	r9, r8
   81d56:	d11a      	bne.n	81d8e <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81d58:	f104 0010 	add.w	r0, r4, #16
   81d5c:	9901      	ldr	r1, [sp, #4]
   81d5e:	f642 1265 	movw	r2, #10597	; 0x2965
   81d62:	f2c0 0208 	movt	r2, #8
   81d66:	4790      	blx	r2
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81d68:	4620      	mov	r0, r4
   81d6a:	f641 2105 	movw	r1, #6661	; 0x1a05
   81d6e:	f2c0 0108 	movt	r1, #8
   81d72:	4788      	blx	r1
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81d74:	f242 6005 	movw	r0, #9733	; 0x2605
   81d78:	f2c0 0008 	movt	r0, #8
   81d7c:	4780      	blx	r0
   81d7e:	2800      	cmp	r0, #0
   81d80:	d192      	bne.n	81ca8 <xQueueGenericSend+0x54>
				{
					portYIELD_WITHIN_API();
   81d82:	f241 7329 	movw	r3, #5929	; 0x1729
   81d86:	f2c0 0308 	movt	r3, #8
   81d8a:	4798      	blx	r3
   81d8c:	e78c      	b.n	81ca8 <xQueueGenericSend+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81d8e:	4620      	mov	r0, r4
   81d90:	f641 2105 	movw	r1, #6661	; 0x1a05
   81d94:	f2c0 0108 	movt	r1, #8
   81d98:	4788      	blx	r1
				( void ) xTaskResumeAll();
   81d9a:	f242 6305 	movw	r3, #9733	; 0x2605
   81d9e:	f2c0 0308 	movt	r3, #8
   81da2:	4798      	blx	r3
   81da4:	e780      	b.n	81ca8 <xQueueGenericSend+0x54>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81da6:	4620      	mov	r0, r4
   81da8:	f641 2205 	movw	r2, #6661	; 0x1a05
   81dac:	f2c0 0208 	movt	r2, #8
   81db0:	4790      	blx	r2
			( void ) xTaskResumeAll();
   81db2:	f242 6005 	movw	r0, #9733	; 0x2605
   81db6:	f2c0 0008 	movt	r0, #8
   81dba:	4780      	blx	r0

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81dbc:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   81dc0:	b005      	add	sp, #20
   81dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81dc6:	bf00      	nop

00081dc8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81dcc:	460e      	mov	r6, r1
   81dce:	4615      	mov	r5, r2
   81dd0:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81dd2:	4604      	mov	r4, r0
   81dd4:	b930      	cbnz	r0, 81de4 <xQueueGenericSendFromISR+0x1c>
   81dd6:	f241 7539 	movw	r5, #5945	; 0x1739
   81dda:	f2c0 0508 	movt	r5, #8
   81dde:	47a8      	blx	r5
   81de0:	bf00      	nop
   81de2:	e7fd      	b.n	81de0 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81de4:	b941      	cbnz	r1, 81df8 <xQueueGenericSendFromISR+0x30>
   81de6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81de8:	b133      	cbz	r3, 81df8 <xQueueGenericSendFromISR+0x30>
   81dea:	f241 7039 	movw	r0, #5945	; 0x1739
   81dee:	f2c0 0008 	movt	r0, #8
   81df2:	4780      	blx	r0
   81df4:	bf00      	nop
   81df6:	e7fd      	b.n	81df4 <xQueueGenericSendFromISR+0x2c>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81df8:	f241 7139 	movw	r1, #5945	; 0x1739
   81dfc:	f2c0 0108 	movt	r1, #8
   81e00:	4788      	blx	r1
   81e02:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81e04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81e06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81e08:	429a      	cmp	r2, r3
   81e0a:	d221      	bcs.n	81e50 <xQueueGenericSendFromISR+0x88>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81e0c:	4620      	mov	r0, r4
   81e0e:	4631      	mov	r1, r6
   81e10:	4642      	mov	r2, r8
   81e12:	f641 23e1 	movw	r3, #6881	; 0x1ae1
   81e16:	f2c0 0308 	movt	r3, #8
   81e1a:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81e1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81e1e:	f1b0 3fff 	cmp.w	r0, #4294967295
   81e22:	d10e      	bne.n	81e42 <xQueueGenericSendFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81e24:	6a62      	ldr	r2, [r4, #36]	; 0x24
   81e26:	b1b2      	cbz	r2, 81e56 <xQueueGenericSendFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81e28:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81e2c:	f642 242d 	movw	r4, #10797	; 0x2a2d
   81e30:	f2c0 0408 	movt	r4, #8
   81e34:	47a0      	blx	r4
   81e36:	b188      	cbz	r0, 81e5c <xQueueGenericSendFromISR+0x94>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81e38:	b19d      	cbz	r5, 81e62 <xQueueGenericSendFromISR+0x9a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81e3a:	f04f 0401 	mov.w	r4, #1
   81e3e:	602c      	str	r4, [r5, #0]
   81e40:	e011      	b.n	81e66 <xQueueGenericSendFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81e42:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81e44:	f101 0101 	add.w	r1, r1, #1
   81e48:	64a1      	str	r1, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81e4a:	f04f 0401 	mov.w	r4, #1
   81e4e:	e00a      	b.n	81e66 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81e50:	f04f 0400 	mov.w	r4, #0
   81e54:	e007      	b.n	81e66 <xQueueGenericSendFromISR+0x9e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81e56:	f04f 0401 	mov.w	r4, #1
   81e5a:	e004      	b.n	81e66 <xQueueGenericSendFromISR+0x9e>
   81e5c:	f04f 0401 	mov.w	r4, #1
   81e60:	e001      	b.n	81e66 <xQueueGenericSendFromISR+0x9e>
   81e62:	f04f 0401 	mov.w	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81e66:	4638      	mov	r0, r7
   81e68:	f241 736d 	movw	r3, #5997	; 0x176d
   81e6c:	f2c0 0308 	movt	r3, #8
   81e70:	4798      	blx	r3

	return xReturn;
}
   81e72:	4620      	mov	r0, r4
   81e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081e78 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81e7c:	b085      	sub	sp, #20
   81e7e:	4689      	mov	r9, r1
   81e80:	9201      	str	r2, [sp, #4]
   81e82:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81e84:	4604      	mov	r4, r0
   81e86:	b930      	cbnz	r0, 81e96 <xQueueGenericReceive+0x1e>
   81e88:	f241 7439 	movw	r4, #5945	; 0x1739
   81e8c:	f2c0 0408 	movt	r4, #8
   81e90:	47a0      	blx	r4
   81e92:	bf00      	nop
   81e94:	e7fd      	b.n	81e92 <xQueueGenericReceive+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81e96:	b941      	cbnz	r1, 81eaa <xQueueGenericReceive+0x32>
   81e98:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81e9a:	b14b      	cbz	r3, 81eb0 <xQueueGenericReceive+0x38>
   81e9c:	f241 7039 	movw	r0, #5945	; 0x1739
   81ea0:	f2c0 0008 	movt	r0, #8
   81ea4:	4780      	blx	r0
   81ea6:	bf00      	nop
   81ea8:	e7fd      	b.n	81ea6 <xQueueGenericReceive+0x2e>
   81eaa:	f04f 0700 	mov.w	r7, #0
   81eae:	e001      	b.n	81eb4 <xQueueGenericReceive+0x3c>
   81eb0:	f04f 0700 	mov.w	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81eb4:	f241 764d 	movw	r6, #5965	; 0x174d
   81eb8:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81ebc:	f642 2bd5 	movw	fp, #10965	; 0x2ad5
   81ec0:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81ec4:	f241 7575 	movw	r5, #6005	; 0x1775
   81ec8:	f2c0 0508 	movt	r5, #8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81ecc:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81ece:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   81ed0:	2900      	cmp	r1, #0
   81ed2:	d03f      	beq.n	81f54 <xQueueGenericReceive+0xdc>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81ed4:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81ed6:	4620      	mov	r0, r4
   81ed8:	4649      	mov	r1, r9
   81eda:	f641 23b9 	movw	r3, #6841	; 0x1ab9
   81ede:	f2c0 0308 	movt	r3, #8
   81ee2:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81ee4:	f1ba 0f00 	cmp.w	sl, #0
   81ee8:	d11c      	bne.n	81f24 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81eea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81eec:	f103 30ff 	add.w	r0, r3, #4294967295
   81ef0:	63a0      	str	r0, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81ef2:	6821      	ldr	r1, [r4, #0]
   81ef4:	b929      	cbnz	r1, 81f02 <xQueueGenericReceive+0x8a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81ef6:	f642 32c1 	movw	r2, #11201	; 0x2bc1
   81efa:	f2c0 0208 	movt	r2, #8
   81efe:	4790      	blx	r2
   81f00:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81f02:	6923      	ldr	r3, [r4, #16]
   81f04:	b1f3      	cbz	r3, 81f44 <xQueueGenericReceive+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81f06:	f104 0010 	add.w	r0, r4, #16
   81f0a:	f642 212d 	movw	r1, #10797	; 0x2a2d
   81f0e:	f2c0 0108 	movt	r1, #8
   81f12:	4788      	blx	r1
   81f14:	2801      	cmp	r0, #1
   81f16:	d115      	bne.n	81f44 <xQueueGenericReceive+0xcc>
						{
							portYIELD_WITHIN_API();
   81f18:	f241 7029 	movw	r0, #5929	; 0x1729
   81f1c:	f2c0 0008 	movt	r0, #8
   81f20:	4780      	blx	r0
   81f22:	e00f      	b.n	81f44 <xQueueGenericReceive+0xcc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81f24:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81f26:	6a60      	ldr	r0, [r4, #36]	; 0x24
   81f28:	b160      	cbz	r0, 81f44 <xQueueGenericReceive+0xcc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81f2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81f2e:	f642 212d 	movw	r1, #10797	; 0x2a2d
   81f32:	f2c0 0108 	movt	r1, #8
   81f36:	4788      	blx	r1
   81f38:	b120      	cbz	r0, 81f44 <xQueueGenericReceive+0xcc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81f3a:	f241 7229 	movw	r2, #5929	; 0x1729
   81f3e:	f2c0 0208 	movt	r2, #8
   81f42:	4790      	blx	r2
						}
					}
				}

				taskEXIT_CRITICAL();
   81f44:	f241 7275 	movw	r2, #6005	; 0x1775
   81f48:	f2c0 0208 	movt	r2, #8
   81f4c:	4790      	blx	r2
				return pdPASS;
   81f4e:	f04f 0001 	mov.w	r0, #1
   81f52:	e071      	b.n	82038 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81f54:	9a01      	ldr	r2, [sp, #4]
   81f56:	b93a      	cbnz	r2, 81f68 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81f58:	f241 7275 	movw	r2, #6005	; 0x1775
   81f5c:	f2c0 0208 	movt	r2, #8
   81f60:	4790      	blx	r2
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81f62:	f04f 0000 	mov.w	r0, #0
   81f66:	e067      	b.n	82038 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
   81f68:	b91f      	cbnz	r7, 81f72 <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81f6a:	a802      	add	r0, sp, #8
   81f6c:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81f6e:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81f72:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81f74:	f242 433d 	movw	r3, #9277	; 0x243d
   81f78:	f2c0 0308 	movt	r3, #8
   81f7c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81f7e:	47b0      	blx	r6
   81f80:	6c60      	ldr	r0, [r4, #68]	; 0x44
   81f82:	f1b0 3fff 	cmp.w	r0, #4294967295
   81f86:	bf04      	itt	eq
   81f88:	2000      	moveq	r0, #0
   81f8a:	6460      	streq	r0, [r4, #68]	; 0x44
   81f8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81f8e:	f1b1 3fff 	cmp.w	r1, #4294967295
   81f92:	bf04      	itt	eq
   81f94:	2100      	moveq	r1, #0
   81f96:	64a1      	streq	r1, [r4, #72]	; 0x48
   81f98:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81f9a:	a802      	add	r0, sp, #8
   81f9c:	a901      	add	r1, sp, #4
   81f9e:	f642 3205 	movw	r2, #11013	; 0x2b05
   81fa2:	f2c0 0208 	movt	r2, #8
   81fa6:	4790      	blx	r2
   81fa8:	2800      	cmp	r0, #0
   81faa:	d138      	bne.n	8201e <xQueueGenericReceive+0x1a6>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81fac:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81fae:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81fb2:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81fb4:	f1b8 0f00 	cmp.w	r8, #0
   81fb8:	d125      	bne.n	82006 <xQueueGenericReceive+0x18e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81fba:	6823      	ldr	r3, [r4, #0]
   81fbc:	b93b      	cbnz	r3, 81fce <xQueueGenericReceive+0x156>
					{
						portENTER_CRITICAL();
   81fbe:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81fc0:	6860      	ldr	r0, [r4, #4]
   81fc2:	f642 31f5 	movw	r1, #11253	; 0x2bf5
   81fc6:	f2c0 0108 	movt	r1, #8
   81fca:	4788      	blx	r1
						}
						portEXIT_CRITICAL();
   81fcc:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81fce:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81fd2:	9901      	ldr	r1, [sp, #4]
   81fd4:	f642 1265 	movw	r2, #10597	; 0x2965
   81fd8:	f2c0 0208 	movt	r2, #8
   81fdc:	4790      	blx	r2
				prvUnlockQueue( pxQueue );
   81fde:	4620      	mov	r0, r4
   81fe0:	f641 2305 	movw	r3, #6661	; 0x1a05
   81fe4:	f2c0 0308 	movt	r3, #8
   81fe8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81fea:	f242 6005 	movw	r0, #9733	; 0x2605
   81fee:	f2c0 0008 	movt	r0, #8
   81ff2:	4780      	blx	r0
   81ff4:	2800      	cmp	r0, #0
   81ff6:	f47f af69 	bne.w	81ecc <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
   81ffa:	f241 7129 	movw	r1, #5929	; 0x1729
   81ffe:	f2c0 0108 	movt	r1, #8
   82002:	4788      	blx	r1
   82004:	e762      	b.n	81ecc <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82006:	4620      	mov	r0, r4
   82008:	f641 2105 	movw	r1, #6661	; 0x1a05
   8200c:	f2c0 0108 	movt	r1, #8
   82010:	4788      	blx	r1
				( void ) xTaskResumeAll();
   82012:	f242 6205 	movw	r2, #9733	; 0x2605
   82016:	f2c0 0208 	movt	r2, #8
   8201a:	4790      	blx	r2
   8201c:	e756      	b.n	81ecc <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   8201e:	4620      	mov	r0, r4
   82020:	f641 2305 	movw	r3, #6661	; 0x1a05
   82024:	f2c0 0308 	movt	r3, #8
   82028:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8202a:	f242 6005 	movw	r0, #9733	; 0x2605
   8202e:	f2c0 0008 	movt	r0, #8
   82032:	4780      	blx	r0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   82034:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   82038:	b005      	add	sp, #20
   8203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8203e:	bf00      	nop

00082040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   82040:	b538      	push	{r3, r4, r5, lr}
   82042:	4604      	mov	r4, r0
   82044:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   82046:	f241 734d 	movw	r3, #5965	; 0x174d
   8204a:	f2c0 0308 	movt	r3, #8
   8204e:	4798      	blx	r3
   82050:	6c60      	ldr	r0, [r4, #68]	; 0x44
   82052:	f1b0 3fff 	cmp.w	r0, #4294967295
   82056:	bf04      	itt	eq
   82058:	2000      	moveq	r0, #0
   8205a:	6460      	streq	r0, [r4, #68]	; 0x44
   8205c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   8205e:	f1b1 3fff 	cmp.w	r1, #4294967295
   82062:	bf04      	itt	eq
   82064:	2100      	moveq	r1, #0
   82066:	64a1      	streq	r1, [r4, #72]	; 0x48
   82068:	f241 7275 	movw	r2, #6005	; 0x1775
   8206c:	f2c0 0208 	movt	r2, #8
   82070:	4790      	blx	r2
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   82072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82074:	b93b      	cbnz	r3, 82086 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82076:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8207a:	4629      	mov	r1, r5
   8207c:	f642 12d9 	movw	r2, #10713	; 0x29d9
   82080:	f2c0 0208 	movt	r2, #8
   82084:	4790      	blx	r2
		}
		prvUnlockQueue( pxQueue );
   82086:	4620      	mov	r0, r4
   82088:	f641 2105 	movw	r1, #6661	; 0x1a05
   8208c:	f2c0 0108 	movt	r1, #8
   82090:	4788      	blx	r1
   82092:	bd38      	pop	{r3, r4, r5, pc}

00082094 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   82094:	b510      	push	{r4, lr}
   82096:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   82098:	f64a 2384 	movw	r3, #43652	; 0xaa84
   8209c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   820a0:	6818      	ldr	r0, [r3, #0]
   820a2:	6044      	str	r4, [r0, #4]

	if( xTimeToWake < xTickCount )
   820a4:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   820a8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   820ac:	680a      	ldr	r2, [r1, #0]
   820ae:	4294      	cmp	r4, r2
   820b0:	d211      	bcs.n	820d6 <prvAddCurrentTaskToDelayedList+0x42>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   820b2:	f64a 22a4 	movw	r2, #43684	; 0xaaa4
   820b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   820ba:	6810      	ldr	r0, [r2, #0]
   820bc:	f64a 2384 	movw	r3, #43652	; 0xaa84
   820c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   820c4:	6819      	ldr	r1, [r3, #0]
   820c6:	f101 0104 	add.w	r1, r1, #4
   820ca:	f241 626d 	movw	r2, #5741	; 0x166d
   820ce:	f2c0 0208 	movt	r2, #8
   820d2:	4790      	blx	r2
   820d4:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   820d6:	f64a 13e4 	movw	r3, #43492	; 0xa9e4
   820da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   820de:	6818      	ldr	r0, [r3, #0]
   820e0:	f64a 2184 	movw	r1, #43652	; 0xaa84
   820e4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   820e8:	6809      	ldr	r1, [r1, #0]
   820ea:	f101 0104 	add.w	r1, r1, #4
   820ee:	f241 626d 	movw	r2, #5741	; 0x166d
   820f2:	f2c0 0208 	movt	r2, #8
   820f6:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   820f8:	f240 003c 	movw	r0, #60	; 0x3c
   820fc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82100:	6803      	ldr	r3, [r0, #0]
   82102:	429c      	cmp	r4, r3
   82104:	d204      	bcs.n	82110 <prvAddCurrentTaskToDelayedList+0x7c>
		{
			xNextTaskUnblockTime = xTimeToWake;
   82106:	f240 013c 	movw	r1, #60	; 0x3c
   8210a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8210e:	600c      	str	r4, [r1, #0]
   82110:	bd10      	pop	{r4, pc}
   82112:	bf00      	nop

00082114 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   82114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82118:	460f      	mov	r7, r1
   8211a:	4690      	mov	r8, r2
   8211c:	469a      	mov	sl, r3
   8211e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   82120:	9e0c      	ldr	r6, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   82122:	4681      	mov	r9, r0
   82124:	b930      	cbnz	r0, 82134 <xTaskGenericCreate+0x20>
   82126:	f241 7739 	movw	r7, #5945	; 0x1739
   8212a:	f2c0 0708 	movt	r7, #8
   8212e:	47b8      	blx	r7
   82130:	bf00      	nop
   82132:	e7fd      	b.n	82130 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   82134:	2d04      	cmp	r5, #4
   82136:	d906      	bls.n	82146 <xTaskGenericCreate+0x32>
   82138:	f241 7539 	movw	r5, #5945	; 0x1739
   8213c:	f2c0 0508 	movt	r5, #8
   82140:	47a8      	blx	r5
   82142:	bf00      	nop
   82144:	e7fd      	b.n	82142 <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   82146:	f04f 004c 	mov.w	r0, #76	; 0x4c
   8214a:	f641 03c9 	movw	r3, #6345	; 0x18c9
   8214e:	f2c0 0308 	movt	r3, #8
   82152:	4798      	blx	r3

	if( pxNewTCB != NULL )
   82154:	4604      	mov	r4, r0
   82156:	2800      	cmp	r0, #0
   82158:	f000 8127 	beq.w	823aa <xTaskGenericCreate+0x296>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8215c:	2e00      	cmp	r6, #0
   8215e:	f040 8122 	bne.w	823a6 <xTaskGenericCreate+0x292>
   82162:	ea4f 0088 	mov.w	r0, r8, lsl #2
   82166:	f641 01c9 	movw	r1, #6345	; 0x18c9
   8216a:	f2c0 0108 	movt	r1, #8
   8216e:	4788      	blx	r1
   82170:	4606      	mov	r6, r0
   82172:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   82174:	b930      	cbnz	r0, 82184 <xTaskGenericCreate+0x70>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   82176:	4620      	mov	r0, r4
   82178:	f641 12c9 	movw	r2, #6601	; 0x19c9
   8217c:	f2c0 0208 	movt	r2, #8
   82180:	4790      	blx	r2
   82182:	e112      	b.n	823aa <xTaskGenericCreate+0x296>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   82184:	4630      	mov	r0, r6
   82186:	f04f 01a5 	mov.w	r1, #165	; 0xa5
   8218a:	ea4f 0288 	mov.w	r2, r8, lsl #2
   8218e:	f643 567b 	movw	r6, #15739	; 0x3d7b
   82192:	f2c0 0608 	movt	r6, #8
   82196:	47b0      	blx	r6
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   82198:	f108 38ff 	add.w	r8, r8, #4294967295
   8219c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8219e:	eb00 0288 	add.w	r2, r0, r8, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   821a2:	f022 0b07 	bic.w	fp, r2, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   821a6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   821aa:	4639      	mov	r1, r7
   821ac:	f04f 020a 	mov.w	r2, #10
   821b0:	f643 7721 	movw	r7, #16161	; 0x3f21
   821b4:	f2c0 0708 	movt	r7, #8
   821b8:	47b8      	blx	r7
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   821ba:	f04f 0300 	mov.w	r3, #0
   821be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   821c2:	2d04      	cmp	r5, #4
   821c4:	bf34      	ite	cc
   821c6:	462e      	movcc	r6, r5
   821c8:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   821ca:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   821cc:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   821ce:	f104 0704 	add.w	r7, r4, #4
   821d2:	4638      	mov	r0, r7
   821d4:	f241 6845 	movw	r8, #5701	; 0x1645
   821d8:	f2c0 0808 	movt	r8, #8
   821dc:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   821de:	f104 0018 	add.w	r0, r4, #24
   821e2:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   821e4:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   821e6:	f1c6 0605 	rsb	r6, r6, #5
   821ea:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   821ec:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   821ee:	4658      	mov	r0, fp
   821f0:	4649      	mov	r1, r9
   821f2:	4652      	mov	r2, sl
   821f4:	f241 63e9 	movw	r3, #5865	; 0x16e9
   821f8:	f2c0 0308 	movt	r3, #8
   821fc:	4798      	blx	r3
   821fe:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82200:	f010 0f07 	tst.w	r0, #7
   82204:	d006      	beq.n	82214 <xTaskGenericCreate+0x100>
   82206:	f241 7439 	movw	r4, #5945	; 0x1739
   8220a:	f2c0 0408 	movt	r4, #8
   8220e:	47a0      	blx	r4
   82210:	bf00      	nop
   82212:	e7fd      	b.n	82210 <xTaskGenericCreate+0xfc>

		if( ( void * ) pxCreatedTask != NULL )
   82214:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82216:	b101      	cbz	r1, 8221a <xTaskGenericCreate+0x106>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   82218:	600c      	str	r4, [r1, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   8221a:	f241 704d 	movw	r0, #5965	; 0x174d
   8221e:	f2c0 0008 	movt	r0, #8
   82222:	4780      	blx	r0
		{
			uxCurrentNumberOfTasks++;
   82224:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   82228:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8222c:	681a      	ldr	r2, [r3, #0]
   8222e:	f102 0201 	add.w	r2, r2, #1
   82232:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82234:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82238:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8223c:	6808      	ldr	r0, [r1, #0]
   8223e:	2800      	cmp	r0, #0
   82240:	d149      	bne.n	822d6 <xTaskGenericCreate+0x1c2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   82242:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82246:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8224a:	600c      	str	r4, [r1, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   8224c:	f64a 20c4 	movw	r0, #43716	; 0xaac4
   82250:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82254:	6803      	ldr	r3, [r0, #0]
   82256:	2b01      	cmp	r3, #1
   82258:	d150      	bne.n	822fc <xTaskGenericCreate+0x1e8>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   8225a:	f64a 291c 	movw	r9, #43548	; 0xaa1c
   8225e:	f2c2 0907 	movt	r9, #8199	; 0x2007
   82262:	4648      	mov	r0, r9
   82264:	f241 662d 	movw	r6, #5677	; 0x162d
   82268:	f2c0 0608 	movt	r6, #8
   8226c:	47b0      	blx	r6
   8226e:	f109 0014 	add.w	r0, r9, #20
   82272:	47b0      	blx	r6
   82274:	f109 0028 	add.w	r0, r9, #40	; 0x28
   82278:	47b0      	blx	r6
   8227a:	f109 003c 	add.w	r0, r9, #60	; 0x3c
   8227e:	47b0      	blx	r6
   82280:	f109 0050 	add.w	r0, r9, #80	; 0x50
   82284:	47b0      	blx	r6
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   82286:	f64a 29ac 	movw	r9, #43692	; 0xaaac
   8228a:	f2c2 0907 	movt	r9, #8199	; 0x2007
   8228e:	4648      	mov	r0, r9
   82290:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   82292:	f64a 2804 	movw	r8, #43524	; 0xaa04
   82296:	f2c2 0807 	movt	r8, #8199	; 0x2007
   8229a:	4640      	mov	r0, r8
   8229c:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   8229e:	f64a 2088 	movw	r0, #43656	; 0xaa88
   822a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   822a6:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   822a8:	f64a 10f0 	movw	r0, #43504	; 0xa9f0
   822ac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   822b0:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   822b2:	f64a 10d0 	movw	r0, #43472	; 0xa9d0
   822b6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   822ba:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   822bc:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   822c0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   822c4:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   822c8:	f64a 21a4 	movw	r1, #43684	; 0xaaa4
   822cc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   822d0:	f8c1 8000 	str.w	r8, [r1]
   822d4:	e012      	b.n	822fc <xTaskGenericCreate+0x1e8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   822d6:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
   822da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822de:	681a      	ldr	r2, [r3, #0]
   822e0:	b962      	cbnz	r2, 822fc <xTaskGenericCreate+0x1e8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   822e2:	f64a 2184 	movw	r1, #43652	; 0xaa84
   822e6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   822ea:	6808      	ldr	r0, [r1, #0]
   822ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   822ee:	429d      	cmp	r5, r3
   822f0:	d304      	bcc.n	822fc <xTaskGenericCreate+0x1e8>
					{
						pxCurrentTCB = pxNewTCB;
   822f2:	f64a 2284 	movw	r2, #43652	; 0xaa84
   822f6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   822fa:	6014      	str	r4, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   822fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   822fe:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   82302:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82306:	681a      	ldr	r2, [r3, #0]
   82308:	4290      	cmp	r0, r2
   8230a:	d904      	bls.n	82316 <xTaskGenericCreate+0x202>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8230c:	f64a 21c8 	movw	r1, #43720	; 0xaac8
   82310:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82314:	6008      	str	r0, [r1, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   82316:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   8231a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8231e:	681a      	ldr	r2, [r3, #0]
   82320:	6422      	str	r2, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   82322:	f102 0201 	add.w	r2, r2, #1
   82326:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   82328:	f64a 2118 	movw	r1, #43544	; 0xaa18
   8232c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82330:	680b      	ldr	r3, [r1, #0]
   82332:	4298      	cmp	r0, r3
   82334:	d904      	bls.n	82340 <xTaskGenericCreate+0x22c>
   82336:	f64a 2218 	movw	r2, #43544	; 0xaa18
   8233a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8233e:	6010      	str	r0, [r2, #0]
   82340:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   82344:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82348:	4603      	mov	r3, r0
   8234a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8234e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   82352:	4639      	mov	r1, r7
   82354:	f241 624d 	movw	r2, #5709	; 0x164d
   82358:	f2c0 0208 	movt	r2, #8
   8235c:	4790      	blx	r2

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8235e:	f241 7175 	movw	r1, #6005	; 0x1775
   82362:	f2c0 0108 	movt	r1, #8
   82366:	4788      	blx	r1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   82368:	f64a 10e8 	movw	r0, #43496	; 0xa9e8
   8236c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82370:	6803      	ldr	r3, [r0, #0]
   82372:	b183      	cbz	r3, 82396 <xTaskGenericCreate+0x282>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82374:	f64a 2284 	movw	r2, #43652	; 0xaa84
   82378:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8237c:	6811      	ldr	r1, [r2, #0]
   8237e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   82380:	4285      	cmp	r5, r0
   82382:	d90c      	bls.n	8239e <xTaskGenericCreate+0x28a>
			{
				portYIELD_WITHIN_API();
   82384:	f241 7329 	movw	r3, #5929	; 0x1729
   82388:	f2c0 0308 	movt	r3, #8
   8238c:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   8238e:	f04f 0001 	mov.w	r0, #1
   82392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82396:	f04f 0001 	mov.w	r0, #1
   8239a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8239e:	f04f 0001 	mov.w	r0, #1
   823a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   823a6:	6306      	str	r6, [r0, #48]	; 0x30
   823a8:	e6ec      	b.n	82184 <xTaskGenericCreate+0x70>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   823aa:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   823ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823b2:	bf00      	nop

000823b4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   823b4:	b510      	push	{r4, lr}
   823b6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   823b8:	f04f 0300 	mov.w	r3, #0
   823bc:	9300      	str	r3, [sp, #0]
   823be:	9301      	str	r3, [sp, #4]
   823c0:	9302      	str	r3, [sp, #8]
   823c2:	9303      	str	r3, [sp, #12]
   823c4:	f242 7051 	movw	r0, #10065	; 0x2751
   823c8:	f2c0 0008 	movt	r0, #8
   823cc:	f247 6130 	movw	r1, #30256	; 0x7630
   823d0:	f2c0 0108 	movt	r1, #8
   823d4:	f04f 0282 	mov.w	r2, #130	; 0x82
   823d8:	f242 1415 	movw	r4, #8469	; 0x2115
   823dc:	f2c0 0408 	movt	r4, #8
   823e0:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   823e2:	2801      	cmp	r0, #1
   823e4:	d11f      	bne.n	82426 <vTaskStartScheduler+0x72>
		{
			xReturn = xTimerCreateTimerTask();
   823e6:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   823ea:	f2c0 0308 	movt	r3, #8
   823ee:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   823f0:	2801      	cmp	r0, #1
   823f2:	d118      	bne.n	82426 <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   823f4:	f241 7139 	movw	r1, #5945	; 0x1739
   823f8:	f2c0 0108 	movt	r1, #8
   823fc:	4788      	blx	r1

		xSchedulerRunning = pdTRUE;
   823fe:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
   82402:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82406:	f04f 0201 	mov.w	r2, #1
   8240a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   8240c:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   82410:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82414:	f04f 0100 	mov.w	r1, #0
   82418:	6001      	str	r1, [r0, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   8241a:	f641 032d 	movw	r3, #6189	; 0x182d
   8241e:	f2c0 0308 	movt	r3, #8
   82422:	4798      	blx	r3
   82424:	e007      	b.n	82436 <vTaskStartScheduler+0x82>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   82426:	b930      	cbnz	r0, 82436 <vTaskStartScheduler+0x82>
   82428:	f241 7039 	movw	r0, #5945	; 0x1739
   8242c:	f2c0 0008 	movt	r0, #8
   82430:	4780      	blx	r0
   82432:	bf00      	nop
   82434:	e7fd      	b.n	82432 <vTaskStartScheduler+0x7e>
}
   82436:	b004      	add	sp, #16
   82438:	bd10      	pop	{r4, pc}
   8243a:	bf00      	nop

0008243c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   8243c:	f64a 2380 	movw	r3, #43648	; 0xaa80
   82440:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82444:	681a      	ldr	r2, [r3, #0]
   82446:	f102 0201 	add.w	r2, r2, #1
   8244a:	601a      	str	r2, [r3, #0]
   8244c:	4770      	bx	lr
   8244e:	bf00      	nop

00082450 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   82450:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   82452:	f241 734d 	movw	r3, #5965	; 0x174d
   82456:	f2c0 0308 	movt	r3, #8
   8245a:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8245c:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   82460:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82464:	6804      	ldr	r4, [r0, #0]
	}
	taskEXIT_CRITICAL();
   82466:	f241 7175 	movw	r1, #6005	; 0x1775
   8246a:	f2c0 0108 	movt	r1, #8
   8246e:	4788      	blx	r1

	return xTicks;
}
   82470:	4620      	mov	r0, r4
   82472:	bd10      	pop	{r4, pc}

00082474 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   82474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82478:	f64a 2380 	movw	r3, #43648	; 0xaa80
   8247c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82480:	6818      	ldr	r0, [r3, #0]
   82482:	2800      	cmp	r0, #0
   82484:	f040 80b3 	bne.w	825ee <vTaskIncrementTick+0x17a>
	{
		++xTickCount;
   82488:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   8248c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82490:	6818      	ldr	r0, [r3, #0]
   82492:	f100 0001 	add.w	r0, r0, #1
   82496:	6018      	str	r0, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   82498:	6819      	ldr	r1, [r3, #0]
   8249a:	2900      	cmp	r1, #0
   8249c:	d139      	bne.n	82512 <vTaskIncrementTick+0x9e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8249e:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   824a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   824a6:	6813      	ldr	r3, [r2, #0]
   824a8:	6818      	ldr	r0, [r3, #0]
   824aa:	b130      	cbz	r0, 824ba <vTaskIncrementTick+0x46>
   824ac:	f241 7539 	movw	r5, #5945	; 0x1739
   824b0:	f2c0 0508 	movt	r5, #8
   824b4:	47a8      	blx	r5
   824b6:	bf00      	nop
   824b8:	e7fd      	b.n	824b6 <vTaskIncrementTick+0x42>

			pxTemp = pxDelayedTaskList;
   824ba:	f64a 13e4 	movw	r3, #43492	; 0xa9e4
   824be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824c2:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   824c4:	f64a 22a4 	movw	r2, #43684	; 0xaaa4
   824c8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   824cc:	6810      	ldr	r0, [r2, #0]
   824ce:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   824d0:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   824d2:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   824d6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   824da:	6811      	ldr	r1, [r2, #0]
   824dc:	f101 0101 	add.w	r1, r1, #1
   824e0:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   824e2:	681b      	ldr	r3, [r3, #0]
   824e4:	6818      	ldr	r0, [r3, #0]
   824e6:	b938      	cbnz	r0, 824f8 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   824e8:	f240 033c 	movw	r3, #60	; 0x3c
   824ec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824f0:	f04f 30ff 	mov.w	r0, #4294967295
   824f4:	6018      	str	r0, [r3, #0]
   824f6:	e00c      	b.n	82512 <vTaskIncrementTick+0x9e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   824f8:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   824fc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82500:	6811      	ldr	r1, [r2, #0]
   82502:	68cb      	ldr	r3, [r1, #12]
   82504:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82506:	6842      	ldr	r2, [r0, #4]
   82508:	f240 013c 	movw	r1, #60	; 0x3c
   8250c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82510:	600a      	str	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   82512:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82516:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8251a:	6811      	ldr	r1, [r2, #0]
   8251c:	f240 033c 	movw	r3, #60	; 0x3c
   82520:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82524:	6818      	ldr	r0, [r3, #0]
   82526:	4281      	cmp	r1, r0
   82528:	d369      	bcc.n	825fe <vTaskIncrementTick+0x18a>
   8252a:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   8252e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82532:	6811      	ldr	r1, [r2, #0]
   82534:	680b      	ldr	r3, [r1, #0]
   82536:	b17b      	cbz	r3, 82558 <vTaskIncrementTick+0xe4>
   82538:	f64a 14e4 	movw	r4, #43492	; 0xa9e4
   8253c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82540:	6820      	ldr	r0, [r4, #0]
   82542:	68c2      	ldr	r2, [r0, #12]
   82544:	68d4      	ldr	r4, [r2, #12]
   82546:	6863      	ldr	r3, [r4, #4]
   82548:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   8254c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82550:	6808      	ldr	r0, [r1, #0]
   82552:	4283      	cmp	r3, r0
   82554:	d91a      	bls.n	8258c <vTaskIncrementTick+0x118>
   82556:	e012      	b.n	8257e <vTaskIncrementTick+0x10a>
   82558:	f240 033c 	movw	r3, #60	; 0x3c
   8255c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82560:	f04f 30ff 	mov.w	r0, #4294967295
   82564:	6018      	str	r0, [r3, #0]
   82566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8256a:	6834      	ldr	r4, [r6, #0]
   8256c:	68e2      	ldr	r2, [r4, #12]
   8256e:	68d4      	ldr	r4, [r2, #12]
   82570:	6863      	ldr	r3, [r4, #4]
   82572:	4648      	mov	r0, r9
   82574:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82578:	6801      	ldr	r1, [r0, #0]
   8257a:	428b      	cmp	r3, r1
   8257c:	d91c      	bls.n	825b8 <vTaskIncrementTick+0x144>
   8257e:	f240 023c 	movw	r2, #60	; 0x3c
   82582:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82586:	6013      	str	r3, [r2, #0]
   82588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8258c:	f241 67a9 	movw	r7, #5801	; 0x16a9
   82590:	f2c0 0708 	movt	r7, #8
   82594:	f64a 2818 	movw	r8, #43544	; 0xaa18
   82598:	f2c2 0807 	movt	r8, #8199	; 0x2007
   8259c:	f64a 2b1c 	movw	fp, #43548	; 0xaa1c
   825a0:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   825a4:	f241 6a4d 	movw	sl, #5709	; 0x164d
   825a8:	f2c0 0a08 	movt	sl, #8
   825ac:	f64a 16e4 	movw	r6, #43492	; 0xa9e4
   825b0:	f2c2 0607 	movt	r6, #8199	; 0x2007
   825b4:	f64a 29a0 	movw	r9, #43680	; 0xaaa0
   825b8:	f104 0504 	add.w	r5, r4, #4
   825bc:	4628      	mov	r0, r5
   825be:	47b8      	blx	r7
   825c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   825c2:	b113      	cbz	r3, 825ca <vTaskIncrementTick+0x156>
   825c4:	f104 0018 	add.w	r0, r4, #24
   825c8:	47b8      	blx	r7
   825ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   825cc:	f8d8 2000 	ldr.w	r2, [r8]
   825d0:	4291      	cmp	r1, r2
   825d2:	bf88      	it	hi
   825d4:	f8c8 1000 	strhi.w	r1, [r8]
   825d8:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   825dc:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   825e0:	4629      	mov	r1, r5
   825e2:	47d0      	blx	sl
   825e4:	6833      	ldr	r3, [r6, #0]
   825e6:	6819      	ldr	r1, [r3, #0]
   825e8:	2900      	cmp	r1, #0
   825ea:	d1be      	bne.n	8256a <vTaskIncrementTick+0xf6>
   825ec:	e7b4      	b.n	82558 <vTaskIncrementTick+0xe4>
	}
	else
	{
		++uxMissedTicks;
   825ee:	f64a 11cc 	movw	r1, #43468	; 0xa9cc
   825f2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   825f6:	680a      	ldr	r2, [r1, #0]
   825f8:	f102 0201 	add.w	r2, r2, #1
   825fc:	600a      	str	r2, [r1, #0]
   825fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82602:	bf00      	nop

00082604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   82604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   82608:	f64a 2380 	movw	r3, #43648	; 0xaa80
   8260c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82610:	6818      	ldr	r0, [r3, #0]
   82612:	b930      	cbnz	r0, 82622 <xTaskResumeAll+0x1e>
   82614:	f241 7539 	movw	r5, #5945	; 0x1739
   82618:	f2c0 0508 	movt	r5, #8
   8261c:	47a8      	blx	r5
   8261e:	bf00      	nop
   82620:	e7fd      	b.n	8261e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   82622:	f241 714d 	movw	r1, #5965	; 0x174d
   82626:	f2c0 0108 	movt	r1, #8
   8262a:	4788      	blx	r1
	{
		--uxSchedulerSuspended;
   8262c:	f64a 2480 	movw	r4, #43648	; 0xaa80
   82630:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82634:	6822      	ldr	r2, [r4, #0]
   82636:	f102 33ff 	add.w	r3, r2, #4294967295
   8263a:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8263c:	6820      	ldr	r0, [r4, #0]
   8263e:	2800      	cmp	r0, #0
   82640:	d178      	bne.n	82734 <xTaskResumeAll+0x130>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   82642:	f64a 21c4 	movw	r1, #43716	; 0xaac4
   82646:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8264a:	680c      	ldr	r4, [r1, #0]
   8264c:	bb4c      	cbnz	r4, 826a2 <xTaskResumeAll+0x9e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8264e:	f04f 0400 	mov.w	r4, #0
   82652:	e074      	b.n	8273e <xTaskResumeAll+0x13a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   82654:	f8d8 200c 	ldr.w	r2, [r8, #12]
   82658:	68d4      	ldr	r4, [r2, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   8265a:	f104 0018 	add.w	r0, r4, #24
   8265e:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   82660:	f104 0904 	add.w	r9, r4, #4
   82664:	4648      	mov	r0, r9
   82666:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   82668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8266a:	6830      	ldr	r0, [r6, #0]
   8266c:	4283      	cmp	r3, r0
   8266e:	bf88      	it	hi
   82670:	6033      	strhi	r3, [r6, #0]
   82672:	4651      	mov	r1, sl
   82674:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82678:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   8267c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   82680:	4649      	mov	r1, r9
   82682:	f241 634d 	movw	r3, #5709	; 0x164d
   82686:	f2c0 0308 	movt	r3, #8
   8268a:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8268c:	f64a 2084 	movw	r0, #43652	; 0xaa84
   82690:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82694:	6801      	ldr	r1, [r0, #0]
   82696:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   82698:	6aca      	ldr	r2, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   8269a:	4294      	cmp	r4, r2
   8269c:	bf28      	it	cs
   8269e:	2501      	movcs	r5, #1
   826a0:	e00f      	b.n	826c2 <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   826a2:	f04f 0500 	mov.w	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   826a6:	f64a 2888 	movw	r8, #43656	; 0xaa88
   826aa:	f2c2 0807 	movt	r8, #8199	; 0x2007
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   826ae:	f241 67a9 	movw	r7, #5801	; 0x16a9
   826b2:	f2c0 0708 	movt	r7, #8
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   826b6:	f64a 2618 	movw	r6, #43544	; 0xaa18
   826ba:	f2c2 0607 	movt	r6, #8199	; 0x2007
   826be:	f64a 2a1c 	movw	sl, #43548	; 0xaa1c
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   826c2:	f8d8 2000 	ldr.w	r2, [r8]
   826c6:	2a00      	cmp	r2, #0
   826c8:	d1c4      	bne.n	82654 <xTaskResumeAll+0x50>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   826ca:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   826ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826d2:	6818      	ldr	r0, [r3, #0]
   826d4:	b1b0      	cbz	r0, 82704 <xTaskResumeAll+0x100>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   826d6:	f64a 12cc 	movw	r2, #43468	; 0xa9cc
   826da:	f2c2 0207 	movt	r2, #8199	; 0x2007
   826de:	6813      	ldr	r3, [r2, #0]
   826e0:	b1cb      	cbz	r3, 82716 <xTaskResumeAll+0x112>
					{
						vTaskIncrementTick();
   826e2:	f242 4575 	movw	r5, #9333	; 0x2475
   826e6:	f2c0 0508 	movt	r5, #8
						--uxMissedTicks;
   826ea:	f64a 14cc 	movw	r4, #43468	; 0xa9cc
   826ee:	f2c2 0407 	movt	r4, #8199	; 0x2007
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   826f2:	47a8      	blx	r5
						--uxMissedTicks;
   826f4:	6820      	ldr	r0, [r4, #0]
   826f6:	f100 31ff 	add.w	r1, r0, #4294967295
   826fa:	6021      	str	r1, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   826fc:	6822      	ldr	r2, [r4, #0]
   826fe:	2a00      	cmp	r2, #0
   82700:	d1f7      	bne.n	826f2 <xTaskResumeAll+0xee>
   82702:	e008      	b.n	82716 <xTaskResumeAll+0x112>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   82704:	2d01      	cmp	r5, #1
   82706:	d006      	beq.n	82716 <xTaskResumeAll+0x112>
   82708:	f64a 21c0 	movw	r1, #43712	; 0xaac0
   8270c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82710:	680c      	ldr	r4, [r1, #0]
   82712:	2c01      	cmp	r4, #1
   82714:	d111      	bne.n	8273a <xTaskResumeAll+0x136>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   82716:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   8271a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8271e:	f04f 0400 	mov.w	r4, #0
   82722:	601c      	str	r4, [r3, #0]
					portYIELD_WITHIN_API();
   82724:	f241 7029 	movw	r0, #5929	; 0x1729
   82728:	f2c0 0008 	movt	r0, #8
   8272c:	4780      	blx	r0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   8272e:	f04f 0401 	mov.w	r4, #1
   82732:	e004      	b.n	8273e <xTaskResumeAll+0x13a>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   82734:	f04f 0400 	mov.w	r4, #0
   82738:	e001      	b.n	8273e <xTaskResumeAll+0x13a>
   8273a:	f04f 0400 	mov.w	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   8273e:	f241 7175 	movw	r1, #6005	; 0x1775
   82742:	f2c0 0108 	movt	r1, #8
   82746:	4788      	blx	r1

	return xAlreadyYielded;
}
   82748:	4620      	mov	r0, r4
   8274a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8274e:	bf00      	nop

00082750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   82750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82754:	f64a 15ec 	movw	r5, #43500	; 0xa9ec
   82758:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			vTaskSuspendAll();
   8275c:	f242 483d 	movw	r8, #9277	; 0x243d
   82760:	f2c0 0808 	movt	r8, #8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82764:	f64a 16f0 	movw	r6, #43504	; 0xa9f0
   82768:	f2c2 0607 	movt	r6, #8199	; 0x2007
			xTaskResumeAll();
   8276c:	f242 6705 	movw	r7, #9733	; 0x2605
   82770:	e02d      	b.n	827ce <prvIdleTask+0x7e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   82772:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82774:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   82776:	463b      	mov	r3, r7
   82778:	f2c0 0308 	movt	r3, #8
   8277c:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   8277e:	b334      	cbz	r4, 827ce <prvIdleTask+0x7e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   82780:	f241 704d 	movw	r0, #5965	; 0x174d
   82784:	f2c0 0008 	movt	r0, #8
   82788:	4780      	blx	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   8278a:	68f1      	ldr	r1, [r6, #12]
   8278c:	68cc      	ldr	r4, [r1, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8278e:	f104 0004 	add.w	r0, r4, #4
   82792:	f241 62a9 	movw	r2, #5801	; 0x16a9
   82796:	f2c0 0208 	movt	r2, #8
   8279a:	4790      	blx	r2
					--uxCurrentNumberOfTasks;
   8279c:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   827a0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827a4:	6818      	ldr	r0, [r3, #0]
   827a6:	f100 31ff 	add.w	r1, r0, #4294967295
   827aa:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
   827ac:	682a      	ldr	r2, [r5, #0]
   827ae:	f102 33ff 	add.w	r3, r2, #4294967295
   827b2:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   827b4:	f241 7075 	movw	r0, #6005	; 0x1775
   827b8:	f2c0 0008 	movt	r0, #8
   827bc:	4780      	blx	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   827be:	6b20      	ldr	r0, [r4, #48]	; 0x30
   827c0:	f641 19c9 	movw	r9, #6601	; 0x19c9
   827c4:	f2c0 0908 	movt	r9, #8
   827c8:	47c8      	blx	r9
		vPortFree( pxTCB );
   827ca:	4620      	mov	r0, r4
   827cc:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   827ce:	682b      	ldr	r3, [r5, #0]
   827d0:	2b00      	cmp	r3, #0
   827d2:	d1ce      	bne.n	82772 <prvIdleTask+0x22>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   827d4:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   827d8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   827dc:	6801      	ldr	r1, [r0, #0]
   827de:	2901      	cmp	r1, #1
   827e0:	d9f5      	bls.n	827ce <prvIdleTask+0x7e>
			{
				taskYIELD();
   827e2:	f241 7229 	movw	r2, #5929	; 0x1729
   827e6:	f2c0 0208 	movt	r2, #8
   827ea:	4790      	blx	r2
   827ec:	e7ef      	b.n	827ce <prvIdleTask+0x7e>
   827ee:	bf00      	nop

000827f0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   827f0:	b538      	push	{r3, r4, r5, lr}
   827f2:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   827f4:	4605      	mov	r5, r0
   827f6:	b930      	cbnz	r0, 82806 <vTaskDelayUntil+0x16>
   827f8:	f241 7439 	movw	r4, #5945	; 0x1739
   827fc:	f2c0 0408 	movt	r4, #8
   82800:	47a0      	blx	r4
   82802:	bf00      	nop
   82804:	e7fd      	b.n	82802 <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
   82806:	b931      	cbnz	r1, 82816 <vTaskDelayUntil+0x26>
   82808:	f241 7539 	movw	r5, #5945	; 0x1739
   8280c:	f2c0 0508 	movt	r5, #8
   82810:	47a8      	blx	r5
   82812:	bf00      	nop
   82814:	e7fd      	b.n	82812 <vTaskDelayUntil+0x22>

		vTaskSuspendAll();
   82816:	f242 433d 	movw	r3, #9277	; 0x243d
   8281a:	f2c0 0308 	movt	r3, #8
   8281e:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   82820:	6828      	ldr	r0, [r5, #0]
   82822:	1904      	adds	r4, r0, r4

			if( xTickCount < *pxPreviousWakeTime )
   82824:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82828:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8282c:	6811      	ldr	r1, [r2, #0]
   8282e:	4288      	cmp	r0, r1
   82830:	d90a      	bls.n	82848 <vTaskDelayUntil+0x58>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   82832:	42a0      	cmp	r0, r4
   82834:	d932      	bls.n	8289c <vTaskDelayUntil+0xac>
   82836:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   8283a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8283e:	6811      	ldr	r1, [r2, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82840:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   82842:	428c      	cmp	r4, r1
   82844:	d91c      	bls.n	82880 <vTaskDelayUntil+0x90>
   82846:	e009      	b.n	8285c <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   82848:	42a0      	cmp	r0, r4
   8284a:	d825      	bhi.n	82898 <vTaskDelayUntil+0xa8>
   8284c:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   82850:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82854:	6818      	ldr	r0, [r3, #0]
   82856:	4284      	cmp	r4, r0
   82858:	d81e      	bhi.n	82898 <vTaskDelayUntil+0xa8>
   8285a:	e01f      	b.n	8289c <vTaskDelayUntil+0xac>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8285c:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82860:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82864:	6818      	ldr	r0, [r3, #0]
   82866:	f100 0004 	add.w	r0, r0, #4
   8286a:	f241 62a9 	movw	r2, #5801	; 0x16a9
   8286e:	f2c0 0208 	movt	r2, #8
   82872:	4790      	blx	r2
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82874:	4620      	mov	r0, r4
   82876:	f242 0195 	movw	r1, #8341	; 0x2095
   8287a:	f2c0 0108 	movt	r1, #8
   8287e:	4788      	blx	r1
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82880:	f242 6005 	movw	r0, #9733	; 0x2605
   82884:	f2c0 0008 	movt	r0, #8
   82888:	4780      	blx	r0

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   8288a:	b948      	cbnz	r0, 828a0 <vTaskDelayUntil+0xb0>
		{
			portYIELD_WITHIN_API();
   8288c:	f241 7329 	movw	r3, #5929	; 0x1729
   82890:	f2c0 0308 	movt	r3, #8
   82894:	4798      	blx	r3
   82896:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82898:	602c      	str	r4, [r5, #0]
   8289a:	e7df      	b.n	8285c <vTaskDelayUntil+0x6c>
   8289c:	602c      	str	r4, [r5, #0]
   8289e:	e7ef      	b.n	82880 <vTaskDelayUntil+0x90>
   828a0:	bd38      	pop	{r3, r4, r5, pc}
   828a2:	bf00      	nop

000828a4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   828a4:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   828a6:	f64a 2380 	movw	r3, #43648	; 0xaa80
   828aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   828ae:	6818      	ldr	r0, [r3, #0]
   828b0:	b9a8      	cbnz	r0, 828de <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   828b2:	f64a 2118 	movw	r1, #43544	; 0xaa18
   828b6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828ba:	680a      	ldr	r2, [r1, #0]
   828bc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   828c0:	ea4f 0083 	mov.w	r0, r3, lsl #2
   828c4:	f64a 211c 	movw	r1, #43548	; 0xaa1c
   828c8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828cc:	580a      	ldr	r2, [r1, r0]
   828ce:	bb52      	cbnz	r2, 82926 <vTaskSwitchContext+0x82>
   828d0:	f64a 2318 	movw	r3, #43544	; 0xaa18
   828d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   828d8:	6818      	ldr	r0, [r3, #0]
   828da:	b988      	cbnz	r0, 82900 <vTaskSwitchContext+0x5c>
   828dc:	e009      	b.n	828f2 <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   828de:	f64a 21c0 	movw	r1, #43712	; 0xaac0
   828e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828e6:	f04f 0001 	mov.w	r0, #1
   828ea:	6008      	str	r0, [r1, #0]
   828ec:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   828ee:	681a      	ldr	r2, [r3, #0]
   828f0:	b972      	cbnz	r2, 82910 <vTaskSwitchContext+0x6c>
   828f2:	f241 7339 	movw	r3, #5945	; 0x1739
   828f6:	f2c0 0308 	movt	r3, #8
   828fa:	4798      	blx	r3
   828fc:	bf00      	nop
   828fe:	e7fd      	b.n	828fc <vTaskSwitchContext+0x58>
   82900:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82904:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82908:	f64a 211c 	movw	r1, #43548	; 0xaa1c
   8290c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82910:	681a      	ldr	r2, [r3, #0]
   82912:	f102 30ff 	add.w	r0, r2, #4294967295
   82916:	6018      	str	r0, [r3, #0]
   82918:	681a      	ldr	r2, [r3, #0]
   8291a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   8291e:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   82922:	2a00      	cmp	r2, #0
   82924:	d0e3      	beq.n	828ee <vTaskSwitchContext+0x4a>
   82926:	f64a 2318 	movw	r3, #43544	; 0xaa18
   8292a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8292e:	6819      	ldr	r1, [r3, #0]
   82930:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82934:	f64a 221c 	movw	r2, #43548	; 0xaa1c
   82938:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8293c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   82940:	6859      	ldr	r1, [r3, #4]
   82942:	6848      	ldr	r0, [r1, #4]
   82944:	6058      	str	r0, [r3, #4]
   82946:	f103 0208 	add.w	r2, r3, #8
   8294a:	4290      	cmp	r0, r2
   8294c:	bf04      	itt	eq
   8294e:	6840      	ldreq	r0, [r0, #4]
   82950:	6058      	streq	r0, [r3, #4]
   82952:	685b      	ldr	r3, [r3, #4]
   82954:	68d9      	ldr	r1, [r3, #12]
   82956:	f64a 2084 	movw	r0, #43652	; 0xaa84
   8295a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8295e:	6001      	str	r1, [r0, #0]
   82960:	bd08      	pop	{r3, pc}
   82962:	bf00      	nop

00082964 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   82964:	b538      	push	{r3, r4, r5, lr}
   82966:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   82968:	b930      	cbnz	r0, 82978 <vTaskPlaceOnEventList+0x14>
   8296a:	f241 7439 	movw	r4, #5945	; 0x1739
   8296e:	f2c0 0408 	movt	r4, #8
   82972:	47a0      	blx	r4
   82974:	bf00      	nop
   82976:	e7fd      	b.n	82974 <vTaskPlaceOnEventList+0x10>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82978:	f64a 2584 	movw	r5, #43652	; 0xaa84
   8297c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82980:	6829      	ldr	r1, [r5, #0]
   82982:	f101 0118 	add.w	r1, r1, #24
   82986:	f241 626d 	movw	r2, #5741	; 0x166d
   8298a:	f2c0 0208 	movt	r2, #8
   8298e:	4790      	blx	r2

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82990:	6828      	ldr	r0, [r5, #0]
   82992:	f100 0004 	add.w	r0, r0, #4
   82996:	f241 61a9 	movw	r1, #5801	; 0x16a9
   8299a:	f2c0 0108 	movt	r1, #8
   8299e:	4788      	blx	r1
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   829a0:	f1b4 3fff 	cmp.w	r4, #4294967295
   829a4:	d10c      	bne.n	829c0 <vTaskPlaceOnEventList+0x5c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   829a6:	6829      	ldr	r1, [r5, #0]
   829a8:	f64a 10d0 	movw	r0, #43472	; 0xa9d0
   829ac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   829b0:	f101 0104 	add.w	r1, r1, #4
   829b4:	f241 634d 	movw	r3, #5709	; 0x164d
   829b8:	f2c0 0308 	movt	r3, #8
   829bc:	4798      	blx	r3
   829be:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   829c0:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   829c4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   829c8:	6803      	ldr	r3, [r0, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   829ca:	18e0      	adds	r0, r4, r3
   829cc:	f242 0295 	movw	r2, #8341	; 0x2095
   829d0:	f2c0 0208 	movt	r2, #8
   829d4:	4790      	blx	r2
   829d6:	bd38      	pop	{r3, r4, r5, pc}

000829d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   829d8:	b538      	push	{r3, r4, r5, lr}
   829da:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   829dc:	b930      	cbnz	r0, 829ec <vTaskPlaceOnEventListRestricted+0x14>
   829de:	f241 7439 	movw	r4, #5945	; 0x1739
   829e2:	f2c0 0408 	movt	r4, #8
   829e6:	47a0      	blx	r4
   829e8:	bf00      	nop
   829ea:	e7fd      	b.n	829e8 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   829ec:	f64a 2484 	movw	r4, #43652	; 0xaa84
   829f0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   829f4:	6821      	ldr	r1, [r4, #0]
   829f6:	f101 0118 	add.w	r1, r1, #24
   829fa:	f241 624d 	movw	r2, #5709	; 0x164d
   829fe:	f2c0 0208 	movt	r2, #8
   82a02:	4790      	blx	r2

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82a04:	6820      	ldr	r0, [r4, #0]
   82a06:	f100 0004 	add.w	r0, r0, #4
   82a0a:	f241 61a9 	movw	r1, #5801	; 0x16a9
   82a0e:	f2c0 0108 	movt	r1, #8
   82a12:	4788      	blx	r1
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   82a14:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   82a18:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82a1c:	6803      	ldr	r3, [r0, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82a1e:	18e8      	adds	r0, r5, r3
   82a20:	f242 0295 	movw	r2, #8341	; 0x2095
   82a24:	f2c0 0208 	movt	r2, #8
   82a28:	4790      	blx	r2
   82a2a:	bd38      	pop	{r3, r4, r5, pc}

00082a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82a2c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   82a2e:	68c3      	ldr	r3, [r0, #12]
   82a30:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   82a32:	b934      	cbnz	r4, 82a42 <xTaskRemoveFromEventList+0x16>
   82a34:	f241 7439 	movw	r4, #5945	; 0x1739
   82a38:	f2c0 0408 	movt	r4, #8
   82a3c:	47a0      	blx	r4
   82a3e:	bf00      	nop
   82a40:	e7fd      	b.n	82a3e <xTaskRemoveFromEventList+0x12>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82a42:	f104 0518 	add.w	r5, r4, #24
   82a46:	4628      	mov	r0, r5
   82a48:	f241 61a9 	movw	r1, #5801	; 0x16a9
   82a4c:	f2c0 0108 	movt	r1, #8
   82a50:	4788      	blx	r1

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82a52:	f64a 2080 	movw	r0, #43648	; 0xaa80
   82a56:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82a5a:	6802      	ldr	r2, [r0, #0]
   82a5c:	bb22      	cbnz	r2, 82aa8 <xTaskRemoveFromEventList+0x7c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   82a5e:	f104 0504 	add.w	r5, r4, #4
   82a62:	4628      	mov	r0, r5
   82a64:	f241 61a9 	movw	r1, #5801	; 0x16a9
   82a68:	f2c0 0108 	movt	r1, #8
   82a6c:	4788      	blx	r1
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   82a6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82a70:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82a74:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a78:	6813      	ldr	r3, [r2, #0]
   82a7a:	4298      	cmp	r0, r3
   82a7c:	d904      	bls.n	82a88 <xTaskRemoveFromEventList+0x5c>
   82a7e:	f64a 2118 	movw	r1, #43544	; 0xaa18
   82a82:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82a86:	6008      	str	r0, [r1, #0]
   82a88:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82a8c:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82a90:	4602      	mov	r2, r0
   82a92:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a96:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   82a9a:	4629      	mov	r1, r5
   82a9c:	f241 634d 	movw	r3, #5709	; 0x164d
   82aa0:	f2c0 0308 	movt	r3, #8
   82aa4:	4798      	blx	r3
   82aa6:	e009      	b.n	82abc <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   82aa8:	f64a 2088 	movw	r0, #43656	; 0xaa88
   82aac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ab0:	4629      	mov	r1, r5
   82ab2:	f241 634d 	movw	r3, #5709	; 0x164d
   82ab6:	f2c0 0308 	movt	r3, #8
   82aba:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82abc:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82ac0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82ac4:	680a      	ldr	r2, [r1, #0]
   82ac6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82ac8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   82aca:	4298      	cmp	r0, r3
   82acc:	bf34      	ite	cc
   82ace:	2000      	movcc	r0, #0
   82ad0:	2001      	movcs	r0, #1
   82ad2:	bd38      	pop	{r3, r4, r5, pc}

00082ad4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   82ad4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   82ad6:	4603      	mov	r3, r0
   82ad8:	b930      	cbnz	r0, 82ae8 <vTaskSetTimeOutState+0x14>
   82ada:	f241 7339 	movw	r3, #5945	; 0x1739
   82ade:	f2c0 0308 	movt	r3, #8
   82ae2:	4798      	blx	r3
   82ae4:	bf00      	nop
   82ae6:	e7fd      	b.n	82ae4 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   82ae8:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   82aec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82af0:	6810      	ldr	r0, [r2, #0]
   82af2:	6018      	str	r0, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   82af4:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   82af8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82afc:	680a      	ldr	r2, [r1, #0]
   82afe:	605a      	str	r2, [r3, #4]
   82b00:	bd08      	pop	{r3, pc}
   82b02:	bf00      	nop

00082b04 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82b04:	b538      	push	{r3, r4, r5, lr}
   82b06:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82b08:	4604      	mov	r4, r0
   82b0a:	b930      	cbnz	r0, 82b1a <xTaskCheckForTimeOut+0x16>
   82b0c:	f241 7239 	movw	r2, #5945	; 0x1739
   82b10:	f2c0 0208 	movt	r2, #8
   82b14:	4790      	blx	r2
   82b16:	bf00      	nop
   82b18:	e7fd      	b.n	82b16 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   82b1a:	b931      	cbnz	r1, 82b2a <xTaskCheckForTimeOut+0x26>
   82b1c:	f241 7539 	movw	r5, #5945	; 0x1739
   82b20:	f2c0 0508 	movt	r5, #8
   82b24:	47a8      	blx	r5
   82b26:	bf00      	nop
   82b28:	e7fd      	b.n	82b26 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
   82b2a:	f241 734d 	movw	r3, #5965	; 0x174d
   82b2e:	f2c0 0308 	movt	r3, #8
   82b32:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   82b34:	6828      	ldr	r0, [r5, #0]
   82b36:	f1b0 3fff 	cmp.w	r0, #4294967295
   82b3a:	d029      	beq.n	82b90 <xTaskCheckForTimeOut+0x8c>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   82b3c:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   82b40:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b44:	6811      	ldr	r1, [r2, #0]
   82b46:	6823      	ldr	r3, [r4, #0]
   82b48:	428b      	cmp	r3, r1
   82b4a:	d007      	beq.n	82b5c <xTaskCheckForTimeOut+0x58>
   82b4c:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82b50:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b54:	6811      	ldr	r1, [r2, #0]
   82b56:	6863      	ldr	r3, [r4, #4]
   82b58:	428b      	cmp	r3, r1
   82b5a:	d91c      	bls.n	82b96 <xTaskCheckForTimeOut+0x92>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   82b5c:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82b60:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b64:	6811      	ldr	r1, [r2, #0]
   82b66:	6863      	ldr	r3, [r4, #4]
   82b68:	1aca      	subs	r2, r1, r3
   82b6a:	4290      	cmp	r0, r2
   82b6c:	d916      	bls.n	82b9c <xTaskCheckForTimeOut+0x98>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   82b6e:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   82b72:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b76:	680a      	ldr	r2, [r1, #0]
   82b78:	1a9b      	subs	r3, r3, r2
   82b7a:	1818      	adds	r0, r3, r0
   82b7c:	6028      	str	r0, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82b7e:	4620      	mov	r0, r4
   82b80:	f642 24d5 	movw	r4, #10965	; 0x2ad5
   82b84:	f2c0 0408 	movt	r4, #8
   82b88:	47a0      	blx	r4
			xReturn = pdFALSE;
   82b8a:	f04f 0400 	mov.w	r4, #0
   82b8e:	e007      	b.n	82ba0 <xTaskCheckForTimeOut+0x9c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82b90:	f04f 0400 	mov.w	r4, #0
   82b94:	e004      	b.n	82ba0 <xTaskCheckForTimeOut+0x9c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82b96:	f04f 0401 	mov.w	r4, #1
   82b9a:	e001      	b.n	82ba0 <xTaskCheckForTimeOut+0x9c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   82b9c:	f04f 0401 	mov.w	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   82ba0:	f241 7175 	movw	r1, #6005	; 0x1775
   82ba4:	f2c0 0108 	movt	r1, #8
   82ba8:	4788      	blx	r1

	return xReturn;
}
   82baa:	4620      	mov	r0, r4
   82bac:	bd38      	pop	{r3, r4, r5, pc}
   82bae:	bf00      	nop

00082bb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   82bb0:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   82bb4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82bb8:	f04f 0201 	mov.w	r2, #1
   82bbc:	601a      	str	r2, [r3, #0]
   82bbe:	4770      	bx	lr

00082bc0 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82bc0:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82bc4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82bc8:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   82bca:	4770      	bx	lr

00082bcc <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   82bcc:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
   82bd0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82bd4:	6818      	ldr	r0, [r3, #0]
   82bd6:	b148      	cbz	r0, 82bec <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82bd8:	f64a 2180 	movw	r1, #43648	; 0xaa80
   82bdc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82be0:	680a      	ldr	r2, [r1, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   82be2:	2a00      	cmp	r2, #0
   82be4:	bf14      	ite	ne
   82be6:	2002      	movne	r0, #2
   82be8:	2001      	moveq	r0, #1
   82bea:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82bec:	f04f 0000 	mov.w	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   82bf0:	4770      	bx	lr
   82bf2:	bf00      	nop

00082bf4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   82bf4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   82bf6:	4604      	mov	r4, r0
   82bf8:	2800      	cmp	r0, #0
   82bfa:	d04e      	beq.n	82c9a <vTaskPriorityInherit+0xa6>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   82bfc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82bfe:	f64a 2284 	movw	r2, #43652	; 0xaa84
   82c02:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82c06:	6810      	ldr	r0, [r2, #0]
   82c08:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82c0a:	428b      	cmp	r3, r1
   82c0c:	d245      	bcs.n	82c9a <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   82c0e:	f64a 2284 	movw	r2, #43652	; 0xaa84
   82c12:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82c16:	6810      	ldr	r0, [r2, #0]
   82c18:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82c1a:	f1c1 0205 	rsb	r2, r1, #5
   82c1e:	61a2      	str	r2, [r4, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82c20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82c24:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82c28:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c2c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   82c30:	6962      	ldr	r2, [r4, #20]
   82c32:	428a      	cmp	r2, r1
   82c34:	d12a      	bne.n	82c8c <vTaskPriorityInherit+0x98>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82c36:	f104 0504 	add.w	r5, r4, #4
   82c3a:	4628      	mov	r0, r5
   82c3c:	f241 62a9 	movw	r2, #5801	; 0x16a9
   82c40:	f2c0 0208 	movt	r2, #8
   82c44:	4790      	blx	r2
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82c46:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82c4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82c4e:	6818      	ldr	r0, [r3, #0]
   82c50:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82c52:	62e1      	str	r1, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82c54:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82c58:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82c5c:	6813      	ldr	r3, [r2, #0]
   82c5e:	4299      	cmp	r1, r3
   82c60:	d904      	bls.n	82c6c <vTaskPriorityInherit+0x78>
   82c62:	f64a 2018 	movw	r0, #43544	; 0xaa18
   82c66:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c6a:	6001      	str	r1, [r0, #0]
   82c6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82c70:	f64a 221c 	movw	r2, #43548	; 0xaa1c
   82c74:	4613      	mov	r3, r2
   82c76:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82c7a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   82c7e:	4629      	mov	r1, r5
   82c80:	f241 624d 	movw	r2, #5709	; 0x164d
   82c84:	f2c0 0208 	movt	r2, #8
   82c88:	4790      	blx	r2
   82c8a:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82c8c:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82c90:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82c94:	6818      	ldr	r0, [r3, #0]
   82c96:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82c98:	62e1      	str	r1, [r4, #44]	; 0x2c
   82c9a:	bd38      	pop	{r3, r4, r5, pc}

00082c9c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82c9c:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82c9e:	4604      	mov	r4, r0
   82ca0:	b350      	cbz	r0, 82cf8 <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82ca2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82ca4:	6c83      	ldr	r3, [r0, #72]	; 0x48
   82ca6:	429a      	cmp	r2, r3
   82ca8:	d026      	beq.n	82cf8 <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82caa:	f100 0504 	add.w	r5, r0, #4
   82cae:	4628      	mov	r0, r5
   82cb0:	f241 61a9 	movw	r1, #5801	; 0x16a9
   82cb4:	f2c0 0108 	movt	r1, #8
   82cb8:	4788      	blx	r1
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   82cba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82cbc:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82cbe:	f1c0 0205 	rsb	r2, r0, #5
   82cc2:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82cc4:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82cc8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ccc:	6819      	ldr	r1, [r3, #0]
   82cce:	4288      	cmp	r0, r1
   82cd0:	d904      	bls.n	82cdc <vTaskPriorityDisinherit+0x40>
   82cd2:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82cd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82cda:	6010      	str	r0, [r2, #0]
   82cdc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82ce0:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82ce4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ce8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82cec:	4629      	mov	r1, r5
   82cee:	f241 624d 	movw	r2, #5709	; 0x164d
   82cf2:	f2c0 0208 	movt	r2, #8
   82cf6:	4790      	blx	r2
   82cf8:	bd38      	pop	{r3, r4, r5, pc}
   82cfa:	bf00      	nop

00082cfc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82cfc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82cfe:	f241 734d 	movw	r3, #5965	; 0x174d
   82d02:	f2c0 0308 	movt	r3, #8
   82d06:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   82d08:	f64a 20fc 	movw	r0, #43772	; 0xaafc
   82d0c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82d10:	6801      	ldr	r1, [r0, #0]
   82d12:	bb49      	cbnz	r1, 82d68 <prvCheckForValidListAndQueue+0x6c>
		{
			vListInitialise( &xActiveTimerList1 );
   82d14:	f64a 25d0 	movw	r5, #43728	; 0xaad0
   82d18:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82d1c:	4628      	mov	r0, r5
   82d1e:	f241 662d 	movw	r6, #5677	; 0x162d
   82d22:	f2c0 0608 	movt	r6, #8
   82d26:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82d28:	f64a 24e4 	movw	r4, #43748	; 0xaae4
   82d2c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82d30:	4620      	mov	r0, r4
   82d32:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   82d34:	f64a 22cc 	movw	r2, #43724	; 0xaacc
   82d38:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82d3c:	6015      	str	r5, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82d3e:	f64a 3300 	movw	r3, #43776	; 0xab00
   82d42:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82d46:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82d48:	f04f 0005 	mov.w	r0, #5
   82d4c:	f04f 010c 	mov.w	r1, #12
   82d50:	f04f 0200 	mov.w	r2, #0
   82d54:	f641 33e9 	movw	r3, #7145	; 0x1be9
   82d58:	f2c0 0308 	movt	r3, #8
   82d5c:	4798      	blx	r3
   82d5e:	f64a 21fc 	movw	r1, #43772	; 0xaafc
   82d62:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82d66:	6008      	str	r0, [r1, #0]
		}
	}
	taskEXIT_CRITICAL();
   82d68:	f241 7075 	movw	r0, #6005	; 0x1775
   82d6c:	f2c0 0008 	movt	r0, #8
   82d70:	4780      	blx	r0
   82d72:	bd70      	pop	{r4, r5, r6, pc}

00082d74 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82d74:	b510      	push	{r4, lr}
   82d76:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   82d78:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82d7a:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   82d7c:	4291      	cmp	r1, r2
   82d7e:	d812      	bhi.n	82da6 <prvInsertTimerInActiveList+0x32>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   82d80:	1ad0      	subs	r0, r2, r3
   82d82:	69a1      	ldr	r1, [r4, #24]
   82d84:	4288      	cmp	r0, r1
   82d86:	d221      	bcs.n	82dcc <prvInsertTimerInActiveList+0x58>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   82d88:	f64a 3300 	movw	r3, #43776	; 0xab00
   82d8c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82d90:	6818      	ldr	r0, [r3, #0]
   82d92:	f104 0104 	add.w	r1, r4, #4
   82d96:	f241 626d 	movw	r2, #5741	; 0x166d
   82d9a:	f2c0 0208 	movt	r2, #8
   82d9e:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82da0:	f04f 0000 	mov.w	r0, #0
   82da4:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   82da6:	429a      	cmp	r2, r3
   82da8:	d201      	bcs.n	82dae <prvInsertTimerInActiveList+0x3a>
   82daa:	4299      	cmp	r1, r3
   82dac:	d211      	bcs.n	82dd2 <prvInsertTimerInActiveList+0x5e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82dae:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   82db2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82db6:	6818      	ldr	r0, [r3, #0]
   82db8:	f104 0104 	add.w	r1, r4, #4
   82dbc:	f241 626d 	movw	r2, #5741	; 0x166d
   82dc0:	f2c0 0208 	movt	r2, #8
   82dc4:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82dc6:	f04f 0000 	mov.w	r0, #0
   82dca:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   82dcc:	f04f 0001 	mov.w	r0, #1
   82dd0:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   82dd2:	f04f 0001 	mov.w	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   82dd6:	bd10      	pop	{r4, pc}

00082dd8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82dd8:	b510      	push	{r4, lr}
   82dda:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82ddc:	f642 43fd 	movw	r3, #11517	; 0x2cfd
   82de0:	f2c0 0308 	movt	r3, #8
   82de4:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82de6:	f64a 20fc 	movw	r0, #43772	; 0xaafc
   82dea:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82dee:	6801      	ldr	r1, [r0, #0]
   82df0:	b1b9      	cbz	r1, 82e22 <xTimerCreateTimerTask+0x4a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   82df2:	f04f 0204 	mov.w	r2, #4
   82df6:	9200      	str	r2, [sp, #0]
   82df8:	f04f 0300 	mov.w	r3, #0
   82dfc:	9301      	str	r3, [sp, #4]
   82dfe:	9302      	str	r3, [sp, #8]
   82e00:	9303      	str	r3, [sp, #12]
   82e02:	f642 7079 	movw	r0, #12153	; 0x2f79
   82e06:	f2c0 0008 	movt	r0, #8
   82e0a:	f247 613c 	movw	r1, #30268	; 0x763c
   82e0e:	f2c0 0108 	movt	r1, #8
   82e12:	f44f 7282 	mov.w	r2, #260	; 0x104
   82e16:	f242 1415 	movw	r4, #8469	; 0x2115
   82e1a:	f2c0 0408 	movt	r4, #8
   82e1e:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82e20:	b930      	cbnz	r0, 82e30 <xTimerCreateTimerTask+0x58>
   82e22:	f241 7439 	movw	r4, #5945	; 0x1739
   82e26:	f2c0 0408 	movt	r4, #8
   82e2a:	47a0      	blx	r4
   82e2c:	bf00      	nop
   82e2e:	e7fd      	b.n	82e2c <xTimerCreateTimerTask+0x54>
	return xReturn;
}
   82e30:	b004      	add	sp, #16
   82e32:	bd10      	pop	{r4, pc}

00082e34 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   82e34:	b510      	push	{r4, lr}
   82e36:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   82e38:	f64a 24fc 	movw	r4, #43772	; 0xaafc
   82e3c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82e40:	6824      	ldr	r4, [r4, #0]
   82e42:	b32c      	cbz	r4, 82e90 <xTimerGenericCommand+0x5c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   82e44:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82e46:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   82e48:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   82e4a:	b9b3      	cbnz	r3, 82e7a <xTimerGenericCommand+0x46>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   82e4c:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   82e50:	f2c0 0308 	movt	r3, #8
   82e54:	4798      	blx	r3
   82e56:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   82e58:	f64a 23fc 	movw	r3, #43772	; 0xaafc
   82e5c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82e60:	6818      	ldr	r0, [r3, #0]
   82e62:	a901      	add	r1, sp, #4
   82e64:	bf07      	ittee	eq
   82e66:	9a06      	ldreq	r2, [sp, #24]
   82e68:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   82e6a:	2200      	movne	r2, #0
   82e6c:	4613      	movne	r3, r2
   82e6e:	f641 4455 	movw	r4, #7253	; 0x1c55
   82e72:	f2c0 0408 	movt	r4, #8
   82e76:	47a0      	blx	r4
   82e78:	e00c      	b.n	82e94 <xTimerGenericCommand+0x60>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   82e7a:	4620      	mov	r0, r4
   82e7c:	a901      	add	r1, sp, #4
   82e7e:	461a      	mov	r2, r3
   82e80:	f04f 0300 	mov.w	r3, #0
   82e84:	f641 54c9 	movw	r4, #7625	; 0x1dc9
   82e88:	f2c0 0408 	movt	r4, #8
   82e8c:	47a0      	blx	r4
   82e8e:	e001      	b.n	82e94 <xTimerGenericCommand+0x60>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   82e90:	f04f 0000 	mov.w	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   82e94:	b004      	add	sp, #16
   82e96:	bd10      	pop	{r4, pc}

00082e98 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   82e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e9c:	b085      	sub	sp, #20
   82e9e:	4682      	mov	sl, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   82ea0:	f242 4351 	movw	r3, #9297	; 0x2451
   82ea4:	f2c0 0308 	movt	r3, #8
   82ea8:	4798      	blx	r3
   82eaa:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
   82eac:	f64a 20f8 	movw	r0, #43768	; 0xaaf8
   82eb0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82eb4:	6801      	ldr	r1, [r0, #0]
   82eb6:	4589      	cmp	r9, r1
   82eb8:	d24f      	bcs.n	82f5a <prvSampleTimeNow+0xc2>
   82eba:	e02b      	b.n	82f14 <prvSampleTimeNow+0x7c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82ebc:	68dc      	ldr	r4, [r3, #12]
   82ebe:	6826      	ldr	r6, [r4, #0]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82ec0:	68dd      	ldr	r5, [r3, #12]
   82ec2:	68ec      	ldr	r4, [r5, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82ec4:	f104 0504 	add.w	r5, r4, #4
   82ec8:	4628      	mov	r0, r5
   82eca:	47c0      	blx	r8

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82ece:	4620      	mov	r0, r4
   82ed0:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82ed2:	69e0      	ldr	r0, [r4, #28]
   82ed4:	2801      	cmp	r0, #1
   82ed6:	d12c      	bne.n	82f32 <prvSampleTimeNow+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82ed8:	69a3      	ldr	r3, [r4, #24]
   82eda:	18f2      	adds	r2, r6, r3
			if( xReloadTime > xNextExpireTime )
   82edc:	42b2      	cmp	r2, r6
   82ede:	d909      	bls.n	82ef4 <prvSampleTimeNow+0x5c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82ee0:	6062      	str	r2, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82ee2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82ee4:	6838      	ldr	r0, [r7, #0]
   82ee6:	4629      	mov	r1, r5
   82ee8:	f241 636d 	movw	r3, #5741	; 0x166d
   82eec:	f2c0 0308 	movt	r3, #8
   82ef0:	4798      	blx	r3
   82ef2:	e01e      	b.n	82f32 <prvSampleTimeNow+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82ef4:	f8cd b000 	str.w	fp, [sp]
   82ef8:	4620      	mov	r0, r4
   82efa:	4659      	mov	r1, fp
   82efc:	4632      	mov	r2, r6
   82efe:	465b      	mov	r3, fp
   82f00:	9c03      	ldr	r4, [sp, #12]
   82f02:	47a0      	blx	r4
				configASSERT( xResult );
   82f04:	b9a8      	cbnz	r0, 82f32 <prvSampleTimeNow+0x9a>
   82f06:	f241 7639 	movw	r6, #5945	; 0x1739
   82f0a:	f2c0 0608 	movt	r6, #8
   82f0e:	47b0      	blx	r6
   82f10:	bf00      	nop
   82f12:	e7fd      	b.n	82f10 <prvSampleTimeNow+0x78>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82f14:	f64a 27cc 	movw	r7, #43724	; 0xaacc
   82f18:	f2c2 0707 	movt	r7, #8199	; 0x2007
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82f1c:	f241 68a9 	movw	r8, #5801	; 0x16a9
   82f20:	f2c0 0808 	movt	r8, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82f24:	f04f 0b00 	mov.w	fp, #0
   82f28:	f642 6335 	movw	r3, #11829	; 0x2e35
   82f2c:	f2c0 0308 	movt	r3, #8
   82f30:	9303      	str	r3, [sp, #12]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82f32:	683b      	ldr	r3, [r7, #0]
   82f34:	6818      	ldr	r0, [r3, #0]
   82f36:	2800      	cmp	r0, #0
   82f38:	d1c0      	bne.n	82ebc <prvSampleTimeNow+0x24>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82f3a:	f64a 3200 	movw	r2, #43776	; 0xab00
   82f3e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82f42:	6811      	ldr	r1, [r2, #0]
   82f44:	f64a 20cc 	movw	r0, #43724	; 0xaacc
   82f48:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82f4c:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82f4e:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82f50:	f04f 0301 	mov.w	r3, #1
   82f54:	f8ca 3000 	str.w	r3, [sl]
   82f58:	e003      	b.n	82f62 <prvSampleTimeNow+0xca>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82f5a:	f04f 0200 	mov.w	r2, #0
   82f5e:	f8ca 2000 	str.w	r2, [sl]
	}

	xLastTime = xTimeNow;
   82f62:	f64a 22f8 	movw	r2, #43768	; 0xaaf8
   82f66:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82f6a:	f8c2 9000 	str.w	r9, [r2]

	return xTimeNow;
}
   82f6e:	4648      	mov	r0, r9
   82f70:	b005      	add	sp, #20
   82f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f76:	bf00      	nop

00082f78 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f7c:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82f7e:	f64a 2bcc 	movw	fp, #43724	; 0xaacc
   82f82:	f2c2 0b07 	movt	fp, #8199	; 0x2007
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82f86:	f242 433d 	movw	r3, #9277	; 0x243d
   82f8a:	f2c0 0308 	movt	r3, #8
   82f8e:	9303      	str	r3, [sp, #12]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82f90:	f642 6a99 	movw	sl, #11929	; 0x2e99
   82f94:	f2c0 0a08 	movt	sl, #8
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82f98:	f8db 0000 	ldr.w	r0, [fp]
   82f9c:	6802      	ldr	r2, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
   82f9e:	2a00      	cmp	r2, #0
   82fa0:	f000 80c4 	beq.w	8312c <prvTimerTask+0x1b4>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82fa4:	68c7      	ldr	r7, [r0, #12]
   82fa6:	683d      	ldr	r5, [r7, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82fa8:	9b03      	ldr	r3, [sp, #12]
   82faa:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82fac:	a804      	add	r0, sp, #16
   82fae:	47d0      	blx	sl
   82fb0:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82fb2:	9804      	ldr	r0, [sp, #16]
   82fb4:	2800      	cmp	r0, #0
   82fb6:	d150      	bne.n	8305a <prvTimerTask+0xe2>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82fb8:	42b5      	cmp	r5, r6
   82fba:	d837      	bhi.n	8302c <prvTimerTask+0xb4>
			{
				xTaskResumeAll();
   82fbc:	f242 6705 	movw	r7, #9733	; 0x2605
   82fc0:	f2c0 0708 	movt	r7, #8
   82fc4:	47b8      	blx	r7
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82fc6:	f8db 3000 	ldr.w	r3, [fp]
   82fca:	68d8      	ldr	r0, [r3, #12]
   82fcc:	68c4      	ldr	r4, [r0, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82fce:	f104 0004 	add.w	r0, r4, #4
   82fd2:	f241 62a9 	movw	r2, #5801	; 0x16a9
   82fd6:	f2c0 0208 	movt	r2, #8
   82fda:	4790      	blx	r2
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82fdc:	69e1      	ldr	r1, [r4, #28]
   82fde:	2901      	cmp	r1, #1
   82fe0:	d11e      	bne.n	83020 <prvTimerTask+0xa8>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82fe2:	69a7      	ldr	r7, [r4, #24]
   82fe4:	4620      	mov	r0, r4
   82fe6:	19e9      	adds	r1, r5, r7
   82fe8:	4632      	mov	r2, r6
   82fea:	462b      	mov	r3, r5
   82fec:	f642 5675 	movw	r6, #11637	; 0x2d75
   82ff0:	f2c0 0608 	movt	r6, #8
   82ff4:	47b0      	blx	r6
   82ff6:	2801      	cmp	r0, #1
   82ff8:	d112      	bne.n	83020 <prvTimerTask+0xa8>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82ffa:	f04f 0300 	mov.w	r3, #0
   82ffe:	9300      	str	r3, [sp, #0]
   83000:	4620      	mov	r0, r4
   83002:	4619      	mov	r1, r3
   83004:	462a      	mov	r2, r5
   83006:	f642 6535 	movw	r5, #11829	; 0x2e35
   8300a:	f2c0 0508 	movt	r5, #8
   8300e:	47a8      	blx	r5
			configASSERT( xResult );
   83010:	b930      	cbnz	r0, 83020 <prvTimerTask+0xa8>
   83012:	f241 7739 	movw	r7, #5945	; 0x1739
   83016:	f2c0 0708 	movt	r7, #8
   8301a:	47b8      	blx	r7
   8301c:	bf00      	nop
   8301e:	e7fd      	b.n	8301c <prvTimerTask+0xa4>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83020:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83022:	4620      	mov	r0, r4
   83024:	4798      	blx	r3
   83026:	e01d      	b.n	83064 <prvTimerTask+0xec>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   83028:	f04f 0500 	mov.w	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8302c:	f64a 21fc 	movw	r1, #43772	; 0xaafc
   83030:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83034:	6808      	ldr	r0, [r1, #0]
   83036:	1ba9      	subs	r1, r5, r6
   83038:	f242 0641 	movw	r6, #8257	; 0x2041
   8303c:	f2c0 0608 	movt	r6, #8
   83040:	47b0      	blx	r6

				if( xTaskResumeAll() == pdFALSE )
   83042:	f242 6405 	movw	r4, #9733	; 0x2605
   83046:	f2c0 0408 	movt	r4, #8
   8304a:	47a0      	blx	r4
   8304c:	b950      	cbnz	r0, 83064 <prvTimerTask+0xec>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   8304e:	f241 7529 	movw	r5, #5929	; 0x1729
   83052:	f2c0 0508 	movt	r5, #8
   83056:	47a8      	blx	r5
   83058:	e004      	b.n	83064 <prvTimerTask+0xec>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   8305a:	f242 6205 	movw	r2, #9733	; 0x2605
   8305e:	f2c0 0208 	movt	r2, #8
   83062:	4790      	blx	r2
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83064:	a804      	add	r0, sp, #16
   83066:	47d0      	blx	sl
   83068:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8306a:	f64a 26fc 	movw	r6, #43772	; 0xaafc
   8306e:	f2c2 0607 	movt	r6, #8199	; 0x2007
   83072:	f641 6579 	movw	r5, #7801	; 0x1e79
   83076:	f2c0 0508 	movt	r5, #8
		if( pxTimer != NULL )
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   8307a:	f241 68a9 	movw	r8, #5801	; 0x16a9
   8307e:	f2c0 0808 	movt	r8, #8
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83082:	f642 5975 	movw	r9, #11637	; 0x2d75
   83086:	f2c0 0908 	movt	r9, #8
   8308a:	e046      	b.n	8311a <prvTimerTask+0x1a2>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   8308c:	9c07      	ldr	r4, [sp, #28]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   8308e:	b124      	cbz	r4, 8309a <prvTimerTask+0x122>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   83090:	6960      	ldr	r0, [r4, #20]
   83092:	b110      	cbz	r0, 8309a <prvTimerTask+0x122>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   83094:	f104 0004 	add.w	r0, r4, #4
   83098:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   8309a:	9a05      	ldr	r2, [sp, #20]
   8309c:	2a02      	cmp	r2, #2
   8309e:	d026      	beq.n	830ee <prvTimerTask+0x176>
   830a0:	2a03      	cmp	r2, #3
   830a2:	d034      	beq.n	8310e <prvTimerTask+0x196>
   830a4:	2a00      	cmp	r2, #0
   830a6:	d138      	bne.n	8311a <prvTimerTask+0x1a2>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   830a8:	9b06      	ldr	r3, [sp, #24]
   830aa:	69a1      	ldr	r1, [r4, #24]
   830ac:	4620      	mov	r0, r4
   830ae:	1859      	adds	r1, r3, r1
   830b0:	463a      	mov	r2, r7
   830b2:	47c8      	blx	r9
   830b4:	2801      	cmp	r0, #1
   830b6:	d130      	bne.n	8311a <prvTimerTask+0x1a2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   830b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   830ba:	4620      	mov	r0, r4
   830bc:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   830be:	69e0      	ldr	r0, [r4, #28]
   830c0:	2801      	cmp	r0, #1
   830c2:	d12a      	bne.n	8311a <prvTimerTask+0x1a2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   830c4:	69a2      	ldr	r2, [r4, #24]
   830c6:	f04f 0300 	mov.w	r3, #0
   830ca:	9300      	str	r3, [sp, #0]
   830cc:	4620      	mov	r0, r4
   830ce:	4619      	mov	r1, r3
   830d0:	9c06      	ldr	r4, [sp, #24]
   830d2:	1912      	adds	r2, r2, r4
   830d4:	f642 6435 	movw	r4, #11829	; 0x2e35
   830d8:	f2c0 0408 	movt	r4, #8
   830dc:	47a0      	blx	r4
						configASSERT( xResult );
   830de:	b9e0      	cbnz	r0, 8311a <prvTimerTask+0x1a2>
   830e0:	f241 7539 	movw	r5, #5945	; 0x1739
   830e4:	f2c0 0508 	movt	r5, #8
   830e8:	47a8      	blx	r5
   830ea:	bf00      	nop
   830ec:	e7fd      	b.n	830ea <prvTimerTask+0x172>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   830ee:	9b06      	ldr	r3, [sp, #24]
   830f0:	61a3      	str	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   830f2:	b933      	cbnz	r3, 83102 <prvTimerTask+0x18a>
   830f4:	f241 7639 	movw	r6, #5945	; 0x1739
   830f8:	f2c0 0608 	movt	r6, #8
   830fc:	47b0      	blx	r6
   830fe:	bf00      	nop
   83100:	e7fd      	b.n	830fe <prvTimerTask+0x186>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83102:	4620      	mov	r0, r4
   83104:	18f9      	adds	r1, r7, r3
   83106:	463a      	mov	r2, r7
   83108:	463b      	mov	r3, r7
   8310a:	47c8      	blx	r9
   8310c:	e005      	b.n	8311a <prvTimerTask+0x1a2>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8310e:	4620      	mov	r0, r4
   83110:	f641 11c9 	movw	r1, #6601	; 0x19c9
   83114:	f2c0 0108 	movt	r1, #8
   83118:	4788      	blx	r1

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8311a:	6830      	ldr	r0, [r6, #0]
   8311c:	a905      	add	r1, sp, #20
   8311e:	f04f 0200 	mov.w	r2, #0
   83122:	4613      	mov	r3, r2
   83124:	47a8      	blx	r5
   83126:	2800      	cmp	r0, #0
   83128:	d1b0      	bne.n	8308c <prvTimerTask+0x114>
   8312a:	e735      	b.n	82f98 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   8312c:	9903      	ldr	r1, [sp, #12]
   8312e:	4788      	blx	r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83130:	a804      	add	r0, sp, #16
   83132:	47d0      	blx	sl
   83134:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   83136:	9c04      	ldr	r4, [sp, #16]
   83138:	2c00      	cmp	r4, #0
   8313a:	f43f af75 	beq.w	83028 <prvTimerTask+0xb0>
   8313e:	e78c      	b.n	8305a <prvTimerTask+0xe2>

00083140 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   83140:	b5f0      	push	{r4, r5, r6, r7, lr}
   83142:	b083      	sub	sp, #12
   83144:	4604      	mov	r4, r0
   83146:	460d      	mov	r5, r1
	uint32_t val = 0;
   83148:	f04f 0300 	mov.w	r3, #0
   8314c:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8314e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83152:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83156:	4284      	cmp	r4, r0
   83158:	d10d      	bne.n	83176 <usart_serial_getchar+0x36>
		while (uart_read((Uart*)p_usart, data));
   8315a:	f44f 6600 	mov.w	r6, #2048	; 0x800
   8315e:	f2c4 060e 	movt	r6, #16398	; 0x400e
   83162:	f241 17e1 	movw	r7, #4577	; 0x11e1
   83166:	f2c0 0708 	movt	r7, #8
   8316a:	4630      	mov	r0, r6
   8316c:	4629      	mov	r1, r5
   8316e:	47b8      	blx	r7
   83170:	2800      	cmp	r0, #0
   83172:	d1fa      	bne.n	8316a <usart_serial_getchar+0x2a>
   83174:	e02b      	b.n	831ce <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8317a:	f2c4 0109 	movt	r1, #16393	; 0x4009
   8317e:	428c      	cmp	r4, r1
   83180:	d10f      	bne.n	831a2 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
   83182:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   83186:	f2c4 0609 	movt	r6, #16393	; 0x4009
   8318a:	f241 2719 	movw	r7, #4633	; 0x1219
   8318e:	f2c0 0708 	movt	r7, #8
   83192:	4630      	mov	r0, r6
   83194:	a901      	add	r1, sp, #4
   83196:	47b8      	blx	r7
   83198:	2800      	cmp	r0, #0
   8319a:	d1fa      	bne.n	83192 <usart_serial_getchar+0x52>
		*data = (uint8_t)(val & 0xFF);
   8319c:	9801      	ldr	r0, [sp, #4]
   8319e:	7028      	strb	r0, [r5, #0]
   831a0:	e02b      	b.n	831fa <usart_serial_getchar+0xba>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   831a2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   831a6:	f2c4 0209 	movt	r2, #16393	; 0x4009
   831aa:	4294      	cmp	r4, r2
   831ac:	d10f      	bne.n	831ce <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
   831ae:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   831b2:	f2c4 0409 	movt	r4, #16393	; 0x4009
   831b6:	f241 2619 	movw	r6, #4633	; 0x1219
   831ba:	f2c0 0608 	movt	r6, #8
   831be:	4620      	mov	r0, r4
   831c0:	a901      	add	r1, sp, #4
   831c2:	47b0      	blx	r6
   831c4:	2800      	cmp	r0, #0
   831c6:	d1fa      	bne.n	831be <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   831c8:	9b01      	ldr	r3, [sp, #4]
   831ca:	702b      	strb	r3, [r5, #0]
   831cc:	e02a      	b.n	83224 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   831ce:	f04f 0100 	mov.w	r1, #0
   831d2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   831d6:	428c      	cmp	r4, r1
   831d8:	d10f      	bne.n	831fa <usart_serial_getchar+0xba>
		while (usart_read(p_usart, &val));
   831da:	f04f 0400 	mov.w	r4, #0
   831de:	f2c4 040a 	movt	r4, #16394	; 0x400a
   831e2:	f241 2619 	movw	r6, #4633	; 0x1219
   831e6:	f2c0 0608 	movt	r6, #8
   831ea:	4620      	mov	r0, r4
   831ec:	a901      	add	r1, sp, #4
   831ee:	47b0      	blx	r6
   831f0:	2800      	cmp	r0, #0
   831f2:	d1fa      	bne.n	831ea <usart_serial_getchar+0xaa>
		*data = (uint8_t)(val & 0xFF);
   831f4:	9801      	ldr	r0, [sp, #4]
   831f6:	7028      	strb	r0, [r5, #0]
   831f8:	e014      	b.n	83224 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   831fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   831fe:	f2c4 020a 	movt	r2, #16394	; 0x400a
   83202:	4294      	cmp	r4, r2
   83204:	d10e      	bne.n	83224 <usart_serial_getchar+0xe4>
		while (usart_read(p_usart, &val));
   83206:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   8320a:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8320e:	f241 2619 	movw	r6, #4633	; 0x1219
   83212:	f2c0 0608 	movt	r6, #8
   83216:	4620      	mov	r0, r4
   83218:	a901      	add	r1, sp, #4
   8321a:	47b0      	blx	r6
   8321c:	2800      	cmp	r0, #0
   8321e:	d1fa      	bne.n	83216 <usart_serial_getchar+0xd6>
		*data = (uint8_t)(val & 0xFF);
   83220:	9b01      	ldr	r3, [sp, #4]
   83222:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   83224:	b003      	add	sp, #12
   83226:	bdf0      	pop	{r4, r5, r6, r7, pc}

00083228 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   83228:	b570      	push	{r4, r5, r6, lr}
   8322a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8322c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83230:	f2c4 030e 	movt	r3, #16398	; 0x400e
   83234:	4298      	cmp	r0, r3
   83236:	d10f      	bne.n	83258 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   83238:	f44f 6500 	mov.w	r5, #2048	; 0x800
   8323c:	f2c4 050e 	movt	r5, #16398	; 0x400e
   83240:	f241 16c9 	movw	r6, #4553	; 0x11c9
   83244:	f2c0 0608 	movt	r6, #8
   83248:	4628      	mov	r0, r5
   8324a:	4621      	mov	r1, r4
   8324c:	47b0      	blx	r6
   8324e:	2800      	cmp	r0, #0
   83250:	d1fa      	bne.n	83248 <usart_serial_putchar+0x20>
		return 1;
   83252:	f04f 0001 	mov.w	r0, #1
   83256:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8325c:	f2c4 0109 	movt	r1, #16393	; 0x4009
   83260:	4288      	cmp	r0, r1
   83262:	d10f      	bne.n	83284 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   83264:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   83268:	f2c4 0509 	movt	r5, #16393	; 0x4009
   8326c:	f241 16f9 	movw	r6, #4601	; 0x11f9
   83270:	f2c0 0608 	movt	r6, #8
   83274:	4628      	mov	r0, r5
   83276:	4621      	mov	r1, r4
   83278:	47b0      	blx	r6
   8327a:	2800      	cmp	r0, #0
   8327c:	d1fa      	bne.n	83274 <usart_serial_putchar+0x4c>
		return 1;
   8327e:	f04f 0001 	mov.w	r0, #1
   83282:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   83284:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   83288:	f2c4 0209 	movt	r2, #16393	; 0x4009
   8328c:	4290      	cmp	r0, r2
   8328e:	d10f      	bne.n	832b0 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   83290:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   83294:	f2c4 0509 	movt	r5, #16393	; 0x4009
   83298:	f241 16f9 	movw	r6, #4601	; 0x11f9
   8329c:	f2c0 0608 	movt	r6, #8
   832a0:	4628      	mov	r0, r5
   832a2:	4621      	mov	r1, r4
   832a4:	47b0      	blx	r6
   832a6:	2800      	cmp	r0, #0
   832a8:	d1fa      	bne.n	832a0 <usart_serial_putchar+0x78>
		return 1;
   832aa:	f04f 0001 	mov.w	r0, #1
   832ae:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   832b0:	f04f 0300 	mov.w	r3, #0
   832b4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   832b8:	4298      	cmp	r0, r3
   832ba:	d10f      	bne.n	832dc <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   832bc:	f04f 0500 	mov.w	r5, #0
   832c0:	f2c4 050a 	movt	r5, #16394	; 0x400a
   832c4:	f241 16f9 	movw	r6, #4601	; 0x11f9
   832c8:	f2c0 0608 	movt	r6, #8
   832cc:	4628      	mov	r0, r5
   832ce:	4621      	mov	r1, r4
   832d0:	47b0      	blx	r6
   832d2:	2800      	cmp	r0, #0
   832d4:	d1fa      	bne.n	832cc <usart_serial_putchar+0xa4>
		return 1;
   832d6:	f04f 0001 	mov.w	r0, #1
   832da:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   832dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   832e0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   832e4:	4288      	cmp	r0, r1
   832e6:	d10f      	bne.n	83308 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   832e8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   832ec:	f2c4 050a 	movt	r5, #16394	; 0x400a
   832f0:	f241 16f9 	movw	r6, #4601	; 0x11f9
   832f4:	f2c0 0608 	movt	r6, #8
   832f8:	4628      	mov	r0, r5
   832fa:	4621      	mov	r1, r4
   832fc:	47b0      	blx	r6
   832fe:	2800      	cmp	r0, #0
   83300:	d1fa      	bne.n	832f8 <usart_serial_putchar+0xd0>
		return 1;
   83302:	f04f 0001 	mov.w	r0, #1
   83306:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   83308:	f04f 0000 	mov.w	r0, #0
}
   8330c:	bd70      	pop	{r4, r5, r6, pc}
   8330e:	bf00      	nop

00083310 <configure_console>:


void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio.
*  Note that the baudrate, parity and other parameters must be set in */
{
   83310:	b530      	push	{r4, r5, lr}
   83312:	b085      	sub	sp, #20
   83314:	f04f 0008 	mov.w	r0, #8
   83318:	f640 55f9 	movw	r5, #3577	; 0xdf9
   8331c:	f2c0 0508 	movt	r5, #8
   83320:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   83322:	f44f 6400 	mov.w	r4, #2048	; 0x800
   83326:	f2c4 040e 	movt	r4, #16398	; 0x400e
   8332a:	f64a 334c 	movw	r3, #43852	; 0xab4c
   8332e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83332:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   83334:	f64a 3048 	movw	r0, #43848	; 0xab48
   83338:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8333c:	f243 2229 	movw	r2, #12841	; 0x3229
   83340:	f2c0 0208 	movt	r2, #8
   83344:	6002      	str	r2, [r0, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   83346:	f64a 3144 	movw	r1, #43844	; 0xab44
   8334a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8334e:	f243 1341 	movw	r3, #12609	; 0x3141
   83352:	f2c0 0308 	movt	r3, #8
   83356:	600b      	str	r3, [r1, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   83358:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   8335c:	f2c0 5001 	movt	r0, #1281	; 0x501
   83360:	9000      	str	r0, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   83362:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   83366:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   83368:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8336c:	9102      	str	r1, [sp, #8]
   8336e:	f04f 0008 	mov.w	r0, #8
   83372:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   83374:	4620      	mov	r0, r4
   83376:	4669      	mov	r1, sp
   83378:	f241 1585 	movw	r5, #4485	; 0x1185
   8337c:	f2c0 0508 	movt	r5, #8
   83380:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   83382:	f240 0540 	movw	r5, #64	; 0x40
   83386:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8338a:	682c      	ldr	r4, [r5, #0]
   8338c:	68a0      	ldr	r0, [r4, #8]
   8338e:	f04f 0100 	mov.w	r1, #0
   83392:	f643 548b 	movw	r4, #15755	; 0x3d8b
   83396:	f2c0 0408 	movt	r4, #8
   8339a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8339c:	682b      	ldr	r3, [r5, #0]
   8339e:	6858      	ldr	r0, [r3, #4]
   833a0:	f04f 0100 	mov.w	r1, #0
   833a4:	47a0      	blx	r4
	};
	
	/* Configure console UART */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   833a6:	b005      	add	sp, #20
   833a8:	bd30      	pop	{r4, r5, pc}
   833aa:	bf00      	nop

000833ac <main>:
#include "PIDControl.h"
#include "MatlabPlot.h"
#include "io_uart.h"

int main (void)
{
   833ac:	b510      	push	{r4, lr}
   833ae:	b084      	sub	sp, #16
	sysclk_init();			// Initialize system clock
   833b0:	f240 13a5 	movw	r3, #421	; 0x1a5
   833b4:	f2c0 0308 	movt	r3, #8
   833b8:	4798      	blx	r3
	board_init();			// Initialize Arduino Due board
   833ba:	f240 70f5 	movw	r0, #2037	; 0x7f5
   833be:	f2c0 0008 	movt	r0, #8
   833c2:	4780      	blx	r0
	configure_console();	// Initialize terminal window
   833c4:	f243 3111 	movw	r1, #13073	; 0x3311
   833c8:	f2c0 0108 	movt	r1, #8
   833cc:	4788      	blx	r1
	adc_setup();			// Initialize ADC
   833ce:	f240 52d5 	movw	r2, #1493	; 0x5d5
   833d2:	f2c0 0208 	movt	r2, #8
   833d6:	4790      	blx	r2
	pwm_setup();			// Initialize PWM
   833d8:	f240 540d 	movw	r4, #1293	; 0x50d
   833dc:	f2c0 0408 	movt	r4, #8
   833e0:	47a0      	blx	r4
	motorshield_setup();	// Initialize motor shield
   833e2:	f240 334d 	movw	r3, #845	; 0x34d
   833e6:	f2c0 0308 	movt	r3, #8
   833ea:	4798      	blx	r3
	delay_init();			// Initialize delay
   833ec:	f240 201d 	movw	r0, #541	; 0x21d
   833f0:	f2c0 0008 	movt	r0, #8
   833f4:	4780      	blx	r0
	//}
	
	//pid_control();
	
	/* Create the first task for monitoring the processor activity */
	if (xTaskCreate(pid_control, (const signed char * const) "PID Control", 1024, NULL, 2, NULL) != pdPASS)
   833f6:	f04f 0102 	mov.w	r1, #2
   833fa:	9100      	str	r1, [sp, #0]
   833fc:	f04f 0300 	mov.w	r3, #0
   83400:	9301      	str	r3, [sp, #4]
   83402:	9302      	str	r3, [sp, #8]
   83404:	9303      	str	r3, [sp, #12]
   83406:	f240 3079 	movw	r0, #889	; 0x379
   8340a:	f2c0 0008 	movt	r0, #8
   8340e:	f247 6144 	movw	r1, #30276	; 0x7644
   83412:	f2c0 0108 	movt	r1, #8
   83416:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8341a:	f242 1415 	movw	r4, #8469	; 0x2115
   8341e:	f2c0 0408 	movt	r4, #8
   83422:	47a0      	blx	r4
   83424:	2801      	cmp	r0, #1
   83426:	d002      	beq.n	8342e <main+0x82>
	{
		printf("Failed to create PID Control task\r\n");
   83428:	4813      	ldr	r0, [pc, #76]	; (83478 <main+0xcc>)
   8342a:	4a14      	ldr	r2, [pc, #80]	; (8347c <main+0xd0>)
   8342c:	4790      	blx	r2
	}
	
	if (xTaskCreate(plot_values, (const signed char * const) "Plot Values", 1024, NULL, 1, NULL) != pdPASS)
   8342e:	f04f 0301 	mov.w	r3, #1
   83432:	9300      	str	r3, [sp, #0]
   83434:	f04f 0300 	mov.w	r3, #0
   83438:	9301      	str	r3, [sp, #4]
   8343a:	9302      	str	r3, [sp, #8]
   8343c:	9303      	str	r3, [sp, #12]
   8343e:	f240 20d1 	movw	r0, #721	; 0x2d1
   83442:	f2c0 0008 	movt	r0, #8
   83446:	f247 6174 	movw	r1, #30324	; 0x7674
   8344a:	f2c0 0108 	movt	r1, #8
   8344e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83452:	f242 1415 	movw	r4, #8469	; 0x2115
   83456:	f2c0 0408 	movt	r4, #8
   8345a:	47a0      	blx	r4
   8345c:	2801      	cmp	r0, #1
   8345e:	d002      	beq.n	83466 <main+0xba>
	{
		printf("Failed to create PID Control task\r\n");
   83460:	4805      	ldr	r0, [pc, #20]	; (83478 <main+0xcc>)
   83462:	4906      	ldr	r1, [pc, #24]	; (8347c <main+0xd0>)
   83464:	4788      	blx	r1
	}
	//
	///* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   83466:	f242 30b5 	movw	r0, #9141	; 0x23b5
   8346a:	f2c0 0008 	movt	r0, #8
   8346e:	4780      	blx	r0
}
   83470:	f04f 0000 	mov.w	r0, #0
   83474:	b004      	add	sp, #16
   83476:	bd10      	pop	{r4, pc}
   83478:	00087650 	.word	0x00087650
   8347c:	00083d29 	.word	0x00083d29

00083480 <__aeabi_drsub>:
   83480:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83484:	e002      	b.n	8348c <__adddf3>
   83486:	bf00      	nop

00083488 <__aeabi_dsub>:
   83488:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008348c <__adddf3>:
   8348c:	b530      	push	{r4, r5, lr}
   8348e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83492:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83496:	ea94 0f05 	teq	r4, r5
   8349a:	bf08      	it	eq
   8349c:	ea90 0f02 	teqeq	r0, r2
   834a0:	bf1f      	itttt	ne
   834a2:	ea54 0c00 	orrsne.w	ip, r4, r0
   834a6:	ea55 0c02 	orrsne.w	ip, r5, r2
   834aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   834ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   834b2:	f000 80e2 	beq.w	8367a <__adddf3+0x1ee>
   834b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   834ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   834be:	bfb8      	it	lt
   834c0:	426d      	neglt	r5, r5
   834c2:	dd0c      	ble.n	834de <__adddf3+0x52>
   834c4:	442c      	add	r4, r5
   834c6:	ea80 0202 	eor.w	r2, r0, r2
   834ca:	ea81 0303 	eor.w	r3, r1, r3
   834ce:	ea82 0000 	eor.w	r0, r2, r0
   834d2:	ea83 0101 	eor.w	r1, r3, r1
   834d6:	ea80 0202 	eor.w	r2, r0, r2
   834da:	ea81 0303 	eor.w	r3, r1, r3
   834de:	2d36      	cmp	r5, #54	; 0x36
   834e0:	bf88      	it	hi
   834e2:	bd30      	pophi	{r4, r5, pc}
   834e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   834e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   834ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   834f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   834f4:	d002      	beq.n	834fc <__adddf3+0x70>
   834f6:	4240      	negs	r0, r0
   834f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   834fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83500:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83504:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83508:	d002      	beq.n	83510 <__adddf3+0x84>
   8350a:	4252      	negs	r2, r2
   8350c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83510:	ea94 0f05 	teq	r4, r5
   83514:	f000 80a7 	beq.w	83666 <__adddf3+0x1da>
   83518:	f1a4 0401 	sub.w	r4, r4, #1
   8351c:	f1d5 0e20 	rsbs	lr, r5, #32
   83520:	db0d      	blt.n	8353e <__adddf3+0xb2>
   83522:	fa02 fc0e 	lsl.w	ip, r2, lr
   83526:	fa22 f205 	lsr.w	r2, r2, r5
   8352a:	1880      	adds	r0, r0, r2
   8352c:	f141 0100 	adc.w	r1, r1, #0
   83530:	fa03 f20e 	lsl.w	r2, r3, lr
   83534:	1880      	adds	r0, r0, r2
   83536:	fa43 f305 	asr.w	r3, r3, r5
   8353a:	4159      	adcs	r1, r3
   8353c:	e00e      	b.n	8355c <__adddf3+0xd0>
   8353e:	f1a5 0520 	sub.w	r5, r5, #32
   83542:	f10e 0e20 	add.w	lr, lr, #32
   83546:	2a01      	cmp	r2, #1
   83548:	fa03 fc0e 	lsl.w	ip, r3, lr
   8354c:	bf28      	it	cs
   8354e:	f04c 0c02 	orrcs.w	ip, ip, #2
   83552:	fa43 f305 	asr.w	r3, r3, r5
   83556:	18c0      	adds	r0, r0, r3
   83558:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8355c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83560:	d507      	bpl.n	83572 <__adddf3+0xe6>
   83562:	f04f 0e00 	mov.w	lr, #0
   83566:	f1dc 0c00 	rsbs	ip, ip, #0
   8356a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8356e:	eb6e 0101 	sbc.w	r1, lr, r1
   83572:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83576:	d31b      	bcc.n	835b0 <__adddf3+0x124>
   83578:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8357c:	d30c      	bcc.n	83598 <__adddf3+0x10c>
   8357e:	0849      	lsrs	r1, r1, #1
   83580:	ea5f 0030 	movs.w	r0, r0, rrx
   83584:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83588:	f104 0401 	add.w	r4, r4, #1
   8358c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83590:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83594:	f080 809a 	bcs.w	836cc <__adddf3+0x240>
   83598:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8359c:	bf08      	it	eq
   8359e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   835a2:	f150 0000 	adcs.w	r0, r0, #0
   835a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   835aa:	ea41 0105 	orr.w	r1, r1, r5
   835ae:	bd30      	pop	{r4, r5, pc}
   835b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   835b4:	4140      	adcs	r0, r0
   835b6:	eb41 0101 	adc.w	r1, r1, r1
   835ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   835be:	f1a4 0401 	sub.w	r4, r4, #1
   835c2:	d1e9      	bne.n	83598 <__adddf3+0x10c>
   835c4:	f091 0f00 	teq	r1, #0
   835c8:	bf04      	itt	eq
   835ca:	4601      	moveq	r1, r0
   835cc:	2000      	moveq	r0, #0
   835ce:	fab1 f381 	clz	r3, r1
   835d2:	bf08      	it	eq
   835d4:	3320      	addeq	r3, #32
   835d6:	f1a3 030b 	sub.w	r3, r3, #11
   835da:	f1b3 0220 	subs.w	r2, r3, #32
   835de:	da0c      	bge.n	835fa <__adddf3+0x16e>
   835e0:	320c      	adds	r2, #12
   835e2:	dd08      	ble.n	835f6 <__adddf3+0x16a>
   835e4:	f102 0c14 	add.w	ip, r2, #20
   835e8:	f1c2 020c 	rsb	r2, r2, #12
   835ec:	fa01 f00c 	lsl.w	r0, r1, ip
   835f0:	fa21 f102 	lsr.w	r1, r1, r2
   835f4:	e00c      	b.n	83610 <__adddf3+0x184>
   835f6:	f102 0214 	add.w	r2, r2, #20
   835fa:	bfd8      	it	le
   835fc:	f1c2 0c20 	rsble	ip, r2, #32
   83600:	fa01 f102 	lsl.w	r1, r1, r2
   83604:	fa20 fc0c 	lsr.w	ip, r0, ip
   83608:	bfdc      	itt	le
   8360a:	ea41 010c 	orrle.w	r1, r1, ip
   8360e:	4090      	lslle	r0, r2
   83610:	1ae4      	subs	r4, r4, r3
   83612:	bfa2      	ittt	ge
   83614:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83618:	4329      	orrge	r1, r5
   8361a:	bd30      	popge	{r4, r5, pc}
   8361c:	ea6f 0404 	mvn.w	r4, r4
   83620:	3c1f      	subs	r4, #31
   83622:	da1c      	bge.n	8365e <__adddf3+0x1d2>
   83624:	340c      	adds	r4, #12
   83626:	dc0e      	bgt.n	83646 <__adddf3+0x1ba>
   83628:	f104 0414 	add.w	r4, r4, #20
   8362c:	f1c4 0220 	rsb	r2, r4, #32
   83630:	fa20 f004 	lsr.w	r0, r0, r4
   83634:	fa01 f302 	lsl.w	r3, r1, r2
   83638:	ea40 0003 	orr.w	r0, r0, r3
   8363c:	fa21 f304 	lsr.w	r3, r1, r4
   83640:	ea45 0103 	orr.w	r1, r5, r3
   83644:	bd30      	pop	{r4, r5, pc}
   83646:	f1c4 040c 	rsb	r4, r4, #12
   8364a:	f1c4 0220 	rsb	r2, r4, #32
   8364e:	fa20 f002 	lsr.w	r0, r0, r2
   83652:	fa01 f304 	lsl.w	r3, r1, r4
   83656:	ea40 0003 	orr.w	r0, r0, r3
   8365a:	4629      	mov	r1, r5
   8365c:	bd30      	pop	{r4, r5, pc}
   8365e:	fa21 f004 	lsr.w	r0, r1, r4
   83662:	4629      	mov	r1, r5
   83664:	bd30      	pop	{r4, r5, pc}
   83666:	f094 0f00 	teq	r4, #0
   8366a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8366e:	bf06      	itte	eq
   83670:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83674:	3401      	addeq	r4, #1
   83676:	3d01      	subne	r5, #1
   83678:	e74e      	b.n	83518 <__adddf3+0x8c>
   8367a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8367e:	bf18      	it	ne
   83680:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83684:	d029      	beq.n	836da <__adddf3+0x24e>
   83686:	ea94 0f05 	teq	r4, r5
   8368a:	bf08      	it	eq
   8368c:	ea90 0f02 	teqeq	r0, r2
   83690:	d005      	beq.n	8369e <__adddf3+0x212>
   83692:	ea54 0c00 	orrs.w	ip, r4, r0
   83696:	bf04      	itt	eq
   83698:	4619      	moveq	r1, r3
   8369a:	4610      	moveq	r0, r2
   8369c:	bd30      	pop	{r4, r5, pc}
   8369e:	ea91 0f03 	teq	r1, r3
   836a2:	bf1e      	ittt	ne
   836a4:	2100      	movne	r1, #0
   836a6:	2000      	movne	r0, #0
   836a8:	bd30      	popne	{r4, r5, pc}
   836aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   836ae:	d105      	bne.n	836bc <__adddf3+0x230>
   836b0:	0040      	lsls	r0, r0, #1
   836b2:	4149      	adcs	r1, r1
   836b4:	bf28      	it	cs
   836b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   836ba:	bd30      	pop	{r4, r5, pc}
   836bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   836c0:	bf3c      	itt	cc
   836c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   836c6:	bd30      	popcc	{r4, r5, pc}
   836c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   836cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   836d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   836d4:	f04f 0000 	mov.w	r0, #0
   836d8:	bd30      	pop	{r4, r5, pc}
   836da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   836de:	bf1a      	itte	ne
   836e0:	4619      	movne	r1, r3
   836e2:	4610      	movne	r0, r2
   836e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   836e8:	bf1c      	itt	ne
   836ea:	460b      	movne	r3, r1
   836ec:	4602      	movne	r2, r0
   836ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   836f2:	bf06      	itte	eq
   836f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   836f8:	ea91 0f03 	teqeq	r1, r3
   836fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83700:	bd30      	pop	{r4, r5, pc}
   83702:	bf00      	nop

00083704 <__aeabi_ui2d>:
   83704:	f090 0f00 	teq	r0, #0
   83708:	bf04      	itt	eq
   8370a:	2100      	moveq	r1, #0
   8370c:	4770      	bxeq	lr
   8370e:	b530      	push	{r4, r5, lr}
   83710:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83714:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83718:	f04f 0500 	mov.w	r5, #0
   8371c:	f04f 0100 	mov.w	r1, #0
   83720:	e750      	b.n	835c4 <__adddf3+0x138>
   83722:	bf00      	nop

00083724 <__aeabi_i2d>:
   83724:	f090 0f00 	teq	r0, #0
   83728:	bf04      	itt	eq
   8372a:	2100      	moveq	r1, #0
   8372c:	4770      	bxeq	lr
   8372e:	b530      	push	{r4, r5, lr}
   83730:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83734:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83738:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8373c:	bf48      	it	mi
   8373e:	4240      	negmi	r0, r0
   83740:	f04f 0100 	mov.w	r1, #0
   83744:	e73e      	b.n	835c4 <__adddf3+0x138>
   83746:	bf00      	nop

00083748 <__aeabi_f2d>:
   83748:	0042      	lsls	r2, r0, #1
   8374a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8374e:	ea4f 0131 	mov.w	r1, r1, rrx
   83752:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83756:	bf1f      	itttt	ne
   83758:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8375c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83760:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83764:	4770      	bxne	lr
   83766:	f092 0f00 	teq	r2, #0
   8376a:	bf14      	ite	ne
   8376c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83770:	4770      	bxeq	lr
   83772:	b530      	push	{r4, r5, lr}
   83774:	f44f 7460 	mov.w	r4, #896	; 0x380
   83778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8377c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83780:	e720      	b.n	835c4 <__adddf3+0x138>
   83782:	bf00      	nop

00083784 <__aeabi_ul2d>:
   83784:	ea50 0201 	orrs.w	r2, r0, r1
   83788:	bf08      	it	eq
   8378a:	4770      	bxeq	lr
   8378c:	b530      	push	{r4, r5, lr}
   8378e:	f04f 0500 	mov.w	r5, #0
   83792:	e00a      	b.n	837aa <__aeabi_l2d+0x16>

00083794 <__aeabi_l2d>:
   83794:	ea50 0201 	orrs.w	r2, r0, r1
   83798:	bf08      	it	eq
   8379a:	4770      	bxeq	lr
   8379c:	b530      	push	{r4, r5, lr}
   8379e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   837a2:	d502      	bpl.n	837aa <__aeabi_l2d+0x16>
   837a4:	4240      	negs	r0, r0
   837a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   837aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   837ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   837b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   837b6:	f43f aedc 	beq.w	83572 <__adddf3+0xe6>
   837ba:	f04f 0203 	mov.w	r2, #3
   837be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   837c2:	bf18      	it	ne
   837c4:	3203      	addne	r2, #3
   837c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   837ca:	bf18      	it	ne
   837cc:	3203      	addne	r2, #3
   837ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   837d2:	f1c2 0320 	rsb	r3, r2, #32
   837d6:	fa00 fc03 	lsl.w	ip, r0, r3
   837da:	fa20 f002 	lsr.w	r0, r0, r2
   837de:	fa01 fe03 	lsl.w	lr, r1, r3
   837e2:	ea40 000e 	orr.w	r0, r0, lr
   837e6:	fa21 f102 	lsr.w	r1, r1, r2
   837ea:	4414      	add	r4, r2
   837ec:	e6c1      	b.n	83572 <__adddf3+0xe6>
   837ee:	bf00      	nop

000837f0 <__aeabi_dmul>:
   837f0:	b570      	push	{r4, r5, r6, lr}
   837f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   837f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   837fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   837fe:	bf1d      	ittte	ne
   83800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83804:	ea94 0f0c 	teqne	r4, ip
   83808:	ea95 0f0c 	teqne	r5, ip
   8380c:	f000 f8de 	bleq	839cc <__aeabi_dmul+0x1dc>
   83810:	442c      	add	r4, r5
   83812:	ea81 0603 	eor.w	r6, r1, r3
   83816:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8381a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8381e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   83822:	bf18      	it	ne
   83824:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8382c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83830:	d038      	beq.n	838a4 <__aeabi_dmul+0xb4>
   83832:	fba0 ce02 	umull	ip, lr, r0, r2
   83836:	f04f 0500 	mov.w	r5, #0
   8383a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8383e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   83842:	fbe0 e503 	umlal	lr, r5, r0, r3
   83846:	f04f 0600 	mov.w	r6, #0
   8384a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8384e:	f09c 0f00 	teq	ip, #0
   83852:	bf18      	it	ne
   83854:	f04e 0e01 	orrne.w	lr, lr, #1
   83858:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8385c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83860:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83864:	d204      	bcs.n	83870 <__aeabi_dmul+0x80>
   83866:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8386a:	416d      	adcs	r5, r5
   8386c:	eb46 0606 	adc.w	r6, r6, r6
   83870:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83874:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83878:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8387c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83880:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83884:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83888:	bf88      	it	hi
   8388a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8388e:	d81e      	bhi.n	838ce <__aeabi_dmul+0xde>
   83890:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83894:	bf08      	it	eq
   83896:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8389a:	f150 0000 	adcs.w	r0, r0, #0
   8389e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   838a2:	bd70      	pop	{r4, r5, r6, pc}
   838a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   838a8:	ea46 0101 	orr.w	r1, r6, r1
   838ac:	ea40 0002 	orr.w	r0, r0, r2
   838b0:	ea81 0103 	eor.w	r1, r1, r3
   838b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   838b8:	bfc2      	ittt	gt
   838ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   838be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   838c2:	bd70      	popgt	{r4, r5, r6, pc}
   838c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   838c8:	f04f 0e00 	mov.w	lr, #0
   838cc:	3c01      	subs	r4, #1
   838ce:	f300 80ab 	bgt.w	83a28 <__aeabi_dmul+0x238>
   838d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   838d6:	bfde      	ittt	le
   838d8:	2000      	movle	r0, #0
   838da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   838de:	bd70      	pople	{r4, r5, r6, pc}
   838e0:	f1c4 0400 	rsb	r4, r4, #0
   838e4:	3c20      	subs	r4, #32
   838e6:	da35      	bge.n	83954 <__aeabi_dmul+0x164>
   838e8:	340c      	adds	r4, #12
   838ea:	dc1b      	bgt.n	83924 <__aeabi_dmul+0x134>
   838ec:	f104 0414 	add.w	r4, r4, #20
   838f0:	f1c4 0520 	rsb	r5, r4, #32
   838f4:	fa00 f305 	lsl.w	r3, r0, r5
   838f8:	fa20 f004 	lsr.w	r0, r0, r4
   838fc:	fa01 f205 	lsl.w	r2, r1, r5
   83900:	ea40 0002 	orr.w	r0, r0, r2
   83904:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83908:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8390c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83910:	fa21 f604 	lsr.w	r6, r1, r4
   83914:	eb42 0106 	adc.w	r1, r2, r6
   83918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8391c:	bf08      	it	eq
   8391e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83922:	bd70      	pop	{r4, r5, r6, pc}
   83924:	f1c4 040c 	rsb	r4, r4, #12
   83928:	f1c4 0520 	rsb	r5, r4, #32
   8392c:	fa00 f304 	lsl.w	r3, r0, r4
   83930:	fa20 f005 	lsr.w	r0, r0, r5
   83934:	fa01 f204 	lsl.w	r2, r1, r4
   83938:	ea40 0002 	orr.w	r0, r0, r2
   8393c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83940:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83944:	f141 0100 	adc.w	r1, r1, #0
   83948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8394c:	bf08      	it	eq
   8394e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83952:	bd70      	pop	{r4, r5, r6, pc}
   83954:	f1c4 0520 	rsb	r5, r4, #32
   83958:	fa00 f205 	lsl.w	r2, r0, r5
   8395c:	ea4e 0e02 	orr.w	lr, lr, r2
   83960:	fa20 f304 	lsr.w	r3, r0, r4
   83964:	fa01 f205 	lsl.w	r2, r1, r5
   83968:	ea43 0302 	orr.w	r3, r3, r2
   8396c:	fa21 f004 	lsr.w	r0, r1, r4
   83970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83974:	fa21 f204 	lsr.w	r2, r1, r4
   83978:	ea20 0002 	bic.w	r0, r0, r2
   8397c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83984:	bf08      	it	eq
   83986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8398a:	bd70      	pop	{r4, r5, r6, pc}
   8398c:	f094 0f00 	teq	r4, #0
   83990:	d10f      	bne.n	839b2 <__aeabi_dmul+0x1c2>
   83992:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83996:	0040      	lsls	r0, r0, #1
   83998:	eb41 0101 	adc.w	r1, r1, r1
   8399c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   839a0:	bf08      	it	eq
   839a2:	3c01      	subeq	r4, #1
   839a4:	d0f7      	beq.n	83996 <__aeabi_dmul+0x1a6>
   839a6:	ea41 0106 	orr.w	r1, r1, r6
   839aa:	f095 0f00 	teq	r5, #0
   839ae:	bf18      	it	ne
   839b0:	4770      	bxne	lr
   839b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   839b6:	0052      	lsls	r2, r2, #1
   839b8:	eb43 0303 	adc.w	r3, r3, r3
   839bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   839c0:	bf08      	it	eq
   839c2:	3d01      	subeq	r5, #1
   839c4:	d0f7      	beq.n	839b6 <__aeabi_dmul+0x1c6>
   839c6:	ea43 0306 	orr.w	r3, r3, r6
   839ca:	4770      	bx	lr
   839cc:	ea94 0f0c 	teq	r4, ip
   839d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   839d4:	bf18      	it	ne
   839d6:	ea95 0f0c 	teqne	r5, ip
   839da:	d00c      	beq.n	839f6 <__aeabi_dmul+0x206>
   839dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   839e0:	bf18      	it	ne
   839e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   839e6:	d1d1      	bne.n	8398c <__aeabi_dmul+0x19c>
   839e8:	ea81 0103 	eor.w	r1, r1, r3
   839ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   839f0:	f04f 0000 	mov.w	r0, #0
   839f4:	bd70      	pop	{r4, r5, r6, pc}
   839f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   839fa:	bf06      	itte	eq
   839fc:	4610      	moveq	r0, r2
   839fe:	4619      	moveq	r1, r3
   83a00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83a04:	d019      	beq.n	83a3a <__aeabi_dmul+0x24a>
   83a06:	ea94 0f0c 	teq	r4, ip
   83a0a:	d102      	bne.n	83a12 <__aeabi_dmul+0x222>
   83a0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   83a10:	d113      	bne.n	83a3a <__aeabi_dmul+0x24a>
   83a12:	ea95 0f0c 	teq	r5, ip
   83a16:	d105      	bne.n	83a24 <__aeabi_dmul+0x234>
   83a18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83a1c:	bf1c      	itt	ne
   83a1e:	4610      	movne	r0, r2
   83a20:	4619      	movne	r1, r3
   83a22:	d10a      	bne.n	83a3a <__aeabi_dmul+0x24a>
   83a24:	ea81 0103 	eor.w	r1, r1, r3
   83a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83a2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83a30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83a34:	f04f 0000 	mov.w	r0, #0
   83a38:	bd70      	pop	{r4, r5, r6, pc}
   83a3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83a3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   83a42:	bd70      	pop	{r4, r5, r6, pc}

00083a44 <__aeabi_ddiv>:
   83a44:	b570      	push	{r4, r5, r6, lr}
   83a46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83a4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83a4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83a52:	bf1d      	ittte	ne
   83a54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83a58:	ea94 0f0c 	teqne	r4, ip
   83a5c:	ea95 0f0c 	teqne	r5, ip
   83a60:	f000 f8a7 	bleq	83bb2 <__aeabi_ddiv+0x16e>
   83a64:	eba4 0405 	sub.w	r4, r4, r5
   83a68:	ea81 0e03 	eor.w	lr, r1, r3
   83a6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83a70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83a74:	f000 8088 	beq.w	83b88 <__aeabi_ddiv+0x144>
   83a78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83a7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83a80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83a84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83a88:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83a8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   83a90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83a94:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83a98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83a9c:	429d      	cmp	r5, r3
   83a9e:	bf08      	it	eq
   83aa0:	4296      	cmpeq	r6, r2
   83aa2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83aa6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83aaa:	d202      	bcs.n	83ab2 <__aeabi_ddiv+0x6e>
   83aac:	085b      	lsrs	r3, r3, #1
   83aae:	ea4f 0232 	mov.w	r2, r2, rrx
   83ab2:	1ab6      	subs	r6, r6, r2
   83ab4:	eb65 0503 	sbc.w	r5, r5, r3
   83ab8:	085b      	lsrs	r3, r3, #1
   83aba:	ea4f 0232 	mov.w	r2, r2, rrx
   83abe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   83ac2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83ac6:	ebb6 0e02 	subs.w	lr, r6, r2
   83aca:	eb75 0e03 	sbcs.w	lr, r5, r3
   83ace:	bf22      	ittt	cs
   83ad0:	1ab6      	subcs	r6, r6, r2
   83ad2:	4675      	movcs	r5, lr
   83ad4:	ea40 000c 	orrcs.w	r0, r0, ip
   83ad8:	085b      	lsrs	r3, r3, #1
   83ada:	ea4f 0232 	mov.w	r2, r2, rrx
   83ade:	ebb6 0e02 	subs.w	lr, r6, r2
   83ae2:	eb75 0e03 	sbcs.w	lr, r5, r3
   83ae6:	bf22      	ittt	cs
   83ae8:	1ab6      	subcs	r6, r6, r2
   83aea:	4675      	movcs	r5, lr
   83aec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83af0:	085b      	lsrs	r3, r3, #1
   83af2:	ea4f 0232 	mov.w	r2, r2, rrx
   83af6:	ebb6 0e02 	subs.w	lr, r6, r2
   83afa:	eb75 0e03 	sbcs.w	lr, r5, r3
   83afe:	bf22      	ittt	cs
   83b00:	1ab6      	subcs	r6, r6, r2
   83b02:	4675      	movcs	r5, lr
   83b04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83b08:	085b      	lsrs	r3, r3, #1
   83b0a:	ea4f 0232 	mov.w	r2, r2, rrx
   83b0e:	ebb6 0e02 	subs.w	lr, r6, r2
   83b12:	eb75 0e03 	sbcs.w	lr, r5, r3
   83b16:	bf22      	ittt	cs
   83b18:	1ab6      	subcs	r6, r6, r2
   83b1a:	4675      	movcs	r5, lr
   83b1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83b20:	ea55 0e06 	orrs.w	lr, r5, r6
   83b24:	d018      	beq.n	83b58 <__aeabi_ddiv+0x114>
   83b26:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83b2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   83b2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83b32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83b36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83b3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   83b3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   83b42:	d1c0      	bne.n	83ac6 <__aeabi_ddiv+0x82>
   83b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83b48:	d10b      	bne.n	83b62 <__aeabi_ddiv+0x11e>
   83b4a:	ea41 0100 	orr.w	r1, r1, r0
   83b4e:	f04f 0000 	mov.w	r0, #0
   83b52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83b56:	e7b6      	b.n	83ac6 <__aeabi_ddiv+0x82>
   83b58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83b5c:	bf04      	itt	eq
   83b5e:	4301      	orreq	r1, r0
   83b60:	2000      	moveq	r0, #0
   83b62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83b66:	bf88      	it	hi
   83b68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83b6c:	f63f aeaf 	bhi.w	838ce <__aeabi_dmul+0xde>
   83b70:	ebb5 0c03 	subs.w	ip, r5, r3
   83b74:	bf04      	itt	eq
   83b76:	ebb6 0c02 	subseq.w	ip, r6, r2
   83b7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83b7e:	f150 0000 	adcs.w	r0, r0, #0
   83b82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83b86:	bd70      	pop	{r4, r5, r6, pc}
   83b88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83b8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83b90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83b94:	bfc2      	ittt	gt
   83b96:	ebd4 050c 	rsbsgt	r5, r4, ip
   83b9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83b9e:	bd70      	popgt	{r4, r5, r6, pc}
   83ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83ba4:	f04f 0e00 	mov.w	lr, #0
   83ba8:	3c01      	subs	r4, #1
   83baa:	e690      	b.n	838ce <__aeabi_dmul+0xde>
   83bac:	ea45 0e06 	orr.w	lr, r5, r6
   83bb0:	e68d      	b.n	838ce <__aeabi_dmul+0xde>
   83bb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83bb6:	ea94 0f0c 	teq	r4, ip
   83bba:	bf08      	it	eq
   83bbc:	ea95 0f0c 	teqeq	r5, ip
   83bc0:	f43f af3b 	beq.w	83a3a <__aeabi_dmul+0x24a>
   83bc4:	ea94 0f0c 	teq	r4, ip
   83bc8:	d10a      	bne.n	83be0 <__aeabi_ddiv+0x19c>
   83bca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83bce:	f47f af34 	bne.w	83a3a <__aeabi_dmul+0x24a>
   83bd2:	ea95 0f0c 	teq	r5, ip
   83bd6:	f47f af25 	bne.w	83a24 <__aeabi_dmul+0x234>
   83bda:	4610      	mov	r0, r2
   83bdc:	4619      	mov	r1, r3
   83bde:	e72c      	b.n	83a3a <__aeabi_dmul+0x24a>
   83be0:	ea95 0f0c 	teq	r5, ip
   83be4:	d106      	bne.n	83bf4 <__aeabi_ddiv+0x1b0>
   83be6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83bea:	f43f aefd 	beq.w	839e8 <__aeabi_dmul+0x1f8>
   83bee:	4610      	mov	r0, r2
   83bf0:	4619      	mov	r1, r3
   83bf2:	e722      	b.n	83a3a <__aeabi_dmul+0x24a>
   83bf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83bf8:	bf18      	it	ne
   83bfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83bfe:	f47f aec5 	bne.w	8398c <__aeabi_dmul+0x19c>
   83c02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83c06:	f47f af0d 	bne.w	83a24 <__aeabi_dmul+0x234>
   83c0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   83c0e:	f47f aeeb 	bne.w	839e8 <__aeabi_dmul+0x1f8>
   83c12:	e712      	b.n	83a3a <__aeabi_dmul+0x24a>

00083c14 <__aeabi_d2iz>:
   83c14:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83c18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83c1c:	d215      	bcs.n	83c4a <__aeabi_d2iz+0x36>
   83c1e:	d511      	bpl.n	83c44 <__aeabi_d2iz+0x30>
   83c20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83c24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83c28:	d912      	bls.n	83c50 <__aeabi_d2iz+0x3c>
   83c2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83c32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83c3a:	fa23 f002 	lsr.w	r0, r3, r2
   83c3e:	bf18      	it	ne
   83c40:	4240      	negne	r0, r0
   83c42:	4770      	bx	lr
   83c44:	f04f 0000 	mov.w	r0, #0
   83c48:	4770      	bx	lr
   83c4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83c4e:	d105      	bne.n	83c5c <__aeabi_d2iz+0x48>
   83c50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   83c54:	bf08      	it	eq
   83c56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83c5a:	4770      	bx	lr
   83c5c:	f04f 0000 	mov.w	r0, #0
   83c60:	4770      	bx	lr
   83c62:	bf00      	nop

00083c64 <__aeabi_d2uiz>:
   83c64:	004a      	lsls	r2, r1, #1
   83c66:	d211      	bcs.n	83c8c <__aeabi_d2uiz+0x28>
   83c68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83c6c:	d211      	bcs.n	83c92 <__aeabi_d2uiz+0x2e>
   83c6e:	d50d      	bpl.n	83c8c <__aeabi_d2uiz+0x28>
   83c70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83c74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83c78:	d40e      	bmi.n	83c98 <__aeabi_d2uiz+0x34>
   83c7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83c7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83c82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83c86:	fa23 f002 	lsr.w	r0, r3, r2
   83c8a:	4770      	bx	lr
   83c8c:	f04f 0000 	mov.w	r0, #0
   83c90:	4770      	bx	lr
   83c92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83c96:	d102      	bne.n	83c9e <__aeabi_d2uiz+0x3a>
   83c98:	f04f 30ff 	mov.w	r0, #4294967295
   83c9c:	4770      	bx	lr
   83c9e:	f04f 0000 	mov.w	r0, #0
   83ca2:	4770      	bx	lr

00083ca4 <atexit>:
   83ca4:	4601      	mov	r1, r0
   83ca6:	2000      	movs	r0, #0
   83ca8:	4602      	mov	r2, r0
   83caa:	4603      	mov	r3, r0
   83cac:	f001 ba3c 	b.w	85128 <__register_exitproc>

00083cb0 <__libc_fini_array>:
   83cb0:	b570      	push	{r4, r5, r6, lr}
   83cb2:	4b08      	ldr	r3, [pc, #32]	; (83cd4 <__libc_fini_array+0x24>)
   83cb4:	4c08      	ldr	r4, [pc, #32]	; (83cd8 <__libc_fini_array+0x28>)
   83cb6:	2500      	movs	r5, #0
   83cb8:	1ae0      	subs	r0, r4, r3
   83cba:	1084      	asrs	r4, r0, #2
   83cbc:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   83cc0:	3d04      	subs	r5, #4
   83cc2:	b11c      	cbz	r4, 83ccc <__libc_fini_array+0x1c>
   83cc4:	5972      	ldr	r2, [r6, r5]
   83cc6:	4790      	blx	r2
   83cc8:	3c01      	subs	r4, #1
   83cca:	e7f9      	b.n	83cc0 <__libc_fini_array+0x10>
   83ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   83cd0:	f003 bd28 	b.w	87724 <_fini>
   83cd4:	00087730 	.word	0x00087730
   83cd8:	00087734 	.word	0x00087734

00083cdc <__libc_init_array>:
   83cdc:	b538      	push	{r3, r4, r5, lr}
   83cde:	4d0e      	ldr	r5, [pc, #56]	; (83d18 <__libc_init_array+0x3c>)
   83ce0:	4b0e      	ldr	r3, [pc, #56]	; (83d1c <__libc_init_array+0x40>)
   83ce2:	2400      	movs	r4, #0
   83ce4:	1ae8      	subs	r0, r5, r3
   83ce6:	1085      	asrs	r5, r0, #2
   83ce8:	42ac      	cmp	r4, r5
   83cea:	d005      	beq.n	83cf8 <__libc_init_array+0x1c>
   83cec:	490b      	ldr	r1, [pc, #44]	; (83d1c <__libc_init_array+0x40>)
   83cee:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   83cf2:	4790      	blx	r2
   83cf4:	3401      	adds	r4, #1
   83cf6:	e7f7      	b.n	83ce8 <__libc_init_array+0xc>
   83cf8:	f003 fd0a 	bl	87710 <_init>
   83cfc:	4908      	ldr	r1, [pc, #32]	; (83d20 <__libc_init_array+0x44>)
   83cfe:	4a09      	ldr	r2, [pc, #36]	; (83d24 <__libc_init_array+0x48>)
   83d00:	1a54      	subs	r4, r2, r1
   83d02:	10a5      	asrs	r5, r4, #2
   83d04:	2400      	movs	r4, #0
   83d06:	42ac      	cmp	r4, r5
   83d08:	d005      	beq.n	83d16 <__libc_init_array+0x3a>
   83d0a:	4b05      	ldr	r3, [pc, #20]	; (83d20 <__libc_init_array+0x44>)
   83d0c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   83d10:	4780      	blx	r0
   83d12:	3401      	adds	r4, #1
   83d14:	e7f7      	b.n	83d06 <__libc_init_array+0x2a>
   83d16:	bd38      	pop	{r3, r4, r5, pc}
   83d18:	0008771c 	.word	0x0008771c
   83d1c:	0008771c 	.word	0x0008771c
   83d20:	0008771c 	.word	0x0008771c
   83d24:	00087724 	.word	0x00087724

00083d28 <iprintf>:
   83d28:	b40f      	push	{r0, r1, r2, r3}
   83d2a:	b507      	push	{r0, r1, r2, lr}
   83d2c:	4906      	ldr	r1, [pc, #24]	; (83d48 <iprintf+0x20>)
   83d2e:	ab04      	add	r3, sp, #16
   83d30:	6808      	ldr	r0, [r1, #0]
   83d32:	f853 2b04 	ldr.w	r2, [r3], #4
   83d36:	6881      	ldr	r1, [r0, #8]
   83d38:	9301      	str	r3, [sp, #4]
   83d3a:	f000 fd37 	bl	847ac <_vfiprintf_r>
   83d3e:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   83d42:	b004      	add	sp, #16
   83d44:	4770      	bx	lr
   83d46:	bf00      	nop
   83d48:	20070040 	.word	0x20070040

00083d4c <_iprintf_r>:
   83d4c:	b40e      	push	{r1, r2, r3}
   83d4e:	b503      	push	{r0, r1, lr}
   83d50:	ab03      	add	r3, sp, #12
   83d52:	f853 2b04 	ldr.w	r2, [r3], #4
   83d56:	6881      	ldr	r1, [r0, #8]
   83d58:	9301      	str	r3, [sp, #4]
   83d5a:	f000 fd27 	bl	847ac <_vfiprintf_r>
   83d5e:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   83d62:	b003      	add	sp, #12
   83d64:	4770      	bx	lr
   83d66:	bf00      	nop

00083d68 <memcpy>:
   83d68:	b510      	push	{r4, lr}
   83d6a:	2300      	movs	r3, #0
   83d6c:	4293      	cmp	r3, r2
   83d6e:	d003      	beq.n	83d78 <memcpy+0x10>
   83d70:	5ccc      	ldrb	r4, [r1, r3]
   83d72:	54c4      	strb	r4, [r0, r3]
   83d74:	3301      	adds	r3, #1
   83d76:	e7f9      	b.n	83d6c <memcpy+0x4>
   83d78:	bd10      	pop	{r4, pc}

00083d7a <memset>:
   83d7a:	1882      	adds	r2, r0, r2
   83d7c:	4603      	mov	r3, r0
   83d7e:	4293      	cmp	r3, r2
   83d80:	d002      	beq.n	83d88 <memset+0xe>
   83d82:	f803 1b01 	strb.w	r1, [r3], #1
   83d86:	e7fa      	b.n	83d7e <memset+0x4>
   83d88:	4770      	bx	lr

00083d8a <setbuf>:
   83d8a:	2900      	cmp	r1, #0
   83d8c:	bf0c      	ite	eq
   83d8e:	2202      	moveq	r2, #2
   83d90:	2200      	movne	r2, #0
   83d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83d96:	f000 b801 	b.w	83d9c <setvbuf>
	...

00083d9c <setvbuf>:
   83d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83da0:	461d      	mov	r5, r3
   83da2:	4b37      	ldr	r3, [pc, #220]	; (83e80 <setvbuf+0xe4>)
   83da4:	4604      	mov	r4, r0
   83da6:	6818      	ldr	r0, [r3, #0]
   83da8:	460e      	mov	r6, r1
   83daa:	4617      	mov	r7, r2
   83dac:	4698      	mov	r8, r3
   83dae:	b118      	cbz	r0, 83db8 <setvbuf+0x1c>
   83db0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   83db2:	b90a      	cbnz	r2, 83db8 <setvbuf+0x1c>
   83db4:	f001 fb02 	bl	853bc <__sinit>
   83db8:	2f02      	cmp	r7, #2
   83dba:	d85d      	bhi.n	83e78 <setvbuf+0xdc>
   83dbc:	2d00      	cmp	r5, #0
   83dbe:	db5b      	blt.n	83e78 <setvbuf+0xdc>
   83dc0:	4621      	mov	r1, r4
   83dc2:	f8d8 0000 	ldr.w	r0, [r8]
   83dc6:	f001 fa07 	bl	851d8 <_fflush_r>
   83dca:	89a1      	ldrh	r1, [r4, #12]
   83dcc:	2000      	movs	r0, #0
   83dce:	f001 0380 	and.w	r3, r1, #128	; 0x80
   83dd2:	b21a      	sxth	r2, r3
   83dd4:	6060      	str	r0, [r4, #4]
   83dd6:	61a0      	str	r0, [r4, #24]
   83dd8:	b122      	cbz	r2, 83de4 <setvbuf+0x48>
   83dda:	4829      	ldr	r0, [pc, #164]	; (83e80 <setvbuf+0xe4>)
   83ddc:	6921      	ldr	r1, [r4, #16]
   83dde:	6800      	ldr	r0, [r0, #0]
   83de0:	f001 fc2a 	bl	85638 <_free_r>
   83de4:	89a1      	ldrh	r1, [r4, #12]
   83de6:	2f02      	cmp	r7, #2
   83de8:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   83dec:	81a3      	strh	r3, [r4, #12]
   83dee:	d012      	beq.n	83e16 <setvbuf+0x7a>
   83df0:	bb36      	cbnz	r6, 83e40 <setvbuf+0xa4>
   83df2:	2d00      	cmp	r5, #0
   83df4:	bf08      	it	eq
   83df6:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   83dfa:	4628      	mov	r0, r5
   83dfc:	f001 ff20 	bl	85c40 <malloc>
   83e00:	4606      	mov	r6, r0
   83e02:	b9c8      	cbnz	r0, 83e38 <setvbuf+0x9c>
   83e04:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83e08:	f001 ff1a 	bl	85c40 <malloc>
   83e0c:	4606      	mov	r6, r0
   83e0e:	b988      	cbnz	r0, 83e34 <setvbuf+0x98>
   83e10:	f04f 30ff 	mov.w	r0, #4294967295
   83e14:	e000      	b.n	83e18 <setvbuf+0x7c>
   83e16:	2000      	movs	r0, #0
   83e18:	89a1      	ldrh	r1, [r4, #12]
   83e1a:	2200      	movs	r2, #0
   83e1c:	f041 0302 	orr.w	r3, r1, #2
   83e20:	81a3      	strh	r3, [r4, #12]
   83e22:	f104 0143 	add.w	r1, r4, #67	; 0x43
   83e26:	2301      	movs	r3, #1
   83e28:	60a2      	str	r2, [r4, #8]
   83e2a:	6021      	str	r1, [r4, #0]
   83e2c:	6121      	str	r1, [r4, #16]
   83e2e:	6163      	str	r3, [r4, #20]
   83e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e34:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83e38:	89a2      	ldrh	r2, [r4, #12]
   83e3a:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   83e3e:	81a0      	strh	r0, [r4, #12]
   83e40:	2f01      	cmp	r7, #1
   83e42:	d105      	bne.n	83e50 <setvbuf+0xb4>
   83e44:	89a1      	ldrh	r1, [r4, #12]
   83e46:	426a      	negs	r2, r5
   83e48:	f041 0301 	orr.w	r3, r1, #1
   83e4c:	81a3      	strh	r3, [r4, #12]
   83e4e:	61a2      	str	r2, [r4, #24]
   83e50:	480b      	ldr	r0, [pc, #44]	; (83e80 <setvbuf+0xe4>)
   83e52:	89a2      	ldrh	r2, [r4, #12]
   83e54:	6801      	ldr	r1, [r0, #0]
   83e56:	4b0b      	ldr	r3, [pc, #44]	; (83e84 <setvbuf+0xe8>)
   83e58:	f002 0008 	and.w	r0, r2, #8
   83e5c:	b200      	sxth	r0, r0
   83e5e:	63cb      	str	r3, [r1, #60]	; 0x3c
   83e60:	6026      	str	r6, [r4, #0]
   83e62:	6126      	str	r6, [r4, #16]
   83e64:	6165      	str	r5, [r4, #20]
   83e66:	b148      	cbz	r0, 83e7c <setvbuf+0xe0>
   83e68:	f012 0f03 	tst.w	r2, #3
   83e6c:	bf18      	it	ne
   83e6e:	2500      	movne	r5, #0
   83e70:	60a5      	str	r5, [r4, #8]
   83e72:	2000      	movs	r0, #0
   83e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e78:	f04f 30ff 	mov.w	r0, #4294967295
   83e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e80:	20070040 	.word	0x20070040
   83e84:	00085331 	.word	0x00085331

00083e88 <_sprintf_r>:
   83e88:	b40c      	push	{r2, r3}
   83e8a:	b510      	push	{r4, lr}
   83e8c:	b09c      	sub	sp, #112	; 0x70
   83e8e:	ab1e      	add	r3, sp, #120	; 0x78
   83e90:	9102      	str	r1, [sp, #8]
   83e92:	9106      	str	r1, [sp, #24]
   83e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   83e98:	f853 2b04 	ldr.w	r2, [r3], #4
   83e9c:	9104      	str	r1, [sp, #16]
   83e9e:	9107      	str	r1, [sp, #28]
   83ea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83ea4:	f8ad 1016 	strh.w	r1, [sp, #22]
   83ea8:	f44f 7402 	mov.w	r4, #520	; 0x208
   83eac:	a902      	add	r1, sp, #8
   83eae:	9301      	str	r3, [sp, #4]
   83eb0:	f8ad 4014 	strh.w	r4, [sp, #20]
   83eb4:	f000 f84a 	bl	83f4c <_svfprintf_r>
   83eb8:	9b02      	ldr	r3, [sp, #8]
   83eba:	2200      	movs	r2, #0
   83ebc:	701a      	strb	r2, [r3, #0]
   83ebe:	b01c      	add	sp, #112	; 0x70
   83ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83ec4:	b002      	add	sp, #8
   83ec6:	4770      	bx	lr

00083ec8 <sprintf>:
   83ec8:	b40e      	push	{r1, r2, r3}
   83eca:	b500      	push	{lr}
   83ecc:	b09c      	sub	sp, #112	; 0x70
   83ece:	9002      	str	r0, [sp, #8]
   83ed0:	9006      	str	r0, [sp, #24]
   83ed2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   83ed6:	ab1d      	add	r3, sp, #116	; 0x74
   83ed8:	9004      	str	r0, [sp, #16]
   83eda:	9007      	str	r0, [sp, #28]
   83edc:	f44f 7102 	mov.w	r1, #520	; 0x208
   83ee0:	480a      	ldr	r0, [pc, #40]	; (83f0c <sprintf+0x44>)
   83ee2:	f853 2b04 	ldr.w	r2, [r3], #4
   83ee6:	f8ad 1014 	strh.w	r1, [sp, #20]
   83eea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83eee:	f8ad 1016 	strh.w	r1, [sp, #22]
   83ef2:	6800      	ldr	r0, [r0, #0]
   83ef4:	a902      	add	r1, sp, #8
   83ef6:	9301      	str	r3, [sp, #4]
   83ef8:	f000 f828 	bl	83f4c <_svfprintf_r>
   83efc:	9b02      	ldr	r3, [sp, #8]
   83efe:	2200      	movs	r2, #0
   83f00:	701a      	strb	r2, [r3, #0]
   83f02:	b01c      	add	sp, #112	; 0x70
   83f04:	f85d eb04 	ldr.w	lr, [sp], #4
   83f08:	b003      	add	sp, #12
   83f0a:	4770      	bx	lr
   83f0c:	20070040 	.word	0x20070040

00083f10 <strlen>:
   83f10:	4603      	mov	r3, r0
   83f12:	f813 2b01 	ldrb.w	r2, [r3], #1
   83f16:	2a00      	cmp	r2, #0
   83f18:	d1fb      	bne.n	83f12 <strlen+0x2>
   83f1a:	1a18      	subs	r0, r3, r0
   83f1c:	3801      	subs	r0, #1
   83f1e:	4770      	bx	lr

00083f20 <strncpy>:
   83f20:	b530      	push	{r4, r5, lr}
   83f22:	3901      	subs	r1, #1
   83f24:	4603      	mov	r3, r0
   83f26:	461c      	mov	r4, r3
   83f28:	b13a      	cbz	r2, 83f3a <strncpy+0x1a>
   83f2a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   83f2e:	3a01      	subs	r2, #1
   83f30:	f803 5b01 	strb.w	r5, [r3], #1
   83f34:	461c      	mov	r4, r3
   83f36:	2d00      	cmp	r5, #0
   83f38:	d1f5      	bne.n	83f26 <strncpy+0x6>
   83f3a:	1899      	adds	r1, r3, r2
   83f3c:	428c      	cmp	r4, r1
   83f3e:	d003      	beq.n	83f48 <strncpy+0x28>
   83f40:	2200      	movs	r2, #0
   83f42:	f804 2b01 	strb.w	r2, [r4], #1
   83f46:	e7f9      	b.n	83f3c <strncpy+0x1c>
   83f48:	bd30      	pop	{r4, r5, pc}
	...

00083f4c <_svfprintf_r>:
   83f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83f50:	461e      	mov	r6, r3
   83f52:	898b      	ldrh	r3, [r1, #12]
   83f54:	4689      	mov	r9, r1
   83f56:	f003 0180 	and.w	r1, r3, #128	; 0x80
   83f5a:	4614      	mov	r4, r2
   83f5c:	b20a      	sxth	r2, r1
   83f5e:	b0a9      	sub	sp, #164	; 0xa4
   83f60:	4683      	mov	fp, r0
   83f62:	b19a      	cbz	r2, 83f8c <_svfprintf_r+0x40>
   83f64:	f8d9 3010 	ldr.w	r3, [r9, #16]
   83f68:	b983      	cbnz	r3, 83f8c <_svfprintf_r+0x40>
   83f6a:	2140      	movs	r1, #64	; 0x40
   83f6c:	f001 fe78 	bl	85c60 <_malloc_r>
   83f70:	f8c9 0000 	str.w	r0, [r9]
   83f74:	f8c9 0010 	str.w	r0, [r9, #16]
   83f78:	b928      	cbnz	r0, 83f86 <_svfprintf_r+0x3a>
   83f7a:	220c      	movs	r2, #12
   83f7c:	f8cb 2000 	str.w	r2, [fp]
   83f80:	f04f 30ff 	mov.w	r0, #4294967295
   83f84:	e3da      	b.n	8473c <_svfprintf_r+0x7f0>
   83f86:	2040      	movs	r0, #64	; 0x40
   83f88:	f8c9 0014 	str.w	r0, [r9, #20]
   83f8c:	2100      	movs	r1, #0
   83f8e:	ad18      	add	r5, sp, #96	; 0x60
   83f90:	950b      	str	r5, [sp, #44]	; 0x2c
   83f92:	910d      	str	r1, [sp, #52]	; 0x34
   83f94:	910c      	str	r1, [sp, #48]	; 0x30
   83f96:	9401      	str	r4, [sp, #4]
   83f98:	9105      	str	r1, [sp, #20]
   83f9a:	9104      	str	r1, [sp, #16]
   83f9c:	46a8      	mov	r8, r5
   83f9e:	9b01      	ldr	r3, [sp, #4]
   83fa0:	461c      	mov	r4, r3
   83fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
   83fa6:	b91a      	cbnz	r2, 83fb0 <_svfprintf_r+0x64>
   83fa8:	9801      	ldr	r0, [sp, #4]
   83faa:	1a25      	subs	r5, r4, r0
   83fac:	d103      	bne.n	83fb6 <_svfprintf_r+0x6a>
   83fae:	e01d      	b.n	83fec <_svfprintf_r+0xa0>
   83fb0:	2a25      	cmp	r2, #37	; 0x25
   83fb2:	d1f5      	bne.n	83fa0 <_svfprintf_r+0x54>
   83fb4:	e7f8      	b.n	83fa8 <_svfprintf_r+0x5c>
   83fb6:	9a01      	ldr	r2, [sp, #4]
   83fb8:	990d      	ldr	r1, [sp, #52]	; 0x34
   83fba:	e888 0024 	stmia.w	r8, {r2, r5}
   83fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83fc0:	194b      	adds	r3, r1, r5
   83fc2:	1c50      	adds	r0, r2, #1
   83fc4:	2807      	cmp	r0, #7
   83fc6:	930d      	str	r3, [sp, #52]	; 0x34
   83fc8:	900c      	str	r0, [sp, #48]	; 0x30
   83fca:	dc02      	bgt.n	83fd2 <_svfprintf_r+0x86>
   83fcc:	f108 0808 	add.w	r8, r8, #8
   83fd0:	e009      	b.n	83fe6 <_svfprintf_r+0x9a>
   83fd2:	4658      	mov	r0, fp
   83fd4:	4649      	mov	r1, r9
   83fd6:	aa0b      	add	r2, sp, #44	; 0x2c
   83fd8:	f002 fa3e 	bl	86458 <__ssprint_r>
   83fdc:	2800      	cmp	r0, #0
   83fde:	f040 83a2 	bne.w	84726 <_svfprintf_r+0x7da>
   83fe2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83fe6:	9904      	ldr	r1, [sp, #16]
   83fe8:	194b      	adds	r3, r1, r5
   83fea:	9304      	str	r3, [sp, #16]
   83fec:	7822      	ldrb	r2, [r4, #0]
   83fee:	2a00      	cmp	r2, #0
   83ff0:	f000 8392 	beq.w	84718 <_svfprintf_r+0x7cc>
   83ff4:	2200      	movs	r2, #0
   83ff6:	3401      	adds	r4, #1
   83ff8:	9401      	str	r4, [sp, #4]
   83ffa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83ffe:	f04f 3cff 	mov.w	ip, #4294967295
   84002:	9203      	str	r2, [sp, #12]
   84004:	4617      	mov	r7, r2
   84006:	9801      	ldr	r0, [sp, #4]
   84008:	f810 3b01 	ldrb.w	r3, [r0], #1
   8400c:	9001      	str	r0, [sp, #4]
   8400e:	2b63      	cmp	r3, #99	; 0x63
   84010:	f000 80b3 	beq.w	8417a <_svfprintf_r+0x22e>
   84014:	dc33      	bgt.n	8407e <_svfprintf_r+0x132>
   84016:	2b39      	cmp	r3, #57	; 0x39
   84018:	dc1a      	bgt.n	84050 <_svfprintf_r+0x104>
   8401a:	2b31      	cmp	r3, #49	; 0x31
   8401c:	f280 8091 	bge.w	84142 <_svfprintf_r+0x1f6>
   84020:	2b2b      	cmp	r3, #43	; 0x2b
   84022:	d101      	bne.n	84028 <_svfprintf_r+0xdc>
   84024:	461a      	mov	r2, r3
   84026:	e7ee      	b.n	84006 <_svfprintf_r+0xba>
   84028:	dc0a      	bgt.n	84040 <_svfprintf_r+0xf4>
   8402a:	2b23      	cmp	r3, #35	; 0x23
   8402c:	d055      	beq.n	840da <_svfprintf_r+0x18e>
   8402e:	2b2a      	cmp	r3, #42	; 0x2a
   84030:	d056      	beq.n	840e0 <_svfprintf_r+0x194>
   84032:	2b20      	cmp	r3, #32
   84034:	f040 81f5 	bne.w	84422 <_svfprintf_r+0x4d6>
   84038:	2a00      	cmp	r2, #0
   8403a:	bf08      	it	eq
   8403c:	2220      	moveq	r2, #32
   8403e:	e7e2      	b.n	84006 <_svfprintf_r+0xba>
   84040:	2b2e      	cmp	r3, #46	; 0x2e
   84042:	d058      	beq.n	840f6 <_svfprintf_r+0x1aa>
   84044:	2b30      	cmp	r3, #48	; 0x30
   84046:	d079      	beq.n	8413c <_svfprintf_r+0x1f0>
   84048:	2b2d      	cmp	r3, #45	; 0x2d
   8404a:	f040 81ea 	bne.w	84422 <_svfprintf_r+0x4d6>
   8404e:	e04f      	b.n	840f0 <_svfprintf_r+0x1a4>
   84050:	2b4f      	cmp	r3, #79	; 0x4f
   84052:	f000 80de 	beq.w	84212 <_svfprintf_r+0x2c6>
   84056:	dc07      	bgt.n	84068 <_svfprintf_r+0x11c>
   84058:	2b44      	cmp	r3, #68	; 0x44
   8405a:	f040 81e2 	bne.w	84422 <_svfprintf_r+0x4d6>
   8405e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84062:	f047 0710 	orr.w	r7, r7, #16
   84066:	e090      	b.n	8418a <_svfprintf_r+0x23e>
   84068:	2b55      	cmp	r3, #85	; 0x55
   8406a:	f000 811f 	beq.w	842ac <_svfprintf_r+0x360>
   8406e:	2b58      	cmp	r3, #88	; 0x58
   84070:	f040 81d7 	bne.w	84422 <_svfprintf_r+0x4d6>
   84074:	4dae      	ldr	r5, [pc, #696]	; (84330 <_svfprintf_r+0x3e4>)
   84076:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8407a:	9505      	str	r5, [sp, #20]
   8407c:	e130      	b.n	842e0 <_svfprintf_r+0x394>
   8407e:	2b6f      	cmp	r3, #111	; 0x6f
   84080:	f000 80c9 	beq.w	84216 <_svfprintf_r+0x2ca>
   84084:	dc10      	bgt.n	840a8 <_svfprintf_r+0x15c>
   84086:	2b69      	cmp	r3, #105	; 0x69
   84088:	d024      	beq.n	840d4 <_svfprintf_r+0x188>
   8408a:	dc07      	bgt.n	8409c <_svfprintf_r+0x150>
   8408c:	2b64      	cmp	r3, #100	; 0x64
   8408e:	d021      	beq.n	840d4 <_svfprintf_r+0x188>
   84090:	2b68      	cmp	r3, #104	; 0x68
   84092:	f040 81c6 	bne.w	84422 <_svfprintf_r+0x4d6>
   84096:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8409a:	e7b4      	b.n	84006 <_svfprintf_r+0xba>
   8409c:	2b6c      	cmp	r3, #108	; 0x6c
   8409e:	d05f      	beq.n	84160 <_svfprintf_r+0x214>
   840a0:	2b6e      	cmp	r3, #110	; 0x6e
   840a2:	f040 81be 	bne.w	84422 <_svfprintf_r+0x4d6>
   840a6:	e096      	b.n	841d6 <_svfprintf_r+0x28a>
   840a8:	2b73      	cmp	r3, #115	; 0x73
   840aa:	f000 80df 	beq.w	8426c <_svfprintf_r+0x320>
   840ae:	dc06      	bgt.n	840be <_svfprintf_r+0x172>
   840b0:	2b70      	cmp	r3, #112	; 0x70
   840b2:	f000 80cd 	beq.w	84250 <_svfprintf_r+0x304>
   840b6:	2b71      	cmp	r3, #113	; 0x71
   840b8:	f040 81b3 	bne.w	84422 <_svfprintf_r+0x4d6>
   840bc:	e05a      	b.n	84174 <_svfprintf_r+0x228>
   840be:	2b75      	cmp	r3, #117	; 0x75
   840c0:	f000 80f6 	beq.w	842b0 <_svfprintf_r+0x364>
   840c4:	2b78      	cmp	r3, #120	; 0x78
   840c6:	f040 81ac 	bne.w	84422 <_svfprintf_r+0x4d6>
   840ca:	4d9a      	ldr	r5, [pc, #616]	; (84334 <_svfprintf_r+0x3e8>)
   840cc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   840d0:	9505      	str	r5, [sp, #20]
   840d2:	e105      	b.n	842e0 <_svfprintf_r+0x394>
   840d4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   840d8:	e057      	b.n	8418a <_svfprintf_r+0x23e>
   840da:	f047 0701 	orr.w	r7, r7, #1
   840de:	e792      	b.n	84006 <_svfprintf_r+0xba>
   840e0:	1d33      	adds	r3, r6, #4
   840e2:	6836      	ldr	r6, [r6, #0]
   840e4:	2e00      	cmp	r6, #0
   840e6:	9603      	str	r6, [sp, #12]
   840e8:	da15      	bge.n	84116 <_svfprintf_r+0x1ca>
   840ea:	4270      	negs	r0, r6
   840ec:	9003      	str	r0, [sp, #12]
   840ee:	461e      	mov	r6, r3
   840f0:	f047 0704 	orr.w	r7, r7, #4
   840f4:	e787      	b.n	84006 <_svfprintf_r+0xba>
   840f6:	9901      	ldr	r1, [sp, #4]
   840f8:	f811 3b01 	ldrb.w	r3, [r1], #1
   840fc:	2b2a      	cmp	r3, #42	; 0x2a
   840fe:	9101      	str	r1, [sp, #4]
   84100:	d10b      	bne.n	8411a <_svfprintf_r+0x1ce>
   84102:	f8d6 c000 	ldr.w	ip, [r6]
   84106:	1d33      	adds	r3, r6, #4
   84108:	f1bc 0f00 	cmp.w	ip, #0
   8410c:	da03      	bge.n	84116 <_svfprintf_r+0x1ca>
   8410e:	461e      	mov	r6, r3
   84110:	f04f 3cff 	mov.w	ip, #4294967295
   84114:	e777      	b.n	84006 <_svfprintf_r+0xba>
   84116:	461e      	mov	r6, r3
   84118:	e775      	b.n	84006 <_svfprintf_r+0xba>
   8411a:	f04f 0c00 	mov.w	ip, #0
   8411e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84122:	2809      	cmp	r0, #9
   84124:	d807      	bhi.n	84136 <_svfprintf_r+0x1ea>
   84126:	9901      	ldr	r1, [sp, #4]
   84128:	230a      	movs	r3, #10
   8412a:	fb03 0c0c 	mla	ip, r3, ip, r0
   8412e:	f811 3b01 	ldrb.w	r3, [r1], #1
   84132:	9101      	str	r1, [sp, #4]
   84134:	e7f3      	b.n	8411e <_svfprintf_r+0x1d2>
   84136:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8413a:	e768      	b.n	8400e <_svfprintf_r+0xc2>
   8413c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   84140:	e761      	b.n	84006 <_svfprintf_r+0xba>
   84142:	9801      	ldr	r0, [sp, #4]
   84144:	2100      	movs	r1, #0
   84146:	3b30      	subs	r3, #48	; 0x30
   84148:	240a      	movs	r4, #10
   8414a:	fb04 3101 	mla	r1, r4, r1, r3
   8414e:	f810 3b01 	ldrb.w	r3, [r0], #1
   84152:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   84156:	2c09      	cmp	r4, #9
   84158:	9001      	str	r0, [sp, #4]
   8415a:	d9f4      	bls.n	84146 <_svfprintf_r+0x1fa>
   8415c:	9103      	str	r1, [sp, #12]
   8415e:	e756      	b.n	8400e <_svfprintf_r+0xc2>
   84160:	9901      	ldr	r1, [sp, #4]
   84162:	780b      	ldrb	r3, [r1, #0]
   84164:	2b6c      	cmp	r3, #108	; 0x6c
   84166:	d102      	bne.n	8416e <_svfprintf_r+0x222>
   84168:	1c48      	adds	r0, r1, #1
   8416a:	9001      	str	r0, [sp, #4]
   8416c:	e002      	b.n	84174 <_svfprintf_r+0x228>
   8416e:	f047 0710 	orr.w	r7, r7, #16
   84172:	e748      	b.n	84006 <_svfprintf_r+0xba>
   84174:	f047 0720 	orr.w	r7, r7, #32
   84178:	e745      	b.n	84006 <_svfprintf_r+0xba>
   8417a:	6832      	ldr	r2, [r6, #0]
   8417c:	2500      	movs	r5, #0
   8417e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   84182:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84186:	3604      	adds	r6, #4
   84188:	e155      	b.n	84436 <_svfprintf_r+0x4ea>
   8418a:	06ba      	lsls	r2, r7, #26
   8418c:	d507      	bpl.n	8419e <_svfprintf_r+0x252>
   8418e:	3607      	adds	r6, #7
   84190:	f026 0507 	bic.w	r5, r6, #7
   84194:	f105 0608 	add.w	r6, r5, #8
   84198:	e9d5 4500 	ldrd	r4, r5, [r5]
   8419c:	e00f      	b.n	841be <_svfprintf_r+0x272>
   8419e:	f017 0f10 	tst.w	r7, #16
   841a2:	f106 0104 	add.w	r1, r6, #4
   841a6:	d001      	beq.n	841ac <_svfprintf_r+0x260>
   841a8:	6832      	ldr	r2, [r6, #0]
   841aa:	e005      	b.n	841b8 <_svfprintf_r+0x26c>
   841ac:	f017 0f40 	tst.w	r7, #64	; 0x40
   841b0:	6832      	ldr	r2, [r6, #0]
   841b2:	d001      	beq.n	841b8 <_svfprintf_r+0x26c>
   841b4:	b214      	sxth	r4, r2
   841b6:	e000      	b.n	841ba <_svfprintf_r+0x26e>
   841b8:	4614      	mov	r4, r2
   841ba:	17e5      	asrs	r5, r4, #31
   841bc:	460e      	mov	r6, r1
   841be:	2c00      	cmp	r4, #0
   841c0:	f175 0200 	sbcs.w	r2, r5, #0
   841c4:	f280 80b8 	bge.w	84338 <_svfprintf_r+0x3ec>
   841c8:	232d      	movs	r3, #45	; 0x2d
   841ca:	4264      	negs	r4, r4
   841cc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   841d0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   841d4:	e0b0      	b.n	84338 <_svfprintf_r+0x3ec>
   841d6:	f017 0f20 	tst.w	r7, #32
   841da:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   841de:	f106 0204 	add.w	r2, r6, #4
   841e2:	d005      	beq.n	841f0 <_svfprintf_r+0x2a4>
   841e4:	9c04      	ldr	r4, [sp, #16]
   841e6:	6835      	ldr	r5, [r6, #0]
   841e8:	17e0      	asrs	r0, r4, #31
   841ea:	602c      	str	r4, [r5, #0]
   841ec:	6068      	str	r0, [r5, #4]
   841ee:	e004      	b.n	841fa <_svfprintf_r+0x2ae>
   841f0:	06fb      	lsls	r3, r7, #27
   841f2:	d504      	bpl.n	841fe <_svfprintf_r+0x2b2>
   841f4:	6833      	ldr	r3, [r6, #0]
   841f6:	9904      	ldr	r1, [sp, #16]
   841f8:	6019      	str	r1, [r3, #0]
   841fa:	4616      	mov	r6, r2
   841fc:	e6cf      	b.n	83f9e <_svfprintf_r+0x52>
   841fe:	6830      	ldr	r0, [r6, #0]
   84200:	9c04      	ldr	r4, [sp, #16]
   84202:	f017 0f40 	tst.w	r7, #64	; 0x40
   84206:	f106 0604 	add.w	r6, r6, #4
   8420a:	bf14      	ite	ne
   8420c:	8004      	strhne	r4, [r0, #0]
   8420e:	6004      	streq	r4, [r0, #0]
   84210:	e6c5      	b.n	83f9e <_svfprintf_r+0x52>
   84212:	f047 0710 	orr.w	r7, r7, #16
   84216:	f017 0020 	ands.w	r0, r7, #32
   8421a:	d008      	beq.n	8422e <_svfprintf_r+0x2e2>
   8421c:	1df3      	adds	r3, r6, #7
   8421e:	f023 0507 	bic.w	r5, r3, #7
   84222:	f105 0608 	add.w	r6, r5, #8
   84226:	e9d5 4500 	ldrd	r4, r5, [r5]
   8422a:	2000      	movs	r0, #0
   8422c:	e07c      	b.n	84328 <_svfprintf_r+0x3dc>
   8422e:	f017 0110 	ands.w	r1, r7, #16
   84232:	f106 0204 	add.w	r2, r6, #4
   84236:	d106      	bne.n	84246 <_svfprintf_r+0x2fa>
   84238:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8423c:	d003      	beq.n	84246 <_svfprintf_r+0x2fa>
   8423e:	8834      	ldrh	r4, [r6, #0]
   84240:	2500      	movs	r5, #0
   84242:	4616      	mov	r6, r2
   84244:	e7f1      	b.n	8422a <_svfprintf_r+0x2de>
   84246:	6836      	ldr	r6, [r6, #0]
   84248:	2500      	movs	r5, #0
   8424a:	4634      	mov	r4, r6
   8424c:	4616      	mov	r6, r2
   8424e:	e06b      	b.n	84328 <_svfprintf_r+0x3dc>
   84250:	4b38      	ldr	r3, [pc, #224]	; (84334 <_svfprintf_r+0x3e8>)
   84252:	2130      	movs	r1, #48	; 0x30
   84254:	2278      	movs	r2, #120	; 0x78
   84256:	6834      	ldr	r4, [r6, #0]
   84258:	2500      	movs	r5, #0
   8425a:	f047 0702 	orr.w	r7, r7, #2
   8425e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   84262:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   84266:	3604      	adds	r6, #4
   84268:	9305      	str	r3, [sp, #20]
   8426a:	e05c      	b.n	84326 <_svfprintf_r+0x3da>
   8426c:	4631      	mov	r1, r6
   8426e:	2500      	movs	r5, #0
   84270:	f8d1 a000 	ldr.w	sl, [r1]
   84274:	3604      	adds	r6, #4
   84276:	45ac      	cmp	ip, r5
   84278:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8427c:	4650      	mov	r0, sl
   8427e:	db11      	blt.n	842a4 <_svfprintf_r+0x358>
   84280:	4662      	mov	r2, ip
   84282:	4629      	mov	r1, r5
   84284:	f8cd c000 	str.w	ip, [sp]
   84288:	f001 feec 	bl	86064 <memchr>
   8428c:	f8dd c000 	ldr.w	ip, [sp]
   84290:	2800      	cmp	r0, #0
   84292:	f000 80d4 	beq.w	8443e <_svfprintf_r+0x4f2>
   84296:	ebca 0400 	rsb	r4, sl, r0
   8429a:	4564      	cmp	r4, ip
   8429c:	f340 80d1 	ble.w	84442 <_svfprintf_r+0x4f6>
   842a0:	4664      	mov	r4, ip
   842a2:	e0ce      	b.n	84442 <_svfprintf_r+0x4f6>
   842a4:	f7ff fe34 	bl	83f10 <strlen>
   842a8:	4604      	mov	r4, r0
   842aa:	e0ca      	b.n	84442 <_svfprintf_r+0x4f6>
   842ac:	f047 0710 	orr.w	r7, r7, #16
   842b0:	06bd      	lsls	r5, r7, #26
   842b2:	d506      	bpl.n	842c2 <_svfprintf_r+0x376>
   842b4:	1df0      	adds	r0, r6, #7
   842b6:	f020 0407 	bic.w	r4, r0, #7
   842ba:	f104 0608 	add.w	r6, r4, #8
   842be:	cc30      	ldmia	r4, {r4, r5}
   842c0:	e00c      	b.n	842dc <_svfprintf_r+0x390>
   842c2:	f017 0f10 	tst.w	r7, #16
   842c6:	f106 0304 	add.w	r3, r6, #4
   842ca:	d103      	bne.n	842d4 <_svfprintf_r+0x388>
   842cc:	067c      	lsls	r4, r7, #25
   842ce:	d501      	bpl.n	842d4 <_svfprintf_r+0x388>
   842d0:	8834      	ldrh	r4, [r6, #0]
   842d2:	e001      	b.n	842d8 <_svfprintf_r+0x38c>
   842d4:	6835      	ldr	r5, [r6, #0]
   842d6:	462c      	mov	r4, r5
   842d8:	2500      	movs	r5, #0
   842da:	461e      	mov	r6, r3
   842dc:	2001      	movs	r0, #1
   842de:	e023      	b.n	84328 <_svfprintf_r+0x3dc>
   842e0:	06b8      	lsls	r0, r7, #26
   842e2:	d507      	bpl.n	842f4 <_svfprintf_r+0x3a8>
   842e4:	1df4      	adds	r4, r6, #7
   842e6:	f024 0107 	bic.w	r1, r4, #7
   842ea:	f101 0608 	add.w	r6, r1, #8
   842ee:	e9d1 4500 	ldrd	r4, r5, [r1]
   842f2:	e00c      	b.n	8430e <_svfprintf_r+0x3c2>
   842f4:	f017 0f10 	tst.w	r7, #16
   842f8:	f106 0004 	add.w	r0, r6, #4
   842fc:	d103      	bne.n	84306 <_svfprintf_r+0x3ba>
   842fe:	0679      	lsls	r1, r7, #25
   84300:	d501      	bpl.n	84306 <_svfprintf_r+0x3ba>
   84302:	8834      	ldrh	r4, [r6, #0]
   84304:	e001      	b.n	8430a <_svfprintf_r+0x3be>
   84306:	6836      	ldr	r6, [r6, #0]
   84308:	4634      	mov	r4, r6
   8430a:	2500      	movs	r5, #0
   8430c:	4606      	mov	r6, r0
   8430e:	07fa      	lsls	r2, r7, #31
   84310:	d509      	bpl.n	84326 <_svfprintf_r+0x3da>
   84312:	ea54 0205 	orrs.w	r2, r4, r5
   84316:	d006      	beq.n	84326 <_svfprintf_r+0x3da>
   84318:	2230      	movs	r2, #48	; 0x30
   8431a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8431e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   84322:	f047 0702 	orr.w	r7, r7, #2
   84326:	2002      	movs	r0, #2
   84328:	2100      	movs	r1, #0
   8432a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8432e:	e004      	b.n	8433a <_svfprintf_r+0x3ee>
   84330:	000876a6 	.word	0x000876a6
   84334:	000876b7 	.word	0x000876b7
   84338:	2001      	movs	r0, #1
   8433a:	f1bc 0f00 	cmp.w	ip, #0
   8433e:	bfa8      	it	ge
   84340:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   84344:	ea54 0105 	orrs.w	r1, r4, r5
   84348:	d102      	bne.n	84350 <_svfprintf_r+0x404>
   8434a:	f1bc 0f00 	cmp.w	ip, #0
   8434e:	d058      	beq.n	84402 <_svfprintf_r+0x4b6>
   84350:	2801      	cmp	r0, #1
   84352:	d01d      	beq.n	84390 <_svfprintf_r+0x444>
   84354:	2802      	cmp	r0, #2
   84356:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8435a:	d041      	beq.n	843e0 <_svfprintf_r+0x494>
   8435c:	f004 0207 	and.w	r2, r4, #7
   84360:	08e4      	lsrs	r4, r4, #3
   84362:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   84366:	08e9      	lsrs	r1, r5, #3
   84368:	4604      	mov	r4, r0
   8436a:	460d      	mov	r5, r1
   8436c:	3230      	adds	r2, #48	; 0x30
   8436e:	ea54 0105 	orrs.w	r1, r4, r5
   84372:	469a      	mov	sl, r3
   84374:	701a      	strb	r2, [r3, #0]
   84376:	f103 33ff 	add.w	r3, r3, #4294967295
   8437a:	d1ef      	bne.n	8435c <_svfprintf_r+0x410>
   8437c:	07f8      	lsls	r0, r7, #31
   8437e:	4655      	mov	r5, sl
   84380:	d54a      	bpl.n	84418 <_svfprintf_r+0x4cc>
   84382:	2a30      	cmp	r2, #48	; 0x30
   84384:	d048      	beq.n	84418 <_svfprintf_r+0x4cc>
   84386:	2230      	movs	r2, #48	; 0x30
   84388:	469a      	mov	sl, r3
   8438a:	f805 2c01 	strb.w	r2, [r5, #-1]
   8438e:	e043      	b.n	84418 <_svfprintf_r+0x4cc>
   84390:	2d00      	cmp	r5, #0
   84392:	bf08      	it	eq
   84394:	2c0a      	cmpeq	r4, #10
   84396:	d203      	bcs.n	843a0 <_svfprintf_r+0x454>
   84398:	3430      	adds	r4, #48	; 0x30
   8439a:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8439e:	e036      	b.n	8440e <_svfprintf_r+0x4c2>
   843a0:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   843a4:	9302      	str	r3, [sp, #8]
   843a6:	4620      	mov	r0, r4
   843a8:	4629      	mov	r1, r5
   843aa:	220a      	movs	r2, #10
   843ac:	2300      	movs	r3, #0
   843ae:	f8cd c000 	str.w	ip, [sp]
   843b2:	f002 fe2d 	bl	87010 <__aeabi_uldivmod>
   843b6:	9802      	ldr	r0, [sp, #8]
   843b8:	3230      	adds	r2, #48	; 0x30
   843ba:	f800 2901 	strb.w	r2, [r0], #-1
   843be:	4629      	mov	r1, r5
   843c0:	220a      	movs	r2, #10
   843c2:	2300      	movs	r3, #0
   843c4:	f8dd a008 	ldr.w	sl, [sp, #8]
   843c8:	9002      	str	r0, [sp, #8]
   843ca:	4620      	mov	r0, r4
   843cc:	f002 fe20 	bl	87010 <__aeabi_uldivmod>
   843d0:	4604      	mov	r4, r0
   843d2:	460d      	mov	r5, r1
   843d4:	ea54 0105 	orrs.w	r1, r4, r5
   843d8:	f8dd c000 	ldr.w	ip, [sp]
   843dc:	d1e3      	bne.n	843a6 <_svfprintf_r+0x45a>
   843de:	e01b      	b.n	84418 <_svfprintf_r+0x4cc>
   843e0:	9905      	ldr	r1, [sp, #20]
   843e2:	f004 000f 	and.w	r0, r4, #15
   843e6:	0924      	lsrs	r4, r4, #4
   843e8:	5c0a      	ldrb	r2, [r1, r0]
   843ea:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   843ee:	0929      	lsrs	r1, r5, #4
   843f0:	4604      	mov	r4, r0
   843f2:	460d      	mov	r5, r1
   843f4:	469a      	mov	sl, r3
   843f6:	f803 2901 	strb.w	r2, [r3], #-1
   843fa:	ea54 0205 	orrs.w	r2, r4, r5
   843fe:	d1ef      	bne.n	843e0 <_svfprintf_r+0x494>
   84400:	e00a      	b.n	84418 <_svfprintf_r+0x4cc>
   84402:	b938      	cbnz	r0, 84414 <_svfprintf_r+0x4c8>
   84404:	07f9      	lsls	r1, r7, #31
   84406:	d505      	bpl.n	84414 <_svfprintf_r+0x4c8>
   84408:	2030      	movs	r0, #48	; 0x30
   8440a:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8440e:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   84412:	e001      	b.n	84418 <_svfprintf_r+0x4cc>
   84414:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   84418:	ad18      	add	r5, sp, #96	; 0x60
   8441a:	ebca 0405 	rsb	r4, sl, r5
   8441e:	4665      	mov	r5, ip
   84420:	e00f      	b.n	84442 <_svfprintf_r+0x4f6>
   84422:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84426:	2b00      	cmp	r3, #0
   84428:	f000 8176 	beq.w	84718 <_svfprintf_r+0x7cc>
   8442c:	2500      	movs	r5, #0
   8442e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   84432:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84436:	2401      	movs	r4, #1
   84438:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8443c:	e001      	b.n	84442 <_svfprintf_r+0x4f6>
   8443e:	4664      	mov	r4, ip
   84440:	4605      	mov	r5, r0
   84442:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   84446:	42ac      	cmp	r4, r5
   84448:	bfac      	ite	ge
   8444a:	4621      	movge	r1, r4
   8444c:	4629      	movlt	r1, r5
   8444e:	9102      	str	r1, [sp, #8]
   84450:	b113      	cbz	r3, 84458 <_svfprintf_r+0x50c>
   84452:	9802      	ldr	r0, [sp, #8]
   84454:	1c42      	adds	r2, r0, #1
   84456:	9202      	str	r2, [sp, #8]
   84458:	f017 0102 	ands.w	r1, r7, #2
   8445c:	9106      	str	r1, [sp, #24]
   8445e:	d002      	beq.n	84466 <_svfprintf_r+0x51a>
   84460:	9b02      	ldr	r3, [sp, #8]
   84462:	1c98      	adds	r0, r3, #2
   84464:	9002      	str	r0, [sp, #8]
   84466:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8446a:	9207      	str	r2, [sp, #28]
   8446c:	d13c      	bne.n	844e8 <_svfprintf_r+0x59c>
   8446e:	9903      	ldr	r1, [sp, #12]
   84470:	9b02      	ldr	r3, [sp, #8]
   84472:	1acb      	subs	r3, r1, r3
   84474:	2b00      	cmp	r3, #0
   84476:	dd37      	ble.n	844e8 <_svfprintf_r+0x59c>
   84478:	48a5      	ldr	r0, [pc, #660]	; (84710 <_svfprintf_r+0x7c4>)
   8447a:	2b10      	cmp	r3, #16
   8447c:	f8c8 0000 	str.w	r0, [r8]
   84480:	dd1b      	ble.n	844ba <_svfprintf_r+0x56e>
   84482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84484:	2110      	movs	r1, #16
   84486:	980d      	ldr	r0, [sp, #52]	; 0x34
   84488:	f8c8 1004 	str.w	r1, [r8, #4]
   8448c:	1c51      	adds	r1, r2, #1
   8448e:	3010      	adds	r0, #16
   84490:	2907      	cmp	r1, #7
   84492:	900d      	str	r0, [sp, #52]	; 0x34
   84494:	910c      	str	r1, [sp, #48]	; 0x30
   84496:	dc02      	bgt.n	8449e <_svfprintf_r+0x552>
   84498:	f108 0808 	add.w	r8, r8, #8
   8449c:	e00b      	b.n	844b6 <_svfprintf_r+0x56a>
   8449e:	4658      	mov	r0, fp
   844a0:	4649      	mov	r1, r9
   844a2:	aa0b      	add	r2, sp, #44	; 0x2c
   844a4:	9300      	str	r3, [sp, #0]
   844a6:	f001 ffd7 	bl	86458 <__ssprint_r>
   844aa:	9b00      	ldr	r3, [sp, #0]
   844ac:	2800      	cmp	r0, #0
   844ae:	f040 813a 	bne.w	84726 <_svfprintf_r+0x7da>
   844b2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   844b6:	3b10      	subs	r3, #16
   844b8:	e7de      	b.n	84478 <_svfprintf_r+0x52c>
   844ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   844bc:	f8c8 3004 	str.w	r3, [r8, #4]
   844c0:	18d1      	adds	r1, r2, r3
   844c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   844c4:	910d      	str	r1, [sp, #52]	; 0x34
   844c6:	1c58      	adds	r0, r3, #1
   844c8:	2807      	cmp	r0, #7
   844ca:	900c      	str	r0, [sp, #48]	; 0x30
   844cc:	dc02      	bgt.n	844d4 <_svfprintf_r+0x588>
   844ce:	f108 0808 	add.w	r8, r8, #8
   844d2:	e009      	b.n	844e8 <_svfprintf_r+0x59c>
   844d4:	4658      	mov	r0, fp
   844d6:	4649      	mov	r1, r9
   844d8:	aa0b      	add	r2, sp, #44	; 0x2c
   844da:	f001 ffbd 	bl	86458 <__ssprint_r>
   844de:	2800      	cmp	r0, #0
   844e0:	f040 8121 	bne.w	84726 <_svfprintf_r+0x7da>
   844e4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   844e8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   844ec:	b1da      	cbz	r2, 84526 <_svfprintf_r+0x5da>
   844ee:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   844f2:	f8c8 1000 	str.w	r1, [r8]
   844f6:	990c      	ldr	r1, [sp, #48]	; 0x30
   844f8:	2301      	movs	r3, #1
   844fa:	980d      	ldr	r0, [sp, #52]	; 0x34
   844fc:	f8c8 3004 	str.w	r3, [r8, #4]
   84500:	1c4b      	adds	r3, r1, #1
   84502:	1c42      	adds	r2, r0, #1
   84504:	2b07      	cmp	r3, #7
   84506:	920d      	str	r2, [sp, #52]	; 0x34
   84508:	930c      	str	r3, [sp, #48]	; 0x30
   8450a:	dc02      	bgt.n	84512 <_svfprintf_r+0x5c6>
   8450c:	f108 0808 	add.w	r8, r8, #8
   84510:	e009      	b.n	84526 <_svfprintf_r+0x5da>
   84512:	4658      	mov	r0, fp
   84514:	4649      	mov	r1, r9
   84516:	aa0b      	add	r2, sp, #44	; 0x2c
   84518:	f001 ff9e 	bl	86458 <__ssprint_r>
   8451c:	2800      	cmp	r0, #0
   8451e:	f040 8102 	bne.w	84726 <_svfprintf_r+0x7da>
   84522:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84526:	9806      	ldr	r0, [sp, #24]
   84528:	b1d0      	cbz	r0, 84560 <_svfprintf_r+0x614>
   8452a:	aa0a      	add	r2, sp, #40	; 0x28
   8452c:	f8c8 2000 	str.w	r2, [r8]
   84530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84532:	2102      	movs	r1, #2
   84534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84536:	f8c8 1004 	str.w	r1, [r8, #4]
   8453a:	1c51      	adds	r1, r2, #1
   8453c:	1c98      	adds	r0, r3, #2
   8453e:	2907      	cmp	r1, #7
   84540:	900d      	str	r0, [sp, #52]	; 0x34
   84542:	910c      	str	r1, [sp, #48]	; 0x30
   84544:	dc02      	bgt.n	8454c <_svfprintf_r+0x600>
   84546:	f108 0808 	add.w	r8, r8, #8
   8454a:	e009      	b.n	84560 <_svfprintf_r+0x614>
   8454c:	4658      	mov	r0, fp
   8454e:	4649      	mov	r1, r9
   84550:	aa0b      	add	r2, sp, #44	; 0x2c
   84552:	f001 ff81 	bl	86458 <__ssprint_r>
   84556:	2800      	cmp	r0, #0
   84558:	f040 80e5 	bne.w	84726 <_svfprintf_r+0x7da>
   8455c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84560:	9b07      	ldr	r3, [sp, #28]
   84562:	2b80      	cmp	r3, #128	; 0x80
   84564:	d13c      	bne.n	845e0 <_svfprintf_r+0x694>
   84566:	9803      	ldr	r0, [sp, #12]
   84568:	9a02      	ldr	r2, [sp, #8]
   8456a:	1a83      	subs	r3, r0, r2
   8456c:	2b00      	cmp	r3, #0
   8456e:	dd37      	ble.n	845e0 <_svfprintf_r+0x694>
   84570:	4968      	ldr	r1, [pc, #416]	; (84714 <_svfprintf_r+0x7c8>)
   84572:	2b10      	cmp	r3, #16
   84574:	f8c8 1000 	str.w	r1, [r8]
   84578:	dd1b      	ble.n	845b2 <_svfprintf_r+0x666>
   8457a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8457c:	2210      	movs	r2, #16
   8457e:	990d      	ldr	r1, [sp, #52]	; 0x34
   84580:	f8c8 2004 	str.w	r2, [r8, #4]
   84584:	1c42      	adds	r2, r0, #1
   84586:	3110      	adds	r1, #16
   84588:	2a07      	cmp	r2, #7
   8458a:	910d      	str	r1, [sp, #52]	; 0x34
   8458c:	920c      	str	r2, [sp, #48]	; 0x30
   8458e:	dc02      	bgt.n	84596 <_svfprintf_r+0x64a>
   84590:	f108 0808 	add.w	r8, r8, #8
   84594:	e00b      	b.n	845ae <_svfprintf_r+0x662>
   84596:	4658      	mov	r0, fp
   84598:	4649      	mov	r1, r9
   8459a:	aa0b      	add	r2, sp, #44	; 0x2c
   8459c:	9300      	str	r3, [sp, #0]
   8459e:	f001 ff5b 	bl	86458 <__ssprint_r>
   845a2:	9b00      	ldr	r3, [sp, #0]
   845a4:	2800      	cmp	r0, #0
   845a6:	f040 80be 	bne.w	84726 <_svfprintf_r+0x7da>
   845aa:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   845ae:	3b10      	subs	r3, #16
   845b0:	e7de      	b.n	84570 <_svfprintf_r+0x624>
   845b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   845b4:	980d      	ldr	r0, [sp, #52]	; 0x34
   845b6:	1c51      	adds	r1, r2, #1
   845b8:	f8c8 3004 	str.w	r3, [r8, #4]
   845bc:	2907      	cmp	r1, #7
   845be:	4403      	add	r3, r0
   845c0:	930d      	str	r3, [sp, #52]	; 0x34
   845c2:	910c      	str	r1, [sp, #48]	; 0x30
   845c4:	dc02      	bgt.n	845cc <_svfprintf_r+0x680>
   845c6:	f108 0808 	add.w	r8, r8, #8
   845ca:	e009      	b.n	845e0 <_svfprintf_r+0x694>
   845cc:	4658      	mov	r0, fp
   845ce:	4649      	mov	r1, r9
   845d0:	aa0b      	add	r2, sp, #44	; 0x2c
   845d2:	f001 ff41 	bl	86458 <__ssprint_r>
   845d6:	2800      	cmp	r0, #0
   845d8:	f040 80a5 	bne.w	84726 <_svfprintf_r+0x7da>
   845dc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   845e0:	1b2d      	subs	r5, r5, r4
   845e2:	2d00      	cmp	r5, #0
   845e4:	dd34      	ble.n	84650 <_svfprintf_r+0x704>
   845e6:	484b      	ldr	r0, [pc, #300]	; (84714 <_svfprintf_r+0x7c8>)
   845e8:	2d10      	cmp	r5, #16
   845ea:	f8c8 0000 	str.w	r0, [r8]
   845ee:	dd19      	ble.n	84624 <_svfprintf_r+0x6d8>
   845f0:	980c      	ldr	r0, [sp, #48]	; 0x30
   845f2:	990d      	ldr	r1, [sp, #52]	; 0x34
   845f4:	1c43      	adds	r3, r0, #1
   845f6:	2210      	movs	r2, #16
   845f8:	3110      	adds	r1, #16
   845fa:	2b07      	cmp	r3, #7
   845fc:	f8c8 2004 	str.w	r2, [r8, #4]
   84600:	910d      	str	r1, [sp, #52]	; 0x34
   84602:	930c      	str	r3, [sp, #48]	; 0x30
   84604:	dc02      	bgt.n	8460c <_svfprintf_r+0x6c0>
   84606:	f108 0808 	add.w	r8, r8, #8
   8460a:	e009      	b.n	84620 <_svfprintf_r+0x6d4>
   8460c:	4658      	mov	r0, fp
   8460e:	4649      	mov	r1, r9
   84610:	aa0b      	add	r2, sp, #44	; 0x2c
   84612:	f001 ff21 	bl	86458 <__ssprint_r>
   84616:	2800      	cmp	r0, #0
   84618:	f040 8085 	bne.w	84726 <_svfprintf_r+0x7da>
   8461c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84620:	3d10      	subs	r5, #16
   84622:	e7e0      	b.n	845e6 <_svfprintf_r+0x69a>
   84624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84628:	1c51      	adds	r1, r2, #1
   8462a:	f8c8 5004 	str.w	r5, [r8, #4]
   8462e:	2907      	cmp	r1, #7
   84630:	441d      	add	r5, r3
   84632:	950d      	str	r5, [sp, #52]	; 0x34
   84634:	910c      	str	r1, [sp, #48]	; 0x30
   84636:	dc02      	bgt.n	8463e <_svfprintf_r+0x6f2>
   84638:	f108 0808 	add.w	r8, r8, #8
   8463c:	e008      	b.n	84650 <_svfprintf_r+0x704>
   8463e:	4658      	mov	r0, fp
   84640:	4649      	mov	r1, r9
   84642:	aa0b      	add	r2, sp, #44	; 0x2c
   84644:	f001 ff08 	bl	86458 <__ssprint_r>
   84648:	2800      	cmp	r0, #0
   8464a:	d16c      	bne.n	84726 <_svfprintf_r+0x7da>
   8464c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84652:	980d      	ldr	r0, [sp, #52]	; 0x34
   84654:	1c5a      	adds	r2, r3, #1
   84656:	f8c8 4004 	str.w	r4, [r8, #4]
   8465a:	2a07      	cmp	r2, #7
   8465c:	4404      	add	r4, r0
   8465e:	f8c8 a000 	str.w	sl, [r8]
   84662:	940d      	str	r4, [sp, #52]	; 0x34
   84664:	920c      	str	r2, [sp, #48]	; 0x30
   84666:	dc02      	bgt.n	8466e <_svfprintf_r+0x722>
   84668:	f108 0308 	add.w	r3, r8, #8
   8466c:	e007      	b.n	8467e <_svfprintf_r+0x732>
   8466e:	4658      	mov	r0, fp
   84670:	4649      	mov	r1, r9
   84672:	aa0b      	add	r2, sp, #44	; 0x2c
   84674:	f001 fef0 	bl	86458 <__ssprint_r>
   84678:	2800      	cmp	r0, #0
   8467a:	d154      	bne.n	84726 <_svfprintf_r+0x7da>
   8467c:	ab18      	add	r3, sp, #96	; 0x60
   8467e:	077a      	lsls	r2, r7, #29
   84680:	d40b      	bmi.n	8469a <_svfprintf_r+0x74e>
   84682:	9804      	ldr	r0, [sp, #16]
   84684:	9b02      	ldr	r3, [sp, #8]
   84686:	9a03      	ldr	r2, [sp, #12]
   84688:	990d      	ldr	r1, [sp, #52]	; 0x34
   8468a:	4293      	cmp	r3, r2
   8468c:	bfac      	ite	ge
   8468e:	18c0      	addge	r0, r0, r3
   84690:	1880      	addlt	r0, r0, r2
   84692:	9004      	str	r0, [sp, #16]
   84694:	2900      	cmp	r1, #0
   84696:	d036      	beq.n	84706 <_svfprintf_r+0x7ba>
   84698:	e02f      	b.n	846fa <_svfprintf_r+0x7ae>
   8469a:	9c03      	ldr	r4, [sp, #12]
   8469c:	9902      	ldr	r1, [sp, #8]
   8469e:	1a64      	subs	r4, r4, r1
   846a0:	2c00      	cmp	r4, #0
   846a2:	ddee      	ble.n	84682 <_svfprintf_r+0x736>
   846a4:	481a      	ldr	r0, [pc, #104]	; (84710 <_svfprintf_r+0x7c4>)
   846a6:	2c10      	cmp	r4, #16
   846a8:	6018      	str	r0, [r3, #0]
   846aa:	dd15      	ble.n	846d8 <_svfprintf_r+0x78c>
   846ac:	990c      	ldr	r1, [sp, #48]	; 0x30
   846ae:	2010      	movs	r0, #16
   846b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   846b2:	6058      	str	r0, [r3, #4]
   846b4:	1c48      	adds	r0, r1, #1
   846b6:	3210      	adds	r2, #16
   846b8:	2807      	cmp	r0, #7
   846ba:	920d      	str	r2, [sp, #52]	; 0x34
   846bc:	900c      	str	r0, [sp, #48]	; 0x30
   846be:	dc01      	bgt.n	846c4 <_svfprintf_r+0x778>
   846c0:	3308      	adds	r3, #8
   846c2:	e007      	b.n	846d4 <_svfprintf_r+0x788>
   846c4:	4658      	mov	r0, fp
   846c6:	4649      	mov	r1, r9
   846c8:	aa0b      	add	r2, sp, #44	; 0x2c
   846ca:	f001 fec5 	bl	86458 <__ssprint_r>
   846ce:	2800      	cmp	r0, #0
   846d0:	d129      	bne.n	84726 <_svfprintf_r+0x7da>
   846d2:	ab18      	add	r3, sp, #96	; 0x60
   846d4:	3c10      	subs	r4, #16
   846d6:	e7e5      	b.n	846a4 <_svfprintf_r+0x758>
   846d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   846da:	605c      	str	r4, [r3, #4]
   846dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   846de:	1c51      	adds	r1, r2, #1
   846e0:	191c      	adds	r4, r3, r4
   846e2:	2907      	cmp	r1, #7
   846e4:	940d      	str	r4, [sp, #52]	; 0x34
   846e6:	910c      	str	r1, [sp, #48]	; 0x30
   846e8:	ddcb      	ble.n	84682 <_svfprintf_r+0x736>
   846ea:	4658      	mov	r0, fp
   846ec:	4649      	mov	r1, r9
   846ee:	aa0b      	add	r2, sp, #44	; 0x2c
   846f0:	f001 feb2 	bl	86458 <__ssprint_r>
   846f4:	2800      	cmp	r0, #0
   846f6:	d0c4      	beq.n	84682 <_svfprintf_r+0x736>
   846f8:	e015      	b.n	84726 <_svfprintf_r+0x7da>
   846fa:	4658      	mov	r0, fp
   846fc:	4649      	mov	r1, r9
   846fe:	aa0b      	add	r2, sp, #44	; 0x2c
   84700:	f001 feaa 	bl	86458 <__ssprint_r>
   84704:	b978      	cbnz	r0, 84726 <_svfprintf_r+0x7da>
   84706:	2500      	movs	r5, #0
   84708:	950c      	str	r5, [sp, #48]	; 0x30
   8470a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8470e:	e446      	b.n	83f9e <_svfprintf_r+0x52>
   84710:	00087686 	.word	0x00087686
   84714:	00087696 	.word	0x00087696
   84718:	980d      	ldr	r0, [sp, #52]	; 0x34
   8471a:	b120      	cbz	r0, 84726 <_svfprintf_r+0x7da>
   8471c:	4658      	mov	r0, fp
   8471e:	4649      	mov	r1, r9
   84720:	aa0b      	add	r2, sp, #44	; 0x2c
   84722:	f001 fe99 	bl	86458 <__ssprint_r>
   84726:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8472a:	9b04      	ldr	r3, [sp, #16]
   8472c:	f002 0140 	and.w	r1, r2, #64	; 0x40
   84730:	b208      	sxth	r0, r1
   84732:	2800      	cmp	r0, #0
   84734:	bf18      	it	ne
   84736:	f04f 33ff 	movne.w	r3, #4294967295
   8473a:	4618      	mov	r0, r3
   8473c:	b029      	add	sp, #164	; 0xa4
   8473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84742:	bf00      	nop

00084744 <__sprint_r>:
   84744:	6893      	ldr	r3, [r2, #8]
   84746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8474a:	4681      	mov	r9, r0
   8474c:	460f      	mov	r7, r1
   8474e:	4614      	mov	r4, r2
   84750:	b91b      	cbnz	r3, 8475a <__sprint_r+0x16>
   84752:	6053      	str	r3, [r2, #4]
   84754:	4618      	mov	r0, r3
   84756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8475a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8475c:	049b      	lsls	r3, r3, #18
   8475e:	d51e      	bpl.n	8479e <__sprint_r+0x5a>
   84760:	6815      	ldr	r5, [r2, #0]
   84762:	68a0      	ldr	r0, [r4, #8]
   84764:	3508      	adds	r5, #8
   84766:	b1c8      	cbz	r0, 8479c <__sprint_r+0x58>
   84768:	f855 1c04 	ldr.w	r1, [r5, #-4]
   8476c:	f855 ac08 	ldr.w	sl, [r5, #-8]
   84770:	ea4f 0891 	mov.w	r8, r1, lsr #2
   84774:	2600      	movs	r6, #0
   84776:	4546      	cmp	r6, r8
   84778:	da09      	bge.n	8478e <__sprint_r+0x4a>
   8477a:	4648      	mov	r0, r9
   8477c:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   84780:	463a      	mov	r2, r7
   84782:	f000 fe97 	bl	854b4 <_fputwc_r>
   84786:	1c43      	adds	r3, r0, #1
   84788:	d00b      	beq.n	847a2 <__sprint_r+0x5e>
   8478a:	3601      	adds	r6, #1
   8478c:	e7f3      	b.n	84776 <__sprint_r+0x32>
   8478e:	68a2      	ldr	r2, [r4, #8]
   84790:	ea4f 0888 	mov.w	r8, r8, lsl #2
   84794:	ebc8 0302 	rsb	r3, r8, r2
   84798:	60a3      	str	r3, [r4, #8]
   8479a:	e7e2      	b.n	84762 <__sprint_r+0x1e>
   8479c:	e001      	b.n	847a2 <__sprint_r+0x5e>
   8479e:	f001 f801 	bl	857a4 <__sfvwrite_r>
   847a2:	2100      	movs	r1, #0
   847a4:	60a1      	str	r1, [r4, #8]
   847a6:	6061      	str	r1, [r4, #4]
   847a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000847ac <_vfiprintf_r>:
   847ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   847b0:	4689      	mov	r9, r1
   847b2:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
   847b6:	4614      	mov	r4, r2
   847b8:	461e      	mov	r6, r3
   847ba:	4683      	mov	fp, r0
   847bc:	b118      	cbz	r0, 847c6 <_vfiprintf_r+0x1a>
   847be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   847c0:	b90b      	cbnz	r3, 847c6 <_vfiprintf_r+0x1a>
   847c2:	f000 fdfb 	bl	853bc <__sinit>
   847c6:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   847ca:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   847ce:	b211      	sxth	r1, r2
   847d0:	b949      	cbnz	r1, 847e6 <_vfiprintf_r+0x3a>
   847d2:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   847d6:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   847da:	f8a9 300c 	strh.w	r3, [r9, #12]
   847de:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   847e2:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   847e6:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   847ea:	f001 0308 	and.w	r3, r1, #8
   847ee:	b218      	sxth	r0, r3
   847f0:	b148      	cbz	r0, 84806 <_vfiprintf_r+0x5a>
   847f2:	f8d9 2010 	ldr.w	r2, [r9, #16]
   847f6:	b132      	cbz	r2, 84806 <_vfiprintf_r+0x5a>
   847f8:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   847fc:	f000 011a 	and.w	r1, r0, #26
   84800:	290a      	cmp	r1, #10
   84802:	d149      	bne.n	84898 <_vfiprintf_r+0xec>
   84804:	e00a      	b.n	8481c <_vfiprintf_r+0x70>
   84806:	4658      	mov	r0, fp
   84808:	4649      	mov	r1, r9
   8480a:	f000 fc31 	bl	85070 <__swsetup_r>
   8480e:	2800      	cmp	r0, #0
   84810:	d0f2      	beq.n	847f8 <_vfiprintf_r+0x4c>
   84812:	f04f 31ff 	mov.w	r1, #4294967295
   84816:	9102      	str	r1, [sp, #8]
   84818:	f000 bc15 	b.w	85046 <_vfiprintf_r+0x89a>
   8481c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
   84820:	0419      	lsls	r1, r3, #16
   84822:	d439      	bmi.n	84898 <_vfiprintf_r+0xec>
   84824:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
   84828:	f8d9 201c 	ldr.w	r2, [r9, #28]
   8482c:	f020 0002 	bic.w	r0, r0, #2
   84830:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
   84834:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   84838:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
   8483c:	9131      	str	r1, [sp, #196]	; 0xc4
   8483e:	a832      	add	r0, sp, #200	; 0xc8
   84840:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84844:	921f      	str	r2, [sp, #124]	; 0x7c
   84846:	2200      	movs	r2, #0
   84848:	9321      	str	r3, [sp, #132]	; 0x84
   8484a:	9018      	str	r0, [sp, #96]	; 0x60
   8484c:	901c      	str	r0, [sp, #112]	; 0x70
   8484e:	911a      	str	r1, [sp, #104]	; 0x68
   84850:	911d      	str	r1, [sp, #116]	; 0x74
   84852:	921e      	str	r2, [sp, #120]	; 0x78
   84854:	4658      	mov	r0, fp
   84856:	a918      	add	r1, sp, #96	; 0x60
   84858:	4622      	mov	r2, r4
   8485a:	4633      	mov	r3, r6
   8485c:	f7ff ffa6 	bl	847ac <_vfiprintf_r>
   84860:	2800      	cmp	r0, #0
   84862:	9002      	str	r0, [sp, #8]
   84864:	db09      	blt.n	8487a <_vfiprintf_r+0xce>
   84866:	4658      	mov	r0, fp
   84868:	a918      	add	r1, sp, #96	; 0x60
   8486a:	f000 fcb5 	bl	851d8 <_fflush_r>
   8486e:	9b02      	ldr	r3, [sp, #8]
   84870:	2800      	cmp	r0, #0
   84872:	bf18      	it	ne
   84874:	f04f 33ff 	movne.w	r3, #4294967295
   84878:	9302      	str	r3, [sp, #8]
   8487a:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
   8487e:	f000 0140 	and.w	r1, r0, #64	; 0x40
   84882:	b20a      	sxth	r2, r1
   84884:	2a00      	cmp	r2, #0
   84886:	f000 83de 	beq.w	85046 <_vfiprintf_r+0x89a>
   8488a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8488e:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   84892:	f8a9 000c 	strh.w	r0, [r9, #12]
   84896:	e3d6      	b.n	85046 <_vfiprintf_r+0x89a>
   84898:	2200      	movs	r2, #0
   8489a:	ad32      	add	r5, sp, #200	; 0xc8
   8489c:	950b      	str	r5, [sp, #44]	; 0x2c
   8489e:	920d      	str	r2, [sp, #52]	; 0x34
   848a0:	920c      	str	r2, [sp, #48]	; 0x30
   848a2:	9401      	str	r4, [sp, #4]
   848a4:	9205      	str	r2, [sp, #20]
   848a6:	9202      	str	r2, [sp, #8]
   848a8:	46a8      	mov	r8, r5
   848aa:	9801      	ldr	r0, [sp, #4]
   848ac:	4604      	mov	r4, r0
   848ae:	f810 1b01 	ldrb.w	r1, [r0], #1
   848b2:	b919      	cbnz	r1, 848bc <_vfiprintf_r+0x110>
   848b4:	9b01      	ldr	r3, [sp, #4]
   848b6:	1ae5      	subs	r5, r4, r3
   848b8:	d103      	bne.n	848c2 <_vfiprintf_r+0x116>
   848ba:	e01d      	b.n	848f8 <_vfiprintf_r+0x14c>
   848bc:	2925      	cmp	r1, #37	; 0x25
   848be:	d1f5      	bne.n	848ac <_vfiprintf_r+0x100>
   848c0:	e7f8      	b.n	848b4 <_vfiprintf_r+0x108>
   848c2:	9901      	ldr	r1, [sp, #4]
   848c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   848c6:	e888 0022 	stmia.w	r8, {r1, r5}
   848ca:	990c      	ldr	r1, [sp, #48]	; 0x30
   848cc:	1950      	adds	r0, r2, r5
   848ce:	1c4b      	adds	r3, r1, #1
   848d0:	2b07      	cmp	r3, #7
   848d2:	900d      	str	r0, [sp, #52]	; 0x34
   848d4:	930c      	str	r3, [sp, #48]	; 0x30
   848d6:	dc02      	bgt.n	848de <_vfiprintf_r+0x132>
   848d8:	f108 0808 	add.w	r8, r8, #8
   848dc:	e009      	b.n	848f2 <_vfiprintf_r+0x146>
   848de:	4658      	mov	r0, fp
   848e0:	4649      	mov	r1, r9
   848e2:	aa0b      	add	r2, sp, #44	; 0x2c
   848e4:	f7ff ff2e 	bl	84744 <__sprint_r>
   848e8:	2800      	cmp	r0, #0
   848ea:	f040 83a4 	bne.w	85036 <_vfiprintf_r+0x88a>
   848ee:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   848f2:	9a02      	ldr	r2, [sp, #8]
   848f4:	1950      	adds	r0, r2, r5
   848f6:	9002      	str	r0, [sp, #8]
   848f8:	7821      	ldrb	r1, [r4, #0]
   848fa:	2900      	cmp	r1, #0
   848fc:	f000 8394 	beq.w	85028 <_vfiprintf_r+0x87c>
   84900:	2200      	movs	r2, #0
   84902:	3401      	adds	r4, #1
   84904:	9401      	str	r4, [sp, #4]
   84906:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8490a:	f04f 3cff 	mov.w	ip, #4294967295
   8490e:	9204      	str	r2, [sp, #16]
   84910:	4617      	mov	r7, r2
   84912:	9801      	ldr	r0, [sp, #4]
   84914:	f810 3b01 	ldrb.w	r3, [r0], #1
   84918:	9001      	str	r0, [sp, #4]
   8491a:	2b63      	cmp	r3, #99	; 0x63
   8491c:	f000 80b3 	beq.w	84a86 <_vfiprintf_r+0x2da>
   84920:	dc33      	bgt.n	8498a <_vfiprintf_r+0x1de>
   84922:	2b39      	cmp	r3, #57	; 0x39
   84924:	dc1a      	bgt.n	8495c <_vfiprintf_r+0x1b0>
   84926:	2b31      	cmp	r3, #49	; 0x31
   84928:	f280 8091 	bge.w	84a4e <_vfiprintf_r+0x2a2>
   8492c:	2b2b      	cmp	r3, #43	; 0x2b
   8492e:	d101      	bne.n	84934 <_vfiprintf_r+0x188>
   84930:	461a      	mov	r2, r3
   84932:	e7ee      	b.n	84912 <_vfiprintf_r+0x166>
   84934:	dc0a      	bgt.n	8494c <_vfiprintf_r+0x1a0>
   84936:	2b23      	cmp	r3, #35	; 0x23
   84938:	d055      	beq.n	849e6 <_vfiprintf_r+0x23a>
   8493a:	2b2a      	cmp	r3, #42	; 0x2a
   8493c:	d056      	beq.n	849ec <_vfiprintf_r+0x240>
   8493e:	2b20      	cmp	r3, #32
   84940:	f040 81f7 	bne.w	84d32 <_vfiprintf_r+0x586>
   84944:	2a00      	cmp	r2, #0
   84946:	bf08      	it	eq
   84948:	2220      	moveq	r2, #32
   8494a:	e7e2      	b.n	84912 <_vfiprintf_r+0x166>
   8494c:	2b2e      	cmp	r3, #46	; 0x2e
   8494e:	d058      	beq.n	84a02 <_vfiprintf_r+0x256>
   84950:	2b30      	cmp	r3, #48	; 0x30
   84952:	d079      	beq.n	84a48 <_vfiprintf_r+0x29c>
   84954:	2b2d      	cmp	r3, #45	; 0x2d
   84956:	f040 81ec 	bne.w	84d32 <_vfiprintf_r+0x586>
   8495a:	e04f      	b.n	849fc <_vfiprintf_r+0x250>
   8495c:	2b4f      	cmp	r3, #79	; 0x4f
   8495e:	f000 80de 	beq.w	84b1e <_vfiprintf_r+0x372>
   84962:	dc07      	bgt.n	84974 <_vfiprintf_r+0x1c8>
   84964:	2b44      	cmp	r3, #68	; 0x44
   84966:	f040 81e4 	bne.w	84d32 <_vfiprintf_r+0x586>
   8496a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8496e:	f047 0710 	orr.w	r7, r7, #16
   84972:	e090      	b.n	84a96 <_vfiprintf_r+0x2ea>
   84974:	2b55      	cmp	r3, #85	; 0x55
   84976:	f000 811f 	beq.w	84bb8 <_vfiprintf_r+0x40c>
   8497a:	2b58      	cmp	r3, #88	; 0x58
   8497c:	f040 81d9 	bne.w	84d32 <_vfiprintf_r+0x586>
   84980:	4dae      	ldr	r5, [pc, #696]	; (84c3c <_vfiprintf_r+0x490>)
   84982:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84986:	9505      	str	r5, [sp, #20]
   84988:	e130      	b.n	84bec <_vfiprintf_r+0x440>
   8498a:	2b6f      	cmp	r3, #111	; 0x6f
   8498c:	f000 80c9 	beq.w	84b22 <_vfiprintf_r+0x376>
   84990:	dc10      	bgt.n	849b4 <_vfiprintf_r+0x208>
   84992:	2b69      	cmp	r3, #105	; 0x69
   84994:	d024      	beq.n	849e0 <_vfiprintf_r+0x234>
   84996:	dc07      	bgt.n	849a8 <_vfiprintf_r+0x1fc>
   84998:	2b64      	cmp	r3, #100	; 0x64
   8499a:	d021      	beq.n	849e0 <_vfiprintf_r+0x234>
   8499c:	2b68      	cmp	r3, #104	; 0x68
   8499e:	f040 81c8 	bne.w	84d32 <_vfiprintf_r+0x586>
   849a2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   849a6:	e7b4      	b.n	84912 <_vfiprintf_r+0x166>
   849a8:	2b6c      	cmp	r3, #108	; 0x6c
   849aa:	d05f      	beq.n	84a6c <_vfiprintf_r+0x2c0>
   849ac:	2b6e      	cmp	r3, #110	; 0x6e
   849ae:	f040 81c0 	bne.w	84d32 <_vfiprintf_r+0x586>
   849b2:	e096      	b.n	84ae2 <_vfiprintf_r+0x336>
   849b4:	2b73      	cmp	r3, #115	; 0x73
   849b6:	f000 80df 	beq.w	84b78 <_vfiprintf_r+0x3cc>
   849ba:	dc06      	bgt.n	849ca <_vfiprintf_r+0x21e>
   849bc:	2b70      	cmp	r3, #112	; 0x70
   849be:	f000 80cd 	beq.w	84b5c <_vfiprintf_r+0x3b0>
   849c2:	2b71      	cmp	r3, #113	; 0x71
   849c4:	f040 81b5 	bne.w	84d32 <_vfiprintf_r+0x586>
   849c8:	e05a      	b.n	84a80 <_vfiprintf_r+0x2d4>
   849ca:	2b75      	cmp	r3, #117	; 0x75
   849cc:	f000 80f6 	beq.w	84bbc <_vfiprintf_r+0x410>
   849d0:	2b78      	cmp	r3, #120	; 0x78
   849d2:	f040 81ae 	bne.w	84d32 <_vfiprintf_r+0x586>
   849d6:	4d9a      	ldr	r5, [pc, #616]	; (84c40 <_vfiprintf_r+0x494>)
   849d8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   849dc:	9505      	str	r5, [sp, #20]
   849de:	e105      	b.n	84bec <_vfiprintf_r+0x440>
   849e0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   849e4:	e057      	b.n	84a96 <_vfiprintf_r+0x2ea>
   849e6:	f047 0701 	orr.w	r7, r7, #1
   849ea:	e792      	b.n	84912 <_vfiprintf_r+0x166>
   849ec:	1d33      	adds	r3, r6, #4
   849ee:	6836      	ldr	r6, [r6, #0]
   849f0:	2e00      	cmp	r6, #0
   849f2:	9604      	str	r6, [sp, #16]
   849f4:	da15      	bge.n	84a22 <_vfiprintf_r+0x276>
   849f6:	4270      	negs	r0, r6
   849f8:	9004      	str	r0, [sp, #16]
   849fa:	461e      	mov	r6, r3
   849fc:	f047 0704 	orr.w	r7, r7, #4
   84a00:	e787      	b.n	84912 <_vfiprintf_r+0x166>
   84a02:	9901      	ldr	r1, [sp, #4]
   84a04:	f811 3b01 	ldrb.w	r3, [r1], #1
   84a08:	2b2a      	cmp	r3, #42	; 0x2a
   84a0a:	9101      	str	r1, [sp, #4]
   84a0c:	d10b      	bne.n	84a26 <_vfiprintf_r+0x27a>
   84a0e:	f8d6 c000 	ldr.w	ip, [r6]
   84a12:	1d33      	adds	r3, r6, #4
   84a14:	f1bc 0f00 	cmp.w	ip, #0
   84a18:	da03      	bge.n	84a22 <_vfiprintf_r+0x276>
   84a1a:	461e      	mov	r6, r3
   84a1c:	f04f 3cff 	mov.w	ip, #4294967295
   84a20:	e777      	b.n	84912 <_vfiprintf_r+0x166>
   84a22:	461e      	mov	r6, r3
   84a24:	e775      	b.n	84912 <_vfiprintf_r+0x166>
   84a26:	f04f 0c00 	mov.w	ip, #0
   84a2a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84a2e:	2809      	cmp	r0, #9
   84a30:	d807      	bhi.n	84a42 <_vfiprintf_r+0x296>
   84a32:	9901      	ldr	r1, [sp, #4]
   84a34:	230a      	movs	r3, #10
   84a36:	fb03 0c0c 	mla	ip, r3, ip, r0
   84a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
   84a3e:	9101      	str	r1, [sp, #4]
   84a40:	e7f3      	b.n	84a2a <_vfiprintf_r+0x27e>
   84a42:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   84a46:	e768      	b.n	8491a <_vfiprintf_r+0x16e>
   84a48:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   84a4c:	e761      	b.n	84912 <_vfiprintf_r+0x166>
   84a4e:	9801      	ldr	r0, [sp, #4]
   84a50:	2100      	movs	r1, #0
   84a52:	3b30      	subs	r3, #48	; 0x30
   84a54:	240a      	movs	r4, #10
   84a56:	fb04 3101 	mla	r1, r4, r1, r3
   84a5a:	f810 3b01 	ldrb.w	r3, [r0], #1
   84a5e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   84a62:	2c09      	cmp	r4, #9
   84a64:	9001      	str	r0, [sp, #4]
   84a66:	d9f4      	bls.n	84a52 <_vfiprintf_r+0x2a6>
   84a68:	9104      	str	r1, [sp, #16]
   84a6a:	e756      	b.n	8491a <_vfiprintf_r+0x16e>
   84a6c:	9901      	ldr	r1, [sp, #4]
   84a6e:	780b      	ldrb	r3, [r1, #0]
   84a70:	2b6c      	cmp	r3, #108	; 0x6c
   84a72:	d102      	bne.n	84a7a <_vfiprintf_r+0x2ce>
   84a74:	1c48      	adds	r0, r1, #1
   84a76:	9001      	str	r0, [sp, #4]
   84a78:	e002      	b.n	84a80 <_vfiprintf_r+0x2d4>
   84a7a:	f047 0710 	orr.w	r7, r7, #16
   84a7e:	e748      	b.n	84912 <_vfiprintf_r+0x166>
   84a80:	f047 0720 	orr.w	r7, r7, #32
   84a84:	e745      	b.n	84912 <_vfiprintf_r+0x166>
   84a86:	6832      	ldr	r2, [r6, #0]
   84a88:	2500      	movs	r5, #0
   84a8a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   84a8e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84a92:	3604      	adds	r6, #4
   84a94:	e157      	b.n	84d46 <_vfiprintf_r+0x59a>
   84a96:	06ba      	lsls	r2, r7, #26
   84a98:	d507      	bpl.n	84aaa <_vfiprintf_r+0x2fe>
   84a9a:	3607      	adds	r6, #7
   84a9c:	f026 0507 	bic.w	r5, r6, #7
   84aa0:	f105 0608 	add.w	r6, r5, #8
   84aa4:	e9d5 4500 	ldrd	r4, r5, [r5]
   84aa8:	e00f      	b.n	84aca <_vfiprintf_r+0x31e>
   84aaa:	f017 0f10 	tst.w	r7, #16
   84aae:	f106 0104 	add.w	r1, r6, #4
   84ab2:	d001      	beq.n	84ab8 <_vfiprintf_r+0x30c>
   84ab4:	6832      	ldr	r2, [r6, #0]
   84ab6:	e005      	b.n	84ac4 <_vfiprintf_r+0x318>
   84ab8:	f017 0f40 	tst.w	r7, #64	; 0x40
   84abc:	6832      	ldr	r2, [r6, #0]
   84abe:	d001      	beq.n	84ac4 <_vfiprintf_r+0x318>
   84ac0:	b214      	sxth	r4, r2
   84ac2:	e000      	b.n	84ac6 <_vfiprintf_r+0x31a>
   84ac4:	4614      	mov	r4, r2
   84ac6:	17e5      	asrs	r5, r4, #31
   84ac8:	460e      	mov	r6, r1
   84aca:	2c00      	cmp	r4, #0
   84acc:	f175 0200 	sbcs.w	r2, r5, #0
   84ad0:	f280 80b8 	bge.w	84c44 <_vfiprintf_r+0x498>
   84ad4:	232d      	movs	r3, #45	; 0x2d
   84ad6:	4264      	negs	r4, r4
   84ad8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84adc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   84ae0:	e0b0      	b.n	84c44 <_vfiprintf_r+0x498>
   84ae2:	f017 0f20 	tst.w	r7, #32
   84ae6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84aea:	f106 0204 	add.w	r2, r6, #4
   84aee:	d005      	beq.n	84afc <_vfiprintf_r+0x350>
   84af0:	9c02      	ldr	r4, [sp, #8]
   84af2:	6835      	ldr	r5, [r6, #0]
   84af4:	17e0      	asrs	r0, r4, #31
   84af6:	602c      	str	r4, [r5, #0]
   84af8:	6068      	str	r0, [r5, #4]
   84afa:	e004      	b.n	84b06 <_vfiprintf_r+0x35a>
   84afc:	06fb      	lsls	r3, r7, #27
   84afe:	d504      	bpl.n	84b0a <_vfiprintf_r+0x35e>
   84b00:	6833      	ldr	r3, [r6, #0]
   84b02:	9902      	ldr	r1, [sp, #8]
   84b04:	6019      	str	r1, [r3, #0]
   84b06:	4616      	mov	r6, r2
   84b08:	e6cf      	b.n	848aa <_vfiprintf_r+0xfe>
   84b0a:	6830      	ldr	r0, [r6, #0]
   84b0c:	9c02      	ldr	r4, [sp, #8]
   84b0e:	f017 0f40 	tst.w	r7, #64	; 0x40
   84b12:	f106 0604 	add.w	r6, r6, #4
   84b16:	bf14      	ite	ne
   84b18:	8004      	strhne	r4, [r0, #0]
   84b1a:	6004      	streq	r4, [r0, #0]
   84b1c:	e6c5      	b.n	848aa <_vfiprintf_r+0xfe>
   84b1e:	f047 0710 	orr.w	r7, r7, #16
   84b22:	f017 0020 	ands.w	r0, r7, #32
   84b26:	d008      	beq.n	84b3a <_vfiprintf_r+0x38e>
   84b28:	1df3      	adds	r3, r6, #7
   84b2a:	f023 0507 	bic.w	r5, r3, #7
   84b2e:	f105 0608 	add.w	r6, r5, #8
   84b32:	e9d5 4500 	ldrd	r4, r5, [r5]
   84b36:	2000      	movs	r0, #0
   84b38:	e07c      	b.n	84c34 <_vfiprintf_r+0x488>
   84b3a:	f017 0110 	ands.w	r1, r7, #16
   84b3e:	f106 0204 	add.w	r2, r6, #4
   84b42:	d106      	bne.n	84b52 <_vfiprintf_r+0x3a6>
   84b44:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   84b48:	d003      	beq.n	84b52 <_vfiprintf_r+0x3a6>
   84b4a:	8834      	ldrh	r4, [r6, #0]
   84b4c:	2500      	movs	r5, #0
   84b4e:	4616      	mov	r6, r2
   84b50:	e7f1      	b.n	84b36 <_vfiprintf_r+0x38a>
   84b52:	6836      	ldr	r6, [r6, #0]
   84b54:	2500      	movs	r5, #0
   84b56:	4634      	mov	r4, r6
   84b58:	4616      	mov	r6, r2
   84b5a:	e06b      	b.n	84c34 <_vfiprintf_r+0x488>
   84b5c:	4b38      	ldr	r3, [pc, #224]	; (84c40 <_vfiprintf_r+0x494>)
   84b5e:	2130      	movs	r1, #48	; 0x30
   84b60:	2278      	movs	r2, #120	; 0x78
   84b62:	6834      	ldr	r4, [r6, #0]
   84b64:	2500      	movs	r5, #0
   84b66:	f047 0702 	orr.w	r7, r7, #2
   84b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   84b6e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   84b72:	3604      	adds	r6, #4
   84b74:	9305      	str	r3, [sp, #20]
   84b76:	e05c      	b.n	84c32 <_vfiprintf_r+0x486>
   84b78:	4631      	mov	r1, r6
   84b7a:	2500      	movs	r5, #0
   84b7c:	f8d1 a000 	ldr.w	sl, [r1]
   84b80:	3604      	adds	r6, #4
   84b82:	45ac      	cmp	ip, r5
   84b84:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84b88:	4650      	mov	r0, sl
   84b8a:	db11      	blt.n	84bb0 <_vfiprintf_r+0x404>
   84b8c:	4662      	mov	r2, ip
   84b8e:	4629      	mov	r1, r5
   84b90:	f8cd c000 	str.w	ip, [sp]
   84b94:	f001 fa66 	bl	86064 <memchr>
   84b98:	f8dd c000 	ldr.w	ip, [sp]
   84b9c:	2800      	cmp	r0, #0
   84b9e:	f000 80d6 	beq.w	84d4e <_vfiprintf_r+0x5a2>
   84ba2:	ebca 0400 	rsb	r4, sl, r0
   84ba6:	4564      	cmp	r4, ip
   84ba8:	f340 80d3 	ble.w	84d52 <_vfiprintf_r+0x5a6>
   84bac:	4664      	mov	r4, ip
   84bae:	e0d0      	b.n	84d52 <_vfiprintf_r+0x5a6>
   84bb0:	f7ff f9ae 	bl	83f10 <strlen>
   84bb4:	4604      	mov	r4, r0
   84bb6:	e0cc      	b.n	84d52 <_vfiprintf_r+0x5a6>
   84bb8:	f047 0710 	orr.w	r7, r7, #16
   84bbc:	06bd      	lsls	r5, r7, #26
   84bbe:	d506      	bpl.n	84bce <_vfiprintf_r+0x422>
   84bc0:	1df0      	adds	r0, r6, #7
   84bc2:	f020 0407 	bic.w	r4, r0, #7
   84bc6:	f104 0608 	add.w	r6, r4, #8
   84bca:	cc30      	ldmia	r4, {r4, r5}
   84bcc:	e00c      	b.n	84be8 <_vfiprintf_r+0x43c>
   84bce:	f017 0f10 	tst.w	r7, #16
   84bd2:	f106 0304 	add.w	r3, r6, #4
   84bd6:	d103      	bne.n	84be0 <_vfiprintf_r+0x434>
   84bd8:	067c      	lsls	r4, r7, #25
   84bda:	d501      	bpl.n	84be0 <_vfiprintf_r+0x434>
   84bdc:	8834      	ldrh	r4, [r6, #0]
   84bde:	e001      	b.n	84be4 <_vfiprintf_r+0x438>
   84be0:	6835      	ldr	r5, [r6, #0]
   84be2:	462c      	mov	r4, r5
   84be4:	2500      	movs	r5, #0
   84be6:	461e      	mov	r6, r3
   84be8:	2001      	movs	r0, #1
   84bea:	e023      	b.n	84c34 <_vfiprintf_r+0x488>
   84bec:	06b8      	lsls	r0, r7, #26
   84bee:	d507      	bpl.n	84c00 <_vfiprintf_r+0x454>
   84bf0:	1df4      	adds	r4, r6, #7
   84bf2:	f024 0107 	bic.w	r1, r4, #7
   84bf6:	f101 0608 	add.w	r6, r1, #8
   84bfa:	e9d1 4500 	ldrd	r4, r5, [r1]
   84bfe:	e00c      	b.n	84c1a <_vfiprintf_r+0x46e>
   84c00:	f017 0f10 	tst.w	r7, #16
   84c04:	f106 0004 	add.w	r0, r6, #4
   84c08:	d103      	bne.n	84c12 <_vfiprintf_r+0x466>
   84c0a:	0679      	lsls	r1, r7, #25
   84c0c:	d501      	bpl.n	84c12 <_vfiprintf_r+0x466>
   84c0e:	8834      	ldrh	r4, [r6, #0]
   84c10:	e001      	b.n	84c16 <_vfiprintf_r+0x46a>
   84c12:	6836      	ldr	r6, [r6, #0]
   84c14:	4634      	mov	r4, r6
   84c16:	2500      	movs	r5, #0
   84c18:	4606      	mov	r6, r0
   84c1a:	07fa      	lsls	r2, r7, #31
   84c1c:	d509      	bpl.n	84c32 <_vfiprintf_r+0x486>
   84c1e:	ea54 0205 	orrs.w	r2, r4, r5
   84c22:	d006      	beq.n	84c32 <_vfiprintf_r+0x486>
   84c24:	2230      	movs	r2, #48	; 0x30
   84c26:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   84c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   84c2e:	f047 0702 	orr.w	r7, r7, #2
   84c32:	2002      	movs	r0, #2
   84c34:	2100      	movs	r1, #0
   84c36:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   84c3a:	e004      	b.n	84c46 <_vfiprintf_r+0x49a>
   84c3c:	000876a6 	.word	0x000876a6
   84c40:	000876b7 	.word	0x000876b7
   84c44:	2001      	movs	r0, #1
   84c46:	f1bc 0f00 	cmp.w	ip, #0
   84c4a:	bfa8      	it	ge
   84c4c:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   84c50:	ea54 0105 	orrs.w	r1, r4, r5
   84c54:	d102      	bne.n	84c5c <_vfiprintf_r+0x4b0>
   84c56:	f1bc 0f00 	cmp.w	ip, #0
   84c5a:	d05a      	beq.n	84d12 <_vfiprintf_r+0x566>
   84c5c:	2801      	cmp	r0, #1
   84c5e:	d01d      	beq.n	84c9c <_vfiprintf_r+0x4f0>
   84c60:	2802      	cmp	r0, #2
   84c62:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84c66:	d043      	beq.n	84cf0 <_vfiprintf_r+0x544>
   84c68:	f004 0207 	and.w	r2, r4, #7
   84c6c:	08e4      	lsrs	r4, r4, #3
   84c6e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   84c72:	08e9      	lsrs	r1, r5, #3
   84c74:	4604      	mov	r4, r0
   84c76:	460d      	mov	r5, r1
   84c78:	3230      	adds	r2, #48	; 0x30
   84c7a:	ea54 0105 	orrs.w	r1, r4, r5
   84c7e:	469a      	mov	sl, r3
   84c80:	701a      	strb	r2, [r3, #0]
   84c82:	f103 33ff 	add.w	r3, r3, #4294967295
   84c86:	d1ef      	bne.n	84c68 <_vfiprintf_r+0x4bc>
   84c88:	07f8      	lsls	r0, r7, #31
   84c8a:	4655      	mov	r5, sl
   84c8c:	d54c      	bpl.n	84d28 <_vfiprintf_r+0x57c>
   84c8e:	2a30      	cmp	r2, #48	; 0x30
   84c90:	d04a      	beq.n	84d28 <_vfiprintf_r+0x57c>
   84c92:	2230      	movs	r2, #48	; 0x30
   84c94:	469a      	mov	sl, r3
   84c96:	f805 2c01 	strb.w	r2, [r5, #-1]
   84c9a:	e045      	b.n	84d28 <_vfiprintf_r+0x57c>
   84c9c:	2d00      	cmp	r5, #0
   84c9e:	bf08      	it	eq
   84ca0:	2c0a      	cmpeq	r4, #10
   84ca2:	d205      	bcs.n	84cb0 <_vfiprintf_r+0x504>
   84ca4:	3430      	adds	r4, #48	; 0x30
   84ca6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   84caa:	f80a 4f27 	strb.w	r4, [sl, #39]!
   84cae:	e03b      	b.n	84d28 <_vfiprintf_r+0x57c>
   84cb0:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84cb4:	9303      	str	r3, [sp, #12]
   84cb6:	4620      	mov	r0, r4
   84cb8:	4629      	mov	r1, r5
   84cba:	220a      	movs	r2, #10
   84cbc:	2300      	movs	r3, #0
   84cbe:	f8cd c000 	str.w	ip, [sp]
   84cc2:	f002 f9a5 	bl	87010 <__aeabi_uldivmod>
   84cc6:	9803      	ldr	r0, [sp, #12]
   84cc8:	3230      	adds	r2, #48	; 0x30
   84cca:	f800 2901 	strb.w	r2, [r0], #-1
   84cce:	4629      	mov	r1, r5
   84cd0:	220a      	movs	r2, #10
   84cd2:	2300      	movs	r3, #0
   84cd4:	f8dd a00c 	ldr.w	sl, [sp, #12]
   84cd8:	9003      	str	r0, [sp, #12]
   84cda:	4620      	mov	r0, r4
   84cdc:	f002 f998 	bl	87010 <__aeabi_uldivmod>
   84ce0:	4604      	mov	r4, r0
   84ce2:	460d      	mov	r5, r1
   84ce4:	ea54 0105 	orrs.w	r1, r4, r5
   84ce8:	f8dd c000 	ldr.w	ip, [sp]
   84cec:	d1e3      	bne.n	84cb6 <_vfiprintf_r+0x50a>
   84cee:	e01b      	b.n	84d28 <_vfiprintf_r+0x57c>
   84cf0:	9905      	ldr	r1, [sp, #20]
   84cf2:	f004 000f 	and.w	r0, r4, #15
   84cf6:	0924      	lsrs	r4, r4, #4
   84cf8:	5c0a      	ldrb	r2, [r1, r0]
   84cfa:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   84cfe:	0929      	lsrs	r1, r5, #4
   84d00:	4604      	mov	r4, r0
   84d02:	460d      	mov	r5, r1
   84d04:	469a      	mov	sl, r3
   84d06:	f803 2901 	strb.w	r2, [r3], #-1
   84d0a:	ea54 0205 	orrs.w	r2, r4, r5
   84d0e:	d1ef      	bne.n	84cf0 <_vfiprintf_r+0x544>
   84d10:	e00a      	b.n	84d28 <_vfiprintf_r+0x57c>
   84d12:	b938      	cbnz	r0, 84d24 <_vfiprintf_r+0x578>
   84d14:	07f9      	lsls	r1, r7, #31
   84d16:	d505      	bpl.n	84d24 <_vfiprintf_r+0x578>
   84d18:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   84d1c:	2030      	movs	r0, #48	; 0x30
   84d1e:	f80a 0f27 	strb.w	r0, [sl, #39]!
   84d22:	e001      	b.n	84d28 <_vfiprintf_r+0x57c>
   84d24:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   84d28:	ad18      	add	r5, sp, #96	; 0x60
   84d2a:	ebca 0405 	rsb	r4, sl, r5
   84d2e:	4665      	mov	r5, ip
   84d30:	e00f      	b.n	84d52 <_vfiprintf_r+0x5a6>
   84d32:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84d36:	2b00      	cmp	r3, #0
   84d38:	f000 8176 	beq.w	85028 <_vfiprintf_r+0x87c>
   84d3c:	2500      	movs	r5, #0
   84d3e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   84d42:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84d46:	2401      	movs	r4, #1
   84d48:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   84d4c:	e001      	b.n	84d52 <_vfiprintf_r+0x5a6>
   84d4e:	4664      	mov	r4, ip
   84d50:	4605      	mov	r5, r0
   84d52:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   84d56:	42ac      	cmp	r4, r5
   84d58:	bfac      	ite	ge
   84d5a:	4621      	movge	r1, r4
   84d5c:	4629      	movlt	r1, r5
   84d5e:	9103      	str	r1, [sp, #12]
   84d60:	b113      	cbz	r3, 84d68 <_vfiprintf_r+0x5bc>
   84d62:	9803      	ldr	r0, [sp, #12]
   84d64:	1c42      	adds	r2, r0, #1
   84d66:	9203      	str	r2, [sp, #12]
   84d68:	f017 0102 	ands.w	r1, r7, #2
   84d6c:	9106      	str	r1, [sp, #24]
   84d6e:	d002      	beq.n	84d76 <_vfiprintf_r+0x5ca>
   84d70:	9b03      	ldr	r3, [sp, #12]
   84d72:	1c98      	adds	r0, r3, #2
   84d74:	9003      	str	r0, [sp, #12]
   84d76:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   84d7a:	9207      	str	r2, [sp, #28]
   84d7c:	d13c      	bne.n	84df8 <_vfiprintf_r+0x64c>
   84d7e:	9904      	ldr	r1, [sp, #16]
   84d80:	9b03      	ldr	r3, [sp, #12]
   84d82:	1acb      	subs	r3, r1, r3
   84d84:	2b00      	cmp	r3, #0
   84d86:	dd37      	ble.n	84df8 <_vfiprintf_r+0x64c>
   84d88:	48a5      	ldr	r0, [pc, #660]	; (85020 <_vfiprintf_r+0x874>)
   84d8a:	2b10      	cmp	r3, #16
   84d8c:	f8c8 0000 	str.w	r0, [r8]
   84d90:	dd1b      	ble.n	84dca <_vfiprintf_r+0x61e>
   84d92:	990c      	ldr	r1, [sp, #48]	; 0x30
   84d94:	2210      	movs	r2, #16
   84d96:	980d      	ldr	r0, [sp, #52]	; 0x34
   84d98:	f8c8 2004 	str.w	r2, [r8, #4]
   84d9c:	1c4a      	adds	r2, r1, #1
   84d9e:	3010      	adds	r0, #16
   84da0:	2a07      	cmp	r2, #7
   84da2:	900d      	str	r0, [sp, #52]	; 0x34
   84da4:	920c      	str	r2, [sp, #48]	; 0x30
   84da6:	dc02      	bgt.n	84dae <_vfiprintf_r+0x602>
   84da8:	f108 0808 	add.w	r8, r8, #8
   84dac:	e00b      	b.n	84dc6 <_vfiprintf_r+0x61a>
   84dae:	4658      	mov	r0, fp
   84db0:	4649      	mov	r1, r9
   84db2:	aa0b      	add	r2, sp, #44	; 0x2c
   84db4:	9300      	str	r3, [sp, #0]
   84db6:	f7ff fcc5 	bl	84744 <__sprint_r>
   84dba:	9b00      	ldr	r3, [sp, #0]
   84dbc:	2800      	cmp	r0, #0
   84dbe:	f040 813a 	bne.w	85036 <_vfiprintf_r+0x88a>
   84dc2:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84dc6:	3b10      	subs	r3, #16
   84dc8:	e7de      	b.n	84d88 <_vfiprintf_r+0x5dc>
   84dca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84dcc:	f8c8 3004 	str.w	r3, [r8, #4]
   84dd0:	18d1      	adds	r1, r2, r3
   84dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84dd4:	910d      	str	r1, [sp, #52]	; 0x34
   84dd6:	1c58      	adds	r0, r3, #1
   84dd8:	2807      	cmp	r0, #7
   84dda:	900c      	str	r0, [sp, #48]	; 0x30
   84ddc:	dc02      	bgt.n	84de4 <_vfiprintf_r+0x638>
   84dde:	f108 0808 	add.w	r8, r8, #8
   84de2:	e009      	b.n	84df8 <_vfiprintf_r+0x64c>
   84de4:	4658      	mov	r0, fp
   84de6:	4649      	mov	r1, r9
   84de8:	aa0b      	add	r2, sp, #44	; 0x2c
   84dea:	f7ff fcab 	bl	84744 <__sprint_r>
   84dee:	2800      	cmp	r0, #0
   84df0:	f040 8121 	bne.w	85036 <_vfiprintf_r+0x88a>
   84df4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84df8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   84dfc:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   84e00:	b1ca      	cbz	r2, 84e36 <_vfiprintf_r+0x68a>
   84e02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84e04:	2301      	movs	r3, #1
   84e06:	980d      	ldr	r0, [sp, #52]	; 0x34
   84e08:	f8c8 3004 	str.w	r3, [r8, #4]
   84e0c:	1c53      	adds	r3, r2, #1
   84e0e:	f8c8 1000 	str.w	r1, [r8]
   84e12:	1c41      	adds	r1, r0, #1
   84e14:	2b07      	cmp	r3, #7
   84e16:	910d      	str	r1, [sp, #52]	; 0x34
   84e18:	930c      	str	r3, [sp, #48]	; 0x30
   84e1a:	dc02      	bgt.n	84e22 <_vfiprintf_r+0x676>
   84e1c:	f108 0808 	add.w	r8, r8, #8
   84e20:	e009      	b.n	84e36 <_vfiprintf_r+0x68a>
   84e22:	4658      	mov	r0, fp
   84e24:	4649      	mov	r1, r9
   84e26:	aa0b      	add	r2, sp, #44	; 0x2c
   84e28:	f7ff fc8c 	bl	84744 <__sprint_r>
   84e2c:	2800      	cmp	r0, #0
   84e2e:	f040 8102 	bne.w	85036 <_vfiprintf_r+0x88a>
   84e32:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84e36:	9806      	ldr	r0, [sp, #24]
   84e38:	b1d0      	cbz	r0, 84e70 <_vfiprintf_r+0x6c4>
   84e3a:	a90a      	add	r1, sp, #40	; 0x28
   84e3c:	f8c8 1000 	str.w	r1, [r8]
   84e40:	990c      	ldr	r1, [sp, #48]	; 0x30
   84e42:	2202      	movs	r2, #2
   84e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84e46:	f8c8 2004 	str.w	r2, [r8, #4]
   84e4a:	1c4a      	adds	r2, r1, #1
   84e4c:	1c98      	adds	r0, r3, #2
   84e4e:	2a07      	cmp	r2, #7
   84e50:	900d      	str	r0, [sp, #52]	; 0x34
   84e52:	920c      	str	r2, [sp, #48]	; 0x30
   84e54:	dc02      	bgt.n	84e5c <_vfiprintf_r+0x6b0>
   84e56:	f108 0808 	add.w	r8, r8, #8
   84e5a:	e009      	b.n	84e70 <_vfiprintf_r+0x6c4>
   84e5c:	4658      	mov	r0, fp
   84e5e:	4649      	mov	r1, r9
   84e60:	aa0b      	add	r2, sp, #44	; 0x2c
   84e62:	f7ff fc6f 	bl	84744 <__sprint_r>
   84e66:	2800      	cmp	r0, #0
   84e68:	f040 80e5 	bne.w	85036 <_vfiprintf_r+0x88a>
   84e6c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84e70:	9b07      	ldr	r3, [sp, #28]
   84e72:	2b80      	cmp	r3, #128	; 0x80
   84e74:	d13c      	bne.n	84ef0 <_vfiprintf_r+0x744>
   84e76:	9804      	ldr	r0, [sp, #16]
   84e78:	9903      	ldr	r1, [sp, #12]
   84e7a:	1a43      	subs	r3, r0, r1
   84e7c:	2b00      	cmp	r3, #0
   84e7e:	dd37      	ble.n	84ef0 <_vfiprintf_r+0x744>
   84e80:	4a68      	ldr	r2, [pc, #416]	; (85024 <_vfiprintf_r+0x878>)
   84e82:	2b10      	cmp	r3, #16
   84e84:	f8c8 2000 	str.w	r2, [r8]
   84e88:	dd1b      	ble.n	84ec2 <_vfiprintf_r+0x716>
   84e8a:	980c      	ldr	r0, [sp, #48]	; 0x30
   84e8c:	2110      	movs	r1, #16
   84e8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84e90:	f8c8 1004 	str.w	r1, [r8, #4]
   84e94:	1c41      	adds	r1, r0, #1
   84e96:	3210      	adds	r2, #16
   84e98:	2907      	cmp	r1, #7
   84e9a:	920d      	str	r2, [sp, #52]	; 0x34
   84e9c:	910c      	str	r1, [sp, #48]	; 0x30
   84e9e:	dc02      	bgt.n	84ea6 <_vfiprintf_r+0x6fa>
   84ea0:	f108 0808 	add.w	r8, r8, #8
   84ea4:	e00b      	b.n	84ebe <_vfiprintf_r+0x712>
   84ea6:	4658      	mov	r0, fp
   84ea8:	4649      	mov	r1, r9
   84eaa:	aa0b      	add	r2, sp, #44	; 0x2c
   84eac:	9300      	str	r3, [sp, #0]
   84eae:	f7ff fc49 	bl	84744 <__sprint_r>
   84eb2:	9b00      	ldr	r3, [sp, #0]
   84eb4:	2800      	cmp	r0, #0
   84eb6:	f040 80be 	bne.w	85036 <_vfiprintf_r+0x88a>
   84eba:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84ebe:	3b10      	subs	r3, #16
   84ec0:	e7de      	b.n	84e80 <_vfiprintf_r+0x6d4>
   84ec2:	990c      	ldr	r1, [sp, #48]	; 0x30
   84ec4:	980d      	ldr	r0, [sp, #52]	; 0x34
   84ec6:	1c4a      	adds	r2, r1, #1
   84ec8:	f8c8 3004 	str.w	r3, [r8, #4]
   84ecc:	2a07      	cmp	r2, #7
   84ece:	4403      	add	r3, r0
   84ed0:	930d      	str	r3, [sp, #52]	; 0x34
   84ed2:	920c      	str	r2, [sp, #48]	; 0x30
   84ed4:	dc02      	bgt.n	84edc <_vfiprintf_r+0x730>
   84ed6:	f108 0808 	add.w	r8, r8, #8
   84eda:	e009      	b.n	84ef0 <_vfiprintf_r+0x744>
   84edc:	4658      	mov	r0, fp
   84ede:	4649      	mov	r1, r9
   84ee0:	aa0b      	add	r2, sp, #44	; 0x2c
   84ee2:	f7ff fc2f 	bl	84744 <__sprint_r>
   84ee6:	2800      	cmp	r0, #0
   84ee8:	f040 80a5 	bne.w	85036 <_vfiprintf_r+0x88a>
   84eec:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84ef0:	1b2d      	subs	r5, r5, r4
   84ef2:	2d00      	cmp	r5, #0
   84ef4:	dd34      	ble.n	84f60 <_vfiprintf_r+0x7b4>
   84ef6:	484b      	ldr	r0, [pc, #300]	; (85024 <_vfiprintf_r+0x878>)
   84ef8:	2d10      	cmp	r5, #16
   84efa:	f8c8 0000 	str.w	r0, [r8]
   84efe:	dd19      	ble.n	84f34 <_vfiprintf_r+0x788>
   84f00:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84f04:	1c43      	adds	r3, r0, #1
   84f06:	2110      	movs	r1, #16
   84f08:	3210      	adds	r2, #16
   84f0a:	2b07      	cmp	r3, #7
   84f0c:	f8c8 1004 	str.w	r1, [r8, #4]
   84f10:	920d      	str	r2, [sp, #52]	; 0x34
   84f12:	930c      	str	r3, [sp, #48]	; 0x30
   84f14:	dc02      	bgt.n	84f1c <_vfiprintf_r+0x770>
   84f16:	f108 0808 	add.w	r8, r8, #8
   84f1a:	e009      	b.n	84f30 <_vfiprintf_r+0x784>
   84f1c:	4658      	mov	r0, fp
   84f1e:	4649      	mov	r1, r9
   84f20:	aa0b      	add	r2, sp, #44	; 0x2c
   84f22:	f7ff fc0f 	bl	84744 <__sprint_r>
   84f26:	2800      	cmp	r0, #0
   84f28:	f040 8085 	bne.w	85036 <_vfiprintf_r+0x88a>
   84f2c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84f30:	3d10      	subs	r5, #16
   84f32:	e7e0      	b.n	84ef6 <_vfiprintf_r+0x74a>
   84f34:	990c      	ldr	r1, [sp, #48]	; 0x30
   84f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84f38:	1c4a      	adds	r2, r1, #1
   84f3a:	f8c8 5004 	str.w	r5, [r8, #4]
   84f3e:	2a07      	cmp	r2, #7
   84f40:	441d      	add	r5, r3
   84f42:	950d      	str	r5, [sp, #52]	; 0x34
   84f44:	920c      	str	r2, [sp, #48]	; 0x30
   84f46:	dc02      	bgt.n	84f4e <_vfiprintf_r+0x7a2>
   84f48:	f108 0808 	add.w	r8, r8, #8
   84f4c:	e008      	b.n	84f60 <_vfiprintf_r+0x7b4>
   84f4e:	4658      	mov	r0, fp
   84f50:	4649      	mov	r1, r9
   84f52:	aa0b      	add	r2, sp, #44	; 0x2c
   84f54:	f7ff fbf6 	bl	84744 <__sprint_r>
   84f58:	2800      	cmp	r0, #0
   84f5a:	d16c      	bne.n	85036 <_vfiprintf_r+0x88a>
   84f5c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84f62:	980d      	ldr	r0, [sp, #52]	; 0x34
   84f64:	1c59      	adds	r1, r3, #1
   84f66:	f8c8 4004 	str.w	r4, [r8, #4]
   84f6a:	2907      	cmp	r1, #7
   84f6c:	4404      	add	r4, r0
   84f6e:	f8c8 a000 	str.w	sl, [r8]
   84f72:	940d      	str	r4, [sp, #52]	; 0x34
   84f74:	910c      	str	r1, [sp, #48]	; 0x30
   84f76:	dc02      	bgt.n	84f7e <_vfiprintf_r+0x7d2>
   84f78:	f108 0308 	add.w	r3, r8, #8
   84f7c:	e007      	b.n	84f8e <_vfiprintf_r+0x7e2>
   84f7e:	4658      	mov	r0, fp
   84f80:	4649      	mov	r1, r9
   84f82:	aa0b      	add	r2, sp, #44	; 0x2c
   84f84:	f7ff fbde 	bl	84744 <__sprint_r>
   84f88:	2800      	cmp	r0, #0
   84f8a:	d154      	bne.n	85036 <_vfiprintf_r+0x88a>
   84f8c:	ab32      	add	r3, sp, #200	; 0xc8
   84f8e:	077a      	lsls	r2, r7, #29
   84f90:	d40b      	bmi.n	84faa <_vfiprintf_r+0x7fe>
   84f92:	9802      	ldr	r0, [sp, #8]
   84f94:	9b03      	ldr	r3, [sp, #12]
   84f96:	9904      	ldr	r1, [sp, #16]
   84f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84f9a:	428b      	cmp	r3, r1
   84f9c:	bfac      	ite	ge
   84f9e:	18c0      	addge	r0, r0, r3
   84fa0:	1840      	addlt	r0, r0, r1
   84fa2:	9002      	str	r0, [sp, #8]
   84fa4:	2a00      	cmp	r2, #0
   84fa6:	d036      	beq.n	85016 <_vfiprintf_r+0x86a>
   84fa8:	e02f      	b.n	8500a <_vfiprintf_r+0x85e>
   84faa:	9c04      	ldr	r4, [sp, #16]
   84fac:	9a03      	ldr	r2, [sp, #12]
   84fae:	1aa4      	subs	r4, r4, r2
   84fb0:	2c00      	cmp	r4, #0
   84fb2:	ddee      	ble.n	84f92 <_vfiprintf_r+0x7e6>
   84fb4:	481a      	ldr	r0, [pc, #104]	; (85020 <_vfiprintf_r+0x874>)
   84fb6:	2c10      	cmp	r4, #16
   84fb8:	6018      	str	r0, [r3, #0]
   84fba:	dd15      	ble.n	84fe8 <_vfiprintf_r+0x83c>
   84fbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84fbe:	2010      	movs	r0, #16
   84fc0:	990d      	ldr	r1, [sp, #52]	; 0x34
   84fc2:	6058      	str	r0, [r3, #4]
   84fc4:	1c50      	adds	r0, r2, #1
   84fc6:	3110      	adds	r1, #16
   84fc8:	2807      	cmp	r0, #7
   84fca:	910d      	str	r1, [sp, #52]	; 0x34
   84fcc:	900c      	str	r0, [sp, #48]	; 0x30
   84fce:	dc01      	bgt.n	84fd4 <_vfiprintf_r+0x828>
   84fd0:	3308      	adds	r3, #8
   84fd2:	e007      	b.n	84fe4 <_vfiprintf_r+0x838>
   84fd4:	4658      	mov	r0, fp
   84fd6:	4649      	mov	r1, r9
   84fd8:	aa0b      	add	r2, sp, #44	; 0x2c
   84fda:	f7ff fbb3 	bl	84744 <__sprint_r>
   84fde:	2800      	cmp	r0, #0
   84fe0:	d129      	bne.n	85036 <_vfiprintf_r+0x88a>
   84fe2:	ab32      	add	r3, sp, #200	; 0xc8
   84fe4:	3c10      	subs	r4, #16
   84fe6:	e7e5      	b.n	84fb4 <_vfiprintf_r+0x808>
   84fe8:	990c      	ldr	r1, [sp, #48]	; 0x30
   84fea:	605c      	str	r4, [r3, #4]
   84fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84fee:	1c4a      	adds	r2, r1, #1
   84ff0:	191c      	adds	r4, r3, r4
   84ff2:	2a07      	cmp	r2, #7
   84ff4:	940d      	str	r4, [sp, #52]	; 0x34
   84ff6:	920c      	str	r2, [sp, #48]	; 0x30
   84ff8:	ddcb      	ble.n	84f92 <_vfiprintf_r+0x7e6>
   84ffa:	4658      	mov	r0, fp
   84ffc:	4649      	mov	r1, r9
   84ffe:	aa0b      	add	r2, sp, #44	; 0x2c
   85000:	f7ff fba0 	bl	84744 <__sprint_r>
   85004:	2800      	cmp	r0, #0
   85006:	d0c4      	beq.n	84f92 <_vfiprintf_r+0x7e6>
   85008:	e015      	b.n	85036 <_vfiprintf_r+0x88a>
   8500a:	4658      	mov	r0, fp
   8500c:	4649      	mov	r1, r9
   8500e:	aa0b      	add	r2, sp, #44	; 0x2c
   85010:	f7ff fb98 	bl	84744 <__sprint_r>
   85014:	b978      	cbnz	r0, 85036 <_vfiprintf_r+0x88a>
   85016:	2500      	movs	r5, #0
   85018:	950c      	str	r5, [sp, #48]	; 0x30
   8501a:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   8501e:	e444      	b.n	848aa <_vfiprintf_r+0xfe>
   85020:	000876c8 	.word	0x000876c8
   85024:	000876d8 	.word	0x000876d8
   85028:	980d      	ldr	r0, [sp, #52]	; 0x34
   8502a:	b120      	cbz	r0, 85036 <_vfiprintf_r+0x88a>
   8502c:	4658      	mov	r0, fp
   8502e:	4649      	mov	r1, r9
   85030:	aa0b      	add	r2, sp, #44	; 0x2c
   85032:	f7ff fb87 	bl	84744 <__sprint_r>
   85036:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   8503a:	f001 0240 	and.w	r2, r1, #64	; 0x40
   8503e:	b213      	sxth	r3, r2
   85040:	2b00      	cmp	r3, #0
   85042:	f47f abe6 	bne.w	84812 <_vfiprintf_r+0x66>
   85046:	9802      	ldr	r0, [sp, #8]
   85048:	b033      	add	sp, #204	; 0xcc
   8504a:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   8504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085052 <vfiprintf>:
   85052:	b530      	push	{r4, r5, lr}
   85054:	4613      	mov	r3, r2
   85056:	4a05      	ldr	r2, [pc, #20]	; (8506c <vfiprintf+0x1a>)
   85058:	4605      	mov	r5, r0
   8505a:	460c      	mov	r4, r1
   8505c:	6810      	ldr	r0, [r2, #0]
   8505e:	4629      	mov	r1, r5
   85060:	4622      	mov	r2, r4
   85062:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85066:	f7ff bba1 	b.w	847ac <_vfiprintf_r>
   8506a:	bf00      	nop
   8506c:	20070040 	.word	0x20070040

00085070 <__swsetup_r>:
   85070:	b538      	push	{r3, r4, r5, lr}
   85072:	4b2c      	ldr	r3, [pc, #176]	; (85124 <__swsetup_r+0xb4>)
   85074:	4605      	mov	r5, r0
   85076:	6818      	ldr	r0, [r3, #0]
   85078:	460c      	mov	r4, r1
   8507a:	b118      	cbz	r0, 85084 <__swsetup_r+0x14>
   8507c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8507e:	b90a      	cbnz	r2, 85084 <__swsetup_r+0x14>
   85080:	f000 f99c 	bl	853bc <__sinit>
   85084:	89a0      	ldrh	r0, [r4, #12]
   85086:	f000 0108 	and.w	r1, r0, #8
   8508a:	b20b      	sxth	r3, r1
   8508c:	bb0b      	cbnz	r3, 850d2 <__swsetup_r+0x62>
   8508e:	f000 0210 	and.w	r2, r0, #16
   85092:	b211      	sxth	r1, r2
   85094:	b911      	cbnz	r1, 8509c <__swsetup_r+0x2c>
   85096:	f04f 30ff 	mov.w	r0, #4294967295
   8509a:	bd38      	pop	{r3, r4, r5, pc}
   8509c:	f000 0004 	and.w	r0, r0, #4
   850a0:	b203      	sxth	r3, r0
   850a2:	b193      	cbz	r3, 850ca <__swsetup_r+0x5a>
   850a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   850a6:	b141      	cbz	r1, 850ba <__swsetup_r+0x4a>
   850a8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   850ac:	4291      	cmp	r1, r2
   850ae:	d002      	beq.n	850b6 <__swsetup_r+0x46>
   850b0:	4628      	mov	r0, r5
   850b2:	f000 fac1 	bl	85638 <_free_r>
   850b6:	2100      	movs	r1, #0
   850b8:	6321      	str	r1, [r4, #48]	; 0x30
   850ba:	89a0      	ldrh	r0, [r4, #12]
   850bc:	6921      	ldr	r1, [r4, #16]
   850be:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   850c2:	2200      	movs	r2, #0
   850c4:	81a3      	strh	r3, [r4, #12]
   850c6:	6062      	str	r2, [r4, #4]
   850c8:	6021      	str	r1, [r4, #0]
   850ca:	89a0      	ldrh	r0, [r4, #12]
   850cc:	f040 0308 	orr.w	r3, r0, #8
   850d0:	81a3      	strh	r3, [r4, #12]
   850d2:	6922      	ldr	r2, [r4, #16]
   850d4:	b94a      	cbnz	r2, 850ea <__swsetup_r+0x7a>
   850d6:	89a1      	ldrh	r1, [r4, #12]
   850d8:	f401 7020 	and.w	r0, r1, #640	; 0x280
   850dc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   850e0:	d003      	beq.n	850ea <__swsetup_r+0x7a>
   850e2:	4628      	mov	r0, r5
   850e4:	4621      	mov	r1, r4
   850e6:	f000 fd3f 	bl	85b68 <__smakebuf_r>
   850ea:	89a3      	ldrh	r3, [r4, #12]
   850ec:	f013 0201 	ands.w	r2, r3, #1
   850f0:	d005      	beq.n	850fe <__swsetup_r+0x8e>
   850f2:	6961      	ldr	r1, [r4, #20]
   850f4:	2200      	movs	r2, #0
   850f6:	4248      	negs	r0, r1
   850f8:	60a2      	str	r2, [r4, #8]
   850fa:	61a0      	str	r0, [r4, #24]
   850fc:	e007      	b.n	8510e <__swsetup_r+0x9e>
   850fe:	f003 0102 	and.w	r1, r3, #2
   85102:	b208      	sxth	r0, r1
   85104:	b908      	cbnz	r0, 8510a <__swsetup_r+0x9a>
   85106:	6963      	ldr	r3, [r4, #20]
   85108:	e000      	b.n	8510c <__swsetup_r+0x9c>
   8510a:	4613      	mov	r3, r2
   8510c:	60a3      	str	r3, [r4, #8]
   8510e:	6923      	ldr	r3, [r4, #16]
   85110:	b933      	cbnz	r3, 85120 <__swsetup_r+0xb0>
   85112:	89a2      	ldrh	r2, [r4, #12]
   85114:	f002 0180 	and.w	r1, r2, #128	; 0x80
   85118:	b208      	sxth	r0, r1
   8511a:	2800      	cmp	r0, #0
   8511c:	d1bb      	bne.n	85096 <__swsetup_r+0x26>
   8511e:	bd38      	pop	{r3, r4, r5, pc}
   85120:	2000      	movs	r0, #0
   85122:	bd38      	pop	{r3, r4, r5, pc}
   85124:	20070040 	.word	0x20070040

00085128 <__register_exitproc>:
   85128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8512c:	4698      	mov	r8, r3
   8512e:	4b23      	ldr	r3, [pc, #140]	; (851bc <__register_exitproc+0x94>)
   85130:	4606      	mov	r6, r0
   85132:	681c      	ldr	r4, [r3, #0]
   85134:	460f      	mov	r7, r1
   85136:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8513a:	4691      	mov	r9, r2
   8513c:	b918      	cbnz	r0, 85146 <__register_exitproc+0x1e>
   8513e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   85142:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   85146:	6841      	ldr	r1, [r0, #4]
   85148:	291f      	cmp	r1, #31
   8514a:	dd16      	ble.n	8517a <__register_exitproc+0x52>
   8514c:	481c      	ldr	r0, [pc, #112]	; (851c0 <__register_exitproc+0x98>)
   8514e:	b918      	cbnz	r0, 85158 <__register_exitproc+0x30>
   85150:	f04f 30ff 	mov.w	r0, #4294967295
   85154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85158:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8515c:	f000 fd70 	bl	85c40 <malloc>
   85160:	2800      	cmp	r0, #0
   85162:	d0f5      	beq.n	85150 <__register_exitproc+0x28>
   85164:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   85168:	2500      	movs	r5, #0
   8516a:	6045      	str	r5, [r0, #4]
   8516c:	6002      	str	r2, [r0, #0]
   8516e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   85172:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   85176:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8517a:	b1b6      	cbz	r6, 851aa <__register_exitproc+0x82>
   8517c:	6844      	ldr	r4, [r0, #4]
   8517e:	2201      	movs	r2, #1
   85180:	fa02 f204 	lsl.w	r2, r2, r4
   85184:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   85188:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   8518c:	4311      	orrs	r1, r2
   8518e:	2e02      	cmp	r6, #2
   85190:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   85194:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   85198:	461c      	mov	r4, r3
   8519a:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8519e:	d104      	bne.n	851aa <__register_exitproc+0x82>
   851a0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   851a4:	431a      	orrs	r2, r3
   851a6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   851aa:	6841      	ldr	r1, [r0, #4]
   851ac:	1c8b      	adds	r3, r1, #2
   851ae:	1c4a      	adds	r2, r1, #1
   851b0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   851b4:	6042      	str	r2, [r0, #4]
   851b6:	2000      	movs	r0, #0
   851b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   851bc:	00087680 	.word	0x00087680
   851c0:	00085c41 	.word	0x00085c41

000851c4 <register_fini>:
   851c4:	4b02      	ldr	r3, [pc, #8]	; (851d0 <register_fini+0xc>)
   851c6:	b113      	cbz	r3, 851ce <register_fini+0xa>
   851c8:	4802      	ldr	r0, [pc, #8]	; (851d4 <register_fini+0x10>)
   851ca:	f7fe bd6b 	b.w	83ca4 <atexit>
   851ce:	4770      	bx	lr
   851d0:	00000000 	.word	0x00000000
   851d4:	00083cb1 	.word	0x00083cb1

000851d8 <_fflush_r>:
   851d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   851dc:	460c      	mov	r4, r1
   851de:	4605      	mov	r5, r0
   851e0:	b118      	cbz	r0, 851ea <_fflush_r+0x12>
   851e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   851e4:	b90b      	cbnz	r3, 851ea <_fflush_r+0x12>
   851e6:	f000 f8e9 	bl	853bc <__sinit>
   851ea:	89a2      	ldrh	r2, [r4, #12]
   851ec:	b332      	cbz	r2, 8523c <_fflush_r+0x64>
   851ee:	f002 0008 	and.w	r0, r2, #8
   851f2:	b201      	sxth	r1, r0
   851f4:	2900      	cmp	r1, #0
   851f6:	d162      	bne.n	852be <_fflush_r+0xe6>
   851f8:	6861      	ldr	r1, [r4, #4]
   851fa:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   851fe:	2900      	cmp	r1, #0
   85200:	81a0      	strh	r0, [r4, #12]
   85202:	dc02      	bgt.n	8520a <_fflush_r+0x32>
   85204:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   85206:	2b00      	cmp	r3, #0
   85208:	dd18      	ble.n	8523c <_fflush_r+0x64>
   8520a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   8520c:	b1b6      	cbz	r6, 8523c <_fflush_r+0x64>
   8520e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   85212:	2000      	movs	r0, #0
   85214:	b212      	sxth	r2, r2
   85216:	682f      	ldr	r7, [r5, #0]
   85218:	6028      	str	r0, [r5, #0]
   8521a:	b10a      	cbz	r2, 85220 <_fflush_r+0x48>
   8521c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   8521e:	e010      	b.n	85242 <_fflush_r+0x6a>
   85220:	2301      	movs	r3, #1
   85222:	4628      	mov	r0, r5
   85224:	69e1      	ldr	r1, [r4, #28]
   85226:	47b0      	blx	r6
   85228:	4602      	mov	r2, r0
   8522a:	3001      	adds	r0, #1
   8522c:	d109      	bne.n	85242 <_fflush_r+0x6a>
   8522e:	6829      	ldr	r1, [r5, #0]
   85230:	b139      	cbz	r1, 85242 <_fflush_r+0x6a>
   85232:	291d      	cmp	r1, #29
   85234:	d001      	beq.n	8523a <_fflush_r+0x62>
   85236:	2916      	cmp	r1, #22
   85238:	d14e      	bne.n	852d8 <_fflush_r+0x100>
   8523a:	602f      	str	r7, [r5, #0]
   8523c:	2000      	movs	r0, #0
   8523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85242:	89a6      	ldrh	r6, [r4, #12]
   85244:	f006 0104 	and.w	r1, r6, #4
   85248:	b20b      	sxth	r3, r1
   8524a:	b12b      	cbz	r3, 85258 <_fflush_r+0x80>
   8524c:	6860      	ldr	r0, [r4, #4]
   8524e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   85250:	1a12      	subs	r2, r2, r0
   85252:	b10e      	cbz	r6, 85258 <_fflush_r+0x80>
   85254:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   85256:	1a52      	subs	r2, r2, r1
   85258:	69e1      	ldr	r1, [r4, #28]
   8525a:	2300      	movs	r3, #0
   8525c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   8525e:	4628      	mov	r0, r5
   85260:	47b0      	blx	r6
   85262:	1c41      	adds	r1, r0, #1
   85264:	d105      	bne.n	85272 <_fflush_r+0x9a>
   85266:	682a      	ldr	r2, [r5, #0]
   85268:	b11a      	cbz	r2, 85272 <_fflush_r+0x9a>
   8526a:	2a1d      	cmp	r2, #29
   8526c:	d001      	beq.n	85272 <_fflush_r+0x9a>
   8526e:	2a16      	cmp	r2, #22
   85270:	d11f      	bne.n	852b2 <_fflush_r+0xda>
   85272:	89a3      	ldrh	r3, [r4, #12]
   85274:	2100      	movs	r1, #0
   85276:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   8527a:	81a2      	strh	r2, [r4, #12]
   8527c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   85280:	6922      	ldr	r2, [r4, #16]
   85282:	6061      	str	r1, [r4, #4]
   85284:	b219      	sxth	r1, r3
   85286:	6022      	str	r2, [r4, #0]
   85288:	b121      	cbz	r1, 85294 <_fflush_r+0xbc>
   8528a:	1c42      	adds	r2, r0, #1
   8528c:	d101      	bne.n	85292 <_fflush_r+0xba>
   8528e:	682a      	ldr	r2, [r5, #0]
   85290:	b902      	cbnz	r2, 85294 <_fflush_r+0xbc>
   85292:	6520      	str	r0, [r4, #80]	; 0x50
   85294:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85296:	602f      	str	r7, [r5, #0]
   85298:	2900      	cmp	r1, #0
   8529a:	d0cf      	beq.n	8523c <_fflush_r+0x64>
   8529c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   852a0:	4281      	cmp	r1, r0
   852a2:	d002      	beq.n	852aa <_fflush_r+0xd2>
   852a4:	4628      	mov	r0, r5
   852a6:	f000 f9c7 	bl	85638 <_free_r>
   852aa:	2000      	movs	r0, #0
   852ac:	6320      	str	r0, [r4, #48]	; 0x30
   852ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   852b2:	89a3      	ldrh	r3, [r4, #12]
   852b4:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   852b8:	81a1      	strh	r1, [r4, #12]
   852ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   852be:	6926      	ldr	r6, [r4, #16]
   852c0:	2e00      	cmp	r6, #0
   852c2:	d0bb      	beq.n	8523c <_fflush_r+0x64>
   852c4:	0792      	lsls	r2, r2, #30
   852c6:	6823      	ldr	r3, [r4, #0]
   852c8:	bf0c      	ite	eq
   852ca:	6962      	ldreq	r2, [r4, #20]
   852cc:	2200      	movne	r2, #0
   852ce:	ebc6 0803 	rsb	r8, r6, r3
   852d2:	6026      	str	r6, [r4, #0]
   852d4:	60a2      	str	r2, [r4, #8]
   852d6:	e012      	b.n	852fe <_fflush_r+0x126>
   852d8:	89a3      	ldrh	r3, [r4, #12]
   852da:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   852de:	81a0      	strh	r0, [r4, #12]
   852e0:	f04f 30ff 	mov.w	r0, #4294967295
   852e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   852e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   852ea:	4628      	mov	r0, r5
   852ec:	69e1      	ldr	r1, [r4, #28]
   852ee:	4632      	mov	r2, r6
   852f0:	4643      	mov	r3, r8
   852f2:	47b8      	blx	r7
   852f4:	2800      	cmp	r0, #0
   852f6:	ddef      	ble.n	852d8 <_fflush_r+0x100>
   852f8:	1836      	adds	r6, r6, r0
   852fa:	ebc0 0808 	rsb	r8, r0, r8
   852fe:	f1b8 0f00 	cmp.w	r8, #0
   85302:	dcf1      	bgt.n	852e8 <_fflush_r+0x110>
   85304:	e79a      	b.n	8523c <_fflush_r+0x64>

00085306 <fflush>:
   85306:	4601      	mov	r1, r0
   85308:	b920      	cbnz	r0, 85314 <fflush+0xe>
   8530a:	4804      	ldr	r0, [pc, #16]	; (8531c <fflush+0x16>)
   8530c:	4904      	ldr	r1, [pc, #16]	; (85320 <fflush+0x1a>)
   8530e:	6800      	ldr	r0, [r0, #0]
   85310:	f000 bbc4 	b.w	85a9c <_fwalk_reent>
   85314:	4b03      	ldr	r3, [pc, #12]	; (85324 <fflush+0x1e>)
   85316:	6818      	ldr	r0, [r3, #0]
   85318:	f7ff bf5e 	b.w	851d8 <_fflush_r>
   8531c:	00087680 	.word	0x00087680
   85320:	000851d9 	.word	0x000851d9
   85324:	20070040 	.word	0x20070040

00085328 <__fp_lock>:
   85328:	2000      	movs	r0, #0
   8532a:	4770      	bx	lr

0008532c <__fp_unlock>:
   8532c:	2000      	movs	r0, #0
   8532e:	4770      	bx	lr

00085330 <_cleanup_r>:
   85330:	4901      	ldr	r1, [pc, #4]	; (85338 <_cleanup_r+0x8>)
   85332:	f000 bb92 	b.w	85a5a <_fwalk>
   85336:	bf00      	nop
   85338:	00086f75 	.word	0x00086f75

0008533c <std.isra.0>:
   8533c:	2300      	movs	r3, #0
   8533e:	b510      	push	{r4, lr}
   85340:	4604      	mov	r4, r0
   85342:	6003      	str	r3, [r0, #0]
   85344:	6043      	str	r3, [r0, #4]
   85346:	6083      	str	r3, [r0, #8]
   85348:	8181      	strh	r1, [r0, #12]
   8534a:	6643      	str	r3, [r0, #100]	; 0x64
   8534c:	81c2      	strh	r2, [r0, #14]
   8534e:	6103      	str	r3, [r0, #16]
   85350:	6143      	str	r3, [r0, #20]
   85352:	6183      	str	r3, [r0, #24]
   85354:	4619      	mov	r1, r3
   85356:	2208      	movs	r2, #8
   85358:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   8535c:	f7fe fd0d 	bl	83d7a <memset>
   85360:	4804      	ldr	r0, [pc, #16]	; (85374 <std.isra.0+0x38>)
   85362:	4905      	ldr	r1, [pc, #20]	; (85378 <std.isra.0+0x3c>)
   85364:	4a05      	ldr	r2, [pc, #20]	; (8537c <std.isra.0+0x40>)
   85366:	4b06      	ldr	r3, [pc, #24]	; (85380 <std.isra.0+0x44>)
   85368:	61e4      	str	r4, [r4, #28]
   8536a:	6220      	str	r0, [r4, #32]
   8536c:	6261      	str	r1, [r4, #36]	; 0x24
   8536e:	62a2      	str	r2, [r4, #40]	; 0x28
   85370:	62e3      	str	r3, [r4, #44]	; 0x2c
   85372:	bd10      	pop	{r4, pc}
   85374:	000863b5 	.word	0x000863b5
   85378:	000863db 	.word	0x000863db
   8537c:	00086417 	.word	0x00086417
   85380:	0008643b 	.word	0x0008643b

00085384 <__sfmoreglue>:
   85384:	b570      	push	{r4, r5, r6, lr}
   85386:	2568      	movs	r5, #104	; 0x68
   85388:	434d      	muls	r5, r1
   8538a:	460e      	mov	r6, r1
   8538c:	f105 010c 	add.w	r1, r5, #12
   85390:	f000 fc66 	bl	85c60 <_malloc_r>
   85394:	4604      	mov	r4, r0
   85396:	b140      	cbz	r0, 853aa <__sfmoreglue+0x26>
   85398:	f100 000c 	add.w	r0, r0, #12
   8539c:	2100      	movs	r1, #0
   8539e:	e884 0042 	stmia.w	r4, {r1, r6}
   853a2:	60a0      	str	r0, [r4, #8]
   853a4:	462a      	mov	r2, r5
   853a6:	f7fe fce8 	bl	83d7a <memset>
   853aa:	4620      	mov	r0, r4
   853ac:	bd70      	pop	{r4, r5, r6, pc}

000853ae <_cleanup>:
   853ae:	4b02      	ldr	r3, [pc, #8]	; (853b8 <_cleanup+0xa>)
   853b0:	6818      	ldr	r0, [r3, #0]
   853b2:	f7ff bfbd 	b.w	85330 <_cleanup_r>
   853b6:	bf00      	nop
   853b8:	00087680 	.word	0x00087680

000853bc <__sinit>:
   853bc:	b538      	push	{r3, r4, r5, lr}
   853be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   853c0:	4604      	mov	r4, r0
   853c2:	b9eb      	cbnz	r3, 85400 <__sinit+0x44>
   853c4:	4a0f      	ldr	r2, [pc, #60]	; (85404 <__sinit+0x48>)
   853c6:	2501      	movs	r5, #1
   853c8:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   853cc:	63c2      	str	r2, [r0, #60]	; 0x3c
   853ce:	6385      	str	r5, [r0, #56]	; 0x38
   853d0:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   853d4:	2003      	movs	r0, #3
   853d6:	461a      	mov	r2, r3
   853d8:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   853dc:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   853e0:	6860      	ldr	r0, [r4, #4]
   853e2:	2104      	movs	r1, #4
   853e4:	f7ff ffaa 	bl	8533c <std.isra.0>
   853e8:	68a0      	ldr	r0, [r4, #8]
   853ea:	2109      	movs	r1, #9
   853ec:	462a      	mov	r2, r5
   853ee:	f7ff ffa5 	bl	8533c <std.isra.0>
   853f2:	68e0      	ldr	r0, [r4, #12]
   853f4:	2112      	movs	r1, #18
   853f6:	2202      	movs	r2, #2
   853f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   853fc:	f7ff bf9e 	b.w	8533c <std.isra.0>
   85400:	bd38      	pop	{r3, r4, r5, pc}
   85402:	bf00      	nop
   85404:	00085331 	.word	0x00085331

00085408 <__sfp>:
   85408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8540a:	4b1d      	ldr	r3, [pc, #116]	; (85480 <__sfp+0x78>)
   8540c:	4607      	mov	r7, r0
   8540e:	681e      	ldr	r6, [r3, #0]
   85410:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   85412:	b910      	cbnz	r0, 8541a <__sfp+0x12>
   85414:	4630      	mov	r0, r6
   85416:	f7ff ffd1 	bl	853bc <__sinit>
   8541a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   8541e:	68b4      	ldr	r4, [r6, #8]
   85420:	6871      	ldr	r1, [r6, #4]
   85422:	3901      	subs	r1, #1
   85424:	d404      	bmi.n	85430 <__sfp+0x28>
   85426:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   8542a:	b185      	cbz	r5, 8544e <__sfp+0x46>
   8542c:	3468      	adds	r4, #104	; 0x68
   8542e:	e7f8      	b.n	85422 <__sfp+0x1a>
   85430:	6832      	ldr	r2, [r6, #0]
   85432:	b10a      	cbz	r2, 85438 <__sfp+0x30>
   85434:	6836      	ldr	r6, [r6, #0]
   85436:	e7f2      	b.n	8541e <__sfp+0x16>
   85438:	4638      	mov	r0, r7
   8543a:	2104      	movs	r1, #4
   8543c:	f7ff ffa2 	bl	85384 <__sfmoreglue>
   85440:	6030      	str	r0, [r6, #0]
   85442:	2800      	cmp	r0, #0
   85444:	d1f6      	bne.n	85434 <__sfp+0x2c>
   85446:	240c      	movs	r4, #12
   85448:	603c      	str	r4, [r7, #0]
   8544a:	4604      	mov	r4, r0
   8544c:	e015      	b.n	8547a <__sfp+0x72>
   8544e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   85452:	2001      	movs	r0, #1
   85454:	81a0      	strh	r0, [r4, #12]
   85456:	81e3      	strh	r3, [r4, #14]
   85458:	6665      	str	r5, [r4, #100]	; 0x64
   8545a:	6025      	str	r5, [r4, #0]
   8545c:	60a5      	str	r5, [r4, #8]
   8545e:	6065      	str	r5, [r4, #4]
   85460:	6125      	str	r5, [r4, #16]
   85462:	6165      	str	r5, [r4, #20]
   85464:	61a5      	str	r5, [r4, #24]
   85466:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   8546a:	4629      	mov	r1, r5
   8546c:	2208      	movs	r2, #8
   8546e:	f7fe fc84 	bl	83d7a <memset>
   85472:	6325      	str	r5, [r4, #48]	; 0x30
   85474:	6365      	str	r5, [r4, #52]	; 0x34
   85476:	6465      	str	r5, [r4, #68]	; 0x44
   85478:	64a5      	str	r5, [r4, #72]	; 0x48
   8547a:	4620      	mov	r0, r4
   8547c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8547e:	bf00      	nop
   85480:	00087680 	.word	0x00087680

00085484 <__sfp_lock_acquire>:
   85484:	4770      	bx	lr

00085486 <__sfp_lock_release>:
   85486:	4770      	bx	lr

00085488 <__sinit_lock_acquire>:
   85488:	4770      	bx	lr

0008548a <__sinit_lock_release>:
   8548a:	4770      	bx	lr

0008548c <__fp_lock_all>:
   8548c:	4b02      	ldr	r3, [pc, #8]	; (85498 <__fp_lock_all+0xc>)
   8548e:	4903      	ldr	r1, [pc, #12]	; (8549c <__fp_lock_all+0x10>)
   85490:	6818      	ldr	r0, [r3, #0]
   85492:	f000 bae2 	b.w	85a5a <_fwalk>
   85496:	bf00      	nop
   85498:	20070040 	.word	0x20070040
   8549c:	00085329 	.word	0x00085329

000854a0 <__fp_unlock_all>:
   854a0:	4b02      	ldr	r3, [pc, #8]	; (854ac <__fp_unlock_all+0xc>)
   854a2:	4903      	ldr	r1, [pc, #12]	; (854b0 <__fp_unlock_all+0x10>)
   854a4:	6818      	ldr	r0, [r3, #0]
   854a6:	f000 bad8 	b.w	85a5a <_fwalk>
   854aa:	bf00      	nop
   854ac:	20070040 	.word	0x20070040
   854b0:	0008532d 	.word	0x0008532d

000854b4 <_fputwc_r>:
   854b4:	8993      	ldrh	r3, [r2, #12]
   854b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   854ba:	4614      	mov	r4, r2
   854bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   854c0:	4680      	mov	r8, r0
   854c2:	b210      	sxth	r0, r2
   854c4:	460e      	mov	r6, r1
   854c6:	b930      	cbnz	r0, 854d6 <_fputwc_r+0x22>
   854c8:	6e67      	ldr	r7, [r4, #100]	; 0x64
   854ca:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   854ce:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   854d2:	81a1      	strh	r1, [r4, #12]
   854d4:	6663      	str	r3, [r4, #100]	; 0x64
   854d6:	f000 fb29 	bl	85b2c <__locale_mb_cur_max>
   854da:	2801      	cmp	r0, #1
   854dc:	d106      	bne.n	854ec <_fputwc_r+0x38>
   854de:	b12e      	cbz	r6, 854ec <_fputwc_r+0x38>
   854e0:	2eff      	cmp	r6, #255	; 0xff
   854e2:	d803      	bhi.n	854ec <_fputwc_r+0x38>
   854e4:	f88d 6004 	strb.w	r6, [sp, #4]
   854e8:	4607      	mov	r7, r0
   854ea:	e00f      	b.n	8550c <_fputwc_r+0x58>
   854ec:	4632      	mov	r2, r6
   854ee:	4640      	mov	r0, r8
   854f0:	a901      	add	r1, sp, #4
   854f2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   854f6:	f001 fc83 	bl	86e00 <_wcrtomb_r>
   854fa:	1c42      	adds	r2, r0, #1
   854fc:	4607      	mov	r7, r0
   854fe:	d105      	bne.n	8550c <_fputwc_r+0x58>
   85500:	89a2      	ldrh	r2, [r4, #12]
   85502:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   85506:	81a0      	strh	r0, [r4, #12]
   85508:	4638      	mov	r0, r7
   8550a:	e031      	b.n	85570 <_fputwc_r+0xbc>
   8550c:	2500      	movs	r5, #0
   8550e:	42bd      	cmp	r5, r7
   85510:	d02a      	beq.n	85568 <_fputwc_r+0xb4>
   85512:	68a1      	ldr	r1, [r4, #8]
   85514:	ab01      	add	r3, sp, #4
   85516:	1e4a      	subs	r2, r1, #1
   85518:	2a00      	cmp	r2, #0
   8551a:	60a2      	str	r2, [r4, #8]
   8551c:	da1a      	bge.n	85554 <_fputwc_r+0xa0>
   8551e:	69a0      	ldr	r0, [r4, #24]
   85520:	4282      	cmp	r2, r0
   85522:	db0c      	blt.n	8553e <_fputwc_r+0x8a>
   85524:	6821      	ldr	r1, [r4, #0]
   85526:	5d5a      	ldrb	r2, [r3, r5]
   85528:	700a      	strb	r2, [r1, #0]
   8552a:	6823      	ldr	r3, [r4, #0]
   8552c:	7819      	ldrb	r1, [r3, #0]
   8552e:	290a      	cmp	r1, #10
   85530:	d003      	beq.n	8553a <_fputwc_r+0x86>
   85532:	3301      	adds	r3, #1
   85534:	2200      	movs	r2, #0
   85536:	6023      	str	r3, [r4, #0]
   85538:	e013      	b.n	85562 <_fputwc_r+0xae>
   8553a:	4640      	mov	r0, r8
   8553c:	e001      	b.n	85542 <_fputwc_r+0x8e>
   8553e:	5d59      	ldrb	r1, [r3, r5]
   85540:	4640      	mov	r0, r8
   85542:	4622      	mov	r2, r4
   85544:	f001 fc02 	bl	86d4c <__swbuf_r>
   85548:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   8554c:	4248      	negs	r0, r1
   8554e:	eb50 0201 	adcs.w	r2, r0, r1
   85552:	e006      	b.n	85562 <_fputwc_r+0xae>
   85554:	6820      	ldr	r0, [r4, #0]
   85556:	5d59      	ldrb	r1, [r3, r5]
   85558:	7001      	strb	r1, [r0, #0]
   8555a:	6822      	ldr	r2, [r4, #0]
   8555c:	1c53      	adds	r3, r2, #1
   8555e:	6023      	str	r3, [r4, #0]
   85560:	e000      	b.n	85564 <_fputwc_r+0xb0>
   85562:	b91a      	cbnz	r2, 8556c <_fputwc_r+0xb8>
   85564:	3501      	adds	r5, #1
   85566:	e7d2      	b.n	8550e <_fputwc_r+0x5a>
   85568:	4630      	mov	r0, r6
   8556a:	e001      	b.n	85570 <_fputwc_r+0xbc>
   8556c:	f04f 30ff 	mov.w	r0, #4294967295
   85570:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00085574 <fputwc>:
   85574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85576:	4c08      	ldr	r4, [pc, #32]	; (85598 <fputwc+0x24>)
   85578:	4607      	mov	r7, r0
   8557a:	6820      	ldr	r0, [r4, #0]
   8557c:	460e      	mov	r6, r1
   8557e:	b118      	cbz	r0, 85588 <fputwc+0x14>
   85580:	6b85      	ldr	r5, [r0, #56]	; 0x38
   85582:	b90d      	cbnz	r5, 85588 <fputwc+0x14>
   85584:	f7ff ff1a 	bl	853bc <__sinit>
   85588:	6820      	ldr	r0, [r4, #0]
   8558a:	4639      	mov	r1, r7
   8558c:	4632      	mov	r2, r6
   8558e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   85592:	f7ff bf8f 	b.w	854b4 <_fputwc_r>
   85596:	bf00      	nop
   85598:	20070040 	.word	0x20070040

0008559c <_malloc_trim_r>:
   8559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8559e:	4d23      	ldr	r5, [pc, #140]	; (8562c <_malloc_trim_r+0x90>)
   855a0:	460e      	mov	r6, r1
   855a2:	4604      	mov	r4, r0
   855a4:	f000 fd86 	bl	860b4 <__malloc_lock>
   855a8:	68ab      	ldr	r3, [r5, #8]
   855aa:	685f      	ldr	r7, [r3, #4]
   855ac:	f027 0703 	bic.w	r7, r7, #3
   855b0:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   855b4:	1b81      	subs	r1, r0, r6
   855b6:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   855ba:	f022 060f 	bic.w	r6, r2, #15
   855be:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   855c2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   855c6:	da04      	bge.n	855d2 <_malloc_trim_r+0x36>
   855c8:	4620      	mov	r0, r4
   855ca:	f000 fd74 	bl	860b6 <__malloc_unlock>
   855ce:	2000      	movs	r0, #0
   855d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   855d2:	2100      	movs	r1, #0
   855d4:	4620      	mov	r0, r4
   855d6:	f000 fedd 	bl	86394 <_sbrk_r>
   855da:	68ab      	ldr	r3, [r5, #8]
   855dc:	19d9      	adds	r1, r3, r7
   855de:	4288      	cmp	r0, r1
   855e0:	d1f2      	bne.n	855c8 <_malloc_trim_r+0x2c>
   855e2:	4271      	negs	r1, r6
   855e4:	4620      	mov	r0, r4
   855e6:	f000 fed5 	bl	86394 <_sbrk_r>
   855ea:	3001      	adds	r0, #1
   855ec:	d110      	bne.n	85610 <_malloc_trim_r+0x74>
   855ee:	2100      	movs	r1, #0
   855f0:	4620      	mov	r0, r4
   855f2:	f000 fecf 	bl	86394 <_sbrk_r>
   855f6:	68ab      	ldr	r3, [r5, #8]
   855f8:	1ac2      	subs	r2, r0, r3
   855fa:	2a0f      	cmp	r2, #15
   855fc:	dde4      	ble.n	855c8 <_malloc_trim_r+0x2c>
   855fe:	490c      	ldr	r1, [pc, #48]	; (85630 <_malloc_trim_r+0x94>)
   85600:	f042 0201 	orr.w	r2, r2, #1
   85604:	6809      	ldr	r1, [r1, #0]
   85606:	605a      	str	r2, [r3, #4]
   85608:	1a40      	subs	r0, r0, r1
   8560a:	490a      	ldr	r1, [pc, #40]	; (85634 <_malloc_trim_r+0x98>)
   8560c:	6008      	str	r0, [r1, #0]
   8560e:	e7db      	b.n	855c8 <_malloc_trim_r+0x2c>
   85610:	4b08      	ldr	r3, [pc, #32]	; (85634 <_malloc_trim_r+0x98>)
   85612:	68a8      	ldr	r0, [r5, #8]
   85614:	681a      	ldr	r2, [r3, #0]
   85616:	1bbf      	subs	r7, r7, r6
   85618:	f047 0701 	orr.w	r7, r7, #1
   8561c:	6047      	str	r7, [r0, #4]
   8561e:	1b96      	subs	r6, r2, r6
   85620:	4620      	mov	r0, r4
   85622:	601e      	str	r6, [r3, #0]
   85624:	f000 fd47 	bl	860b6 <__malloc_unlock>
   85628:	2001      	movs	r0, #1
   8562a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8562c:	200704ec 	.word	0x200704ec
   85630:	200708f4 	.word	0x200708f4
   85634:	2007ab08 	.word	0x2007ab08

00085638 <_free_r>:
   85638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8563a:	4606      	mov	r6, r0
   8563c:	460d      	mov	r5, r1
   8563e:	2900      	cmp	r1, #0
   85640:	f000 80a6 	beq.w	85790 <_free_r+0x158>
   85644:	f000 fd36 	bl	860b4 <__malloc_lock>
   85648:	f855 cc04 	ldr.w	ip, [r5, #-4]
   8564c:	4f51      	ldr	r7, [pc, #324]	; (85794 <_free_r+0x15c>)
   8564e:	f1a5 0308 	sub.w	r3, r5, #8
   85652:	f02c 0201 	bic.w	r2, ip, #1
   85656:	189c      	adds	r4, r3, r2
   85658:	68b9      	ldr	r1, [r7, #8]
   8565a:	6860      	ldr	r0, [r4, #4]
   8565c:	428c      	cmp	r4, r1
   8565e:	f020 0003 	bic.w	r0, r0, #3
   85662:	f00c 0101 	and.w	r1, ip, #1
   85666:	d11c      	bne.n	856a2 <_free_r+0x6a>
   85668:	1882      	adds	r2, r0, r2
   8566a:	b939      	cbnz	r1, 8567c <_free_r+0x44>
   8566c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   85670:	1a5b      	subs	r3, r3, r1
   85672:	6898      	ldr	r0, [r3, #8]
   85674:	1852      	adds	r2, r2, r1
   85676:	68d9      	ldr	r1, [r3, #12]
   85678:	60c1      	str	r1, [r0, #12]
   8567a:	6088      	str	r0, [r1, #8]
   8567c:	4845      	ldr	r0, [pc, #276]	; (85794 <_free_r+0x15c>)
   8567e:	f042 0101 	orr.w	r1, r2, #1
   85682:	6059      	str	r1, [r3, #4]
   85684:	6083      	str	r3, [r0, #8]
   85686:	4b44      	ldr	r3, [pc, #272]	; (85798 <_free_r+0x160>)
   85688:	6819      	ldr	r1, [r3, #0]
   8568a:	428a      	cmp	r2, r1
   8568c:	d304      	bcc.n	85698 <_free_r+0x60>
   8568e:	4a43      	ldr	r2, [pc, #268]	; (8579c <_free_r+0x164>)
   85690:	4630      	mov	r0, r6
   85692:	6811      	ldr	r1, [r2, #0]
   85694:	f7ff ff82 	bl	8559c <_malloc_trim_r>
   85698:	4630      	mov	r0, r6
   8569a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8569e:	f000 bd0a 	b.w	860b6 <__malloc_unlock>
   856a2:	6060      	str	r0, [r4, #4]
   856a4:	b959      	cbnz	r1, 856be <_free_r+0x86>
   856a6:	f855 5c08 	ldr.w	r5, [r5, #-8]
   856aa:	3708      	adds	r7, #8
   856ac:	1b5b      	subs	r3, r3, r5
   856ae:	1952      	adds	r2, r2, r5
   856b0:	689d      	ldr	r5, [r3, #8]
   856b2:	42bd      	cmp	r5, r7
   856b4:	d005      	beq.n	856c2 <_free_r+0x8a>
   856b6:	68df      	ldr	r7, [r3, #12]
   856b8:	60ef      	str	r7, [r5, #12]
   856ba:	60bd      	str	r5, [r7, #8]
   856bc:	e002      	b.n	856c4 <_free_r+0x8c>
   856be:	2100      	movs	r1, #0
   856c0:	e000      	b.n	856c4 <_free_r+0x8c>
   856c2:	2101      	movs	r1, #1
   856c4:	1825      	adds	r5, r4, r0
   856c6:	686d      	ldr	r5, [r5, #4]
   856c8:	f015 0f01 	tst.w	r5, #1
   856cc:	d10f      	bne.n	856ee <_free_r+0xb6>
   856ce:	1812      	adds	r2, r2, r0
   856d0:	b949      	cbnz	r1, 856e6 <_free_r+0xae>
   856d2:	68a0      	ldr	r0, [r4, #8]
   856d4:	4d32      	ldr	r5, [pc, #200]	; (857a0 <_free_r+0x168>)
   856d6:	42a8      	cmp	r0, r5
   856d8:	d105      	bne.n	856e6 <_free_r+0xae>
   856da:	60eb      	str	r3, [r5, #12]
   856dc:	60ab      	str	r3, [r5, #8]
   856de:	60d8      	str	r0, [r3, #12]
   856e0:	6098      	str	r0, [r3, #8]
   856e2:	2101      	movs	r1, #1
   856e4:	e003      	b.n	856ee <_free_r+0xb6>
   856e6:	68e0      	ldr	r0, [r4, #12]
   856e8:	68a4      	ldr	r4, [r4, #8]
   856ea:	60e0      	str	r0, [r4, #12]
   856ec:	6084      	str	r4, [r0, #8]
   856ee:	f042 0001 	orr.w	r0, r2, #1
   856f2:	6058      	str	r0, [r3, #4]
   856f4:	509a      	str	r2, [r3, r2]
   856f6:	2900      	cmp	r1, #0
   856f8:	d1ce      	bne.n	85698 <_free_r+0x60>
   856fa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   856fe:	d20c      	bcs.n	8571a <_free_r+0xe2>
   85700:	08d2      	lsrs	r2, r2, #3
   85702:	1090      	asrs	r0, r2, #2
   85704:	2401      	movs	r4, #1
   85706:	fa04 f400 	lsl.w	r4, r4, r0
   8570a:	4922      	ldr	r1, [pc, #136]	; (85794 <_free_r+0x15c>)
   8570c:	6848      	ldr	r0, [r1, #4]
   8570e:	4320      	orrs	r0, r4
   85710:	6048      	str	r0, [r1, #4]
   85712:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   85716:	6881      	ldr	r1, [r0, #8]
   85718:	e035      	b.n	85786 <_free_r+0x14e>
   8571a:	0a54      	lsrs	r4, r2, #9
   8571c:	2c04      	cmp	r4, #4
   8571e:	d802      	bhi.n	85726 <_free_r+0xee>
   85720:	0994      	lsrs	r4, r2, #6
   85722:	3438      	adds	r4, #56	; 0x38
   85724:	e016      	b.n	85754 <_free_r+0x11c>
   85726:	2c14      	cmp	r4, #20
   85728:	d801      	bhi.n	8572e <_free_r+0xf6>
   8572a:	345b      	adds	r4, #91	; 0x5b
   8572c:	e012      	b.n	85754 <_free_r+0x11c>
   8572e:	2c54      	cmp	r4, #84	; 0x54
   85730:	d802      	bhi.n	85738 <_free_r+0x100>
   85732:	0b14      	lsrs	r4, r2, #12
   85734:	346e      	adds	r4, #110	; 0x6e
   85736:	e00d      	b.n	85754 <_free_r+0x11c>
   85738:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   8573c:	d802      	bhi.n	85744 <_free_r+0x10c>
   8573e:	0bd4      	lsrs	r4, r2, #15
   85740:	3477      	adds	r4, #119	; 0x77
   85742:	e007      	b.n	85754 <_free_r+0x11c>
   85744:	f240 5554 	movw	r5, #1364	; 0x554
   85748:	42ac      	cmp	r4, r5
   8574a:	d802      	bhi.n	85752 <_free_r+0x11a>
   8574c:	0c94      	lsrs	r4, r2, #18
   8574e:	347c      	adds	r4, #124	; 0x7c
   85750:	e000      	b.n	85754 <_free_r+0x11c>
   85752:	247e      	movs	r4, #126	; 0x7e
   85754:	4d0f      	ldr	r5, [pc, #60]	; (85794 <_free_r+0x15c>)
   85756:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   8575a:	6881      	ldr	r1, [r0, #8]
   8575c:	4281      	cmp	r1, r0
   8575e:	d10c      	bne.n	8577a <_free_r+0x142>
   85760:	2201      	movs	r2, #1
   85762:	10a4      	asrs	r4, r4, #2
   85764:	fa02 f404 	lsl.w	r4, r2, r4
   85768:	6868      	ldr	r0, [r5, #4]
   8576a:	ea44 0200 	orr.w	r2, r4, r0
   8576e:	606a      	str	r2, [r5, #4]
   85770:	4608      	mov	r0, r1
   85772:	e008      	b.n	85786 <_free_r+0x14e>
   85774:	6889      	ldr	r1, [r1, #8]
   85776:	4281      	cmp	r1, r0
   85778:	d004      	beq.n	85784 <_free_r+0x14c>
   8577a:	684c      	ldr	r4, [r1, #4]
   8577c:	f024 0403 	bic.w	r4, r4, #3
   85780:	42a2      	cmp	r2, r4
   85782:	d3f7      	bcc.n	85774 <_free_r+0x13c>
   85784:	68c8      	ldr	r0, [r1, #12]
   85786:	60d8      	str	r0, [r3, #12]
   85788:	6099      	str	r1, [r3, #8]
   8578a:	6083      	str	r3, [r0, #8]
   8578c:	60cb      	str	r3, [r1, #12]
   8578e:	e783      	b.n	85698 <_free_r+0x60>
   85790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85792:	bf00      	nop
   85794:	200704ec 	.word	0x200704ec
   85798:	200708f8 	.word	0x200708f8
   8579c:	2007ab04 	.word	0x2007ab04
   857a0:	200704f4 	.word	0x200704f4

000857a4 <__sfvwrite_r>:
   857a4:	6893      	ldr	r3, [r2, #8]
   857a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   857aa:	4606      	mov	r6, r0
   857ac:	460c      	mov	r4, r1
   857ae:	4691      	mov	r9, r2
   857b0:	b90b      	cbnz	r3, 857b6 <__sfvwrite_r+0x12>
   857b2:	2000      	movs	r0, #0
   857b4:	e14f      	b.n	85a56 <__sfvwrite_r+0x2b2>
   857b6:	8988      	ldrh	r0, [r1, #12]
   857b8:	f000 0108 	and.w	r1, r0, #8
   857bc:	b20a      	sxth	r2, r1
   857be:	b10a      	cbz	r2, 857c4 <__sfvwrite_r+0x20>
   857c0:	6923      	ldr	r3, [r4, #16]
   857c2:	b95b      	cbnz	r3, 857dc <__sfvwrite_r+0x38>
   857c4:	4630      	mov	r0, r6
   857c6:	4621      	mov	r1, r4
   857c8:	f7ff fc52 	bl	85070 <__swsetup_r>
   857cc:	b130      	cbz	r0, 857dc <__sfvwrite_r+0x38>
   857ce:	89a1      	ldrh	r1, [r4, #12]
   857d0:	2209      	movs	r2, #9
   857d2:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   857d6:	81a0      	strh	r0, [r4, #12]
   857d8:	6032      	str	r2, [r6, #0]
   857da:	e13a      	b.n	85a52 <__sfvwrite_r+0x2ae>
   857dc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   857e0:	f8d9 8000 	ldr.w	r8, [r9]
   857e4:	f00a 0c02 	and.w	ip, sl, #2
   857e8:	fa0f f58c 	sxth.w	r5, ip
   857ec:	b315      	cbz	r5, 85834 <__sfvwrite_r+0x90>
   857ee:	f04f 0a00 	mov.w	sl, #0
   857f2:	4657      	mov	r7, sl
   857f4:	b937      	cbnz	r7, 85804 <__sfvwrite_r+0x60>
   857f6:	f8d8 a000 	ldr.w	sl, [r8]
   857fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
   857fe:	f108 0808 	add.w	r8, r8, #8
   85802:	e7f7      	b.n	857f4 <__sfvwrite_r+0x50>
   85804:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   85808:	bf34      	ite	cc
   8580a:	463b      	movcc	r3, r7
   8580c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   85810:	4630      	mov	r0, r6
   85812:	69e1      	ldr	r1, [r4, #28]
   85814:	4652      	mov	r2, sl
   85816:	6a65      	ldr	r5, [r4, #36]	; 0x24
   85818:	47a8      	blx	r5
   8581a:	2800      	cmp	r0, #0
   8581c:	f340 8115 	ble.w	85a4a <__sfvwrite_r+0x2a6>
   85820:	f8d9 1008 	ldr.w	r1, [r9, #8]
   85824:	4482      	add	sl, r0
   85826:	1a3f      	subs	r7, r7, r0
   85828:	1a08      	subs	r0, r1, r0
   8582a:	f8c9 0008 	str.w	r0, [r9, #8]
   8582e:	2800      	cmp	r0, #0
   85830:	d1e0      	bne.n	857f4 <__sfvwrite_r+0x50>
   85832:	e7be      	b.n	857b2 <__sfvwrite_r+0xe>
   85834:	f01a 0a01 	ands.w	sl, sl, #1
   85838:	d004      	beq.n	85844 <__sfvwrite_r+0xa0>
   8583a:	46ab      	mov	fp, r5
   8583c:	9501      	str	r5, [sp, #4]
   8583e:	462f      	mov	r7, r5
   85840:	46aa      	mov	sl, r5
   85842:	e0c7      	b.n	859d4 <__sfvwrite_r+0x230>
   85844:	4655      	mov	r5, sl
   85846:	b935      	cbnz	r5, 85856 <__sfvwrite_r+0xb2>
   85848:	f8d8 a000 	ldr.w	sl, [r8]
   8584c:	f8d8 5004 	ldr.w	r5, [r8, #4]
   85850:	f108 0808 	add.w	r8, r8, #8
   85854:	e7f7      	b.n	85846 <__sfvwrite_r+0xa2>
   85856:	89a2      	ldrh	r2, [r4, #12]
   85858:	f8d4 b008 	ldr.w	fp, [r4, #8]
   8585c:	f402 7000 	and.w	r0, r2, #512	; 0x200
   85860:	b203      	sxth	r3, r0
   85862:	2b00      	cmp	r3, #0
   85864:	d052      	beq.n	8590c <__sfvwrite_r+0x168>
   85866:	455d      	cmp	r5, fp
   85868:	d340      	bcc.n	858ec <__sfvwrite_r+0x148>
   8586a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8586e:	d03b      	beq.n	858e8 <__sfvwrite_r+0x144>
   85870:	6963      	ldr	r3, [r4, #20]
   85872:	f04f 0b03 	mov.w	fp, #3
   85876:	fb0b f303 	mul.w	r3, fp, r3
   8587a:	6921      	ldr	r1, [r4, #16]
   8587c:	6827      	ldr	r7, [r4, #0]
   8587e:	2002      	movs	r0, #2
   85880:	1a7f      	subs	r7, r7, r1
   85882:	fb93 fcf0 	sdiv	ip, r3, r0
   85886:	1c7b      	adds	r3, r7, #1
   85888:	1958      	adds	r0, r3, r5
   8588a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8588e:	4584      	cmp	ip, r0
   85890:	bf28      	it	cs
   85892:	4660      	movcs	r0, ip
   85894:	b213      	sxth	r3, r2
   85896:	9001      	str	r0, [sp, #4]
   85898:	4630      	mov	r0, r6
   8589a:	b17b      	cbz	r3, 858bc <__sfvwrite_r+0x118>
   8589c:	9901      	ldr	r1, [sp, #4]
   8589e:	f000 f9df 	bl	85c60 <_malloc_r>
   858a2:	4683      	mov	fp, r0
   858a4:	b198      	cbz	r0, 858ce <__sfvwrite_r+0x12a>
   858a6:	6921      	ldr	r1, [r4, #16]
   858a8:	463a      	mov	r2, r7
   858aa:	f7fe fa5d 	bl	83d68 <memcpy>
   858ae:	89a1      	ldrh	r1, [r4, #12]
   858b0:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   858b4:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   858b8:	81a2      	strh	r2, [r4, #12]
   858ba:	e00b      	b.n	858d4 <__sfvwrite_r+0x130>
   858bc:	9a01      	ldr	r2, [sp, #4]
   858be:	f000 fbfb 	bl	860b8 <_realloc_r>
   858c2:	4683      	mov	fp, r0
   858c4:	b930      	cbnz	r0, 858d4 <__sfvwrite_r+0x130>
   858c6:	4630      	mov	r0, r6
   858c8:	6921      	ldr	r1, [r4, #16]
   858ca:	f7ff feb5 	bl	85638 <_free_r>
   858ce:	230c      	movs	r3, #12
   858d0:	6033      	str	r3, [r6, #0]
   858d2:	e0ba      	b.n	85a4a <__sfvwrite_r+0x2a6>
   858d4:	9901      	ldr	r1, [sp, #4]
   858d6:	eb0b 0307 	add.w	r3, fp, r7
   858da:	1bcf      	subs	r7, r1, r7
   858dc:	f8c4 b010 	str.w	fp, [r4, #16]
   858e0:	6023      	str	r3, [r4, #0]
   858e2:	6161      	str	r1, [r4, #20]
   858e4:	46ab      	mov	fp, r5
   858e6:	60a7      	str	r7, [r4, #8]
   858e8:	455d      	cmp	r5, fp
   858ea:	d200      	bcs.n	858ee <__sfvwrite_r+0x14a>
   858ec:	46ab      	mov	fp, r5
   858ee:	465a      	mov	r2, fp
   858f0:	4651      	mov	r1, sl
   858f2:	6820      	ldr	r0, [r4, #0]
   858f4:	f000 fbc4 	bl	86080 <memmove>
   858f8:	68a0      	ldr	r0, [r4, #8]
   858fa:	6823      	ldr	r3, [r4, #0]
   858fc:	ebcb 0200 	rsb	r2, fp, r0
   85900:	eb03 010b 	add.w	r1, r3, fp
   85904:	60a2      	str	r2, [r4, #8]
   85906:	6021      	str	r1, [r4, #0]
   85908:	46ab      	mov	fp, r5
   8590a:	e02a      	b.n	85962 <__sfvwrite_r+0x1be>
   8590c:	6820      	ldr	r0, [r4, #0]
   8590e:	6921      	ldr	r1, [r4, #16]
   85910:	4288      	cmp	r0, r1
   85912:	d90f      	bls.n	85934 <__sfvwrite_r+0x190>
   85914:	455d      	cmp	r5, fp
   85916:	d90d      	bls.n	85934 <__sfvwrite_r+0x190>
   85918:	4651      	mov	r1, sl
   8591a:	465a      	mov	r2, fp
   8591c:	f000 fbb0 	bl	86080 <memmove>
   85920:	6822      	ldr	r2, [r4, #0]
   85922:	4621      	mov	r1, r4
   85924:	eb02 000b 	add.w	r0, r2, fp
   85928:	6020      	str	r0, [r4, #0]
   8592a:	4630      	mov	r0, r6
   8592c:	f7ff fc54 	bl	851d8 <_fflush_r>
   85930:	b1b8      	cbz	r0, 85962 <__sfvwrite_r+0x1be>
   85932:	e08a      	b.n	85a4a <__sfvwrite_r+0x2a6>
   85934:	6963      	ldr	r3, [r4, #20]
   85936:	429d      	cmp	r5, r3
   85938:	d308      	bcc.n	8594c <__sfvwrite_r+0x1a8>
   8593a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8593c:	4630      	mov	r0, r6
   8593e:	69e1      	ldr	r1, [r4, #28]
   85940:	4652      	mov	r2, sl
   85942:	47b8      	blx	r7
   85944:	f1b0 0b00 	subs.w	fp, r0, #0
   85948:	dc0b      	bgt.n	85962 <__sfvwrite_r+0x1be>
   8594a:	e07e      	b.n	85a4a <__sfvwrite_r+0x2a6>
   8594c:	4651      	mov	r1, sl
   8594e:	462a      	mov	r2, r5
   85950:	f000 fb96 	bl	86080 <memmove>
   85954:	68a2      	ldr	r2, [r4, #8]
   85956:	6823      	ldr	r3, [r4, #0]
   85958:	1b50      	subs	r0, r2, r5
   8595a:	1959      	adds	r1, r3, r5
   8595c:	46ab      	mov	fp, r5
   8595e:	60a0      	str	r0, [r4, #8]
   85960:	6021      	str	r1, [r4, #0]
   85962:	f8d9 0008 	ldr.w	r0, [r9, #8]
   85966:	44da      	add	sl, fp
   85968:	ebcb 0200 	rsb	r2, fp, r0
   8596c:	ebcb 0505 	rsb	r5, fp, r5
   85970:	f8c9 2008 	str.w	r2, [r9, #8]
   85974:	2a00      	cmp	r2, #0
   85976:	f47f af66 	bne.w	85846 <__sfvwrite_r+0xa2>
   8597a:	e71a      	b.n	857b2 <__sfvwrite_r+0xe>
   8597c:	9801      	ldr	r0, [sp, #4]
   8597e:	2800      	cmp	r0, #0
   85980:	d032      	beq.n	859e8 <__sfvwrite_r+0x244>
   85982:	6820      	ldr	r0, [r4, #0]
   85984:	6921      	ldr	r1, [r4, #16]
   85986:	45d3      	cmp	fp, sl
   85988:	bf34      	ite	cc
   8598a:	465b      	movcc	r3, fp
   8598c:	4653      	movcs	r3, sl
   8598e:	4288      	cmp	r0, r1
   85990:	68a5      	ldr	r5, [r4, #8]
   85992:	f8d4 e014 	ldr.w	lr, [r4, #20]
   85996:	d937      	bls.n	85a08 <__sfvwrite_r+0x264>
   85998:	4475      	add	r5, lr
   8599a:	42ab      	cmp	r3, r5
   8599c:	dd34      	ble.n	85a08 <__sfvwrite_r+0x264>
   8599e:	4639      	mov	r1, r7
   859a0:	462a      	mov	r2, r5
   859a2:	f000 fb6d 	bl	86080 <memmove>
   859a6:	6820      	ldr	r0, [r4, #0]
   859a8:	4621      	mov	r1, r4
   859aa:	1943      	adds	r3, r0, r5
   859ac:	6023      	str	r3, [r4, #0]
   859ae:	4630      	mov	r0, r6
   859b0:	f7ff fc12 	bl	851d8 <_fflush_r>
   859b4:	2800      	cmp	r0, #0
   859b6:	d148      	bne.n	85a4a <__sfvwrite_r+0x2a6>
   859b8:	ebbb 0b05 	subs.w	fp, fp, r5
   859bc:	d03d      	beq.n	85a3a <__sfvwrite_r+0x296>
   859be:	f8d9 2008 	ldr.w	r2, [r9, #8]
   859c2:	197f      	adds	r7, r7, r5
   859c4:	ebc5 0a0a 	rsb	sl, r5, sl
   859c8:	1b55      	subs	r5, r2, r5
   859ca:	f8c9 5008 	str.w	r5, [r9, #8]
   859ce:	2d00      	cmp	r5, #0
   859d0:	f43f aeef 	beq.w	857b2 <__sfvwrite_r+0xe>
   859d4:	f1ba 0f00 	cmp.w	sl, #0
   859d8:	d1d0      	bne.n	8597c <__sfvwrite_r+0x1d8>
   859da:	2100      	movs	r1, #0
   859dc:	e898 0480 	ldmia.w	r8, {r7, sl}
   859e0:	9101      	str	r1, [sp, #4]
   859e2:	f108 0808 	add.w	r8, r8, #8
   859e6:	e7f5      	b.n	859d4 <__sfvwrite_r+0x230>
   859e8:	4638      	mov	r0, r7
   859ea:	210a      	movs	r1, #10
   859ec:	4652      	mov	r2, sl
   859ee:	f000 fb39 	bl	86064 <memchr>
   859f2:	b120      	cbz	r0, 859fe <__sfvwrite_r+0x25a>
   859f4:	f100 0101 	add.w	r1, r0, #1
   859f8:	ebc7 0b01 	rsb	fp, r7, r1
   859fc:	e001      	b.n	85a02 <__sfvwrite_r+0x25e>
   859fe:	f10a 0b01 	add.w	fp, sl, #1
   85a02:	2201      	movs	r2, #1
   85a04:	9201      	str	r2, [sp, #4]
   85a06:	e7bc      	b.n	85982 <__sfvwrite_r+0x1de>
   85a08:	4573      	cmp	r3, lr
   85a0a:	db08      	blt.n	85a1e <__sfvwrite_r+0x27a>
   85a0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   85a0e:	4630      	mov	r0, r6
   85a10:	69e1      	ldr	r1, [r4, #28]
   85a12:	463a      	mov	r2, r7
   85a14:	4673      	mov	r3, lr
   85a16:	47a8      	blx	r5
   85a18:	1e05      	subs	r5, r0, #0
   85a1a:	dccd      	bgt.n	859b8 <__sfvwrite_r+0x214>
   85a1c:	e015      	b.n	85a4a <__sfvwrite_r+0x2a6>
   85a1e:	461a      	mov	r2, r3
   85a20:	4639      	mov	r1, r7
   85a22:	9300      	str	r3, [sp, #0]
   85a24:	f000 fb2c 	bl	86080 <memmove>
   85a28:	9b00      	ldr	r3, [sp, #0]
   85a2a:	6825      	ldr	r5, [r4, #0]
   85a2c:	68a0      	ldr	r0, [r4, #8]
   85a2e:	18e9      	adds	r1, r5, r3
   85a30:	1ac2      	subs	r2, r0, r3
   85a32:	60a2      	str	r2, [r4, #8]
   85a34:	6021      	str	r1, [r4, #0]
   85a36:	461d      	mov	r5, r3
   85a38:	e7be      	b.n	859b8 <__sfvwrite_r+0x214>
   85a3a:	4630      	mov	r0, r6
   85a3c:	4621      	mov	r1, r4
   85a3e:	f7ff fbcb 	bl	851d8 <_fflush_r>
   85a42:	b910      	cbnz	r0, 85a4a <__sfvwrite_r+0x2a6>
   85a44:	f8cd b004 	str.w	fp, [sp, #4]
   85a48:	e7b9      	b.n	859be <__sfvwrite_r+0x21a>
   85a4a:	89a2      	ldrh	r2, [r4, #12]
   85a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   85a50:	81a3      	strh	r3, [r4, #12]
   85a52:	f04f 30ff 	mov.w	r0, #4294967295
   85a56:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085a5a <_fwalk>:
   85a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a5e:	4604      	mov	r4, r0
   85a60:	4688      	mov	r8, r1
   85a62:	f7ff fd0f 	bl	85484 <__sfp_lock_acquire>
   85a66:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   85a6a:	2600      	movs	r6, #0
   85a6c:	b18c      	cbz	r4, 85a92 <_fwalk+0x38>
   85a6e:	68a5      	ldr	r5, [r4, #8]
   85a70:	6867      	ldr	r7, [r4, #4]
   85a72:	3f01      	subs	r7, #1
   85a74:	d40b      	bmi.n	85a8e <_fwalk+0x34>
   85a76:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85a7a:	b133      	cbz	r3, 85a8a <_fwalk+0x30>
   85a7c:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   85a80:	1c43      	adds	r3, r0, #1
   85a82:	d002      	beq.n	85a8a <_fwalk+0x30>
   85a84:	4628      	mov	r0, r5
   85a86:	47c0      	blx	r8
   85a88:	4306      	orrs	r6, r0
   85a8a:	3568      	adds	r5, #104	; 0x68
   85a8c:	e7f1      	b.n	85a72 <_fwalk+0x18>
   85a8e:	6824      	ldr	r4, [r4, #0]
   85a90:	e7ec      	b.n	85a6c <_fwalk+0x12>
   85a92:	f7ff fcf8 	bl	85486 <__sfp_lock_release>
   85a96:	4630      	mov	r0, r6
   85a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085a9c <_fwalk_reent>:
   85a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85aa0:	4680      	mov	r8, r0
   85aa2:	4689      	mov	r9, r1
   85aa4:	f7ff fcee 	bl	85484 <__sfp_lock_acquire>
   85aa8:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   85aac:	2600      	movs	r6, #0
   85aae:	b194      	cbz	r4, 85ad6 <_fwalk_reent+0x3a>
   85ab0:	68a5      	ldr	r5, [r4, #8]
   85ab2:	6867      	ldr	r7, [r4, #4]
   85ab4:	3f01      	subs	r7, #1
   85ab6:	d40c      	bmi.n	85ad2 <_fwalk_reent+0x36>
   85ab8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85abc:	b13b      	cbz	r3, 85ace <_fwalk_reent+0x32>
   85abe:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   85ac2:	1c43      	adds	r3, r0, #1
   85ac4:	d003      	beq.n	85ace <_fwalk_reent+0x32>
   85ac6:	4640      	mov	r0, r8
   85ac8:	4629      	mov	r1, r5
   85aca:	47c8      	blx	r9
   85acc:	4306      	orrs	r6, r0
   85ace:	3568      	adds	r5, #104	; 0x68
   85ad0:	e7f0      	b.n	85ab4 <_fwalk_reent+0x18>
   85ad2:	6824      	ldr	r4, [r4, #0]
   85ad4:	e7eb      	b.n	85aae <_fwalk_reent+0x12>
   85ad6:	f7ff fcd6 	bl	85486 <__sfp_lock_release>
   85ada:	4630      	mov	r0, r6
   85adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085ae0 <_setlocale_r>:
   85ae0:	b510      	push	{r4, lr}
   85ae2:	4614      	mov	r4, r2
   85ae4:	b90a      	cbnz	r2, 85aea <_setlocale_r+0xa>
   85ae6:	480c      	ldr	r0, [pc, #48]	; (85b18 <_setlocale_r+0x38>)
   85ae8:	bd10      	pop	{r4, pc}
   85aea:	4610      	mov	r0, r2
   85aec:	490b      	ldr	r1, [pc, #44]	; (85b1c <_setlocale_r+0x3c>)
   85aee:	f000 fca8 	bl	86442 <strcmp>
   85af2:	2800      	cmp	r0, #0
   85af4:	d0f7      	beq.n	85ae6 <_setlocale_r+0x6>
   85af6:	4620      	mov	r0, r4
   85af8:	4907      	ldr	r1, [pc, #28]	; (85b18 <_setlocale_r+0x38>)
   85afa:	f000 fca2 	bl	86442 <strcmp>
   85afe:	2800      	cmp	r0, #0
   85b00:	d0f1      	beq.n	85ae6 <_setlocale_r+0x6>
   85b02:	4620      	mov	r0, r4
   85b04:	4906      	ldr	r1, [pc, #24]	; (85b20 <_setlocale_r+0x40>)
   85b06:	f000 fc9c 	bl	86442 <strcmp>
   85b0a:	4b03      	ldr	r3, [pc, #12]	; (85b18 <_setlocale_r+0x38>)
   85b0c:	2800      	cmp	r0, #0
   85b0e:	bf0c      	ite	eq
   85b10:	4618      	moveq	r0, r3
   85b12:	2000      	movne	r0, #0
   85b14:	bd10      	pop	{r4, pc}
   85b16:	bf00      	nop
   85b18:	00087684 	.word	0x00087684
   85b1c:	000876e8 	.word	0x000876e8
   85b20:	000876ef 	.word	0x000876ef

00085b24 <__locale_charset>:
   85b24:	4800      	ldr	r0, [pc, #0]	; (85b28 <__locale_charset+0x4>)
   85b26:	4770      	bx	lr
   85b28:	20070470 	.word	0x20070470

00085b2c <__locale_mb_cur_max>:
   85b2c:	4b01      	ldr	r3, [pc, #4]	; (85b34 <__locale_mb_cur_max+0x8>)
   85b2e:	6a18      	ldr	r0, [r3, #32]
   85b30:	4770      	bx	lr
   85b32:	bf00      	nop
   85b34:	20070470 	.word	0x20070470

00085b38 <__locale_msgcharset>:
   85b38:	4800      	ldr	r0, [pc, #0]	; (85b3c <__locale_msgcharset+0x4>)
   85b3a:	4770      	bx	lr
   85b3c:	20070494 	.word	0x20070494

00085b40 <__locale_cjk_lang>:
   85b40:	2000      	movs	r0, #0
   85b42:	4770      	bx	lr

00085b44 <_localeconv_r>:
   85b44:	4800      	ldr	r0, [pc, #0]	; (85b48 <_localeconv_r+0x4>)
   85b46:	4770      	bx	lr
   85b48:	200704b4 	.word	0x200704b4

00085b4c <setlocale>:
   85b4c:	460a      	mov	r2, r1
   85b4e:	4903      	ldr	r1, [pc, #12]	; (85b5c <setlocale+0x10>)
   85b50:	4603      	mov	r3, r0
   85b52:	6808      	ldr	r0, [r1, #0]
   85b54:	4619      	mov	r1, r3
   85b56:	f7ff bfc3 	b.w	85ae0 <_setlocale_r>
   85b5a:	bf00      	nop
   85b5c:	20070040 	.word	0x20070040

00085b60 <localeconv>:
   85b60:	4800      	ldr	r0, [pc, #0]	; (85b64 <localeconv+0x4>)
   85b62:	4770      	bx	lr
   85b64:	200704b4 	.word	0x200704b4

00085b68 <__smakebuf_r>:
   85b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   85b6a:	898b      	ldrh	r3, [r1, #12]
   85b6c:	460c      	mov	r4, r1
   85b6e:	f003 0102 	and.w	r1, r3, #2
   85b72:	b20a      	sxth	r2, r1
   85b74:	b091      	sub	sp, #68	; 0x44
   85b76:	4606      	mov	r6, r0
   85b78:	2a00      	cmp	r2, #0
   85b7a:	d13f      	bne.n	85bfc <__smakebuf_r+0x94>
   85b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85b80:	2900      	cmp	r1, #0
   85b82:	da0d      	bge.n	85ba0 <__smakebuf_r+0x38>
   85b84:	89a7      	ldrh	r7, [r4, #12]
   85b86:	f007 0280 	and.w	r2, r7, #128	; 0x80
   85b8a:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   85b8e:	b210      	sxth	r0, r2
   85b90:	2800      	cmp	r0, #0
   85b92:	bf0c      	ite	eq
   85b94:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   85b98:	2540      	movne	r5, #64	; 0x40
   85b9a:	81a3      	strh	r3, [r4, #12]
   85b9c:	2700      	movs	r7, #0
   85b9e:	e020      	b.n	85be2 <__smakebuf_r+0x7a>
   85ba0:	aa01      	add	r2, sp, #4
   85ba2:	f001 f9ef 	bl	86f84 <_fstat_r>
   85ba6:	2800      	cmp	r0, #0
   85ba8:	dbec      	blt.n	85b84 <__smakebuf_r+0x1c>
   85baa:	9802      	ldr	r0, [sp, #8]
   85bac:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   85bb0:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   85bb4:	425f      	negs	r7, r3
   85bb6:	415f      	adcs	r7, r3
   85bb8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   85bbc:	d10b      	bne.n	85bd6 <__smakebuf_r+0x6e>
   85bbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   85bc0:	4a1d      	ldr	r2, [pc, #116]	; (85c38 <__smakebuf_r+0xd0>)
   85bc2:	4291      	cmp	r1, r2
   85bc4:	d107      	bne.n	85bd6 <__smakebuf_r+0x6e>
   85bc6:	89a3      	ldrh	r3, [r4, #12]
   85bc8:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85bcc:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   85bd0:	81a1      	strh	r1, [r4, #12]
   85bd2:	64e5      	str	r5, [r4, #76]	; 0x4c
   85bd4:	e005      	b.n	85be2 <__smakebuf_r+0x7a>
   85bd6:	89a0      	ldrh	r0, [r4, #12]
   85bd8:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   85bdc:	81a5      	strh	r5, [r4, #12]
   85bde:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85be2:	4630      	mov	r0, r6
   85be4:	4629      	mov	r1, r5
   85be6:	f000 f83b 	bl	85c60 <_malloc_r>
   85bea:	b970      	cbnz	r0, 85c0a <__smakebuf_r+0xa2>
   85bec:	89a3      	ldrh	r3, [r4, #12]
   85bee:	f403 7200 	and.w	r2, r3, #512	; 0x200
   85bf2:	b210      	sxth	r0, r2
   85bf4:	b9e8      	cbnz	r0, 85c32 <__smakebuf_r+0xca>
   85bf6:	f043 0102 	orr.w	r1, r3, #2
   85bfa:	81a1      	strh	r1, [r4, #12]
   85bfc:	f104 0343 	add.w	r3, r4, #67	; 0x43
   85c00:	2201      	movs	r2, #1
   85c02:	6023      	str	r3, [r4, #0]
   85c04:	6123      	str	r3, [r4, #16]
   85c06:	6162      	str	r2, [r4, #20]
   85c08:	e013      	b.n	85c32 <__smakebuf_r+0xca>
   85c0a:	89a2      	ldrh	r2, [r4, #12]
   85c0c:	490b      	ldr	r1, [pc, #44]	; (85c3c <__smakebuf_r+0xd4>)
   85c0e:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   85c12:	63f1      	str	r1, [r6, #60]	; 0x3c
   85c14:	81a3      	strh	r3, [r4, #12]
   85c16:	6020      	str	r0, [r4, #0]
   85c18:	6120      	str	r0, [r4, #16]
   85c1a:	6165      	str	r5, [r4, #20]
   85c1c:	b14f      	cbz	r7, 85c32 <__smakebuf_r+0xca>
   85c1e:	4630      	mov	r0, r6
   85c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85c24:	f001 f9c0 	bl	86fa8 <_isatty_r>
   85c28:	b118      	cbz	r0, 85c32 <__smakebuf_r+0xca>
   85c2a:	89a0      	ldrh	r0, [r4, #12]
   85c2c:	f040 0101 	orr.w	r1, r0, #1
   85c30:	81a1      	strh	r1, [r4, #12]
   85c32:	b011      	add	sp, #68	; 0x44
   85c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85c36:	bf00      	nop
   85c38:	00086417 	.word	0x00086417
   85c3c:	00085331 	.word	0x00085331

00085c40 <malloc>:
   85c40:	4b02      	ldr	r3, [pc, #8]	; (85c4c <malloc+0xc>)
   85c42:	4601      	mov	r1, r0
   85c44:	6818      	ldr	r0, [r3, #0]
   85c46:	f000 b80b 	b.w	85c60 <_malloc_r>
   85c4a:	bf00      	nop
   85c4c:	20070040 	.word	0x20070040

00085c50 <free>:
   85c50:	4b02      	ldr	r3, [pc, #8]	; (85c5c <free+0xc>)
   85c52:	4601      	mov	r1, r0
   85c54:	6818      	ldr	r0, [r3, #0]
   85c56:	f7ff bcef 	b.w	85638 <_free_r>
   85c5a:	bf00      	nop
   85c5c:	20070040 	.word	0x20070040

00085c60 <_malloc_r>:
   85c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85c64:	f101 040b 	add.w	r4, r1, #11
   85c68:	2c16      	cmp	r4, #22
   85c6a:	4606      	mov	r6, r0
   85c6c:	d903      	bls.n	85c76 <_malloc_r+0x16>
   85c6e:	f034 0407 	bics.w	r4, r4, #7
   85c72:	d501      	bpl.n	85c78 <_malloc_r+0x18>
   85c74:	e002      	b.n	85c7c <_malloc_r+0x1c>
   85c76:	2410      	movs	r4, #16
   85c78:	428c      	cmp	r4, r1
   85c7a:	d202      	bcs.n	85c82 <_malloc_r+0x22>
   85c7c:	250c      	movs	r5, #12
   85c7e:	6035      	str	r5, [r6, #0]
   85c80:	e1d9      	b.n	86036 <_malloc_r+0x3d6>
   85c82:	4630      	mov	r0, r6
   85c84:	f000 fa16 	bl	860b4 <__malloc_lock>
   85c88:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   85c8c:	d214      	bcs.n	85cb8 <_malloc_r+0x58>
   85c8e:	4da0      	ldr	r5, [pc, #640]	; (85f10 <_malloc_r+0x2b0>)
   85c90:	08e1      	lsrs	r1, r4, #3
   85c92:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   85c96:	68c5      	ldr	r5, [r0, #12]
   85c98:	4285      	cmp	r5, r0
   85c9a:	d105      	bne.n	85ca8 <_malloc_r+0x48>
   85c9c:	f105 0308 	add.w	r3, r5, #8
   85ca0:	696d      	ldr	r5, [r5, #20]
   85ca2:	1c8a      	adds	r2, r1, #2
   85ca4:	429d      	cmp	r5, r3
   85ca6:	d044      	beq.n	85d32 <_malloc_r+0xd2>
   85ca8:	68e8      	ldr	r0, [r5, #12]
   85caa:	68a9      	ldr	r1, [r5, #8]
   85cac:	686a      	ldr	r2, [r5, #4]
   85cae:	60c8      	str	r0, [r1, #12]
   85cb0:	f022 0303 	bic.w	r3, r2, #3
   85cb4:	6081      	str	r1, [r0, #8]
   85cb6:	e059      	b.n	85d6c <_malloc_r+0x10c>
   85cb8:	0a62      	lsrs	r2, r4, #9
   85cba:	d101      	bne.n	85cc0 <_malloc_r+0x60>
   85cbc:	08e2      	lsrs	r2, r4, #3
   85cbe:	e01b      	b.n	85cf8 <_malloc_r+0x98>
   85cc0:	2a04      	cmp	r2, #4
   85cc2:	d802      	bhi.n	85cca <_malloc_r+0x6a>
   85cc4:	09a2      	lsrs	r2, r4, #6
   85cc6:	3238      	adds	r2, #56	; 0x38
   85cc8:	e016      	b.n	85cf8 <_malloc_r+0x98>
   85cca:	2a14      	cmp	r2, #20
   85ccc:	d801      	bhi.n	85cd2 <_malloc_r+0x72>
   85cce:	325b      	adds	r2, #91	; 0x5b
   85cd0:	e012      	b.n	85cf8 <_malloc_r+0x98>
   85cd2:	2a54      	cmp	r2, #84	; 0x54
   85cd4:	d802      	bhi.n	85cdc <_malloc_r+0x7c>
   85cd6:	0b22      	lsrs	r2, r4, #12
   85cd8:	326e      	adds	r2, #110	; 0x6e
   85cda:	e00d      	b.n	85cf8 <_malloc_r+0x98>
   85cdc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85ce0:	d802      	bhi.n	85ce8 <_malloc_r+0x88>
   85ce2:	0be2      	lsrs	r2, r4, #15
   85ce4:	3277      	adds	r2, #119	; 0x77
   85ce6:	e007      	b.n	85cf8 <_malloc_r+0x98>
   85ce8:	f240 5354 	movw	r3, #1364	; 0x554
   85cec:	429a      	cmp	r2, r3
   85cee:	d802      	bhi.n	85cf6 <_malloc_r+0x96>
   85cf0:	0ca2      	lsrs	r2, r4, #18
   85cf2:	327c      	adds	r2, #124	; 0x7c
   85cf4:	e000      	b.n	85cf8 <_malloc_r+0x98>
   85cf6:	227e      	movs	r2, #126	; 0x7e
   85cf8:	4885      	ldr	r0, [pc, #532]	; (85f10 <_malloc_r+0x2b0>)
   85cfa:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   85cfe:	68dd      	ldr	r5, [r3, #12]
   85d00:	429d      	cmp	r5, r3
   85d02:	d015      	beq.n	85d30 <_malloc_r+0xd0>
   85d04:	6869      	ldr	r1, [r5, #4]
   85d06:	f021 0103 	bic.w	r1, r1, #3
   85d0a:	1b08      	subs	r0, r1, r4
   85d0c:	280f      	cmp	r0, #15
   85d0e:	dd01      	ble.n	85d14 <_malloc_r+0xb4>
   85d10:	3a01      	subs	r2, #1
   85d12:	e00d      	b.n	85d30 <_malloc_r+0xd0>
   85d14:	2800      	cmp	r0, #0
   85d16:	db09      	blt.n	85d2c <_malloc_r+0xcc>
   85d18:	68eb      	ldr	r3, [r5, #12]
   85d1a:	68aa      	ldr	r2, [r5, #8]
   85d1c:	60d3      	str	r3, [r2, #12]
   85d1e:	609a      	str	r2, [r3, #8]
   85d20:	186b      	adds	r3, r5, r1
   85d22:	685a      	ldr	r2, [r3, #4]
   85d24:	f042 0001 	orr.w	r0, r2, #1
   85d28:	6058      	str	r0, [r3, #4]
   85d2a:	e190      	b.n	8604e <_malloc_r+0x3ee>
   85d2c:	68ed      	ldr	r5, [r5, #12]
   85d2e:	e7e7      	b.n	85d00 <_malloc_r+0xa0>
   85d30:	3201      	adds	r2, #1
   85d32:	4977      	ldr	r1, [pc, #476]	; (85f10 <_malloc_r+0x2b0>)
   85d34:	690d      	ldr	r5, [r1, #16]
   85d36:	f101 0708 	add.w	r7, r1, #8
   85d3a:	42bd      	cmp	r5, r7
   85d3c:	d068      	beq.n	85e10 <_malloc_r+0x1b0>
   85d3e:	6868      	ldr	r0, [r5, #4]
   85d40:	f020 0303 	bic.w	r3, r0, #3
   85d44:	1b18      	subs	r0, r3, r4
   85d46:	280f      	cmp	r0, #15
   85d48:	dd0c      	ble.n	85d64 <_malloc_r+0x104>
   85d4a:	192b      	adds	r3, r5, r4
   85d4c:	614b      	str	r3, [r1, #20]
   85d4e:	610b      	str	r3, [r1, #16]
   85d50:	f044 0401 	orr.w	r4, r4, #1
   85d54:	f040 0101 	orr.w	r1, r0, #1
   85d58:	606c      	str	r4, [r5, #4]
   85d5a:	60df      	str	r7, [r3, #12]
   85d5c:	609f      	str	r7, [r3, #8]
   85d5e:	6059      	str	r1, [r3, #4]
   85d60:	5018      	str	r0, [r3, r0]
   85d62:	e174      	b.n	8604e <_malloc_r+0x3ee>
   85d64:	2800      	cmp	r0, #0
   85d66:	614f      	str	r7, [r1, #20]
   85d68:	610f      	str	r7, [r1, #16]
   85d6a:	db01      	blt.n	85d70 <_malloc_r+0x110>
   85d6c:	18eb      	adds	r3, r5, r3
   85d6e:	e7d8      	b.n	85d22 <_malloc_r+0xc2>
   85d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85d74:	d20f      	bcs.n	85d96 <_malloc_r+0x136>
   85d76:	08db      	lsrs	r3, r3, #3
   85d78:	1098      	asrs	r0, r3, #2
   85d7a:	2701      	movs	r7, #1
   85d7c:	fa07 f700 	lsl.w	r7, r7, r0
   85d80:	6848      	ldr	r0, [r1, #4]
   85d82:	4307      	orrs	r7, r0
   85d84:	604f      	str	r7, [r1, #4]
   85d86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   85d8a:	688b      	ldr	r3, [r1, #8]
   85d8c:	60e9      	str	r1, [r5, #12]
   85d8e:	60ab      	str	r3, [r5, #8]
   85d90:	60dd      	str	r5, [r3, #12]
   85d92:	608d      	str	r5, [r1, #8]
   85d94:	e03c      	b.n	85e10 <_malloc_r+0x1b0>
   85d96:	0a58      	lsrs	r0, r3, #9
   85d98:	2804      	cmp	r0, #4
   85d9a:	d802      	bhi.n	85da2 <_malloc_r+0x142>
   85d9c:	0998      	lsrs	r0, r3, #6
   85d9e:	3038      	adds	r0, #56	; 0x38
   85da0:	e016      	b.n	85dd0 <_malloc_r+0x170>
   85da2:	2814      	cmp	r0, #20
   85da4:	d801      	bhi.n	85daa <_malloc_r+0x14a>
   85da6:	305b      	adds	r0, #91	; 0x5b
   85da8:	e012      	b.n	85dd0 <_malloc_r+0x170>
   85daa:	2854      	cmp	r0, #84	; 0x54
   85dac:	d802      	bhi.n	85db4 <_malloc_r+0x154>
   85dae:	0b18      	lsrs	r0, r3, #12
   85db0:	306e      	adds	r0, #110	; 0x6e
   85db2:	e00d      	b.n	85dd0 <_malloc_r+0x170>
   85db4:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85db8:	d802      	bhi.n	85dc0 <_malloc_r+0x160>
   85dba:	0bd8      	lsrs	r0, r3, #15
   85dbc:	3077      	adds	r0, #119	; 0x77
   85dbe:	e007      	b.n	85dd0 <_malloc_r+0x170>
   85dc0:	f240 5754 	movw	r7, #1364	; 0x554
   85dc4:	42b8      	cmp	r0, r7
   85dc6:	d802      	bhi.n	85dce <_malloc_r+0x16e>
   85dc8:	0c98      	lsrs	r0, r3, #18
   85dca:	307c      	adds	r0, #124	; 0x7c
   85dcc:	e000      	b.n	85dd0 <_malloc_r+0x170>
   85dce:	207e      	movs	r0, #126	; 0x7e
   85dd0:	f8df e13c 	ldr.w	lr, [pc, #316]	; 85f10 <_malloc_r+0x2b0>
   85dd4:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   85dd8:	68b9      	ldr	r1, [r7, #8]
   85dda:	42b9      	cmp	r1, r7
   85ddc:	d10e      	bne.n	85dfc <_malloc_r+0x19c>
   85dde:	1087      	asrs	r7, r0, #2
   85de0:	2301      	movs	r3, #1
   85de2:	fa03 f007 	lsl.w	r0, r3, r7
   85de6:	f8de 7004 	ldr.w	r7, [lr, #4]
   85dea:	ea40 0307 	orr.w	r3, r0, r7
   85dee:	f8ce 3004 	str.w	r3, [lr, #4]
   85df2:	4608      	mov	r0, r1
   85df4:	e008      	b.n	85e08 <_malloc_r+0x1a8>
   85df6:	6889      	ldr	r1, [r1, #8]
   85df8:	42b9      	cmp	r1, r7
   85dfa:	d004      	beq.n	85e06 <_malloc_r+0x1a6>
   85dfc:	6848      	ldr	r0, [r1, #4]
   85dfe:	f020 0003 	bic.w	r0, r0, #3
   85e02:	4283      	cmp	r3, r0
   85e04:	d3f7      	bcc.n	85df6 <_malloc_r+0x196>
   85e06:	68c8      	ldr	r0, [r1, #12]
   85e08:	60e8      	str	r0, [r5, #12]
   85e0a:	60a9      	str	r1, [r5, #8]
   85e0c:	60cd      	str	r5, [r1, #12]
   85e0e:	6085      	str	r5, [r0, #8]
   85e10:	1095      	asrs	r5, r2, #2
   85e12:	2001      	movs	r0, #1
   85e14:	fa00 f305 	lsl.w	r3, r0, r5
   85e18:	4f3d      	ldr	r7, [pc, #244]	; (85f10 <_malloc_r+0x2b0>)
   85e1a:	6879      	ldr	r1, [r7, #4]
   85e1c:	428b      	cmp	r3, r1
   85e1e:	d85d      	bhi.n	85edc <_malloc_r+0x27c>
   85e20:	420b      	tst	r3, r1
   85e22:	d105      	bne.n	85e30 <_malloc_r+0x1d0>
   85e24:	f022 0203 	bic.w	r2, r2, #3
   85e28:	005b      	lsls	r3, r3, #1
   85e2a:	3204      	adds	r2, #4
   85e2c:	420b      	tst	r3, r1
   85e2e:	d0fb      	beq.n	85e28 <_malloc_r+0x1c8>
   85e30:	4d37      	ldr	r5, [pc, #220]	; (85f10 <_malloc_r+0x2b0>)
   85e32:	4610      	mov	r0, r2
   85e34:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   85e38:	4677      	mov	r7, lr
   85e3a:	68fd      	ldr	r5, [r7, #12]
   85e3c:	42bd      	cmp	r5, r7
   85e3e:	d02d      	beq.n	85e9c <_malloc_r+0x23c>
   85e40:	6869      	ldr	r1, [r5, #4]
   85e42:	f021 0c03 	bic.w	ip, r1, #3
   85e46:	ebc4 010c 	rsb	r1, r4, ip
   85e4a:	290f      	cmp	r1, #15
   85e4c:	dd13      	ble.n	85e76 <_malloc_r+0x216>
   85e4e:	192b      	adds	r3, r5, r4
   85e50:	f044 0401 	orr.w	r4, r4, #1
   85e54:	68ea      	ldr	r2, [r5, #12]
   85e56:	606c      	str	r4, [r5, #4]
   85e58:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85e5c:	5059      	str	r1, [r3, r1]
   85e5e:	60c2      	str	r2, [r0, #12]
   85e60:	6090      	str	r0, [r2, #8]
   85e62:	4a2b      	ldr	r2, [pc, #172]	; (85f10 <_malloc_r+0x2b0>)
   85e64:	f041 0001 	orr.w	r0, r1, #1
   85e68:	6153      	str	r3, [r2, #20]
   85e6a:	6113      	str	r3, [r2, #16]
   85e6c:	3208      	adds	r2, #8
   85e6e:	60da      	str	r2, [r3, #12]
   85e70:	609a      	str	r2, [r3, #8]
   85e72:	6058      	str	r0, [r3, #4]
   85e74:	e00c      	b.n	85e90 <_malloc_r+0x230>
   85e76:	2900      	cmp	r1, #0
   85e78:	db0e      	blt.n	85e98 <_malloc_r+0x238>
   85e7a:	eb05 000c 	add.w	r0, r5, ip
   85e7e:	6842      	ldr	r2, [r0, #4]
   85e80:	68e9      	ldr	r1, [r5, #12]
   85e82:	f042 0301 	orr.w	r3, r2, #1
   85e86:	6043      	str	r3, [r0, #4]
   85e88:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85e8c:	60c1      	str	r1, [r0, #12]
   85e8e:	6088      	str	r0, [r1, #8]
   85e90:	4630      	mov	r0, r6
   85e92:	f000 f910 	bl	860b6 <__malloc_unlock>
   85e96:	e0de      	b.n	86056 <_malloc_r+0x3f6>
   85e98:	68ed      	ldr	r5, [r5, #12]
   85e9a:	e7cf      	b.n	85e3c <_malloc_r+0x1dc>
   85e9c:	3001      	adds	r0, #1
   85e9e:	0781      	lsls	r1, r0, #30
   85ea0:	f105 0708 	add.w	r7, r5, #8
   85ea4:	d1c9      	bne.n	85e3a <_malloc_r+0x1da>
   85ea6:	4671      	mov	r1, lr
   85ea8:	0795      	lsls	r5, r2, #30
   85eaa:	d105      	bne.n	85eb8 <_malloc_r+0x258>
   85eac:	4a18      	ldr	r2, [pc, #96]	; (85f10 <_malloc_r+0x2b0>)
   85eae:	6855      	ldr	r5, [r2, #4]
   85eb0:	ea25 0503 	bic.w	r5, r5, r3
   85eb4:	6055      	str	r5, [r2, #4]
   85eb6:	e005      	b.n	85ec4 <_malloc_r+0x264>
   85eb8:	f1a1 0708 	sub.w	r7, r1, #8
   85ebc:	6809      	ldr	r1, [r1, #0]
   85ebe:	3a01      	subs	r2, #1
   85ec0:	42b9      	cmp	r1, r7
   85ec2:	d0f1      	beq.n	85ea8 <_malloc_r+0x248>
   85ec4:	4f12      	ldr	r7, [pc, #72]	; (85f10 <_malloc_r+0x2b0>)
   85ec6:	005b      	lsls	r3, r3, #1
   85ec8:	687f      	ldr	r7, [r7, #4]
   85eca:	42bb      	cmp	r3, r7
   85ecc:	d806      	bhi.n	85edc <_malloc_r+0x27c>
   85ece:	b12b      	cbz	r3, 85edc <_malloc_r+0x27c>
   85ed0:	4602      	mov	r2, r0
   85ed2:	423b      	tst	r3, r7
   85ed4:	d1ac      	bne.n	85e30 <_malloc_r+0x1d0>
   85ed6:	3204      	adds	r2, #4
   85ed8:	005b      	lsls	r3, r3, #1
   85eda:	e7fa      	b.n	85ed2 <_malloc_r+0x272>
   85edc:	4b0c      	ldr	r3, [pc, #48]	; (85f10 <_malloc_r+0x2b0>)
   85ede:	689f      	ldr	r7, [r3, #8]
   85ee0:	4619      	mov	r1, r3
   85ee2:	6878      	ldr	r0, [r7, #4]
   85ee4:	f020 0903 	bic.w	r9, r0, #3
   85ee8:	45a1      	cmp	r9, r4
   85eea:	d304      	bcc.n	85ef6 <_malloc_r+0x296>
   85eec:	ebc4 0009 	rsb	r0, r4, r9
   85ef0:	280f      	cmp	r0, #15
   85ef2:	f300 80a2 	bgt.w	8603a <_malloc_r+0x3da>
   85ef6:	4a07      	ldr	r2, [pc, #28]	; (85f14 <_malloc_r+0x2b4>)
   85ef8:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   85efc:	6815      	ldr	r5, [r2, #0]
   85efe:	3301      	adds	r3, #1
   85f00:	eb07 0a09 	add.w	sl, r7, r9
   85f04:	eb04 0805 	add.w	r8, r4, r5
   85f08:	d106      	bne.n	85f18 <_malloc_r+0x2b8>
   85f0a:	f108 0810 	add.w	r8, r8, #16
   85f0e:	e00b      	b.n	85f28 <_malloc_r+0x2c8>
   85f10:	200704ec 	.word	0x200704ec
   85f14:	2007ab04 	.word	0x2007ab04
   85f18:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   85f1c:	f100 010f 	add.w	r1, r0, #15
   85f20:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   85f24:	f022 080f 	bic.w	r8, r2, #15
   85f28:	4630      	mov	r0, r6
   85f2a:	4641      	mov	r1, r8
   85f2c:	f000 fa32 	bl	86394 <_sbrk_r>
   85f30:	1c42      	adds	r2, r0, #1
   85f32:	4605      	mov	r5, r0
   85f34:	d071      	beq.n	8601a <_malloc_r+0x3ba>
   85f36:	4550      	cmp	r0, sl
   85f38:	d202      	bcs.n	85f40 <_malloc_r+0x2e0>
   85f3a:	4b48      	ldr	r3, [pc, #288]	; (8605c <_malloc_r+0x3fc>)
   85f3c:	429f      	cmp	r7, r3
   85f3e:	d16c      	bne.n	8601a <_malloc_r+0x3ba>
   85f40:	4847      	ldr	r0, [pc, #284]	; (86060 <_malloc_r+0x400>)
   85f42:	4555      	cmp	r5, sl
   85f44:	6841      	ldr	r1, [r0, #4]
   85f46:	4a45      	ldr	r2, [pc, #276]	; (8605c <_malloc_r+0x3fc>)
   85f48:	eb08 0301 	add.w	r3, r8, r1
   85f4c:	6043      	str	r3, [r0, #4]
   85f4e:	d107      	bne.n	85f60 <_malloc_r+0x300>
   85f50:	0529      	lsls	r1, r5, #20
   85f52:	d105      	bne.n	85f60 <_malloc_r+0x300>
   85f54:	6895      	ldr	r5, [r2, #8]
   85f56:	44c8      	add	r8, r9
   85f58:	f048 0001 	orr.w	r0, r8, #1
   85f5c:	6068      	str	r0, [r5, #4]
   85f5e:	e051      	b.n	86004 <_malloc_r+0x3a4>
   85f60:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   85f64:	1c42      	adds	r2, r0, #1
   85f66:	d103      	bne.n	85f70 <_malloc_r+0x310>
   85f68:	4a3c      	ldr	r2, [pc, #240]	; (8605c <_malloc_r+0x3fc>)
   85f6a:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   85f6e:	e005      	b.n	85f7c <_malloc_r+0x31c>
   85f70:	ebca 0a05 	rsb	sl, sl, r5
   85f74:	eb03 010a 	add.w	r1, r3, sl
   85f78:	4b39      	ldr	r3, [pc, #228]	; (86060 <_malloc_r+0x400>)
   85f7a:	6059      	str	r1, [r3, #4]
   85f7c:	f015 0007 	ands.w	r0, r5, #7
   85f80:	bf1c      	itt	ne
   85f82:	f1c0 0008 	rsbne	r0, r0, #8
   85f86:	182d      	addne	r5, r5, r0
   85f88:	eb05 0c08 	add.w	ip, r5, r8
   85f8c:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   85f90:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   85f94:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   85f98:	4641      	mov	r1, r8
   85f9a:	4630      	mov	r0, r6
   85f9c:	f000 f9fa 	bl	86394 <_sbrk_r>
   85fa0:	4a2f      	ldr	r2, [pc, #188]	; (86060 <_malloc_r+0x400>)
   85fa2:	1c43      	adds	r3, r0, #1
   85fa4:	6853      	ldr	r3, [r2, #4]
   85fa6:	bf08      	it	eq
   85fa8:	f04f 0800 	moveq.w	r8, #0
   85fac:	eb08 0103 	add.w	r1, r8, r3
   85fb0:	bf08      	it	eq
   85fb2:	4628      	moveq	r0, r5
   85fb4:	6051      	str	r1, [r2, #4]
   85fb6:	1b40      	subs	r0, r0, r5
   85fb8:	4a28      	ldr	r2, [pc, #160]	; (8605c <_malloc_r+0x3fc>)
   85fba:	eb00 0308 	add.w	r3, r0, r8
   85fbe:	f043 0101 	orr.w	r1, r3, #1
   85fc2:	4297      	cmp	r7, r2
   85fc4:	6095      	str	r5, [r2, #8]
   85fc6:	6069      	str	r1, [r5, #4]
   85fc8:	d01c      	beq.n	86004 <_malloc_r+0x3a4>
   85fca:	f1b9 0f0f 	cmp.w	r9, #15
   85fce:	d802      	bhi.n	85fd6 <_malloc_r+0x376>
   85fd0:	2201      	movs	r2, #1
   85fd2:	606a      	str	r2, [r5, #4]
   85fd4:	e021      	b.n	8601a <_malloc_r+0x3ba>
   85fd6:	687d      	ldr	r5, [r7, #4]
   85fd8:	f1a9 090c 	sub.w	r9, r9, #12
   85fdc:	f029 0907 	bic.w	r9, r9, #7
   85fe0:	f005 0201 	and.w	r2, r5, #1
   85fe4:	2105      	movs	r1, #5
   85fe6:	eb07 0309 	add.w	r3, r7, r9
   85fea:	ea49 0002 	orr.w	r0, r9, r2
   85fee:	f1b9 0f0f 	cmp.w	r9, #15
   85ff2:	6078      	str	r0, [r7, #4]
   85ff4:	6059      	str	r1, [r3, #4]
   85ff6:	6099      	str	r1, [r3, #8]
   85ff8:	d904      	bls.n	86004 <_malloc_r+0x3a4>
   85ffa:	4630      	mov	r0, r6
   85ffc:	f107 0108 	add.w	r1, r7, #8
   86000:	f7ff fb1a 	bl	85638 <_free_r>
   86004:	4a16      	ldr	r2, [pc, #88]	; (86060 <_malloc_r+0x400>)
   86006:	6853      	ldr	r3, [r2, #4]
   86008:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8600a:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8600c:	428b      	cmp	r3, r1
   8600e:	bf88      	it	hi
   86010:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   86012:	42ab      	cmp	r3, r5
   86014:	bf84      	itt	hi
   86016:	4d12      	ldrhi	r5, [pc, #72]	; (86060 <_malloc_r+0x400>)
   86018:	632b      	strhi	r3, [r5, #48]	; 0x30
   8601a:	4810      	ldr	r0, [pc, #64]	; (8605c <_malloc_r+0x3fc>)
   8601c:	6882      	ldr	r2, [r0, #8]
   8601e:	6853      	ldr	r3, [r2, #4]
   86020:	f023 0103 	bic.w	r1, r3, #3
   86024:	42a1      	cmp	r1, r4
   86026:	ebc4 0001 	rsb	r0, r4, r1
   8602a:	d301      	bcc.n	86030 <_malloc_r+0x3d0>
   8602c:	280f      	cmp	r0, #15
   8602e:	dc04      	bgt.n	8603a <_malloc_r+0x3da>
   86030:	4630      	mov	r0, r6
   86032:	f000 f840 	bl	860b6 <__malloc_unlock>
   86036:	2500      	movs	r5, #0
   86038:	e00d      	b.n	86056 <_malloc_r+0x3f6>
   8603a:	4a08      	ldr	r2, [pc, #32]	; (8605c <_malloc_r+0x3fc>)
   8603c:	f044 0301 	orr.w	r3, r4, #1
   86040:	6895      	ldr	r5, [r2, #8]
   86042:	f040 0101 	orr.w	r1, r0, #1
   86046:	192c      	adds	r4, r5, r4
   86048:	606b      	str	r3, [r5, #4]
   8604a:	6094      	str	r4, [r2, #8]
   8604c:	6061      	str	r1, [r4, #4]
   8604e:	4630      	mov	r0, r6
   86050:	f000 f831 	bl	860b6 <__malloc_unlock>
   86054:	3508      	adds	r5, #8
   86056:	4628      	mov	r0, r5
   86058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8605c:	200704ec 	.word	0x200704ec
   86060:	2007ab04 	.word	0x2007ab04

00086064 <memchr>:
   86064:	b510      	push	{r4, lr}
   86066:	b2c9      	uxtb	r1, r1
   86068:	4603      	mov	r3, r0
   8606a:	1882      	adds	r2, r0, r2
   8606c:	4293      	cmp	r3, r2
   8606e:	4618      	mov	r0, r3
   86070:	d004      	beq.n	8607c <memchr+0x18>
   86072:	7804      	ldrb	r4, [r0, #0]
   86074:	3301      	adds	r3, #1
   86076:	428c      	cmp	r4, r1
   86078:	d1f8      	bne.n	8606c <memchr+0x8>
   8607a:	e000      	b.n	8607e <memchr+0x1a>
   8607c:	2000      	movs	r0, #0
   8607e:	bd10      	pop	{r4, pc}

00086080 <memmove>:
   86080:	4281      	cmp	r1, r0
   86082:	b570      	push	{r4, r5, r6, lr}
   86084:	d20e      	bcs.n	860a4 <memmove+0x24>
   86086:	188c      	adds	r4, r1, r2
   86088:	42a0      	cmp	r0, r4
   8608a:	d20b      	bcs.n	860a4 <memmove+0x24>
   8608c:	1885      	adds	r5, r0, r2
   8608e:	4613      	mov	r3, r2
   86090:	f113 33ff 	adds.w	r3, r3, #4294967295
   86094:	d305      	bcc.n	860a2 <memmove+0x22>
   86096:	4251      	negs	r1, r2
   86098:	1866      	adds	r6, r4, r1
   8609a:	5cf6      	ldrb	r6, [r6, r3]
   8609c:	1869      	adds	r1, r5, r1
   8609e:	54ce      	strb	r6, [r1, r3]
   860a0:	e7f6      	b.n	86090 <memmove+0x10>
   860a2:	bd70      	pop	{r4, r5, r6, pc}
   860a4:	2300      	movs	r3, #0
   860a6:	4293      	cmp	r3, r2
   860a8:	d003      	beq.n	860b2 <memmove+0x32>
   860aa:	5ccc      	ldrb	r4, [r1, r3]
   860ac:	54c4      	strb	r4, [r0, r3]
   860ae:	3301      	adds	r3, #1
   860b0:	e7f9      	b.n	860a6 <memmove+0x26>
   860b2:	bd70      	pop	{r4, r5, r6, pc}

000860b4 <__malloc_lock>:
   860b4:	4770      	bx	lr

000860b6 <__malloc_unlock>:
   860b6:	4770      	bx	lr

000860b8 <_realloc_r>:
   860b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   860bc:	4681      	mov	r9, r0
   860be:	4616      	mov	r6, r2
   860c0:	460c      	mov	r4, r1
   860c2:	b921      	cbnz	r1, 860ce <_realloc_r+0x16>
   860c4:	4611      	mov	r1, r2
   860c6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   860ca:	f7ff bdc9 	b.w	85c60 <_malloc_r>
   860ce:	f7ff fff1 	bl	860b4 <__malloc_lock>
   860d2:	f106 070b 	add.w	r7, r6, #11
   860d6:	f854 5c04 	ldr.w	r5, [r4, #-4]
   860da:	2f16      	cmp	r7, #22
   860dc:	f1a4 0b08 	sub.w	fp, r4, #8
   860e0:	f025 0803 	bic.w	r8, r5, #3
   860e4:	d903      	bls.n	860ee <_realloc_r+0x36>
   860e6:	f037 0707 	bics.w	r7, r7, #7
   860ea:	d501      	bpl.n	860f0 <_realloc_r+0x38>
   860ec:	e002      	b.n	860f4 <_realloc_r+0x3c>
   860ee:	2710      	movs	r7, #16
   860f0:	42b7      	cmp	r7, r6
   860f2:	d204      	bcs.n	860fe <_realloc_r+0x46>
   860f4:	200c      	movs	r0, #12
   860f6:	f8c9 0000 	str.w	r0, [r9]
   860fa:	2600      	movs	r6, #0
   860fc:	e145      	b.n	8638a <_realloc_r+0x2d2>
   860fe:	45b8      	cmp	r8, r7
   86100:	f280 811a 	bge.w	86338 <_realloc_r+0x280>
   86104:	4aa2      	ldr	r2, [pc, #648]	; (86390 <_realloc_r+0x2d8>)
   86106:	eb0b 0308 	add.w	r3, fp, r8
   8610a:	6891      	ldr	r1, [r2, #8]
   8610c:	428b      	cmp	r3, r1
   8610e:	d006      	beq.n	8611e <_realloc_r+0x66>
   86110:	6858      	ldr	r0, [r3, #4]
   86112:	f020 0201 	bic.w	r2, r0, #1
   86116:	1898      	adds	r0, r3, r2
   86118:	6842      	ldr	r2, [r0, #4]
   8611a:	07d0      	lsls	r0, r2, #31
   8611c:	d426      	bmi.n	8616c <_realloc_r+0xb4>
   8611e:	685a      	ldr	r2, [r3, #4]
   86120:	428b      	cmp	r3, r1
   86122:	f022 0003 	bic.w	r0, r2, #3
   86126:	eb00 0a08 	add.w	sl, r0, r8
   8612a:	d118      	bne.n	8615e <_realloc_r+0xa6>
   8612c:	f107 0210 	add.w	r2, r7, #16
   86130:	4592      	cmp	sl, r2
   86132:	db1d      	blt.n	86170 <_realloc_r+0xb8>
   86134:	ebc7 0a0a 	rsb	sl, r7, sl
   86138:	eb0b 0507 	add.w	r5, fp, r7
   8613c:	f04a 0101 	orr.w	r1, sl, #1
   86140:	6069      	str	r1, [r5, #4]
   86142:	f854 2c04 	ldr.w	r2, [r4, #-4]
   86146:	4e92      	ldr	r6, [pc, #584]	; (86390 <_realloc_r+0x2d8>)
   86148:	f002 0301 	and.w	r3, r2, #1
   8614c:	431f      	orrs	r7, r3
   8614e:	60b5      	str	r5, [r6, #8]
   86150:	f844 7c04 	str.w	r7, [r4, #-4]
   86154:	4648      	mov	r0, r9
   86156:	f7ff ffae 	bl	860b6 <__malloc_unlock>
   8615a:	4626      	mov	r6, r4
   8615c:	e115      	b.n	8638a <_realloc_r+0x2d2>
   8615e:	45ba      	cmp	sl, r7
   86160:	db06      	blt.n	86170 <_realloc_r+0xb8>
   86162:	68dd      	ldr	r5, [r3, #12]
   86164:	689e      	ldr	r6, [r3, #8]
   86166:	60f5      	str	r5, [r6, #12]
   86168:	60ae      	str	r6, [r5, #8]
   8616a:	e0e6      	b.n	8633a <_realloc_r+0x282>
   8616c:	2000      	movs	r0, #0
   8616e:	4603      	mov	r3, r0
   86170:	07ea      	lsls	r2, r5, #31
   86172:	f100 8091 	bmi.w	86298 <_realloc_r+0x1e0>
   86176:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8617a:	ebc5 050b 	rsb	r5, r5, fp
   8617e:	686a      	ldr	r2, [r5, #4]
   86180:	f022 0203 	bic.w	r2, r2, #3
   86184:	2b00      	cmp	r3, #0
   86186:	d051      	beq.n	8622c <_realloc_r+0x174>
   86188:	eb02 0a08 	add.w	sl, r2, r8
   8618c:	428b      	cmp	r3, r1
   8618e:	4482      	add	sl, r0
   86190:	d145      	bne.n	8621e <_realloc_r+0x166>
   86192:	f107 0310 	add.w	r3, r7, #16
   86196:	459a      	cmp	sl, r3
   86198:	db48      	blt.n	8622c <_realloc_r+0x174>
   8619a:	462e      	mov	r6, r5
   8619c:	68e9      	ldr	r1, [r5, #12]
   8619e:	f856 3f08 	ldr.w	r3, [r6, #8]!
   861a2:	f1a8 0204 	sub.w	r2, r8, #4
   861a6:	2a24      	cmp	r2, #36	; 0x24
   861a8:	60d9      	str	r1, [r3, #12]
   861aa:	608b      	str	r3, [r1, #8]
   861ac:	d825      	bhi.n	861fa <_realloc_r+0x142>
   861ae:	2a13      	cmp	r2, #19
   861b0:	d91b      	bls.n	861ea <_realloc_r+0x132>
   861b2:	6821      	ldr	r1, [r4, #0]
   861b4:	2a1b      	cmp	r2, #27
   861b6:	60a9      	str	r1, [r5, #8]
   861b8:	6863      	ldr	r3, [r4, #4]
   861ba:	60eb      	str	r3, [r5, #12]
   861bc:	d803      	bhi.n	861c6 <_realloc_r+0x10e>
   861be:	f105 0010 	add.w	r0, r5, #16
   861c2:	3408      	adds	r4, #8
   861c4:	e012      	b.n	861ec <_realloc_r+0x134>
   861c6:	68a0      	ldr	r0, [r4, #8]
   861c8:	2a24      	cmp	r2, #36	; 0x24
   861ca:	6128      	str	r0, [r5, #16]
   861cc:	68e1      	ldr	r1, [r4, #12]
   861ce:	6169      	str	r1, [r5, #20]
   861d0:	d003      	beq.n	861da <_realloc_r+0x122>
   861d2:	f105 0018 	add.w	r0, r5, #24
   861d6:	3410      	adds	r4, #16
   861d8:	e008      	b.n	861ec <_realloc_r+0x134>
   861da:	6922      	ldr	r2, [r4, #16]
   861dc:	f105 0020 	add.w	r0, r5, #32
   861e0:	61aa      	str	r2, [r5, #24]
   861e2:	6963      	ldr	r3, [r4, #20]
   861e4:	3418      	adds	r4, #24
   861e6:	61eb      	str	r3, [r5, #28]
   861e8:	e000      	b.n	861ec <_realloc_r+0x134>
   861ea:	4630      	mov	r0, r6
   861ec:	6821      	ldr	r1, [r4, #0]
   861ee:	6001      	str	r1, [r0, #0]
   861f0:	6862      	ldr	r2, [r4, #4]
   861f2:	6042      	str	r2, [r0, #4]
   861f4:	68a3      	ldr	r3, [r4, #8]
   861f6:	6083      	str	r3, [r0, #8]
   861f8:	e003      	b.n	86202 <_realloc_r+0x14a>
   861fa:	4630      	mov	r0, r6
   861fc:	4621      	mov	r1, r4
   861fe:	f7ff ff3f 	bl	86080 <memmove>
   86202:	ebc7 0a0a 	rsb	sl, r7, sl
   86206:	19e8      	adds	r0, r5, r7
   86208:	f04a 0201 	orr.w	r2, sl, #1
   8620c:	6042      	str	r2, [r0, #4]
   8620e:	686b      	ldr	r3, [r5, #4]
   86210:	495f      	ldr	r1, [pc, #380]	; (86390 <_realloc_r+0x2d8>)
   86212:	6088      	str	r0, [r1, #8]
   86214:	f003 0001 	and.w	r0, r3, #1
   86218:	4307      	orrs	r7, r0
   8621a:	606f      	str	r7, [r5, #4]
   8621c:	e088      	b.n	86330 <_realloc_r+0x278>
   8621e:	45ba      	cmp	sl, r7
   86220:	db04      	blt.n	8622c <_realloc_r+0x174>
   86222:	68d9      	ldr	r1, [r3, #12]
   86224:	6898      	ldr	r0, [r3, #8]
   86226:	60c1      	str	r1, [r0, #12]
   86228:	6088      	str	r0, [r1, #8]
   8622a:	e003      	b.n	86234 <_realloc_r+0x17c>
   8622c:	eb02 0a08 	add.w	sl, r2, r8
   86230:	45ba      	cmp	sl, r7
   86232:	db31      	blt.n	86298 <_realloc_r+0x1e0>
   86234:	4628      	mov	r0, r5
   86236:	68eb      	ldr	r3, [r5, #12]
   86238:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8623c:	f1a8 0204 	sub.w	r2, r8, #4
   86240:	2a24      	cmp	r2, #36	; 0x24
   86242:	60cb      	str	r3, [r1, #12]
   86244:	6099      	str	r1, [r3, #8]
   86246:	d823      	bhi.n	86290 <_realloc_r+0x1d8>
   86248:	2a13      	cmp	r2, #19
   8624a:	d91a      	bls.n	86282 <_realloc_r+0x1ca>
   8624c:	6820      	ldr	r0, [r4, #0]
   8624e:	2a1b      	cmp	r2, #27
   86250:	60a8      	str	r0, [r5, #8]
   86252:	6866      	ldr	r6, [r4, #4]
   86254:	60ee      	str	r6, [r5, #12]
   86256:	d803      	bhi.n	86260 <_realloc_r+0x1a8>
   86258:	f105 0010 	add.w	r0, r5, #16
   8625c:	3408      	adds	r4, #8
   8625e:	e010      	b.n	86282 <_realloc_r+0x1ca>
   86260:	68a3      	ldr	r3, [r4, #8]
   86262:	2a24      	cmp	r2, #36	; 0x24
   86264:	612b      	str	r3, [r5, #16]
   86266:	68e1      	ldr	r1, [r4, #12]
   86268:	6169      	str	r1, [r5, #20]
   8626a:	d003      	beq.n	86274 <_realloc_r+0x1bc>
   8626c:	f105 0018 	add.w	r0, r5, #24
   86270:	3410      	adds	r4, #16
   86272:	e006      	b.n	86282 <_realloc_r+0x1ca>
   86274:	6922      	ldr	r2, [r4, #16]
   86276:	61aa      	str	r2, [r5, #24]
   86278:	6960      	ldr	r0, [r4, #20]
   8627a:	3418      	adds	r4, #24
   8627c:	61e8      	str	r0, [r5, #28]
   8627e:	f105 0020 	add.w	r0, r5, #32
   86282:	6826      	ldr	r6, [r4, #0]
   86284:	6006      	str	r6, [r0, #0]
   86286:	6863      	ldr	r3, [r4, #4]
   86288:	6043      	str	r3, [r0, #4]
   8628a:	68a1      	ldr	r1, [r4, #8]
   8628c:	6081      	str	r1, [r0, #8]
   8628e:	e055      	b.n	8633c <_realloc_r+0x284>
   86290:	4621      	mov	r1, r4
   86292:	f7ff fef5 	bl	86080 <memmove>
   86296:	e051      	b.n	8633c <_realloc_r+0x284>
   86298:	4631      	mov	r1, r6
   8629a:	4648      	mov	r0, r9
   8629c:	f7ff fce0 	bl	85c60 <_malloc_r>
   862a0:	4606      	mov	r6, r0
   862a2:	2800      	cmp	r0, #0
   862a4:	d044      	beq.n	86330 <_realloc_r+0x278>
   862a6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   862aa:	f1a0 0208 	sub.w	r2, r0, #8
   862ae:	f021 0301 	bic.w	r3, r1, #1
   862b2:	eb0b 0103 	add.w	r1, fp, r3
   862b6:	428a      	cmp	r2, r1
   862b8:	d106      	bne.n	862c8 <_realloc_r+0x210>
   862ba:	f850 6c04 	ldr.w	r6, [r0, #-4]
   862be:	f026 0503 	bic.w	r5, r6, #3
   862c2:	eb05 0a08 	add.w	sl, r5, r8
   862c6:	e038      	b.n	8633a <_realloc_r+0x282>
   862c8:	f1a8 0204 	sub.w	r2, r8, #4
   862cc:	2a24      	cmp	r2, #36	; 0x24
   862ce:	d828      	bhi.n	86322 <_realloc_r+0x26a>
   862d0:	2a13      	cmp	r2, #19
   862d2:	d91e      	bls.n	86312 <_realloc_r+0x25a>
   862d4:	6823      	ldr	r3, [r4, #0]
   862d6:	2a1b      	cmp	r2, #27
   862d8:	6003      	str	r3, [r0, #0]
   862da:	6861      	ldr	r1, [r4, #4]
   862dc:	6041      	str	r1, [r0, #4]
   862de:	d804      	bhi.n	862ea <_realloc_r+0x232>
   862e0:	f100 0008 	add.w	r0, r0, #8
   862e4:	f104 0208 	add.w	r2, r4, #8
   862e8:	e014      	b.n	86314 <_realloc_r+0x25c>
   862ea:	68a0      	ldr	r0, [r4, #8]
   862ec:	2a24      	cmp	r2, #36	; 0x24
   862ee:	60b0      	str	r0, [r6, #8]
   862f0:	68e3      	ldr	r3, [r4, #12]
   862f2:	60f3      	str	r3, [r6, #12]
   862f4:	d004      	beq.n	86300 <_realloc_r+0x248>
   862f6:	f106 0010 	add.w	r0, r6, #16
   862fa:	f104 0210 	add.w	r2, r4, #16
   862fe:	e009      	b.n	86314 <_realloc_r+0x25c>
   86300:	6922      	ldr	r2, [r4, #16]
   86302:	f106 0018 	add.w	r0, r6, #24
   86306:	6132      	str	r2, [r6, #16]
   86308:	6961      	ldr	r1, [r4, #20]
   8630a:	f104 0218 	add.w	r2, r4, #24
   8630e:	6171      	str	r1, [r6, #20]
   86310:	e000      	b.n	86314 <_realloc_r+0x25c>
   86312:	4622      	mov	r2, r4
   86314:	6813      	ldr	r3, [r2, #0]
   86316:	6003      	str	r3, [r0, #0]
   86318:	6851      	ldr	r1, [r2, #4]
   8631a:	6041      	str	r1, [r0, #4]
   8631c:	6892      	ldr	r2, [r2, #8]
   8631e:	6082      	str	r2, [r0, #8]
   86320:	e002      	b.n	86328 <_realloc_r+0x270>
   86322:	4621      	mov	r1, r4
   86324:	f7ff feac 	bl	86080 <memmove>
   86328:	4648      	mov	r0, r9
   8632a:	4621      	mov	r1, r4
   8632c:	f7ff f984 	bl	85638 <_free_r>
   86330:	4648      	mov	r0, r9
   86332:	f7ff fec0 	bl	860b6 <__malloc_unlock>
   86336:	e028      	b.n	8638a <_realloc_r+0x2d2>
   86338:	46c2      	mov	sl, r8
   8633a:	465d      	mov	r5, fp
   8633c:	ebc7 000a 	rsb	r0, r7, sl
   86340:	280f      	cmp	r0, #15
   86342:	686a      	ldr	r2, [r5, #4]
   86344:	d911      	bls.n	8636a <_realloc_r+0x2b2>
   86346:	f002 0601 	and.w	r6, r2, #1
   8634a:	19e9      	adds	r1, r5, r7
   8634c:	f040 0301 	orr.w	r3, r0, #1
   86350:	4337      	orrs	r7, r6
   86352:	606f      	str	r7, [r5, #4]
   86354:	1808      	adds	r0, r1, r0
   86356:	604b      	str	r3, [r1, #4]
   86358:	6842      	ldr	r2, [r0, #4]
   8635a:	3108      	adds	r1, #8
   8635c:	f042 0601 	orr.w	r6, r2, #1
   86360:	6046      	str	r6, [r0, #4]
   86362:	4648      	mov	r0, r9
   86364:	f7ff f968 	bl	85638 <_free_r>
   86368:	e00a      	b.n	86380 <_realloc_r+0x2c8>
   8636a:	f002 0601 	and.w	r6, r2, #1
   8636e:	ea4a 0306 	orr.w	r3, sl, r6
   86372:	606b      	str	r3, [r5, #4]
   86374:	eb05 010a 	add.w	r1, r5, sl
   86378:	6848      	ldr	r0, [r1, #4]
   8637a:	f040 0201 	orr.w	r2, r0, #1
   8637e:	604a      	str	r2, [r1, #4]
   86380:	4648      	mov	r0, r9
   86382:	f7ff fe98 	bl	860b6 <__malloc_unlock>
   86386:	f105 0608 	add.w	r6, r5, #8
   8638a:	4630      	mov	r0, r6
   8638c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86390:	200704ec 	.word	0x200704ec

00086394 <_sbrk_r>:
   86394:	b538      	push	{r3, r4, r5, lr}
   86396:	4c06      	ldr	r4, [pc, #24]	; (863b0 <_sbrk_r+0x1c>)
   86398:	2300      	movs	r3, #0
   8639a:	4605      	mov	r5, r0
   8639c:	4608      	mov	r0, r1
   8639e:	6023      	str	r3, [r4, #0]
   863a0:	f7fb f91a 	bl	815d8 <_sbrk>
   863a4:	1c43      	adds	r3, r0, #1
   863a6:	d102      	bne.n	863ae <_sbrk_r+0x1a>
   863a8:	6821      	ldr	r1, [r4, #0]
   863aa:	b101      	cbz	r1, 863ae <_sbrk_r+0x1a>
   863ac:	6029      	str	r1, [r5, #0]
   863ae:	bd38      	pop	{r3, r4, r5, pc}
   863b0:	2007ab50 	.word	0x2007ab50

000863b4 <__sread>:
   863b4:	b510      	push	{r4, lr}
   863b6:	460c      	mov	r4, r1
   863b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   863bc:	f000 fe16 	bl	86fec <_read_r>
   863c0:	2800      	cmp	r0, #0
   863c2:	db03      	blt.n	863cc <__sread+0x18>
   863c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   863c6:	1813      	adds	r3, r2, r0
   863c8:	6523      	str	r3, [r4, #80]	; 0x50
   863ca:	bd10      	pop	{r4, pc}
   863cc:	89a3      	ldrh	r3, [r4, #12]
   863ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   863d2:	81a1      	strh	r1, [r4, #12]
   863d4:	bd10      	pop	{r4, pc}

000863d6 <__seofread>:
   863d6:	2000      	movs	r0, #0
   863d8:	4770      	bx	lr

000863da <__swrite>:
   863da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   863de:	461d      	mov	r5, r3
   863e0:	898b      	ldrh	r3, [r1, #12]
   863e2:	460c      	mov	r4, r1
   863e4:	f403 7180 	and.w	r1, r3, #256	; 0x100
   863e8:	4616      	mov	r6, r2
   863ea:	b20a      	sxth	r2, r1
   863ec:	4607      	mov	r7, r0
   863ee:	b12a      	cbz	r2, 863fc <__swrite+0x22>
   863f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   863f4:	2200      	movs	r2, #0
   863f6:	2302      	movs	r3, #2
   863f8:	f000 fde6 	bl	86fc8 <_lseek_r>
   863fc:	89a0      	ldrh	r0, [r4, #12]
   863fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86402:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   86406:	81a3      	strh	r3, [r4, #12]
   86408:	4638      	mov	r0, r7
   8640a:	4632      	mov	r2, r6
   8640c:	462b      	mov	r3, r5
   8640e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86412:	f000 bd4b 	b.w	86eac <_write_r>

00086416 <__sseek>:
   86416:	b510      	push	{r4, lr}
   86418:	460c      	mov	r4, r1
   8641a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8641e:	f000 fdd3 	bl	86fc8 <_lseek_r>
   86422:	1c43      	adds	r3, r0, #1
   86424:	89a3      	ldrh	r3, [r4, #12]
   86426:	d103      	bne.n	86430 <__sseek+0x1a>
   86428:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   8642c:	81a2      	strh	r2, [r4, #12]
   8642e:	bd10      	pop	{r4, pc}
   86430:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   86434:	81a1      	strh	r1, [r4, #12]
   86436:	6520      	str	r0, [r4, #80]	; 0x50
   86438:	bd10      	pop	{r4, pc}

0008643a <__sclose>:
   8643a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8643e:	f000 bd47 	b.w	86ed0 <_close_r>

00086442 <strcmp>:
   86442:	f810 2b01 	ldrb.w	r2, [r0], #1
   86446:	f811 3b01 	ldrb.w	r3, [r1], #1
   8644a:	2a01      	cmp	r2, #1
   8644c:	bf28      	it	cs
   8644e:	429a      	cmpcs	r2, r3
   86450:	d0f7      	beq.n	86442 <strcmp>
   86452:	eba2 0003 	sub.w	r0, r2, r3
   86456:	4770      	bx	lr

00086458 <__ssprint_r>:
   86458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8645c:	4607      	mov	r7, r0
   8645e:	6890      	ldr	r0, [r2, #8]
   86460:	460c      	mov	r4, r1
   86462:	4615      	mov	r5, r2
   86464:	f8d2 8000 	ldr.w	r8, [r2]
   86468:	b908      	cbnz	r0, 8646e <__ssprint_r+0x16>
   8646a:	6050      	str	r0, [r2, #4]
   8646c:	e06f      	b.n	8654e <__ssprint_r+0xf6>
   8646e:	f04f 0b00 	mov.w	fp, #0
   86472:	465e      	mov	r6, fp
   86474:	b936      	cbnz	r6, 86484 <__ssprint_r+0x2c>
   86476:	f8d8 b000 	ldr.w	fp, [r8]
   8647a:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8647e:	f108 0808 	add.w	r8, r8, #8
   86482:	e7f7      	b.n	86474 <__ssprint_r+0x1c>
   86484:	68a3      	ldr	r3, [r4, #8]
   86486:	429e      	cmp	r6, r3
   86488:	d34c      	bcc.n	86524 <__ssprint_r+0xcc>
   8648a:	89a2      	ldrh	r2, [r4, #12]
   8648c:	f412 6f90 	tst.w	r2, #1152	; 0x480
   86490:	d046      	beq.n	86520 <__ssprint_r+0xc8>
   86492:	6823      	ldr	r3, [r4, #0]
   86494:	6960      	ldr	r0, [r4, #20]
   86496:	6921      	ldr	r1, [r4, #16]
   86498:	f04f 0a03 	mov.w	sl, #3
   8649c:	ebc1 0903 	rsb	r9, r1, r3
   864a0:	fb0a f300 	mul.w	r3, sl, r0
   864a4:	2002      	movs	r0, #2
   864a6:	fb93 faf0 	sdiv	sl, r3, r0
   864aa:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   864ae:	f109 0301 	add.w	r3, r9, #1
   864b2:	1998      	adds	r0, r3, r6
   864b4:	b213      	sxth	r3, r2
   864b6:	4582      	cmp	sl, r0
   864b8:	bf38      	it	cc
   864ba:	4682      	movcc	sl, r0
   864bc:	4638      	mov	r0, r7
   864be:	b183      	cbz	r3, 864e2 <__ssprint_r+0x8a>
   864c0:	4651      	mov	r1, sl
   864c2:	f7ff fbcd 	bl	85c60 <_malloc_r>
   864c6:	b1a8      	cbz	r0, 864f4 <__ssprint_r+0x9c>
   864c8:	6921      	ldr	r1, [r4, #16]
   864ca:	464a      	mov	r2, r9
   864cc:	9001      	str	r0, [sp, #4]
   864ce:	f7fd fc4b 	bl	83d68 <memcpy>
   864d2:	89a0      	ldrh	r0, [r4, #12]
   864d4:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   864d8:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   864dc:	81a1      	strh	r1, [r4, #12]
   864de:	9901      	ldr	r1, [sp, #4]
   864e0:	e014      	b.n	8650c <__ssprint_r+0xb4>
   864e2:	4652      	mov	r2, sl
   864e4:	f7ff fde8 	bl	860b8 <_realloc_r>
   864e8:	4601      	mov	r1, r0
   864ea:	b978      	cbnz	r0, 8650c <__ssprint_r+0xb4>
   864ec:	4638      	mov	r0, r7
   864ee:	6921      	ldr	r1, [r4, #16]
   864f0:	f7ff f8a2 	bl	85638 <_free_r>
   864f4:	89a3      	ldrh	r3, [r4, #12]
   864f6:	200c      	movs	r0, #12
   864f8:	2100      	movs	r1, #0
   864fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   864fe:	6038      	str	r0, [r7, #0]
   86500:	81a2      	strh	r2, [r4, #12]
   86502:	f04f 30ff 	mov.w	r0, #4294967295
   86506:	60a9      	str	r1, [r5, #8]
   86508:	6069      	str	r1, [r5, #4]
   8650a:	e020      	b.n	8654e <__ssprint_r+0xf6>
   8650c:	eb01 0309 	add.w	r3, r1, r9
   86510:	ebc9 000a 	rsb	r0, r9, sl
   86514:	6023      	str	r3, [r4, #0]
   86516:	6121      	str	r1, [r4, #16]
   86518:	f8c4 a014 	str.w	sl, [r4, #20]
   8651c:	4633      	mov	r3, r6
   8651e:	60a0      	str	r0, [r4, #8]
   86520:	429e      	cmp	r6, r3
   86522:	d200      	bcs.n	86526 <__ssprint_r+0xce>
   86524:	4633      	mov	r3, r6
   86526:	461a      	mov	r2, r3
   86528:	4659      	mov	r1, fp
   8652a:	6820      	ldr	r0, [r4, #0]
   8652c:	9301      	str	r3, [sp, #4]
   8652e:	f7ff fda7 	bl	86080 <memmove>
   86532:	68a2      	ldr	r2, [r4, #8]
   86534:	9901      	ldr	r1, [sp, #4]
   86536:	6823      	ldr	r3, [r4, #0]
   86538:	1a50      	subs	r0, r2, r1
   8653a:	185a      	adds	r2, r3, r1
   8653c:	68a9      	ldr	r1, [r5, #8]
   8653e:	60a0      	str	r0, [r4, #8]
   86540:	1b8e      	subs	r6, r1, r6
   86542:	6022      	str	r2, [r4, #0]
   86544:	60ae      	str	r6, [r5, #8]
   86546:	2e00      	cmp	r6, #0
   86548:	d195      	bne.n	86476 <__ssprint_r+0x1e>
   8654a:	606e      	str	r6, [r5, #4]
   8654c:	4630      	mov	r0, r6
   8654e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086552 <_svfiprintf_r>:
   86552:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86556:	461e      	mov	r6, r3
   86558:	898b      	ldrh	r3, [r1, #12]
   8655a:	4689      	mov	r9, r1
   8655c:	f003 0180 	and.w	r1, r3, #128	; 0x80
   86560:	4614      	mov	r4, r2
   86562:	b20a      	sxth	r2, r1
   86564:	b0a9      	sub	sp, #164	; 0xa4
   86566:	4683      	mov	fp, r0
   86568:	b19a      	cbz	r2, 86592 <_svfiprintf_r+0x40>
   8656a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8656e:	b983      	cbnz	r3, 86592 <_svfiprintf_r+0x40>
   86570:	2140      	movs	r1, #64	; 0x40
   86572:	f7ff fb75 	bl	85c60 <_malloc_r>
   86576:	f8c9 0000 	str.w	r0, [r9]
   8657a:	f8c9 0010 	str.w	r0, [r9, #16]
   8657e:	b928      	cbnz	r0, 8658c <_svfiprintf_r+0x3a>
   86580:	220c      	movs	r2, #12
   86582:	f8cb 2000 	str.w	r2, [fp]
   86586:	f04f 30ff 	mov.w	r0, #4294967295
   8658a:	e3db      	b.n	86d44 <_svfiprintf_r+0x7f2>
   8658c:	2040      	movs	r0, #64	; 0x40
   8658e:	f8c9 0014 	str.w	r0, [r9, #20]
   86592:	2100      	movs	r1, #0
   86594:	ad18      	add	r5, sp, #96	; 0x60
   86596:	950b      	str	r5, [sp, #44]	; 0x2c
   86598:	910d      	str	r1, [sp, #52]	; 0x34
   8659a:	910c      	str	r1, [sp, #48]	; 0x30
   8659c:	9401      	str	r4, [sp, #4]
   8659e:	9105      	str	r1, [sp, #20]
   865a0:	9104      	str	r1, [sp, #16]
   865a2:	46a8      	mov	r8, r5
   865a4:	9b01      	ldr	r3, [sp, #4]
   865a6:	461c      	mov	r4, r3
   865a8:	f813 2b01 	ldrb.w	r2, [r3], #1
   865ac:	b91a      	cbnz	r2, 865b6 <_svfiprintf_r+0x64>
   865ae:	9801      	ldr	r0, [sp, #4]
   865b0:	1a25      	subs	r5, r4, r0
   865b2:	d103      	bne.n	865bc <_svfiprintf_r+0x6a>
   865b4:	e01d      	b.n	865f2 <_svfiprintf_r+0xa0>
   865b6:	2a25      	cmp	r2, #37	; 0x25
   865b8:	d1f5      	bne.n	865a6 <_svfiprintf_r+0x54>
   865ba:	e7f8      	b.n	865ae <_svfiprintf_r+0x5c>
   865bc:	9a01      	ldr	r2, [sp, #4]
   865be:	990d      	ldr	r1, [sp, #52]	; 0x34
   865c0:	e888 0024 	stmia.w	r8, {r2, r5}
   865c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   865c6:	194b      	adds	r3, r1, r5
   865c8:	1c50      	adds	r0, r2, #1
   865ca:	2807      	cmp	r0, #7
   865cc:	930d      	str	r3, [sp, #52]	; 0x34
   865ce:	900c      	str	r0, [sp, #48]	; 0x30
   865d0:	dc02      	bgt.n	865d8 <_svfiprintf_r+0x86>
   865d2:	f108 0808 	add.w	r8, r8, #8
   865d6:	e009      	b.n	865ec <_svfiprintf_r+0x9a>
   865d8:	4658      	mov	r0, fp
   865da:	4649      	mov	r1, r9
   865dc:	aa0b      	add	r2, sp, #44	; 0x2c
   865de:	f7ff ff3b 	bl	86458 <__ssprint_r>
   865e2:	2800      	cmp	r0, #0
   865e4:	f040 83a3 	bne.w	86d2e <_svfiprintf_r+0x7dc>
   865e8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   865ec:	9904      	ldr	r1, [sp, #16]
   865ee:	194b      	adds	r3, r1, r5
   865f0:	9304      	str	r3, [sp, #16]
   865f2:	7822      	ldrb	r2, [r4, #0]
   865f4:	2a00      	cmp	r2, #0
   865f6:	f000 8393 	beq.w	86d20 <_svfiprintf_r+0x7ce>
   865fa:	2200      	movs	r2, #0
   865fc:	3401      	adds	r4, #1
   865fe:	9401      	str	r4, [sp, #4]
   86600:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   86604:	f04f 3cff 	mov.w	ip, #4294967295
   86608:	9203      	str	r2, [sp, #12]
   8660a:	4617      	mov	r7, r2
   8660c:	9801      	ldr	r0, [sp, #4]
   8660e:	f810 3b01 	ldrb.w	r3, [r0], #1
   86612:	9001      	str	r0, [sp, #4]
   86614:	2b63      	cmp	r3, #99	; 0x63
   86616:	f000 80b3 	beq.w	86780 <_svfiprintf_r+0x22e>
   8661a:	dc33      	bgt.n	86684 <_svfiprintf_r+0x132>
   8661c:	2b39      	cmp	r3, #57	; 0x39
   8661e:	dc1a      	bgt.n	86656 <_svfiprintf_r+0x104>
   86620:	2b31      	cmp	r3, #49	; 0x31
   86622:	f280 8091 	bge.w	86748 <_svfiprintf_r+0x1f6>
   86626:	2b2b      	cmp	r3, #43	; 0x2b
   86628:	d101      	bne.n	8662e <_svfiprintf_r+0xdc>
   8662a:	461a      	mov	r2, r3
   8662c:	e7ee      	b.n	8660c <_svfiprintf_r+0xba>
   8662e:	dc0a      	bgt.n	86646 <_svfiprintf_r+0xf4>
   86630:	2b23      	cmp	r3, #35	; 0x23
   86632:	d055      	beq.n	866e0 <_svfiprintf_r+0x18e>
   86634:	2b2a      	cmp	r3, #42	; 0x2a
   86636:	d056      	beq.n	866e6 <_svfiprintf_r+0x194>
   86638:	2b20      	cmp	r3, #32
   8663a:	f040 81f6 	bne.w	86a2a <_svfiprintf_r+0x4d8>
   8663e:	2a00      	cmp	r2, #0
   86640:	bf08      	it	eq
   86642:	2220      	moveq	r2, #32
   86644:	e7e2      	b.n	8660c <_svfiprintf_r+0xba>
   86646:	2b2e      	cmp	r3, #46	; 0x2e
   86648:	d058      	beq.n	866fc <_svfiprintf_r+0x1aa>
   8664a:	2b30      	cmp	r3, #48	; 0x30
   8664c:	d079      	beq.n	86742 <_svfiprintf_r+0x1f0>
   8664e:	2b2d      	cmp	r3, #45	; 0x2d
   86650:	f040 81eb 	bne.w	86a2a <_svfiprintf_r+0x4d8>
   86654:	e04f      	b.n	866f6 <_svfiprintf_r+0x1a4>
   86656:	2b4f      	cmp	r3, #79	; 0x4f
   86658:	f000 80de 	beq.w	86818 <_svfiprintf_r+0x2c6>
   8665c:	dc07      	bgt.n	8666e <_svfiprintf_r+0x11c>
   8665e:	2b44      	cmp	r3, #68	; 0x44
   86660:	f040 81e3 	bne.w	86a2a <_svfiprintf_r+0x4d8>
   86664:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   86668:	f047 0710 	orr.w	r7, r7, #16
   8666c:	e090      	b.n	86790 <_svfiprintf_r+0x23e>
   8666e:	2b55      	cmp	r3, #85	; 0x55
   86670:	f000 811f 	beq.w	868b2 <_svfiprintf_r+0x360>
   86674:	2b58      	cmp	r3, #88	; 0x58
   86676:	f040 81d8 	bne.w	86a2a <_svfiprintf_r+0x4d8>
   8667a:	4daf      	ldr	r5, [pc, #700]	; (86938 <_svfiprintf_r+0x3e6>)
   8667c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   86680:	9505      	str	r5, [sp, #20]
   86682:	e130      	b.n	868e6 <_svfiprintf_r+0x394>
   86684:	2b6f      	cmp	r3, #111	; 0x6f
   86686:	f000 80c9 	beq.w	8681c <_svfiprintf_r+0x2ca>
   8668a:	dc10      	bgt.n	866ae <_svfiprintf_r+0x15c>
   8668c:	2b69      	cmp	r3, #105	; 0x69
   8668e:	d024      	beq.n	866da <_svfiprintf_r+0x188>
   86690:	dc07      	bgt.n	866a2 <_svfiprintf_r+0x150>
   86692:	2b64      	cmp	r3, #100	; 0x64
   86694:	d021      	beq.n	866da <_svfiprintf_r+0x188>
   86696:	2b68      	cmp	r3, #104	; 0x68
   86698:	f040 81c7 	bne.w	86a2a <_svfiprintf_r+0x4d8>
   8669c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   866a0:	e7b4      	b.n	8660c <_svfiprintf_r+0xba>
   866a2:	2b6c      	cmp	r3, #108	; 0x6c
   866a4:	d05f      	beq.n	86766 <_svfiprintf_r+0x214>
   866a6:	2b6e      	cmp	r3, #110	; 0x6e
   866a8:	f040 81bf 	bne.w	86a2a <_svfiprintf_r+0x4d8>
   866ac:	e096      	b.n	867dc <_svfiprintf_r+0x28a>
   866ae:	2b73      	cmp	r3, #115	; 0x73
   866b0:	f000 80df 	beq.w	86872 <_svfiprintf_r+0x320>
   866b4:	dc06      	bgt.n	866c4 <_svfiprintf_r+0x172>
   866b6:	2b70      	cmp	r3, #112	; 0x70
   866b8:	f000 80cd 	beq.w	86856 <_svfiprintf_r+0x304>
   866bc:	2b71      	cmp	r3, #113	; 0x71
   866be:	f040 81b4 	bne.w	86a2a <_svfiprintf_r+0x4d8>
   866c2:	e05a      	b.n	8677a <_svfiprintf_r+0x228>
   866c4:	2b75      	cmp	r3, #117	; 0x75
   866c6:	f000 80f6 	beq.w	868b6 <_svfiprintf_r+0x364>
   866ca:	2b78      	cmp	r3, #120	; 0x78
   866cc:	f040 81ad 	bne.w	86a2a <_svfiprintf_r+0x4d8>
   866d0:	4d9a      	ldr	r5, [pc, #616]	; (8693c <_svfiprintf_r+0x3ea>)
   866d2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   866d6:	9505      	str	r5, [sp, #20]
   866d8:	e105      	b.n	868e6 <_svfiprintf_r+0x394>
   866da:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   866de:	e057      	b.n	86790 <_svfiprintf_r+0x23e>
   866e0:	f047 0701 	orr.w	r7, r7, #1
   866e4:	e792      	b.n	8660c <_svfiprintf_r+0xba>
   866e6:	1d33      	adds	r3, r6, #4
   866e8:	6836      	ldr	r6, [r6, #0]
   866ea:	2e00      	cmp	r6, #0
   866ec:	9603      	str	r6, [sp, #12]
   866ee:	da15      	bge.n	8671c <_svfiprintf_r+0x1ca>
   866f0:	4270      	negs	r0, r6
   866f2:	9003      	str	r0, [sp, #12]
   866f4:	461e      	mov	r6, r3
   866f6:	f047 0704 	orr.w	r7, r7, #4
   866fa:	e787      	b.n	8660c <_svfiprintf_r+0xba>
   866fc:	9901      	ldr	r1, [sp, #4]
   866fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   86702:	2b2a      	cmp	r3, #42	; 0x2a
   86704:	9101      	str	r1, [sp, #4]
   86706:	d10b      	bne.n	86720 <_svfiprintf_r+0x1ce>
   86708:	f8d6 c000 	ldr.w	ip, [r6]
   8670c:	1d33      	adds	r3, r6, #4
   8670e:	f1bc 0f00 	cmp.w	ip, #0
   86712:	da03      	bge.n	8671c <_svfiprintf_r+0x1ca>
   86714:	461e      	mov	r6, r3
   86716:	f04f 3cff 	mov.w	ip, #4294967295
   8671a:	e777      	b.n	8660c <_svfiprintf_r+0xba>
   8671c:	461e      	mov	r6, r3
   8671e:	e775      	b.n	8660c <_svfiprintf_r+0xba>
   86720:	f04f 0c00 	mov.w	ip, #0
   86724:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86728:	2809      	cmp	r0, #9
   8672a:	d807      	bhi.n	8673c <_svfiprintf_r+0x1ea>
   8672c:	9901      	ldr	r1, [sp, #4]
   8672e:	230a      	movs	r3, #10
   86730:	fb03 0c0c 	mla	ip, r3, ip, r0
   86734:	f811 3b01 	ldrb.w	r3, [r1], #1
   86738:	9101      	str	r1, [sp, #4]
   8673a:	e7f3      	b.n	86724 <_svfiprintf_r+0x1d2>
   8673c:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   86740:	e768      	b.n	86614 <_svfiprintf_r+0xc2>
   86742:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   86746:	e761      	b.n	8660c <_svfiprintf_r+0xba>
   86748:	9801      	ldr	r0, [sp, #4]
   8674a:	2100      	movs	r1, #0
   8674c:	3b30      	subs	r3, #48	; 0x30
   8674e:	240a      	movs	r4, #10
   86750:	fb04 3101 	mla	r1, r4, r1, r3
   86754:	f810 3b01 	ldrb.w	r3, [r0], #1
   86758:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8675c:	2c09      	cmp	r4, #9
   8675e:	9001      	str	r0, [sp, #4]
   86760:	d9f4      	bls.n	8674c <_svfiprintf_r+0x1fa>
   86762:	9103      	str	r1, [sp, #12]
   86764:	e756      	b.n	86614 <_svfiprintf_r+0xc2>
   86766:	9901      	ldr	r1, [sp, #4]
   86768:	780b      	ldrb	r3, [r1, #0]
   8676a:	2b6c      	cmp	r3, #108	; 0x6c
   8676c:	d102      	bne.n	86774 <_svfiprintf_r+0x222>
   8676e:	1c48      	adds	r0, r1, #1
   86770:	9001      	str	r0, [sp, #4]
   86772:	e002      	b.n	8677a <_svfiprintf_r+0x228>
   86774:	f047 0710 	orr.w	r7, r7, #16
   86778:	e748      	b.n	8660c <_svfiprintf_r+0xba>
   8677a:	f047 0720 	orr.w	r7, r7, #32
   8677e:	e745      	b.n	8660c <_svfiprintf_r+0xba>
   86780:	6832      	ldr	r2, [r6, #0]
   86782:	2500      	movs	r5, #0
   86784:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   86788:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8678c:	3604      	adds	r6, #4
   8678e:	e156      	b.n	86a3e <_svfiprintf_r+0x4ec>
   86790:	06ba      	lsls	r2, r7, #26
   86792:	d507      	bpl.n	867a4 <_svfiprintf_r+0x252>
   86794:	3607      	adds	r6, #7
   86796:	f026 0507 	bic.w	r5, r6, #7
   8679a:	f105 0608 	add.w	r6, r5, #8
   8679e:	e9d5 4500 	ldrd	r4, r5, [r5]
   867a2:	e00f      	b.n	867c4 <_svfiprintf_r+0x272>
   867a4:	f017 0f10 	tst.w	r7, #16
   867a8:	f106 0104 	add.w	r1, r6, #4
   867ac:	d001      	beq.n	867b2 <_svfiprintf_r+0x260>
   867ae:	6832      	ldr	r2, [r6, #0]
   867b0:	e005      	b.n	867be <_svfiprintf_r+0x26c>
   867b2:	f017 0f40 	tst.w	r7, #64	; 0x40
   867b6:	6832      	ldr	r2, [r6, #0]
   867b8:	d001      	beq.n	867be <_svfiprintf_r+0x26c>
   867ba:	b214      	sxth	r4, r2
   867bc:	e000      	b.n	867c0 <_svfiprintf_r+0x26e>
   867be:	4614      	mov	r4, r2
   867c0:	17e5      	asrs	r5, r4, #31
   867c2:	460e      	mov	r6, r1
   867c4:	2c00      	cmp	r4, #0
   867c6:	f175 0200 	sbcs.w	r2, r5, #0
   867ca:	f280 80b9 	bge.w	86940 <_svfiprintf_r+0x3ee>
   867ce:	232d      	movs	r3, #45	; 0x2d
   867d0:	4264      	negs	r4, r4
   867d2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   867d6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   867da:	e0b1      	b.n	86940 <_svfiprintf_r+0x3ee>
   867dc:	f017 0f20 	tst.w	r7, #32
   867e0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   867e4:	f106 0204 	add.w	r2, r6, #4
   867e8:	d005      	beq.n	867f6 <_svfiprintf_r+0x2a4>
   867ea:	9c04      	ldr	r4, [sp, #16]
   867ec:	6835      	ldr	r5, [r6, #0]
   867ee:	17e0      	asrs	r0, r4, #31
   867f0:	602c      	str	r4, [r5, #0]
   867f2:	6068      	str	r0, [r5, #4]
   867f4:	e004      	b.n	86800 <_svfiprintf_r+0x2ae>
   867f6:	06fb      	lsls	r3, r7, #27
   867f8:	d504      	bpl.n	86804 <_svfiprintf_r+0x2b2>
   867fa:	6833      	ldr	r3, [r6, #0]
   867fc:	9904      	ldr	r1, [sp, #16]
   867fe:	6019      	str	r1, [r3, #0]
   86800:	4616      	mov	r6, r2
   86802:	e6cf      	b.n	865a4 <_svfiprintf_r+0x52>
   86804:	6830      	ldr	r0, [r6, #0]
   86806:	9c04      	ldr	r4, [sp, #16]
   86808:	f017 0f40 	tst.w	r7, #64	; 0x40
   8680c:	f106 0604 	add.w	r6, r6, #4
   86810:	bf14      	ite	ne
   86812:	8004      	strhne	r4, [r0, #0]
   86814:	6004      	streq	r4, [r0, #0]
   86816:	e6c5      	b.n	865a4 <_svfiprintf_r+0x52>
   86818:	f047 0710 	orr.w	r7, r7, #16
   8681c:	f017 0020 	ands.w	r0, r7, #32
   86820:	d008      	beq.n	86834 <_svfiprintf_r+0x2e2>
   86822:	1df3      	adds	r3, r6, #7
   86824:	f023 0507 	bic.w	r5, r3, #7
   86828:	f105 0608 	add.w	r6, r5, #8
   8682c:	e9d5 4500 	ldrd	r4, r5, [r5]
   86830:	2000      	movs	r0, #0
   86832:	e07c      	b.n	8692e <_svfiprintf_r+0x3dc>
   86834:	f017 0110 	ands.w	r1, r7, #16
   86838:	f106 0204 	add.w	r2, r6, #4
   8683c:	d106      	bne.n	8684c <_svfiprintf_r+0x2fa>
   8683e:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   86842:	d003      	beq.n	8684c <_svfiprintf_r+0x2fa>
   86844:	8834      	ldrh	r4, [r6, #0]
   86846:	2500      	movs	r5, #0
   86848:	4616      	mov	r6, r2
   8684a:	e7f1      	b.n	86830 <_svfiprintf_r+0x2de>
   8684c:	6836      	ldr	r6, [r6, #0]
   8684e:	2500      	movs	r5, #0
   86850:	4634      	mov	r4, r6
   86852:	4616      	mov	r6, r2
   86854:	e06b      	b.n	8692e <_svfiprintf_r+0x3dc>
   86856:	4b39      	ldr	r3, [pc, #228]	; (8693c <_svfiprintf_r+0x3ea>)
   86858:	2130      	movs	r1, #48	; 0x30
   8685a:	2278      	movs	r2, #120	; 0x78
   8685c:	6834      	ldr	r4, [r6, #0]
   8685e:	2500      	movs	r5, #0
   86860:	f047 0702 	orr.w	r7, r7, #2
   86864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   86868:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8686c:	3604      	adds	r6, #4
   8686e:	9305      	str	r3, [sp, #20]
   86870:	e05c      	b.n	8692c <_svfiprintf_r+0x3da>
   86872:	4631      	mov	r1, r6
   86874:	2500      	movs	r5, #0
   86876:	f8d1 a000 	ldr.w	sl, [r1]
   8687a:	3604      	adds	r6, #4
   8687c:	45ac      	cmp	ip, r5
   8687e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   86882:	4650      	mov	r0, sl
   86884:	db11      	blt.n	868aa <_svfiprintf_r+0x358>
   86886:	4662      	mov	r2, ip
   86888:	4629      	mov	r1, r5
   8688a:	f8cd c000 	str.w	ip, [sp]
   8688e:	f7ff fbe9 	bl	86064 <memchr>
   86892:	f8dd c000 	ldr.w	ip, [sp]
   86896:	2800      	cmp	r0, #0
   86898:	f000 80d5 	beq.w	86a46 <_svfiprintf_r+0x4f4>
   8689c:	ebca 0400 	rsb	r4, sl, r0
   868a0:	4564      	cmp	r4, ip
   868a2:	f340 80d2 	ble.w	86a4a <_svfiprintf_r+0x4f8>
   868a6:	4664      	mov	r4, ip
   868a8:	e0cf      	b.n	86a4a <_svfiprintf_r+0x4f8>
   868aa:	f7fd fb31 	bl	83f10 <strlen>
   868ae:	4604      	mov	r4, r0
   868b0:	e0cb      	b.n	86a4a <_svfiprintf_r+0x4f8>
   868b2:	f047 0710 	orr.w	r7, r7, #16
   868b6:	06bd      	lsls	r5, r7, #26
   868b8:	d506      	bpl.n	868c8 <_svfiprintf_r+0x376>
   868ba:	1df0      	adds	r0, r6, #7
   868bc:	f020 0407 	bic.w	r4, r0, #7
   868c0:	f104 0608 	add.w	r6, r4, #8
   868c4:	cc30      	ldmia	r4, {r4, r5}
   868c6:	e00c      	b.n	868e2 <_svfiprintf_r+0x390>
   868c8:	f017 0f10 	tst.w	r7, #16
   868cc:	f106 0304 	add.w	r3, r6, #4
   868d0:	d103      	bne.n	868da <_svfiprintf_r+0x388>
   868d2:	067c      	lsls	r4, r7, #25
   868d4:	d501      	bpl.n	868da <_svfiprintf_r+0x388>
   868d6:	8834      	ldrh	r4, [r6, #0]
   868d8:	e001      	b.n	868de <_svfiprintf_r+0x38c>
   868da:	6835      	ldr	r5, [r6, #0]
   868dc:	462c      	mov	r4, r5
   868de:	2500      	movs	r5, #0
   868e0:	461e      	mov	r6, r3
   868e2:	2001      	movs	r0, #1
   868e4:	e023      	b.n	8692e <_svfiprintf_r+0x3dc>
   868e6:	06b8      	lsls	r0, r7, #26
   868e8:	d507      	bpl.n	868fa <_svfiprintf_r+0x3a8>
   868ea:	1df4      	adds	r4, r6, #7
   868ec:	f024 0107 	bic.w	r1, r4, #7
   868f0:	f101 0608 	add.w	r6, r1, #8
   868f4:	e9d1 4500 	ldrd	r4, r5, [r1]
   868f8:	e00c      	b.n	86914 <_svfiprintf_r+0x3c2>
   868fa:	f017 0f10 	tst.w	r7, #16
   868fe:	f106 0004 	add.w	r0, r6, #4
   86902:	d103      	bne.n	8690c <_svfiprintf_r+0x3ba>
   86904:	0679      	lsls	r1, r7, #25
   86906:	d501      	bpl.n	8690c <_svfiprintf_r+0x3ba>
   86908:	8834      	ldrh	r4, [r6, #0]
   8690a:	e001      	b.n	86910 <_svfiprintf_r+0x3be>
   8690c:	6836      	ldr	r6, [r6, #0]
   8690e:	4634      	mov	r4, r6
   86910:	2500      	movs	r5, #0
   86912:	4606      	mov	r6, r0
   86914:	07fa      	lsls	r2, r7, #31
   86916:	d509      	bpl.n	8692c <_svfiprintf_r+0x3da>
   86918:	ea54 0205 	orrs.w	r2, r4, r5
   8691c:	d006      	beq.n	8692c <_svfiprintf_r+0x3da>
   8691e:	2230      	movs	r2, #48	; 0x30
   86920:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   86924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   86928:	f047 0702 	orr.w	r7, r7, #2
   8692c:	2002      	movs	r0, #2
   8692e:	2100      	movs	r1, #0
   86930:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   86934:	e005      	b.n	86942 <_svfiprintf_r+0x3f0>
   86936:	bf00      	nop
   86938:	000876a6 	.word	0x000876a6
   8693c:	000876b7 	.word	0x000876b7
   86940:	2001      	movs	r0, #1
   86942:	f1bc 0f00 	cmp.w	ip, #0
   86946:	bfa8      	it	ge
   86948:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8694c:	ea54 0105 	orrs.w	r1, r4, r5
   86950:	d102      	bne.n	86958 <_svfiprintf_r+0x406>
   86952:	f1bc 0f00 	cmp.w	ip, #0
   86956:	d058      	beq.n	86a0a <_svfiprintf_r+0x4b8>
   86958:	2801      	cmp	r0, #1
   8695a:	d01d      	beq.n	86998 <_svfiprintf_r+0x446>
   8695c:	2802      	cmp	r0, #2
   8695e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   86962:	d041      	beq.n	869e8 <_svfiprintf_r+0x496>
   86964:	f004 0207 	and.w	r2, r4, #7
   86968:	08e4      	lsrs	r4, r4, #3
   8696a:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8696e:	08e9      	lsrs	r1, r5, #3
   86970:	4604      	mov	r4, r0
   86972:	460d      	mov	r5, r1
   86974:	3230      	adds	r2, #48	; 0x30
   86976:	ea54 0105 	orrs.w	r1, r4, r5
   8697a:	469a      	mov	sl, r3
   8697c:	701a      	strb	r2, [r3, #0]
   8697e:	f103 33ff 	add.w	r3, r3, #4294967295
   86982:	d1ef      	bne.n	86964 <_svfiprintf_r+0x412>
   86984:	07f8      	lsls	r0, r7, #31
   86986:	4655      	mov	r5, sl
   86988:	d54a      	bpl.n	86a20 <_svfiprintf_r+0x4ce>
   8698a:	2a30      	cmp	r2, #48	; 0x30
   8698c:	d048      	beq.n	86a20 <_svfiprintf_r+0x4ce>
   8698e:	2230      	movs	r2, #48	; 0x30
   86990:	469a      	mov	sl, r3
   86992:	f805 2c01 	strb.w	r2, [r5, #-1]
   86996:	e043      	b.n	86a20 <_svfiprintf_r+0x4ce>
   86998:	2d00      	cmp	r5, #0
   8699a:	bf08      	it	eq
   8699c:	2c0a      	cmpeq	r4, #10
   8699e:	d203      	bcs.n	869a8 <_svfiprintf_r+0x456>
   869a0:	3430      	adds	r4, #48	; 0x30
   869a2:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   869a6:	e036      	b.n	86a16 <_svfiprintf_r+0x4c4>
   869a8:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   869ac:	9302      	str	r3, [sp, #8]
   869ae:	4620      	mov	r0, r4
   869b0:	4629      	mov	r1, r5
   869b2:	220a      	movs	r2, #10
   869b4:	2300      	movs	r3, #0
   869b6:	f8cd c000 	str.w	ip, [sp]
   869ba:	f000 fb29 	bl	87010 <__aeabi_uldivmod>
   869be:	9802      	ldr	r0, [sp, #8]
   869c0:	3230      	adds	r2, #48	; 0x30
   869c2:	f800 2901 	strb.w	r2, [r0], #-1
   869c6:	4629      	mov	r1, r5
   869c8:	220a      	movs	r2, #10
   869ca:	2300      	movs	r3, #0
   869cc:	f8dd a008 	ldr.w	sl, [sp, #8]
   869d0:	9002      	str	r0, [sp, #8]
   869d2:	4620      	mov	r0, r4
   869d4:	f000 fb1c 	bl	87010 <__aeabi_uldivmod>
   869d8:	4604      	mov	r4, r0
   869da:	460d      	mov	r5, r1
   869dc:	ea54 0105 	orrs.w	r1, r4, r5
   869e0:	f8dd c000 	ldr.w	ip, [sp]
   869e4:	d1e3      	bne.n	869ae <_svfiprintf_r+0x45c>
   869e6:	e01b      	b.n	86a20 <_svfiprintf_r+0x4ce>
   869e8:	9905      	ldr	r1, [sp, #20]
   869ea:	f004 000f 	and.w	r0, r4, #15
   869ee:	0924      	lsrs	r4, r4, #4
   869f0:	5c0a      	ldrb	r2, [r1, r0]
   869f2:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   869f6:	0929      	lsrs	r1, r5, #4
   869f8:	4604      	mov	r4, r0
   869fa:	460d      	mov	r5, r1
   869fc:	469a      	mov	sl, r3
   869fe:	f803 2901 	strb.w	r2, [r3], #-1
   86a02:	ea54 0205 	orrs.w	r2, r4, r5
   86a06:	d1ef      	bne.n	869e8 <_svfiprintf_r+0x496>
   86a08:	e00a      	b.n	86a20 <_svfiprintf_r+0x4ce>
   86a0a:	b938      	cbnz	r0, 86a1c <_svfiprintf_r+0x4ca>
   86a0c:	07f9      	lsls	r1, r7, #31
   86a0e:	d505      	bpl.n	86a1c <_svfiprintf_r+0x4ca>
   86a10:	2030      	movs	r0, #48	; 0x30
   86a12:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   86a16:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   86a1a:	e001      	b.n	86a20 <_svfiprintf_r+0x4ce>
   86a1c:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   86a20:	ad18      	add	r5, sp, #96	; 0x60
   86a22:	ebca 0405 	rsb	r4, sl, r5
   86a26:	4665      	mov	r5, ip
   86a28:	e00f      	b.n	86a4a <_svfiprintf_r+0x4f8>
   86a2a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   86a2e:	2b00      	cmp	r3, #0
   86a30:	f000 8176 	beq.w	86d20 <_svfiprintf_r+0x7ce>
   86a34:	2500      	movs	r5, #0
   86a36:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   86a3a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   86a3e:	2401      	movs	r4, #1
   86a40:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   86a44:	e001      	b.n	86a4a <_svfiprintf_r+0x4f8>
   86a46:	4664      	mov	r4, ip
   86a48:	4605      	mov	r5, r0
   86a4a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   86a4e:	42ac      	cmp	r4, r5
   86a50:	bfac      	ite	ge
   86a52:	4621      	movge	r1, r4
   86a54:	4629      	movlt	r1, r5
   86a56:	9102      	str	r1, [sp, #8]
   86a58:	b113      	cbz	r3, 86a60 <_svfiprintf_r+0x50e>
   86a5a:	9802      	ldr	r0, [sp, #8]
   86a5c:	1c42      	adds	r2, r0, #1
   86a5e:	9202      	str	r2, [sp, #8]
   86a60:	f017 0102 	ands.w	r1, r7, #2
   86a64:	9106      	str	r1, [sp, #24]
   86a66:	d002      	beq.n	86a6e <_svfiprintf_r+0x51c>
   86a68:	9b02      	ldr	r3, [sp, #8]
   86a6a:	1c98      	adds	r0, r3, #2
   86a6c:	9002      	str	r0, [sp, #8]
   86a6e:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   86a72:	9207      	str	r2, [sp, #28]
   86a74:	d13c      	bne.n	86af0 <_svfiprintf_r+0x59e>
   86a76:	9903      	ldr	r1, [sp, #12]
   86a78:	9b02      	ldr	r3, [sp, #8]
   86a7a:	1acb      	subs	r3, r1, r3
   86a7c:	2b00      	cmp	r3, #0
   86a7e:	dd37      	ble.n	86af0 <_svfiprintf_r+0x59e>
   86a80:	48a5      	ldr	r0, [pc, #660]	; (86d18 <_svfiprintf_r+0x7c6>)
   86a82:	2b10      	cmp	r3, #16
   86a84:	f8c8 0000 	str.w	r0, [r8]
   86a88:	dd1b      	ble.n	86ac2 <_svfiprintf_r+0x570>
   86a8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86a8c:	2110      	movs	r1, #16
   86a8e:	980d      	ldr	r0, [sp, #52]	; 0x34
   86a90:	f8c8 1004 	str.w	r1, [r8, #4]
   86a94:	1c51      	adds	r1, r2, #1
   86a96:	3010      	adds	r0, #16
   86a98:	2907      	cmp	r1, #7
   86a9a:	900d      	str	r0, [sp, #52]	; 0x34
   86a9c:	910c      	str	r1, [sp, #48]	; 0x30
   86a9e:	dc02      	bgt.n	86aa6 <_svfiprintf_r+0x554>
   86aa0:	f108 0808 	add.w	r8, r8, #8
   86aa4:	e00b      	b.n	86abe <_svfiprintf_r+0x56c>
   86aa6:	4658      	mov	r0, fp
   86aa8:	4649      	mov	r1, r9
   86aaa:	aa0b      	add	r2, sp, #44	; 0x2c
   86aac:	9300      	str	r3, [sp, #0]
   86aae:	f7ff fcd3 	bl	86458 <__ssprint_r>
   86ab2:	9b00      	ldr	r3, [sp, #0]
   86ab4:	2800      	cmp	r0, #0
   86ab6:	f040 813a 	bne.w	86d2e <_svfiprintf_r+0x7dc>
   86aba:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86abe:	3b10      	subs	r3, #16
   86ac0:	e7de      	b.n	86a80 <_svfiprintf_r+0x52e>
   86ac2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86ac4:	f8c8 3004 	str.w	r3, [r8, #4]
   86ac8:	18d1      	adds	r1, r2, r3
   86aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86acc:	910d      	str	r1, [sp, #52]	; 0x34
   86ace:	1c58      	adds	r0, r3, #1
   86ad0:	2807      	cmp	r0, #7
   86ad2:	900c      	str	r0, [sp, #48]	; 0x30
   86ad4:	dc02      	bgt.n	86adc <_svfiprintf_r+0x58a>
   86ad6:	f108 0808 	add.w	r8, r8, #8
   86ada:	e009      	b.n	86af0 <_svfiprintf_r+0x59e>
   86adc:	4658      	mov	r0, fp
   86ade:	4649      	mov	r1, r9
   86ae0:	aa0b      	add	r2, sp, #44	; 0x2c
   86ae2:	f7ff fcb9 	bl	86458 <__ssprint_r>
   86ae6:	2800      	cmp	r0, #0
   86ae8:	f040 8121 	bne.w	86d2e <_svfiprintf_r+0x7dc>
   86aec:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86af0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   86af4:	b1da      	cbz	r2, 86b2e <_svfiprintf_r+0x5dc>
   86af6:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   86afa:	f8c8 1000 	str.w	r1, [r8]
   86afe:	990c      	ldr	r1, [sp, #48]	; 0x30
   86b00:	2301      	movs	r3, #1
   86b02:	980d      	ldr	r0, [sp, #52]	; 0x34
   86b04:	f8c8 3004 	str.w	r3, [r8, #4]
   86b08:	1c4b      	adds	r3, r1, #1
   86b0a:	1c42      	adds	r2, r0, #1
   86b0c:	2b07      	cmp	r3, #7
   86b0e:	920d      	str	r2, [sp, #52]	; 0x34
   86b10:	930c      	str	r3, [sp, #48]	; 0x30
   86b12:	dc02      	bgt.n	86b1a <_svfiprintf_r+0x5c8>
   86b14:	f108 0808 	add.w	r8, r8, #8
   86b18:	e009      	b.n	86b2e <_svfiprintf_r+0x5dc>
   86b1a:	4658      	mov	r0, fp
   86b1c:	4649      	mov	r1, r9
   86b1e:	aa0b      	add	r2, sp, #44	; 0x2c
   86b20:	f7ff fc9a 	bl	86458 <__ssprint_r>
   86b24:	2800      	cmp	r0, #0
   86b26:	f040 8102 	bne.w	86d2e <_svfiprintf_r+0x7dc>
   86b2a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86b2e:	9806      	ldr	r0, [sp, #24]
   86b30:	b1d0      	cbz	r0, 86b68 <_svfiprintf_r+0x616>
   86b32:	aa0a      	add	r2, sp, #40	; 0x28
   86b34:	f8c8 2000 	str.w	r2, [r8]
   86b38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86b3a:	2102      	movs	r1, #2
   86b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86b3e:	f8c8 1004 	str.w	r1, [r8, #4]
   86b42:	1c51      	adds	r1, r2, #1
   86b44:	1c98      	adds	r0, r3, #2
   86b46:	2907      	cmp	r1, #7
   86b48:	900d      	str	r0, [sp, #52]	; 0x34
   86b4a:	910c      	str	r1, [sp, #48]	; 0x30
   86b4c:	dc02      	bgt.n	86b54 <_svfiprintf_r+0x602>
   86b4e:	f108 0808 	add.w	r8, r8, #8
   86b52:	e009      	b.n	86b68 <_svfiprintf_r+0x616>
   86b54:	4658      	mov	r0, fp
   86b56:	4649      	mov	r1, r9
   86b58:	aa0b      	add	r2, sp, #44	; 0x2c
   86b5a:	f7ff fc7d 	bl	86458 <__ssprint_r>
   86b5e:	2800      	cmp	r0, #0
   86b60:	f040 80e5 	bne.w	86d2e <_svfiprintf_r+0x7dc>
   86b64:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86b68:	9b07      	ldr	r3, [sp, #28]
   86b6a:	2b80      	cmp	r3, #128	; 0x80
   86b6c:	d13c      	bne.n	86be8 <_svfiprintf_r+0x696>
   86b6e:	9803      	ldr	r0, [sp, #12]
   86b70:	9a02      	ldr	r2, [sp, #8]
   86b72:	1a83      	subs	r3, r0, r2
   86b74:	2b00      	cmp	r3, #0
   86b76:	dd37      	ble.n	86be8 <_svfiprintf_r+0x696>
   86b78:	4968      	ldr	r1, [pc, #416]	; (86d1c <_svfiprintf_r+0x7ca>)
   86b7a:	2b10      	cmp	r3, #16
   86b7c:	f8c8 1000 	str.w	r1, [r8]
   86b80:	dd1b      	ble.n	86bba <_svfiprintf_r+0x668>
   86b82:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b84:	2210      	movs	r2, #16
   86b86:	990d      	ldr	r1, [sp, #52]	; 0x34
   86b88:	f8c8 2004 	str.w	r2, [r8, #4]
   86b8c:	1c42      	adds	r2, r0, #1
   86b8e:	3110      	adds	r1, #16
   86b90:	2a07      	cmp	r2, #7
   86b92:	910d      	str	r1, [sp, #52]	; 0x34
   86b94:	920c      	str	r2, [sp, #48]	; 0x30
   86b96:	dc02      	bgt.n	86b9e <_svfiprintf_r+0x64c>
   86b98:	f108 0808 	add.w	r8, r8, #8
   86b9c:	e00b      	b.n	86bb6 <_svfiprintf_r+0x664>
   86b9e:	4658      	mov	r0, fp
   86ba0:	4649      	mov	r1, r9
   86ba2:	aa0b      	add	r2, sp, #44	; 0x2c
   86ba4:	9300      	str	r3, [sp, #0]
   86ba6:	f7ff fc57 	bl	86458 <__ssprint_r>
   86baa:	9b00      	ldr	r3, [sp, #0]
   86bac:	2800      	cmp	r0, #0
   86bae:	f040 80be 	bne.w	86d2e <_svfiprintf_r+0x7dc>
   86bb2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86bb6:	3b10      	subs	r3, #16
   86bb8:	e7de      	b.n	86b78 <_svfiprintf_r+0x626>
   86bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86bbc:	980d      	ldr	r0, [sp, #52]	; 0x34
   86bbe:	1c51      	adds	r1, r2, #1
   86bc0:	f8c8 3004 	str.w	r3, [r8, #4]
   86bc4:	2907      	cmp	r1, #7
   86bc6:	4403      	add	r3, r0
   86bc8:	930d      	str	r3, [sp, #52]	; 0x34
   86bca:	910c      	str	r1, [sp, #48]	; 0x30
   86bcc:	dc02      	bgt.n	86bd4 <_svfiprintf_r+0x682>
   86bce:	f108 0808 	add.w	r8, r8, #8
   86bd2:	e009      	b.n	86be8 <_svfiprintf_r+0x696>
   86bd4:	4658      	mov	r0, fp
   86bd6:	4649      	mov	r1, r9
   86bd8:	aa0b      	add	r2, sp, #44	; 0x2c
   86bda:	f7ff fc3d 	bl	86458 <__ssprint_r>
   86bde:	2800      	cmp	r0, #0
   86be0:	f040 80a5 	bne.w	86d2e <_svfiprintf_r+0x7dc>
   86be4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86be8:	1b2d      	subs	r5, r5, r4
   86bea:	2d00      	cmp	r5, #0
   86bec:	dd34      	ble.n	86c58 <_svfiprintf_r+0x706>
   86bee:	484b      	ldr	r0, [pc, #300]	; (86d1c <_svfiprintf_r+0x7ca>)
   86bf0:	2d10      	cmp	r5, #16
   86bf2:	f8c8 0000 	str.w	r0, [r8]
   86bf6:	dd19      	ble.n	86c2c <_svfiprintf_r+0x6da>
   86bf8:	980c      	ldr	r0, [sp, #48]	; 0x30
   86bfa:	990d      	ldr	r1, [sp, #52]	; 0x34
   86bfc:	1c43      	adds	r3, r0, #1
   86bfe:	2210      	movs	r2, #16
   86c00:	3110      	adds	r1, #16
   86c02:	2b07      	cmp	r3, #7
   86c04:	f8c8 2004 	str.w	r2, [r8, #4]
   86c08:	910d      	str	r1, [sp, #52]	; 0x34
   86c0a:	930c      	str	r3, [sp, #48]	; 0x30
   86c0c:	dc02      	bgt.n	86c14 <_svfiprintf_r+0x6c2>
   86c0e:	f108 0808 	add.w	r8, r8, #8
   86c12:	e009      	b.n	86c28 <_svfiprintf_r+0x6d6>
   86c14:	4658      	mov	r0, fp
   86c16:	4649      	mov	r1, r9
   86c18:	aa0b      	add	r2, sp, #44	; 0x2c
   86c1a:	f7ff fc1d 	bl	86458 <__ssprint_r>
   86c1e:	2800      	cmp	r0, #0
   86c20:	f040 8085 	bne.w	86d2e <_svfiprintf_r+0x7dc>
   86c24:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86c28:	3d10      	subs	r5, #16
   86c2a:	e7e0      	b.n	86bee <_svfiprintf_r+0x69c>
   86c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86c30:	1c51      	adds	r1, r2, #1
   86c32:	f8c8 5004 	str.w	r5, [r8, #4]
   86c36:	2907      	cmp	r1, #7
   86c38:	441d      	add	r5, r3
   86c3a:	950d      	str	r5, [sp, #52]	; 0x34
   86c3c:	910c      	str	r1, [sp, #48]	; 0x30
   86c3e:	dc02      	bgt.n	86c46 <_svfiprintf_r+0x6f4>
   86c40:	f108 0808 	add.w	r8, r8, #8
   86c44:	e008      	b.n	86c58 <_svfiprintf_r+0x706>
   86c46:	4658      	mov	r0, fp
   86c48:	4649      	mov	r1, r9
   86c4a:	aa0b      	add	r2, sp, #44	; 0x2c
   86c4c:	f7ff fc04 	bl	86458 <__ssprint_r>
   86c50:	2800      	cmp	r0, #0
   86c52:	d16c      	bne.n	86d2e <_svfiprintf_r+0x7dc>
   86c54:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86c5a:	980d      	ldr	r0, [sp, #52]	; 0x34
   86c5c:	1c5a      	adds	r2, r3, #1
   86c5e:	f8c8 4004 	str.w	r4, [r8, #4]
   86c62:	2a07      	cmp	r2, #7
   86c64:	4404      	add	r4, r0
   86c66:	f8c8 a000 	str.w	sl, [r8]
   86c6a:	940d      	str	r4, [sp, #52]	; 0x34
   86c6c:	920c      	str	r2, [sp, #48]	; 0x30
   86c6e:	dc02      	bgt.n	86c76 <_svfiprintf_r+0x724>
   86c70:	f108 0308 	add.w	r3, r8, #8
   86c74:	e007      	b.n	86c86 <_svfiprintf_r+0x734>
   86c76:	4658      	mov	r0, fp
   86c78:	4649      	mov	r1, r9
   86c7a:	aa0b      	add	r2, sp, #44	; 0x2c
   86c7c:	f7ff fbec 	bl	86458 <__ssprint_r>
   86c80:	2800      	cmp	r0, #0
   86c82:	d154      	bne.n	86d2e <_svfiprintf_r+0x7dc>
   86c84:	ab18      	add	r3, sp, #96	; 0x60
   86c86:	077a      	lsls	r2, r7, #29
   86c88:	d40b      	bmi.n	86ca2 <_svfiprintf_r+0x750>
   86c8a:	9804      	ldr	r0, [sp, #16]
   86c8c:	9b02      	ldr	r3, [sp, #8]
   86c8e:	9a03      	ldr	r2, [sp, #12]
   86c90:	990d      	ldr	r1, [sp, #52]	; 0x34
   86c92:	4293      	cmp	r3, r2
   86c94:	bfac      	ite	ge
   86c96:	18c0      	addge	r0, r0, r3
   86c98:	1880      	addlt	r0, r0, r2
   86c9a:	9004      	str	r0, [sp, #16]
   86c9c:	2900      	cmp	r1, #0
   86c9e:	d036      	beq.n	86d0e <_svfiprintf_r+0x7bc>
   86ca0:	e02f      	b.n	86d02 <_svfiprintf_r+0x7b0>
   86ca2:	9c03      	ldr	r4, [sp, #12]
   86ca4:	9902      	ldr	r1, [sp, #8]
   86ca6:	1a64      	subs	r4, r4, r1
   86ca8:	2c00      	cmp	r4, #0
   86caa:	ddee      	ble.n	86c8a <_svfiprintf_r+0x738>
   86cac:	481a      	ldr	r0, [pc, #104]	; (86d18 <_svfiprintf_r+0x7c6>)
   86cae:	2c10      	cmp	r4, #16
   86cb0:	6018      	str	r0, [r3, #0]
   86cb2:	dd15      	ble.n	86ce0 <_svfiprintf_r+0x78e>
   86cb4:	990c      	ldr	r1, [sp, #48]	; 0x30
   86cb6:	2010      	movs	r0, #16
   86cb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86cba:	6058      	str	r0, [r3, #4]
   86cbc:	1c48      	adds	r0, r1, #1
   86cbe:	3210      	adds	r2, #16
   86cc0:	2807      	cmp	r0, #7
   86cc2:	920d      	str	r2, [sp, #52]	; 0x34
   86cc4:	900c      	str	r0, [sp, #48]	; 0x30
   86cc6:	dc01      	bgt.n	86ccc <_svfiprintf_r+0x77a>
   86cc8:	3308      	adds	r3, #8
   86cca:	e007      	b.n	86cdc <_svfiprintf_r+0x78a>
   86ccc:	4658      	mov	r0, fp
   86cce:	4649      	mov	r1, r9
   86cd0:	aa0b      	add	r2, sp, #44	; 0x2c
   86cd2:	f7ff fbc1 	bl	86458 <__ssprint_r>
   86cd6:	2800      	cmp	r0, #0
   86cd8:	d129      	bne.n	86d2e <_svfiprintf_r+0x7dc>
   86cda:	ab18      	add	r3, sp, #96	; 0x60
   86cdc:	3c10      	subs	r4, #16
   86cde:	e7e5      	b.n	86cac <_svfiprintf_r+0x75a>
   86ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86ce2:	605c      	str	r4, [r3, #4]
   86ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86ce6:	1c51      	adds	r1, r2, #1
   86ce8:	191c      	adds	r4, r3, r4
   86cea:	2907      	cmp	r1, #7
   86cec:	940d      	str	r4, [sp, #52]	; 0x34
   86cee:	910c      	str	r1, [sp, #48]	; 0x30
   86cf0:	ddcb      	ble.n	86c8a <_svfiprintf_r+0x738>
   86cf2:	4658      	mov	r0, fp
   86cf4:	4649      	mov	r1, r9
   86cf6:	aa0b      	add	r2, sp, #44	; 0x2c
   86cf8:	f7ff fbae 	bl	86458 <__ssprint_r>
   86cfc:	2800      	cmp	r0, #0
   86cfe:	d0c4      	beq.n	86c8a <_svfiprintf_r+0x738>
   86d00:	e015      	b.n	86d2e <_svfiprintf_r+0x7dc>
   86d02:	4658      	mov	r0, fp
   86d04:	4649      	mov	r1, r9
   86d06:	aa0b      	add	r2, sp, #44	; 0x2c
   86d08:	f7ff fba6 	bl	86458 <__ssprint_r>
   86d0c:	b978      	cbnz	r0, 86d2e <_svfiprintf_r+0x7dc>
   86d0e:	2500      	movs	r5, #0
   86d10:	950c      	str	r5, [sp, #48]	; 0x30
   86d12:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   86d16:	e445      	b.n	865a4 <_svfiprintf_r+0x52>
   86d18:	000876f0 	.word	0x000876f0
   86d1c:	00087700 	.word	0x00087700
   86d20:	980d      	ldr	r0, [sp, #52]	; 0x34
   86d22:	b120      	cbz	r0, 86d2e <_svfiprintf_r+0x7dc>
   86d24:	4658      	mov	r0, fp
   86d26:	4649      	mov	r1, r9
   86d28:	aa0b      	add	r2, sp, #44	; 0x2c
   86d2a:	f7ff fb95 	bl	86458 <__ssprint_r>
   86d2e:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   86d32:	9b04      	ldr	r3, [sp, #16]
   86d34:	f002 0140 	and.w	r1, r2, #64	; 0x40
   86d38:	b208      	sxth	r0, r1
   86d3a:	2800      	cmp	r0, #0
   86d3c:	bf18      	it	ne
   86d3e:	f04f 33ff 	movne.w	r3, #4294967295
   86d42:	4618      	mov	r0, r3
   86d44:	b029      	add	sp, #164	; 0xa4
   86d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d4a:	bf00      	nop

00086d4c <__swbuf_r>:
   86d4c:	b570      	push	{r4, r5, r6, lr}
   86d4e:	460d      	mov	r5, r1
   86d50:	4614      	mov	r4, r2
   86d52:	4606      	mov	r6, r0
   86d54:	b118      	cbz	r0, 86d5e <__swbuf_r+0x12>
   86d56:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86d58:	b90b      	cbnz	r3, 86d5e <__swbuf_r+0x12>
   86d5a:	f7fe fb2f 	bl	853bc <__sinit>
   86d5e:	89a1      	ldrh	r1, [r4, #12]
   86d60:	69a0      	ldr	r0, [r4, #24]
   86d62:	f001 0208 	and.w	r2, r1, #8
   86d66:	b213      	sxth	r3, r2
   86d68:	60a0      	str	r0, [r4, #8]
   86d6a:	b10b      	cbz	r3, 86d70 <__swbuf_r+0x24>
   86d6c:	6920      	ldr	r0, [r4, #16]
   86d6e:	b958      	cbnz	r0, 86d88 <__swbuf_r+0x3c>
   86d70:	4630      	mov	r0, r6
   86d72:	4621      	mov	r1, r4
   86d74:	f7fe f97c 	bl	85070 <__swsetup_r>
   86d78:	b130      	cbz	r0, 86d88 <__swbuf_r+0x3c>
   86d7a:	89a5      	ldrh	r5, [r4, #12]
   86d7c:	2009      	movs	r0, #9
   86d7e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   86d82:	81a1      	strh	r1, [r4, #12]
   86d84:	6030      	str	r0, [r6, #0]
   86d86:	e017      	b.n	86db8 <__swbuf_r+0x6c>
   86d88:	89a1      	ldrh	r1, [r4, #12]
   86d8a:	b2ed      	uxtb	r5, r5
   86d8c:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   86d90:	b213      	sxth	r3, r2
   86d92:	b933      	cbnz	r3, 86da2 <__swbuf_r+0x56>
   86d94:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   86d98:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86d9a:	81a0      	strh	r0, [r4, #12]
   86d9c:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   86da0:	6662      	str	r2, [r4, #100]	; 0x64
   86da2:	6820      	ldr	r0, [r4, #0]
   86da4:	6923      	ldr	r3, [r4, #16]
   86da6:	6961      	ldr	r1, [r4, #20]
   86da8:	1ac0      	subs	r0, r0, r3
   86daa:	4288      	cmp	r0, r1
   86dac:	db07      	blt.n	86dbe <__swbuf_r+0x72>
   86dae:	4630      	mov	r0, r6
   86db0:	4621      	mov	r1, r4
   86db2:	f7fe fa11 	bl	851d8 <_fflush_r>
   86db6:	b110      	cbz	r0, 86dbe <__swbuf_r+0x72>
   86db8:	f04f 35ff 	mov.w	r5, #4294967295
   86dbc:	e015      	b.n	86dea <__swbuf_r+0x9e>
   86dbe:	68a2      	ldr	r2, [r4, #8]
   86dc0:	6821      	ldr	r1, [r4, #0]
   86dc2:	1e53      	subs	r3, r2, #1
   86dc4:	60a3      	str	r3, [r4, #8]
   86dc6:	f801 5b01 	strb.w	r5, [r1], #1
   86dca:	6962      	ldr	r2, [r4, #20]
   86dcc:	3001      	adds	r0, #1
   86dce:	4290      	cmp	r0, r2
   86dd0:	6021      	str	r1, [r4, #0]
   86dd2:	d004      	beq.n	86dde <__swbuf_r+0x92>
   86dd4:	89a3      	ldrh	r3, [r4, #12]
   86dd6:	07db      	lsls	r3, r3, #31
   86dd8:	d507      	bpl.n	86dea <__swbuf_r+0x9e>
   86dda:	2d0a      	cmp	r5, #10
   86ddc:	d105      	bne.n	86dea <__swbuf_r+0x9e>
   86dde:	4630      	mov	r0, r6
   86de0:	4621      	mov	r1, r4
   86de2:	f7fe f9f9 	bl	851d8 <_fflush_r>
   86de6:	2800      	cmp	r0, #0
   86de8:	d1e6      	bne.n	86db8 <__swbuf_r+0x6c>
   86dea:	4628      	mov	r0, r5
   86dec:	bd70      	pop	{r4, r5, r6, pc}

00086dee <__swbuf>:
   86dee:	460a      	mov	r2, r1
   86df0:	4902      	ldr	r1, [pc, #8]	; (86dfc <__swbuf+0xe>)
   86df2:	4603      	mov	r3, r0
   86df4:	6808      	ldr	r0, [r1, #0]
   86df6:	4619      	mov	r1, r3
   86df8:	f7ff bfa8 	b.w	86d4c <__swbuf_r>
   86dfc:	20070040 	.word	0x20070040

00086e00 <_wcrtomb_r>:
   86e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86e04:	461d      	mov	r5, r3
   86e06:	4b10      	ldr	r3, [pc, #64]	; (86e48 <_wcrtomb_r+0x48>)
   86e08:	b086      	sub	sp, #24
   86e0a:	4604      	mov	r4, r0
   86e0c:	4690      	mov	r8, r2
   86e0e:	460e      	mov	r6, r1
   86e10:	681f      	ldr	r7, [r3, #0]
   86e12:	b939      	cbnz	r1, 86e24 <_wcrtomb_r+0x24>
   86e14:	f7fe fe86 	bl	85b24 <__locale_charset>
   86e18:	9500      	str	r5, [sp, #0]
   86e1a:	4603      	mov	r3, r0
   86e1c:	a903      	add	r1, sp, #12
   86e1e:	4620      	mov	r0, r4
   86e20:	4632      	mov	r2, r6
   86e22:	e006      	b.n	86e32 <_wcrtomb_r+0x32>
   86e24:	f7fe fe7e 	bl	85b24 <__locale_charset>
   86e28:	9500      	str	r5, [sp, #0]
   86e2a:	4603      	mov	r3, r0
   86e2c:	4631      	mov	r1, r6
   86e2e:	4620      	mov	r0, r4
   86e30:	4642      	mov	r2, r8
   86e32:	47b8      	blx	r7
   86e34:	1c43      	adds	r3, r0, #1
   86e36:	d103      	bne.n	86e40 <_wcrtomb_r+0x40>
   86e38:	2100      	movs	r1, #0
   86e3a:	228a      	movs	r2, #138	; 0x8a
   86e3c:	6029      	str	r1, [r5, #0]
   86e3e:	6022      	str	r2, [r4, #0]
   86e40:	b006      	add	sp, #24
   86e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86e46:	bf00      	nop
   86e48:	200708fc 	.word	0x200708fc

00086e4c <wcrtomb>:
   86e4c:	b530      	push	{r4, r5, lr}
   86e4e:	4613      	mov	r3, r2
   86e50:	4a04      	ldr	r2, [pc, #16]	; (86e64 <wcrtomb+0x18>)
   86e52:	4605      	mov	r5, r0
   86e54:	460c      	mov	r4, r1
   86e56:	6810      	ldr	r0, [r2, #0]
   86e58:	4629      	mov	r1, r5
   86e5a:	4622      	mov	r2, r4
   86e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86e60:	f7ff bfce 	b.w	86e00 <_wcrtomb_r>
   86e64:	20070040 	.word	0x20070040

00086e68 <__ascii_wctomb>:
   86e68:	b149      	cbz	r1, 86e7e <__ascii_wctomb+0x16>
   86e6a:	2aff      	cmp	r2, #255	; 0xff
   86e6c:	d904      	bls.n	86e78 <__ascii_wctomb+0x10>
   86e6e:	238a      	movs	r3, #138	; 0x8a
   86e70:	6003      	str	r3, [r0, #0]
   86e72:	f04f 30ff 	mov.w	r0, #4294967295
   86e76:	4770      	bx	lr
   86e78:	700a      	strb	r2, [r1, #0]
   86e7a:	2001      	movs	r0, #1
   86e7c:	4770      	bx	lr
   86e7e:	4608      	mov	r0, r1
   86e80:	4770      	bx	lr

00086e82 <_wctomb_r>:
   86e82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   86e86:	4698      	mov	r8, r3
   86e88:	4b07      	ldr	r3, [pc, #28]	; (86ea8 <_wctomb_r+0x26>)
   86e8a:	4605      	mov	r5, r0
   86e8c:	460f      	mov	r7, r1
   86e8e:	4616      	mov	r6, r2
   86e90:	681c      	ldr	r4, [r3, #0]
   86e92:	f7fe fe47 	bl	85b24 <__locale_charset>
   86e96:	f8cd 8000 	str.w	r8, [sp]
   86e9a:	4603      	mov	r3, r0
   86e9c:	4639      	mov	r1, r7
   86e9e:	4628      	mov	r0, r5
   86ea0:	4632      	mov	r2, r6
   86ea2:	47a0      	blx	r4
   86ea4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   86ea8:	200708fc 	.word	0x200708fc

00086eac <_write_r>:
   86eac:	b538      	push	{r3, r4, r5, lr}
   86eae:	4c07      	ldr	r4, [pc, #28]	; (86ecc <_write_r+0x20>)
   86eb0:	4605      	mov	r5, r0
   86eb2:	2000      	movs	r0, #0
   86eb4:	6020      	str	r0, [r4, #0]
   86eb6:	4608      	mov	r0, r1
   86eb8:	4611      	mov	r1, r2
   86eba:	461a      	mov	r2, r3
   86ebc:	f7f9 fc4a 	bl	80754 <_write>
   86ec0:	1c43      	adds	r3, r0, #1
   86ec2:	d102      	bne.n	86eca <_write_r+0x1e>
   86ec4:	6823      	ldr	r3, [r4, #0]
   86ec6:	b103      	cbz	r3, 86eca <_write_r+0x1e>
   86ec8:	602b      	str	r3, [r5, #0]
   86eca:	bd38      	pop	{r3, r4, r5, pc}
   86ecc:	2007ab50 	.word	0x2007ab50

00086ed0 <_close_r>:
   86ed0:	b538      	push	{r3, r4, r5, lr}
   86ed2:	4c06      	ldr	r4, [pc, #24]	; (86eec <_close_r+0x1c>)
   86ed4:	2300      	movs	r3, #0
   86ed6:	4605      	mov	r5, r0
   86ed8:	4608      	mov	r0, r1
   86eda:	6023      	str	r3, [r4, #0]
   86edc:	f7fa fb94 	bl	81608 <_close>
   86ee0:	1c43      	adds	r3, r0, #1
   86ee2:	d102      	bne.n	86eea <_close_r+0x1a>
   86ee4:	6821      	ldr	r1, [r4, #0]
   86ee6:	b101      	cbz	r1, 86eea <_close_r+0x1a>
   86ee8:	6029      	str	r1, [r5, #0]
   86eea:	bd38      	pop	{r3, r4, r5, pc}
   86eec:	2007ab50 	.word	0x2007ab50

00086ef0 <_fclose_r>:
   86ef0:	b570      	push	{r4, r5, r6, lr}
   86ef2:	4605      	mov	r5, r0
   86ef4:	460c      	mov	r4, r1
   86ef6:	2900      	cmp	r1, #0
   86ef8:	d039      	beq.n	86f6e <_fclose_r+0x7e>
   86efa:	f7fe fac3 	bl	85484 <__sfp_lock_acquire>
   86efe:	b125      	cbz	r5, 86f0a <_fclose_r+0x1a>
   86f00:	6bab      	ldr	r3, [r5, #56]	; 0x38
   86f02:	b913      	cbnz	r3, 86f0a <_fclose_r+0x1a>
   86f04:	4628      	mov	r0, r5
   86f06:	f7fe fa59 	bl	853bc <__sinit>
   86f0a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   86f0e:	b35e      	cbz	r6, 86f68 <_fclose_r+0x78>
   86f10:	4628      	mov	r0, r5
   86f12:	4621      	mov	r1, r4
   86f14:	f7fe f960 	bl	851d8 <_fflush_r>
   86f18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   86f1a:	4606      	mov	r6, r0
   86f1c:	b13a      	cbz	r2, 86f2e <_fclose_r+0x3e>
   86f1e:	4628      	mov	r0, r5
   86f20:	69e1      	ldr	r1, [r4, #28]
   86f22:	4790      	blx	r2
   86f24:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   86f28:	bf28      	it	cs
   86f2a:	f04f 36ff 	movcs.w	r6, #4294967295
   86f2e:	89a0      	ldrh	r0, [r4, #12]
   86f30:	f000 0180 	and.w	r1, r0, #128	; 0x80
   86f34:	b20b      	sxth	r3, r1
   86f36:	b11b      	cbz	r3, 86f40 <_fclose_r+0x50>
   86f38:	4628      	mov	r0, r5
   86f3a:	6921      	ldr	r1, [r4, #16]
   86f3c:	f7fe fb7c 	bl	85638 <_free_r>
   86f40:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86f42:	b141      	cbz	r1, 86f56 <_fclose_r+0x66>
   86f44:	f104 0240 	add.w	r2, r4, #64	; 0x40
   86f48:	4291      	cmp	r1, r2
   86f4a:	d002      	beq.n	86f52 <_fclose_r+0x62>
   86f4c:	4628      	mov	r0, r5
   86f4e:	f7fe fb73 	bl	85638 <_free_r>
   86f52:	2000      	movs	r0, #0
   86f54:	6320      	str	r0, [r4, #48]	; 0x30
   86f56:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86f58:	b121      	cbz	r1, 86f64 <_fclose_r+0x74>
   86f5a:	4628      	mov	r0, r5
   86f5c:	f7fe fb6c 	bl	85638 <_free_r>
   86f60:	2100      	movs	r1, #0
   86f62:	6461      	str	r1, [r4, #68]	; 0x44
   86f64:	2300      	movs	r3, #0
   86f66:	81a3      	strh	r3, [r4, #12]
   86f68:	f7fe fa8d 	bl	85486 <__sfp_lock_release>
   86f6c:	e000      	b.n	86f70 <_fclose_r+0x80>
   86f6e:	460e      	mov	r6, r1
   86f70:	4630      	mov	r0, r6
   86f72:	bd70      	pop	{r4, r5, r6, pc}

00086f74 <fclose>:
   86f74:	4b02      	ldr	r3, [pc, #8]	; (86f80 <fclose+0xc>)
   86f76:	4601      	mov	r1, r0
   86f78:	6818      	ldr	r0, [r3, #0]
   86f7a:	f7ff bfb9 	b.w	86ef0 <_fclose_r>
   86f7e:	bf00      	nop
   86f80:	20070040 	.word	0x20070040

00086f84 <_fstat_r>:
   86f84:	b538      	push	{r3, r4, r5, lr}
   86f86:	4c07      	ldr	r4, [pc, #28]	; (86fa4 <_fstat_r+0x20>)
   86f88:	2300      	movs	r3, #0
   86f8a:	4605      	mov	r5, r0
   86f8c:	4608      	mov	r0, r1
   86f8e:	4611      	mov	r1, r2
   86f90:	6023      	str	r3, [r4, #0]
   86f92:	f7fa fb3d 	bl	81610 <_fstat>
   86f96:	1c43      	adds	r3, r0, #1
   86f98:	d102      	bne.n	86fa0 <_fstat_r+0x1c>
   86f9a:	6821      	ldr	r1, [r4, #0]
   86f9c:	b101      	cbz	r1, 86fa0 <_fstat_r+0x1c>
   86f9e:	6029      	str	r1, [r5, #0]
   86fa0:	bd38      	pop	{r3, r4, r5, pc}
   86fa2:	bf00      	nop
   86fa4:	2007ab50 	.word	0x2007ab50

00086fa8 <_isatty_r>:
   86fa8:	b538      	push	{r3, r4, r5, lr}
   86faa:	4c06      	ldr	r4, [pc, #24]	; (86fc4 <_isatty_r+0x1c>)
   86fac:	2300      	movs	r3, #0
   86fae:	4605      	mov	r5, r0
   86fb0:	4608      	mov	r0, r1
   86fb2:	6023      	str	r3, [r4, #0]
   86fb4:	f7fa fb32 	bl	8161c <_isatty>
   86fb8:	1c43      	adds	r3, r0, #1
   86fba:	d102      	bne.n	86fc2 <_isatty_r+0x1a>
   86fbc:	6821      	ldr	r1, [r4, #0]
   86fbe:	b101      	cbz	r1, 86fc2 <_isatty_r+0x1a>
   86fc0:	6029      	str	r1, [r5, #0]
   86fc2:	bd38      	pop	{r3, r4, r5, pc}
   86fc4:	2007ab50 	.word	0x2007ab50

00086fc8 <_lseek_r>:
   86fc8:	b538      	push	{r3, r4, r5, lr}
   86fca:	4c07      	ldr	r4, [pc, #28]	; (86fe8 <_lseek_r+0x20>)
   86fcc:	4605      	mov	r5, r0
   86fce:	2000      	movs	r0, #0
   86fd0:	6020      	str	r0, [r4, #0]
   86fd2:	4608      	mov	r0, r1
   86fd4:	4611      	mov	r1, r2
   86fd6:	461a      	mov	r2, r3
   86fd8:	f7fa fb24 	bl	81624 <_lseek>
   86fdc:	1c43      	adds	r3, r0, #1
   86fde:	d102      	bne.n	86fe6 <_lseek_r+0x1e>
   86fe0:	6823      	ldr	r3, [r4, #0]
   86fe2:	b103      	cbz	r3, 86fe6 <_lseek_r+0x1e>
   86fe4:	602b      	str	r3, [r5, #0]
   86fe6:	bd38      	pop	{r3, r4, r5, pc}
   86fe8:	2007ab50 	.word	0x2007ab50

00086fec <_read_r>:
   86fec:	b538      	push	{r3, r4, r5, lr}
   86fee:	4c07      	ldr	r4, [pc, #28]	; (8700c <_read_r+0x20>)
   86ff0:	4605      	mov	r5, r0
   86ff2:	2000      	movs	r0, #0
   86ff4:	6020      	str	r0, [r4, #0]
   86ff6:	4608      	mov	r0, r1
   86ff8:	4611      	mov	r1, r2
   86ffa:	461a      	mov	r2, r3
   86ffc:	f7f9 fb66 	bl	806cc <_read>
   87000:	1c43      	adds	r3, r0, #1
   87002:	d102      	bne.n	8700a <_read_r+0x1e>
   87004:	6823      	ldr	r3, [r4, #0]
   87006:	b103      	cbz	r3, 8700a <_read_r+0x1e>
   87008:	602b      	str	r3, [r5, #0]
   8700a:	bd38      	pop	{r3, r4, r5, pc}
   8700c:	2007ab50 	.word	0x2007ab50

00087010 <__aeabi_uldivmod>:
   87010:	b94b      	cbnz	r3, 87026 <__aeabi_uldivmod+0x16>
   87012:	b942      	cbnz	r2, 87026 <__aeabi_uldivmod+0x16>
   87014:	2900      	cmp	r1, #0
   87016:	bf08      	it	eq
   87018:	2800      	cmpeq	r0, #0
   8701a:	d002      	beq.n	87022 <__aeabi_uldivmod+0x12>
   8701c:	f04f 31ff 	mov.w	r1, #4294967295
   87020:	4608      	mov	r0, r1
   87022:	f000 b83b 	b.w	8709c <__aeabi_idiv0>
   87026:	b082      	sub	sp, #8
   87028:	46ec      	mov	ip, sp
   8702a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8702e:	f000 f81d 	bl	8706c <__gnu_uldivmod_helper>
   87032:	f8dd e004 	ldr.w	lr, [sp, #4]
   87036:	b002      	add	sp, #8
   87038:	bc0c      	pop	{r2, r3}
   8703a:	4770      	bx	lr

0008703c <__gnu_ldivmod_helper>:
   8703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87040:	4616      	mov	r6, r2
   87042:	4698      	mov	r8, r3
   87044:	4604      	mov	r4, r0
   87046:	460d      	mov	r5, r1
   87048:	f000 f82a 	bl	870a0 <__divdi3>
   8704c:	fb06 fc01 	mul.w	ip, r6, r1
   87050:	fba6 2300 	umull	r2, r3, r6, r0
   87054:	fb00 c708 	mla	r7, r0, r8, ip
   87058:	18fb      	adds	r3, r7, r3
   8705a:	1aa2      	subs	r2, r4, r2
   8705c:	eb65 0303 	sbc.w	r3, r5, r3
   87060:	9c06      	ldr	r4, [sp, #24]
   87062:	e9c4 2300 	strd	r2, r3, [r4]
   87066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8706a:	bf00      	nop

0008706c <__gnu_uldivmod_helper>:
   8706c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87070:	4690      	mov	r8, r2
   87072:	4606      	mov	r6, r0
   87074:	460f      	mov	r7, r1
   87076:	461d      	mov	r5, r3
   87078:	f000 f970 	bl	8735c <__udivdi3>
   8707c:	fb00 f305 	mul.w	r3, r0, r5
   87080:	fba0 4508 	umull	r4, r5, r0, r8
   87084:	fb08 3801 	mla	r8, r8, r1, r3
   87088:	9b06      	ldr	r3, [sp, #24]
   8708a:	4445      	add	r5, r8
   8708c:	1b34      	subs	r4, r6, r4
   8708e:	eb67 0505 	sbc.w	r5, r7, r5
   87092:	e9c3 4500 	strd	r4, r5, [r3]
   87096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8709a:	bf00      	nop

0008709c <__aeabi_idiv0>:
   8709c:	4770      	bx	lr
   8709e:	bf00      	nop

000870a0 <__divdi3>:
   870a0:	2900      	cmp	r1, #0
   870a2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   870a6:	461d      	mov	r5, r3
   870a8:	f2c0 809d 	blt.w	871e6 <__divdi3+0x146>
   870ac:	2400      	movs	r4, #0
   870ae:	2d00      	cmp	r5, #0
   870b0:	f2c0 8094 	blt.w	871dc <__divdi3+0x13c>
   870b4:	4680      	mov	r8, r0
   870b6:	460f      	mov	r7, r1
   870b8:	4694      	mov	ip, r2
   870ba:	461e      	mov	r6, r3
   870bc:	bbe3      	cbnz	r3, 87138 <__divdi3+0x98>
   870be:	428a      	cmp	r2, r1
   870c0:	d955      	bls.n	8716e <__divdi3+0xce>
   870c2:	fab2 f782 	clz	r7, r2
   870c6:	b147      	cbz	r7, 870da <__divdi3+0x3a>
   870c8:	f1c7 0520 	rsb	r5, r7, #32
   870cc:	fa20 f605 	lsr.w	r6, r0, r5
   870d0:	fa01 f107 	lsl.w	r1, r1, r7
   870d4:	40ba      	lsls	r2, r7
   870d6:	40b8      	lsls	r0, r7
   870d8:	4331      	orrs	r1, r6
   870da:	0c17      	lsrs	r7, r2, #16
   870dc:	fbb1 f6f7 	udiv	r6, r1, r7
   870e0:	fa1f fc82 	uxth.w	ip, r2
   870e4:	fb07 1116 	mls	r1, r7, r6, r1
   870e8:	fb0c f506 	mul.w	r5, ip, r6
   870ec:	0c03      	lsrs	r3, r0, #16
   870ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   870f2:	429d      	cmp	r5, r3
   870f4:	d908      	bls.n	87108 <__divdi3+0x68>
   870f6:	1e71      	subs	r1, r6, #1
   870f8:	189b      	adds	r3, r3, r2
   870fa:	f080 8113 	bcs.w	87324 <__divdi3+0x284>
   870fe:	429d      	cmp	r5, r3
   87100:	f240 8110 	bls.w	87324 <__divdi3+0x284>
   87104:	3e02      	subs	r6, #2
   87106:	189b      	adds	r3, r3, r2
   87108:	1b59      	subs	r1, r3, r5
   8710a:	fbb1 f5f7 	udiv	r5, r1, r7
   8710e:	fb07 1315 	mls	r3, r7, r5, r1
   87112:	fb0c fc05 	mul.w	ip, ip, r5
   87116:	b280      	uxth	r0, r0
   87118:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8711c:	458c      	cmp	ip, r1
   8711e:	d907      	bls.n	87130 <__divdi3+0x90>
   87120:	1e6b      	subs	r3, r5, #1
   87122:	188a      	adds	r2, r1, r2
   87124:	f080 8100 	bcs.w	87328 <__divdi3+0x288>
   87128:	4594      	cmp	ip, r2
   8712a:	f240 80fd 	bls.w	87328 <__divdi3+0x288>
   8712e:	3d02      	subs	r5, #2
   87130:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   87134:	2500      	movs	r5, #0
   87136:	e003      	b.n	87140 <__divdi3+0xa0>
   87138:	428b      	cmp	r3, r1
   8713a:	d90c      	bls.n	87156 <__divdi3+0xb6>
   8713c:	2500      	movs	r5, #0
   8713e:	4629      	mov	r1, r5
   87140:	460a      	mov	r2, r1
   87142:	462b      	mov	r3, r5
   87144:	b114      	cbz	r4, 8714c <__divdi3+0xac>
   87146:	4252      	negs	r2, r2
   87148:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8714c:	4610      	mov	r0, r2
   8714e:	4619      	mov	r1, r3
   87150:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   87154:	4770      	bx	lr
   87156:	fab3 f583 	clz	r5, r3
   8715a:	2d00      	cmp	r5, #0
   8715c:	f040 8087 	bne.w	8726e <__divdi3+0x1ce>
   87160:	428b      	cmp	r3, r1
   87162:	d301      	bcc.n	87168 <__divdi3+0xc8>
   87164:	4282      	cmp	r2, r0
   87166:	d8ea      	bhi.n	8713e <__divdi3+0x9e>
   87168:	2500      	movs	r5, #0
   8716a:	2101      	movs	r1, #1
   8716c:	e7e8      	b.n	87140 <__divdi3+0xa0>
   8716e:	b912      	cbnz	r2, 87176 <__divdi3+0xd6>
   87170:	2601      	movs	r6, #1
   87172:	fbb6 f2f2 	udiv	r2, r6, r2
   87176:	fab2 f682 	clz	r6, r2
   8717a:	2e00      	cmp	r6, #0
   8717c:	d139      	bne.n	871f2 <__divdi3+0x152>
   8717e:	1a8e      	subs	r6, r1, r2
   87180:	0c13      	lsrs	r3, r2, #16
   87182:	fa1f fc82 	uxth.w	ip, r2
   87186:	2501      	movs	r5, #1
   87188:	fbb6 f7f3 	udiv	r7, r6, r3
   8718c:	fb03 6117 	mls	r1, r3, r7, r6
   87190:	fb0c f807 	mul.w	r8, ip, r7
   87194:	ea4f 4910 	mov.w	r9, r0, lsr #16
   87198:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8719c:	45b0      	cmp	r8, r6
   8719e:	d906      	bls.n	871ae <__divdi3+0x10e>
   871a0:	1e79      	subs	r1, r7, #1
   871a2:	18b6      	adds	r6, r6, r2
   871a4:	d202      	bcs.n	871ac <__divdi3+0x10c>
   871a6:	45b0      	cmp	r8, r6
   871a8:	f200 80d3 	bhi.w	87352 <__divdi3+0x2b2>
   871ac:	460f      	mov	r7, r1
   871ae:	ebc8 0606 	rsb	r6, r8, r6
   871b2:	fbb6 f1f3 	udiv	r1, r6, r3
   871b6:	fb03 6311 	mls	r3, r3, r1, r6
   871ba:	fb0c fc01 	mul.w	ip, ip, r1
   871be:	b280      	uxth	r0, r0
   871c0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   871c4:	459c      	cmp	ip, r3
   871c6:	d906      	bls.n	871d6 <__divdi3+0x136>
   871c8:	1e4e      	subs	r6, r1, #1
   871ca:	189a      	adds	r2, r3, r2
   871cc:	d202      	bcs.n	871d4 <__divdi3+0x134>
   871ce:	4594      	cmp	ip, r2
   871d0:	f200 80c2 	bhi.w	87358 <__divdi3+0x2b8>
   871d4:	4631      	mov	r1, r6
   871d6:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   871da:	e7b1      	b.n	87140 <__divdi3+0xa0>
   871dc:	43e4      	mvns	r4, r4
   871de:	4252      	negs	r2, r2
   871e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   871e4:	e766      	b.n	870b4 <__divdi3+0x14>
   871e6:	4240      	negs	r0, r0
   871e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   871ec:	f04f 34ff 	mov.w	r4, #4294967295
   871f0:	e75d      	b.n	870ae <__divdi3+0xe>
   871f2:	40b2      	lsls	r2, r6
   871f4:	f1c6 0920 	rsb	r9, r6, #32
   871f8:	fa21 f709 	lsr.w	r7, r1, r9
   871fc:	fa20 f909 	lsr.w	r9, r0, r9
   87200:	fa01 f106 	lsl.w	r1, r1, r6
   87204:	0c13      	lsrs	r3, r2, #16
   87206:	fbb7 f8f3 	udiv	r8, r7, r3
   8720a:	fa1f fc82 	uxth.w	ip, r2
   8720e:	fb03 7718 	mls	r7, r3, r8, r7
   87212:	fb0c f508 	mul.w	r5, ip, r8
   87216:	ea49 0901 	orr.w	r9, r9, r1
   8721a:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8721e:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   87222:	40b0      	lsls	r0, r6
   87224:	42bd      	cmp	r5, r7
   87226:	d90a      	bls.n	8723e <__divdi3+0x19e>
   87228:	18bf      	adds	r7, r7, r2
   8722a:	f108 36ff 	add.w	r6, r8, #4294967295
   8722e:	f080 808e 	bcs.w	8734e <__divdi3+0x2ae>
   87232:	42bd      	cmp	r5, r7
   87234:	f240 808b 	bls.w	8734e <__divdi3+0x2ae>
   87238:	f1a8 0802 	sub.w	r8, r8, #2
   8723c:	18bf      	adds	r7, r7, r2
   8723e:	1b79      	subs	r1, r7, r5
   87240:	fbb1 f5f3 	udiv	r5, r1, r3
   87244:	fb03 1715 	mls	r7, r3, r5, r1
   87248:	fb0c f605 	mul.w	r6, ip, r5
   8724c:	fa1f f989 	uxth.w	r9, r9
   87250:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   87254:	428e      	cmp	r6, r1
   87256:	d906      	bls.n	87266 <__divdi3+0x1c6>
   87258:	1e6f      	subs	r7, r5, #1
   8725a:	1889      	adds	r1, r1, r2
   8725c:	d271      	bcs.n	87342 <__divdi3+0x2a2>
   8725e:	428e      	cmp	r6, r1
   87260:	d96f      	bls.n	87342 <__divdi3+0x2a2>
   87262:	3d02      	subs	r5, #2
   87264:	1889      	adds	r1, r1, r2
   87266:	1b8e      	subs	r6, r1, r6
   87268:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8726c:	e78c      	b.n	87188 <__divdi3+0xe8>
   8726e:	f1c5 0120 	rsb	r1, r5, #32
   87272:	fa22 f301 	lsr.w	r3, r2, r1
   87276:	fa06 f605 	lsl.w	r6, r6, r5
   8727a:	fa27 f201 	lsr.w	r2, r7, r1
   8727e:	fa07 f705 	lsl.w	r7, r7, r5
   87282:	fa20 f101 	lsr.w	r1, r0, r1
   87286:	431e      	orrs	r6, r3
   87288:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8728c:	fbb2 f8f9 	udiv	r8, r2, r9
   87290:	fa1f fa86 	uxth.w	sl, r6
   87294:	fb09 2218 	mls	r2, r9, r8, r2
   87298:	fb0a fb08 	mul.w	fp, sl, r8
   8729c:	430f      	orrs	r7, r1
   8729e:	0c3b      	lsrs	r3, r7, #16
   872a0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   872a4:	4593      	cmp	fp, r2
   872a6:	fa0c fc05 	lsl.w	ip, ip, r5
   872aa:	d908      	bls.n	872be <__divdi3+0x21e>
   872ac:	1992      	adds	r2, r2, r6
   872ae:	f108 31ff 	add.w	r1, r8, #4294967295
   872b2:	d24a      	bcs.n	8734a <__divdi3+0x2aa>
   872b4:	4593      	cmp	fp, r2
   872b6:	d948      	bls.n	8734a <__divdi3+0x2aa>
   872b8:	f1a8 0802 	sub.w	r8, r8, #2
   872bc:	1992      	adds	r2, r2, r6
   872be:	ebcb 0302 	rsb	r3, fp, r2
   872c2:	fbb3 f1f9 	udiv	r1, r3, r9
   872c6:	fb09 3211 	mls	r2, r9, r1, r3
   872ca:	fb0a fa01 	mul.w	sl, sl, r1
   872ce:	b2bf      	uxth	r7, r7
   872d0:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   872d4:	459a      	cmp	sl, r3
   872d6:	d906      	bls.n	872e6 <__divdi3+0x246>
   872d8:	1e4a      	subs	r2, r1, #1
   872da:	199b      	adds	r3, r3, r6
   872dc:	d233      	bcs.n	87346 <__divdi3+0x2a6>
   872de:	459a      	cmp	sl, r3
   872e0:	d931      	bls.n	87346 <__divdi3+0x2a6>
   872e2:	3902      	subs	r1, #2
   872e4:	199b      	adds	r3, r3, r6
   872e6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   872ea:	0c0f      	lsrs	r7, r1, #16
   872ec:	fa1f f88c 	uxth.w	r8, ip
   872f0:	fb08 f607 	mul.w	r6, r8, r7
   872f4:	b28a      	uxth	r2, r1
   872f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   872fa:	fb08 f802 	mul.w	r8, r8, r2
   872fe:	fb0c 6202 	mla	r2, ip, r2, r6
   87302:	fb0c fc07 	mul.w	ip, ip, r7
   87306:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8730a:	4296      	cmp	r6, r2
   8730c:	bf88      	it	hi
   8730e:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   87312:	ebca 0303 	rsb	r3, sl, r3
   87316:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8731a:	4563      	cmp	r3, ip
   8731c:	d30e      	bcc.n	8733c <__divdi3+0x29c>
   8731e:	d005      	beq.n	8732c <__divdi3+0x28c>
   87320:	2500      	movs	r5, #0
   87322:	e70d      	b.n	87140 <__divdi3+0xa0>
   87324:	460e      	mov	r6, r1
   87326:	e6ef      	b.n	87108 <__divdi3+0x68>
   87328:	461d      	mov	r5, r3
   8732a:	e701      	b.n	87130 <__divdi3+0x90>
   8732c:	fa00 f005 	lsl.w	r0, r0, r5
   87330:	fa1f f888 	uxth.w	r8, r8
   87334:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   87338:	42a8      	cmp	r0, r5
   8733a:	d2f1      	bcs.n	87320 <__divdi3+0x280>
   8733c:	3901      	subs	r1, #1
   8733e:	2500      	movs	r5, #0
   87340:	e6fe      	b.n	87140 <__divdi3+0xa0>
   87342:	463d      	mov	r5, r7
   87344:	e78f      	b.n	87266 <__divdi3+0x1c6>
   87346:	4611      	mov	r1, r2
   87348:	e7cd      	b.n	872e6 <__divdi3+0x246>
   8734a:	4688      	mov	r8, r1
   8734c:	e7b7      	b.n	872be <__divdi3+0x21e>
   8734e:	46b0      	mov	r8, r6
   87350:	e775      	b.n	8723e <__divdi3+0x19e>
   87352:	3f02      	subs	r7, #2
   87354:	18b6      	adds	r6, r6, r2
   87356:	e72a      	b.n	871ae <__divdi3+0x10e>
   87358:	3902      	subs	r1, #2
   8735a:	e73c      	b.n	871d6 <__divdi3+0x136>

0008735c <__udivdi3>:
   8735c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   87360:	4614      	mov	r4, r2
   87362:	4605      	mov	r5, r0
   87364:	460e      	mov	r6, r1
   87366:	2b00      	cmp	r3, #0
   87368:	d13d      	bne.n	873e6 <__udivdi3+0x8a>
   8736a:	428a      	cmp	r2, r1
   8736c:	d949      	bls.n	87402 <__udivdi3+0xa6>
   8736e:	fab2 f782 	clz	r7, r2
   87372:	b147      	cbz	r7, 87386 <__udivdi3+0x2a>
   87374:	f1c7 0120 	rsb	r1, r7, #32
   87378:	fa20 f201 	lsr.w	r2, r0, r1
   8737c:	fa06 f607 	lsl.w	r6, r6, r7
   87380:	40bc      	lsls	r4, r7
   87382:	40bd      	lsls	r5, r7
   87384:	4316      	orrs	r6, r2
   87386:	0c22      	lsrs	r2, r4, #16
   87388:	fbb6 f0f2 	udiv	r0, r6, r2
   8738c:	b2a1      	uxth	r1, r4
   8738e:	fb02 6610 	mls	r6, r2, r0, r6
   87392:	fb01 f300 	mul.w	r3, r1, r0
   87396:	0c2f      	lsrs	r7, r5, #16
   87398:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8739c:	42b3      	cmp	r3, r6
   8739e:	d908      	bls.n	873b2 <__udivdi3+0x56>
   873a0:	1e47      	subs	r7, r0, #1
   873a2:	1936      	adds	r6, r6, r4
   873a4:	f080 80fa 	bcs.w	8759c <__udivdi3+0x240>
   873a8:	42b3      	cmp	r3, r6
   873aa:	f240 80f7 	bls.w	8759c <__udivdi3+0x240>
   873ae:	3802      	subs	r0, #2
   873b0:	1936      	adds	r6, r6, r4
   873b2:	1af6      	subs	r6, r6, r3
   873b4:	fbb6 f3f2 	udiv	r3, r6, r2
   873b8:	fb02 6213 	mls	r2, r2, r3, r6
   873bc:	fb01 f103 	mul.w	r1, r1, r3
   873c0:	b2ad      	uxth	r5, r5
   873c2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   873c6:	4291      	cmp	r1, r2
   873c8:	d907      	bls.n	873da <__udivdi3+0x7e>
   873ca:	1e5e      	subs	r6, r3, #1
   873cc:	1912      	adds	r2, r2, r4
   873ce:	f080 80e7 	bcs.w	875a0 <__udivdi3+0x244>
   873d2:	4291      	cmp	r1, r2
   873d4:	f240 80e4 	bls.w	875a0 <__udivdi3+0x244>
   873d8:	3b02      	subs	r3, #2
   873da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   873de:	2100      	movs	r1, #0
   873e0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   873e4:	4770      	bx	lr
   873e6:	428b      	cmp	r3, r1
   873e8:	d843      	bhi.n	87472 <__udivdi3+0x116>
   873ea:	fab3 f483 	clz	r4, r3
   873ee:	2c00      	cmp	r4, #0
   873f0:	d142      	bne.n	87478 <__udivdi3+0x11c>
   873f2:	428b      	cmp	r3, r1
   873f4:	d302      	bcc.n	873fc <__udivdi3+0xa0>
   873f6:	4282      	cmp	r2, r0
   873f8:	f200 80e1 	bhi.w	875be <__udivdi3+0x262>
   873fc:	2100      	movs	r1, #0
   873fe:	2001      	movs	r0, #1
   87400:	e7ee      	b.n	873e0 <__udivdi3+0x84>
   87402:	b912      	cbnz	r2, 8740a <__udivdi3+0xae>
   87404:	2701      	movs	r7, #1
   87406:	fbb7 f4f2 	udiv	r4, r7, r2
   8740a:	fab4 f284 	clz	r2, r4
   8740e:	2a00      	cmp	r2, #0
   87410:	f040 8089 	bne.w	87526 <__udivdi3+0x1ca>
   87414:	1b0a      	subs	r2, r1, r4
   87416:	0c23      	lsrs	r3, r4, #16
   87418:	b2a7      	uxth	r7, r4
   8741a:	2101      	movs	r1, #1
   8741c:	fbb2 f6f3 	udiv	r6, r2, r3
   87420:	fb03 2216 	mls	r2, r3, r6, r2
   87424:	fb07 f006 	mul.w	r0, r7, r6
   87428:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8742c:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   87430:	4290      	cmp	r0, r2
   87432:	d907      	bls.n	87444 <__udivdi3+0xe8>
   87434:	1912      	adds	r2, r2, r4
   87436:	f106 3cff 	add.w	ip, r6, #4294967295
   8743a:	d202      	bcs.n	87442 <__udivdi3+0xe6>
   8743c:	4290      	cmp	r0, r2
   8743e:	f200 80d0 	bhi.w	875e2 <__udivdi3+0x286>
   87442:	4666      	mov	r6, ip
   87444:	1a12      	subs	r2, r2, r0
   87446:	fbb2 f0f3 	udiv	r0, r2, r3
   8744a:	fb03 2310 	mls	r3, r3, r0, r2
   8744e:	fb07 f700 	mul.w	r7, r7, r0
   87452:	b2ad      	uxth	r5, r5
   87454:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   87458:	429f      	cmp	r7, r3
   8745a:	d907      	bls.n	8746c <__udivdi3+0x110>
   8745c:	1e42      	subs	r2, r0, #1
   8745e:	191b      	adds	r3, r3, r4
   87460:	f080 80a0 	bcs.w	875a4 <__udivdi3+0x248>
   87464:	429f      	cmp	r7, r3
   87466:	f240 809d 	bls.w	875a4 <__udivdi3+0x248>
   8746a:	3802      	subs	r0, #2
   8746c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   87470:	e7b6      	b.n	873e0 <__udivdi3+0x84>
   87472:	2100      	movs	r1, #0
   87474:	4608      	mov	r0, r1
   87476:	e7b3      	b.n	873e0 <__udivdi3+0x84>
   87478:	f1c4 0620 	rsb	r6, r4, #32
   8747c:	fa22 f706 	lsr.w	r7, r2, r6
   87480:	fa03 f304 	lsl.w	r3, r3, r4
   87484:	fa21 f506 	lsr.w	r5, r1, r6
   87488:	fa01 f104 	lsl.w	r1, r1, r4
   8748c:	fa20 f606 	lsr.w	r6, r0, r6
   87490:	433b      	orrs	r3, r7
   87492:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   87496:	fbb5 f7fc 	udiv	r7, r5, ip
   8749a:	fa1f f883 	uxth.w	r8, r3
   8749e:	fb0c 5517 	mls	r5, ip, r7, r5
   874a2:	fb08 f907 	mul.w	r9, r8, r7
   874a6:	ea46 0a01 	orr.w	sl, r6, r1
   874aa:	ea4f 411a 	mov.w	r1, sl, lsr #16
   874ae:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   874b2:	45a9      	cmp	r9, r5
   874b4:	fa02 f204 	lsl.w	r2, r2, r4
   874b8:	d904      	bls.n	874c4 <__udivdi3+0x168>
   874ba:	1e7e      	subs	r6, r7, #1
   874bc:	18ed      	adds	r5, r5, r3
   874be:	f0c0 8081 	bcc.w	875c4 <__udivdi3+0x268>
   874c2:	4637      	mov	r7, r6
   874c4:	ebc9 0105 	rsb	r1, r9, r5
   874c8:	fbb1 f6fc 	udiv	r6, r1, ip
   874cc:	fb0c 1516 	mls	r5, ip, r6, r1
   874d0:	fb08 f806 	mul.w	r8, r8, r6
   874d4:	fa1f fa8a 	uxth.w	sl, sl
   874d8:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   874dc:	4588      	cmp	r8, r1
   874de:	d903      	bls.n	874e8 <__udivdi3+0x18c>
   874e0:	1e75      	subs	r5, r6, #1
   874e2:	18c9      	adds	r1, r1, r3
   874e4:	d374      	bcc.n	875d0 <__udivdi3+0x274>
   874e6:	462e      	mov	r6, r5
   874e8:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   874ec:	0c37      	lsrs	r7, r6, #16
   874ee:	fa1f fc82 	uxth.w	ip, r2
   874f2:	fb0c f507 	mul.w	r5, ip, r7
   874f6:	0c12      	lsrs	r2, r2, #16
   874f8:	b2b3      	uxth	r3, r6
   874fa:	fb0c fc03 	mul.w	ip, ip, r3
   874fe:	fb02 5303 	mla	r3, r2, r3, r5
   87502:	fb02 f207 	mul.w	r2, r2, r7
   87506:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8750a:	429d      	cmp	r5, r3
   8750c:	bf88      	it	hi
   8750e:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   87512:	ebc8 0101 	rsb	r1, r8, r1
   87516:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8751a:	4291      	cmp	r1, r2
   8751c:	d34c      	bcc.n	875b8 <__udivdi3+0x25c>
   8751e:	d043      	beq.n	875a8 <__udivdi3+0x24c>
   87520:	4630      	mov	r0, r6
   87522:	2100      	movs	r1, #0
   87524:	e75c      	b.n	873e0 <__udivdi3+0x84>
   87526:	4094      	lsls	r4, r2
   87528:	f1c2 0520 	rsb	r5, r2, #32
   8752c:	fa21 f605 	lsr.w	r6, r1, r5
   87530:	fa20 f505 	lsr.w	r5, r0, r5
   87534:	fa01 f102 	lsl.w	r1, r1, r2
   87538:	0c23      	lsrs	r3, r4, #16
   8753a:	fbb6 fcf3 	udiv	ip, r6, r3
   8753e:	b2a7      	uxth	r7, r4
   87540:	fb03 661c 	mls	r6, r3, ip, r6
   87544:	fb07 f80c 	mul.w	r8, r7, ip
   87548:	4329      	orrs	r1, r5
   8754a:	0c0d      	lsrs	r5, r1, #16
   8754c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   87550:	45b0      	cmp	r8, r6
   87552:	fa00 f502 	lsl.w	r5, r0, r2
   87556:	d908      	bls.n	8756a <__udivdi3+0x20e>
   87558:	1936      	adds	r6, r6, r4
   8755a:	f10c 30ff 	add.w	r0, ip, #4294967295
   8755e:	d23e      	bcs.n	875de <__udivdi3+0x282>
   87560:	45b0      	cmp	r8, r6
   87562:	d93c      	bls.n	875de <__udivdi3+0x282>
   87564:	f1ac 0c02 	sub.w	ip, ip, #2
   87568:	1936      	adds	r6, r6, r4
   8756a:	ebc8 0206 	rsb	r2, r8, r6
   8756e:	fbb2 f0f3 	udiv	r0, r2, r3
   87572:	fb03 2610 	mls	r6, r3, r0, r2
   87576:	fb07 f800 	mul.w	r8, r7, r0
   8757a:	b289      	uxth	r1, r1
   8757c:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   87580:	4590      	cmp	r8, r2
   87582:	d906      	bls.n	87592 <__udivdi3+0x236>
   87584:	1e46      	subs	r6, r0, #1
   87586:	1912      	adds	r2, r2, r4
   87588:	d227      	bcs.n	875da <__udivdi3+0x27e>
   8758a:	4590      	cmp	r8, r2
   8758c:	d925      	bls.n	875da <__udivdi3+0x27e>
   8758e:	3802      	subs	r0, #2
   87590:	1912      	adds	r2, r2, r4
   87592:	ebc8 0202 	rsb	r2, r8, r2
   87596:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8759a:	e73f      	b.n	8741c <__udivdi3+0xc0>
   8759c:	4638      	mov	r0, r7
   8759e:	e708      	b.n	873b2 <__udivdi3+0x56>
   875a0:	4633      	mov	r3, r6
   875a2:	e71a      	b.n	873da <__udivdi3+0x7e>
   875a4:	4610      	mov	r0, r2
   875a6:	e761      	b.n	8746c <__udivdi3+0x110>
   875a8:	fa00 f004 	lsl.w	r0, r0, r4
   875ac:	fa1f fc8c 	uxth.w	ip, ip
   875b0:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   875b4:	4298      	cmp	r0, r3
   875b6:	d2b3      	bcs.n	87520 <__udivdi3+0x1c4>
   875b8:	1e70      	subs	r0, r6, #1
   875ba:	2100      	movs	r1, #0
   875bc:	e710      	b.n	873e0 <__udivdi3+0x84>
   875be:	4621      	mov	r1, r4
   875c0:	4620      	mov	r0, r4
   875c2:	e70d      	b.n	873e0 <__udivdi3+0x84>
   875c4:	45a9      	cmp	r9, r5
   875c6:	f67f af7c 	bls.w	874c2 <__udivdi3+0x166>
   875ca:	3f02      	subs	r7, #2
   875cc:	18ed      	adds	r5, r5, r3
   875ce:	e779      	b.n	874c4 <__udivdi3+0x168>
   875d0:	4588      	cmp	r8, r1
   875d2:	d988      	bls.n	874e6 <__udivdi3+0x18a>
   875d4:	3e02      	subs	r6, #2
   875d6:	18c9      	adds	r1, r1, r3
   875d8:	e786      	b.n	874e8 <__udivdi3+0x18c>
   875da:	4630      	mov	r0, r6
   875dc:	e7d9      	b.n	87592 <__udivdi3+0x236>
   875de:	4684      	mov	ip, r0
   875e0:	e7c3      	b.n	8756a <__udivdi3+0x20e>
   875e2:	3e02      	subs	r6, #2
   875e4:	1912      	adds	r2, r2, r4
   875e6:	e72d      	b.n	87444 <__udivdi3+0xe8>
   875e8:	00006425 	.word	0x00006425
   875ec:	000a7325 	.word	0x000a7325
   875f0:	00000001 	.word	0x00000001
   875f4:	00000002 	.word	0x00000002
   875f8:	00000004 	.word	0x00000004
   875fc:	00000008 	.word	0x00000008
   87600:	00000010 	.word	0x00000010
   87604:	00000020 	.word	0x00000020
   87608:	00000040 	.word	0x00000040
   8760c:	00000080 	.word	0x00000080
   87610:	00000100 	.word	0x00000100
   87614:	00000200 	.word	0x00000200
   87618:	00000400 	.word	0x00000400
   8761c:	09097325 	.word	0x09097325
   87620:	25096325 	.word	0x25096325
   87624:	75250975 	.word	0x75250975
   87628:	0d752509 	.word	0x0d752509
   8762c:	0000000a 	.word	0x0000000a
   87630:	454c4449 	.word	0x454c4449
   87634:	00000000 	.word	0x00000000
   87638:	00000a0d 	.word	0x00000a0d
   8763c:	20726d54 	.word	0x20726d54
   87640:	00637653 	.word	0x00637653
   87644:	20444950 	.word	0x20444950
   87648:	746e6f43 	.word	0x746e6f43
   8764c:	006c6f72 	.word	0x006c6f72
   87650:	6c696146 	.word	0x6c696146
   87654:	74206465 	.word	0x74206465
   87658:	7263206f 	.word	0x7263206f
   8765c:	65746165 	.word	0x65746165
   87660:	44495020 	.word	0x44495020
   87664:	6e6f4320 	.word	0x6e6f4320
   87668:	6c6f7274 	.word	0x6c6f7274
   8766c:	73617420 	.word	0x73617420
   87670:	000a0d6b 	.word	0x000a0d6b
   87674:	746f6c50 	.word	0x746f6c50
   87678:	6c615620 	.word	0x6c615620
   8767c:	00736575 	.word	0x00736575

00087680 <_global_impure_ptr>:
   87680:	20070048 20200043                                H.. C.

00087686 <blanks.6650>:
   87686:	20202020 20202020 20202020 20202020                     

00087696 <zeroes.6651>:
   87696:	30303030 30303030 30303030 30303030     0000000000000000
   876a6:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   876b6:	32313000 36353433 61393837 65646362     .0123456789abcde
   876c6:	20200066                                         f.

000876c8 <blanks.6678>:
   876c8:	20202020 20202020 20202020 20202020                     

000876d8 <zeroes.6679>:
   876d8:	30303030 30303030 30303030 30303030     0000000000000000
   876e8:	49534f50 002e0058                       POSIX...

000876f0 <blanks.6664>:
   876f0:	20202020 20202020 20202020 20202020                     

00087700 <zeroes.6665>:
   87700:	30303030 30303030 30303030 30303030     0000000000000000

00087710 <_init>:
   87710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87712:	bf00      	nop
   87714:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87716:	bc08      	pop	{r3}
   87718:	469e      	mov	lr, r3
   8771a:	4770      	bx	lr

0008771c <__init_array_start>:
   8771c:	000851c5 	.word	0x000851c5

00087720 <__frame_dummy_init_array_entry>:
   87720:	0008016d                                m...

00087724 <_fini>:
   87724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87726:	bf00      	nop
   87728:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8772a:	bc08      	pop	{r3}
   8772c:	469e      	mov	lr, r3
   8772e:	4770      	bx	lr

00087730 <__fini_array_start>:
   87730:	00080145 	.word	0x00080145
