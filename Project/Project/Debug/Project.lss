
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aa94  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008aa94  0008aa94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000900  20070000  0008aa9c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000a37c  20070900  0008b3a0  00018900  2**3
                  ALLOC
  4 .stack        00002004  2007ac7c  0009571c  00018900  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018900  2**0
                  CONTENTS, READONLY
  6 .comment      00000070  00000000  00000000  00018929  2**0
                  CONTENTS, READONLY
  7 .debug_info   00040cc7  00000000  00000000  00018999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000be31  00000000  00000000  00059660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017027  00000000  00000000  00065491  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001af8  00000000  00000000  0007c4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014d0  00000000  00000000  0007dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bb2a  00000000  00000000  0007f480  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000233ed  00000000  00000000  0009afaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00069a87  00000000  00000000  000be397  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003920  00000000  00000000  00127e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cc80 	.word	0x2007cc80
   80004:	00081475 	.word	0x00081475
   80008:	00081471 	.word	0x00081471
   8000c:	00081471 	.word	0x00081471
   80010:	00081471 	.word	0x00081471
   80014:	00081471 	.word	0x00081471
   80018:	00081471 	.word	0x00081471
	...
   8002c:	00081941 	.word	0x00081941
   80030:	00081471 	.word	0x00081471
   80034:	00000000 	.word	0x00000000
   80038:	000819d1 	.word	0x000819d1
   8003c:	00081a0d 	.word	0x00081a0d
   80040:	00081471 	.word	0x00081471
   80044:	00081471 	.word	0x00081471
   80048:	00081471 	.word	0x00081471
   8004c:	00081471 	.word	0x00081471
   80050:	00081471 	.word	0x00081471
   80054:	00081471 	.word	0x00081471
   80058:	00081471 	.word	0x00081471
   8005c:	00081471 	.word	0x00081471
   80060:	00081471 	.word	0x00081471
   80064:	00081471 	.word	0x00081471
   80068:	00000000 	.word	0x00000000
   8006c:	00080e81 	.word	0x00080e81
   80070:	00080e9d 	.word	0x00080e9d
   80074:	00080eb9 	.word	0x00080eb9
   80078:	00080ed5 	.word	0x00080ed5
	...
   80084:	00081471 	.word	0x00081471
   80088:	00081471 	.word	0x00081471
   8008c:	00081471 	.word	0x00081471
   80090:	00081471 	.word	0x00081471
   80094:	00081471 	.word	0x00081471
   80098:	00081471 	.word	0x00081471
   8009c:	00081471 	.word	0x00081471
   800a0:	00081471 	.word	0x00081471
   800a4:	00000000 	.word	0x00000000
   800a8:	00081471 	.word	0x00081471
   800ac:	00081471 	.word	0x00081471
   800b0:	00081471 	.word	0x00081471
   800b4:	00081471 	.word	0x00081471
   800b8:	00081471 	.word	0x00081471
   800bc:	00081471 	.word	0x00081471
   800c0:	00081471 	.word	0x00081471
   800c4:	00081471 	.word	0x00081471
   800c8:	00081471 	.word	0x00081471
   800cc:	00081471 	.word	0x00081471
   800d0:	00081471 	.word	0x00081471
   800d4:	00081471 	.word	0x00081471
   800d8:	00081471 	.word	0x00081471
   800dc:	00081471 	.word	0x00081471
   800e0:	00081471 	.word	0x00081471
   800e4:	00081471 	.word	0x00081471
   800e8:	00081471 	.word	0x00081471
   800ec:	00081471 	.word	0x00081471
   800f0:	00081471 	.word	0x00081471

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008aa9c 	.word	0x0008aa9c
   80110:	0008aa9f 	.word	0x0008aa9f
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008aa9c 	.word	0x0008aa9c
   8013c:	0008aa9c 	.word	0x0008aa9c
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070900 	.word	0x20070900
   80164:	00000000 	.word	0x00000000
   80168:	0008aa9c 	.word	0x0008aa9c

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008aa9c 	.word	0x0008aa9c
   80198:	20070904 	.word	0x20070904
   8019c:	0008aa9c 	.word	0x0008aa9c
   801a0:	00000000 	.word	0x00000000

000801a4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   801a4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   801a6:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   801aa:	f2c0 5001 	movt	r0, #1281	; 0x501
   801ae:	f241 7375 	movw	r3, #6005	; 0x1775
   801b2:	f2c0 0308 	movt	r3, #8
   801b6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801b8:	f04f 0000 	mov.w	r0, #0
   801bc:	f04f 013e 	mov.w	r1, #62	; 0x3e
   801c0:	f640 7291 	movw	r2, #3985	; 0xf91
   801c4:	f2c0 0208 	movt	r2, #8
   801c8:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   801ca:	f241 0401 	movw	r4, #4097	; 0x1001
   801ce:	f2c0 0408 	movt	r4, #8
   801d2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   801d4:	2800      	cmp	r0, #0
   801d6:	d0fc      	beq.n	801d2 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   801d8:	f241 0011 	movw	r0, #4113	; 0x1011
   801dc:	f2c0 0008 	movt	r0, #8
   801e0:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   801e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   801e6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   801ea:	f643 7301 	movw	r3, #16129	; 0x3f01
   801ee:	f2c2 030d 	movt	r3, #8205	; 0x200d
   801f2:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   801f4:	f241 0421 	movw	r4, #4129	; 0x1021
   801f8:	f2c0 0408 	movt	r4, #8
   801fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   801fe:	2800      	cmp	r0, #0
   80200:	d0fc      	beq.n	801fc <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80202:	f04f 0010 	mov.w	r0, #16
   80206:	f640 62f1 	movw	r2, #3825	; 0xef1
   8020a:	f2c0 0208 	movt	r2, #8
   8020e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80210:	f241 50ad 	movw	r0, #5549	; 0x15ad
   80214:	f2c0 0008 	movt	r0, #8
   80218:	4780      	blx	r0
   8021a:	bd10      	pop	{r4, pc}

0008021c <delay_init>:

#include "asf.h"
#include "DelayFunctions.h"

int delay_init(void)
{
   8021c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   8021e:	f04f 001b 	mov.w	r0, #27
   80222:	f241 0331 	movw	r3, #4145	; 0x1031
   80226:	f2c0 0308 	movt	r3, #8
   8022a:	4798      	blx	r3
	tc_init(TC0,0,0);
   8022c:	f04f 0400 	mov.w	r4, #0
   80230:	f2c4 0408 	movt	r4, #16392	; 0x4008
   80234:	4620      	mov	r0, r4
   80236:	f04f 0100 	mov.w	r1, #0
   8023a:	460a      	mov	r2, r1
   8023c:	f241 338d 	movw	r3, #5005	; 0x138d
   80240:	f2c0 0308 	movt	r3, #8
   80244:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80246:	4620      	mov	r0, r4
   80248:	f04f 0100 	mov.w	r1, #0
   8024c:	f241 32a9 	movw	r2, #5033	; 0x13a9
   80250:	f2c0 0208 	movt	r2, #8
   80254:	4790      	blx	r2
	tc_stop(TC0,0);
   80256:	4620      	mov	r0, r4
   80258:	f04f 0100 	mov.w	r1, #0
   8025c:	f241 33b1 	movw	r3, #5041	; 0x13b1
   80260:	f2c0 0308 	movt	r3, #8
   80264:	4798      	blx	r3
	return 0;
}
   80266:	f04f 0000 	mov.w	r0, #0
   8026a:	bd10      	pop	{r4, pc}

0008026c <setupUART>:

/* UART Status Register (pointer) */
reg_address_t *const p_UART_SR = (reg_address_t *) 0x400E0814U;

void setupUART(void)
{
   8026c:	b530      	push	{r4, r5, lr}
   8026e:	b085      	sub	sp, #20
	pio_configure(PINS_UART_PIO, PINS_UART_TYPE, PINS_UART_MASK, PIO_DEFAULT);
   80270:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   80274:	f2c4 040e 	movt	r4, #16398	; 0x400e
   80278:	4620      	mov	r0, r4
   8027a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8027e:	f44f 7240 	mov.w	r2, #768	; 0x300
   80282:	f04f 0300 	mov.w	r3, #0
   80286:	f640 35c1 	movw	r5, #3009	; 0xbc1
   8028a:	f2c0 0508 	movt	r5, #8
   8028e:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_UART);
   80290:	f04f 0008 	mov.w	r0, #8
   80294:	f241 0331 	movw	r3, #4145	; 0x1031
   80298:	f2c0 0308 	movt	r3, #8
   8029c:	4798      	blx	r3
	const sam_uart_opt_t uart0_settings = {sysclk_get_cpu_hz(), CONF_UART_BAUDRATE, UART_MR_PAR_NO};
   8029e:	f04f 0000 	mov.w	r0, #0
   802a2:	9003      	str	r0, [sp, #12]
   802a4:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   802a8:	f2c0 5101 	movt	r1, #1281	; 0x501
   802ac:	9100      	str	r1, [sp, #0]
   802ae:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   802b2:	9201      	str	r2, [sp, #4]
   802b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802b8:	9302      	str	r3, [sp, #8]
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   802ba:	f44f 7080 	mov.w	r0, #256	; 0x100
   802be:	6660      	str	r0, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   802c0:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   802c2:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   802c4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   802c8:	6f21      	ldr	r1, [r4, #112]	; 0x70
   802ca:	f421 7280 	bic.w	r2, r1, #256	; 0x100
   802ce:	6722      	str	r2, [r4, #112]	; 0x70
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
	uart_init(UART, &uart0_settings);
   802d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
   802d4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   802d8:	4669      	mov	r1, sp
   802da:	f241 33bd 	movw	r3, #5053	; 0x13bd
   802de:	f2c0 0308 	movt	r3, #8
   802e2:	4798      	blx	r3
}
   802e4:	b005      	add	sp, #20
   802e6:	bd30      	pop	{r4, r5, pc}

000802e8 <uart_receiver_ready>:
 * Receiver Ready?
 * Return 1 if "Receiver Ready" flag is set, otherwise 0.
 */
int uart_receiver_ready(void)
{
	return (UART_SR & UART_SR_RXRDY);
   802e8:	f640 0314 	movw	r3, #2068	; 0x814
   802ec:	f2c4 030e 	movt	r3, #16398	; 0x400e
   802f0:	6818      	ldr	r0, [r3, #0]
}
   802f2:	f000 0001 	and.w	r0, r0, #1
   802f6:	4770      	bx	lr

000802f8 <read_double>:
	return 1;
}

/* Converts string to double */
double read_double(void)
{
   802f8:	b500      	push	{lr}
   802fa:	b085      	sub	sp, #20
	double result;
	char str[10] = {0};
   802fc:	f04f 0300 	mov.w	r3, #0
   80300:	9301      	str	r3, [sp, #4]
   80302:	9302      	str	r3, [sp, #8]
   80304:	f8ad 300c 	strh.w	r3, [sp, #12]
	scanf("%s", str);
   80308:	f24a 60b0 	movw	r0, #42672	; 0xa6b0
   8030c:	f2c0 0008 	movt	r0, #8
   80310:	a901      	add	r1, sp, #4
   80312:	f643 72ed 	movw	r2, #16365	; 0x3fed
   80316:	f2c0 0208 	movt	r2, #8
   8031a:	4790      	blx	r2
	result = atof(str);
   8031c:	a801      	add	r0, sp, #4
   8031e:	f643 7109 	movw	r1, #16137	; 0x3f09
   80322:	f2c0 0108 	movt	r1, #8
   80326:	4788      	blx	r1
	
	return result;
}
   80328:	b005      	add	sp, #20
   8032a:	bd00      	pop	{pc}

0008032c <read_int>:

/* Converts string to double */
uint8_t read_int(void)
{
   8032c:	b500      	push	{lr}
   8032e:	b085      	sub	sp, #20
	uint8_t result;
	char str[10] = {0};
   80330:	f04f 0300 	mov.w	r3, #0
   80334:	9301      	str	r3, [sp, #4]
   80336:	9302      	str	r3, [sp, #8]
   80338:	f8ad 300c 	strh.w	r3, [sp, #12]
	scanf("%s", str);
   8033c:	f24a 60b0 	movw	r0, #42672	; 0xa6b0
   80340:	f2c0 0008 	movt	r0, #8
   80344:	a901      	add	r1, sp, #4
   80346:	f643 72ed 	movw	r2, #16365	; 0x3fed
   8034a:	f2c0 0208 	movt	r2, #8
   8034e:	4790      	blx	r2
	result = atof(str);
   80350:	a801      	add	r0, sp, #4
   80352:	f643 7109 	movw	r1, #16137	; 0x3f09
   80356:	f2c0 0108 	movt	r1, #8
   8035a:	4788      	blx	r1
   8035c:	f643 63bd 	movw	r3, #16061	; 0x3ebd
   80360:	f2c0 0308 	movt	r3, #8
   80364:	4798      	blx	r3
	
	return result;
}
   80366:	b2c0      	uxtb	r0, r0
   80368:	b005      	add	sp, #20
   8036a:	bd00      	pop	{pc}

0008036c <read_uart>:

/* Get and return a binary value */
uint8_t read_uart(void)
{
   8036c:	b500      	push	{lr}
   8036e:	b083      	sub	sp, #12
	uint8_t result;
	uart_read(CONF_UART, &result);
   80370:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80374:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80378:	f10d 0107 	add.w	r1, sp, #7
   8037c:	f241 4319 	movw	r3, #5145	; 0x1419
   80380:	f2c0 0308 	movt	r3, #8
   80384:	4798      	blx	r3
	
	return result;
   80386:	f89d 0007 	ldrb.w	r0, [sp, #7]
   8038a:	b003      	add	sp, #12
   8038c:	bd00      	pop	{pc}
   8038e:	bf00      	nop

00080390 <plot_values>:
double dT;
double Kp;
double Ti;
double Td;

void plot_values(void *p){
   80390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80394:	b084      	sub	sp, #16
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = 100;		//ms
	xLastWakeTime = xTaskGetTickCount();
   80396:	f242 6389 	movw	r3, #9865	; 0x2689
   8039a:	f2c0 0308 	movt	r3, #8
   8039e:	4798      	blx	r3
   803a0:	9003      	str	r0, [sp, #12]
	setupUART();
   803a2:	f240 206d 	movw	r0, #621	; 0x26d
   803a6:	f2c0 0008 	movt	r0, #8
   803aa:	4780      	blx	r0

	while(1)
	{
		if(uart_receiver_ready())
   803ac:	f240 24e9 	movw	r4, #745	; 0x2e9
   803b0:	f2c0 0408 	movt	r4, #8
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   803b4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   803b8:	f2c4 050e 	movt	r5, #16398	; 0x400e
		}
		/* Plot values in realtime */
		else if(ioport_get_pin_level(PIO_PB27_IDX)==1)
		{
			char matlabStr[10];
			sprintf(matlabStr, "%d", PID);
   803bc:	f24a 67b4 	movw	r7, #42676	; 0xa6b4
   803c0:	f2c0 0708 	movt	r7, #8
   803c4:	f64a 3862 	movw	r8, #43874	; 0xab62
   803c8:	f2c2 0807 	movt	r8, #8199	; 0x2007
	xLastWakeTime = xTaskGetTickCount();
	setupUART();

	while(1)
	{
		if(uart_receiver_ready())
   803cc:	47a0      	blx	r4
   803ce:	2800      	cmp	r0, #0
   803d0:	d03b      	beq.n	8044a <plot_values+0xba>
		{
			if(read_uart() == 40)
   803d2:	f240 306d 	movw	r0, #877	; 0x36d
   803d6:	f2c0 0008 	movt	r0, #8
   803da:	4780      	blx	r0
   803dc:	2828      	cmp	r0, #40	; 0x28
   803de:	d163      	bne.n	804a8 <plot_values+0x118>
   803e0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			{
				/* Set parameters. */
				if(ioport_get_pin_level(PIO_PB27_IDX)==0)
   803e2:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   803e6:	d15f      	bne.n	804a8 <plot_values+0x118>
				{
					Kp = read_double();
   803e8:	f240 26f9 	movw	r6, #761	; 0x2f9
   803ec:	f2c0 0608 	movt	r6, #8
   803f0:	47b0      	blx	r6
   803f2:	f64a 3250 	movw	r2, #43856	; 0xab50
   803f6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   803fa:	e9c2 0100 	strd	r0, r1, [r2]
					Ti = read_double();
   803fe:	47b0      	blx	r6
   80400:	f64a 3348 	movw	r3, #43848	; 0xab48
   80404:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80408:	e9c3 0100 	strd	r0, r1, [r3]
					Td = read_double();
   8040c:	47b0      	blx	r6
   8040e:	f64a 3258 	movw	r2, #43864	; 0xab58
   80412:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80416:	e9c2 0100 	strd	r0, r1, [r2]
					dT = read_double();
   8041a:	47b0      	blx	r6
   8041c:	f64a 3638 	movw	r6, #43832	; 0xab38
   80420:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80424:	e9c6 0100 	strd	r0, r1, [r6]
					setpoint = read_int();		
   80428:	f240 302d 	movw	r0, #813	; 0x32d
   8042c:	f2c0 0008 	movt	r0, #8
   80430:	4780      	blx	r0
   80432:	f64a 3140 	movw	r1, #43840	; 0xab40
   80436:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8043a:	7008      	strb	r0, [r1, #0]
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8043c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80440:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80442:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80446:	632b      	str	r3, [r5, #48]	; 0x30
   80448:	e02e      	b.n	804a8 <plot_values+0x118>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8044a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
					ioport_set_pin_level(PIO_PB27_IDX, 1);
				}
			}
		}
		/* Plot values in realtime */
		else if(ioport_get_pin_level(PIO_PB27_IDX)==1)
   8044c:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   80450:	d02a      	beq.n	804a8 <plot_values+0x118>
		{
			char matlabStr[10];
			sprintf(matlabStr, "%d", PID);
   80452:	4668      	mov	r0, sp
   80454:	4639      	mov	r1, r7
   80456:	f9b8 2000 	ldrsh.w	r2, [r8]
   8045a:	f244 1a69 	movw	sl, #16745	; 0x4169
   8045e:	f2c0 0a08 	movt	sl, #8
   80462:	47d0      	blx	sl
			printf("%s\n",matlabStr);
   80464:	f24a 69b8 	movw	r9, #42680	; 0xa6b8
   80468:	f2c0 0908 	movt	r9, #8
   8046c:	4648      	mov	r0, r9
   8046e:	4669      	mov	r1, sp
   80470:	f643 7689 	movw	r6, #16265	; 0x3f89
   80474:	f2c0 0608 	movt	r6, #8
   80478:	47b0      	blx	r6
			sprintf(matlabStr, "%d", error);
   8047a:	4668      	mov	r0, sp
   8047c:	4639      	mov	r1, r7
   8047e:	f64a 3268 	movw	r2, #43880	; 0xab68
   80482:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80486:	f9b2 2000 	ldrsh.w	r2, [r2]
   8048a:	47d0      	blx	sl
			printf("%s\n",matlabStr);
   8048c:	4648      	mov	r0, r9
   8048e:	4669      	mov	r1, sp
   80490:	47b0      	blx	r6
			sprintf(matlabStr, "%d", current_value);
   80492:	4668      	mov	r0, sp
   80494:	4639      	mov	r1, r7
   80496:	f64a 3360 	movw	r3, #43872	; 0xab60
   8049a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8049e:	881a      	ldrh	r2, [r3, #0]
   804a0:	47d0      	blx	sl
			printf("%s\n",matlabStr);
   804a2:	4648      	mov	r0, r9
   804a4:	4669      	mov	r1, sp
   804a6:	47b0      	blx	r6
		}
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   804a8:	a803      	add	r0, sp, #12
   804aa:	f04f 0164 	mov.w	r1, #100	; 0x64
   804ae:	f642 2229 	movw	r2, #10793	; 0x2a29
   804b2:	f2c0 0208 	movt	r2, #8
   804b6:	4790      	blx	r2
	}
   804b8:	e788      	b.n	803cc <plot_values+0x3c>
   804ba:	bf00      	nop

000804bc <motorshield_setup>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   804bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   804c0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   804c4:	f44f 7280 	mov.w	r2, #256	; 0x100
   804c8:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804ce:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804d0:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   804d4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   804d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   804dc:	6101      	str	r1, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804de:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804e2:	6301      	str	r1, [r0, #48]	; 0x30
   804e4:	4770      	bx	lr
   804e6:	bf00      	nop

000804e8 <pid_control>:
uint16_t integral = 0;
uint16_t derivate = 0;

/* PID control */
void pid_control(void *p)
{	
   804e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804ec:	b089      	sub	sp, #36	; 0x24
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = 100;		//ms
	xLastWakeTime = xTaskGetTickCount();
   804ee:	f242 6389 	movw	r3, #9865	; 0x2689
   804f2:	f2c0 0308 	movt	r3, #8
   804f6:	4798      	blx	r3
   804f8:	f10d 0b20 	add.w	fp, sp, #32
   804fc:	f84b 0d04 	str.w	r0, [fp, #-4]!
	
	while(1)
	{
		vTaskDelayUntil( &xLastWakeTime, xTimeIncrement); /* Wait for the next cycle */
   80500:	f642 2029 	movw	r0, #10793	; 0x2a29
   80504:	4681      	mov	r9, r0
   80506:	f2c0 0908 	movt	r9, #8
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8050a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
   8050e:	f2c4 0a0e 	movt	sl, #16398	; 0x400e
		if(ioport_get_pin_level(PIO_PB27_IDX)==1)
		{
			//printf("%d\n", ioport_get_pin_level(PIO_PB27_IDX));
			current_value = sensor_read();
   80512:	f240 71f5 	movw	r1, #2037	; 0x7f5
   80516:	f2c0 0108 	movt	r1, #8
   8051a:	9105      	str	r1, [sp, #20]
	portTickType xTimeIncrement = 100;		//ms
	xLastWakeTime = xTaskGetTickCount();
	
	while(1)
	{
		vTaskDelayUntil( &xLastWakeTime, xTimeIncrement); /* Wait for the next cycle */
   8051c:	4658      	mov	r0, fp
   8051e:	f04f 0164 	mov.w	r1, #100	; 0x64
   80522:	47c8      	blx	r9
   80524:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
		if(ioport_get_pin_level(PIO_PB27_IDX)==1)
   80528:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   8052c:	d0f6      	beq.n	8051c <pid_control+0x34>
		{
			//printf("%d\n", ioport_get_pin_level(PIO_PB27_IDX));
			current_value = sensor_read();
   8052e:	9e05      	ldr	r6, [sp, #20]
   80530:	47b0      	blx	r6
   80532:	f64a 3460 	movw	r4, #43872	; 0xab60
   80536:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8053a:	8020      	strh	r0, [r4, #0]
			error = setpoint - current_value;
   8053c:	f64a 3540 	movw	r5, #43840	; 0xab40
   80540:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80544:	782f      	ldrb	r7, [r5, #0]
   80546:	1a3b      	subs	r3, r7, r0
   80548:	b29d      	uxth	r5, r3
   8054a:	f64a 3068 	movw	r0, #43880	; 0xab68
   8054e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80552:	8005      	strh	r5, [r0, #0]
			
			sum = (sum + prev_error);
   80554:	f640 1120 	movw	r1, #2336	; 0x920
   80558:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8055c:	f9b1 2000 	ldrsh.w	r2, [r1]
   80560:	9204      	str	r2, [sp, #16]
   80562:	f64a 3664 	movw	r6, #43876	; 0xab64
   80566:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8056a:	6834      	ldr	r4, [r6, #0]
   8056c:	1910      	adds	r0, r2, r4
   8056e:	6030      	str	r0, [r6, #0]
			integral = (sum * (dT/Ti));
   80570:	f64a 3738 	movw	r7, #43832	; 0xab38
   80574:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80578:	e9d7 2300 	ldrd	r2, r3, [r7]
   8057c:	e9cd 2300 	strd	r2, r3, [sp]
   80580:	f643 137d 	movw	r3, #14717	; 0x397d
   80584:	f2c0 0308 	movt	r3, #8
   80588:	4798      	blx	r3
   8058a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8058e:	f643 449d 	movw	r4, #15517	; 0x3c9d
   80592:	f2c0 0408 	movt	r4, #8
   80596:	e9dd 0100 	ldrd	r0, r1, [sp]
   8059a:	f64a 3648 	movw	r6, #43848	; 0xab48
   8059e:	f2c2 0607 	movt	r6, #8199	; 0x2007
   805a2:	e9d6 2300 	ldrd	r2, r3, [r6]
   805a6:	47a0      	blx	r4
   805a8:	4602      	mov	r2, r0
   805aa:	460b      	mov	r3, r1
   805ac:	f643 2649 	movw	r6, #14921	; 0x3a49
   805b0:	f2c0 0608 	movt	r6, #8
   805b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   805b8:	47b0      	blx	r6
   805ba:	f643 68bd 	movw	r8, #16061	; 0x3ebd
   805be:	f2c0 0808 	movt	r8, #8
   805c2:	47c0      	blx	r8
   805c4:	b281      	uxth	r1, r0
   805c6:	9102      	str	r1, [sp, #8]
   805c8:	f640 171c 	movw	r7, #2332	; 0x91c
   805cc:	f2c2 0707 	movt	r7, #8199	; 0x2007
   805d0:	8038      	strh	r0, [r7, #0]
			derivate = ((Td/dT) * (error - prev_error));
   805d2:	b22f      	sxth	r7, r5
   805d4:	f64a 3058 	movw	r0, #43864	; 0xab58
   805d8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   805dc:	c803      	ldmia	r0, {r0, r1}
   805de:	e9dd 2300 	ldrd	r2, r3, [sp]
   805e2:	47a0      	blx	r4
   805e4:	e9cd 0100 	strd	r0, r1, [sp]
   805e8:	9a04      	ldr	r2, [sp, #16]
   805ea:	1ab8      	subs	r0, r7, r2
   805ec:	f643 137d 	movw	r3, #14717	; 0x397d
   805f0:	f2c0 0308 	movt	r3, #8
   805f4:	4798      	blx	r3
   805f6:	4602      	mov	r2, r0
   805f8:	460b      	mov	r3, r1
   805fa:	e9dd 0100 	ldrd	r0, r1, [sp]
   805fe:	47b0      	blx	r6
   80600:	47c0      	blx	r8
   80602:	b284      	uxth	r4, r0
   80604:	f640 111e 	movw	r1, #2334	; 0x91e
   80608:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8060c:	8008      	strh	r0, [r1, #0]
			PID = (Kp* (error + integral + derivate))*100;
   8060e:	9802      	ldr	r0, [sp, #8]
   80610:	183f      	adds	r7, r7, r0
   80612:	1938      	adds	r0, r7, r4
   80614:	f643 127d 	movw	r2, #14717	; 0x397d
   80618:	f2c0 0208 	movt	r2, #8
   8061c:	4790      	blx	r2
   8061e:	f64a 3350 	movw	r3, #43856	; 0xab50
   80622:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80626:	e9d3 2300 	ldrd	r2, r3, [r3]
   8062a:	47b0      	blx	r6
   8062c:	f04f 0200 	mov.w	r2, #0
   80630:	f04f 0300 	mov.w	r3, #0
   80634:	f2c4 0359 	movt	r3, #16473	; 0x4059
   80638:	47b0      	blx	r6
   8063a:	f643 666d 	movw	r6, #15981	; 0x3e6d
   8063e:	f2c0 0608 	movt	r6, #8
   80642:	47b0      	blx	r6
   80644:	f64a 3462 	movw	r4, #43874	; 0xab62
   80648:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8064c:	8020      	strh	r0, [r4, #0]
			prev_error = error;
   8064e:	f640 1120 	movw	r1, #2336	; 0x920
   80652:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80656:	800d      	strh	r5, [r1, #0]
			//printf("C: %d, E: %d, P: %d\n", current_value, error, PID);
			
			if(PID > 800)
   80658:	b205      	sxth	r5, r0
   8065a:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
   8065e:	dd07      	ble.n	80670 <pid_control+0x188>
			{
				PID = 800;
   80660:	f64a 3662 	movw	r6, #43874	; 0xab62
   80664:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80668:	f44f 7448 	mov.w	r4, #800	; 0x320
   8066c:	8034      	strh	r4, [r6, #0]
   8066e:	e00e      	b.n	8068e <pid_control+0x1a6>
			}
			if(PID < 0)
   80670:	f64a 3062 	movw	r0, #43874	; 0xab62
   80674:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80678:	f9b0 7000 	ldrsh.w	r7, [r0]
   8067c:	2f00      	cmp	r7, #0
   8067e:	da06      	bge.n	8068e <pid_control+0x1a6>
			{
				PID = 0;
   80680:	f64a 3362 	movw	r3, #43874	; 0xab62
   80684:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80688:	f04f 0200 	mov.w	r2, #0
   8068c:	801a      	strh	r2, [r3, #0]
			}
			pwm_update(PID);
   8068e:	f64a 3162 	movw	r1, #43874	; 0xab62
   80692:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80696:	f9b1 0000 	ldrsh.w	r0, [r1]
   8069a:	f240 7551 	movw	r5, #1873	; 0x751
   8069e:	f2c0 0508 	movt	r5, #8
   806a2:	47a8      	blx	r5
   806a4:	e73a      	b.n	8051c <pid_control+0x34>
   806a6:	bf00      	nop

000806a8 <pwm_setup>:

static pwm_channel_t pwm_channel_instance;			// Define the PWM channel instance in order to configure channel

/* Initialize PWM for pin DAC1 */
void pwm_setup(void)
{
   806a8:	b530      	push	{r4, r5, lr}
   806aa:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);					// Enable the module clock for PWM peripheral
   806ac:	f04f 0024 	mov.w	r0, #36	; 0x24
   806b0:	f241 0331 	movw	r3, #4145	; 0x1031
   806b4:	f2c0 0308 	movt	r3, #8
   806b8:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);			// Disable channel 0	
   806ba:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   806be:	f2c4 0509 	movt	r5, #16393	; 0x4009
   806c2:	4628      	mov	r0, r5
   806c4:	f04f 0100 	mov.w	r1, #0
   806c8:	f241 3281 	movw	r2, #4993	; 0x1381
   806cc:	f2c0 0208 	movt	r2, #8
   806d0:	4790      	blx	r2
	pwm_clock_t clock_setting = {					// Setup clock for PWM module
   806d2:	f244 2040 	movw	r0, #16960	; 0x4240
   806d6:	f2c0 000f 	movt	r0, #15
   806da:	9001      	str	r0, [sp, #4]
   806dc:	f04f 0400 	mov.w	r4, #0
   806e0:	9402      	str	r4, [sp, #8]
   806e2:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   806e6:	f2c0 5101 	movt	r1, #1281	; 0x501
   806ea:	9103      	str	r1, [sp, #12]
		.ul_clka = 1000 * 1000,						// Clock A is configured, frequencey = 1KHz, period = 1000
		.ul_clkb = 0,								// Clock B is not used
		.ul_mck = sysclk_get_cpu_hz()				// System main clock = 48MHz   (eller sysclk_get_cpu_hz() ?), sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   806ec:	4628      	mov	r0, r5
   806ee:	a901      	add	r1, sp, #4
   806f0:	f241 13d9 	movw	r3, #4569	; 0x11d9
   806f4:	f2c0 0308 	movt	r3, #8
   806f8:	4798      	blx	r3
	
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;			// Clock A as source clock
   806fa:	f640 1124 	movw	r1, #2340	; 0x924
   806fe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80702:	f04f 020b 	mov.w	r2, #11
   80706:	604a      	str	r2, [r1, #4]
	pwm_channel_instance.ul_period = 1000;
   80708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8070c:	6108      	str	r0, [r1, #16]
	pwm_channel_instance.ul_duty = 0;
   8070e:	60cc      	str	r4, [r1, #12]
	pwm_channel_instance.channel = PWM_CHANNEL;						// Configure channel 0
   80710:	600c      	str	r4, [r1, #0]
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;				// Period is left-aligned
   80712:	810c      	strh	r4, [r1, #8]
	pwm_channel_instance.polarity = PWM_LOW;						// Output waveform starts at a low level
   80714:	728c      	strb	r4, [r1, #10]
	
	pwm_channel_init(PWM, &pwm_channel_instance);					// Initialize channel instance
   80716:	4628      	mov	r0, r5
   80718:	f241 2225 	movw	r2, #4645	; 0x1225
   8071c:	f2c0 0208 	movt	r2, #8
   80720:	4790      	blx	r2
	pio_set_peripheral(PIOB, PIO_PERIPH_B, PIO_PB16B_PWML0);		// Setup PWM for pin DAC1
   80722:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80726:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8072a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8072e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80732:	f640 23f1 	movw	r3, #2801	; 0xaf1
   80736:	f2c0 0308 	movt	r3, #8
   8073a:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL);							// Enable channel 6
   8073c:	4628      	mov	r0, r5
   8073e:	4621      	mov	r1, r4
   80740:	f241 3275 	movw	r2, #4981	; 0x1375
   80744:	f2c0 0208 	movt	r2, #8
   80748:	4790      	blx	r2
}
   8074a:	b005      	add	sp, #20
   8074c:	bd30      	pop	{r4, r5, pc}
   8074e:	bf00      	nop

00080750 <pwm_update>:

/* Update duty cycle */
void pwm_update(int duty_cycle)
{
   80750:	b508      	push	{r3, lr}
   80752:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel_instance, duty_cycle);
   80754:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80758:	f2c4 0009 	movt	r0, #16393	; 0x4009
   8075c:	f640 1124 	movw	r1, #2340	; 0x924
   80760:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80764:	f241 3351 	movw	r3, #4945	; 0x1351
   80768:	f2c0 0308 	movt	r3, #8
   8076c:	4798      	blx	r3
   8076e:	bd08      	pop	{r3, pc}

00080770 <adc_setup>:
#include "SensorFunctions.h"


/* Initialize ADC for pin A8 */
void adc_setup(void)
{
   80770:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);							// Enable specified peripheral clock
   80772:	f04f 0025 	mov.w	r0, #37	; 0x25
   80776:	f241 0331 	movw	r3, #4145	; 0x1031
   8077a:	f2c0 0308 	movt	r3, #8
   8077e:	4798      	blx	r3
	
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);		// Initialize the given ADC with the specified ADC clock and startup time
   80780:	f04f 0400 	mov.w	r4, #0
   80784:	f2c4 040c 	movt	r4, #16396	; 0x400c
   80788:	4620      	mov	r0, r4
   8078a:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   8078e:	f6c0 2103 	movt	r1, #2563	; 0xa03
   80792:	f244 2240 	movw	r2, #16960	; 0x4240
   80796:	f2c0 020f 	movt	r2, #15
   8079a:	f04f 0308 	mov.w	r3, #8
   8079e:	f640 2535 	movw	r5, #2613	; 0xa35
   807a2:	f2c0 0508 	movt	r5, #8
   807a6:	47a8      	blx	r5
															// sysclk_get_main_hz() is used to get master clock frequency
															// ADC_CLOCK gives the ADC clock frequency
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);	// Configure ADC timing
   807a8:	4620      	mov	r0, r4
   807aa:	f04f 0100 	mov.w	r1, #0
   807ae:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   807b2:	f04f 0301 	mov.w	r3, #1
   807b6:	f640 259d 	movw	r5, #2717	; 0xa9d
   807ba:	f2c0 0508 	movt	r5, #8
   807be:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);			// Set ADC resolution with 12 bits, 2^12 = 4096 (voltage read converted to number between 0-4095)
   807c0:	4620      	mov	r0, r4
   807c2:	f04f 0100 	mov.w	r1, #0
   807c6:	f640 227d 	movw	r2, #2685	; 0xa7d
   807ca:	f2c0 0208 	movt	r2, #8
   807ce:	4790      	blx	r2
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// Enable specified ADC channel (pin A8)
   807d0:	4620      	mov	r0, r4
   807d2:	f04f 010a 	mov.w	r1, #10
   807d6:	f640 23c5 	movw	r3, #2757	; 0xac5
   807da:	f2c0 0308 	movt	r3, #8
   807de:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// Configure software conversion trigger
   807e0:	4620      	mov	r0, r4
   807e2:	f04f 0100 	mov.w	r1, #0
   807e6:	460a      	mov	r2, r1
   807e8:	f640 238d 	movw	r3, #2701	; 0xa8d
   807ec:	f2c0 0308 	movt	r3, #8
   807f0:	4798      	blx	r3
   807f2:	bd38      	pop	{r3, r4, r5, pc}

000807f4 <sensor_read>:
* 45-40cm = 1660
* 40-35cm = 1510
* 35-30cm = 1380	max value
*/
uint16_t sensor_read(void)
{
   807f4:	b510      	push	{r4, lr}
	uint16_t distance = 0;	
	
	while(1)
	{	
		adc_start(ADC);
   807f6:	f04f 0400 	mov.w	r4, #0
   807fa:	f2c4 040c 	movt	r4, #16396	; 0x400c
   807fe:	4620      	mov	r0, r4
   80800:	f640 23bd 	movw	r3, #2749	; 0xabd
   80804:	f2c0 0308 	movt	r3, #8
   80808:	4798      	blx	r3
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
   8080a:	4620      	mov	r0, r4
   8080c:	f04f 010a 	mov.w	r1, #10
   80810:	f640 22d1 	movw	r2, #2769	; 0xad1
   80814:	f2c0 0208 	movt	r2, #8
   80818:	4790      	blx	r2
   8081a:	b280      	uxth	r0, r0
		//printf("sensor: %d\n", sensor_value);
	
		if(sensor_value > 1890)
   8081c:	f240 7162 	movw	r1, #1890	; 0x762
   80820:	4288      	cmp	r0, r1
   80822:	d815      	bhi.n	80850 <sensor_read+0x5c>
		{
			distance = 30;
		}
		else if(sensor_value < 1890 && sensor_value >= 1850)
   80824:	f2a0 733a 	subw	r3, r0, #1850	; 0x73a
   80828:	b29a      	uxth	r2, r3
   8082a:	2a27      	cmp	r2, #39	; 0x27
   8082c:	d913      	bls.n	80856 <sensor_read+0x62>
		{
			distance = 35;
		}
		else if(sensor_value < 1850 && sensor_value >= 1780)
   8082e:	f2a0 61f4 	subw	r1, r0, #1780	; 0x6f4
   80832:	b28b      	uxth	r3, r1
   80834:	2b45      	cmp	r3, #69	; 0x45
   80836:	d911      	bls.n	8085c <sensor_read+0x68>
		{
			distance = 40;
		}
		else if(sensor_value < 1780 && sensor_value >= 1690)
   80838:	f2a0 629a 	subw	r2, r0, #1690	; 0x69a
   8083c:	b291      	uxth	r1, r2
   8083e:	2959      	cmp	r1, #89	; 0x59
   80840:	d90f      	bls.n	80862 <sensor_read+0x6e>
* 40-35cm = 1510
* 35-30cm = 1380	max value
*/
uint16_t sensor_read(void)
{
	uint16_t distance = 0;	
   80842:	f240 6399 	movw	r3, #1689	; 0x699
   80846:	4298      	cmp	r0, r3
   80848:	bf94      	ite	ls
   8084a:	2032      	movls	r0, #50	; 0x32
   8084c:	2000      	movhi	r0, #0
   8084e:	bd10      	pop	{r4, pc}
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
		//printf("sensor: %d\n", sensor_value);
	
		if(sensor_value > 1890)
		{
			distance = 30;
   80850:	f04f 001e 	mov.w	r0, #30
   80854:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 1890 && sensor_value >= 1850)
		{
			distance = 35;
   80856:	f04f 0023 	mov.w	r0, #35	; 0x23
   8085a:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 1850 && sensor_value >= 1780)
		{
			distance = 40;
   8085c:	f04f 0028 	mov.w	r0, #40	; 0x28
   80860:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 1780 && sensor_value >= 1690)
		{
			distance = 45;
   80862:	f04f 002d 	mov.w	r0, #45	; 0x2d
		//printf("Sensor value: %d, Distance: %d\n", sensor_value, distance);
		return distance;
		
	}
	
}
   80866:	bd10      	pop	{r4, pc}

00080868 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8086c:	460c      	mov	r4, r1
   8086e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80870:	bb48      	cbnz	r0, 808c6 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   80872:	2a00      	cmp	r2, #0
   80874:	dd2b      	ble.n	808ce <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   80876:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80878:	f64a 3674 	movw	r6, #43892	; 0xab74
   8087c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80880:	f64a 356c 	movw	r5, #43884	; 0xab6c
   80884:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80888:	ea6f 0901 	mvn.w	r9, r1
   8088c:	eb07 0009 	add.w	r0, r7, r9
   80890:	f000 0901 	and.w	r9, r0, #1
   80894:	6830      	ldr	r0, [r6, #0]
   80896:	682b      	ldr	r3, [r5, #0]
   80898:	4798      	blx	r3
		ptr++;
   8089a:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8089e:	42bc      	cmp	r4, r7
   808a0:	d119      	bne.n	808d6 <_read+0x6e>
   808a2:	e00d      	b.n	808c0 <_read+0x58>
		ptr_get(stdio_base, ptr);
   808a4:	6830      	ldr	r0, [r6, #0]
   808a6:	682b      	ldr	r3, [r5, #0]
   808a8:	4621      	mov	r1, r4
   808aa:	4798      	blx	r3
		ptr++;
   808ac:	f104 0401 	add.w	r4, r4, #1
   808b0:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   808b2:	6830      	ldr	r0, [r6, #0]
   808b4:	682a      	ldr	r2, [r5, #0]
   808b6:	4790      	blx	r2
		ptr++;
   808b8:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   808bc:	42bc      	cmp	r4, r7
   808be:	d1f1      	bne.n	808a4 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   808c0:	4640      	mov	r0, r8
   808c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   808c6:	f04f 30ff 	mov.w	r0, #4294967295
   808ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   808ce:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   808d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   808d6:	f1b9 0f00 	cmp.w	r9, #0
   808da:	d0e3      	beq.n	808a4 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   808dc:	6830      	ldr	r0, [r6, #0]
   808de:	682a      	ldr	r2, [r5, #0]
   808e0:	4621      	mov	r1, r4
   808e2:	4790      	blx	r2
		ptr++;
   808e4:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   808e8:	42bc      	cmp	r4, r7
   808ea:	d1db      	bne.n	808a4 <_read+0x3c>
   808ec:	e7e8      	b.n	808c0 <_read+0x58>
   808ee:	bf00      	nop

000808f0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   808f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   808f4:	460d      	mov	r5, r1
   808f6:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   808f8:	f100 30ff 	add.w	r0, r0, #4294967295
   808fc:	2802      	cmp	r0, #2
   808fe:	d824      	bhi.n	8094a <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   80900:	b332      	cbz	r2, 80950 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80902:	f64a 3674 	movw	r6, #43892	; 0xab74
   80906:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8090a:	f64a 3770 	movw	r7, #43888	; 0xab70
   8090e:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80912:	f04f 0400 	mov.w	r4, #0
   80916:	f102 39ff 	add.w	r9, r2, #4294967295
   8091a:	f009 0901 	and.w	r9, r9, #1
   8091e:	6830      	ldr	r0, [r6, #0]
   80920:	683b      	ldr	r3, [r7, #0]
   80922:	5d09      	ldrb	r1, [r1, r4]
   80924:	4798      	blx	r3
   80926:	42a0      	cmp	r0, r4
   80928:	da1a      	bge.n	80960 <_write+0x70>
   8092a:	e014      	b.n	80956 <_write+0x66>
   8092c:	6830      	ldr	r0, [r6, #0]
   8092e:	683b      	ldr	r3, [r7, #0]
   80930:	5d29      	ldrb	r1, [r5, r4]
   80932:	4798      	blx	r3
   80934:	2800      	cmp	r0, #0
   80936:	db0e      	blt.n	80956 <_write+0x66>
			return -1;
		}
		++nChars;
   80938:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8093c:	6830      	ldr	r0, [r6, #0]
   8093e:	683a      	ldr	r2, [r7, #0]
   80940:	5d29      	ldrb	r1, [r5, r4]
   80942:	4790      	blx	r2
   80944:	2800      	cmp	r0, #0
   80946:	da1d      	bge.n	80984 <_write+0x94>
   80948:	e005      	b.n	80956 <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8094a:	f04f 34ff 	mov.w	r4, #4294967295
   8094e:	e004      	b.n	8095a <_write+0x6a>
	}

	for (; len != 0; --len) {
   80950:	f04f 0400 	mov.w	r4, #0
   80954:	e001      	b.n	8095a <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80956:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8095a:	4620      	mov	r0, r4
   8095c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80960:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80964:	45a0      	cmp	r8, r4
   80966:	d0f8      	beq.n	8095a <_write+0x6a>
   80968:	f1b9 0f00 	cmp.w	r9, #0
   8096c:	d0de      	beq.n	8092c <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8096e:	6830      	ldr	r0, [r6, #0]
   80970:	683a      	ldr	r2, [r7, #0]
   80972:	5d29      	ldrb	r1, [r5, r4]
   80974:	4790      	blx	r2
   80976:	2800      	cmp	r0, #0
   80978:	dbed      	blt.n	80956 <_write+0x66>
			return -1;
		}
		++nChars;
   8097a:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8097e:	45a0      	cmp	r8, r4
   80980:	d1d4      	bne.n	8092c <_write+0x3c>
   80982:	e7ea      	b.n	8095a <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80984:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80988:	45a0      	cmp	r8, r4
   8098a:	d1cf      	bne.n	8092c <_write+0x3c>
   8098c:	e7e5      	b.n	8095a <_write+0x6a>
   8098e:	bf00      	nop

00080990 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80990:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80992:	f641 2350 	movw	r3, #6736	; 0x1a50
   80996:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8099a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8099e:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   809a0:	f04f 000b 	mov.w	r0, #11
   809a4:	f241 0431 	movw	r4, #4145	; 0x1031
   809a8:	f2c0 0408 	movt	r4, #8
   809ac:	47a0      	blx	r4
   809ae:	f04f 000c 	mov.w	r0, #12
   809b2:	47a0      	blx	r4
   809b4:	f04f 000d 	mov.w	r0, #13
   809b8:	47a0      	blx	r4
   809ba:	f04f 000e 	mov.w	r0, #14
   809be:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   809c0:	f04f 003b 	mov.w	r0, #59	; 0x3b
   809c4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809c8:	f640 4465 	movw	r4, #3173	; 0xc65
   809cc:	f2c0 0408 	movt	r4, #8
   809d0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   809d2:	f04f 0055 	mov.w	r0, #85	; 0x55
   809d6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809da:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   809dc:	f04f 0056 	mov.w	r0, #86	; 0x56
   809e0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809e4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   809e6:	f04f 0068 	mov.w	r0, #104	; 0x68
   809ea:	f04f 0179 	mov.w	r1, #121	; 0x79
   809ee:	f6c2 0100 	movt	r1, #10240	; 0x2800
   809f2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   809f4:	f04f 005c 	mov.w	r0, #92	; 0x5c
   809f8:	f04f 0101 	mov.w	r1, #1
   809fc:	f6c2 0100 	movt	r1, #10240	; 0x2800
   80a00:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80a02:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80a06:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80a0a:	f44f 7140 	mov.w	r1, #768	; 0x300
   80a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80a12:	f640 5365 	movw	r3, #3429	; 0xd65
   80a16:	f2c0 0308 	movt	r3, #8
   80a1a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80a1c:	f04f 002b 	mov.w	r0, #43	; 0x2b
   80a20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a24:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80a26:	f04f 002a 	mov.w	r0, #42	; 0x2a
   80a2a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a2e:	47a0      	blx	r4
   80a30:	bd10      	pop	{r4, pc}
   80a32:	bf00      	nop

00080a34 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const uint8_t uc_startup)
{
   80a34:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80a36:	f04f 0401 	mov.w	r4, #1
   80a3a:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80a3c:	f04f 0400 	mov.w	r4, #0
   80a40:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80a42:	f240 2502 	movw	r5, #514	; 0x202
   80a46:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80a4a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80a4e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80a52:	6845      	ldr	r5, [r0, #4]
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80a54:	ea4f 0242 	mov.w	r2, r2, lsl #1
   80a58:	fbb1 f1f2 	udiv	r1, r1, r2
   80a5c:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80a60:	ea4f 6102 	mov.w	r1, r2, lsl #24
			((uc_startup << ADC_MR_STARTUP_Pos) &
   80a64:	ea4f 4303 	mov.w	r3, r3, lsl #16
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80a68:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
   80a6c:	ea42 4111 	orr.w	r1, r2, r1, lsr #16
   80a70:	430d      	orrs	r5, r1
   80a72:	6045      	str	r5, [r0, #4]
			((uc_startup << ADC_MR_STARTUP_Pos) &
			ADC_MR_STARTUP_Msk);
	return 0;
}
   80a74:	4620      	mov	r0, r4
   80a76:	bc30      	pop	{r4, r5}
   80a78:	4770      	bx	lr
   80a7a:	bf00      	nop

00080a7c <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   80a7c:	6843      	ldr	r3, [r0, #4]
   80a7e:	ea4f 1101 	mov.w	r1, r1, lsl #4
   80a82:	f001 0210 	and.w	r2, r1, #16
   80a86:	4313      	orrs	r3, r2
   80a88:	6043      	str	r3, [r0, #4]
   80a8a:	4770      	bx	lr

00080a8c <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80a8c:	6843      	ldr	r3, [r0, #4]
   80a8e:	4319      	orrs	r1, r3
   80a90:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   80a94:	b2d3      	uxtb	r3, r2
   80a96:	4319      	orrs	r1, r3
   80a98:	6041      	str	r1, [r0, #4]
   80a9a:	4770      	bx	lr

00080a9c <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80a9c:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80a9e:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80aa0:	4322      	orrs	r2, r4
   80aa2:	ea4f 6101 	mov.w	r1, r1, lsl #24
   80aa6:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   80aaa:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80aac:	ea4f 7303 	mov.w	r3, r3, lsl #28
   80ab0:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   80ab4:	430a      	orrs	r2, r1
   80ab6:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80ab8:	bc10      	pop	{r4}
   80aba:	4770      	bx	lr

00080abc <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80abc:	f04f 0302 	mov.w	r3, #2
   80ac0:	6003      	str	r3, [r0, #0]
   80ac2:	4770      	bx	lr

00080ac4 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80ac4:	f04f 0301 	mov.w	r3, #1
   80ac8:	fa03 f101 	lsl.w	r1, r3, r1
   80acc:	6101      	str	r1, [r0, #16]
   80ace:	4770      	bx	lr

00080ad0 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   80ad0:	290f      	cmp	r1, #15
   80ad2:	d804      	bhi.n	80ade <adc_get_channel_value+0xe>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   80ad4:	f101 0114 	add.w	r1, r1, #20
   80ad8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   80adc:	4770      	bx	lr
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   80ade:	f04f 0000 	mov.w	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   80ae2:	4770      	bx	lr

00080ae4 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ae4:	b10a      	cbz	r2, 80aea <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   80ae6:	6641      	str	r1, [r0, #100]	; 0x64
   80ae8:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80aea:	6601      	str	r1, [r0, #96]	; 0x60
   80aec:	4770      	bx	lr
   80aee:	bf00      	nop

00080af0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80af0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80af2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80af6:	d016      	beq.n	80b26 <pio_set_peripheral+0x36>
   80af8:	d804      	bhi.n	80b04 <pio_set_peripheral+0x14>
   80afa:	b1c9      	cbz	r1, 80b30 <pio_set_peripheral+0x40>
   80afc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80b00:	d115      	bne.n	80b2e <pio_set_peripheral+0x3e>
   80b02:	e009      	b.n	80b18 <pio_set_peripheral+0x28>
   80b04:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80b08:	d012      	beq.n	80b30 <pio_set_peripheral+0x40>
   80b0a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80b0e:	d00f      	beq.n	80b30 <pio_set_peripheral+0x40>
   80b10:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80b14:	d10b      	bne.n	80b2e <pio_set_peripheral+0x3e>
   80b16:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80b18:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80b1a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80b1c:	400b      	ands	r3, r1
   80b1e:	ea23 0302 	bic.w	r3, r3, r2
   80b22:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80b24:	e003      	b.n	80b2e <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80b26:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80b28:	ea42 0103 	orr.w	r1, r2, r3
   80b2c:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80b2e:	6042      	str	r2, [r0, #4]
   80b30:	4770      	bx	lr
   80b32:	bf00      	nop

00080b34 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80b34:	6441      	str	r1, [r0, #68]	; 0x44
   80b36:	4770      	bx	lr

00080b38 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b3a:	4604      	mov	r4, r0
   80b3c:	460d      	mov	r5, r1
   80b3e:	4616      	mov	r6, r2
   80b40:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   80b42:	f640 3335 	movw	r3, #2869	; 0xb35
   80b46:	f2c0 0308 	movt	r3, #8
   80b4a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80b4c:	4620      	mov	r0, r4
   80b4e:	4629      	mov	r1, r5
   80b50:	9a06      	ldr	r2, [sp, #24]
   80b52:	f640 23e5 	movw	r3, #2789	; 0xae5
   80b56:	f2c0 0308 	movt	r3, #8
   80b5a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80b5c:	b10f      	cbz	r7, 80b62 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   80b5e:	6525      	str	r5, [r4, #80]	; 0x50
   80b60:	e000      	b.n	80b64 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80b62:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80b64:	b10e      	cbz	r6, 80b6a <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   80b66:	6325      	str	r5, [r4, #48]	; 0x30
   80b68:	e000      	b.n	80b6c <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80b6a:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80b6c:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   80b6e:	6025      	str	r5, [r4, #0]
   80b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b72:	bf00      	nop

00080b74 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80b74:	b570      	push	{r4, r5, r6, lr}
   80b76:	4604      	mov	r4, r0
   80b78:	460d      	mov	r5, r1
   80b7a:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   80b7c:	f640 3335 	movw	r3, #2869	; 0xb35
   80b80:	f2c0 0308 	movt	r3, #8
   80b84:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   80b86:	4620      	mov	r0, r4
   80b88:	4629      	mov	r1, r5
   80b8a:	f006 0201 	and.w	r2, r6, #1
   80b8e:	f640 23e5 	movw	r3, #2789	; 0xae5
   80b92:	f2c0 0308 	movt	r3, #8
   80b96:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80b98:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   80b9c:	bf14      	ite	ne
   80b9e:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80ba0:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80ba2:	f016 0f02 	tst.w	r6, #2
   80ba6:	d002      	beq.n	80bae <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   80ba8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   80bac:	e004      	b.n	80bb8 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80bae:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   80bb2:	bf18      	it	ne
   80bb4:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80bb8:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   80bba:	6025      	str	r5, [r4, #0]
   80bbc:	bd70      	pop	{r4, r5, r6, pc}
   80bbe:	bf00      	nop

00080bc0 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
   80bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   80bc2:	b083      	sub	sp, #12
   80bc4:	4607      	mov	r7, r0
   80bc6:	460c      	mov	r4, r1
   80bc8:	4616      	mov	r6, r2
   80bca:	461d      	mov	r5, r3
	/* Configure pins */
	switch (ul_type) {
   80bcc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80bd0:	d022      	beq.n	80c18 <pio_configure+0x58>
   80bd2:	d806      	bhi.n	80be2 <pio_configure+0x22>
   80bd4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80bd8:	d00a      	beq.n	80bf0 <pio_configure+0x30>
   80bda:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80bde:	d139      	bne.n	80c54 <pio_configure+0x94>
   80be0:	e006      	b.n	80bf0 <pio_configure+0x30>
   80be2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80be6:	d021      	beq.n	80c2c <pio_configure+0x6c>
   80be8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80bec:	d132      	bne.n	80c54 <pio_configure+0x94>
   80bee:	e01d      	b.n	80c2c <pio_configure+0x6c>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
   80bf0:	4638      	mov	r0, r7
   80bf2:	4621      	mov	r1, r4
   80bf4:	4632      	mov	r2, r6
   80bf6:	f640 23f1 	movw	r3, #2801	; 0xaf1
   80bfa:	f2c0 0308 	movt	r3, #8
   80bfe:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
   80c00:	4638      	mov	r0, r7
   80c02:	4631      	mov	r1, r6
   80c04:	f005 0201 	and.w	r2, r5, #1
   80c08:	f640 23e5 	movw	r3, #2789	; 0xae5
   80c0c:	f2c0 0308 	movt	r3, #8
   80c10:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80c12:	f04f 0001 	mov.w	r0, #1
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;
   80c16:	e01f      	b.n	80c58 <pio_configure+0x98>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
   80c18:	4611      	mov	r1, r2
   80c1a:	461a      	mov	r2, r3
   80c1c:	f640 3375 	movw	r3, #2933	; 0xb75
   80c20:	f2c0 0308 	movt	r3, #8
   80c24:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80c26:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
   80c2a:	e015      	b.n	80c58 <pio_configure+0x98>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
   80c2c:	f005 0001 	and.w	r0, r5, #1
   80c30:	9000      	str	r0, [sp, #0]
   80c32:	4638      	mov	r0, r7
   80c34:	4631      	mov	r1, r6
   80c36:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80c3a:	bf14      	ite	ne
   80c3c:	2200      	movne	r2, #0
   80c3e:	2201      	moveq	r2, #1
   80c40:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80c44:	f640 3439 	movw	r4, #2873	; 0xb39
   80c48:	f2c0 0408 	movt	r4, #8
   80c4c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80c4e:	f04f 0001 	mov.w	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
   80c52:	e001      	b.n	80c58 <pio_configure+0x98>

	default:
		return 0;
   80c54:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80c58:	b003      	add	sp, #12
   80c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080c5c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80c5c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80c5e:	4770      	bx	lr

00080c60 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80c60:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80c62:	4770      	bx	lr

00080c64 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c66:	b083      	sub	sp, #12
   80c68:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80c6a:	ea4f 1650 	mov.w	r6, r0, lsr #5
   80c6e:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   80c72:	f201 7207 	addw	r2, r1, #1799	; 0x707
   80c76:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80c7a:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   80c7e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80c82:	d042      	beq.n	80d0a <pio_configure_pin+0xa6>
   80c84:	d806      	bhi.n	80c94 <pio_configure_pin+0x30>
   80c86:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80c8a:	d00a      	beq.n	80ca2 <pio_configure_pin+0x3e>
   80c8c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80c90:	d164      	bne.n	80d5c <pio_configure_pin+0xf8>
   80c92:	e020      	b.n	80cd6 <pio_configure_pin+0x72>
   80c94:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80c98:	d046      	beq.n	80d28 <pio_configure_pin+0xc4>
   80c9a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80c9e:	d15d      	bne.n	80d5c <pio_configure_pin+0xf8>
   80ca0:	e042      	b.n	80d28 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80ca2:	f000 071f 	and.w	r7, r0, #31
   80ca6:	f04f 0401 	mov.w	r4, #1
   80caa:	fa04 f707 	lsl.w	r7, r4, r7
   80cae:	4630      	mov	r0, r6
   80cb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80cb4:	463a      	mov	r2, r7
   80cb6:	f640 23f1 	movw	r3, #2801	; 0xaf1
   80cba:	f2c0 0308 	movt	r3, #8
   80cbe:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80cc0:	4630      	mov	r0, r6
   80cc2:	4639      	mov	r1, r7
   80cc4:	ea05 0204 	and.w	r2, r5, r4
   80cc8:	f640 23e5 	movw	r3, #2789	; 0xae5
   80ccc:	f2c0 0308 	movt	r3, #8
   80cd0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80cd2:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80cd4:	e044      	b.n	80d60 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80cd6:	f000 001f 	and.w	r0, r0, #31
   80cda:	f04f 0401 	mov.w	r4, #1
   80cde:	fa04 f700 	lsl.w	r7, r4, r0
   80ce2:	4630      	mov	r0, r6
   80ce4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ce8:	463a      	mov	r2, r7
   80cea:	f640 23f1 	movw	r3, #2801	; 0xaf1
   80cee:	f2c0 0308 	movt	r3, #8
   80cf2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80cf4:	4630      	mov	r0, r6
   80cf6:	4639      	mov	r1, r7
   80cf8:	ea05 0204 	and.w	r2, r5, r4
   80cfc:	f640 23e5 	movw	r3, #2789	; 0xae5
   80d00:	f2c0 0308 	movt	r3, #8
   80d04:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80d06:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80d08:	e02a      	b.n	80d60 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80d0a:	f000 021f 	and.w	r2, r0, #31
   80d0e:	f04f 0401 	mov.w	r4, #1
   80d12:	4630      	mov	r0, r6
   80d14:	fa04 f102 	lsl.w	r1, r4, r2
   80d18:	462a      	mov	r2, r5
   80d1a:	f640 3375 	movw	r3, #2933	; 0xb75
   80d1e:	f2c0 0308 	movt	r3, #8
   80d22:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80d24:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80d26:	e01b      	b.n	80d60 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80d28:	f000 021f 	and.w	r2, r0, #31
   80d2c:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80d30:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80d34:	ea05 0104 	and.w	r1, r5, r4
   80d38:	9100      	str	r1, [sp, #0]
   80d3a:	4630      	mov	r0, r6
   80d3c:	fa04 f102 	lsl.w	r1, r4, r2
   80d40:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80d44:	bf14      	ite	ne
   80d46:	2200      	movne	r2, #0
   80d48:	2201      	moveq	r2, #1
   80d4a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80d4e:	f640 3539 	movw	r5, #2873	; 0xb39
   80d52:	f2c0 0508 	movt	r5, #8
   80d56:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80d58:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80d5a:	e001      	b.n	80d60 <pio_configure_pin+0xfc>

	default:
		return 0;
   80d5c:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80d60:	b003      	add	sp, #12
   80d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080d64 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   80d66:	b083      	sub	sp, #12
   80d68:	4607      	mov	r7, r0
   80d6a:	460e      	mov	r6, r1
   80d6c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80d6e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80d72:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80d76:	d036      	beq.n	80de6 <pio_configure_pin_group+0x82>
   80d78:	d806      	bhi.n	80d88 <pio_configure_pin_group+0x24>
   80d7a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80d7e:	d00a      	beq.n	80d96 <pio_configure_pin_group+0x32>
   80d80:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80d84:	d14d      	bne.n	80e22 <pio_configure_pin_group+0xbe>
   80d86:	e01a      	b.n	80dbe <pio_configure_pin_group+0x5a>
   80d88:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80d8c:	d033      	beq.n	80df6 <pio_configure_pin_group+0x92>
   80d8e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80d92:	d146      	bne.n	80e22 <pio_configure_pin_group+0xbe>
   80d94:	e02f      	b.n	80df6 <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80d96:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d9a:	4632      	mov	r2, r6
   80d9c:	f640 23f1 	movw	r3, #2801	; 0xaf1
   80da0:	f2c0 0308 	movt	r3, #8
   80da4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80da6:	4638      	mov	r0, r7
   80da8:	4631      	mov	r1, r6
   80daa:	f005 0201 	and.w	r2, r5, #1
   80dae:	f640 23e5 	movw	r3, #2789	; 0xae5
   80db2:	f2c0 0308 	movt	r3, #8
   80db6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80db8:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80dbc:	e033      	b.n	80e26 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80dbe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80dc2:	4632      	mov	r2, r6
   80dc4:	f640 23f1 	movw	r3, #2801	; 0xaf1
   80dc8:	f2c0 0308 	movt	r3, #8
   80dcc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80dce:	4638      	mov	r0, r7
   80dd0:	4631      	mov	r1, r6
   80dd2:	f005 0201 	and.w	r2, r5, #1
   80dd6:	f640 23e5 	movw	r3, #2789	; 0xae5
   80dda:	f2c0 0308 	movt	r3, #8
   80dde:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80de0:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80de4:	e01f      	b.n	80e26 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80de6:	f640 3375 	movw	r3, #2933	; 0xb75
   80dea:	f2c0 0308 	movt	r3, #8
   80dee:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80df0:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80df4:	e017      	b.n	80e26 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80df6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80dfa:	f005 0001 	and.w	r0, r5, #1
   80dfe:	9000      	str	r0, [sp, #0]
   80e00:	4638      	mov	r0, r7
   80e02:	4631      	mov	r1, r6
   80e04:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80e08:	bf14      	ite	ne
   80e0a:	2200      	movne	r2, #0
   80e0c:	2201      	moveq	r2, #1
   80e0e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80e12:	f640 3439 	movw	r4, #2873	; 0xb39
   80e16:	f2c0 0408 	movt	r4, #8
   80e1a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80e1c:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80e20:	e001      	b.n	80e26 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   80e22:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80e26:	b003      	add	sp, #12
   80e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80e2a:	bf00      	nop

00080e2c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e2e:	4604      	mov	r4, r0
   80e30:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80e32:	f640 435d 	movw	r3, #3165	; 0xc5d
   80e36:	f2c0 0308 	movt	r3, #8
   80e3a:	4798      	blx	r3
   80e3c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80e3e:	4620      	mov	r0, r4
   80e40:	f640 4161 	movw	r1, #3169	; 0xc61
   80e44:	f2c0 0108 	movt	r1, #8
   80e48:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   80e4a:	4005      	ands	r5, r0
   80e4c:	d014      	beq.n	80e78 <pio_handler_process+0x4c>
   80e4e:	4c0b      	ldr	r4, [pc, #44]	; (80e7c <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   80e50:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80e52:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   80e56:	42b0      	cmp	r0, r6
   80e58:	d10a      	bne.n	80e70 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80e5a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80e5e:	4229      	tst	r1, r5
   80e60:	d006      	beq.n	80e70 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80e62:	6822      	ldr	r2, [r4, #0]
   80e64:	4630      	mov	r0, r6
   80e66:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80e68:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80e6c:	ea25 0503 	bic.w	r5, r5, r3
   80e70:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80e74:	2d00      	cmp	r5, #0
   80e76:	d1eb      	bne.n	80e50 <pio_handler_process+0x24>
   80e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80e7a:	bf00      	nop
   80e7c:	20070958 	.word	0x20070958

00080e80 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80e80:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80e82:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80e86:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80e8a:	f04f 010b 	mov.w	r1, #11
   80e8e:	f640 632d 	movw	r3, #3629	; 0xe2d
   80e92:	f2c0 0308 	movt	r3, #8
   80e96:	4798      	blx	r3
   80e98:	bd08      	pop	{r3, pc}
   80e9a:	bf00      	nop

00080e9c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80e9c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80e9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80ea2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ea6:	f04f 010c 	mov.w	r1, #12
   80eaa:	f640 632d 	movw	r3, #3629	; 0xe2d
   80eae:	f2c0 0308 	movt	r3, #8
   80eb2:	4798      	blx	r3
   80eb4:	bd08      	pop	{r3, pc}
   80eb6:	bf00      	nop

00080eb8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80eb8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80eba:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80ebe:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ec2:	f04f 010d 	mov.w	r1, #13
   80ec6:	f640 632d 	movw	r3, #3629	; 0xe2d
   80eca:	f2c0 0308 	movt	r3, #8
   80ece:	4798      	blx	r3
   80ed0:	bd08      	pop	{r3, pc}
   80ed2:	bf00      	nop

00080ed4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80ed4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80ed6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   80eda:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ede:	f04f 010e 	mov.w	r1, #14
   80ee2:	f640 632d 	movw	r3, #3629	; 0xe2d
   80ee6:	f2c0 0308 	movt	r3, #8
   80eea:	4798      	blx	r3
   80eec:	bd08      	pop	{r3, pc}
   80eee:	bf00      	nop

00080ef0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80ef0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80ef4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80efa:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80efe:	4308      	orrs	r0, r1
   80f00:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f02:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80f04:	f010 0f08 	tst.w	r0, #8
   80f08:	d007      	beq.n	80f1a <pmc_switch_mck_to_pllack+0x2a>
   80f0a:	e010      	b.n	80f2e <pmc_switch_mck_to_pllack+0x3e>
   80f0c:	f100 33ff 	add.w	r3, r0, #4294967295
   80f10:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80f12:	f010 0f08 	tst.w	r0, #8
   80f16:	d038      	beq.n	80f8a <pmc_switch_mck_to_pllack+0x9a>
   80f18:	e009      	b.n	80f2e <pmc_switch_mck_to_pllack+0x3e>
   80f1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80f1e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80f22:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f26:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80f28:	f011 0f08 	tst.w	r1, #8
   80f2c:	d0ee      	beq.n	80f0c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80f2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80f32:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80f36:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80f38:	f022 0303 	bic.w	r3, r2, #3
   80f3c:	f043 0002 	orr.w	r0, r3, #2
   80f40:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f42:	6e89      	ldr	r1, [r1, #104]	; 0x68
   80f44:	f011 0f08 	tst.w	r1, #8
   80f48:	d009      	beq.n	80f5e <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	4770      	bx	lr
   80f50:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f54:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80f56:	f011 0f08 	tst.w	r1, #8
   80f5a:	d013      	beq.n	80f84 <pmc_switch_mck_to_pllack+0x94>
   80f5c:	e009      	b.n	80f72 <pmc_switch_mck_to_pllack+0x82>
   80f5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80f62:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80f66:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f6a:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80f6c:	f010 0f08 	tst.w	r0, #8
   80f70:	d0ee      	beq.n	80f50 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80f72:	f04f 0000 	mov.w	r0, #0
   80f76:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80f78:	f04f 0001 	mov.w	r0, #1
   80f7c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80f7e:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80f82:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80f84:	3b01      	subs	r3, #1
   80f86:	d1f0      	bne.n	80f6a <pmc_switch_mck_to_pllack+0x7a>
   80f88:	e7f9      	b.n	80f7e <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80f8a:	1e58      	subs	r0, r3, #1
   80f8c:	d1cb      	bne.n	80f26 <pmc_switch_mck_to_pllack+0x36>
   80f8e:	e7f3      	b.n	80f78 <pmc_switch_mck_to_pllack+0x88>

00080f90 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80f90:	b188      	cbz	r0, 80fb6 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80f92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80f96:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80f9a:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80f9c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80fa0:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80fa4:	4002      	ands	r2, r0
   80fa6:	f04f 0302 	mov.w	r3, #2
   80faa:	f2c0 1337 	movt	r3, #311	; 0x137
   80fae:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80fb2:	6208      	str	r0, [r1, #32]
   80fb4:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80fb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80fba:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80fbe:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80fc0:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80fc4:	f020 0203 	bic.w	r2, r0, #3
   80fc8:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80fcc:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80fd0:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80fd4:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80fd8:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80fda:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80fde:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80fe2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80fe4:	f013 0f01 	tst.w	r3, #1
   80fe8:	d0fb      	beq.n	80fe2 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80fea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80fee:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80ff2:	6a08      	ldr	r0, [r1, #32]
   80ff4:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80ff8:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80ffc:	620b      	str	r3, [r1, #32]
   80ffe:	4770      	bx	lr

00081000 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81000:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81004:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81008:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8100a:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8100e:	4770      	bx	lr

00081010 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81010:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81014:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81018:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8101c:	629a      	str	r2, [r3, #40]	; 0x28
   8101e:	4770      	bx	lr

00081020 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81020:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81024:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81028:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8102a:	f000 0002 	and.w	r0, r0, #2
   8102e:	4770      	bx	lr

00081030 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81030:	282c      	cmp	r0, #44	; 0x2c
   81032:	d835      	bhi.n	810a0 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   81034:	281f      	cmp	r0, #31
   81036:	d817      	bhi.n	81068 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81038:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8103c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81040:	698a      	ldr	r2, [r1, #24]
   81042:	f04f 0301 	mov.w	r3, #1
   81046:	fa03 f300 	lsl.w	r3, r3, r0
   8104a:	401a      	ands	r2, r3
   8104c:	4293      	cmp	r3, r2
   8104e:	d02a      	beq.n	810a6 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   81050:	f04f 0101 	mov.w	r1, #1
   81054:	fa01 f000 	lsl.w	r0, r1, r0
   81058:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8105c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81060:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81062:	f04f 0000 	mov.w	r0, #0
   81066:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81068:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8106c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81070:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   81074:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81078:	f04f 0101 	mov.w	r1, #1
   8107c:	fa01 f100 	lsl.w	r1, r1, r0
   81080:	400a      	ands	r2, r1
   81082:	4291      	cmp	r1, r2
   81084:	d012      	beq.n	810ac <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   81086:	f04f 0301 	mov.w	r3, #1
   8108a:	fa03 f000 	lsl.w	r0, r3, r0
   8108e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   81092:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81096:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8109a:	f04f 0000 	mov.w	r0, #0
   8109e:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   810a0:	f04f 0001 	mov.w	r0, #1
   810a4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   810a6:	f04f 0000 	mov.w	r0, #0
   810aa:	4770      	bx	lr
   810ac:	f04f 0000 	mov.w	r0, #0
}
   810b0:	4770      	bx	lr
   810b2:	bf00      	nop

000810b4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for SAM3N)
 * or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   810b4:	b4f0      	push	{r4, r5, r6, r7}
   810b6:	b08c      	sub	sp, #48	; 0x30
   810b8:	4606      	mov	r6, r0
   810ba:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   810bc:	ac01      	add	r4, sp, #4
   810be:	f24a 65bc 	movw	r5, #42684	; 0xa6bc
   810c2:	f2c0 0508 	movt	r5, #8
   810c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   810c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   810ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   810cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   810ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   810d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   810d6:	9b01      	ldr	r3, [sp, #4]
   810d8:	fbb7 f0f3 	udiv	r0, r7, r3
   810dc:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   810e0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   810e4:	d952      	bls.n	8118c <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   810e6:	9902      	ldr	r1, [sp, #8]
   810e8:	fbb7 f2f1 	udiv	r2, r7, r1
   810ec:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   810f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   810f4:	d94f      	bls.n	81196 <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   810f6:	9b03      	ldr	r3, [sp, #12]
   810f8:	fbb7 f0f3 	udiv	r0, r7, r3
   810fc:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81100:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81104:	d94a      	bls.n	8119c <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81106:	9904      	ldr	r1, [sp, #16]
   81108:	fbb7 f2f1 	udiv	r2, r7, r1
   8110c:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81110:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81114:	d945      	bls.n	811a2 <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81116:	9b05      	ldr	r3, [sp, #20]
   81118:	fbb7 f0f3 	udiv	r0, r7, r3
   8111c:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81120:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81124:	d940      	bls.n	811a8 <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81126:	9906      	ldr	r1, [sp, #24]
   81128:	fbb7 f2f1 	udiv	r2, r7, r1
   8112c:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81130:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81134:	d93b      	bls.n	811ae <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81136:	9b07      	ldr	r3, [sp, #28]
   81138:	fbb7 f0f3 	udiv	r0, r7, r3
   8113c:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81140:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81144:	d936      	bls.n	811b4 <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81146:	9908      	ldr	r1, [sp, #32]
   81148:	fbb7 f2f1 	udiv	r2, r7, r1
   8114c:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81150:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81154:	d931      	bls.n	811ba <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81156:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81158:	fbb7 f0f3 	udiv	r0, r7, r3
   8115c:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81160:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81164:	d92c      	bls.n	811c0 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81166:	990a      	ldr	r1, [sp, #40]	; 0x28
   81168:	fbb7 f2f1 	udiv	r2, r7, r1
   8116c:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81170:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81174:	d927      	bls.n	811c6 <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81178:	fbb7 f0f3 	udiv	r0, r7, r3
   8117c:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81180:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81184:	d922      	bls.n	811cc <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   81186:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8118a:	e022      	b.n	811d2 <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8118c:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   81190:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   81194:	e01d      	b.n	811d2 <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   81196:	f04f 0201 	mov.w	r2, #1
   8119a:	e7f9      	b.n	81190 <pwm_clocks_generate+0xdc>
   8119c:	f04f 0202 	mov.w	r2, #2
   811a0:	e7f6      	b.n	81190 <pwm_clocks_generate+0xdc>
   811a2:	f04f 0203 	mov.w	r2, #3
   811a6:	e7f3      	b.n	81190 <pwm_clocks_generate+0xdc>
   811a8:	f04f 0204 	mov.w	r2, #4
   811ac:	e7f0      	b.n	81190 <pwm_clocks_generate+0xdc>
   811ae:	f04f 0205 	mov.w	r2, #5
   811b2:	e7ed      	b.n	81190 <pwm_clocks_generate+0xdc>
   811b4:	f04f 0206 	mov.w	r2, #6
   811b8:	e7ea      	b.n	81190 <pwm_clocks_generate+0xdc>
   811ba:	f04f 0207 	mov.w	r2, #7
   811be:	e7e7      	b.n	81190 <pwm_clocks_generate+0xdc>
   811c0:	f04f 0208 	mov.w	r2, #8
   811c4:	e7e4      	b.n	81190 <pwm_clocks_generate+0xdc>
   811c6:	f04f 0209 	mov.w	r2, #9
   811ca:	e7e1      	b.n	81190 <pwm_clocks_generate+0xdc>
   811cc:	f04f 020a 	mov.w	r2, #10
   811d0:	e7de      	b.n	81190 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   811d2:	b00c      	add	sp, #48	; 0x30
   811d4:	bcf0      	pop	{r4, r5, r6, r7}
   811d6:	4770      	bx	lr

000811d8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   811d8:	b570      	push	{r4, r5, r6, lr}
   811da:	4606      	mov	r6, r0
   811dc:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   811de:	6808      	ldr	r0, [r1, #0]
   811e0:	b158      	cbz	r0, 811fa <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   811e2:	6889      	ldr	r1, [r1, #8]
   811e4:	f241 03b5 	movw	r3, #4277	; 0x10b5
   811e8:	f2c0 0308 	movt	r3, #8
   811ec:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   811ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   811f2:	4288      	cmp	r0, r1
   811f4:	d014      	beq.n	81220 <pwm_init+0x48>
			return result;
		}

		clock = result;
   811f6:	4605      	mov	r5, r0
   811f8:	e001      	b.n	811fe <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   811fa:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   811fe:	6860      	ldr	r0, [r4, #4]
   81200:	b158      	cbz	r0, 8121a <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81202:	68a1      	ldr	r1, [r4, #8]
   81204:	f241 02b5 	movw	r2, #4277	; 0x10b5
   81208:	f2c0 0208 	movt	r2, #8
   8120c:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   8120e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81212:	4298      	cmp	r0, r3
   81214:	d004      	beq.n	81220 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   81216:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if SAM3N
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8121a:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8121c:	f04f 0000 	mov.w	r0, #0
}
   81220:	bd70      	pop	{r4, r5, r6, pc}
   81222:	bf00      	nop

00081224 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81224:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   81226:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   81228:	f04f 0201 	mov.w	r2, #1
   8122c:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81230:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   81232:	684c      	ldr	r4, [r1, #4]
   81234:	f004 050f 	and.w	r5, r4, #15
   81238:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8123a:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8123c:	4326      	orrs	r6, r4
   8123e:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   81240:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   81244:	7d8c      	ldrb	r4, [r1, #22]
   81246:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8124a:	7dce      	ldrb	r6, [r1, #23]
   8124c:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   81250:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   81252:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   81256:	f103 0510 	add.w	r5, r3, #16
   8125a:	ea4f 1445 	mov.w	r4, r5, lsl #5
   8125e:	1905      	adds	r5, r0, r4
   81260:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   81262:	68cc      	ldr	r4, [r1, #12]
   81264:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   81266:	690c      	ldr	r4, [r1, #16]
   81268:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   8126c:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   81270:	7d8c      	ldrb	r4, [r1, #22]
   81272:	b13c      	cbz	r4, 81284 <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   81274:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   81276:	8b4c      	ldrh	r4, [r1, #26]
   81278:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   8127c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   81280:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   81284:	7fcd      	ldrb	r5, [r1, #31]
   81286:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   8128a:	7f8c      	ldrb	r4, [r1, #30]
   8128c:	fa04 f403 	lsl.w	r4, r4, r3
   81290:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   81294:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   81296:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   8129a:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   8129e:	f891 4020 	ldrb.w	r4, [r1, #32]
   812a2:	fa04 f403 	lsl.w	r4, r4, r3
   812a6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   812aa:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   812ac:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   812b0:	b11c      	cbz	r4, 812ba <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   812b2:	6a04      	ldr	r4, [r0, #32]
   812b4:	4314      	orrs	r4, r2
   812b6:	6204      	str	r4, [r0, #32]
   812b8:	e003      	b.n	812c2 <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   812ba:	6a04      	ldr	r4, [r0, #32]
   812bc:	ea24 0402 	bic.w	r4, r4, r2
   812c0:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   812c2:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   812c6:	2c01      	cmp	r4, #1
   812c8:	d103      	bne.n	812d2 <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   812ca:	6e84      	ldr	r4, [r0, #104]	; 0x68
   812cc:	4314      	orrs	r4, r2
   812ce:	6684      	str	r4, [r0, #104]	; 0x68
   812d0:	e006      	b.n	812e0 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   812d2:	6e84      	ldr	r4, [r0, #104]	; 0x68
   812d4:	2a00      	cmp	r2, #0
   812d6:	bf14      	ite	ne
   812d8:	2400      	movne	r4, #0
   812da:	f004 0401 	andeq.w	r4, r4, #1
   812de:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   812e0:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   812e4:	2c01      	cmp	r4, #1
   812e6:	d104      	bne.n	812f2 <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   812e8:	6e84      	ldr	r4, [r0, #104]	; 0x68
   812ea:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   812ee:	6682      	str	r2, [r0, #104]	; 0x68
   812f0:	e006      	b.n	81300 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   812f2:	6e84      	ldr	r4, [r0, #104]	; 0x68
   812f4:	0412      	lsls	r2, r2, #16
   812f6:	bf14      	ite	ne
   812f8:	2200      	movne	r2, #0
   812fa:	f004 0201 	andeq.w	r2, r4, #1
   812fe:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81300:	2b03      	cmp	r3, #3
   81302:	d80f      	bhi.n	81324 <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   81304:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   81306:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   8130a:	f04f 02ff 	mov.w	r2, #255	; 0xff
   8130e:	fa02 f203 	lsl.w	r2, r2, r3
   81312:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81316:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8131a:	fa01 f303 	lsl.w	r3, r1, r3
   8131e:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81320:	66c2      	str	r2, [r0, #108]	; 0x6c
   81322:	e010      	b.n	81346 <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   81324:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81328:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8132a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   8132e:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81332:	fa02 f203 	lsl.w	r2, r2, r3
   81336:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8133a:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8133e:	fa01 f303 	lsl.w	r3, r1, r3
   81342:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   81344:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   81346:	f04f 0000 	mov.w	r0, #0
   8134a:	bc70      	pop	{r4, r5, r6}
   8134c:	4770      	bx	lr
   8134e:	bf00      	nop

00081350 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   81350:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   81352:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   81354:	690b      	ldr	r3, [r1, #16]
   81356:	4293      	cmp	r3, r2
   81358:	d307      	bcc.n	8136a <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8135a:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   8135c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   81360:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   81364:	f04f 0000 	mov.w	r0, #0
   81368:	e001      	b.n	8136e <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   8136a:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   8136e:	bc10      	pop	{r4}
   81370:	4770      	bx	lr
   81372:	bf00      	nop

00081374 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   81374:	f04f 0301 	mov.w	r3, #1
   81378:	fa03 f101 	lsl.w	r1, r3, r1
   8137c:	6041      	str	r1, [r0, #4]
   8137e:	4770      	bx	lr

00081380 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81380:	f04f 0301 	mov.w	r3, #1
   81384:	fa03 f101 	lsl.w	r1, r3, r1
   81388:	6081      	str	r1, [r0, #8]
   8138a:	4770      	bx	lr

0008138c <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   8138c:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8138e:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81392:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81394:	f04f 0402 	mov.w	r4, #2
   81398:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8139a:	f04f 30ff 	mov.w	r0, #4294967295
   8139e:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   813a0:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   813a2:	605a      	str	r2, [r3, #4]
}
   813a4:	bc10      	pop	{r4}
   813a6:	4770      	bx	lr

000813a8 <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   813a8:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   813ac:	4770      	bx	lr
   813ae:	bf00      	nop

000813b0 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   813b0:	ea4f 1181 	mov.w	r1, r1, lsl #6
   813b4:	f04f 0302 	mov.w	r3, #2
   813b8:	5043      	str	r3, [r0, r1]
   813ba:	4770      	bx	lr

000813bc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   813bc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   813be:	f04f 03ac 	mov.w	r3, #172	; 0xac
   813c2:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   813c4:	680a      	ldr	r2, [r1, #0]
   813c6:	684c      	ldr	r4, [r1, #4]
   813c8:	fbb2 f3f4 	udiv	r3, r2, r4
   813cc:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   813d0:	f103 34ff 	add.w	r4, r3, #4294967295
   813d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   813d8:	4294      	cmp	r4, r2
   813da:	d80c      	bhi.n	813f6 <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   813dc:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   813de:	6889      	ldr	r1, [r1, #8]
   813e0:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   813e2:	f240 2302 	movw	r3, #514	; 0x202
   813e6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   813ea:	f04f 0250 	mov.w	r2, #80	; 0x50
   813ee:	6002      	str	r2, [r0, #0]

	return 0;
   813f0:	f04f 0000 	mov.w	r0, #0
   813f4:	e001      	b.n	813fa <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   813f6:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   813fa:	bc10      	pop	{r4}
   813fc:	4770      	bx	lr
   813fe:	bf00      	nop

00081400 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81400:	6943      	ldr	r3, [r0, #20]
   81402:	f013 0f02 	tst.w	r3, #2
   81406:	d003      	beq.n	81410 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81408:	61c1      	str	r1, [r0, #28]
	return 0;
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81410:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81414:	4770      	bx	lr
   81416:	bf00      	nop

00081418 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81418:	6943      	ldr	r3, [r0, #20]
   8141a:	f013 0f01 	tst.w	r3, #1
   8141e:	d004      	beq.n	8142a <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81420:	6980      	ldr	r0, [r0, #24]
   81422:	7008      	strb	r0, [r1, #0]
	return 0;
   81424:	f04f 0000 	mov.w	r0, #0
   81428:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8142a:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8142e:	4770      	bx	lr

00081430 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81430:	6943      	ldr	r3, [r0, #20]
   81432:	f013 0f02 	tst.w	r3, #2
   81436:	d007      	beq.n	81448 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81438:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   8143c:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   81440:	61c2      	str	r2, [r0, #28]
	return 0;
   81442:	f04f 0000 	mov.w	r0, #0
   81446:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81448:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8144c:	4770      	bx	lr
   8144e:	bf00      	nop

00081450 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81450:	6943      	ldr	r3, [r0, #20]
   81452:	f013 0f01 	tst.w	r3, #1
   81456:	d008      	beq.n	8146a <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81458:	6980      	ldr	r0, [r0, #24]
   8145a:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   8145e:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   81462:	600b      	str	r3, [r1, #0]

	return 0;
   81464:	f04f 0000 	mov.w	r0, #0
   81468:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8146a:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8146e:	4770      	bx	lr

00081470 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81470:	e7fe      	b.n	81470 <Dummy_Handler>
   81472:	bf00      	nop

00081474 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81474:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81476:	f240 0300 	movw	r3, #0
   8147a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8147e:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   81482:	f2c0 0208 	movt	r2, #8
   81486:	429a      	cmp	r2, r3
   81488:	d003      	beq.n	81492 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   8148a:	4840      	ldr	r0, [pc, #256]	; (8158c <Reset_Handler+0x118>)
   8148c:	4940      	ldr	r1, [pc, #256]	; (81590 <Reset_Handler+0x11c>)
   8148e:	4281      	cmp	r1, r0
   81490:	d304      	bcc.n	8149c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81492:	4b40      	ldr	r3, [pc, #256]	; (81594 <Reset_Handler+0x120>)
   81494:	4a40      	ldr	r2, [pc, #256]	; (81598 <Reset_Handler+0x124>)
   81496:	429a      	cmp	r2, r3
   81498:	d325      	bcc.n	814e6 <Reset_Handler+0x72>
   8149a:	e042      	b.n	81522 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   8149c:	4d3f      	ldr	r5, [pc, #252]	; (8159c <Reset_Handler+0x128>)
   8149e:	4c40      	ldr	r4, [pc, #256]	; (815a0 <Reset_Handler+0x12c>)
   814a0:	1b63      	subs	r3, r4, r5
   814a2:	f023 0503 	bic.w	r5, r3, #3
   814a6:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   814aa:	f240 0200 	movw	r2, #0
   814ae:	f2c2 0207 	movt	r2, #8199	; 0x2007
   814b2:	f64a 219c 	movw	r1, #43676	; 0xaa9c
   814b6:	f2c0 0108 	movt	r1, #8
   814ba:	f105 0004 	add.w	r0, r5, #4
   814be:	f3c5 0480 	ubfx	r4, r5, #2, #1
   814c2:	585d      	ldr	r5, [r3, r1]
   814c4:	509d      	str	r5, [r3, r2]
   814c6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   814ca:	4283      	cmp	r3, r0
   814cc:	d155      	bne.n	8157a <Reset_Handler+0x106>
   814ce:	e7e0      	b.n	81492 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   814d0:	585d      	ldr	r5, [r3, r1]
   814d2:	509d      	str	r5, [r3, r2]
   814d4:	f103 0304 	add.w	r3, r3, #4
   814d8:	585c      	ldr	r4, [r3, r1]
   814da:	509c      	str	r4, [r3, r2]
   814dc:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   814e0:	4283      	cmp	r3, r0
   814e2:	d1f5      	bne.n	814d0 <Reset_Handler+0x5c>
   814e4:	e7d5      	b.n	81492 <Reset_Handler+0x1e>
   814e6:	4d2f      	ldr	r5, [pc, #188]	; (815a4 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   814e8:	492f      	ldr	r1, [pc, #188]	; (815a8 <Reset_Handler+0x134>)
   814ea:	1b48      	subs	r0, r1, r5
   814ec:	f020 0403 	bic.w	r4, r0, #3
   814f0:	f640 1300 	movw	r3, #2304	; 0x900
   814f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   814f8:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   814fa:	f04f 0100 	mov.w	r1, #0
   814fe:	1b50      	subs	r0, r2, r5
   81500:	f1a0 0004 	sub.w	r0, r0, #4
   81504:	f3c0 0480 	ubfx	r4, r0, #2, #1
   81508:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8150c:	4295      	cmp	r5, r2
   8150e:	d12d      	bne.n	8156c <Reset_Handler+0xf8>
   81510:	e007      	b.n	81522 <Reset_Handler+0xae>
   81512:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   81516:	6069      	str	r1, [r5, #4]
   81518:	f105 0508 	add.w	r5, r5, #8
   8151c:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8151e:	4295      	cmp	r5, r2
   81520:	d1f7      	bne.n	81512 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81522:	f240 0500 	movw	r5, #0
   81526:	f2c0 0508 	movt	r5, #8
   8152a:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   8152e:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   81532:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   81536:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8153a:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8153c:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   81540:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   81544:	d207      	bcs.n	81556 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81546:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   8154a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8154e:	689d      	ldr	r5, [r3, #8]
   81550:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   81554:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81556:	f643 713d 	movw	r1, #16189	; 0x3f3d
   8155a:	f2c0 0108 	movt	r1, #8
   8155e:	4788      	blx	r1

	/* Branch to main function */
	main();
   81560:	f243 50e5 	movw	r0, #13797	; 0x35e5
   81564:	f2c0 0008 	movt	r0, #8
   81568:	4780      	blx	r0
   8156a:	e7fe      	b.n	8156a <Reset_Handler+0xf6>
   8156c:	2c00      	cmp	r4, #0
   8156e:	d0d0      	beq.n	81512 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81570:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81574:	4295      	cmp	r5, r2
   81576:	d1cc      	bne.n	81512 <Reset_Handler+0x9e>
   81578:	e7d3      	b.n	81522 <Reset_Handler+0xae>
   8157a:	2c00      	cmp	r4, #0
   8157c:	d0a8      	beq.n	814d0 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8157e:	585c      	ldr	r4, [r3, r1]
   81580:	509c      	str	r4, [r3, r2]
   81582:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81586:	4283      	cmp	r3, r0
   81588:	d1a2      	bne.n	814d0 <Reset_Handler+0x5c>
   8158a:	e782      	b.n	81492 <Reset_Handler+0x1e>
   8158c:	20070900 	.word	0x20070900
   81590:	20070000 	.word	0x20070000
   81594:	2007ac7c 	.word	0x2007ac7c
   81598:	20070900 	.word	0x20070900
   8159c:	20070004 	.word	0x20070004
   815a0:	20070903 	.word	0x20070903
   815a4:	200708fc 	.word	0x200708fc
   815a8:	2007ac77 	.word	0x2007ac77

000815ac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   815ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   815b0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   815b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   815b6:	f000 0103 	and.w	r1, r0, #3
   815ba:	2903      	cmp	r1, #3
   815bc:	f200 80b1 	bhi.w	81722 <SystemCoreClockUpdate+0x176>
   815c0:	e8df f001 	tbb	[pc, r1]
   815c4:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   815c8:	f641 2010 	movw	r0, #6672	; 0x1a10
   815cc:	f2c4 000e 	movt	r0, #16398	; 0x400e
   815d0:	6941      	ldr	r1, [r0, #20]
   815d2:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   815d6:	f240 0300 	movw	r3, #0
   815da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   815de:	bf14      	ite	ne
   815e0:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   815e4:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   815e8:	601a      	str	r2, [r3, #0]
   815ea:	e09a      	b.n	81722 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   815ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   815f0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   815f4:	6a18      	ldr	r0, [r3, #32]
   815f6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   815fa:	d009      	beq.n	81610 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   815fc:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   81600:	f2c0 03b7 	movt	r3, #183	; 0xb7
   81604:	f240 0200 	movw	r2, #0
   81608:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8160c:	6013      	str	r3, [r2, #0]
   8160e:	e088      	b.n	81722 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81610:	f44f 6110 	mov.w	r1, #2304	; 0x900
   81614:	f2c0 013d 	movt	r1, #61	; 0x3d
   81618:	f240 0200 	movw	r2, #0
   8161c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81620:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81622:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81626:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8162a:	6a18      	ldr	r0, [r3, #32]
   8162c:	f000 0170 	and.w	r1, r0, #112	; 0x70
   81630:	2910      	cmp	r1, #16
   81632:	d002      	beq.n	8163a <SystemCoreClockUpdate+0x8e>
   81634:	2920      	cmp	r1, #32
   81636:	d174      	bne.n	81722 <SystemCoreClockUpdate+0x176>
   81638:	e009      	b.n	8164e <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8163a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8163e:	f2c0 007a 	movt	r0, #122	; 0x7a
   81642:	f240 0100 	movw	r1, #0
   81646:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8164a:	6008      	str	r0, [r1, #0]
				break;
   8164c:	e069      	b.n	81722 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8164e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   81652:	f2c0 03b7 	movt	r3, #183	; 0xb7
   81656:	f240 0200 	movw	r2, #0
   8165a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8165e:	6013      	str	r3, [r2, #0]
				break;
   81660:	e05f      	b.n	81722 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81662:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   81666:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8166a:	6a13      	ldr	r3, [r2, #32]
   8166c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81670:	d009      	beq.n	81686 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81672:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   81676:	f2c0 01b7 	movt	r1, #183	; 0xb7
   8167a:	f240 0200 	movw	r2, #0
   8167e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81682:	6011      	str	r1, [r2, #0]
   81684:	e027      	b.n	816d6 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81686:	f44f 6010 	mov.w	r0, #2304	; 0x900
   8168a:	f2c0 003d 	movt	r0, #61	; 0x3d
   8168e:	f240 0100 	movw	r1, #0
   81692:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81696:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81698:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8169c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   816a0:	6a13      	ldr	r3, [r2, #32]
   816a2:	f003 0070 	and.w	r0, r3, #112	; 0x70
   816a6:	2810      	cmp	r0, #16
   816a8:	d002      	beq.n	816b0 <SystemCoreClockUpdate+0x104>
   816aa:	2820      	cmp	r0, #32
   816ac:	d113      	bne.n	816d6 <SystemCoreClockUpdate+0x12a>
   816ae:	e009      	b.n	816c4 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   816b0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   816b4:	f2c0 037a 	movt	r3, #122	; 0x7a
   816b8:	f240 0000 	movw	r0, #0
   816bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   816c0:	6003      	str	r3, [r0, #0]
				break;
   816c2:	e008      	b.n	816d6 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   816c4:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   816c8:	f2c0 01b7 	movt	r1, #183	; 0xb7
   816cc:	f240 0200 	movw	r2, #0
   816d0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   816d4:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   816d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   816da:	f2c4 030e 	movt	r3, #16398	; 0x400e
   816de:	6b18      	ldr	r0, [r3, #48]	; 0x30
   816e0:	f000 0103 	and.w	r1, r0, #3
   816e4:	2902      	cmp	r1, #2
   816e6:	d113      	bne.n	81710 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   816e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   816ec:	f2c4 010e 	movt	r1, #16398	; 0x400e
   816f0:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   816f2:	6a89      	ldr	r1, [r1, #40]	; 0x28
   816f4:	f240 0300 	movw	r3, #0
   816f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   816fc:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81700:	681a      	ldr	r2, [r3, #0]
   81702:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81706:	b2c9      	uxtb	r1, r1
   81708:	fbb0 f2f1 	udiv	r2, r0, r1
   8170c:	601a      	str	r2, [r3, #0]
   8170e:	e008      	b.n	81722 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81710:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   81714:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   81718:	f240 0200 	movw	r2, #0
   8171c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81720:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81722:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   81726:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8172a:	6b10      	ldr	r0, [r2, #48]	; 0x30
   8172c:	f000 0170 	and.w	r1, r0, #112	; 0x70
   81730:	2970      	cmp	r1, #112	; 0x70
   81732:	d10e      	bne.n	81752 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   81734:	f240 0300 	movw	r3, #0
   81738:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8173c:	6818      	ldr	r0, [r3, #0]
   8173e:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   81742:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   81746:	fba2 0100 	umull	r0, r1, r2, r0
   8174a:	ea4f 0051 	mov.w	r0, r1, lsr #1
   8174e:	6018      	str	r0, [r3, #0]
   81750:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81752:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81756:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8175a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8175c:	f240 0000 	movw	r0, #0
   81760:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81764:	f3c2 1102 	ubfx	r1, r2, #4, #3
   81768:	6803      	ldr	r3, [r0, #0]
   8176a:	fa23 f301 	lsr.w	r3, r3, r1
   8176e:	6003      	str	r3, [r0, #0]
   81770:	4770      	bx	lr
   81772:	bf00      	nop

00081774 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81774:	f245 239f 	movw	r3, #21151	; 0x529f
   81778:	f2c0 1357 	movt	r3, #343	; 0x157
   8177c:	4298      	cmp	r0, r3
   8177e:	d80c      	bhi.n	8179a <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81780:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   81784:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81788:	f04f 0100 	mov.w	r1, #0
   8178c:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   8178e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   81792:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81796:	6019      	str	r1, [r3, #0]
   81798:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8179a:	f64c 417f 	movw	r1, #52351	; 0xcc7f
   8179e:	f2c0 2106 	movt	r1, #518	; 0x206
   817a2:	4288      	cmp	r0, r1
   817a4:	d80c      	bhi.n	817c0 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   817a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   817aa:	f2c4 030e 	movt	r3, #16398	; 0x400e
   817ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   817b2:	6019      	str	r1, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   817b4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   817b8:	f2c4 020e 	movt	r2, #16398	; 0x400e
   817bc:	6011      	str	r1, [r2, #0]
   817be:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   817c0:	f24b 733f 	movw	r3, #46911	; 0xb73f
   817c4:	f2c0 3328 	movt	r3, #808	; 0x328
   817c8:	4298      	cmp	r0, r3
   817ca:	d80c      	bhi.n	817e6 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   817cc:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   817d0:	f2c4 010e 	movt	r1, #16398	; 0x400e
   817d4:	f44f 7200 	mov.w	r2, #512	; 0x200
   817d8:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   817da:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   817de:	f2c4 000e 	movt	r0, #16398	; 0x400e
   817e2:	6002      	str	r2, [r0, #0]
   817e4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   817e6:	f642 717f 	movw	r1, #12159	; 0x2f7f
   817ea:	f2c0 41a6 	movt	r1, #1190	; 0x4a6
   817ee:	4288      	cmp	r0, r1
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   817f0:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   817f4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   817f8:	bf94      	ite	ls
   817fa:	f44f 7240 	movls.w	r2, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   817fe:	f44f 6280 	movhi.w	r2, #1024	; 0x400
   81802:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   81804:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   81808:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8180c:	601a      	str	r2, [r3, #0]
   8180e:	4770      	bx	lr

00081810 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   81810:	f640 13bc 	movw	r3, #2492	; 0x9bc
   81814:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81818:	6819      	ldr	r1, [r3, #0]
   8181a:	b941      	cbnz	r1, 8182e <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   8181c:	f640 13bc 	movw	r3, #2492	; 0x9bc
   81820:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81824:	f64c 4280 	movw	r2, #52352	; 0xcc80
   81828:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8182c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8182e:	f640 11bc 	movw	r1, #2492	; 0x9bc
   81832:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81836:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   81838:	1818      	adds	r0, r3, r0
   8183a:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   8183c:	4618      	mov	r0, r3
   8183e:	4770      	bx	lr

00081840 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81840:	f04f 30ff 	mov.w	r0, #4294967295
   81844:	4770      	bx	lr
   81846:	bf00      	nop

00081848 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8184c:	604b      	str	r3, [r1, #4]

	return 0;
}
   8184e:	f04f 0000 	mov.w	r0, #0
   81852:	4770      	bx	lr

00081854 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81854:	f04f 0001 	mov.w	r0, #1
   81858:	4770      	bx	lr
   8185a:	bf00      	nop

0008185c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8185c:	f04f 0000 	mov.w	r0, #0
   81860:	4770      	bx	lr
   81862:	bf00      	nop

00081864 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   81864:	f100 0308 	add.w	r3, r0, #8
   81868:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8186a:	f04f 32ff 	mov.w	r2, #4294967295
   8186e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   81870:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   81872:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   81874:	f04f 0100 	mov.w	r1, #0
   81878:	6001      	str	r1, [r0, #0]
   8187a:	4770      	bx	lr

0008187c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8187c:	f04f 0300 	mov.w	r3, #0
   81880:	6103      	str	r3, [r0, #16]
   81882:	4770      	bx	lr

00081884 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81884:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81886:	685a      	ldr	r2, [r3, #4]
   81888:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8188a:	6842      	ldr	r2, [r0, #4]
   8188c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8188e:	685a      	ldr	r2, [r3, #4]
   81890:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   81892:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81894:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81896:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81898:	6801      	ldr	r1, [r0, #0]
   8189a:	f101 0101 	add.w	r1, r1, #1
   8189e:	6001      	str	r1, [r0, #0]
   818a0:	4770      	bx	lr
   818a2:	bf00      	nop

000818a4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   818a4:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   818a6:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   818a8:	f1b4 3fff 	cmp.w	r4, #4294967295
   818ac:	d101      	bne.n	818b2 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   818ae:	6903      	ldr	r3, [r0, #16]
   818b0:	e00a      	b.n	818c8 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   818b2:	f100 0308 	add.w	r3, r0, #8
   818b6:	68c2      	ldr	r2, [r0, #12]
   818b8:	6812      	ldr	r2, [r2, #0]
   818ba:	4294      	cmp	r4, r2
   818bc:	d304      	bcc.n	818c8 <vListInsert+0x24>
   818be:	685b      	ldr	r3, [r3, #4]
   818c0:	685a      	ldr	r2, [r3, #4]
   818c2:	6812      	ldr	r2, [r2, #0]
   818c4:	4294      	cmp	r4, r2
   818c6:	d2fa      	bcs.n	818be <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   818c8:	685a      	ldr	r2, [r3, #4]
   818ca:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   818cc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   818ce:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   818d0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   818d2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   818d4:	6801      	ldr	r1, [r0, #0]
   818d6:	f101 0101 	add.w	r1, r1, #1
   818da:	6001      	str	r1, [r0, #0]
}
   818dc:	bc10      	pop	{r4}
   818de:	4770      	bx	lr

000818e0 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   818e0:	6843      	ldr	r3, [r0, #4]
   818e2:	6882      	ldr	r2, [r0, #8]
   818e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   818e6:	6881      	ldr	r1, [r0, #8]
   818e8:	6843      	ldr	r3, [r0, #4]
   818ea:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   818ec:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   818ee:	684a      	ldr	r2, [r1, #4]
   818f0:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   818f2:	bf04      	itt	eq
   818f4:	6882      	ldreq	r2, [r0, #8]
   818f6:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   818f8:	f04f 0300 	mov.w	r3, #0
   818fc:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   818fe:	6808      	ldr	r0, [r1, #0]
   81900:	f100 32ff 	add.w	r2, r0, #4294967295
   81904:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   81906:	6808      	ldr	r0, [r1, #0]
}
   81908:	4770      	bx	lr
   8190a:	bf00      	nop

0008190c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   8190c:	4803      	ldr	r0, [pc, #12]	; (8191c <prvPortStartFirstTask+0x10>)
   8190e:	6800      	ldr	r0, [r0, #0]
   81910:	6800      	ldr	r0, [r0, #0]
   81912:	f380 8808 	msr	MSP, r0
   81916:	b662      	cpsie	i
   81918:	df00      	svc	0
   8191a:	bf00      	nop
   8191c:	e000ed08 	.word	0xe000ed08

00081920 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   81920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81924:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   81928:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   8192c:	f04f 0100 	mov.w	r1, #0
   81930:	f840 1c0c 	str.w	r1, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   81934:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   81938:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
   8193c:	4770      	bx	lr
   8193e:	bf00      	nop

00081940 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81940:	4b06      	ldr	r3, [pc, #24]	; (8195c <pxCurrentTCBConst2>)
   81942:	6819      	ldr	r1, [r3, #0]
   81944:	6808      	ldr	r0, [r1, #0]
   81946:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8194a:	f380 8809 	msr	PSP, r0
   8194e:	f04f 0000 	mov.w	r0, #0
   81952:	f380 8811 	msr	BASEPRI, r0
   81956:	f04e 0e0d 	orr.w	lr, lr, #13
   8195a:	4770      	bx	lr

0008195c <pxCurrentTCBConst2>:
   8195c:	2007aa84 	.word	0x2007aa84

00081960 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81960:	f64e 5304 	movw	r3, #60676	; 0xed04
   81964:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8196c:	601a      	str	r2, [r3, #0]
   8196e:	4770      	bx	lr

00081970 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81970:	f3ef 8011 	mrs	r0, BASEPRI
   81974:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81978:	f381 8811 	msr	BASEPRI, r1
   8197c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8197e:	f04f 0000 	mov.w	r0, #0
   81982:	bf00      	nop

00081984 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81984:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   81986:	f641 1371 	movw	r3, #6513	; 0x1971
   8198a:	f2c0 0308 	movt	r3, #8
   8198e:	4798      	blx	r3
	uxCriticalNesting++;
   81990:	f240 0004 	movw	r0, #4
   81994:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81998:	6802      	ldr	r2, [r0, #0]
   8199a:	f102 0201 	add.w	r2, r2, #1
   8199e:	6002      	str	r2, [r0, #0]
   819a0:	bd08      	pop	{r3, pc}
   819a2:	bf00      	nop

000819a4 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   819a4:	f380 8811 	msr	BASEPRI, r0
   819a8:	4770      	bx	lr
   819aa:	bf00      	nop

000819ac <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   819ac:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   819ae:	f240 0204 	movw	r2, #4
   819b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   819b6:	6813      	ldr	r3, [r2, #0]
   819b8:	f103 30ff 	add.w	r0, r3, #4294967295
   819bc:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
   819be:	b930      	cbnz	r0, 819ce <vPortExitCritical+0x22>
	{
		portENABLE_INTERRUPTS();
   819c0:	f04f 0000 	mov.w	r0, #0
   819c4:	f641 11a5 	movw	r1, #6565	; 0x19a5
   819c8:	f2c0 0108 	movt	r1, #8
   819cc:	4788      	blx	r1
   819ce:	bd08      	pop	{r3, pc}

000819d0 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   819d0:	f3ef 8009 	mrs	r0, PSP
   819d4:	4b0c      	ldr	r3, [pc, #48]	; (81a08 <pxCurrentTCBConst>)
   819d6:	681a      	ldr	r2, [r3, #0]
   819d8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   819dc:	6010      	str	r0, [r2, #0]
   819de:	e92d 4008 	stmdb	sp!, {r3, lr}
   819e2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   819e6:	f380 8811 	msr	BASEPRI, r0
   819ea:	f001 f877 	bl	82adc <vTaskSwitchContext>
   819ee:	f04f 0000 	mov.w	r0, #0
   819f2:	f380 8811 	msr	BASEPRI, r0
   819f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   819fa:	6819      	ldr	r1, [r3, #0]
   819fc:	6808      	ldr	r0, [r1, #0]
   819fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81a02:	f380 8809 	msr	PSP, r0
   81a06:	4770      	bx	lr

00081a08 <pxCurrentTCBConst>:
   81a08:	2007aa84 	.word	0x2007aa84

00081a0c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81a0c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81a0e:	f64e 5304 	movw	r3, #60676	; 0xed04
   81a12:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81a1a:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81a1c:	f641 1071 	movw	r0, #6513	; 0x1971
   81a20:	f2c0 0008 	movt	r0, #8
   81a24:	4780      	blx	r0
	{
		vTaskIncrementTick();
   81a26:	f242 61ad 	movw	r1, #9901	; 0x26ad
   81a2a:	f2c0 0108 	movt	r1, #8
   81a2e:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81a30:	f04f 0000 	mov.w	r0, #0
   81a34:	f641 13a5 	movw	r3, #6565	; 0x19a5
   81a38:	f2c0 0308 	movt	r3, #8
   81a3c:	4798      	blx	r3
   81a3e:	bd08      	pop	{r3, pc}

00081a40 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   81a40:	f24e 0314 	movw	r3, #57364	; 0xe014
   81a44:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81a48:	f644 021f 	movw	r2, #18463	; 0x481f
   81a4c:	f2c0 0201 	movt	r2, #1
   81a50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   81a52:	f24e 0010 	movw	r0, #57360	; 0xe010
   81a56:	f2ce 0000 	movt	r0, #57344	; 0xe000
   81a5a:	f04f 0107 	mov.w	r1, #7
   81a5e:	6001      	str	r1, [r0, #0]
   81a60:	4770      	bx	lr
   81a62:	bf00      	nop

00081a64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   81a64:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   81a66:	f64e 5320 	movw	r3, #60704	; 0xed20
   81a6a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81a6e:	681a      	ldr	r2, [r3, #0]
   81a70:	f442 0070 	orr.w	r0, r2, #15728640	; 0xf00000
   81a74:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81a76:	6819      	ldr	r1, [r3, #0]
   81a78:	f041 4470 	orr.w	r4, r1, #4026531840	; 0xf0000000
   81a7c:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81a7e:	f641 2341 	movw	r3, #6721	; 0x1a41
   81a82:	f2c0 0308 	movt	r3, #8
   81a86:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81a88:	f04f 0400 	mov.w	r4, #0
   81a8c:	f240 0204 	movw	r2, #4
   81a90:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81a94:	6014      	str	r4, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   81a96:	f641 100d 	movw	r0, #6413	; 0x190d
   81a9a:	f2c0 0008 	movt	r0, #8
   81a9e:	4780      	blx	r0

	/* Should not get here! */
	return 0;
}
   81aa0:	4620      	mov	r0, r4
   81aa2:	bd10      	pop	{r4, pc}

00081aa4 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   81aa4:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   81aa6:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   81aaa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81aae:	e000      	b.n	81ab2 <prvInsertBlockIntoFreeList+0xe>
   81ab0:	461a      	mov	r2, r3
   81ab2:	6813      	ldr	r3, [r2, #0]
   81ab4:	4283      	cmp	r3, r0
   81ab6:	d3fb      	bcc.n	81ab0 <prvInsertBlockIntoFreeList+0xc>
   81ab8:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81aba:	6854      	ldr	r4, [r2, #4]
   81abc:	1915      	adds	r5, r2, r4
   81abe:	4285      	cmp	r5, r0
   81ac0:	d103      	bne.n	81aca <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81ac2:	6868      	ldr	r0, [r5, #4]
   81ac4:	1904      	adds	r4, r0, r4
   81ac6:	6054      	str	r4, [r2, #4]
   81ac8:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81aca:	6842      	ldr	r2, [r0, #4]
   81acc:	1884      	adds	r4, r0, r2
   81ace:	42a3      	cmp	r3, r4
   81ad0:	d10f      	bne.n	81af2 <prvInsertBlockIntoFreeList+0x4e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81ad2:	f64a 14c0 	movw	r4, #43456	; 0xa9c0
   81ad6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81ada:	6824      	ldr	r4, [r4, #0]
   81adc:	429c      	cmp	r4, r3
   81ade:	d006      	beq.n	81aee <prvInsertBlockIntoFreeList+0x4a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81ae0:	685b      	ldr	r3, [r3, #4]
   81ae2:	189a      	adds	r2, r3, r2
   81ae4:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81ae6:	680b      	ldr	r3, [r1, #0]
   81ae8:	681a      	ldr	r2, [r3, #0]
   81aea:	6002      	str	r2, [r0, #0]
   81aec:	e002      	b.n	81af4 <prvInsertBlockIntoFreeList+0x50>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   81aee:	6003      	str	r3, [r0, #0]
   81af0:	e000      	b.n	81af4 <prvInsertBlockIntoFreeList+0x50>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   81af2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81af4:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81af6:	bf18      	it	ne
   81af8:	6008      	strne	r0, [r1, #0]
	}
}
   81afa:	bc30      	pop	{r4, r5}
   81afc:	4770      	bx	lr
   81afe:	bf00      	nop

00081b00 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81b00:	b538      	push	{r3, r4, r5, lr}
   81b02:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81b04:	f242 6375 	movw	r3, #9845	; 0x2675
   81b08:	f2c0 0308 	movt	r3, #8
   81b0c:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81b0e:	f64a 10c0 	movw	r0, #43456	; 0xa9c0
   81b12:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b16:	6801      	ldr	r1, [r0, #0]
   81b18:	bb21      	cbnz	r1, 81b64 <pvPortMalloc+0x64>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   81b1a:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   81b1e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81b22:	f640 13c0 	movw	r3, #2496	; 0x9c0
   81b26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b2a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81b2c:	f04f 0100 	mov.w	r1, #0
   81b30:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   81b32:	f503 421f 	add.w	r2, r3, #40704	; 0x9f00
   81b36:	f102 00f0 	add.w	r0, r2, #240	; 0xf0
   81b3a:	f64a 15c0 	movw	r5, #43456	; 0xa9c0
   81b3e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81b42:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   81b44:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
	pxEnd->pxNextFreeBlock = NULL;
   81b48:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   81b4c:	f649 71f0 	movw	r1, #40944	; 0x9ff0
   81b50:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81b52:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   81b54:	f240 0308 	movw	r3, #8
   81b58:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b5c:	681a      	ldr	r2, [r3, #0]
   81b5e:	f1a2 0210 	sub.w	r2, r2, #16
   81b62:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   81b64:	2c00      	cmp	r4, #0
   81b66:	d03c      	beq.n	81be2 <pvPortMalloc+0xe2>
		{
			xWantedSize += heapSTRUCT_SIZE;
   81b68:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   81b6c:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81b70:	bf1c      	itt	ne
   81b72:	f022 0207 	bicne.w	r2, r2, #7
   81b76:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81b78:	f102 30ff 	add.w	r0, r2, #4294967295
   81b7c:	f649 75fe 	movw	r5, #40958	; 0x9ffe
   81b80:	42a8      	cmp	r0, r5
   81b82:	d831      	bhi.n	81be8 <pvPortMalloc+0xe8>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   81b84:	f64a 11c4 	movw	r1, #43460	; 0xa9c4
   81b88:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b8c:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81b8e:	e001      	b.n	81b94 <pvPortMalloc+0x94>
   81b90:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81b92:	4604      	mov	r4, r0
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81b94:	6863      	ldr	r3, [r4, #4]
   81b96:	429a      	cmp	r2, r3
   81b98:	d902      	bls.n	81ba0 <pvPortMalloc+0xa0>
   81b9a:	6820      	ldr	r0, [r4, #0]
   81b9c:	2800      	cmp	r0, #0
   81b9e:	d1f7      	bne.n	81b90 <pvPortMalloc+0x90>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81ba0:	f64a 15c0 	movw	r5, #43456	; 0xa9c0
   81ba4:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81ba8:	682b      	ldr	r3, [r5, #0]
   81baa:	429c      	cmp	r4, r3
   81bac:	d01f      	beq.n	81bee <pvPortMalloc+0xee>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   81bae:	680d      	ldr	r5, [r1, #0]
   81bb0:	f105 0510 	add.w	r5, r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81bb4:	6820      	ldr	r0, [r4, #0]
   81bb6:	6008      	str	r0, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81bb8:	6861      	ldr	r1, [r4, #4]
   81bba:	1a8b      	subs	r3, r1, r2
   81bbc:	2b20      	cmp	r3, #32
   81bbe:	d907      	bls.n	81bd0 <pvPortMalloc+0xd0>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   81bc0:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81bc2:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81bc4:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81bc6:	f641 22a5 	movw	r2, #6821	; 0x1aa5
   81bca:	f2c0 0208 	movt	r2, #8
   81bce:	4790      	blx	r2
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81bd0:	f240 0008 	movw	r0, #8
   81bd4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81bd8:	6803      	ldr	r3, [r0, #0]
   81bda:	6861      	ldr	r1, [r4, #4]
   81bdc:	1a5a      	subs	r2, r3, r1
   81bde:	6002      	str	r2, [r0, #0]
   81be0:	e007      	b.n	81bf2 <pvPortMalloc+0xf2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81be2:	f04f 0500 	mov.w	r5, #0
   81be6:	e004      	b.n	81bf2 <pvPortMalloc+0xf2>
   81be8:	f04f 0500 	mov.w	r5, #0
   81bec:	e001      	b.n	81bf2 <pvPortMalloc+0xf2>
   81bee:	f04f 0500 	mov.w	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   81bf2:	f642 003d 	movw	r0, #10301	; 0x283d
   81bf6:	f2c0 0008 	movt	r0, #8
   81bfa:	4780      	blx	r0
		}
	}
	#endif

	return pvReturn;
}
   81bfc:	4628      	mov	r0, r5
   81bfe:	bd38      	pop	{r3, r4, r5, pc}

00081c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81c00:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81c02:	4604      	mov	r4, r0
   81c04:	b1c8      	cbz	r0, 81c3a <vPortFree+0x3a>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   81c06:	f242 6375 	movw	r3, #9845	; 0x2675
   81c0a:	f2c0 0308 	movt	r3, #8
   81c0e:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   81c10:	f240 0008 	movw	r0, #8
   81c14:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81c18:	6801      	ldr	r1, [r0, #0]
   81c1a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   81c1e:	188b      	adds	r3, r1, r2
   81c20:	6003      	str	r3, [r0, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   81c22:	f1a4 0010 	sub.w	r0, r4, #16
   81c26:	f641 21a5 	movw	r1, #6821	; 0x1aa5
   81c2a:	f2c0 0108 	movt	r1, #8
   81c2e:	4788      	blx	r1
		}
		xTaskResumeAll();
   81c30:	f642 003d 	movw	r0, #10301	; 0x283d
   81c34:	f2c0 0008 	movt	r0, #8
   81c38:	4780      	blx	r0
   81c3a:	bd10      	pop	{r4, pc}

00081c3c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81c3e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81c40:	f641 1385 	movw	r3, #6533	; 0x1985
   81c44:	f2c0 0308 	movt	r3, #8
   81c48:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81c4a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81c4c:	2800      	cmp	r0, #0
   81c4e:	dd1a      	ble.n	81c86 <prvUnlockQueue+0x4a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81c50:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81c52:	b919      	cbnz	r1, 81c5c <prvUnlockQueue+0x20>
   81c54:	e017      	b.n	81c86 <prvUnlockQueue+0x4a>
   81c56:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81c58:	b951      	cbnz	r1, 81c70 <prvUnlockQueue+0x34>
   81c5a:	e014      	b.n	81c86 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81c5c:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81c60:	f642 4565 	movw	r5, #11365	; 0x2c65
   81c64:	f2c0 0508 	movt	r5, #8
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81c68:	f642 57e9 	movw	r7, #11753	; 0x2de9
   81c6c:	f2c0 0708 	movt	r7, #8
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81c70:	4630      	mov	r0, r6
   81c72:	47a8      	blx	r5
   81c74:	b100      	cbz	r0, 81c78 <prvUnlockQueue+0x3c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81c76:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81c78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   81c7a:	f102 33ff 	add.w	r3, r2, #4294967295
   81c7e:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81c80:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81c82:	2800      	cmp	r0, #0
   81c84:	dce7      	bgt.n	81c56 <prvUnlockQueue+0x1a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81c86:	f04f 32ff 	mov.w	r2, #4294967295
   81c8a:	64a2      	str	r2, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81c8c:	f641 13ad 	movw	r3, #6573	; 0x19ad
   81c90:	f2c0 0308 	movt	r3, #8
   81c94:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81c96:	f641 1085 	movw	r0, #6533	; 0x1985
   81c9a:	f2c0 0008 	movt	r0, #8
   81c9e:	4780      	blx	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81ca0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81ca2:	2900      	cmp	r1, #0
   81ca4:	dd1a      	ble.n	81cdc <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81ca6:	6922      	ldr	r2, [r4, #16]
   81ca8:	b91a      	cbnz	r2, 81cb2 <prvUnlockQueue+0x76>
   81caa:	e017      	b.n	81cdc <prvUnlockQueue+0xa0>
   81cac:	6922      	ldr	r2, [r4, #16]
   81cae:	b952      	cbnz	r2, 81cc6 <prvUnlockQueue+0x8a>
   81cb0:	e014      	b.n	81cdc <prvUnlockQueue+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81cb2:	f104 0610 	add.w	r6, r4, #16
   81cb6:	f642 4565 	movw	r5, #11365	; 0x2c65
   81cba:	f2c0 0508 	movt	r5, #8
				{
					vTaskMissedYield();
   81cbe:	f642 57e9 	movw	r7, #11753	; 0x2de9
   81cc2:	f2c0 0708 	movt	r7, #8
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81cc6:	4630      	mov	r0, r6
   81cc8:	47a8      	blx	r5
   81cca:	b100      	cbz	r0, 81cce <prvUnlockQueue+0x92>
				{
					vTaskMissedYield();
   81ccc:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81cce:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81cd0:	f103 30ff 	add.w	r0, r3, #4294967295
   81cd4:	6460      	str	r0, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81cd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81cd8:	2900      	cmp	r1, #0
   81cda:	dce7      	bgt.n	81cac <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81cdc:	f04f 33ff 	mov.w	r3, #4294967295
   81ce0:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81ce2:	f641 10ad 	movw	r0, #6573	; 0x19ad
   81ce6:	f2c0 0008 	movt	r0, #8
   81cea:	4780      	blx	r0
   81cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81cee:	bf00      	nop

00081cf0 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81cf0:	b538      	push	{r3, r4, r5, lr}
   81cf2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81cf4:	6805      	ldr	r5, [r0, #0]
   81cf6:	b175      	cbz	r5, 81d16 <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81cf8:	6c02      	ldr	r2, [r0, #64]	; 0x40
   81cfa:	68c4      	ldr	r4, [r0, #12]
   81cfc:	18a4      	adds	r4, r4, r2
   81cfe:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81d00:	6840      	ldr	r0, [r0, #4]
   81d02:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81d04:	bf28      	it	cs
   81d06:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81d08:	4608      	mov	r0, r1
   81d0a:	68d9      	ldr	r1, [r3, #12]
   81d0c:	f643 73c9 	movw	r3, #16329	; 0x3fc9
   81d10:	f2c0 0308 	movt	r3, #8
   81d14:	4798      	blx	r3
   81d16:	bd38      	pop	{r3, r4, r5, pc}

00081d18 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   81d18:	b510      	push	{r4, lr}
   81d1a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81d1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81d1e:	b963      	cbnz	r3, 81d3a <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81d20:	6801      	ldr	r1, [r0, #0]
   81d22:	2900      	cmp	r1, #0
   81d24:	d12e      	bne.n	81d84 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81d26:	6840      	ldr	r0, [r0, #4]
   81d28:	f642 63d5 	movw	r3, #11989	; 0x2ed5
   81d2c:	f2c0 0308 	movt	r3, #8
   81d30:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   81d32:	f04f 0000 	mov.w	r0, #0
   81d36:	6060      	str	r0, [r4, #4]
   81d38:	e024      	b.n	81d84 <prvCopyDataToQueue+0x6c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81d3a:	b982      	cbnz	r2, 81d5e <prvCopyDataToQueue+0x46>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81d3c:	6880      	ldr	r0, [r0, #8]
   81d3e:	461a      	mov	r2, r3
   81d40:	f643 73c9 	movw	r3, #16329	; 0x3fc9
   81d44:	f2c0 0308 	movt	r3, #8
   81d48:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81d4a:	68a2      	ldr	r2, [r4, #8]
   81d4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   81d4e:	1850      	adds	r0, r2, r1
   81d50:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81d52:	6863      	ldr	r3, [r4, #4]
   81d54:	4298      	cmp	r0, r3
   81d56:	d315      	bcc.n	81d84 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81d58:	6822      	ldr	r2, [r4, #0]
   81d5a:	60a2      	str	r2, [r4, #8]
   81d5c:	e012      	b.n	81d84 <prvCopyDataToQueue+0x6c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81d5e:	68c0      	ldr	r0, [r0, #12]
   81d60:	461a      	mov	r2, r3
   81d62:	f643 73c9 	movw	r3, #16329	; 0x3fc9
   81d66:	f2c0 0308 	movt	r3, #8
   81d6a:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   81d6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81d6e:	f1c2 0000 	rsb	r0, r2, #0
   81d72:	68e1      	ldr	r1, [r4, #12]
   81d74:	180b      	adds	r3, r1, r0
   81d76:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81d78:	6822      	ldr	r2, [r4, #0]
   81d7a:	4293      	cmp	r3, r2
   81d7c:	d202      	bcs.n	81d84 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81d7e:	6861      	ldr	r1, [r4, #4]
   81d80:	1808      	adds	r0, r1, r0
   81d82:	60e0      	str	r0, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81d84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81d86:	f102 0201 	add.w	r2, r2, #1
   81d8a:	63a2      	str	r2, [r4, #56]	; 0x38
   81d8c:	bd10      	pop	{r4, pc}
   81d8e:	bf00      	nop

00081d90 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81d90:	b538      	push	{r3, r4, r5, lr}
   81d92:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81d94:	4604      	mov	r4, r0
   81d96:	b930      	cbnz	r0, 81da6 <xQueueGenericReset+0x16>
   81d98:	f641 1471 	movw	r4, #6513	; 0x1971
   81d9c:	f2c0 0408 	movt	r4, #8
   81da0:	47a0      	blx	r4
   81da2:	bf00      	nop
   81da4:	e7fd      	b.n	81da2 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   81da6:	f641 1385 	movw	r3, #6533	; 0x1985
   81daa:	f2c0 0308 	movt	r3, #8
   81dae:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81db0:	6823      	ldr	r3, [r4, #0]
   81db2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81db4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81db6:	fb00 3102 	mla	r1, r0, r2, r3
   81dba:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81dbc:	f04f 0100 	mov.w	r1, #0
   81dc0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81dc2:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81dc4:	f100 30ff 	add.w	r0, r0, #4294967295
   81dc8:	fb02 3300 	mla	r3, r2, r0, r3
   81dcc:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81dce:	f04f 32ff 	mov.w	r2, #4294967295
   81dd2:	6462      	str	r2, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81dd4:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81dd6:	b985      	cbnz	r5, 81dfa <xQueueGenericReset+0x6a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81dd8:	6921      	ldr	r1, [r4, #16]
   81dda:	b1c1      	cbz	r1, 81e0e <xQueueGenericReset+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81ddc:	f104 0010 	add.w	r0, r4, #16
   81de0:	f642 4365 	movw	r3, #11365	; 0x2c65
   81de4:	f2c0 0308 	movt	r3, #8
   81de8:	4798      	blx	r3
   81dea:	2801      	cmp	r0, #1
   81dec:	d10f      	bne.n	81e0e <xQueueGenericReset+0x7e>
				{
					portYIELD_WITHIN_API();
   81dee:	f641 1061 	movw	r0, #6497	; 0x1961
   81df2:	f2c0 0008 	movt	r0, #8
   81df6:	4780      	blx	r0
   81df8:	e009      	b.n	81e0e <xQueueGenericReset+0x7e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81dfa:	f104 0010 	add.w	r0, r4, #16
   81dfe:	f641 0565 	movw	r5, #6245	; 0x1865
   81e02:	f2c0 0508 	movt	r5, #8
   81e06:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81e08:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81e0c:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81e0e:	f641 12ad 	movw	r2, #6573	; 0x19ad
   81e12:	f2c0 0208 	movt	r2, #8
   81e16:	4790      	blx	r2

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81e18:	f04f 0001 	mov.w	r0, #1
   81e1c:	bd38      	pop	{r3, r4, r5, pc}
   81e1e:	bf00      	nop

00081e20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e22:	460d      	mov	r5, r1
   81e24:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81e26:	4606      	mov	r6, r0
   81e28:	b1e0      	cbz	r0, 81e64 <xQueueGenericCreate+0x44>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81e2a:	f04f 0050 	mov.w	r0, #80	; 0x50
   81e2e:	f641 3301 	movw	r3, #6913	; 0x1b01
   81e32:	f2c0 0308 	movt	r3, #8
   81e36:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81e38:	4604      	mov	r4, r0
   81e3a:	b198      	cbz	r0, 81e64 <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81e3c:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81e40:	f100 0001 	add.w	r0, r0, #1
   81e44:	f641 3101 	movw	r1, #6913	; 0x1b01
   81e48:	f2c0 0108 	movt	r1, #8
   81e4c:	4788      	blx	r1
   81e4e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81e50:	b970      	cbnz	r0, 81e70 <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81e52:	4620      	mov	r0, r4
   81e54:	f641 4201 	movw	r2, #7169	; 0x1c01
   81e58:	f2c0 0208 	movt	r2, #8
   81e5c:	4790      	blx	r2
   81e5e:	e001      	b.n	81e64 <xQueueGenericCreate+0x44>
			}
		}
	}

	configASSERT( xReturn );
   81e60:	bf00      	nop
   81e62:	e7fd      	b.n	81e60 <xQueueGenericCreate+0x40>
   81e64:	f641 1071 	movw	r0, #6513	; 0x1971
   81e68:	f2c0 0008 	movt	r0, #8
   81e6c:	4780      	blx	r0
   81e6e:	e7f7      	b.n	81e60 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81e70:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81e72:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81e74:	4620      	mov	r0, r4
   81e76:	f04f 0101 	mov.w	r1, #1
   81e7a:	f641 5391 	movw	r3, #7569	; 0x1d91
   81e7e:	f2c0 0308 	movt	r3, #8
   81e82:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81e84:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81e88:	4620      	mov	r0, r4
   81e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081e8c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81e90:	b085      	sub	sp, #20
   81e92:	468a      	mov	sl, r1
   81e94:	9201      	str	r2, [sp, #4]
   81e96:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81e98:	4604      	mov	r4, r0
   81e9a:	b930      	cbnz	r0, 81eaa <xQueueGenericSend+0x1e>
   81e9c:	f641 1471 	movw	r4, #6513	; 0x1971
   81ea0:	f2c0 0408 	movt	r4, #8
   81ea4:	47a0      	blx	r4
   81ea6:	bf00      	nop
   81ea8:	e7fd      	b.n	81ea6 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81eaa:	b941      	cbnz	r1, 81ebe <xQueueGenericSend+0x32>
   81eac:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81eae:	b14b      	cbz	r3, 81ec4 <xQueueGenericSend+0x38>
   81eb0:	f641 1071 	movw	r0, #6513	; 0x1971
   81eb4:	f2c0 0008 	movt	r0, #8
   81eb8:	4780      	blx	r0
   81eba:	bf00      	nop
   81ebc:	e7fd      	b.n	81eba <xQueueGenericSend+0x2e>
   81ebe:	f04f 0700 	mov.w	r7, #0
   81ec2:	e001      	b.n	81ec8 <xQueueGenericSend+0x3c>
   81ec4:	f04f 0700 	mov.w	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81ec8:	f641 1685 	movw	r6, #6533	; 0x1985
   81ecc:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81ed0:	f642 5b0d 	movw	fp, #11533	; 0x2d0d
   81ed4:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81ed8:	f641 15ad 	movw	r5, #6573	; 0x19ad
   81edc:	f2c0 0508 	movt	r5, #8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81ee0:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81ee2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81ee4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   81ee6:	428a      	cmp	r2, r1
   81ee8:	d21f      	bcs.n	81f2a <xQueueGenericSend+0x9e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81eea:	4620      	mov	r0, r4
   81eec:	4651      	mov	r1, sl
   81eee:	9a00      	ldr	r2, [sp, #0]
   81ef0:	f641 5319 	movw	r3, #7449	; 0x1d19
   81ef4:	f2c0 0308 	movt	r3, #8
   81ef8:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81efa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81efc:	b169      	cbz	r1, 81f1a <xQueueGenericSend+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81efe:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81f02:	f642 4265 	movw	r2, #11365	; 0x2c65
   81f06:	f2c0 0208 	movt	r2, #8
   81f0a:	4790      	blx	r2
   81f0c:	2801      	cmp	r0, #1
   81f0e:	d104      	bne.n	81f1a <xQueueGenericSend+0x8e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81f10:	f641 1061 	movw	r0, #6497	; 0x1961
   81f14:	f2c0 0008 	movt	r0, #8
   81f18:	4780      	blx	r0
					}
				}

				taskEXIT_CRITICAL();
   81f1a:	f641 13ad 	movw	r3, #6573	; 0x19ad
   81f1e:	f2c0 0308 	movt	r3, #8
   81f22:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81f24:	f04f 0001 	mov.w	r0, #1
   81f28:	e066      	b.n	81ff8 <xQueueGenericSend+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81f2a:	9b01      	ldr	r3, [sp, #4]
   81f2c:	b93b      	cbnz	r3, 81f3e <xQueueGenericSend+0xb2>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81f2e:	f641 12ad 	movw	r2, #6573	; 0x19ad
   81f32:	f2c0 0208 	movt	r2, #8
   81f36:	4790      	blx	r2

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81f38:	f04f 0000 	mov.w	r0, #0
   81f3c:	e05c      	b.n	81ff8 <xQueueGenericSend+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
   81f3e:	b91f      	cbnz	r7, 81f48 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81f40:	a802      	add	r0, sp, #8
   81f42:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81f44:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81f48:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81f4a:	f242 6075 	movw	r0, #9845	; 0x2675
   81f4e:	f2c0 0008 	movt	r0, #8
   81f52:	4780      	blx	r0
		prvLockQueue( pxQueue );
   81f54:	47b0      	blx	r6
   81f56:	6c62      	ldr	r2, [r4, #68]	; 0x44
   81f58:	f1b2 3fff 	cmp.w	r2, #4294967295
   81f5c:	bf04      	itt	eq
   81f5e:	2200      	moveq	r2, #0
   81f60:	6462      	streq	r2, [r4, #68]	; 0x44
   81f62:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81f64:	f1b1 3fff 	cmp.w	r1, #4294967295
   81f68:	bf04      	itt	eq
   81f6a:	2100      	moveq	r1, #0
   81f6c:	64a1      	streq	r1, [r4, #72]	; 0x48
   81f6e:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81f70:	a802      	add	r0, sp, #8
   81f72:	a901      	add	r1, sp, #4
   81f74:	f642 533d 	movw	r3, #11581	; 0x2d3d
   81f78:	f2c0 0308 	movt	r3, #8
   81f7c:	4798      	blx	r3
   81f7e:	bb70      	cbnz	r0, 81fde <xQueueGenericSend+0x152>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81f80:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81f82:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81f86:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81f8a:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81f8c:	45c1      	cmp	r9, r8
   81f8e:	d11a      	bne.n	81fc6 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81f90:	f104 0010 	add.w	r0, r4, #16
   81f94:	9901      	ldr	r1, [sp, #4]
   81f96:	f642 329d 	movw	r2, #11165	; 0x2b9d
   81f9a:	f2c0 0208 	movt	r2, #8
   81f9e:	4790      	blx	r2
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81fa0:	4620      	mov	r0, r4
   81fa2:	f641 413d 	movw	r1, #7229	; 0x1c3d
   81fa6:	f2c0 0108 	movt	r1, #8
   81faa:	4788      	blx	r1
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81fac:	f642 003d 	movw	r0, #10301	; 0x283d
   81fb0:	f2c0 0008 	movt	r0, #8
   81fb4:	4780      	blx	r0
   81fb6:	2800      	cmp	r0, #0
   81fb8:	d192      	bne.n	81ee0 <xQueueGenericSend+0x54>
				{
					portYIELD_WITHIN_API();
   81fba:	f641 1361 	movw	r3, #6497	; 0x1961
   81fbe:	f2c0 0308 	movt	r3, #8
   81fc2:	4798      	blx	r3
   81fc4:	e78c      	b.n	81ee0 <xQueueGenericSend+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81fc6:	4620      	mov	r0, r4
   81fc8:	f641 413d 	movw	r1, #7229	; 0x1c3d
   81fcc:	f2c0 0108 	movt	r1, #8
   81fd0:	4788      	blx	r1
				( void ) xTaskResumeAll();
   81fd2:	f642 033d 	movw	r3, #10301	; 0x283d
   81fd6:	f2c0 0308 	movt	r3, #8
   81fda:	4798      	blx	r3
   81fdc:	e780      	b.n	81ee0 <xQueueGenericSend+0x54>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81fde:	4620      	mov	r0, r4
   81fe0:	f641 423d 	movw	r2, #7229	; 0x1c3d
   81fe4:	f2c0 0208 	movt	r2, #8
   81fe8:	4790      	blx	r2
			( void ) xTaskResumeAll();
   81fea:	f642 003d 	movw	r0, #10301	; 0x283d
   81fee:	f2c0 0008 	movt	r0, #8
   81ff2:	4780      	blx	r0

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81ff4:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   81ff8:	b005      	add	sp, #20
   81ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ffe:	bf00      	nop

00082000 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   82000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82004:	460e      	mov	r6, r1
   82006:	4615      	mov	r5, r2
   82008:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   8200a:	4604      	mov	r4, r0
   8200c:	b930      	cbnz	r0, 8201c <xQueueGenericSendFromISR+0x1c>
   8200e:	f641 1571 	movw	r5, #6513	; 0x1971
   82012:	f2c0 0508 	movt	r5, #8
   82016:	47a8      	blx	r5
   82018:	bf00      	nop
   8201a:	e7fd      	b.n	82018 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8201c:	b941      	cbnz	r1, 82030 <xQueueGenericSendFromISR+0x30>
   8201e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   82020:	b133      	cbz	r3, 82030 <xQueueGenericSendFromISR+0x30>
   82022:	f641 1071 	movw	r0, #6513	; 0x1971
   82026:	f2c0 0008 	movt	r0, #8
   8202a:	4780      	blx	r0
   8202c:	bf00      	nop
   8202e:	e7fd      	b.n	8202c <xQueueGenericSendFromISR+0x2c>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   82030:	f641 1171 	movw	r1, #6513	; 0x1971
   82034:	f2c0 0108 	movt	r1, #8
   82038:	4788      	blx	r1
   8203a:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8203c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8203e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   82040:	429a      	cmp	r2, r3
   82042:	d221      	bcs.n	82088 <xQueueGenericSendFromISR+0x88>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   82044:	4620      	mov	r0, r4
   82046:	4631      	mov	r1, r6
   82048:	4642      	mov	r2, r8
   8204a:	f641 5319 	movw	r3, #7449	; 0x1d19
   8204e:	f2c0 0308 	movt	r3, #8
   82052:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   82054:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82056:	f1b0 3fff 	cmp.w	r0, #4294967295
   8205a:	d10e      	bne.n	8207a <xQueueGenericSendFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8205c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   8205e:	b1b2      	cbz	r2, 8208e <xQueueGenericSendFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82060:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82064:	f642 4465 	movw	r4, #11365	; 0x2c65
   82068:	f2c0 0408 	movt	r4, #8
   8206c:	47a0      	blx	r4
   8206e:	b188      	cbz	r0, 82094 <xQueueGenericSendFromISR+0x94>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   82070:	b19d      	cbz	r5, 8209a <xQueueGenericSendFromISR+0x9a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   82072:	f04f 0401 	mov.w	r4, #1
   82076:	602c      	str	r4, [r5, #0]
   82078:	e011      	b.n	8209e <xQueueGenericSendFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   8207a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   8207c:	f101 0101 	add.w	r1, r1, #1
   82080:	64a1      	str	r1, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   82082:	f04f 0401 	mov.w	r4, #1
   82086:	e00a      	b.n	8209e <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   82088:	f04f 0400 	mov.w	r4, #0
   8208c:	e007      	b.n	8209e <xQueueGenericSendFromISR+0x9e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   8208e:	f04f 0401 	mov.w	r4, #1
   82092:	e004      	b.n	8209e <xQueueGenericSendFromISR+0x9e>
   82094:	f04f 0401 	mov.w	r4, #1
   82098:	e001      	b.n	8209e <xQueueGenericSendFromISR+0x9e>
   8209a:	f04f 0401 	mov.w	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8209e:	4638      	mov	r0, r7
   820a0:	f641 13a5 	movw	r3, #6565	; 0x19a5
   820a4:	f2c0 0308 	movt	r3, #8
   820a8:	4798      	blx	r3

	return xReturn;
}
   820aa:	4620      	mov	r0, r4
   820ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000820b0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   820b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   820b4:	b085      	sub	sp, #20
   820b6:	4689      	mov	r9, r1
   820b8:	9201      	str	r2, [sp, #4]
   820ba:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   820bc:	4604      	mov	r4, r0
   820be:	b930      	cbnz	r0, 820ce <xQueueGenericReceive+0x1e>
   820c0:	f641 1471 	movw	r4, #6513	; 0x1971
   820c4:	f2c0 0408 	movt	r4, #8
   820c8:	47a0      	blx	r4
   820ca:	bf00      	nop
   820cc:	e7fd      	b.n	820ca <xQueueGenericReceive+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   820ce:	b941      	cbnz	r1, 820e2 <xQueueGenericReceive+0x32>
   820d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   820d2:	b14b      	cbz	r3, 820e8 <xQueueGenericReceive+0x38>
   820d4:	f641 1071 	movw	r0, #6513	; 0x1971
   820d8:	f2c0 0008 	movt	r0, #8
   820dc:	4780      	blx	r0
   820de:	bf00      	nop
   820e0:	e7fd      	b.n	820de <xQueueGenericReceive+0x2e>
   820e2:	f04f 0700 	mov.w	r7, #0
   820e6:	e001      	b.n	820ec <xQueueGenericReceive+0x3c>
   820e8:	f04f 0700 	mov.w	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   820ec:	f641 1685 	movw	r6, #6533	; 0x1985
   820f0:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   820f4:	f642 5b0d 	movw	fp, #11533	; 0x2d0d
   820f8:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   820fc:	f641 15ad 	movw	r5, #6573	; 0x19ad
   82100:	f2c0 0508 	movt	r5, #8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   82104:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   82106:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   82108:	2900      	cmp	r1, #0
   8210a:	d03f      	beq.n	8218c <xQueueGenericReceive+0xdc>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   8210c:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   8210e:	4620      	mov	r0, r4
   82110:	4649      	mov	r1, r9
   82112:	f641 43f1 	movw	r3, #7409	; 0x1cf1
   82116:	f2c0 0308 	movt	r3, #8
   8211a:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8211c:	f1ba 0f00 	cmp.w	sl, #0
   82120:	d11c      	bne.n	8215c <xQueueGenericReceive+0xac>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   82122:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82124:	f103 30ff 	add.w	r0, r3, #4294967295
   82128:	63a0      	str	r0, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8212a:	6821      	ldr	r1, [r4, #0]
   8212c:	b929      	cbnz	r1, 8213a <xQueueGenericReceive+0x8a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   8212e:	f642 52f9 	movw	r2, #11769	; 0x2df9
   82132:	f2c0 0208 	movt	r2, #8
   82136:	4790      	blx	r2
   82138:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8213a:	6923      	ldr	r3, [r4, #16]
   8213c:	b1f3      	cbz	r3, 8217c <xQueueGenericReceive+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8213e:	f104 0010 	add.w	r0, r4, #16
   82142:	f642 4165 	movw	r1, #11365	; 0x2c65
   82146:	f2c0 0108 	movt	r1, #8
   8214a:	4788      	blx	r1
   8214c:	2801      	cmp	r0, #1
   8214e:	d115      	bne.n	8217c <xQueueGenericReceive+0xcc>
						{
							portYIELD_WITHIN_API();
   82150:	f641 1061 	movw	r0, #6497	; 0x1961
   82154:	f2c0 0008 	movt	r0, #8
   82158:	4780      	blx	r0
   8215a:	e00f      	b.n	8217c <xQueueGenericReceive+0xcc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   8215c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8215e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   82160:	b160      	cbz	r0, 8217c <xQueueGenericReceive+0xcc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82162:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82166:	f642 4165 	movw	r1, #11365	; 0x2c65
   8216a:	f2c0 0108 	movt	r1, #8
   8216e:	4788      	blx	r1
   82170:	b120      	cbz	r0, 8217c <xQueueGenericReceive+0xcc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   82172:	f641 1261 	movw	r2, #6497	; 0x1961
   82176:	f2c0 0208 	movt	r2, #8
   8217a:	4790      	blx	r2
						}
					}
				}

				taskEXIT_CRITICAL();
   8217c:	f641 12ad 	movw	r2, #6573	; 0x19ad
   82180:	f2c0 0208 	movt	r2, #8
   82184:	4790      	blx	r2
				return pdPASS;
   82186:	f04f 0001 	mov.w	r0, #1
   8218a:	e071      	b.n	82270 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   8218c:	9a01      	ldr	r2, [sp, #4]
   8218e:	b93a      	cbnz	r2, 821a0 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   82190:	f641 12ad 	movw	r2, #6573	; 0x19ad
   82194:	f2c0 0208 	movt	r2, #8
   82198:	4790      	blx	r2
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   8219a:	f04f 0000 	mov.w	r0, #0
   8219e:	e067      	b.n	82270 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
   821a0:	b91f      	cbnz	r7, 821aa <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   821a2:	a802      	add	r0, sp, #8
   821a4:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   821a6:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   821aa:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   821ac:	f242 6375 	movw	r3, #9845	; 0x2675
   821b0:	f2c0 0308 	movt	r3, #8
   821b4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   821b6:	47b0      	blx	r6
   821b8:	6c60      	ldr	r0, [r4, #68]	; 0x44
   821ba:	f1b0 3fff 	cmp.w	r0, #4294967295
   821be:	bf04      	itt	eq
   821c0:	2000      	moveq	r0, #0
   821c2:	6460      	streq	r0, [r4, #68]	; 0x44
   821c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   821c6:	f1b1 3fff 	cmp.w	r1, #4294967295
   821ca:	bf04      	itt	eq
   821cc:	2100      	moveq	r1, #0
   821ce:	64a1      	streq	r1, [r4, #72]	; 0x48
   821d0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   821d2:	a802      	add	r0, sp, #8
   821d4:	a901      	add	r1, sp, #4
   821d6:	f642 523d 	movw	r2, #11581	; 0x2d3d
   821da:	f2c0 0208 	movt	r2, #8
   821de:	4790      	blx	r2
   821e0:	2800      	cmp	r0, #0
   821e2:	d138      	bne.n	82256 <xQueueGenericReceive+0x1a6>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   821e4:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   821e6:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   821ea:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   821ec:	f1b8 0f00 	cmp.w	r8, #0
   821f0:	d125      	bne.n	8223e <xQueueGenericReceive+0x18e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   821f2:	6823      	ldr	r3, [r4, #0]
   821f4:	b93b      	cbnz	r3, 82206 <xQueueGenericReceive+0x156>
					{
						portENTER_CRITICAL();
   821f6:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   821f8:	6860      	ldr	r0, [r4, #4]
   821fa:	f642 612d 	movw	r1, #11821	; 0x2e2d
   821fe:	f2c0 0108 	movt	r1, #8
   82202:	4788      	blx	r1
						}
						portEXIT_CRITICAL();
   82204:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82206:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8220a:	9901      	ldr	r1, [sp, #4]
   8220c:	f642 329d 	movw	r2, #11165	; 0x2b9d
   82210:	f2c0 0208 	movt	r2, #8
   82214:	4790      	blx	r2
				prvUnlockQueue( pxQueue );
   82216:	4620      	mov	r0, r4
   82218:	f641 433d 	movw	r3, #7229	; 0x1c3d
   8221c:	f2c0 0308 	movt	r3, #8
   82220:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   82222:	f642 003d 	movw	r0, #10301	; 0x283d
   82226:	f2c0 0008 	movt	r0, #8
   8222a:	4780      	blx	r0
   8222c:	2800      	cmp	r0, #0
   8222e:	f47f af69 	bne.w	82104 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
   82232:	f641 1161 	movw	r1, #6497	; 0x1961
   82236:	f2c0 0108 	movt	r1, #8
   8223a:	4788      	blx	r1
   8223c:	e762      	b.n	82104 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8223e:	4620      	mov	r0, r4
   82240:	f641 413d 	movw	r1, #7229	; 0x1c3d
   82244:	f2c0 0108 	movt	r1, #8
   82248:	4788      	blx	r1
				( void ) xTaskResumeAll();
   8224a:	f642 023d 	movw	r2, #10301	; 0x283d
   8224e:	f2c0 0208 	movt	r2, #8
   82252:	4790      	blx	r2
   82254:	e756      	b.n	82104 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   82256:	4620      	mov	r0, r4
   82258:	f641 433d 	movw	r3, #7229	; 0x1c3d
   8225c:	f2c0 0308 	movt	r3, #8
   82260:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82262:	f642 003d 	movw	r0, #10301	; 0x283d
   82266:	f2c0 0008 	movt	r0, #8
   8226a:	4780      	blx	r0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   8226c:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   82270:	b005      	add	sp, #20
   82272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82276:	bf00      	nop

00082278 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   82278:	b538      	push	{r3, r4, r5, lr}
   8227a:	4604      	mov	r4, r0
   8227c:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8227e:	f641 1385 	movw	r3, #6533	; 0x1985
   82282:	f2c0 0308 	movt	r3, #8
   82286:	4798      	blx	r3
   82288:	6c60      	ldr	r0, [r4, #68]	; 0x44
   8228a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8228e:	bf04      	itt	eq
   82290:	2000      	moveq	r0, #0
   82292:	6460      	streq	r0, [r4, #68]	; 0x44
   82294:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   82296:	f1b1 3fff 	cmp.w	r1, #4294967295
   8229a:	bf04      	itt	eq
   8229c:	2100      	moveq	r1, #0
   8229e:	64a1      	streq	r1, [r4, #72]	; 0x48
   822a0:	f641 12ad 	movw	r2, #6573	; 0x19ad
   822a4:	f2c0 0208 	movt	r2, #8
   822a8:	4790      	blx	r2
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   822aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   822ac:	b93b      	cbnz	r3, 822be <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   822ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
   822b2:	4629      	mov	r1, r5
   822b4:	f642 4211 	movw	r2, #11281	; 0x2c11
   822b8:	f2c0 0208 	movt	r2, #8
   822bc:	4790      	blx	r2
		}
		prvUnlockQueue( pxQueue );
   822be:	4620      	mov	r0, r4
   822c0:	f641 413d 	movw	r1, #7229	; 0x1c3d
   822c4:	f2c0 0108 	movt	r1, #8
   822c8:	4788      	blx	r1
   822ca:	bd38      	pop	{r3, r4, r5, pc}

000822cc <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   822cc:	b510      	push	{r4, lr}
   822ce:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   822d0:	f64a 2384 	movw	r3, #43652	; 0xaa84
   822d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822d8:	6818      	ldr	r0, [r3, #0]
   822da:	6044      	str	r4, [r0, #4]

	if( xTimeToWake < xTickCount )
   822dc:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   822e0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   822e4:	680a      	ldr	r2, [r1, #0]
   822e6:	4294      	cmp	r4, r2
   822e8:	d211      	bcs.n	8230e <prvAddCurrentTaskToDelayedList+0x42>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   822ea:	f64a 22a4 	movw	r2, #43684	; 0xaaa4
   822ee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   822f2:	6810      	ldr	r0, [r2, #0]
   822f4:	f64a 2384 	movw	r3, #43652	; 0xaa84
   822f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822fc:	6819      	ldr	r1, [r3, #0]
   822fe:	f101 0104 	add.w	r1, r1, #4
   82302:	f641 02a5 	movw	r2, #6309	; 0x18a5
   82306:	f2c0 0208 	movt	r2, #8
   8230a:	4790      	blx	r2
   8230c:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8230e:	f64a 13e4 	movw	r3, #43492	; 0xa9e4
   82312:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82316:	6818      	ldr	r0, [r3, #0]
   82318:	f64a 2184 	movw	r1, #43652	; 0xaa84
   8231c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82320:	6809      	ldr	r1, [r1, #0]
   82322:	f101 0104 	add.w	r1, r1, #4
   82326:	f641 02a5 	movw	r2, #6309	; 0x18a5
   8232a:	f2c0 0208 	movt	r2, #8
   8232e:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   82330:	f240 000c 	movw	r0, #12
   82334:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82338:	6803      	ldr	r3, [r0, #0]
   8233a:	429c      	cmp	r4, r3
   8233c:	d204      	bcs.n	82348 <prvAddCurrentTaskToDelayedList+0x7c>
		{
			xNextTaskUnblockTime = xTimeToWake;
   8233e:	f240 010c 	movw	r1, #12
   82342:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82346:	600c      	str	r4, [r1, #0]
   82348:	bd10      	pop	{r4, pc}
   8234a:	bf00      	nop

0008234c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   8234c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82350:	460f      	mov	r7, r1
   82352:	4690      	mov	r8, r2
   82354:	469a      	mov	sl, r3
   82356:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   82358:	9e0c      	ldr	r6, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   8235a:	4681      	mov	r9, r0
   8235c:	b930      	cbnz	r0, 8236c <xTaskGenericCreate+0x20>
   8235e:	f641 1771 	movw	r7, #6513	; 0x1971
   82362:	f2c0 0708 	movt	r7, #8
   82366:	47b8      	blx	r7
   82368:	bf00      	nop
   8236a:	e7fd      	b.n	82368 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   8236c:	2d04      	cmp	r5, #4
   8236e:	d906      	bls.n	8237e <xTaskGenericCreate+0x32>
   82370:	f641 1571 	movw	r5, #6513	; 0x1971
   82374:	f2c0 0508 	movt	r5, #8
   82378:	47a8      	blx	r5
   8237a:	bf00      	nop
   8237c:	e7fd      	b.n	8237a <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   8237e:	f04f 004c 	mov.w	r0, #76	; 0x4c
   82382:	f641 3301 	movw	r3, #6913	; 0x1b01
   82386:	f2c0 0308 	movt	r3, #8
   8238a:	4798      	blx	r3

	if( pxNewTCB != NULL )
   8238c:	4604      	mov	r4, r0
   8238e:	2800      	cmp	r0, #0
   82390:	f000 8127 	beq.w	825e2 <xTaskGenericCreate+0x296>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   82394:	2e00      	cmp	r6, #0
   82396:	f040 8122 	bne.w	825de <xTaskGenericCreate+0x292>
   8239a:	ea4f 0088 	mov.w	r0, r8, lsl #2
   8239e:	f641 3101 	movw	r1, #6913	; 0x1b01
   823a2:	f2c0 0108 	movt	r1, #8
   823a6:	4788      	blx	r1
   823a8:	4606      	mov	r6, r0
   823aa:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   823ac:	b930      	cbnz	r0, 823bc <xTaskGenericCreate+0x70>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   823ae:	4620      	mov	r0, r4
   823b0:	f641 4201 	movw	r2, #7169	; 0x1c01
   823b4:	f2c0 0208 	movt	r2, #8
   823b8:	4790      	blx	r2
   823ba:	e112      	b.n	825e2 <xTaskGenericCreate+0x296>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   823bc:	4630      	mov	r0, r6
   823be:	f04f 01a5 	mov.w	r1, #165	; 0xa5
   823c2:	ea4f 0288 	mov.w	r2, r8, lsl #2
   823c6:	f643 76db 	movw	r6, #16347	; 0x3fdb
   823ca:	f2c0 0608 	movt	r6, #8
   823ce:	47b0      	blx	r6
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   823d0:	f108 38ff 	add.w	r8, r8, #4294967295
   823d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   823d6:	eb00 0288 	add.w	r2, r0, r8, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   823da:	f022 0b07 	bic.w	fp, r2, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   823de:	f104 0034 	add.w	r0, r4, #52	; 0x34
   823e2:	4639      	mov	r1, r7
   823e4:	f04f 020a 	mov.w	r2, #10
   823e8:	f244 17ef 	movw	r7, #16879	; 0x41ef
   823ec:	f2c0 0708 	movt	r7, #8
   823f0:	47b8      	blx	r7
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   823f2:	f04f 0300 	mov.w	r3, #0
   823f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   823fa:	2d04      	cmp	r5, #4
   823fc:	bf34      	ite	cc
   823fe:	462e      	movcc	r6, r5
   82400:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   82402:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   82404:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   82406:	f104 0704 	add.w	r7, r4, #4
   8240a:	4638      	mov	r0, r7
   8240c:	f641 087d 	movw	r8, #6269	; 0x187d
   82410:	f2c0 0808 	movt	r8, #8
   82414:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   82416:	f104 0018 	add.w	r0, r4, #24
   8241a:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8241c:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   8241e:	f1c6 0605 	rsb	r6, r6, #5
   82422:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   82424:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   82426:	4658      	mov	r0, fp
   82428:	4649      	mov	r1, r9
   8242a:	4652      	mov	r2, sl
   8242c:	f641 1321 	movw	r3, #6433	; 0x1921
   82430:	f2c0 0308 	movt	r3, #8
   82434:	4798      	blx	r3
   82436:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82438:	f010 0f07 	tst.w	r0, #7
   8243c:	d006      	beq.n	8244c <xTaskGenericCreate+0x100>
   8243e:	f641 1471 	movw	r4, #6513	; 0x1971
   82442:	f2c0 0408 	movt	r4, #8
   82446:	47a0      	blx	r4
   82448:	bf00      	nop
   8244a:	e7fd      	b.n	82448 <xTaskGenericCreate+0xfc>

		if( ( void * ) pxCreatedTask != NULL )
   8244c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8244e:	b101      	cbz	r1, 82452 <xTaskGenericCreate+0x106>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   82450:	600c      	str	r4, [r1, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   82452:	f641 1085 	movw	r0, #6533	; 0x1985
   82456:	f2c0 0008 	movt	r0, #8
   8245a:	4780      	blx	r0
		{
			uxCurrentNumberOfTasks++;
   8245c:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   82460:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82464:	681a      	ldr	r2, [r3, #0]
   82466:	f102 0201 	add.w	r2, r2, #1
   8246a:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   8246c:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82470:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82474:	6808      	ldr	r0, [r1, #0]
   82476:	2800      	cmp	r0, #0
   82478:	d149      	bne.n	8250e <xTaskGenericCreate+0x1c2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8247a:	f64a 2184 	movw	r1, #43652	; 0xaa84
   8247e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82482:	600c      	str	r4, [r1, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   82484:	f64a 20c4 	movw	r0, #43716	; 0xaac4
   82488:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8248c:	6803      	ldr	r3, [r0, #0]
   8248e:	2b01      	cmp	r3, #1
   82490:	d150      	bne.n	82534 <xTaskGenericCreate+0x1e8>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   82492:	f64a 291c 	movw	r9, #43548	; 0xaa1c
   82496:	f2c2 0907 	movt	r9, #8199	; 0x2007
   8249a:	4648      	mov	r0, r9
   8249c:	f641 0665 	movw	r6, #6245	; 0x1865
   824a0:	f2c0 0608 	movt	r6, #8
   824a4:	47b0      	blx	r6
   824a6:	f109 0014 	add.w	r0, r9, #20
   824aa:	47b0      	blx	r6
   824ac:	f109 0028 	add.w	r0, r9, #40	; 0x28
   824b0:	47b0      	blx	r6
   824b2:	f109 003c 	add.w	r0, r9, #60	; 0x3c
   824b6:	47b0      	blx	r6
   824b8:	f109 0050 	add.w	r0, r9, #80	; 0x50
   824bc:	47b0      	blx	r6
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   824be:	f64a 29ac 	movw	r9, #43692	; 0xaaac
   824c2:	f2c2 0907 	movt	r9, #8199	; 0x2007
   824c6:	4648      	mov	r0, r9
   824c8:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   824ca:	f64a 2804 	movw	r8, #43524	; 0xaa04
   824ce:	f2c2 0807 	movt	r8, #8199	; 0x2007
   824d2:	4640      	mov	r0, r8
   824d4:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   824d6:	f64a 2088 	movw	r0, #43656	; 0xaa88
   824da:	f2c2 0007 	movt	r0, #8199	; 0x2007
   824de:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   824e0:	f64a 10f0 	movw	r0, #43504	; 0xa9f0
   824e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   824e8:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   824ea:	f64a 10d0 	movw	r0, #43472	; 0xa9d0
   824ee:	f2c2 0007 	movt	r0, #8199	; 0x2007
   824f2:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   824f4:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   824f8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   824fc:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   82500:	f64a 21a4 	movw	r1, #43684	; 0xaaa4
   82504:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82508:	f8c1 8000 	str.w	r8, [r1]
   8250c:	e012      	b.n	82534 <xTaskGenericCreate+0x1e8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8250e:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
   82512:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82516:	681a      	ldr	r2, [r3, #0]
   82518:	b962      	cbnz	r2, 82534 <xTaskGenericCreate+0x1e8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8251a:	f64a 2184 	movw	r1, #43652	; 0xaa84
   8251e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82522:	6808      	ldr	r0, [r1, #0]
   82524:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82526:	429d      	cmp	r5, r3
   82528:	d304      	bcc.n	82534 <xTaskGenericCreate+0x1e8>
					{
						pxCurrentTCB = pxNewTCB;
   8252a:	f64a 2284 	movw	r2, #43652	; 0xaa84
   8252e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82532:	6014      	str	r4, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   82534:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82536:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   8253a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8253e:	681a      	ldr	r2, [r3, #0]
   82540:	4290      	cmp	r0, r2
   82542:	d904      	bls.n	8254e <xTaskGenericCreate+0x202>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   82544:	f64a 21c8 	movw	r1, #43720	; 0xaac8
   82548:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8254c:	6008      	str	r0, [r1, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   8254e:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   82552:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82556:	681a      	ldr	r2, [r3, #0]
   82558:	6422      	str	r2, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   8255a:	f102 0201 	add.w	r2, r2, #1
   8255e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   82560:	f64a 2118 	movw	r1, #43544	; 0xaa18
   82564:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82568:	680b      	ldr	r3, [r1, #0]
   8256a:	4298      	cmp	r0, r3
   8256c:	d904      	bls.n	82578 <xTaskGenericCreate+0x22c>
   8256e:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82572:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82576:	6010      	str	r0, [r2, #0]
   82578:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   8257c:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82580:	4603      	mov	r3, r0
   82582:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82586:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   8258a:	4639      	mov	r1, r7
   8258c:	f641 0285 	movw	r2, #6277	; 0x1885
   82590:	f2c0 0208 	movt	r2, #8
   82594:	4790      	blx	r2

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   82596:	f641 11ad 	movw	r1, #6573	; 0x19ad
   8259a:	f2c0 0108 	movt	r1, #8
   8259e:	4788      	blx	r1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   825a0:	f64a 10e8 	movw	r0, #43496	; 0xa9e8
   825a4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   825a8:	6803      	ldr	r3, [r0, #0]
   825aa:	b183      	cbz	r3, 825ce <xTaskGenericCreate+0x282>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   825ac:	f64a 2284 	movw	r2, #43652	; 0xaa84
   825b0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   825b4:	6811      	ldr	r1, [r2, #0]
   825b6:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   825b8:	4285      	cmp	r5, r0
   825ba:	d90c      	bls.n	825d6 <xTaskGenericCreate+0x28a>
			{
				portYIELD_WITHIN_API();
   825bc:	f641 1361 	movw	r3, #6497	; 0x1961
   825c0:	f2c0 0308 	movt	r3, #8
   825c4:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   825c6:	f04f 0001 	mov.w	r0, #1
   825ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825ce:	f04f 0001 	mov.w	r0, #1
   825d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825d6:	f04f 0001 	mov.w	r0, #1
   825da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   825de:	6306      	str	r6, [r0, #48]	; 0x30
   825e0:	e6ec      	b.n	823bc <xTaskGenericCreate+0x70>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   825e2:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   825e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825ea:	bf00      	nop

000825ec <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   825ec:	b510      	push	{r4, lr}
   825ee:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   825f0:	f04f 0300 	mov.w	r3, #0
   825f4:	9300      	str	r3, [sp, #0]
   825f6:	9301      	str	r3, [sp, #4]
   825f8:	9302      	str	r3, [sp, #8]
   825fa:	9303      	str	r3, [sp, #12]
   825fc:	f642 1089 	movw	r0, #10633	; 0x2989
   82600:	f2c0 0008 	movt	r0, #8
   82604:	f24a 61fc 	movw	r1, #42748	; 0xa6fc
   82608:	f2c0 0108 	movt	r1, #8
   8260c:	f04f 0282 	mov.w	r2, #130	; 0x82
   82610:	f242 344d 	movw	r4, #9037	; 0x234d
   82614:	f2c0 0408 	movt	r4, #8
   82618:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8261a:	2801      	cmp	r0, #1
   8261c:	d11f      	bne.n	8265e <vTaskStartScheduler+0x72>
		{
			xReturn = xTimerCreateTimerTask();
   8261e:	f243 0311 	movw	r3, #12305	; 0x3011
   82622:	f2c0 0308 	movt	r3, #8
   82626:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   82628:	2801      	cmp	r0, #1
   8262a:	d118      	bne.n	8265e <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   8262c:	f641 1171 	movw	r1, #6513	; 0x1971
   82630:	f2c0 0108 	movt	r1, #8
   82634:	4788      	blx	r1

		xSchedulerRunning = pdTRUE;
   82636:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
   8263a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8263e:	f04f 0201 	mov.w	r2, #1
   82642:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   82644:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   82648:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8264c:	f04f 0100 	mov.w	r1, #0
   82650:	6001      	str	r1, [r0, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   82652:	f641 2365 	movw	r3, #6757	; 0x1a65
   82656:	f2c0 0308 	movt	r3, #8
   8265a:	4798      	blx	r3
   8265c:	e007      	b.n	8266e <vTaskStartScheduler+0x82>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   8265e:	b930      	cbnz	r0, 8266e <vTaskStartScheduler+0x82>
   82660:	f641 1071 	movw	r0, #6513	; 0x1971
   82664:	f2c0 0008 	movt	r0, #8
   82668:	4780      	blx	r0
   8266a:	bf00      	nop
   8266c:	e7fd      	b.n	8266a <vTaskStartScheduler+0x7e>
}
   8266e:	b004      	add	sp, #16
   82670:	bd10      	pop	{r4, pc}
   82672:	bf00      	nop

00082674 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   82674:	f64a 2380 	movw	r3, #43648	; 0xaa80
   82678:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8267c:	681a      	ldr	r2, [r3, #0]
   8267e:	f102 0201 	add.w	r2, r2, #1
   82682:	601a      	str	r2, [r3, #0]
   82684:	4770      	bx	lr
   82686:	bf00      	nop

00082688 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   82688:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8268a:	f641 1385 	movw	r3, #6533	; 0x1985
   8268e:	f2c0 0308 	movt	r3, #8
   82692:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82694:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   82698:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8269c:	6804      	ldr	r4, [r0, #0]
	}
	taskEXIT_CRITICAL();
   8269e:	f641 11ad 	movw	r1, #6573	; 0x19ad
   826a2:	f2c0 0108 	movt	r1, #8
   826a6:	4788      	blx	r1

	return xTicks;
}
   826a8:	4620      	mov	r0, r4
   826aa:	bd10      	pop	{r4, pc}

000826ac <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   826ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   826b0:	f64a 2380 	movw	r3, #43648	; 0xaa80
   826b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826b8:	6818      	ldr	r0, [r3, #0]
   826ba:	2800      	cmp	r0, #0
   826bc:	f040 80b3 	bne.w	82826 <vTaskIncrementTick+0x17a>
	{
		++xTickCount;
   826c0:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   826c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826c8:	6818      	ldr	r0, [r3, #0]
   826ca:	f100 0001 	add.w	r0, r0, #1
   826ce:	6018      	str	r0, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   826d0:	6819      	ldr	r1, [r3, #0]
   826d2:	2900      	cmp	r1, #0
   826d4:	d139      	bne.n	8274a <vTaskIncrementTick+0x9e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   826d6:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   826da:	f2c2 0207 	movt	r2, #8199	; 0x2007
   826de:	6813      	ldr	r3, [r2, #0]
   826e0:	6818      	ldr	r0, [r3, #0]
   826e2:	b130      	cbz	r0, 826f2 <vTaskIncrementTick+0x46>
   826e4:	f641 1571 	movw	r5, #6513	; 0x1971
   826e8:	f2c0 0508 	movt	r5, #8
   826ec:	47a8      	blx	r5
   826ee:	bf00      	nop
   826f0:	e7fd      	b.n	826ee <vTaskIncrementTick+0x42>

			pxTemp = pxDelayedTaskList;
   826f2:	f64a 13e4 	movw	r3, #43492	; 0xa9e4
   826f6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826fa:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   826fc:	f64a 22a4 	movw	r2, #43684	; 0xaaa4
   82700:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82704:	6810      	ldr	r0, [r2, #0]
   82706:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   82708:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8270a:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   8270e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82712:	6811      	ldr	r1, [r2, #0]
   82714:	f101 0101 	add.w	r1, r1, #1
   82718:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8271a:	681b      	ldr	r3, [r3, #0]
   8271c:	6818      	ldr	r0, [r3, #0]
   8271e:	b938      	cbnz	r0, 82730 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   82720:	f240 030c 	movw	r3, #12
   82724:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82728:	f04f 30ff 	mov.w	r0, #4294967295
   8272c:	6018      	str	r0, [r3, #0]
   8272e:	e00c      	b.n	8274a <vTaskIncrementTick+0x9e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82730:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   82734:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82738:	6811      	ldr	r1, [r2, #0]
   8273a:	68cb      	ldr	r3, [r1, #12]
   8273c:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8273e:	6842      	ldr	r2, [r0, #4]
   82740:	f240 010c 	movw	r1, #12
   82744:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82748:	600a      	str	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8274a:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   8274e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82752:	6811      	ldr	r1, [r2, #0]
   82754:	f240 030c 	movw	r3, #12
   82758:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8275c:	6818      	ldr	r0, [r3, #0]
   8275e:	4281      	cmp	r1, r0
   82760:	d369      	bcc.n	82836 <vTaskIncrementTick+0x18a>
   82762:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   82766:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8276a:	6811      	ldr	r1, [r2, #0]
   8276c:	680b      	ldr	r3, [r1, #0]
   8276e:	b17b      	cbz	r3, 82790 <vTaskIncrementTick+0xe4>
   82770:	f64a 14e4 	movw	r4, #43492	; 0xa9e4
   82774:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82778:	6820      	ldr	r0, [r4, #0]
   8277a:	68c2      	ldr	r2, [r0, #12]
   8277c:	68d4      	ldr	r4, [r2, #12]
   8277e:	6863      	ldr	r3, [r4, #4]
   82780:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   82784:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82788:	6808      	ldr	r0, [r1, #0]
   8278a:	4283      	cmp	r3, r0
   8278c:	d91a      	bls.n	827c4 <vTaskIncrementTick+0x118>
   8278e:	e012      	b.n	827b6 <vTaskIncrementTick+0x10a>
   82790:	f240 030c 	movw	r3, #12
   82794:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82798:	f04f 30ff 	mov.w	r0, #4294967295
   8279c:	6018      	str	r0, [r3, #0]
   8279e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827a2:	6834      	ldr	r4, [r6, #0]
   827a4:	68e2      	ldr	r2, [r4, #12]
   827a6:	68d4      	ldr	r4, [r2, #12]
   827a8:	6863      	ldr	r3, [r4, #4]
   827aa:	4648      	mov	r0, r9
   827ac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   827b0:	6801      	ldr	r1, [r0, #0]
   827b2:	428b      	cmp	r3, r1
   827b4:	d91c      	bls.n	827f0 <vTaskIncrementTick+0x144>
   827b6:	f240 020c 	movw	r2, #12
   827ba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   827be:	6013      	str	r3, [r2, #0]
   827c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827c4:	f641 07e1 	movw	r7, #6369	; 0x18e1
   827c8:	f2c0 0708 	movt	r7, #8
   827cc:	f64a 2818 	movw	r8, #43544	; 0xaa18
   827d0:	f2c2 0807 	movt	r8, #8199	; 0x2007
   827d4:	f64a 2b1c 	movw	fp, #43548	; 0xaa1c
   827d8:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   827dc:	f641 0a85 	movw	sl, #6277	; 0x1885
   827e0:	f2c0 0a08 	movt	sl, #8
   827e4:	f64a 16e4 	movw	r6, #43492	; 0xa9e4
   827e8:	f2c2 0607 	movt	r6, #8199	; 0x2007
   827ec:	f64a 29a0 	movw	r9, #43680	; 0xaaa0
   827f0:	f104 0504 	add.w	r5, r4, #4
   827f4:	4628      	mov	r0, r5
   827f6:	47b8      	blx	r7
   827f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   827fa:	b113      	cbz	r3, 82802 <vTaskIncrementTick+0x156>
   827fc:	f104 0018 	add.w	r0, r4, #24
   82800:	47b8      	blx	r7
   82802:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   82804:	f8d8 2000 	ldr.w	r2, [r8]
   82808:	4291      	cmp	r1, r2
   8280a:	bf88      	it	hi
   8280c:	f8c8 1000 	strhi.w	r1, [r8]
   82810:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82814:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   82818:	4629      	mov	r1, r5
   8281a:	47d0      	blx	sl
   8281c:	6833      	ldr	r3, [r6, #0]
   8281e:	6819      	ldr	r1, [r3, #0]
   82820:	2900      	cmp	r1, #0
   82822:	d1be      	bne.n	827a2 <vTaskIncrementTick+0xf6>
   82824:	e7b4      	b.n	82790 <vTaskIncrementTick+0xe4>
	}
	else
	{
		++uxMissedTicks;
   82826:	f64a 11cc 	movw	r1, #43468	; 0xa9cc
   8282a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8282e:	680a      	ldr	r2, [r1, #0]
   82830:	f102 0201 	add.w	r2, r2, #1
   82834:	600a      	str	r2, [r1, #0]
   82836:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8283a:	bf00      	nop

0008283c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   8283c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   82840:	f64a 2380 	movw	r3, #43648	; 0xaa80
   82844:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82848:	6818      	ldr	r0, [r3, #0]
   8284a:	b930      	cbnz	r0, 8285a <xTaskResumeAll+0x1e>
   8284c:	f641 1571 	movw	r5, #6513	; 0x1971
   82850:	f2c0 0508 	movt	r5, #8
   82854:	47a8      	blx	r5
   82856:	bf00      	nop
   82858:	e7fd      	b.n	82856 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8285a:	f641 1185 	movw	r1, #6533	; 0x1985
   8285e:	f2c0 0108 	movt	r1, #8
   82862:	4788      	blx	r1
	{
		--uxSchedulerSuspended;
   82864:	f64a 2480 	movw	r4, #43648	; 0xaa80
   82868:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8286c:	6822      	ldr	r2, [r4, #0]
   8286e:	f102 33ff 	add.w	r3, r2, #4294967295
   82872:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82874:	6820      	ldr	r0, [r4, #0]
   82876:	2800      	cmp	r0, #0
   82878:	d178      	bne.n	8296c <xTaskResumeAll+0x130>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   8287a:	f64a 21c4 	movw	r1, #43716	; 0xaac4
   8287e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82882:	680c      	ldr	r4, [r1, #0]
   82884:	bb4c      	cbnz	r4, 828da <xTaskResumeAll+0x9e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   82886:	f04f 0400 	mov.w	r4, #0
   8288a:	e074      	b.n	82976 <xTaskResumeAll+0x13a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   8288c:	f8d8 200c 	ldr.w	r2, [r8, #12]
   82890:	68d4      	ldr	r4, [r2, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   82892:	f104 0018 	add.w	r0, r4, #24
   82896:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   82898:	f104 0904 	add.w	r9, r4, #4
   8289c:	4648      	mov	r0, r9
   8289e:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   828a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   828a2:	6830      	ldr	r0, [r6, #0]
   828a4:	4283      	cmp	r3, r0
   828a6:	bf88      	it	hi
   828a8:	6033      	strhi	r3, [r6, #0]
   828aa:	4651      	mov	r1, sl
   828ac:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   828b4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   828b8:	4649      	mov	r1, r9
   828ba:	f641 0385 	movw	r3, #6277	; 0x1885
   828be:	f2c0 0308 	movt	r3, #8
   828c2:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   828c4:	f64a 2084 	movw	r0, #43652	; 0xaa84
   828c8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   828cc:	6801      	ldr	r1, [r0, #0]
   828ce:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   828d0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   828d2:	4294      	cmp	r4, r2
   828d4:	bf28      	it	cs
   828d6:	2501      	movcs	r5, #1
   828d8:	e00f      	b.n	828fa <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   828da:	f04f 0500 	mov.w	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   828de:	f64a 2888 	movw	r8, #43656	; 0xaa88
   828e2:	f2c2 0807 	movt	r8, #8199	; 0x2007
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   828e6:	f641 07e1 	movw	r7, #6369	; 0x18e1
   828ea:	f2c0 0708 	movt	r7, #8
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   828ee:	f64a 2618 	movw	r6, #43544	; 0xaa18
   828f2:	f2c2 0607 	movt	r6, #8199	; 0x2007
   828f6:	f64a 2a1c 	movw	sl, #43548	; 0xaa1c
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   828fa:	f8d8 2000 	ldr.w	r2, [r8]
   828fe:	2a00      	cmp	r2, #0
   82900:	d1c4      	bne.n	8288c <xTaskResumeAll+0x50>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82902:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   82906:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8290a:	6818      	ldr	r0, [r3, #0]
   8290c:	b1b0      	cbz	r0, 8293c <xTaskResumeAll+0x100>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8290e:	f64a 12cc 	movw	r2, #43468	; 0xa9cc
   82912:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82916:	6813      	ldr	r3, [r2, #0]
   82918:	b1cb      	cbz	r3, 8294e <xTaskResumeAll+0x112>
					{
						vTaskIncrementTick();
   8291a:	f242 65ad 	movw	r5, #9901	; 0x26ad
   8291e:	f2c0 0508 	movt	r5, #8
						--uxMissedTicks;
   82922:	f64a 14cc 	movw	r4, #43468	; 0xa9cc
   82926:	f2c2 0407 	movt	r4, #8199	; 0x2007
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   8292a:	47a8      	blx	r5
						--uxMissedTicks;
   8292c:	6820      	ldr	r0, [r4, #0]
   8292e:	f100 31ff 	add.w	r1, r0, #4294967295
   82932:	6021      	str	r1, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82934:	6822      	ldr	r2, [r4, #0]
   82936:	2a00      	cmp	r2, #0
   82938:	d1f7      	bne.n	8292a <xTaskResumeAll+0xee>
   8293a:	e008      	b.n	8294e <xTaskResumeAll+0x112>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   8293c:	2d01      	cmp	r5, #1
   8293e:	d006      	beq.n	8294e <xTaskResumeAll+0x112>
   82940:	f64a 21c0 	movw	r1, #43712	; 0xaac0
   82944:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82948:	680c      	ldr	r4, [r1, #0]
   8294a:	2c01      	cmp	r4, #1
   8294c:	d111      	bne.n	82972 <xTaskResumeAll+0x136>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   8294e:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   82952:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82956:	f04f 0400 	mov.w	r4, #0
   8295a:	601c      	str	r4, [r3, #0]
					portYIELD_WITHIN_API();
   8295c:	f641 1061 	movw	r0, #6497	; 0x1961
   82960:	f2c0 0008 	movt	r0, #8
   82964:	4780      	blx	r0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   82966:	f04f 0401 	mov.w	r4, #1
   8296a:	e004      	b.n	82976 <xTaskResumeAll+0x13a>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8296c:	f04f 0400 	mov.w	r4, #0
   82970:	e001      	b.n	82976 <xTaskResumeAll+0x13a>
   82972:	f04f 0400 	mov.w	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   82976:	f641 11ad 	movw	r1, #6573	; 0x19ad
   8297a:	f2c0 0108 	movt	r1, #8
   8297e:	4788      	blx	r1

	return xAlreadyYielded;
}
   82980:	4620      	mov	r0, r4
   82982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82986:	bf00      	nop

00082988 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   82988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8298c:	f64a 15ec 	movw	r5, #43500	; 0xa9ec
   82990:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			vTaskSuspendAll();
   82994:	f242 6875 	movw	r8, #9845	; 0x2675
   82998:	f2c0 0808 	movt	r8, #8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   8299c:	f64a 16f0 	movw	r6, #43504	; 0xa9f0
   829a0:	f2c2 0607 	movt	r6, #8199	; 0x2007
			xTaskResumeAll();
   829a4:	f642 073d 	movw	r7, #10301	; 0x283d
   829a8:	e02d      	b.n	82a06 <prvIdleTask+0x7e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   829aa:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   829ac:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   829ae:	463b      	mov	r3, r7
   829b0:	f2c0 0308 	movt	r3, #8
   829b4:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   829b6:	b334      	cbz	r4, 82a06 <prvIdleTask+0x7e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   829b8:	f641 1085 	movw	r0, #6533	; 0x1985
   829bc:	f2c0 0008 	movt	r0, #8
   829c0:	4780      	blx	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   829c2:	68f1      	ldr	r1, [r6, #12]
   829c4:	68cc      	ldr	r4, [r1, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   829c6:	f104 0004 	add.w	r0, r4, #4
   829ca:	f641 02e1 	movw	r2, #6369	; 0x18e1
   829ce:	f2c0 0208 	movt	r2, #8
   829d2:	4790      	blx	r2
					--uxCurrentNumberOfTasks;
   829d4:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   829d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   829dc:	6818      	ldr	r0, [r3, #0]
   829de:	f100 31ff 	add.w	r1, r0, #4294967295
   829e2:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
   829e4:	682a      	ldr	r2, [r5, #0]
   829e6:	f102 33ff 	add.w	r3, r2, #4294967295
   829ea:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   829ec:	f641 10ad 	movw	r0, #6573	; 0x19ad
   829f0:	f2c0 0008 	movt	r0, #8
   829f4:	4780      	blx	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   829f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   829f8:	f641 4901 	movw	r9, #7169	; 0x1c01
   829fc:	f2c0 0908 	movt	r9, #8
   82a00:	47c8      	blx	r9
		vPortFree( pxTCB );
   82a02:	4620      	mov	r0, r4
   82a04:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82a06:	682b      	ldr	r3, [r5, #0]
   82a08:	2b00      	cmp	r3, #0
   82a0a:	d1ce      	bne.n	829aa <prvIdleTask+0x22>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82a0c:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82a10:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82a14:	6801      	ldr	r1, [r0, #0]
   82a16:	2901      	cmp	r1, #1
   82a18:	d9f5      	bls.n	82a06 <prvIdleTask+0x7e>
			{
				taskYIELD();
   82a1a:	f641 1261 	movw	r2, #6497	; 0x1961
   82a1e:	f2c0 0208 	movt	r2, #8
   82a22:	4790      	blx	r2
   82a24:	e7ef      	b.n	82a06 <prvIdleTask+0x7e>
   82a26:	bf00      	nop

00082a28 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   82a28:	b538      	push	{r3, r4, r5, lr}
   82a2a:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   82a2c:	4605      	mov	r5, r0
   82a2e:	b930      	cbnz	r0, 82a3e <vTaskDelayUntil+0x16>
   82a30:	f641 1471 	movw	r4, #6513	; 0x1971
   82a34:	f2c0 0408 	movt	r4, #8
   82a38:	47a0      	blx	r4
   82a3a:	bf00      	nop
   82a3c:	e7fd      	b.n	82a3a <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
   82a3e:	b931      	cbnz	r1, 82a4e <vTaskDelayUntil+0x26>
   82a40:	f641 1571 	movw	r5, #6513	; 0x1971
   82a44:	f2c0 0508 	movt	r5, #8
   82a48:	47a8      	blx	r5
   82a4a:	bf00      	nop
   82a4c:	e7fd      	b.n	82a4a <vTaskDelayUntil+0x22>

		vTaskSuspendAll();
   82a4e:	f242 6375 	movw	r3, #9845	; 0x2675
   82a52:	f2c0 0308 	movt	r3, #8
   82a56:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   82a58:	6828      	ldr	r0, [r5, #0]
   82a5a:	1904      	adds	r4, r0, r4

			if( xTickCount < *pxPreviousWakeTime )
   82a5c:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82a60:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a64:	6811      	ldr	r1, [r2, #0]
   82a66:	4288      	cmp	r0, r1
   82a68:	d90a      	bls.n	82a80 <vTaskDelayUntil+0x58>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   82a6a:	42a0      	cmp	r0, r4
   82a6c:	d932      	bls.n	82ad4 <vTaskDelayUntil+0xac>
   82a6e:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82a72:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a76:	6811      	ldr	r1, [r2, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82a78:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   82a7a:	428c      	cmp	r4, r1
   82a7c:	d91c      	bls.n	82ab8 <vTaskDelayUntil+0x90>
   82a7e:	e009      	b.n	82a94 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   82a80:	42a0      	cmp	r0, r4
   82a82:	d825      	bhi.n	82ad0 <vTaskDelayUntil+0xa8>
   82a84:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   82a88:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a8c:	6818      	ldr	r0, [r3, #0]
   82a8e:	4284      	cmp	r4, r0
   82a90:	d81e      	bhi.n	82ad0 <vTaskDelayUntil+0xa8>
   82a92:	e01f      	b.n	82ad4 <vTaskDelayUntil+0xac>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82a94:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82a98:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a9c:	6818      	ldr	r0, [r3, #0]
   82a9e:	f100 0004 	add.w	r0, r0, #4
   82aa2:	f641 02e1 	movw	r2, #6369	; 0x18e1
   82aa6:	f2c0 0208 	movt	r2, #8
   82aaa:	4790      	blx	r2
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82aac:	4620      	mov	r0, r4
   82aae:	f242 21cd 	movw	r1, #8909	; 0x22cd
   82ab2:	f2c0 0108 	movt	r1, #8
   82ab6:	4788      	blx	r1
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82ab8:	f642 003d 	movw	r0, #10301	; 0x283d
   82abc:	f2c0 0008 	movt	r0, #8
   82ac0:	4780      	blx	r0

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82ac2:	b948      	cbnz	r0, 82ad8 <vTaskDelayUntil+0xb0>
		{
			portYIELD_WITHIN_API();
   82ac4:	f641 1361 	movw	r3, #6497	; 0x1961
   82ac8:	f2c0 0308 	movt	r3, #8
   82acc:	4798      	blx	r3
   82ace:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82ad0:	602c      	str	r4, [r5, #0]
   82ad2:	e7df      	b.n	82a94 <vTaskDelayUntil+0x6c>
   82ad4:	602c      	str	r4, [r5, #0]
   82ad6:	e7ef      	b.n	82ab8 <vTaskDelayUntil+0x90>
   82ad8:	bd38      	pop	{r3, r4, r5, pc}
   82ada:	bf00      	nop

00082adc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82adc:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   82ade:	f64a 2380 	movw	r3, #43648	; 0xaa80
   82ae2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ae6:	6818      	ldr	r0, [r3, #0]
   82ae8:	b9a8      	cbnz	r0, 82b16 <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82aea:	f64a 2118 	movw	r1, #43544	; 0xaa18
   82aee:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82af2:	680a      	ldr	r2, [r1, #0]
   82af4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   82af8:	ea4f 0083 	mov.w	r0, r3, lsl #2
   82afc:	f64a 211c 	movw	r1, #43548	; 0xaa1c
   82b00:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b04:	580a      	ldr	r2, [r1, r0]
   82b06:	bb52      	cbnz	r2, 82b5e <vTaskSwitchContext+0x82>
   82b08:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82b0c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b10:	6818      	ldr	r0, [r3, #0]
   82b12:	b988      	cbnz	r0, 82b38 <vTaskSwitchContext+0x5c>
   82b14:	e009      	b.n	82b2a <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   82b16:	f64a 21c0 	movw	r1, #43712	; 0xaac0
   82b1a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b1e:	f04f 0001 	mov.w	r0, #1
   82b22:	6008      	str	r0, [r1, #0]
   82b24:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82b26:	681a      	ldr	r2, [r3, #0]
   82b28:	b972      	cbnz	r2, 82b48 <vTaskSwitchContext+0x6c>
   82b2a:	f641 1371 	movw	r3, #6513	; 0x1971
   82b2e:	f2c0 0308 	movt	r3, #8
   82b32:	4798      	blx	r3
   82b34:	bf00      	nop
   82b36:	e7fd      	b.n	82b34 <vTaskSwitchContext+0x58>
   82b38:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82b3c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b40:	f64a 211c 	movw	r1, #43548	; 0xaa1c
   82b44:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b48:	681a      	ldr	r2, [r3, #0]
   82b4a:	f102 30ff 	add.w	r0, r2, #4294967295
   82b4e:	6018      	str	r0, [r3, #0]
   82b50:	681a      	ldr	r2, [r3, #0]
   82b52:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   82b56:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   82b5a:	2a00      	cmp	r2, #0
   82b5c:	d0e3      	beq.n	82b26 <vTaskSwitchContext+0x4a>
   82b5e:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82b62:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b66:	6819      	ldr	r1, [r3, #0]
   82b68:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82b6c:	f64a 221c 	movw	r2, #43548	; 0xaa1c
   82b70:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b74:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   82b78:	6859      	ldr	r1, [r3, #4]
   82b7a:	6848      	ldr	r0, [r1, #4]
   82b7c:	6058      	str	r0, [r3, #4]
   82b7e:	f103 0208 	add.w	r2, r3, #8
   82b82:	4290      	cmp	r0, r2
   82b84:	bf04      	itt	eq
   82b86:	6840      	ldreq	r0, [r0, #4]
   82b88:	6058      	streq	r0, [r3, #4]
   82b8a:	685b      	ldr	r3, [r3, #4]
   82b8c:	68d9      	ldr	r1, [r3, #12]
   82b8e:	f64a 2084 	movw	r0, #43652	; 0xaa84
   82b92:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82b96:	6001      	str	r1, [r0, #0]
   82b98:	bd08      	pop	{r3, pc}
   82b9a:	bf00      	nop

00082b9c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   82b9c:	b538      	push	{r3, r4, r5, lr}
   82b9e:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   82ba0:	b930      	cbnz	r0, 82bb0 <vTaskPlaceOnEventList+0x14>
   82ba2:	f641 1471 	movw	r4, #6513	; 0x1971
   82ba6:	f2c0 0408 	movt	r4, #8
   82baa:	47a0      	blx	r4
   82bac:	bf00      	nop
   82bae:	e7fd      	b.n	82bac <vTaskPlaceOnEventList+0x10>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82bb0:	f64a 2584 	movw	r5, #43652	; 0xaa84
   82bb4:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82bb8:	6829      	ldr	r1, [r5, #0]
   82bba:	f101 0118 	add.w	r1, r1, #24
   82bbe:	f641 02a5 	movw	r2, #6309	; 0x18a5
   82bc2:	f2c0 0208 	movt	r2, #8
   82bc6:	4790      	blx	r2

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82bc8:	6828      	ldr	r0, [r5, #0]
   82bca:	f100 0004 	add.w	r0, r0, #4
   82bce:	f641 01e1 	movw	r1, #6369	; 0x18e1
   82bd2:	f2c0 0108 	movt	r1, #8
   82bd6:	4788      	blx	r1
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   82bd8:	f1b4 3fff 	cmp.w	r4, #4294967295
   82bdc:	d10c      	bne.n	82bf8 <vTaskPlaceOnEventList+0x5c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82bde:	6829      	ldr	r1, [r5, #0]
   82be0:	f64a 10d0 	movw	r0, #43472	; 0xa9d0
   82be4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82be8:	f101 0104 	add.w	r1, r1, #4
   82bec:	f641 0385 	movw	r3, #6277	; 0x1885
   82bf0:	f2c0 0308 	movt	r3, #8
   82bf4:	4798      	blx	r3
   82bf6:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   82bf8:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   82bfc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c00:	6803      	ldr	r3, [r0, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   82c02:	18e0      	adds	r0, r4, r3
   82c04:	f242 22cd 	movw	r2, #8909	; 0x22cd
   82c08:	f2c0 0208 	movt	r2, #8
   82c0c:	4790      	blx	r2
   82c0e:	bd38      	pop	{r3, r4, r5, pc}

00082c10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   82c10:	b538      	push	{r3, r4, r5, lr}
   82c12:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   82c14:	b930      	cbnz	r0, 82c24 <vTaskPlaceOnEventListRestricted+0x14>
   82c16:	f641 1471 	movw	r4, #6513	; 0x1971
   82c1a:	f2c0 0408 	movt	r4, #8
   82c1e:	47a0      	blx	r4
   82c20:	bf00      	nop
   82c22:	e7fd      	b.n	82c20 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82c24:	f64a 2484 	movw	r4, #43652	; 0xaa84
   82c28:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82c2c:	6821      	ldr	r1, [r4, #0]
   82c2e:	f101 0118 	add.w	r1, r1, #24
   82c32:	f641 0285 	movw	r2, #6277	; 0x1885
   82c36:	f2c0 0208 	movt	r2, #8
   82c3a:	4790      	blx	r2

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82c3c:	6820      	ldr	r0, [r4, #0]
   82c3e:	f100 0004 	add.w	r0, r0, #4
   82c42:	f641 01e1 	movw	r1, #6369	; 0x18e1
   82c46:	f2c0 0108 	movt	r1, #8
   82c4a:	4788      	blx	r1
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   82c4c:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   82c50:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c54:	6803      	ldr	r3, [r0, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82c56:	18e8      	adds	r0, r5, r3
   82c58:	f242 22cd 	movw	r2, #8909	; 0x22cd
   82c5c:	f2c0 0208 	movt	r2, #8
   82c60:	4790      	blx	r2
   82c62:	bd38      	pop	{r3, r4, r5, pc}

00082c64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82c64:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   82c66:	68c3      	ldr	r3, [r0, #12]
   82c68:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   82c6a:	b934      	cbnz	r4, 82c7a <xTaskRemoveFromEventList+0x16>
   82c6c:	f641 1471 	movw	r4, #6513	; 0x1971
   82c70:	f2c0 0408 	movt	r4, #8
   82c74:	47a0      	blx	r4
   82c76:	bf00      	nop
   82c78:	e7fd      	b.n	82c76 <xTaskRemoveFromEventList+0x12>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82c7a:	f104 0518 	add.w	r5, r4, #24
   82c7e:	4628      	mov	r0, r5
   82c80:	f641 01e1 	movw	r1, #6369	; 0x18e1
   82c84:	f2c0 0108 	movt	r1, #8
   82c88:	4788      	blx	r1

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82c8a:	f64a 2080 	movw	r0, #43648	; 0xaa80
   82c8e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c92:	6802      	ldr	r2, [r0, #0]
   82c94:	bb22      	cbnz	r2, 82ce0 <xTaskRemoveFromEventList+0x7c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   82c96:	f104 0504 	add.w	r5, r4, #4
   82c9a:	4628      	mov	r0, r5
   82c9c:	f641 01e1 	movw	r1, #6369	; 0x18e1
   82ca0:	f2c0 0108 	movt	r1, #8
   82ca4:	4788      	blx	r1
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   82ca6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82ca8:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82cac:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82cb0:	6813      	ldr	r3, [r2, #0]
   82cb2:	4298      	cmp	r0, r3
   82cb4:	d904      	bls.n	82cc0 <xTaskRemoveFromEventList+0x5c>
   82cb6:	f64a 2118 	movw	r1, #43544	; 0xaa18
   82cba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82cbe:	6008      	str	r0, [r1, #0]
   82cc0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82cc4:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82cc8:	4602      	mov	r2, r0
   82cca:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82cce:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   82cd2:	4629      	mov	r1, r5
   82cd4:	f641 0385 	movw	r3, #6277	; 0x1885
   82cd8:	f2c0 0308 	movt	r3, #8
   82cdc:	4798      	blx	r3
   82cde:	e009      	b.n	82cf4 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   82ce0:	f64a 2088 	movw	r0, #43656	; 0xaa88
   82ce4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ce8:	4629      	mov	r1, r5
   82cea:	f641 0385 	movw	r3, #6277	; 0x1885
   82cee:	f2c0 0308 	movt	r3, #8
   82cf2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82cf4:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82cf8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82cfc:	680a      	ldr	r2, [r1, #0]
   82cfe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82d00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   82d02:	4298      	cmp	r0, r3
   82d04:	bf34      	ite	cc
   82d06:	2000      	movcc	r0, #0
   82d08:	2001      	movcs	r0, #1
   82d0a:	bd38      	pop	{r3, r4, r5, pc}

00082d0c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   82d0c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   82d0e:	4603      	mov	r3, r0
   82d10:	b930      	cbnz	r0, 82d20 <vTaskSetTimeOutState+0x14>
   82d12:	f641 1371 	movw	r3, #6513	; 0x1971
   82d16:	f2c0 0308 	movt	r3, #8
   82d1a:	4798      	blx	r3
   82d1c:	bf00      	nop
   82d1e:	e7fd      	b.n	82d1c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   82d20:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   82d24:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82d28:	6810      	ldr	r0, [r2, #0]
   82d2a:	6018      	str	r0, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   82d2c:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   82d30:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82d34:	680a      	ldr	r2, [r1, #0]
   82d36:	605a      	str	r2, [r3, #4]
   82d38:	bd08      	pop	{r3, pc}
   82d3a:	bf00      	nop

00082d3c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82d3c:	b538      	push	{r3, r4, r5, lr}
   82d3e:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82d40:	4604      	mov	r4, r0
   82d42:	b930      	cbnz	r0, 82d52 <xTaskCheckForTimeOut+0x16>
   82d44:	f641 1271 	movw	r2, #6513	; 0x1971
   82d48:	f2c0 0208 	movt	r2, #8
   82d4c:	4790      	blx	r2
   82d4e:	bf00      	nop
   82d50:	e7fd      	b.n	82d4e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   82d52:	b931      	cbnz	r1, 82d62 <xTaskCheckForTimeOut+0x26>
   82d54:	f641 1571 	movw	r5, #6513	; 0x1971
   82d58:	f2c0 0508 	movt	r5, #8
   82d5c:	47a8      	blx	r5
   82d5e:	bf00      	nop
   82d60:	e7fd      	b.n	82d5e <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
   82d62:	f641 1385 	movw	r3, #6533	; 0x1985
   82d66:	f2c0 0308 	movt	r3, #8
   82d6a:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   82d6c:	6828      	ldr	r0, [r5, #0]
   82d6e:	f1b0 3fff 	cmp.w	r0, #4294967295
   82d72:	d029      	beq.n	82dc8 <xTaskCheckForTimeOut+0x8c>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   82d74:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   82d78:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82d7c:	6811      	ldr	r1, [r2, #0]
   82d7e:	6823      	ldr	r3, [r4, #0]
   82d80:	428b      	cmp	r3, r1
   82d82:	d007      	beq.n	82d94 <xTaskCheckForTimeOut+0x58>
   82d84:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82d88:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82d8c:	6811      	ldr	r1, [r2, #0]
   82d8e:	6863      	ldr	r3, [r4, #4]
   82d90:	428b      	cmp	r3, r1
   82d92:	d91c      	bls.n	82dce <xTaskCheckForTimeOut+0x92>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   82d94:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82d98:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82d9c:	6811      	ldr	r1, [r2, #0]
   82d9e:	6863      	ldr	r3, [r4, #4]
   82da0:	1aca      	subs	r2, r1, r3
   82da2:	4290      	cmp	r0, r2
   82da4:	d916      	bls.n	82dd4 <xTaskCheckForTimeOut+0x98>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   82da6:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   82daa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82dae:	680a      	ldr	r2, [r1, #0]
   82db0:	1a9b      	subs	r3, r3, r2
   82db2:	1818      	adds	r0, r3, r0
   82db4:	6028      	str	r0, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82db6:	4620      	mov	r0, r4
   82db8:	f642 540d 	movw	r4, #11533	; 0x2d0d
   82dbc:	f2c0 0408 	movt	r4, #8
   82dc0:	47a0      	blx	r4
			xReturn = pdFALSE;
   82dc2:	f04f 0400 	mov.w	r4, #0
   82dc6:	e007      	b.n	82dd8 <xTaskCheckForTimeOut+0x9c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82dc8:	f04f 0400 	mov.w	r4, #0
   82dcc:	e004      	b.n	82dd8 <xTaskCheckForTimeOut+0x9c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82dce:	f04f 0401 	mov.w	r4, #1
   82dd2:	e001      	b.n	82dd8 <xTaskCheckForTimeOut+0x9c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   82dd4:	f04f 0401 	mov.w	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   82dd8:	f641 11ad 	movw	r1, #6573	; 0x19ad
   82ddc:	f2c0 0108 	movt	r1, #8
   82de0:	4788      	blx	r1

	return xReturn;
}
   82de2:	4620      	mov	r0, r4
   82de4:	bd38      	pop	{r3, r4, r5, pc}
   82de6:	bf00      	nop

00082de8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   82de8:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   82dec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82df0:	f04f 0201 	mov.w	r2, #1
   82df4:	601a      	str	r2, [r3, #0]
   82df6:	4770      	bx	lr

00082df8 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82df8:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82dfc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82e00:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   82e02:	4770      	bx	lr

00082e04 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   82e04:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
   82e08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82e0c:	6818      	ldr	r0, [r3, #0]
   82e0e:	b148      	cbz	r0, 82e24 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82e10:	f64a 2180 	movw	r1, #43648	; 0xaa80
   82e14:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82e18:	680a      	ldr	r2, [r1, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   82e1a:	2a00      	cmp	r2, #0
   82e1c:	bf14      	ite	ne
   82e1e:	2002      	movne	r0, #2
   82e20:	2001      	moveq	r0, #1
   82e22:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82e24:	f04f 0000 	mov.w	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   82e28:	4770      	bx	lr
   82e2a:	bf00      	nop

00082e2c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   82e2c:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   82e2e:	4604      	mov	r4, r0
   82e30:	2800      	cmp	r0, #0
   82e32:	d04e      	beq.n	82ed2 <vTaskPriorityInherit+0xa6>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   82e34:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82e36:	f64a 2284 	movw	r2, #43652	; 0xaa84
   82e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82e3e:	6810      	ldr	r0, [r2, #0]
   82e40:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82e42:	428b      	cmp	r3, r1
   82e44:	d245      	bcs.n	82ed2 <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   82e46:	f64a 2284 	movw	r2, #43652	; 0xaa84
   82e4a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82e4e:	6810      	ldr	r0, [r2, #0]
   82e50:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82e52:	f1c1 0205 	rsb	r2, r1, #5
   82e56:	61a2      	str	r2, [r4, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82e58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82e5c:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82e60:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82e64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   82e68:	6962      	ldr	r2, [r4, #20]
   82e6a:	428a      	cmp	r2, r1
   82e6c:	d12a      	bne.n	82ec4 <vTaskPriorityInherit+0x98>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82e6e:	f104 0504 	add.w	r5, r4, #4
   82e72:	4628      	mov	r0, r5
   82e74:	f641 02e1 	movw	r2, #6369	; 0x18e1
   82e78:	f2c0 0208 	movt	r2, #8
   82e7c:	4790      	blx	r2
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82e7e:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82e82:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82e86:	6818      	ldr	r0, [r3, #0]
   82e88:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82e8a:	62e1      	str	r1, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82e8c:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82e90:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82e94:	6813      	ldr	r3, [r2, #0]
   82e96:	4299      	cmp	r1, r3
   82e98:	d904      	bls.n	82ea4 <vTaskPriorityInherit+0x78>
   82e9a:	f64a 2018 	movw	r0, #43544	; 0xaa18
   82e9e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ea2:	6001      	str	r1, [r0, #0]
   82ea4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82ea8:	f64a 221c 	movw	r2, #43548	; 0xaa1c
   82eac:	4613      	mov	r3, r2
   82eae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82eb2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   82eb6:	4629      	mov	r1, r5
   82eb8:	f641 0285 	movw	r2, #6277	; 0x1885
   82ebc:	f2c0 0208 	movt	r2, #8
   82ec0:	4790      	blx	r2
   82ec2:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82ec4:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82ec8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ecc:	6818      	ldr	r0, [r3, #0]
   82ece:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82ed0:	62e1      	str	r1, [r4, #44]	; 0x2c
   82ed2:	bd38      	pop	{r3, r4, r5, pc}

00082ed4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82ed4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82ed6:	4604      	mov	r4, r0
   82ed8:	b350      	cbz	r0, 82f30 <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82eda:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82edc:	6c83      	ldr	r3, [r0, #72]	; 0x48
   82ede:	429a      	cmp	r2, r3
   82ee0:	d026      	beq.n	82f30 <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82ee2:	f100 0504 	add.w	r5, r0, #4
   82ee6:	4628      	mov	r0, r5
   82ee8:	f641 01e1 	movw	r1, #6369	; 0x18e1
   82eec:	f2c0 0108 	movt	r1, #8
   82ef0:	4788      	blx	r1
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   82ef2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82ef4:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82ef6:	f1c0 0205 	rsb	r2, r0, #5
   82efa:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82efc:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82f00:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82f04:	6819      	ldr	r1, [r3, #0]
   82f06:	4288      	cmp	r0, r1
   82f08:	d904      	bls.n	82f14 <vTaskPriorityDisinherit+0x40>
   82f0a:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82f0e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82f12:	6010      	str	r0, [r2, #0]
   82f14:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82f18:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82f1c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82f20:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82f24:	4629      	mov	r1, r5
   82f26:	f641 0285 	movw	r2, #6277	; 0x1885
   82f2a:	f2c0 0208 	movt	r2, #8
   82f2e:	4790      	blx	r2
   82f30:	bd38      	pop	{r3, r4, r5, pc}
   82f32:	bf00      	nop

00082f34 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82f34:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82f36:	f641 1385 	movw	r3, #6533	; 0x1985
   82f3a:	f2c0 0308 	movt	r3, #8
   82f3e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   82f40:	f64a 20fc 	movw	r0, #43772	; 0xaafc
   82f44:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82f48:	6801      	ldr	r1, [r0, #0]
   82f4a:	bb49      	cbnz	r1, 82fa0 <prvCheckForValidListAndQueue+0x6c>
		{
			vListInitialise( &xActiveTimerList1 );
   82f4c:	f64a 25d0 	movw	r5, #43728	; 0xaad0
   82f50:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82f54:	4628      	mov	r0, r5
   82f56:	f641 0665 	movw	r6, #6245	; 0x1865
   82f5a:	f2c0 0608 	movt	r6, #8
   82f5e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82f60:	f64a 24e4 	movw	r4, #43748	; 0xaae4
   82f64:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82f68:	4620      	mov	r0, r4
   82f6a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   82f6c:	f64a 22cc 	movw	r2, #43724	; 0xaacc
   82f70:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82f74:	6015      	str	r5, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82f76:	f64a 3300 	movw	r3, #43776	; 0xab00
   82f7a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82f7e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82f80:	f04f 0005 	mov.w	r0, #5
   82f84:	f04f 010c 	mov.w	r1, #12
   82f88:	f04f 0200 	mov.w	r2, #0
   82f8c:	f641 6321 	movw	r3, #7713	; 0x1e21
   82f90:	f2c0 0308 	movt	r3, #8
   82f94:	4798      	blx	r3
   82f96:	f64a 21fc 	movw	r1, #43772	; 0xaafc
   82f9a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82f9e:	6008      	str	r0, [r1, #0]
		}
	}
	taskEXIT_CRITICAL();
   82fa0:	f641 10ad 	movw	r0, #6573	; 0x19ad
   82fa4:	f2c0 0008 	movt	r0, #8
   82fa8:	4780      	blx	r0
   82faa:	bd70      	pop	{r4, r5, r6, pc}

00082fac <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82fac:	b510      	push	{r4, lr}
   82fae:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   82fb0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82fb2:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   82fb4:	4291      	cmp	r1, r2
   82fb6:	d812      	bhi.n	82fde <prvInsertTimerInActiveList+0x32>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   82fb8:	1ad0      	subs	r0, r2, r3
   82fba:	69a1      	ldr	r1, [r4, #24]
   82fbc:	4288      	cmp	r0, r1
   82fbe:	d221      	bcs.n	83004 <prvInsertTimerInActiveList+0x58>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   82fc0:	f64a 3300 	movw	r3, #43776	; 0xab00
   82fc4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82fc8:	6818      	ldr	r0, [r3, #0]
   82fca:	f104 0104 	add.w	r1, r4, #4
   82fce:	f641 02a5 	movw	r2, #6309	; 0x18a5
   82fd2:	f2c0 0208 	movt	r2, #8
   82fd6:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82fd8:	f04f 0000 	mov.w	r0, #0
   82fdc:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   82fde:	429a      	cmp	r2, r3
   82fe0:	d201      	bcs.n	82fe6 <prvInsertTimerInActiveList+0x3a>
   82fe2:	4299      	cmp	r1, r3
   82fe4:	d211      	bcs.n	8300a <prvInsertTimerInActiveList+0x5e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82fe6:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   82fea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82fee:	6818      	ldr	r0, [r3, #0]
   82ff0:	f104 0104 	add.w	r1, r4, #4
   82ff4:	f641 02a5 	movw	r2, #6309	; 0x18a5
   82ff8:	f2c0 0208 	movt	r2, #8
   82ffc:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82ffe:	f04f 0000 	mov.w	r0, #0
   83002:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   83004:	f04f 0001 	mov.w	r0, #1
   83008:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   8300a:	f04f 0001 	mov.w	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   8300e:	bd10      	pop	{r4, pc}

00083010 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   83010:	b510      	push	{r4, lr}
   83012:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   83014:	f642 7335 	movw	r3, #12085	; 0x2f35
   83018:	f2c0 0308 	movt	r3, #8
   8301c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   8301e:	f64a 20fc 	movw	r0, #43772	; 0xaafc
   83022:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83026:	6801      	ldr	r1, [r0, #0]
   83028:	b1b9      	cbz	r1, 8305a <xTimerCreateTimerTask+0x4a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8302a:	f04f 0204 	mov.w	r2, #4
   8302e:	9200      	str	r2, [sp, #0]
   83030:	f04f 0300 	mov.w	r3, #0
   83034:	9301      	str	r3, [sp, #4]
   83036:	9302      	str	r3, [sp, #8]
   83038:	9303      	str	r3, [sp, #12]
   8303a:	f243 10b1 	movw	r0, #12721	; 0x31b1
   8303e:	f2c0 0008 	movt	r0, #8
   83042:	f24a 7108 	movw	r1, #42760	; 0xa708
   83046:	f2c0 0108 	movt	r1, #8
   8304a:	f44f 7282 	mov.w	r2, #260	; 0x104
   8304e:	f242 344d 	movw	r4, #9037	; 0x234d
   83052:	f2c0 0408 	movt	r4, #8
   83056:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   83058:	b930      	cbnz	r0, 83068 <xTimerCreateTimerTask+0x58>
   8305a:	f641 1471 	movw	r4, #6513	; 0x1971
   8305e:	f2c0 0408 	movt	r4, #8
   83062:	47a0      	blx	r4
   83064:	bf00      	nop
   83066:	e7fd      	b.n	83064 <xTimerCreateTimerTask+0x54>
	return xReturn;
}
   83068:	b004      	add	sp, #16
   8306a:	bd10      	pop	{r4, pc}

0008306c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   8306c:	b510      	push	{r4, lr}
   8306e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   83070:	f64a 24fc 	movw	r4, #43772	; 0xaafc
   83074:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83078:	6824      	ldr	r4, [r4, #0]
   8307a:	b32c      	cbz	r4, 830c8 <xTimerGenericCommand+0x5c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8307c:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   8307e:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   83080:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   83082:	b9b3      	cbnz	r3, 830b2 <xTimerGenericCommand+0x46>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   83084:	f642 6305 	movw	r3, #11781	; 0x2e05
   83088:	f2c0 0308 	movt	r3, #8
   8308c:	4798      	blx	r3
   8308e:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   83090:	f64a 23fc 	movw	r3, #43772	; 0xaafc
   83094:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83098:	6818      	ldr	r0, [r3, #0]
   8309a:	a901      	add	r1, sp, #4
   8309c:	bf07      	ittee	eq
   8309e:	9a06      	ldreq	r2, [sp, #24]
   830a0:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   830a2:	2200      	movne	r2, #0
   830a4:	4613      	movne	r3, r2
   830a6:	f641 648d 	movw	r4, #7821	; 0x1e8d
   830aa:	f2c0 0408 	movt	r4, #8
   830ae:	47a0      	blx	r4
   830b0:	e00c      	b.n	830cc <xTimerGenericCommand+0x60>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   830b2:	4620      	mov	r0, r4
   830b4:	a901      	add	r1, sp, #4
   830b6:	461a      	mov	r2, r3
   830b8:	f04f 0300 	mov.w	r3, #0
   830bc:	f242 0401 	movw	r4, #8193	; 0x2001
   830c0:	f2c0 0408 	movt	r4, #8
   830c4:	47a0      	blx	r4
   830c6:	e001      	b.n	830cc <xTimerGenericCommand+0x60>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   830c8:	f04f 0000 	mov.w	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   830cc:	b004      	add	sp, #16
   830ce:	bd10      	pop	{r4, pc}

000830d0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   830d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   830d4:	b085      	sub	sp, #20
   830d6:	4682      	mov	sl, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   830d8:	f242 6389 	movw	r3, #9865	; 0x2689
   830dc:	f2c0 0308 	movt	r3, #8
   830e0:	4798      	blx	r3
   830e2:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
   830e4:	f64a 20f8 	movw	r0, #43768	; 0xaaf8
   830e8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   830ec:	6801      	ldr	r1, [r0, #0]
   830ee:	4589      	cmp	r9, r1
   830f0:	d24f      	bcs.n	83192 <prvSampleTimeNow+0xc2>
   830f2:	e02b      	b.n	8314c <prvSampleTimeNow+0x7c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   830f4:	68dc      	ldr	r4, [r3, #12]
   830f6:	6826      	ldr	r6, [r4, #0]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   830f8:	68dd      	ldr	r5, [r3, #12]
   830fa:	68ec      	ldr	r4, [r5, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   830fc:	f104 0504 	add.w	r5, r4, #4
   83100:	4628      	mov	r0, r5
   83102:	47c0      	blx	r8

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83104:	6a61      	ldr	r1, [r4, #36]	; 0x24
   83106:	4620      	mov	r0, r4
   83108:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8310a:	69e0      	ldr	r0, [r4, #28]
   8310c:	2801      	cmp	r0, #1
   8310e:	d12c      	bne.n	8316a <prvSampleTimeNow+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   83110:	69a3      	ldr	r3, [r4, #24]
   83112:	18f2      	adds	r2, r6, r3
			if( xReloadTime > xNextExpireTime )
   83114:	42b2      	cmp	r2, r6
   83116:	d909      	bls.n	8312c <prvSampleTimeNow+0x5c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   83118:	6062      	str	r2, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8311a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8311c:	6838      	ldr	r0, [r7, #0]
   8311e:	4629      	mov	r1, r5
   83120:	f641 03a5 	movw	r3, #6309	; 0x18a5
   83124:	f2c0 0308 	movt	r3, #8
   83128:	4798      	blx	r3
   8312a:	e01e      	b.n	8316a <prvSampleTimeNow+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8312c:	f8cd b000 	str.w	fp, [sp]
   83130:	4620      	mov	r0, r4
   83132:	4659      	mov	r1, fp
   83134:	4632      	mov	r2, r6
   83136:	465b      	mov	r3, fp
   83138:	9c03      	ldr	r4, [sp, #12]
   8313a:	47a0      	blx	r4
				configASSERT( xResult );
   8313c:	b9a8      	cbnz	r0, 8316a <prvSampleTimeNow+0x9a>
   8313e:	f641 1671 	movw	r6, #6513	; 0x1971
   83142:	f2c0 0608 	movt	r6, #8
   83146:	47b0      	blx	r6
   83148:	bf00      	nop
   8314a:	e7fd      	b.n	83148 <prvSampleTimeNow+0x78>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8314c:	f64a 27cc 	movw	r7, #43724	; 0xaacc
   83150:	f2c2 0707 	movt	r7, #8199	; 0x2007
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   83154:	f641 08e1 	movw	r8, #6369	; 0x18e1
   83158:	f2c0 0808 	movt	r8, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8315c:	f04f 0b00 	mov.w	fp, #0
   83160:	f243 036d 	movw	r3, #12397	; 0x306d
   83164:	f2c0 0308 	movt	r3, #8
   83168:	9303      	str	r3, [sp, #12]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8316a:	683b      	ldr	r3, [r7, #0]
   8316c:	6818      	ldr	r0, [r3, #0]
   8316e:	2800      	cmp	r0, #0
   83170:	d1c0      	bne.n	830f4 <prvSampleTimeNow+0x24>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   83172:	f64a 3200 	movw	r2, #43776	; 0xab00
   83176:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8317a:	6811      	ldr	r1, [r2, #0]
   8317c:	f64a 20cc 	movw	r0, #43724	; 0xaacc
   83180:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83184:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   83186:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   83188:	f04f 0301 	mov.w	r3, #1
   8318c:	f8ca 3000 	str.w	r3, [sl]
   83190:	e003      	b.n	8319a <prvSampleTimeNow+0xca>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   83192:	f04f 0200 	mov.w	r2, #0
   83196:	f8ca 2000 	str.w	r2, [sl]
	}

	xLastTime = xTimeNow;
   8319a:	f64a 22f8 	movw	r2, #43768	; 0xaaf8
   8319e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   831a2:	f8c2 9000 	str.w	r9, [r2]

	return xTimeNow;
}
   831a6:	4648      	mov	r0, r9
   831a8:	b005      	add	sp, #20
   831aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   831ae:	bf00      	nop

000831b0 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   831b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   831b4:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   831b6:	f64a 2bcc 	movw	fp, #43724	; 0xaacc
   831ba:	f2c2 0b07 	movt	fp, #8199	; 0x2007
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   831be:	f242 6375 	movw	r3, #9845	; 0x2675
   831c2:	f2c0 0308 	movt	r3, #8
   831c6:	9303      	str	r3, [sp, #12]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   831c8:	f243 0ad1 	movw	sl, #12497	; 0x30d1
   831cc:	f2c0 0a08 	movt	sl, #8
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   831d0:	f8db 0000 	ldr.w	r0, [fp]
   831d4:	6802      	ldr	r2, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
   831d6:	2a00      	cmp	r2, #0
   831d8:	f000 80c4 	beq.w	83364 <prvTimerTask+0x1b4>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   831dc:	68c7      	ldr	r7, [r0, #12]
   831de:	683d      	ldr	r5, [r7, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   831e0:	9b03      	ldr	r3, [sp, #12]
   831e2:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   831e4:	a804      	add	r0, sp, #16
   831e6:	47d0      	blx	sl
   831e8:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   831ea:	9804      	ldr	r0, [sp, #16]
   831ec:	2800      	cmp	r0, #0
   831ee:	d150      	bne.n	83292 <prvTimerTask+0xe2>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   831f0:	42b5      	cmp	r5, r6
   831f2:	d837      	bhi.n	83264 <prvTimerTask+0xb4>
			{
				xTaskResumeAll();
   831f4:	f642 073d 	movw	r7, #10301	; 0x283d
   831f8:	f2c0 0708 	movt	r7, #8
   831fc:	47b8      	blx	r7
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   831fe:	f8db 3000 	ldr.w	r3, [fp]
   83202:	68d8      	ldr	r0, [r3, #12]
   83204:	68c4      	ldr	r4, [r0, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   83206:	f104 0004 	add.w	r0, r4, #4
   8320a:	f641 02e1 	movw	r2, #6369	; 0x18e1
   8320e:	f2c0 0208 	movt	r2, #8
   83212:	4790      	blx	r2
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   83214:	69e1      	ldr	r1, [r4, #28]
   83216:	2901      	cmp	r1, #1
   83218:	d11e      	bne.n	83258 <prvTimerTask+0xa8>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8321a:	69a7      	ldr	r7, [r4, #24]
   8321c:	4620      	mov	r0, r4
   8321e:	19e9      	adds	r1, r5, r7
   83220:	4632      	mov	r2, r6
   83222:	462b      	mov	r3, r5
   83224:	f642 76ad 	movw	r6, #12205	; 0x2fad
   83228:	f2c0 0608 	movt	r6, #8
   8322c:	47b0      	blx	r6
   8322e:	2801      	cmp	r0, #1
   83230:	d112      	bne.n	83258 <prvTimerTask+0xa8>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83232:	f04f 0300 	mov.w	r3, #0
   83236:	9300      	str	r3, [sp, #0]
   83238:	4620      	mov	r0, r4
   8323a:	4619      	mov	r1, r3
   8323c:	462a      	mov	r2, r5
   8323e:	f243 056d 	movw	r5, #12397	; 0x306d
   83242:	f2c0 0508 	movt	r5, #8
   83246:	47a8      	blx	r5
			configASSERT( xResult );
   83248:	b930      	cbnz	r0, 83258 <prvTimerTask+0xa8>
   8324a:	f641 1771 	movw	r7, #6513	; 0x1971
   8324e:	f2c0 0708 	movt	r7, #8
   83252:	47b8      	blx	r7
   83254:	bf00      	nop
   83256:	e7fd      	b.n	83254 <prvTimerTask+0xa4>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83258:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8325a:	4620      	mov	r0, r4
   8325c:	4798      	blx	r3
   8325e:	e01d      	b.n	8329c <prvTimerTask+0xec>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   83260:	f04f 0500 	mov.w	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   83264:	f64a 21fc 	movw	r1, #43772	; 0xaafc
   83268:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8326c:	6808      	ldr	r0, [r1, #0]
   8326e:	1ba9      	subs	r1, r5, r6
   83270:	f242 2679 	movw	r6, #8825	; 0x2279
   83274:	f2c0 0608 	movt	r6, #8
   83278:	47b0      	blx	r6

				if( xTaskResumeAll() == pdFALSE )
   8327a:	f642 043d 	movw	r4, #10301	; 0x283d
   8327e:	f2c0 0408 	movt	r4, #8
   83282:	47a0      	blx	r4
   83284:	b950      	cbnz	r0, 8329c <prvTimerTask+0xec>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   83286:	f641 1561 	movw	r5, #6497	; 0x1961
   8328a:	f2c0 0508 	movt	r5, #8
   8328e:	47a8      	blx	r5
   83290:	e004      	b.n	8329c <prvTimerTask+0xec>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   83292:	f642 023d 	movw	r2, #10301	; 0x283d
   83296:	f2c0 0208 	movt	r2, #8
   8329a:	4790      	blx	r2
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8329c:	a804      	add	r0, sp, #16
   8329e:	47d0      	blx	sl
   832a0:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   832a2:	f64a 26fc 	movw	r6, #43772	; 0xaafc
   832a6:	f2c2 0607 	movt	r6, #8199	; 0x2007
   832aa:	f242 05b1 	movw	r5, #8369	; 0x20b1
   832ae:	f2c0 0508 	movt	r5, #8
		if( pxTimer != NULL )
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   832b2:	f641 08e1 	movw	r8, #6369	; 0x18e1
   832b6:	f2c0 0808 	movt	r8, #8
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   832ba:	f642 79ad 	movw	r9, #12205	; 0x2fad
   832be:	f2c0 0908 	movt	r9, #8
   832c2:	e046      	b.n	83352 <prvTimerTask+0x1a2>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   832c4:	9c07      	ldr	r4, [sp, #28]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   832c6:	b124      	cbz	r4, 832d2 <prvTimerTask+0x122>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   832c8:	6960      	ldr	r0, [r4, #20]
   832ca:	b110      	cbz	r0, 832d2 <prvTimerTask+0x122>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   832cc:	f104 0004 	add.w	r0, r4, #4
   832d0:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   832d2:	9a05      	ldr	r2, [sp, #20]
   832d4:	2a02      	cmp	r2, #2
   832d6:	d026      	beq.n	83326 <prvTimerTask+0x176>
   832d8:	2a03      	cmp	r2, #3
   832da:	d034      	beq.n	83346 <prvTimerTask+0x196>
   832dc:	2a00      	cmp	r2, #0
   832de:	d138      	bne.n	83352 <prvTimerTask+0x1a2>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   832e0:	9b06      	ldr	r3, [sp, #24]
   832e2:	69a1      	ldr	r1, [r4, #24]
   832e4:	4620      	mov	r0, r4
   832e6:	1859      	adds	r1, r3, r1
   832e8:	463a      	mov	r2, r7
   832ea:	47c8      	blx	r9
   832ec:	2801      	cmp	r0, #1
   832ee:	d130      	bne.n	83352 <prvTimerTask+0x1a2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   832f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   832f2:	4620      	mov	r0, r4
   832f4:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   832f6:	69e0      	ldr	r0, [r4, #28]
   832f8:	2801      	cmp	r0, #1
   832fa:	d12a      	bne.n	83352 <prvTimerTask+0x1a2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   832fc:	69a2      	ldr	r2, [r4, #24]
   832fe:	f04f 0300 	mov.w	r3, #0
   83302:	9300      	str	r3, [sp, #0]
   83304:	4620      	mov	r0, r4
   83306:	4619      	mov	r1, r3
   83308:	9c06      	ldr	r4, [sp, #24]
   8330a:	1912      	adds	r2, r2, r4
   8330c:	f243 046d 	movw	r4, #12397	; 0x306d
   83310:	f2c0 0408 	movt	r4, #8
   83314:	47a0      	blx	r4
						configASSERT( xResult );
   83316:	b9e0      	cbnz	r0, 83352 <prvTimerTask+0x1a2>
   83318:	f641 1571 	movw	r5, #6513	; 0x1971
   8331c:	f2c0 0508 	movt	r5, #8
   83320:	47a8      	blx	r5
   83322:	bf00      	nop
   83324:	e7fd      	b.n	83322 <prvTimerTask+0x172>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   83326:	9b06      	ldr	r3, [sp, #24]
   83328:	61a3      	str	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8332a:	b933      	cbnz	r3, 8333a <prvTimerTask+0x18a>
   8332c:	f641 1671 	movw	r6, #6513	; 0x1971
   83330:	f2c0 0608 	movt	r6, #8
   83334:	47b0      	blx	r6
   83336:	bf00      	nop
   83338:	e7fd      	b.n	83336 <prvTimerTask+0x186>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8333a:	4620      	mov	r0, r4
   8333c:	18f9      	adds	r1, r7, r3
   8333e:	463a      	mov	r2, r7
   83340:	463b      	mov	r3, r7
   83342:	47c8      	blx	r9
   83344:	e005      	b.n	83352 <prvTimerTask+0x1a2>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   83346:	4620      	mov	r0, r4
   83348:	f641 4101 	movw	r1, #7169	; 0x1c01
   8334c:	f2c0 0108 	movt	r1, #8
   83350:	4788      	blx	r1

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   83352:	6830      	ldr	r0, [r6, #0]
   83354:	a905      	add	r1, sp, #20
   83356:	f04f 0200 	mov.w	r2, #0
   8335a:	4613      	mov	r3, r2
   8335c:	47a8      	blx	r5
   8335e:	2800      	cmp	r0, #0
   83360:	d1b0      	bne.n	832c4 <prvTimerTask+0x114>
   83362:	e735      	b.n	831d0 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   83364:	9903      	ldr	r1, [sp, #12]
   83366:	4788      	blx	r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83368:	a804      	add	r0, sp, #16
   8336a:	47d0      	blx	sl
   8336c:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8336e:	9c04      	ldr	r4, [sp, #16]
   83370:	2c00      	cmp	r4, #0
   83372:	f43f af75 	beq.w	83260 <prvTimerTask+0xb0>
   83376:	e78c      	b.n	83292 <prvTimerTask+0xe2>

00083378 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   83378:	b5f0      	push	{r4, r5, r6, r7, lr}
   8337a:	b083      	sub	sp, #12
   8337c:	4604      	mov	r4, r0
   8337e:	460d      	mov	r5, r1
	uint32_t val = 0;
   83380:	f04f 0300 	mov.w	r3, #0
   83384:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   83386:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8338a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8338e:	4284      	cmp	r4, r0
   83390:	d10d      	bne.n	833ae <usart_serial_getchar+0x36>
		while (uart_read((Uart*)p_usart, data));
   83392:	f44f 6600 	mov.w	r6, #2048	; 0x800
   83396:	f2c4 060e 	movt	r6, #16398	; 0x400e
   8339a:	f241 4719 	movw	r7, #5145	; 0x1419
   8339e:	f2c0 0708 	movt	r7, #8
   833a2:	4630      	mov	r0, r6
   833a4:	4629      	mov	r1, r5
   833a6:	47b8      	blx	r7
   833a8:	2800      	cmp	r0, #0
   833aa:	d1fa      	bne.n	833a2 <usart_serial_getchar+0x2a>
   833ac:	e02b      	b.n	83406 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   833ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   833b2:	f2c4 0109 	movt	r1, #16393	; 0x4009
   833b6:	428c      	cmp	r4, r1
   833b8:	d10f      	bne.n	833da <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
   833ba:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   833be:	f2c4 0609 	movt	r6, #16393	; 0x4009
   833c2:	f241 4751 	movw	r7, #5201	; 0x1451
   833c6:	f2c0 0708 	movt	r7, #8
   833ca:	4630      	mov	r0, r6
   833cc:	a901      	add	r1, sp, #4
   833ce:	47b8      	blx	r7
   833d0:	2800      	cmp	r0, #0
   833d2:	d1fa      	bne.n	833ca <usart_serial_getchar+0x52>
		*data = (uint8_t)(val & 0xFF);
   833d4:	9801      	ldr	r0, [sp, #4]
   833d6:	7028      	strb	r0, [r5, #0]
   833d8:	e02b      	b.n	83432 <usart_serial_getchar+0xba>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   833da:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   833de:	f2c4 0209 	movt	r2, #16393	; 0x4009
   833e2:	4294      	cmp	r4, r2
   833e4:	d10f      	bne.n	83406 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
   833e6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   833ea:	f2c4 0409 	movt	r4, #16393	; 0x4009
   833ee:	f241 4651 	movw	r6, #5201	; 0x1451
   833f2:	f2c0 0608 	movt	r6, #8
   833f6:	4620      	mov	r0, r4
   833f8:	a901      	add	r1, sp, #4
   833fa:	47b0      	blx	r6
   833fc:	2800      	cmp	r0, #0
   833fe:	d1fa      	bne.n	833f6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   83400:	9b01      	ldr	r3, [sp, #4]
   83402:	702b      	strb	r3, [r5, #0]
   83404:	e02a      	b.n	8345c <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   83406:	f04f 0100 	mov.w	r1, #0
   8340a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8340e:	428c      	cmp	r4, r1
   83410:	d10f      	bne.n	83432 <usart_serial_getchar+0xba>
		while (usart_read(p_usart, &val));
   83412:	f04f 0400 	mov.w	r4, #0
   83416:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8341a:	f241 4651 	movw	r6, #5201	; 0x1451
   8341e:	f2c0 0608 	movt	r6, #8
   83422:	4620      	mov	r0, r4
   83424:	a901      	add	r1, sp, #4
   83426:	47b0      	blx	r6
   83428:	2800      	cmp	r0, #0
   8342a:	d1fa      	bne.n	83422 <usart_serial_getchar+0xaa>
		*data = (uint8_t)(val & 0xFF);
   8342c:	9801      	ldr	r0, [sp, #4]
   8342e:	7028      	strb	r0, [r5, #0]
   83430:	e014      	b.n	8345c <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83436:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8343a:	4294      	cmp	r4, r2
   8343c:	d10e      	bne.n	8345c <usart_serial_getchar+0xe4>
		while (usart_read(p_usart, &val));
   8343e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   83442:	f2c4 040a 	movt	r4, #16394	; 0x400a
   83446:	f241 4651 	movw	r6, #5201	; 0x1451
   8344a:	f2c0 0608 	movt	r6, #8
   8344e:	4620      	mov	r0, r4
   83450:	a901      	add	r1, sp, #4
   83452:	47b0      	blx	r6
   83454:	2800      	cmp	r0, #0
   83456:	d1fa      	bne.n	8344e <usart_serial_getchar+0xd6>
		*data = (uint8_t)(val & 0xFF);
   83458:	9b01      	ldr	r3, [sp, #4]
   8345a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8345c:	b003      	add	sp, #12
   8345e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00083460 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   83460:	b570      	push	{r4, r5, r6, lr}
   83462:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   83464:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83468:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8346c:	4298      	cmp	r0, r3
   8346e:	d10f      	bne.n	83490 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   83470:	f44f 6500 	mov.w	r5, #2048	; 0x800
   83474:	f2c4 050e 	movt	r5, #16398	; 0x400e
   83478:	f241 4601 	movw	r6, #5121	; 0x1401
   8347c:	f2c0 0608 	movt	r6, #8
   83480:	4628      	mov	r0, r5
   83482:	4621      	mov	r1, r4
   83484:	47b0      	blx	r6
   83486:	2800      	cmp	r0, #0
   83488:	d1fa      	bne.n	83480 <usart_serial_putchar+0x20>
		return 1;
   8348a:	f04f 0001 	mov.w	r0, #1
   8348e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   83494:	f2c4 0109 	movt	r1, #16393	; 0x4009
   83498:	4288      	cmp	r0, r1
   8349a:	d10f      	bne.n	834bc <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   8349c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   834a0:	f2c4 0509 	movt	r5, #16393	; 0x4009
   834a4:	f241 4631 	movw	r6, #5169	; 0x1431
   834a8:	f2c0 0608 	movt	r6, #8
   834ac:	4628      	mov	r0, r5
   834ae:	4621      	mov	r1, r4
   834b0:	47b0      	blx	r6
   834b2:	2800      	cmp	r0, #0
   834b4:	d1fa      	bne.n	834ac <usart_serial_putchar+0x4c>
		return 1;
   834b6:	f04f 0001 	mov.w	r0, #1
   834ba:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   834bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   834c0:	f2c4 0209 	movt	r2, #16393	; 0x4009
   834c4:	4290      	cmp	r0, r2
   834c6:	d10f      	bne.n	834e8 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   834c8:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   834cc:	f2c4 0509 	movt	r5, #16393	; 0x4009
   834d0:	f241 4631 	movw	r6, #5169	; 0x1431
   834d4:	f2c0 0608 	movt	r6, #8
   834d8:	4628      	mov	r0, r5
   834da:	4621      	mov	r1, r4
   834dc:	47b0      	blx	r6
   834de:	2800      	cmp	r0, #0
   834e0:	d1fa      	bne.n	834d8 <usart_serial_putchar+0x78>
		return 1;
   834e2:	f04f 0001 	mov.w	r0, #1
   834e6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   834e8:	f04f 0300 	mov.w	r3, #0
   834ec:	f2c4 030a 	movt	r3, #16394	; 0x400a
   834f0:	4298      	cmp	r0, r3
   834f2:	d10f      	bne.n	83514 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   834f4:	f04f 0500 	mov.w	r5, #0
   834f8:	f2c4 050a 	movt	r5, #16394	; 0x400a
   834fc:	f241 4631 	movw	r6, #5169	; 0x1431
   83500:	f2c0 0608 	movt	r6, #8
   83504:	4628      	mov	r0, r5
   83506:	4621      	mov	r1, r4
   83508:	47b0      	blx	r6
   8350a:	2800      	cmp	r0, #0
   8350c:	d1fa      	bne.n	83504 <usart_serial_putchar+0xa4>
		return 1;
   8350e:	f04f 0001 	mov.w	r0, #1
   83512:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   83518:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8351c:	4288      	cmp	r0, r1
   8351e:	d10f      	bne.n	83540 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   83520:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83524:	f2c4 050a 	movt	r5, #16394	; 0x400a
   83528:	f241 4631 	movw	r6, #5169	; 0x1431
   8352c:	f2c0 0608 	movt	r6, #8
   83530:	4628      	mov	r0, r5
   83532:	4621      	mov	r1, r4
   83534:	47b0      	blx	r6
   83536:	2800      	cmp	r0, #0
   83538:	d1fa      	bne.n	83530 <usart_serial_putchar+0xd0>
		return 1;
   8353a:	f04f 0001 	mov.w	r0, #1
   8353e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   83540:	f04f 0000 	mov.w	r0, #0
}
   83544:	bd70      	pop	{r4, r5, r6, pc}
   83546:	bf00      	nop

00083548 <configure_console>:


void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio.
*  Note that the baudrate, parity and other parameters must be set in */
{
   83548:	b530      	push	{r4, r5, lr}
   8354a:	b085      	sub	sp, #20
   8354c:	f04f 0008 	mov.w	r0, #8
   83550:	f241 0531 	movw	r5, #4145	; 0x1031
   83554:	f2c0 0508 	movt	r5, #8
   83558:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8355a:	f44f 6400 	mov.w	r4, #2048	; 0x800
   8355e:	f2c4 040e 	movt	r4, #16398	; 0x400e
   83562:	f64a 3374 	movw	r3, #43892	; 0xab74
   83566:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8356a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8356c:	f64a 3070 	movw	r0, #43888	; 0xab70
   83570:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83574:	f243 4261 	movw	r2, #13409	; 0x3461
   83578:	f2c0 0208 	movt	r2, #8
   8357c:	6002      	str	r2, [r0, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8357e:	f64a 316c 	movw	r1, #43884	; 0xab6c
   83582:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83586:	f243 3379 	movw	r3, #13177	; 0x3379
   8358a:	f2c0 0308 	movt	r3, #8
   8358e:	600b      	str	r3, [r1, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   83590:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   83594:	f2c0 5001 	movt	r0, #1281	; 0x501
   83598:	9000      	str	r0, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   8359a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   8359e:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   835a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   835a4:	9102      	str	r1, [sp, #8]
   835a6:	f04f 0008 	mov.w	r0, #8
   835aa:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   835ac:	4620      	mov	r0, r4
   835ae:	4669      	mov	r1, sp
   835b0:	f241 35bd 	movw	r5, #5053	; 0x13bd
   835b4:	f2c0 0508 	movt	r5, #8
   835b8:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   835ba:	f240 0510 	movw	r5, #16
   835be:	f2c2 0507 	movt	r5, #8199	; 0x2007
   835c2:	682c      	ldr	r4, [r5, #0]
   835c4:	68a0      	ldr	r0, [r4, #8]
   835c6:	f04f 0100 	mov.w	r1, #0
   835ca:	f244 042d 	movw	r4, #16429	; 0x402d
   835ce:	f2c0 0408 	movt	r4, #8
   835d2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   835d4:	682b      	ldr	r3, [r5, #0]
   835d6:	6858      	ldr	r0, [r3, #4]
   835d8:	f04f 0100 	mov.w	r1, #0
   835dc:	47a0      	blx	r4
	};
	
	/* Configure console UART */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   835de:	b005      	add	sp, #20
   835e0:	bd30      	pop	{r4, r5, pc}
   835e2:	bf00      	nop

000835e4 <main>:
#include "PIDControl.h"
#include "MatlabPlot.h"
#include "io_uart.h"

int main (void)
{
   835e4:	b510      	push	{r4, lr}
   835e6:	b084      	sub	sp, #16
	sysclk_init();			// Initialize system clock
   835e8:	f240 13a5 	movw	r3, #421	; 0x1a5
   835ec:	f2c0 0308 	movt	r3, #8
   835f0:	4798      	blx	r3
	board_init();			// Initialize Arduino Due board
   835f2:	f640 1091 	movw	r0, #2449	; 0x991
   835f6:	f2c0 0008 	movt	r0, #8
   835fa:	4780      	blx	r0
	configure_console();	// Initialize terminal window
   835fc:	f243 5149 	movw	r1, #13641	; 0x3549
   83600:	f2c0 0108 	movt	r1, #8
   83604:	4788      	blx	r1
	adc_setup();			// Initialize ADC
   83606:	f240 7271 	movw	r2, #1905	; 0x771
   8360a:	f2c0 0208 	movt	r2, #8
   8360e:	4790      	blx	r2
	pwm_setup();			// Initialize PWM
   83610:	f240 64a9 	movw	r4, #1705	; 0x6a9
   83614:	f2c0 0408 	movt	r4, #8
   83618:	47a0      	blx	r4
	motorshield_setup();	// Initialize motor shield
   8361a:	f240 43bd 	movw	r3, #1213	; 0x4bd
   8361e:	f2c0 0308 	movt	r3, #8
   83622:	4798      	blx	r3
	delay_init();			// Initialize delay
   83624:	f240 201d 	movw	r0, #541	; 0x21d
   83628:	f2c0 0008 	movt	r0, #8
   8362c:	4780      	blx	r0
	setupUART();
   8362e:	f240 216d 	movw	r1, #621	; 0x26d
   83632:	f2c0 0108 	movt	r1, #8
   83636:	4788      	blx	r1
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83638:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   8363c:	f2c4 040e 	movt	r4, #16398	; 0x400e
   83640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   83644:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83646:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8364a:	6362      	str	r2, [r4, #52]	; 0x34
	//test_terminal();
	//test_sensor();
	//test_fan();
	//test_uart();
	
	if (xTaskCreate(pid_control, (const signed char * const) "PID Control", 1024, NULL, 2, NULL) != pdPASS)
   8364c:	f04f 0302 	mov.w	r3, #2
   83650:	9300      	str	r3, [sp, #0]
   83652:	f04f 0300 	mov.w	r3, #0
   83656:	9301      	str	r3, [sp, #4]
   83658:	9302      	str	r3, [sp, #8]
   8365a:	9303      	str	r3, [sp, #12]
   8365c:	f240 40e9 	movw	r0, #1257	; 0x4e9
   83660:	f2c0 0008 	movt	r0, #8
   83664:	f24a 7110 	movw	r1, #42768	; 0xa710
   83668:	f2c0 0108 	movt	r1, #8
   8366c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83670:	f242 344d 	movw	r4, #9037	; 0x234d
   83674:	f2c0 0408 	movt	r4, #8
   83678:	47a0      	blx	r4
   8367a:	2801      	cmp	r0, #1
   8367c:	d002      	beq.n	83684 <main+0xa0>
	{
		printf("Failed to create PID Control task\r\n");
   8367e:	4814      	ldr	r0, [pc, #80]	; (836d0 <main+0xec>)
   83680:	4914      	ldr	r1, [pc, #80]	; (836d4 <main+0xf0>)
   83682:	4788      	blx	r1
	}
	if (xTaskCreate(plot_values, (const signed char * const) "Plot Values", 1024, NULL, 1 , NULL) != pdPASS)
   83684:	f04f 0001 	mov.w	r0, #1
   83688:	9000      	str	r0, [sp, #0]
   8368a:	f04f 0300 	mov.w	r3, #0
   8368e:	9301      	str	r3, [sp, #4]
   83690:	9302      	str	r3, [sp, #8]
   83692:	9303      	str	r3, [sp, #12]
   83694:	f240 3091 	movw	r0, #913	; 0x391
   83698:	f2c0 0008 	movt	r0, #8
   8369c:	f24a 7140 	movw	r1, #42816	; 0xa740
   836a0:	f2c0 0108 	movt	r1, #8
   836a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   836a8:	f242 344d 	movw	r4, #9037	; 0x234d
   836ac:	f2c0 0408 	movt	r4, #8
   836b0:	47a0      	blx	r4
   836b2:	2801      	cmp	r0, #1
   836b4:	d002      	beq.n	836bc <main+0xd8>
	{
		printf("Failed to create PID Control task\r\n");
   836b6:	4806      	ldr	r0, [pc, #24]	; (836d0 <main+0xec>)
   836b8:	4a06      	ldr	r2, [pc, #24]	; (836d4 <main+0xf0>)
   836ba:	4790      	blx	r2
	}
	
	vTaskStartScheduler();
   836bc:	f242 53ed 	movw	r3, #9709	; 0x25ed
   836c0:	f2c0 0308 	movt	r3, #8
   836c4:	4798      	blx	r3
}
   836c6:	f04f 0000 	mov.w	r0, #0
   836ca:	b004      	add	sp, #16
   836cc:	bd10      	pop	{r4, pc}
   836ce:	bf00      	nop
   836d0:	0008a71c 	.word	0x0008a71c
   836d4:	00083f89 	.word	0x00083f89

000836d8 <__aeabi_drsub>:
   836d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   836dc:	e002      	b.n	836e4 <__adddf3>
   836de:	bf00      	nop

000836e0 <__aeabi_dsub>:
   836e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000836e4 <__adddf3>:
   836e4:	b530      	push	{r4, r5, lr}
   836e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   836ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   836ee:	ea94 0f05 	teq	r4, r5
   836f2:	bf08      	it	eq
   836f4:	ea90 0f02 	teqeq	r0, r2
   836f8:	bf1f      	itttt	ne
   836fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   836fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   83702:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83706:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8370a:	f000 80e2 	beq.w	838d2 <__adddf3+0x1ee>
   8370e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83712:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83716:	bfb8      	it	lt
   83718:	426d      	neglt	r5, r5
   8371a:	dd0c      	ble.n	83736 <__adddf3+0x52>
   8371c:	442c      	add	r4, r5
   8371e:	ea80 0202 	eor.w	r2, r0, r2
   83722:	ea81 0303 	eor.w	r3, r1, r3
   83726:	ea82 0000 	eor.w	r0, r2, r0
   8372a:	ea83 0101 	eor.w	r1, r3, r1
   8372e:	ea80 0202 	eor.w	r2, r0, r2
   83732:	ea81 0303 	eor.w	r3, r1, r3
   83736:	2d36      	cmp	r5, #54	; 0x36
   83738:	bf88      	it	hi
   8373a:	bd30      	pophi	{r4, r5, pc}
   8373c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83740:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83744:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83748:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8374c:	d002      	beq.n	83754 <__adddf3+0x70>
   8374e:	4240      	negs	r0, r0
   83750:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83754:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83758:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8375c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83760:	d002      	beq.n	83768 <__adddf3+0x84>
   83762:	4252      	negs	r2, r2
   83764:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83768:	ea94 0f05 	teq	r4, r5
   8376c:	f000 80a7 	beq.w	838be <__adddf3+0x1da>
   83770:	f1a4 0401 	sub.w	r4, r4, #1
   83774:	f1d5 0e20 	rsbs	lr, r5, #32
   83778:	db0d      	blt.n	83796 <__adddf3+0xb2>
   8377a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8377e:	fa22 f205 	lsr.w	r2, r2, r5
   83782:	1880      	adds	r0, r0, r2
   83784:	f141 0100 	adc.w	r1, r1, #0
   83788:	fa03 f20e 	lsl.w	r2, r3, lr
   8378c:	1880      	adds	r0, r0, r2
   8378e:	fa43 f305 	asr.w	r3, r3, r5
   83792:	4159      	adcs	r1, r3
   83794:	e00e      	b.n	837b4 <__adddf3+0xd0>
   83796:	f1a5 0520 	sub.w	r5, r5, #32
   8379a:	f10e 0e20 	add.w	lr, lr, #32
   8379e:	2a01      	cmp	r2, #1
   837a0:	fa03 fc0e 	lsl.w	ip, r3, lr
   837a4:	bf28      	it	cs
   837a6:	f04c 0c02 	orrcs.w	ip, ip, #2
   837aa:	fa43 f305 	asr.w	r3, r3, r5
   837ae:	18c0      	adds	r0, r0, r3
   837b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   837b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   837b8:	d507      	bpl.n	837ca <__adddf3+0xe6>
   837ba:	f04f 0e00 	mov.w	lr, #0
   837be:	f1dc 0c00 	rsbs	ip, ip, #0
   837c2:	eb7e 0000 	sbcs.w	r0, lr, r0
   837c6:	eb6e 0101 	sbc.w	r1, lr, r1
   837ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   837ce:	d31b      	bcc.n	83808 <__adddf3+0x124>
   837d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   837d4:	d30c      	bcc.n	837f0 <__adddf3+0x10c>
   837d6:	0849      	lsrs	r1, r1, #1
   837d8:	ea5f 0030 	movs.w	r0, r0, rrx
   837dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   837e0:	f104 0401 	add.w	r4, r4, #1
   837e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   837e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   837ec:	f080 809a 	bcs.w	83924 <__adddf3+0x240>
   837f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   837f4:	bf08      	it	eq
   837f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   837fa:	f150 0000 	adcs.w	r0, r0, #0
   837fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83802:	ea41 0105 	orr.w	r1, r1, r5
   83806:	bd30      	pop	{r4, r5, pc}
   83808:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8380c:	4140      	adcs	r0, r0
   8380e:	eb41 0101 	adc.w	r1, r1, r1
   83812:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83816:	f1a4 0401 	sub.w	r4, r4, #1
   8381a:	d1e9      	bne.n	837f0 <__adddf3+0x10c>
   8381c:	f091 0f00 	teq	r1, #0
   83820:	bf04      	itt	eq
   83822:	4601      	moveq	r1, r0
   83824:	2000      	moveq	r0, #0
   83826:	fab1 f381 	clz	r3, r1
   8382a:	bf08      	it	eq
   8382c:	3320      	addeq	r3, #32
   8382e:	f1a3 030b 	sub.w	r3, r3, #11
   83832:	f1b3 0220 	subs.w	r2, r3, #32
   83836:	da0c      	bge.n	83852 <__adddf3+0x16e>
   83838:	320c      	adds	r2, #12
   8383a:	dd08      	ble.n	8384e <__adddf3+0x16a>
   8383c:	f102 0c14 	add.w	ip, r2, #20
   83840:	f1c2 020c 	rsb	r2, r2, #12
   83844:	fa01 f00c 	lsl.w	r0, r1, ip
   83848:	fa21 f102 	lsr.w	r1, r1, r2
   8384c:	e00c      	b.n	83868 <__adddf3+0x184>
   8384e:	f102 0214 	add.w	r2, r2, #20
   83852:	bfd8      	it	le
   83854:	f1c2 0c20 	rsble	ip, r2, #32
   83858:	fa01 f102 	lsl.w	r1, r1, r2
   8385c:	fa20 fc0c 	lsr.w	ip, r0, ip
   83860:	bfdc      	itt	le
   83862:	ea41 010c 	orrle.w	r1, r1, ip
   83866:	4090      	lslle	r0, r2
   83868:	1ae4      	subs	r4, r4, r3
   8386a:	bfa2      	ittt	ge
   8386c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83870:	4329      	orrge	r1, r5
   83872:	bd30      	popge	{r4, r5, pc}
   83874:	ea6f 0404 	mvn.w	r4, r4
   83878:	3c1f      	subs	r4, #31
   8387a:	da1c      	bge.n	838b6 <__adddf3+0x1d2>
   8387c:	340c      	adds	r4, #12
   8387e:	dc0e      	bgt.n	8389e <__adddf3+0x1ba>
   83880:	f104 0414 	add.w	r4, r4, #20
   83884:	f1c4 0220 	rsb	r2, r4, #32
   83888:	fa20 f004 	lsr.w	r0, r0, r4
   8388c:	fa01 f302 	lsl.w	r3, r1, r2
   83890:	ea40 0003 	orr.w	r0, r0, r3
   83894:	fa21 f304 	lsr.w	r3, r1, r4
   83898:	ea45 0103 	orr.w	r1, r5, r3
   8389c:	bd30      	pop	{r4, r5, pc}
   8389e:	f1c4 040c 	rsb	r4, r4, #12
   838a2:	f1c4 0220 	rsb	r2, r4, #32
   838a6:	fa20 f002 	lsr.w	r0, r0, r2
   838aa:	fa01 f304 	lsl.w	r3, r1, r4
   838ae:	ea40 0003 	orr.w	r0, r0, r3
   838b2:	4629      	mov	r1, r5
   838b4:	bd30      	pop	{r4, r5, pc}
   838b6:	fa21 f004 	lsr.w	r0, r1, r4
   838ba:	4629      	mov	r1, r5
   838bc:	bd30      	pop	{r4, r5, pc}
   838be:	f094 0f00 	teq	r4, #0
   838c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   838c6:	bf06      	itte	eq
   838c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   838cc:	3401      	addeq	r4, #1
   838ce:	3d01      	subne	r5, #1
   838d0:	e74e      	b.n	83770 <__adddf3+0x8c>
   838d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   838d6:	bf18      	it	ne
   838d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   838dc:	d029      	beq.n	83932 <__adddf3+0x24e>
   838de:	ea94 0f05 	teq	r4, r5
   838e2:	bf08      	it	eq
   838e4:	ea90 0f02 	teqeq	r0, r2
   838e8:	d005      	beq.n	838f6 <__adddf3+0x212>
   838ea:	ea54 0c00 	orrs.w	ip, r4, r0
   838ee:	bf04      	itt	eq
   838f0:	4619      	moveq	r1, r3
   838f2:	4610      	moveq	r0, r2
   838f4:	bd30      	pop	{r4, r5, pc}
   838f6:	ea91 0f03 	teq	r1, r3
   838fa:	bf1e      	ittt	ne
   838fc:	2100      	movne	r1, #0
   838fe:	2000      	movne	r0, #0
   83900:	bd30      	popne	{r4, r5, pc}
   83902:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83906:	d105      	bne.n	83914 <__adddf3+0x230>
   83908:	0040      	lsls	r0, r0, #1
   8390a:	4149      	adcs	r1, r1
   8390c:	bf28      	it	cs
   8390e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83912:	bd30      	pop	{r4, r5, pc}
   83914:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83918:	bf3c      	itt	cc
   8391a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8391e:	bd30      	popcc	{r4, r5, pc}
   83920:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83924:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8392c:	f04f 0000 	mov.w	r0, #0
   83930:	bd30      	pop	{r4, r5, pc}
   83932:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83936:	bf1a      	itte	ne
   83938:	4619      	movne	r1, r3
   8393a:	4610      	movne	r0, r2
   8393c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83940:	bf1c      	itt	ne
   83942:	460b      	movne	r3, r1
   83944:	4602      	movne	r2, r0
   83946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8394a:	bf06      	itte	eq
   8394c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83950:	ea91 0f03 	teqeq	r1, r3
   83954:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83958:	bd30      	pop	{r4, r5, pc}
   8395a:	bf00      	nop

0008395c <__aeabi_ui2d>:
   8395c:	f090 0f00 	teq	r0, #0
   83960:	bf04      	itt	eq
   83962:	2100      	moveq	r1, #0
   83964:	4770      	bxeq	lr
   83966:	b530      	push	{r4, r5, lr}
   83968:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8396c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83970:	f04f 0500 	mov.w	r5, #0
   83974:	f04f 0100 	mov.w	r1, #0
   83978:	e750      	b.n	8381c <__adddf3+0x138>
   8397a:	bf00      	nop

0008397c <__aeabi_i2d>:
   8397c:	f090 0f00 	teq	r0, #0
   83980:	bf04      	itt	eq
   83982:	2100      	moveq	r1, #0
   83984:	4770      	bxeq	lr
   83986:	b530      	push	{r4, r5, lr}
   83988:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8398c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83990:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83994:	bf48      	it	mi
   83996:	4240      	negmi	r0, r0
   83998:	f04f 0100 	mov.w	r1, #0
   8399c:	e73e      	b.n	8381c <__adddf3+0x138>
   8399e:	bf00      	nop

000839a0 <__aeabi_f2d>:
   839a0:	0042      	lsls	r2, r0, #1
   839a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   839a6:	ea4f 0131 	mov.w	r1, r1, rrx
   839aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   839ae:	bf1f      	itttt	ne
   839b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   839b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   839b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   839bc:	4770      	bxne	lr
   839be:	f092 0f00 	teq	r2, #0
   839c2:	bf14      	ite	ne
   839c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   839c8:	4770      	bxeq	lr
   839ca:	b530      	push	{r4, r5, lr}
   839cc:	f44f 7460 	mov.w	r4, #896	; 0x380
   839d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   839d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   839d8:	e720      	b.n	8381c <__adddf3+0x138>
   839da:	bf00      	nop

000839dc <__aeabi_ul2d>:
   839dc:	ea50 0201 	orrs.w	r2, r0, r1
   839e0:	bf08      	it	eq
   839e2:	4770      	bxeq	lr
   839e4:	b530      	push	{r4, r5, lr}
   839e6:	f04f 0500 	mov.w	r5, #0
   839ea:	e00a      	b.n	83a02 <__aeabi_l2d+0x16>

000839ec <__aeabi_l2d>:
   839ec:	ea50 0201 	orrs.w	r2, r0, r1
   839f0:	bf08      	it	eq
   839f2:	4770      	bxeq	lr
   839f4:	b530      	push	{r4, r5, lr}
   839f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   839fa:	d502      	bpl.n	83a02 <__aeabi_l2d+0x16>
   839fc:	4240      	negs	r0, r0
   839fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a02:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83a06:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83a0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83a0e:	f43f aedc 	beq.w	837ca <__adddf3+0xe6>
   83a12:	f04f 0203 	mov.w	r2, #3
   83a16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83a1a:	bf18      	it	ne
   83a1c:	3203      	addne	r2, #3
   83a1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83a22:	bf18      	it	ne
   83a24:	3203      	addne	r2, #3
   83a26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83a2a:	f1c2 0320 	rsb	r3, r2, #32
   83a2e:	fa00 fc03 	lsl.w	ip, r0, r3
   83a32:	fa20 f002 	lsr.w	r0, r0, r2
   83a36:	fa01 fe03 	lsl.w	lr, r1, r3
   83a3a:	ea40 000e 	orr.w	r0, r0, lr
   83a3e:	fa21 f102 	lsr.w	r1, r1, r2
   83a42:	4414      	add	r4, r2
   83a44:	e6c1      	b.n	837ca <__adddf3+0xe6>
   83a46:	bf00      	nop

00083a48 <__aeabi_dmul>:
   83a48:	b570      	push	{r4, r5, r6, lr}
   83a4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83a4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83a52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83a56:	bf1d      	ittte	ne
   83a58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83a5c:	ea94 0f0c 	teqne	r4, ip
   83a60:	ea95 0f0c 	teqne	r5, ip
   83a64:	f000 f8de 	bleq	83c24 <__aeabi_dmul+0x1dc>
   83a68:	442c      	add	r4, r5
   83a6a:	ea81 0603 	eor.w	r6, r1, r3
   83a6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83a72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   83a76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   83a7a:	bf18      	it	ne
   83a7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83a80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83a88:	d038      	beq.n	83afc <__aeabi_dmul+0xb4>
   83a8a:	fba0 ce02 	umull	ip, lr, r0, r2
   83a8e:	f04f 0500 	mov.w	r5, #0
   83a92:	fbe1 e502 	umlal	lr, r5, r1, r2
   83a96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   83a9a:	fbe0 e503 	umlal	lr, r5, r0, r3
   83a9e:	f04f 0600 	mov.w	r6, #0
   83aa2:	fbe1 5603 	umlal	r5, r6, r1, r3
   83aa6:	f09c 0f00 	teq	ip, #0
   83aaa:	bf18      	it	ne
   83aac:	f04e 0e01 	orrne.w	lr, lr, #1
   83ab0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83ab4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83ab8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83abc:	d204      	bcs.n	83ac8 <__aeabi_dmul+0x80>
   83abe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83ac2:	416d      	adcs	r5, r5
   83ac4:	eb46 0606 	adc.w	r6, r6, r6
   83ac8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83acc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83ad0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83ad4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83ad8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83adc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83ae0:	bf88      	it	hi
   83ae2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83ae6:	d81e      	bhi.n	83b26 <__aeabi_dmul+0xde>
   83ae8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83aec:	bf08      	it	eq
   83aee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83af2:	f150 0000 	adcs.w	r0, r0, #0
   83af6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83afa:	bd70      	pop	{r4, r5, r6, pc}
   83afc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83b00:	ea46 0101 	orr.w	r1, r6, r1
   83b04:	ea40 0002 	orr.w	r0, r0, r2
   83b08:	ea81 0103 	eor.w	r1, r1, r3
   83b0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83b10:	bfc2      	ittt	gt
   83b12:	ebd4 050c 	rsbsgt	r5, r4, ip
   83b16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83b1a:	bd70      	popgt	{r4, r5, r6, pc}
   83b1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83b20:	f04f 0e00 	mov.w	lr, #0
   83b24:	3c01      	subs	r4, #1
   83b26:	f300 80ab 	bgt.w	83c80 <__aeabi_dmul+0x238>
   83b2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83b2e:	bfde      	ittt	le
   83b30:	2000      	movle	r0, #0
   83b32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   83b36:	bd70      	pople	{r4, r5, r6, pc}
   83b38:	f1c4 0400 	rsb	r4, r4, #0
   83b3c:	3c20      	subs	r4, #32
   83b3e:	da35      	bge.n	83bac <__aeabi_dmul+0x164>
   83b40:	340c      	adds	r4, #12
   83b42:	dc1b      	bgt.n	83b7c <__aeabi_dmul+0x134>
   83b44:	f104 0414 	add.w	r4, r4, #20
   83b48:	f1c4 0520 	rsb	r5, r4, #32
   83b4c:	fa00 f305 	lsl.w	r3, r0, r5
   83b50:	fa20 f004 	lsr.w	r0, r0, r4
   83b54:	fa01 f205 	lsl.w	r2, r1, r5
   83b58:	ea40 0002 	orr.w	r0, r0, r2
   83b5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83b60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83b64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83b68:	fa21 f604 	lsr.w	r6, r1, r4
   83b6c:	eb42 0106 	adc.w	r1, r2, r6
   83b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83b74:	bf08      	it	eq
   83b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83b7a:	bd70      	pop	{r4, r5, r6, pc}
   83b7c:	f1c4 040c 	rsb	r4, r4, #12
   83b80:	f1c4 0520 	rsb	r5, r4, #32
   83b84:	fa00 f304 	lsl.w	r3, r0, r4
   83b88:	fa20 f005 	lsr.w	r0, r0, r5
   83b8c:	fa01 f204 	lsl.w	r2, r1, r4
   83b90:	ea40 0002 	orr.w	r0, r0, r2
   83b94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83b98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83b9c:	f141 0100 	adc.w	r1, r1, #0
   83ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83ba4:	bf08      	it	eq
   83ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83baa:	bd70      	pop	{r4, r5, r6, pc}
   83bac:	f1c4 0520 	rsb	r5, r4, #32
   83bb0:	fa00 f205 	lsl.w	r2, r0, r5
   83bb4:	ea4e 0e02 	orr.w	lr, lr, r2
   83bb8:	fa20 f304 	lsr.w	r3, r0, r4
   83bbc:	fa01 f205 	lsl.w	r2, r1, r5
   83bc0:	ea43 0302 	orr.w	r3, r3, r2
   83bc4:	fa21 f004 	lsr.w	r0, r1, r4
   83bc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83bcc:	fa21 f204 	lsr.w	r2, r1, r4
   83bd0:	ea20 0002 	bic.w	r0, r0, r2
   83bd4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83bd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83bdc:	bf08      	it	eq
   83bde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83be2:	bd70      	pop	{r4, r5, r6, pc}
   83be4:	f094 0f00 	teq	r4, #0
   83be8:	d10f      	bne.n	83c0a <__aeabi_dmul+0x1c2>
   83bea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83bee:	0040      	lsls	r0, r0, #1
   83bf0:	eb41 0101 	adc.w	r1, r1, r1
   83bf4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83bf8:	bf08      	it	eq
   83bfa:	3c01      	subeq	r4, #1
   83bfc:	d0f7      	beq.n	83bee <__aeabi_dmul+0x1a6>
   83bfe:	ea41 0106 	orr.w	r1, r1, r6
   83c02:	f095 0f00 	teq	r5, #0
   83c06:	bf18      	it	ne
   83c08:	4770      	bxne	lr
   83c0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83c0e:	0052      	lsls	r2, r2, #1
   83c10:	eb43 0303 	adc.w	r3, r3, r3
   83c14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83c18:	bf08      	it	eq
   83c1a:	3d01      	subeq	r5, #1
   83c1c:	d0f7      	beq.n	83c0e <__aeabi_dmul+0x1c6>
   83c1e:	ea43 0306 	orr.w	r3, r3, r6
   83c22:	4770      	bx	lr
   83c24:	ea94 0f0c 	teq	r4, ip
   83c28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83c2c:	bf18      	it	ne
   83c2e:	ea95 0f0c 	teqne	r5, ip
   83c32:	d00c      	beq.n	83c4e <__aeabi_dmul+0x206>
   83c34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83c38:	bf18      	it	ne
   83c3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83c3e:	d1d1      	bne.n	83be4 <__aeabi_dmul+0x19c>
   83c40:	ea81 0103 	eor.w	r1, r1, r3
   83c44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83c48:	f04f 0000 	mov.w	r0, #0
   83c4c:	bd70      	pop	{r4, r5, r6, pc}
   83c4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83c52:	bf06      	itte	eq
   83c54:	4610      	moveq	r0, r2
   83c56:	4619      	moveq	r1, r3
   83c58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83c5c:	d019      	beq.n	83c92 <__aeabi_dmul+0x24a>
   83c5e:	ea94 0f0c 	teq	r4, ip
   83c62:	d102      	bne.n	83c6a <__aeabi_dmul+0x222>
   83c64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   83c68:	d113      	bne.n	83c92 <__aeabi_dmul+0x24a>
   83c6a:	ea95 0f0c 	teq	r5, ip
   83c6e:	d105      	bne.n	83c7c <__aeabi_dmul+0x234>
   83c70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83c74:	bf1c      	itt	ne
   83c76:	4610      	movne	r0, r2
   83c78:	4619      	movne	r1, r3
   83c7a:	d10a      	bne.n	83c92 <__aeabi_dmul+0x24a>
   83c7c:	ea81 0103 	eor.w	r1, r1, r3
   83c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83c84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83c88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83c8c:	f04f 0000 	mov.w	r0, #0
   83c90:	bd70      	pop	{r4, r5, r6, pc}
   83c92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83c96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   83c9a:	bd70      	pop	{r4, r5, r6, pc}

00083c9c <__aeabi_ddiv>:
   83c9c:	b570      	push	{r4, r5, r6, lr}
   83c9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83ca2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83ca6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83caa:	bf1d      	ittte	ne
   83cac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83cb0:	ea94 0f0c 	teqne	r4, ip
   83cb4:	ea95 0f0c 	teqne	r5, ip
   83cb8:	f000 f8a7 	bleq	83e0a <__aeabi_ddiv+0x16e>
   83cbc:	eba4 0405 	sub.w	r4, r4, r5
   83cc0:	ea81 0e03 	eor.w	lr, r1, r3
   83cc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83cc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83ccc:	f000 8088 	beq.w	83de0 <__aeabi_ddiv+0x144>
   83cd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83cd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83cd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83cdc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83ce0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83ce4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   83ce8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83cec:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83cf0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83cf4:	429d      	cmp	r5, r3
   83cf6:	bf08      	it	eq
   83cf8:	4296      	cmpeq	r6, r2
   83cfa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83cfe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83d02:	d202      	bcs.n	83d0a <__aeabi_ddiv+0x6e>
   83d04:	085b      	lsrs	r3, r3, #1
   83d06:	ea4f 0232 	mov.w	r2, r2, rrx
   83d0a:	1ab6      	subs	r6, r6, r2
   83d0c:	eb65 0503 	sbc.w	r5, r5, r3
   83d10:	085b      	lsrs	r3, r3, #1
   83d12:	ea4f 0232 	mov.w	r2, r2, rrx
   83d16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   83d1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83d1e:	ebb6 0e02 	subs.w	lr, r6, r2
   83d22:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d26:	bf22      	ittt	cs
   83d28:	1ab6      	subcs	r6, r6, r2
   83d2a:	4675      	movcs	r5, lr
   83d2c:	ea40 000c 	orrcs.w	r0, r0, ip
   83d30:	085b      	lsrs	r3, r3, #1
   83d32:	ea4f 0232 	mov.w	r2, r2, rrx
   83d36:	ebb6 0e02 	subs.w	lr, r6, r2
   83d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d3e:	bf22      	ittt	cs
   83d40:	1ab6      	subcs	r6, r6, r2
   83d42:	4675      	movcs	r5, lr
   83d44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83d48:	085b      	lsrs	r3, r3, #1
   83d4a:	ea4f 0232 	mov.w	r2, r2, rrx
   83d4e:	ebb6 0e02 	subs.w	lr, r6, r2
   83d52:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d56:	bf22      	ittt	cs
   83d58:	1ab6      	subcs	r6, r6, r2
   83d5a:	4675      	movcs	r5, lr
   83d5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83d60:	085b      	lsrs	r3, r3, #1
   83d62:	ea4f 0232 	mov.w	r2, r2, rrx
   83d66:	ebb6 0e02 	subs.w	lr, r6, r2
   83d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d6e:	bf22      	ittt	cs
   83d70:	1ab6      	subcs	r6, r6, r2
   83d72:	4675      	movcs	r5, lr
   83d74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83d78:	ea55 0e06 	orrs.w	lr, r5, r6
   83d7c:	d018      	beq.n	83db0 <__aeabi_ddiv+0x114>
   83d7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83d82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   83d86:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83d8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83d8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83d92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   83d96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   83d9a:	d1c0      	bne.n	83d1e <__aeabi_ddiv+0x82>
   83d9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83da0:	d10b      	bne.n	83dba <__aeabi_ddiv+0x11e>
   83da2:	ea41 0100 	orr.w	r1, r1, r0
   83da6:	f04f 0000 	mov.w	r0, #0
   83daa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83dae:	e7b6      	b.n	83d1e <__aeabi_ddiv+0x82>
   83db0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83db4:	bf04      	itt	eq
   83db6:	4301      	orreq	r1, r0
   83db8:	2000      	moveq	r0, #0
   83dba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83dbe:	bf88      	it	hi
   83dc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83dc4:	f63f aeaf 	bhi.w	83b26 <__aeabi_dmul+0xde>
   83dc8:	ebb5 0c03 	subs.w	ip, r5, r3
   83dcc:	bf04      	itt	eq
   83dce:	ebb6 0c02 	subseq.w	ip, r6, r2
   83dd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83dd6:	f150 0000 	adcs.w	r0, r0, #0
   83dda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83dde:	bd70      	pop	{r4, r5, r6, pc}
   83de0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83de4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83de8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83dec:	bfc2      	ittt	gt
   83dee:	ebd4 050c 	rsbsgt	r5, r4, ip
   83df2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83df6:	bd70      	popgt	{r4, r5, r6, pc}
   83df8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83dfc:	f04f 0e00 	mov.w	lr, #0
   83e00:	3c01      	subs	r4, #1
   83e02:	e690      	b.n	83b26 <__aeabi_dmul+0xde>
   83e04:	ea45 0e06 	orr.w	lr, r5, r6
   83e08:	e68d      	b.n	83b26 <__aeabi_dmul+0xde>
   83e0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83e0e:	ea94 0f0c 	teq	r4, ip
   83e12:	bf08      	it	eq
   83e14:	ea95 0f0c 	teqeq	r5, ip
   83e18:	f43f af3b 	beq.w	83c92 <__aeabi_dmul+0x24a>
   83e1c:	ea94 0f0c 	teq	r4, ip
   83e20:	d10a      	bne.n	83e38 <__aeabi_ddiv+0x19c>
   83e22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83e26:	f47f af34 	bne.w	83c92 <__aeabi_dmul+0x24a>
   83e2a:	ea95 0f0c 	teq	r5, ip
   83e2e:	f47f af25 	bne.w	83c7c <__aeabi_dmul+0x234>
   83e32:	4610      	mov	r0, r2
   83e34:	4619      	mov	r1, r3
   83e36:	e72c      	b.n	83c92 <__aeabi_dmul+0x24a>
   83e38:	ea95 0f0c 	teq	r5, ip
   83e3c:	d106      	bne.n	83e4c <__aeabi_ddiv+0x1b0>
   83e3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83e42:	f43f aefd 	beq.w	83c40 <__aeabi_dmul+0x1f8>
   83e46:	4610      	mov	r0, r2
   83e48:	4619      	mov	r1, r3
   83e4a:	e722      	b.n	83c92 <__aeabi_dmul+0x24a>
   83e4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83e50:	bf18      	it	ne
   83e52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83e56:	f47f aec5 	bne.w	83be4 <__aeabi_dmul+0x19c>
   83e5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83e5e:	f47f af0d 	bne.w	83c7c <__aeabi_dmul+0x234>
   83e62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   83e66:	f47f aeeb 	bne.w	83c40 <__aeabi_dmul+0x1f8>
   83e6a:	e712      	b.n	83c92 <__aeabi_dmul+0x24a>

00083e6c <__aeabi_d2iz>:
   83e6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83e70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83e74:	d215      	bcs.n	83ea2 <__aeabi_d2iz+0x36>
   83e76:	d511      	bpl.n	83e9c <__aeabi_d2iz+0x30>
   83e78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83e7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83e80:	d912      	bls.n	83ea8 <__aeabi_d2iz+0x3c>
   83e82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83e8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83e8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83e92:	fa23 f002 	lsr.w	r0, r3, r2
   83e96:	bf18      	it	ne
   83e98:	4240      	negne	r0, r0
   83e9a:	4770      	bx	lr
   83e9c:	f04f 0000 	mov.w	r0, #0
   83ea0:	4770      	bx	lr
   83ea2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83ea6:	d105      	bne.n	83eb4 <__aeabi_d2iz+0x48>
   83ea8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   83eac:	bf08      	it	eq
   83eae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83eb2:	4770      	bx	lr
   83eb4:	f04f 0000 	mov.w	r0, #0
   83eb8:	4770      	bx	lr
   83eba:	bf00      	nop

00083ebc <__aeabi_d2uiz>:
   83ebc:	004a      	lsls	r2, r1, #1
   83ebe:	d211      	bcs.n	83ee4 <__aeabi_d2uiz+0x28>
   83ec0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83ec4:	d211      	bcs.n	83eea <__aeabi_d2uiz+0x2e>
   83ec6:	d50d      	bpl.n	83ee4 <__aeabi_d2uiz+0x28>
   83ec8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83ecc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83ed0:	d40e      	bmi.n	83ef0 <__aeabi_d2uiz+0x34>
   83ed2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83eda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83ede:	fa23 f002 	lsr.w	r0, r3, r2
   83ee2:	4770      	bx	lr
   83ee4:	f04f 0000 	mov.w	r0, #0
   83ee8:	4770      	bx	lr
   83eea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83eee:	d102      	bne.n	83ef6 <__aeabi_d2uiz+0x3a>
   83ef0:	f04f 30ff 	mov.w	r0, #4294967295
   83ef4:	4770      	bx	lr
   83ef6:	f04f 0000 	mov.w	r0, #0
   83efa:	4770      	bx	lr

00083efc <atexit>:
   83efc:	4601      	mov	r1, r0
   83efe:	2000      	movs	r0, #0
   83f00:	4602      	mov	r2, r0
   83f02:	4603      	mov	r3, r0
   83f04:	f002 bc44 	b.w	86790 <__register_exitproc>

00083f08 <atof>:
   83f08:	2100      	movs	r1, #0
   83f0a:	f000 bf21 	b.w	84d50 <strtod>
	...

00083f10 <__libc_fini_array>:
   83f10:	b570      	push	{r4, r5, r6, lr}
   83f12:	4b08      	ldr	r3, [pc, #32]	; (83f34 <__libc_fini_array+0x24>)
   83f14:	4c08      	ldr	r4, [pc, #32]	; (83f38 <__libc_fini_array+0x28>)
   83f16:	2500      	movs	r5, #0
   83f18:	1ae0      	subs	r0, r4, r3
   83f1a:	1084      	asrs	r4, r0, #2
   83f1c:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   83f20:	3d04      	subs	r5, #4
   83f22:	b11c      	cbz	r4, 83f2c <__libc_fini_array+0x1c>
   83f24:	5972      	ldr	r2, [r6, r5]
   83f26:	4790      	blx	r2
   83f28:	3c01      	subs	r4, #1
   83f2a:	e7f9      	b.n	83f20 <__libc_fini_array+0x10>
   83f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   83f30:	f006 bda8 	b.w	8aa84 <_fini>
   83f34:	0008aa90 	.word	0x0008aa90
   83f38:	0008aa94 	.word	0x0008aa94

00083f3c <__libc_init_array>:
   83f3c:	b538      	push	{r3, r4, r5, lr}
   83f3e:	4d0e      	ldr	r5, [pc, #56]	; (83f78 <__libc_init_array+0x3c>)
   83f40:	4b0e      	ldr	r3, [pc, #56]	; (83f7c <__libc_init_array+0x40>)
   83f42:	2400      	movs	r4, #0
   83f44:	1ae8      	subs	r0, r5, r3
   83f46:	1085      	asrs	r5, r0, #2
   83f48:	42ac      	cmp	r4, r5
   83f4a:	d005      	beq.n	83f58 <__libc_init_array+0x1c>
   83f4c:	490b      	ldr	r1, [pc, #44]	; (83f7c <__libc_init_array+0x40>)
   83f4e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   83f52:	4790      	blx	r2
   83f54:	3401      	adds	r4, #1
   83f56:	e7f7      	b.n	83f48 <__libc_init_array+0xc>
   83f58:	f006 fd8a 	bl	8aa70 <_init>
   83f5c:	4908      	ldr	r1, [pc, #32]	; (83f80 <__libc_init_array+0x44>)
   83f5e:	4a09      	ldr	r2, [pc, #36]	; (83f84 <__libc_init_array+0x48>)
   83f60:	1a54      	subs	r4, r2, r1
   83f62:	10a5      	asrs	r5, r4, #2
   83f64:	2400      	movs	r4, #0
   83f66:	42ac      	cmp	r4, r5
   83f68:	d005      	beq.n	83f76 <__libc_init_array+0x3a>
   83f6a:	4b05      	ldr	r3, [pc, #20]	; (83f80 <__libc_init_array+0x44>)
   83f6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   83f70:	4780      	blx	r0
   83f72:	3401      	adds	r4, #1
   83f74:	e7f7      	b.n	83f66 <__libc_init_array+0x2a>
   83f76:	bd38      	pop	{r3, r4, r5, pc}
   83f78:	0008aa7c 	.word	0x0008aa7c
   83f7c:	0008aa7c 	.word	0x0008aa7c
   83f80:	0008aa7c 	.word	0x0008aa7c
   83f84:	0008aa84 	.word	0x0008aa84

00083f88 <iprintf>:
   83f88:	b40f      	push	{r0, r1, r2, r3}
   83f8a:	b507      	push	{r0, r1, r2, lr}
   83f8c:	4906      	ldr	r1, [pc, #24]	; (83fa8 <iprintf+0x20>)
   83f8e:	ab04      	add	r3, sp, #16
   83f90:	6808      	ldr	r0, [r1, #0]
   83f92:	f853 2b04 	ldr.w	r2, [r3], #4
   83f96:	6881      	ldr	r1, [r0, #8]
   83f98:	9301      	str	r3, [sp, #4]
   83f9a:	f001 fb2d 	bl	855f8 <_vfiprintf_r>
   83f9e:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   83fa2:	b004      	add	sp, #16
   83fa4:	4770      	bx	lr
   83fa6:	bf00      	nop
   83fa8:	20070010 	.word	0x20070010

00083fac <_iprintf_r>:
   83fac:	b40e      	push	{r1, r2, r3}
   83fae:	b503      	push	{r0, r1, lr}
   83fb0:	ab03      	add	r3, sp, #12
   83fb2:	f853 2b04 	ldr.w	r2, [r3], #4
   83fb6:	6881      	ldr	r1, [r0, #8]
   83fb8:	9301      	str	r3, [sp, #4]
   83fba:	f001 fb1d 	bl	855f8 <_vfiprintf_r>
   83fbe:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   83fc2:	b003      	add	sp, #12
   83fc4:	4770      	bx	lr
   83fc6:	bf00      	nop

00083fc8 <memcpy>:
   83fc8:	b510      	push	{r4, lr}
   83fca:	2300      	movs	r3, #0
   83fcc:	4293      	cmp	r3, r2
   83fce:	d003      	beq.n	83fd8 <memcpy+0x10>
   83fd0:	5ccc      	ldrb	r4, [r1, r3]
   83fd2:	54c4      	strb	r4, [r0, r3]
   83fd4:	3301      	adds	r3, #1
   83fd6:	e7f9      	b.n	83fcc <memcpy+0x4>
   83fd8:	bd10      	pop	{r4, pc}

00083fda <memset>:
   83fda:	1882      	adds	r2, r0, r2
   83fdc:	4603      	mov	r3, r0
   83fde:	4293      	cmp	r3, r2
   83fe0:	d002      	beq.n	83fe8 <memset+0xe>
   83fe2:	f803 1b01 	strb.w	r1, [r3], #1
   83fe6:	e7fa      	b.n	83fde <memset+0x4>
   83fe8:	4770      	bx	lr
	...

00083fec <scanf>:
   83fec:	b40f      	push	{r0, r1, r2, r3}
   83fee:	b507      	push	{r0, r1, r2, lr}
   83ff0:	4906      	ldr	r1, [pc, #24]	; (8400c <scanf+0x20>)
   83ff2:	ab04      	add	r3, sp, #16
   83ff4:	6808      	ldr	r0, [r1, #0]
   83ff6:	f853 2b04 	ldr.w	r2, [r3], #4
   83ffa:	6841      	ldr	r1, [r0, #4]
   83ffc:	9301      	str	r3, [sp, #4]
   83ffe:	f001 ff5d 	bl	85ebc <__svfscanf_r>
   84002:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   84006:	b004      	add	sp, #16
   84008:	4770      	bx	lr
   8400a:	bf00      	nop
   8400c:	20070010 	.word	0x20070010

00084010 <_scanf_r>:
   84010:	b40e      	push	{r1, r2, r3}
   84012:	b503      	push	{r0, r1, lr}
   84014:	ab03      	add	r3, sp, #12
   84016:	f853 2b04 	ldr.w	r2, [r3], #4
   8401a:	6841      	ldr	r1, [r0, #4]
   8401c:	9301      	str	r3, [sp, #4]
   8401e:	f001 ff4d 	bl	85ebc <__svfscanf_r>
   84022:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   84026:	b003      	add	sp, #12
   84028:	4770      	bx	lr
   8402a:	bf00      	nop

0008402c <setbuf>:
   8402c:	2900      	cmp	r1, #0
   8402e:	bf0c      	ite	eq
   84030:	2202      	moveq	r2, #2
   84032:	2200      	movne	r2, #0
   84034:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84038:	f000 b800 	b.w	8403c <setvbuf>

0008403c <setvbuf>:
   8403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84040:	461d      	mov	r5, r3
   84042:	4b37      	ldr	r3, [pc, #220]	; (84120 <setvbuf+0xe4>)
   84044:	4604      	mov	r4, r0
   84046:	6818      	ldr	r0, [r3, #0]
   84048:	460e      	mov	r6, r1
   8404a:	4617      	mov	r7, r2
   8404c:	4698      	mov	r8, r3
   8404e:	b118      	cbz	r0, 84058 <setvbuf+0x1c>
   84050:	6b82      	ldr	r2, [r0, #56]	; 0x38
   84052:	b90a      	cbnz	r2, 84058 <setvbuf+0x1c>
   84054:	f002 fce6 	bl	86a24 <__sinit>
   84058:	2f02      	cmp	r7, #2
   8405a:	d85d      	bhi.n	84118 <setvbuf+0xdc>
   8405c:	2d00      	cmp	r5, #0
   8405e:	db5b      	blt.n	84118 <setvbuf+0xdc>
   84060:	4621      	mov	r1, r4
   84062:	f8d8 0000 	ldr.w	r0, [r8]
   84066:	f002 fbeb 	bl	86840 <_fflush_r>
   8406a:	89a1      	ldrh	r1, [r4, #12]
   8406c:	2000      	movs	r0, #0
   8406e:	f001 0380 	and.w	r3, r1, #128	; 0x80
   84072:	b21a      	sxth	r2, r3
   84074:	6060      	str	r0, [r4, #4]
   84076:	61a0      	str	r0, [r4, #24]
   84078:	b122      	cbz	r2, 84084 <setvbuf+0x48>
   8407a:	4829      	ldr	r0, [pc, #164]	; (84120 <setvbuf+0xe4>)
   8407c:	6921      	ldr	r1, [r4, #16]
   8407e:	6800      	ldr	r0, [r0, #0]
   84080:	f002 fe6c 	bl	86d5c <_free_r>
   84084:	89a1      	ldrh	r1, [r4, #12]
   84086:	2f02      	cmp	r7, #2
   84088:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   8408c:	81a3      	strh	r3, [r4, #12]
   8408e:	d012      	beq.n	840b6 <setvbuf+0x7a>
   84090:	bb36      	cbnz	r6, 840e0 <setvbuf+0xa4>
   84092:	2d00      	cmp	r5, #0
   84094:	bf08      	it	eq
   84096:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   8409a:	4628      	mov	r0, r5
   8409c:	f003 fcac 	bl	879f8 <malloc>
   840a0:	4606      	mov	r6, r0
   840a2:	b9c8      	cbnz	r0, 840d8 <setvbuf+0x9c>
   840a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   840a8:	f003 fca6 	bl	879f8 <malloc>
   840ac:	4606      	mov	r6, r0
   840ae:	b988      	cbnz	r0, 840d4 <setvbuf+0x98>
   840b0:	f04f 30ff 	mov.w	r0, #4294967295
   840b4:	e000      	b.n	840b8 <setvbuf+0x7c>
   840b6:	2000      	movs	r0, #0
   840b8:	89a1      	ldrh	r1, [r4, #12]
   840ba:	2200      	movs	r2, #0
   840bc:	f041 0302 	orr.w	r3, r1, #2
   840c0:	81a3      	strh	r3, [r4, #12]
   840c2:	f104 0143 	add.w	r1, r4, #67	; 0x43
   840c6:	2301      	movs	r3, #1
   840c8:	60a2      	str	r2, [r4, #8]
   840ca:	6021      	str	r1, [r4, #0]
   840cc:	6121      	str	r1, [r4, #16]
   840ce:	6163      	str	r3, [r4, #20]
   840d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   840d4:	f44f 6580 	mov.w	r5, #1024	; 0x400
   840d8:	89a2      	ldrh	r2, [r4, #12]
   840da:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   840de:	81a0      	strh	r0, [r4, #12]
   840e0:	2f01      	cmp	r7, #1
   840e2:	d105      	bne.n	840f0 <setvbuf+0xb4>
   840e4:	89a1      	ldrh	r1, [r4, #12]
   840e6:	426a      	negs	r2, r5
   840e8:	f041 0301 	orr.w	r3, r1, #1
   840ec:	81a3      	strh	r3, [r4, #12]
   840ee:	61a2      	str	r2, [r4, #24]
   840f0:	480b      	ldr	r0, [pc, #44]	; (84120 <setvbuf+0xe4>)
   840f2:	89a2      	ldrh	r2, [r4, #12]
   840f4:	6801      	ldr	r1, [r0, #0]
   840f6:	4b0b      	ldr	r3, [pc, #44]	; (84124 <setvbuf+0xe8>)
   840f8:	f002 0008 	and.w	r0, r2, #8
   840fc:	b200      	sxth	r0, r0
   840fe:	63cb      	str	r3, [r1, #60]	; 0x3c
   84100:	6026      	str	r6, [r4, #0]
   84102:	6126      	str	r6, [r4, #16]
   84104:	6165      	str	r5, [r4, #20]
   84106:	b148      	cbz	r0, 8411c <setvbuf+0xe0>
   84108:	f012 0f03 	tst.w	r2, #3
   8410c:	bf18      	it	ne
   8410e:	2500      	movne	r5, #0
   84110:	60a5      	str	r5, [r4, #8]
   84112:	2000      	movs	r0, #0
   84114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84118:	f04f 30ff 	mov.w	r0, #4294967295
   8411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84120:	20070010 	.word	0x20070010
   84124:	00086999 	.word	0x00086999

00084128 <_sprintf_r>:
   84128:	b40c      	push	{r2, r3}
   8412a:	b510      	push	{r4, lr}
   8412c:	b09c      	sub	sp, #112	; 0x70
   8412e:	ab1e      	add	r3, sp, #120	; 0x78
   84130:	9102      	str	r1, [sp, #8]
   84132:	9106      	str	r1, [sp, #24]
   84134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   84138:	f853 2b04 	ldr.w	r2, [r3], #4
   8413c:	9104      	str	r1, [sp, #16]
   8413e:	9107      	str	r1, [sp, #28]
   84140:	f64f 71ff 	movw	r1, #65535	; 0xffff
   84144:	f8ad 1016 	strh.w	r1, [sp, #22]
   84148:	f44f 7402 	mov.w	r4, #520	; 0x208
   8414c:	a902      	add	r1, sp, #8
   8414e:	9301      	str	r3, [sp, #4]
   84150:	f8ad 4014 	strh.w	r4, [sp, #20]
   84154:	f000 fe20 	bl	84d98 <_svfprintf_r>
   84158:	9b02      	ldr	r3, [sp, #8]
   8415a:	2200      	movs	r2, #0
   8415c:	701a      	strb	r2, [r3, #0]
   8415e:	b01c      	add	sp, #112	; 0x70
   84160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84164:	b002      	add	sp, #8
   84166:	4770      	bx	lr

00084168 <sprintf>:
   84168:	b40e      	push	{r1, r2, r3}
   8416a:	b500      	push	{lr}
   8416c:	b09c      	sub	sp, #112	; 0x70
   8416e:	9002      	str	r0, [sp, #8]
   84170:	9006      	str	r0, [sp, #24]
   84172:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   84176:	ab1d      	add	r3, sp, #116	; 0x74
   84178:	9004      	str	r0, [sp, #16]
   8417a:	9007      	str	r0, [sp, #28]
   8417c:	f44f 7102 	mov.w	r1, #520	; 0x208
   84180:	480a      	ldr	r0, [pc, #40]	; (841ac <sprintf+0x44>)
   84182:	f853 2b04 	ldr.w	r2, [r3], #4
   84186:	f8ad 1014 	strh.w	r1, [sp, #20]
   8418a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8418e:	f8ad 1016 	strh.w	r1, [sp, #22]
   84192:	6800      	ldr	r0, [r0, #0]
   84194:	a902      	add	r1, sp, #8
   84196:	9301      	str	r3, [sp, #4]
   84198:	f000 fdfe 	bl	84d98 <_svfprintf_r>
   8419c:	9b02      	ldr	r3, [sp, #8]
   8419e:	2200      	movs	r2, #0
   841a0:	701a      	strb	r2, [r3, #0]
   841a2:	b01c      	add	sp, #112	; 0x70
   841a4:	f85d eb04 	ldr.w	lr, [sp], #4
   841a8:	b003      	add	sp, #12
   841aa:	4770      	bx	lr
   841ac:	20070010 	.word	0x20070010

000841b0 <strlen>:
   841b0:	4603      	mov	r3, r0
   841b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   841b6:	2a00      	cmp	r2, #0
   841b8:	d1fb      	bne.n	841b2 <strlen+0x2>
   841ba:	1a18      	subs	r0, r3, r0
   841bc:	3801      	subs	r0, #1
   841be:	4770      	bx	lr

000841c0 <strncmp>:
   841c0:	b570      	push	{r4, r5, r6, lr}
   841c2:	b192      	cbz	r2, 841ea <strncmp+0x2a>
   841c4:	460b      	mov	r3, r1
   841c6:	4605      	mov	r5, r0
   841c8:	b91a      	cbnz	r2, 841d2 <strncmp+0x12>
   841ca:	7828      	ldrb	r0, [r5, #0]
   841cc:	7819      	ldrb	r1, [r3, #0]
   841ce:	1a40      	subs	r0, r0, r1
   841d0:	bd70      	pop	{r4, r5, r6, pc}
   841d2:	f810 6b01 	ldrb.w	r6, [r0], #1
   841d6:	781c      	ldrb	r4, [r3, #0]
   841d8:	3101      	adds	r1, #1
   841da:	42b4      	cmp	r4, r6
   841dc:	d1f5      	bne.n	841ca <strncmp+0xa>
   841de:	2a01      	cmp	r2, #1
   841e0:	d0f3      	beq.n	841ca <strncmp+0xa>
   841e2:	3a01      	subs	r2, #1
   841e4:	2c00      	cmp	r4, #0
   841e6:	d1ed      	bne.n	841c4 <strncmp+0x4>
   841e8:	e7ef      	b.n	841ca <strncmp+0xa>
   841ea:	4610      	mov	r0, r2
   841ec:	bd70      	pop	{r4, r5, r6, pc}

000841ee <strncpy>:
   841ee:	b530      	push	{r4, r5, lr}
   841f0:	3901      	subs	r1, #1
   841f2:	4603      	mov	r3, r0
   841f4:	461c      	mov	r4, r3
   841f6:	b13a      	cbz	r2, 84208 <strncpy+0x1a>
   841f8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   841fc:	3a01      	subs	r2, #1
   841fe:	f803 5b01 	strb.w	r5, [r3], #1
   84202:	461c      	mov	r4, r3
   84204:	2d00      	cmp	r5, #0
   84206:	d1f5      	bne.n	841f4 <strncpy+0x6>
   84208:	1899      	adds	r1, r3, r2
   8420a:	428c      	cmp	r4, r1
   8420c:	d003      	beq.n	84216 <strncpy+0x28>
   8420e:	2200      	movs	r2, #0
   84210:	f804 2b01 	strb.w	r2, [r4], #1
   84214:	e7f9      	b.n	8420a <strncpy+0x1c>
   84216:	bd30      	pop	{r4, r5, pc}

00084218 <match>:
   84218:	b530      	push	{r4, r5, lr}
   8421a:	6805      	ldr	r5, [r0, #0]
   8421c:	f811 2b01 	ldrb.w	r2, [r1], #1
   84220:	462c      	mov	r4, r5
   84222:	1c6b      	adds	r3, r5, #1
   84224:	b152      	cbz	r2, 8423c <match+0x24>
   84226:	461d      	mov	r5, r3
   84228:	7863      	ldrb	r3, [r4, #1]
   8422a:	2b40      	cmp	r3, #64	; 0x40
   8422c:	dd02      	ble.n	84234 <match+0x1c>
   8422e:	2b5a      	cmp	r3, #90	; 0x5a
   84230:	bfd8      	it	le
   84232:	3320      	addle	r3, #32
   84234:	4293      	cmp	r3, r2
   84236:	d0f1      	beq.n	8421c <match+0x4>
   84238:	2000      	movs	r0, #0
   8423a:	bd30      	pop	{r4, r5, pc}
   8423c:	6003      	str	r3, [r0, #0]
   8423e:	2001      	movs	r0, #1
   84240:	bd30      	pop	{r4, r5, pc}

00084242 <_strtod_r>:
   84242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84246:	b097      	sub	sp, #92	; 0x5c
   84248:	9002      	str	r0, [sp, #8]
   8424a:	4688      	mov	r8, r1
   8424c:	920f      	str	r2, [sp, #60]	; 0x3c
   8424e:	f04f 0a00 	mov.w	sl, #0
   84252:	f04f 0b00 	mov.w	fp, #0
   84256:	9111      	str	r1, [sp, #68]	; 0x44
   84258:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8425a:	7813      	ldrb	r3, [r2, #0]
   8425c:	2b0d      	cmp	r3, #13
   8425e:	d805      	bhi.n	8426c <_strtod_r+0x2a>
   84260:	2b09      	cmp	r3, #9
   84262:	d213      	bcs.n	8428c <_strtod_r+0x4a>
   84264:	2b00      	cmp	r3, #0
   84266:	f000 81ae 	beq.w	845c6 <_strtod_r+0x384>
   8426a:	e012      	b.n	84292 <_strtod_r+0x50>
   8426c:	2b2b      	cmp	r3, #43	; 0x2b
   8426e:	d006      	beq.n	8427e <_strtod_r+0x3c>
   84270:	2b2d      	cmp	r3, #45	; 0x2d
   84272:	d002      	beq.n	8427a <_strtod_r+0x38>
   84274:	2b20      	cmp	r3, #32
   84276:	d10c      	bne.n	84292 <_strtod_r+0x50>
   84278:	e008      	b.n	8428c <_strtod_r+0x4a>
   8427a:	2301      	movs	r3, #1
   8427c:	e000      	b.n	84280 <_strtod_r+0x3e>
   8427e:	2300      	movs	r3, #0
   84280:	1c54      	adds	r4, r2, #1
   84282:	9411      	str	r4, [sp, #68]	; 0x44
   84284:	7852      	ldrb	r2, [r2, #1]
   84286:	930b      	str	r3, [sp, #44]	; 0x2c
   84288:	b92a      	cbnz	r2, 84296 <_strtod_r+0x54>
   8428a:	e19c      	b.n	845c6 <_strtod_r+0x384>
   8428c:	1c51      	adds	r1, r2, #1
   8428e:	9111      	str	r1, [sp, #68]	; 0x44
   84290:	e7e2      	b.n	84258 <_strtod_r+0x16>
   84292:	2400      	movs	r4, #0
   84294:	940b      	str	r4, [sp, #44]	; 0x2c
   84296:	9c11      	ldr	r4, [sp, #68]	; 0x44
   84298:	7821      	ldrb	r1, [r4, #0]
   8429a:	2930      	cmp	r1, #48	; 0x30
   8429c:	d156      	bne.n	8434c <_strtod_r+0x10a>
   8429e:	7863      	ldrb	r3, [r4, #1]
   842a0:	2b58      	cmp	r3, #88	; 0x58
   842a2:	d001      	beq.n	842a8 <_strtod_r+0x66>
   842a4:	2b78      	cmp	r3, #120	; 0x78
   842a6:	d145      	bne.n	84334 <_strtod_r+0xf2>
   842a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   842aa:	4e9f      	ldr	r6, [pc, #636]	; (84528 <_strtod_r+0x2e6>)
   842ac:	af12      	add	r7, sp, #72	; 0x48
   842ae:	9700      	str	r7, [sp, #0]
   842b0:	9101      	str	r1, [sp, #4]
   842b2:	9802      	ldr	r0, [sp, #8]
   842b4:	a911      	add	r1, sp, #68	; 0x44
   842b6:	4632      	mov	r2, r6
   842b8:	ab13      	add	r3, sp, #76	; 0x4c
   842ba:	f002 ffff 	bl	872bc <__gethex>
   842be:	f010 0707 	ands.w	r7, r0, #7
   842c2:	4605      	mov	r5, r0
   842c4:	f000 8524 	beq.w	84d10 <_strtod_r+0xace>
   842c8:	2f06      	cmp	r7, #6
   842ca:	d103      	bne.n	842d4 <_strtod_r+0x92>
   842cc:	1c61      	adds	r1, r4, #1
   842ce:	9111      	str	r1, [sp, #68]	; 0x44
   842d0:	f000 bd1e 	b.w	84d10 <_strtod_r+0xace>
   842d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   842d6:	b13a      	cbz	r2, 842e8 <_strtod_r+0xa6>
   842d8:	a814      	add	r0, sp, #80	; 0x50
   842da:	6831      	ldr	r1, [r6, #0]
   842dc:	f004 f9d8 	bl	88690 <__copybits>
   842e0:	9802      	ldr	r0, [sp, #8]
   842e2:	9912      	ldr	r1, [sp, #72]	; 0x48
   842e4:	f003 fe4a 	bl	87f7c <_Bfree>
   842e8:	3f01      	subs	r7, #1
   842ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
   842ec:	2f04      	cmp	r7, #4
   842ee:	d81a      	bhi.n	84326 <_strtod_r+0xe4>
   842f0:	e8df f007 	tbb	[pc, r7]
   842f4:	15120308 	.word	0x15120308
   842f8:	08          	.byte	0x08
   842f9:	00          	.byte	0x00
   842fa:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
   842fe:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   84302:	e010      	b.n	84326 <_strtod_r+0xe4>
   84304:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84306:	f200 4233 	addw	r2, r0, #1075	; 0x433
   8430a:	f423 1480 	bic.w	r4, r3, #1048576	; 0x100000
   8430e:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
   84312:	ea44 5b02 	orr.w	fp, r4, r2, lsl #20
   84316:	e006      	b.n	84326 <_strtod_r+0xe4>
   84318:	f8df b210 	ldr.w	fp, [pc, #528]	; 8452c <_strtod_r+0x2ea>
   8431c:	e003      	b.n	84326 <_strtod_r+0xe4>
   8431e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   84322:	f04f 3aff 	mov.w	sl, #4294967295
   84326:	0729      	lsls	r1, r5, #28
   84328:	f140 84f2 	bpl.w	84d10 <_strtod_r+0xace>
   8432c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   84330:	f000 bcee 	b.w	84d10 <_strtod_r+0xace>
   84334:	9c11      	ldr	r4, [sp, #68]	; 0x44
   84336:	1c62      	adds	r2, r4, #1
   84338:	9211      	str	r2, [sp, #68]	; 0x44
   8433a:	7861      	ldrb	r1, [r4, #1]
   8433c:	2930      	cmp	r1, #48	; 0x30
   8433e:	d0f9      	beq.n	84334 <_strtod_r+0xf2>
   84340:	2900      	cmp	r1, #0
   84342:	f000 84e5 	beq.w	84d10 <_strtod_r+0xace>
   84346:	2601      	movs	r6, #1
   84348:	9604      	str	r6, [sp, #16]
   8434a:	e001      	b.n	84350 <_strtod_r+0x10e>
   8434c:	2500      	movs	r5, #0
   8434e:	9504      	str	r5, [sp, #16]
   84350:	9f11      	ldr	r7, [sp, #68]	; 0x44
   84352:	9706      	str	r7, [sp, #24]
   84354:	2700      	movs	r7, #0
   84356:	9703      	str	r7, [sp, #12]
   84358:	463e      	mov	r6, r7
   8435a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   8435c:	782c      	ldrb	r4, [r5, #0]
   8435e:	2c2f      	cmp	r4, #47	; 0x2f
   84360:	dc16      	bgt.n	84390 <_strtod_r+0x14e>
   84362:	9802      	ldr	r0, [sp, #8]
   84364:	f003 faca 	bl	878fc <_localeconv_r>
   84368:	f8d0 9000 	ldr.w	r9, [r0]
   8436c:	9802      	ldr	r0, [sp, #8]
   8436e:	f003 fac5 	bl	878fc <_localeconv_r>
   84372:	6800      	ldr	r0, [r0, #0]
   84374:	f7ff ff1c 	bl	841b0 <strlen>
   84378:	4649      	mov	r1, r9
   8437a:	4602      	mov	r2, r0
   8437c:	4628      	mov	r0, r5
   8437e:	f7ff ff1f 	bl	841c0 <strncmp>
   84382:	4681      	mov	r9, r0
   84384:	b1c8      	cbz	r0, 843ba <_strtod_r+0x178>
   84386:	2300      	movs	r3, #0
   84388:	4635      	mov	r5, r6
   8438a:	461a      	mov	r2, r3
   8438c:	9307      	str	r3, [sp, #28]
   8438e:	e074      	b.n	8447a <_strtod_r+0x238>
   84390:	2c39      	cmp	r4, #57	; 0x39
   84392:	dce6      	bgt.n	84362 <_strtod_r+0x120>
   84394:	2e0f      	cmp	r6, #15
   84396:	dc0c      	bgt.n	843b2 <_strtod_r+0x170>
   84398:	2e08      	cmp	r6, #8
   8439a:	bfd8      	it	le
   8439c:	9803      	ldrle	r0, [sp, #12]
   8439e:	f04f 030a 	mov.w	r3, #10
   843a2:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
   843a6:	bfd6      	itet	le
   843a8:	fb03 4000 	mlale	r0, r3, r0, r4
   843ac:	fb03 4707 	mlagt	r7, r3, r7, r4
   843b0:	9003      	strle	r0, [sp, #12]
   843b2:	1c6c      	adds	r4, r5, #1
   843b4:	3601      	adds	r6, #1
   843b6:	9411      	str	r4, [sp, #68]	; 0x44
   843b8:	e7cf      	b.n	8435a <_strtod_r+0x118>
   843ba:	9802      	ldr	r0, [sp, #8]
   843bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
   843be:	f003 fa9d 	bl	878fc <_localeconv_r>
   843c2:	6800      	ldr	r0, [r0, #0]
   843c4:	f7ff fef4 	bl	841b0 <strlen>
   843c8:	1823      	adds	r3, r4, r0
   843ca:	9311      	str	r3, [sp, #68]	; 0x44
   843cc:	5c24      	ldrb	r4, [r4, r0]
   843ce:	b11e      	cbz	r6, 843d8 <_strtod_r+0x196>
   843d0:	4635      	mov	r5, r6
   843d2:	464b      	mov	r3, r9
   843d4:	464a      	mov	r2, r9
   843d6:	e045      	b.n	84464 <_strtod_r+0x222>
   843d8:	4633      	mov	r3, r6
   843da:	2c30      	cmp	r4, #48	; 0x30
   843dc:	d105      	bne.n	843ea <_strtod_r+0x1a8>
   843de:	9d11      	ldr	r5, [sp, #68]	; 0x44
   843e0:	3301      	adds	r3, #1
   843e2:	1c6a      	adds	r2, r5, #1
   843e4:	9211      	str	r2, [sp, #68]	; 0x44
   843e6:	786c      	ldrb	r4, [r5, #1]
   843e8:	e7f7      	b.n	843da <_strtod_r+0x198>
   843ea:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   843ee:	2808      	cmp	r0, #8
   843f0:	d83f      	bhi.n	84472 <_strtod_r+0x230>
   843f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   843f4:	9206      	str	r2, [sp, #24]
   843f6:	461a      	mov	r2, r3
   843f8:	2300      	movs	r3, #0
   843fa:	461d      	mov	r5, r3
   843fc:	1c59      	adds	r1, r3, #1
   843fe:	f1b4 0930 	subs.w	r9, r4, #48	; 0x30
   84402:	d02a      	beq.n	8445a <_strtod_r+0x218>
   84404:	1852      	adds	r2, r2, r1
   84406:	1c68      	adds	r0, r5, #1
   84408:	ebc5 0c00 	rsb	ip, r5, r0
   8440c:	458c      	cmp	ip, r1
   8440e:	da11      	bge.n	84434 <_strtod_r+0x1f2>
   84410:	f100 3eff 	add.w	lr, r0, #4294967295
   84414:	f1be 0f10 	cmp.w	lr, #16
   84418:	dc0a      	bgt.n	84430 <_strtod_r+0x1ee>
   8441a:	2809      	cmp	r0, #9
   8441c:	bfd8      	it	le
   8441e:	9c03      	ldrle	r4, [sp, #12]
   84420:	f04f 0c0a 	mov.w	ip, #10
   84424:	bfd6      	itet	le
   84426:	fb0c f404 	mulle.w	r4, ip, r4
   8442a:	fb0c f707 	mulgt.w	r7, ip, r7
   8442e:	9403      	strle	r4, [sp, #12]
   84430:	3001      	adds	r0, #1
   84432:	e7e9      	b.n	84408 <_strtod_r+0x1c6>
   84434:	2b00      	cmp	r3, #0
   84436:	bfac      	ite	ge
   84438:	18eb      	addge	r3, r5, r3
   8443a:	1c2b      	addlt	r3, r5, #0
   8443c:	1c5d      	adds	r5, r3, #1
   8443e:	2b10      	cmp	r3, #16
   84440:	dc0a      	bgt.n	84458 <_strtod_r+0x216>
   84442:	2d09      	cmp	r5, #9
   84444:	bfd8      	it	le
   84446:	9c03      	ldrle	r4, [sp, #12]
   84448:	f04f 000a 	mov.w	r0, #10
   8444c:	bfd6      	itet	le
   8444e:	fb00 9404 	mlale	r4, r0, r4, r9
   84452:	fb00 9707 	mlagt	r7, r0, r7, r9
   84456:	9403      	strle	r4, [sp, #12]
   84458:	2100      	movs	r1, #0
   8445a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   8445c:	1c63      	adds	r3, r4, #1
   8445e:	9311      	str	r3, [sp, #68]	; 0x44
   84460:	7864      	ldrb	r4, [r4, #1]
   84462:	460b      	mov	r3, r1
   84464:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   84468:	2809      	cmp	r0, #9
   8446a:	d9c7      	bls.n	843fc <_strtod_r+0x1ba>
   8446c:	2101      	movs	r1, #1
   8446e:	9107      	str	r1, [sp, #28]
   84470:	e003      	b.n	8447a <_strtod_r+0x238>
   84472:	2500      	movs	r5, #0
   84474:	2101      	movs	r1, #1
   84476:	462a      	mov	r2, r5
   84478:	9107      	str	r1, [sp, #28]
   8447a:	2c65      	cmp	r4, #101	; 0x65
   8447c:	d001      	beq.n	84482 <_strtod_r+0x240>
   8447e:	2c45      	cmp	r4, #69	; 0x45
   84480:	d158      	bne.n	84534 <_strtod_r+0x2f2>
   84482:	b925      	cbnz	r5, 8448e <_strtod_r+0x24c>
   84484:	b91b      	cbnz	r3, 8448e <_strtod_r+0x24c>
   84486:	9c04      	ldr	r4, [sp, #16]
   84488:	2c00      	cmp	r4, #0
   8448a:	f000 809c 	beq.w	845c6 <_strtod_r+0x384>
   8448e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
   84492:	f108 0001 	add.w	r0, r8, #1
   84496:	9011      	str	r0, [sp, #68]	; 0x44
   84498:	f898 4001 	ldrb.w	r4, [r8, #1]
   8449c:	2c2b      	cmp	r4, #43	; 0x2b
   8449e:	d003      	beq.n	844a8 <_strtod_r+0x266>
   844a0:	2c2d      	cmp	r4, #45	; 0x2d
   844a2:	d003      	beq.n	844ac <_strtod_r+0x26a>
   844a4:	2000      	movs	r0, #0
   844a6:	e007      	b.n	844b8 <_strtod_r+0x276>
   844a8:	2000      	movs	r0, #0
   844aa:	e000      	b.n	844ae <_strtod_r+0x26c>
   844ac:	2001      	movs	r0, #1
   844ae:	f108 0102 	add.w	r1, r8, #2
   844b2:	9111      	str	r1, [sp, #68]	; 0x44
   844b4:	f898 4002 	ldrb.w	r4, [r8, #2]
   844b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   844bc:	f1be 0f09 	cmp.w	lr, #9
   844c0:	d836      	bhi.n	84530 <_strtod_r+0x2ee>
   844c2:	2c30      	cmp	r4, #48	; 0x30
   844c4:	d106      	bne.n	844d4 <_strtod_r+0x292>
   844c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
   844c8:	f104 0901 	add.w	r9, r4, #1
   844cc:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   844d0:	7864      	ldrb	r4, [r4, #1]
   844d2:	e7f6      	b.n	844c2 <_strtod_r+0x280>
   844d4:	f1a4 0931 	sub.w	r9, r4, #49	; 0x31
   844d8:	f1b9 0f08 	cmp.w	r9, #8
   844dc:	d82a      	bhi.n	84534 <_strtod_r+0x2f2>
   844de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   844e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
   844e4:	9405      	str	r4, [sp, #20]
   844e6:	9911      	ldr	r1, [sp, #68]	; 0x44
   844e8:	f101 0e01 	add.w	lr, r1, #1
   844ec:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
   844f0:	784c      	ldrb	r4, [r1, #1]
   844f2:	2c2f      	cmp	r4, #47	; 0x2f
   844f4:	dc0b      	bgt.n	8450e <_strtod_r+0x2cc>
   844f6:	9905      	ldr	r1, [sp, #20]
   844f8:	ebc1 090e 	rsb	r9, r1, lr
   844fc:	f1b9 0f08 	cmp.w	r9, #8
   84500:	f644 691f 	movw	r9, #19999	; 0x4e1f
   84504:	dc0c      	bgt.n	84520 <_strtod_r+0x2de>
   84506:	45cc      	cmp	ip, r9
   84508:	bfb8      	it	lt
   8450a:	46e1      	movlt	r9, ip
   8450c:	e008      	b.n	84520 <_strtod_r+0x2de>
   8450e:	2c39      	cmp	r4, #57	; 0x39
   84510:	dcf1      	bgt.n	844f6 <_strtod_r+0x2b4>
   84512:	f04f 0e0a 	mov.w	lr, #10
   84516:	fb0e 4c0c 	mla	ip, lr, ip, r4
   8451a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   8451e:	e7e2      	b.n	844e6 <_strtod_r+0x2a4>
   84520:	b150      	cbz	r0, 84538 <_strtod_r+0x2f6>
   84522:	f1c9 0900 	rsb	r9, r9, #0
   84526:	e007      	b.n	84538 <_strtod_r+0x2f6>
   84528:	20070440 	.word	0x20070440
   8452c:	7ff00000 	.word	0x7ff00000
   84530:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   84534:	f04f 0900 	mov.w	r9, #0
   84538:	2d00      	cmp	r5, #0
   8453a:	d149      	bne.n	845d0 <_strtod_r+0x38e>
   8453c:	2b00      	cmp	r3, #0
   8453e:	f040 83e7 	bne.w	84d10 <_strtod_r+0xace>
   84542:	9a04      	ldr	r2, [sp, #16]
   84544:	2a00      	cmp	r2, #0
   84546:	f040 83e3 	bne.w	84d10 <_strtod_r+0xace>
   8454a:	9b07      	ldr	r3, [sp, #28]
   8454c:	2b00      	cmp	r3, #0
   8454e:	d13a      	bne.n	845c6 <_strtod_r+0x384>
   84550:	2c4e      	cmp	r4, #78	; 0x4e
   84552:	d01b      	beq.n	8458c <_strtod_r+0x34a>
   84554:	dc02      	bgt.n	8455c <_strtod_r+0x31a>
   84556:	2c49      	cmp	r4, #73	; 0x49
   84558:	d135      	bne.n	845c6 <_strtod_r+0x384>
   8455a:	e004      	b.n	84566 <_strtod_r+0x324>
   8455c:	2c69      	cmp	r4, #105	; 0x69
   8455e:	d002      	beq.n	84566 <_strtod_r+0x324>
   84560:	2c6e      	cmp	r4, #110	; 0x6e
   84562:	d130      	bne.n	845c6 <_strtod_r+0x384>
   84564:	e012      	b.n	8458c <_strtod_r+0x34a>
   84566:	a811      	add	r0, sp, #68	; 0x44
   84568:	49a4      	ldr	r1, [pc, #656]	; (847fc <_strtod_r+0x5ba>)
   8456a:	f7ff fe55 	bl	84218 <match>
   8456e:	b350      	cbz	r0, 845c6 <_strtod_r+0x384>
   84570:	9c11      	ldr	r4, [sp, #68]	; 0x44
   84572:	a811      	add	r0, sp, #68	; 0x44
   84574:	1e61      	subs	r1, r4, #1
   84576:	9111      	str	r1, [sp, #68]	; 0x44
   84578:	49a1      	ldr	r1, [pc, #644]	; (84800 <_strtod_r+0x5be>)
   8457a:	f7ff fe4d 	bl	84218 <match>
   8457e:	b910      	cbnz	r0, 84586 <_strtod_r+0x344>
   84580:	9811      	ldr	r0, [sp, #68]	; 0x44
   84582:	1c42      	adds	r2, r0, #1
   84584:	9211      	str	r2, [sp, #68]	; 0x44
   84586:	f8df b28c 	ldr.w	fp, [pc, #652]	; 84814 <_strtod_r+0x5d2>
   8458a:	e019      	b.n	845c0 <_strtod_r+0x37e>
   8458c:	a811      	add	r0, sp, #68	; 0x44
   8458e:	499d      	ldr	r1, [pc, #628]	; (84804 <_strtod_r+0x5c2>)
   84590:	f7ff fe42 	bl	84218 <match>
   84594:	b1b8      	cbz	r0, 845c6 <_strtod_r+0x384>
   84596:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84598:	781c      	ldrb	r4, [r3, #0]
   8459a:	2c28      	cmp	r4, #40	; 0x28
   8459c:	d10e      	bne.n	845bc <_strtod_r+0x37a>
   8459e:	a811      	add	r0, sp, #68	; 0x44
   845a0:	4999      	ldr	r1, [pc, #612]	; (84808 <_strtod_r+0x5c6>)
   845a2:	aa14      	add	r2, sp, #80	; 0x50
   845a4:	f003 f8d8 	bl	87758 <__hexnan>
   845a8:	2805      	cmp	r0, #5
   845aa:	d107      	bne.n	845bc <_strtod_r+0x37a>
   845ac:	9915      	ldr	r1, [sp, #84]	; 0x54
   845ae:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
   845b2:	f041 40ff 	orr.w	r0, r1, #2139095040	; 0x7f800000
   845b6:	f440 0be0 	orr.w	fp, r0, #7340032	; 0x700000
   845ba:	e3a9      	b.n	84d10 <_strtod_r+0xace>
   845bc:	f8df b260 	ldr.w	fp, [pc, #608]	; 84820 <_strtod_r+0x5de>
   845c0:	f04f 0a00 	mov.w	sl, #0
   845c4:	e3a4      	b.n	84d10 <_strtod_r+0xace>
   845c6:	2100      	movs	r1, #0
   845c8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   845cc:	910b      	str	r1, [sp, #44]	; 0x2c
   845ce:	e39f      	b.n	84d10 <_strtod_r+0xace>
   845d0:	ebc2 0209 	rsb	r2, r2, r9
   845d4:	9803      	ldr	r0, [sp, #12]
   845d6:	9205      	str	r2, [sp, #20]
   845d8:	f7ff f9c0 	bl	8395c <__aeabi_ui2d>
   845dc:	2d10      	cmp	r5, #16
   845de:	bfb4      	ite	lt
   845e0:	462c      	movlt	r4, r5
   845e2:	2410      	movge	r4, #16
   845e4:	2e00      	cmp	r6, #0
   845e6:	bf08      	it	eq
   845e8:	462e      	moveq	r6, r5
   845ea:	2c09      	cmp	r4, #9
   845ec:	4682      	mov	sl, r0
   845ee:	468b      	mov	fp, r1
   845f0:	dd15      	ble.n	8461e <_strtod_r+0x3dc>
   845f2:	4b86      	ldr	r3, [pc, #536]	; (8480c <_strtod_r+0x5ca>)
   845f4:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   845f8:	f1a2 0348 	sub.w	r3, r2, #72	; 0x48
   845fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   84600:	f7ff fa22 	bl	83a48 <__aeabi_dmul>
   84604:	4680      	mov	r8, r0
   84606:	4638      	mov	r0, r7
   84608:	4689      	mov	r9, r1
   8460a:	f7ff f9a7 	bl	8395c <__aeabi_ui2d>
   8460e:	4602      	mov	r2, r0
   84610:	460b      	mov	r3, r1
   84612:	4640      	mov	r0, r8
   84614:	4649      	mov	r1, r9
   84616:	f7ff f865 	bl	836e4 <__adddf3>
   8461a:	4682      	mov	sl, r0
   8461c:	468b      	mov	fp, r1
   8461e:	2d0f      	cmp	r5, #15
   84620:	dc36      	bgt.n	84690 <_strtod_r+0x44e>
   84622:	9805      	ldr	r0, [sp, #20]
   84624:	2800      	cmp	r0, #0
   84626:	f000 8373 	beq.w	84d10 <_strtod_r+0xace>
   8462a:	dd23      	ble.n	84674 <_strtod_r+0x432>
   8462c:	2816      	cmp	r0, #22
   8462e:	dc06      	bgt.n	8463e <_strtod_r+0x3fc>
   84630:	4976      	ldr	r1, [pc, #472]	; (8480c <_strtod_r+0x5ca>)
   84632:	4652      	mov	r2, sl
   84634:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   84638:	c803      	ldmia	r0, {r0, r1}
   8463a:	465b      	mov	r3, fp
   8463c:	e015      	b.n	8466a <_strtod_r+0x428>
   8463e:	9805      	ldr	r0, [sp, #20]
   84640:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   84644:	4290      	cmp	r0, r2
   84646:	dc23      	bgt.n	84690 <_strtod_r+0x44e>
   84648:	4c70      	ldr	r4, [pc, #448]	; (8480c <_strtod_r+0x5ca>)
   8464a:	f1c5 050f 	rsb	r5, r5, #15
   8464e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
   84652:	e9d2 0100 	ldrd	r0, r1, [r2]
   84656:	465b      	mov	r3, fp
   84658:	4652      	mov	r2, sl
   8465a:	f7ff f9f5 	bl	83a48 <__aeabi_dmul>
   8465e:	9b05      	ldr	r3, [sp, #20]
   84660:	1b5d      	subs	r5, r3, r5
   84662:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   84666:	e9d4 2300 	ldrd	r2, r3, [r4]
   8466a:	f7ff f9ed 	bl	83a48 <__aeabi_dmul>
   8466e:	4682      	mov	sl, r0
   84670:	468b      	mov	fp, r1
   84672:	e34d      	b.n	84d10 <_strtod_r+0xace>
   84674:	9905      	ldr	r1, [sp, #20]
   84676:	f111 0f16 	cmn.w	r1, #22
   8467a:	db09      	blt.n	84690 <_strtod_r+0x44e>
   8467c:	4c63      	ldr	r4, [pc, #396]	; (8480c <_strtod_r+0x5ca>)
   8467e:	4650      	mov	r0, sl
   84680:	eba4 03c1 	sub.w	r3, r4, r1, lsl #3
   84684:	e9d3 2300 	ldrd	r2, r3, [r3]
   84688:	4659      	mov	r1, fp
   8468a:	f7ff fb07 	bl	83c9c <__aeabi_ddiv>
   8468e:	e7ee      	b.n	8466e <_strtod_r+0x42c>
   84690:	1b29      	subs	r1, r5, r4
   84692:	9c05      	ldr	r4, [sp, #20]
   84694:	1864      	adds	r4, r4, r1
   84696:	2c00      	cmp	r4, #0
   84698:	dd54      	ble.n	84744 <_strtod_r+0x502>
   8469a:	f014 000f 	ands.w	r0, r4, #15
   8469e:	d00a      	beq.n	846b6 <_strtod_r+0x474>
   846a0:	4a5a      	ldr	r2, [pc, #360]	; (8480c <_strtod_r+0x5ca>)
   846a2:	465b      	mov	r3, fp
   846a4:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   846a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   846ac:	4652      	mov	r2, sl
   846ae:	f7ff f9cb 	bl	83a48 <__aeabi_dmul>
   846b2:	4682      	mov	sl, r0
   846b4:	468b      	mov	fp, r1
   846b6:	f034 030f 	bics.w	r3, r4, #15
   846ba:	f000 80b5 	beq.w	84828 <_strtod_r+0x5e6>
   846be:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
   846c2:	dd0f      	ble.n	846e4 <_strtod_r+0x4a2>
   846c4:	f04f 0800 	mov.w	r8, #0
   846c8:	f8cd 800c 	str.w	r8, [sp, #12]
   846cc:	f8cd 801c 	str.w	r8, [sp, #28]
   846d0:	f8cd 8018 	str.w	r8, [sp, #24]
   846d4:	9802      	ldr	r0, [sp, #8]
   846d6:	2122      	movs	r1, #34	; 0x22
   846d8:	6001      	str	r1, [r0, #0]
   846da:	f8df b138 	ldr.w	fp, [pc, #312]	; 84814 <_strtod_r+0x5d2>
   846de:	f04f 0a00 	mov.w	sl, #0
   846e2:	e172      	b.n	849ca <_strtod_r+0x788>
   846e4:	111f      	asrs	r7, r3, #4
   846e6:	4650      	mov	r0, sl
   846e8:	4659      	mov	r1, fp
   846ea:	f04f 0800 	mov.w	r8, #0
   846ee:	2f01      	cmp	r7, #1
   846f0:	dd0c      	ble.n	8470c <_strtod_r+0x4ca>
   846f2:	07fa      	lsls	r2, r7, #31
   846f4:	d506      	bpl.n	84704 <_strtod_r+0x4c2>
   846f6:	4a46      	ldr	r2, [pc, #280]	; (84810 <_strtod_r+0x5ce>)
   846f8:	eb02 03c8 	add.w	r3, r2, r8, lsl #3
   846fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   84700:	f7ff f9a2 	bl	83a48 <__aeabi_dmul>
   84704:	f108 0801 	add.w	r8, r8, #1
   84708:	107f      	asrs	r7, r7, #1
   8470a:	e7f0      	b.n	846ee <_strtod_r+0x4ac>
   8470c:	4602      	mov	r2, r0
   8470e:	4840      	ldr	r0, [pc, #256]	; (84810 <_strtod_r+0x5ce>)
   84710:	f1a1 7354 	sub.w	r3, r1, #55574528	; 0x3500000
   84714:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
   84718:	e9d1 0100 	ldrd	r0, r1, [r1]
   8471c:	f7ff f994 	bl	83a48 <__aeabi_dmul>
   84720:	4b3c      	ldr	r3, [pc, #240]	; (84814 <_strtod_r+0x5d2>)
   84722:	4c3d      	ldr	r4, [pc, #244]	; (84818 <_strtod_r+0x5d6>)
   84724:	400b      	ands	r3, r1
   84726:	42a3      	cmp	r3, r4
   84728:	4682      	mov	sl, r0
   8472a:	468b      	mov	fp, r1
   8472c:	d8ca      	bhi.n	846c4 <_strtod_r+0x482>
   8472e:	f5a4 1780 	sub.w	r7, r4, #1048576	; 0x100000
   84732:	42bb      	cmp	r3, r7
   84734:	bf86      	itte	hi
   84736:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 84824 <_strtod_r+0x5e2>
   8473a:	f04f 3aff 	movhi.w	sl, #4294967295
   8473e:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
   84742:	e071      	b.n	84828 <_strtod_r+0x5e6>
   84744:	d070      	beq.n	84828 <_strtod_r+0x5e6>
   84746:	4267      	negs	r7, r4
   84748:	f017 030f 	ands.w	r3, r7, #15
   8474c:	d00a      	beq.n	84764 <_strtod_r+0x522>
   8474e:	4a2f      	ldr	r2, [pc, #188]	; (8480c <_strtod_r+0x5ca>)
   84750:	4650      	mov	r0, sl
   84752:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   84756:	4659      	mov	r1, fp
   84758:	e9d4 2300 	ldrd	r2, r3, [r4]
   8475c:	f7ff fa9e 	bl	83c9c <__aeabi_ddiv>
   84760:	4682      	mov	sl, r0
   84762:	468b      	mov	fp, r1
   84764:	113f      	asrs	r7, r7, #4
   84766:	d05f      	beq.n	84828 <_strtod_r+0x5e6>
   84768:	2f1f      	cmp	r7, #31
   8476a:	dd08      	ble.n	8477e <_strtod_r+0x53c>
   8476c:	f04f 0800 	mov.w	r8, #0
   84770:	f8cd 800c 	str.w	r8, [sp, #12]
   84774:	f8cd 801c 	str.w	r8, [sp, #28]
   84778:	f8cd 8018 	str.w	r8, [sp, #24]
   8477c:	e11e      	b.n	849bc <_strtod_r+0x77a>
   8477e:	f017 0f10 	tst.w	r7, #16
   84782:	bf14      	ite	ne
   84784:	206a      	movne	r0, #106	; 0x6a
   84786:	2000      	moveq	r0, #0
   84788:	4c24      	ldr	r4, [pc, #144]	; (8481c <_strtod_r+0x5da>)
   8478a:	9004      	str	r0, [sp, #16]
   8478c:	4659      	mov	r1, fp
   8478e:	4650      	mov	r0, sl
   84790:	2f00      	cmp	r7, #0
   84792:	dd08      	ble.n	847a6 <_strtod_r+0x564>
   84794:	07fb      	lsls	r3, r7, #31
   84796:	d503      	bpl.n	847a0 <_strtod_r+0x55e>
   84798:	e9d4 2300 	ldrd	r2, r3, [r4]
   8479c:	f7ff f954 	bl	83a48 <__aeabi_dmul>
   847a0:	107f      	asrs	r7, r7, #1
   847a2:	3408      	adds	r4, #8
   847a4:	e7f4      	b.n	84790 <_strtod_r+0x54e>
   847a6:	468b      	mov	fp, r1
   847a8:	9904      	ldr	r1, [sp, #16]
   847aa:	4682      	mov	sl, r0
   847ac:	b1e1      	cbz	r1, 847e8 <_strtod_r+0x5a6>
   847ae:	f3cb 530a 	ubfx	r3, fp, #20, #11
   847b2:	f1c3 046b 	rsb	r4, r3, #107	; 0x6b
   847b6:	2c00      	cmp	r4, #0
   847b8:	dd16      	ble.n	847e8 <_strtod_r+0x5a6>
   847ba:	2c1f      	cmp	r4, #31
   847bc:	dd0e      	ble.n	847dc <_strtod_r+0x59a>
   847be:	2c34      	cmp	r4, #52	; 0x34
   847c0:	f04f 0a00 	mov.w	sl, #0
   847c4:	dd02      	ble.n	847cc <_strtod_r+0x58a>
   847c6:	f04f 7b5c 	mov.w	fp, #57671680	; 0x3700000
   847ca:	e00d      	b.n	847e8 <_strtod_r+0x5a6>
   847cc:	3c20      	subs	r4, #32
   847ce:	f04f 33ff 	mov.w	r3, #4294967295
   847d2:	fa03 f404 	lsl.w	r4, r3, r4
   847d6:	ea04 0b0b 	and.w	fp, r4, fp
   847da:	e005      	b.n	847e8 <_strtod_r+0x5a6>
   847dc:	f04f 30ff 	mov.w	r0, #4294967295
   847e0:	fa00 f104 	lsl.w	r1, r0, r4
   847e4:	ea01 0a0a 	and.w	sl, r1, sl
   847e8:	4650      	mov	r0, sl
   847ea:	4659      	mov	r1, fp
   847ec:	2200      	movs	r2, #0
   847ee:	2300      	movs	r3, #0
   847f0:	f005 fbf0 	bl	89fd4 <__aeabi_dcmpeq>
   847f4:	2800      	cmp	r0, #0
   847f6:	d1b9      	bne.n	8476c <_strtod_r+0x52a>
   847f8:	e018      	b.n	8482c <_strtod_r+0x5ea>
   847fa:	bf00      	nop
   847fc:	0008a780 	.word	0x0008a780
   84800:	0008a783 	.word	0x0008a783
   84804:	0008a789 	.word	0x0008a789
   84808:	20070454 	.word	0x20070454
   8480c:	0008a938 	.word	0x0008a938
   84810:	0008aa28 	.word	0x0008aa28
   84814:	7ff00000 	.word	0x7ff00000
   84818:	7ca00000 	.word	0x7ca00000
   8481c:	0008a758 	.word	0x0008a758
   84820:	fff80000 	.word	0xfff80000
   84824:	7fefffff 	.word	0x7fefffff
   84828:	2000      	movs	r0, #0
   8482a:	9004      	str	r0, [sp, #16]
   8482c:	9903      	ldr	r1, [sp, #12]
   8482e:	4632      	mov	r2, r6
   84830:	9100      	str	r1, [sp, #0]
   84832:	9802      	ldr	r0, [sp, #8]
   84834:	9906      	ldr	r1, [sp, #24]
   84836:	462b      	mov	r3, r5
   84838:	f003 fbe5 	bl	88006 <__s2b>
   8483c:	9e05      	ldr	r6, [sp, #20]
   8483e:	9007      	str	r0, [sp, #28]
   84840:	2e00      	cmp	r6, #0
   84842:	f2c0 80c7 	blt.w	849d4 <_strtod_r+0x792>
   84846:	2200      	movs	r2, #0
   84848:	920e      	str	r2, [sp, #56]	; 0x38
   8484a:	9c07      	ldr	r4, [sp, #28]
   8484c:	9802      	ldr	r0, [sp, #8]
   8484e:	6861      	ldr	r1, [r4, #4]
   84850:	f003 fb6e 	bl	87f30 <_Balloc>
   84854:	6923      	ldr	r3, [r4, #16]
   84856:	4621      	mov	r1, r4
   84858:	1c9f      	adds	r7, r3, #2
   8485a:	00ba      	lsls	r2, r7, #2
   8485c:	310c      	adds	r1, #12
   8485e:	9006      	str	r0, [sp, #24]
   84860:	300c      	adds	r0, #12
   84862:	f7ff fbb1 	bl	83fc8 <memcpy>
   84866:	a913      	add	r1, sp, #76	; 0x4c
   84868:	a810      	add	r0, sp, #64	; 0x40
   8486a:	4652      	mov	r2, sl
   8486c:	9000      	str	r0, [sp, #0]
   8486e:	9101      	str	r1, [sp, #4]
   84870:	465b      	mov	r3, fp
   84872:	9802      	ldr	r0, [sp, #8]
   84874:	e9cd ab08 	strd	sl, fp, [sp, #32]
   84878:	f003 fe78 	bl	8856c <__d2b>
   8487c:	2101      	movs	r1, #1
   8487e:	9012      	str	r0, [sp, #72]	; 0x48
   84880:	9802      	ldr	r0, [sp, #8]
   84882:	f003 fc4e 	bl	88122 <__i2b>
   84886:	9a10      	ldr	r2, [sp, #64]	; 0x40
   84888:	9e05      	ldr	r6, [sp, #20]
   8488a:	2a00      	cmp	r2, #0
   8488c:	9003      	str	r0, [sp, #12]
   8488e:	ea26 77e6 	bic.w	r7, r6, r6, asr #31
   84892:	f2c0 80a2 	blt.w	849da <_strtod_r+0x798>
   84896:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   84898:	463b      	mov	r3, r7
   8489a:	18ad      	adds	r5, r5, r2
   8489c:	9c04      	ldr	r4, [sp, #16]
   8489e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   848a0:	1b14      	subs	r4, r2, r4
   848a2:	19a0      	adds	r0, r4, r6
   848a4:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
   848a8:	4288      	cmp	r0, r1
   848aa:	bfb4      	ite	lt
   848ac:	f204 4433 	addwlt	r4, r4, #1075	; 0x433
   848b0:	f1c6 0436 	rsbge	r4, r6, #54	; 0x36
   848b4:	9a04      	ldr	r2, [sp, #16]
   848b6:	192e      	adds	r6, r5, r4
   848b8:	191b      	adds	r3, r3, r4
   848ba:	42ae      	cmp	r6, r5
   848bc:	bfb4      	ite	lt
   848be:	4630      	movlt	r0, r6
   848c0:	4628      	movge	r0, r5
   848c2:	189c      	adds	r4, r3, r2
   848c4:	42a0      	cmp	r0, r4
   848c6:	bfa8      	it	ge
   848c8:	4620      	movge	r0, r4
   848ca:	2800      	cmp	r0, #0
   848cc:	dd02      	ble.n	848d4 <_strtod_r+0x692>
   848ce:	1a36      	subs	r6, r6, r0
   848d0:	1a24      	subs	r4, r4, r0
   848d2:	1a2d      	subs	r5, r5, r0
   848d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   848d6:	b18b      	cbz	r3, 848fc <_strtod_r+0x6ba>
   848d8:	461a      	mov	r2, r3
   848da:	9903      	ldr	r1, [sp, #12]
   848dc:	9802      	ldr	r0, [sp, #8]
   848de:	f003 fcba 	bl	88256 <__pow5mult>
   848e2:	9003      	str	r0, [sp, #12]
   848e4:	9903      	ldr	r1, [sp, #12]
   848e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   848e8:	9802      	ldr	r0, [sp, #8]
   848ea:	f003 fc23 	bl	88134 <__multiply>
   848ee:	9912      	ldr	r1, [sp, #72]	; 0x48
   848f0:	4680      	mov	r8, r0
   848f2:	9802      	ldr	r0, [sp, #8]
   848f4:	f003 fb42 	bl	87f7c <_Bfree>
   848f8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   848fc:	2e00      	cmp	r6, #0
   848fe:	dd05      	ble.n	8490c <_strtod_r+0x6ca>
   84900:	9802      	ldr	r0, [sp, #8]
   84902:	9912      	ldr	r1, [sp, #72]	; 0x48
   84904:	4632      	mov	r2, r6
   84906:	f003 fce9 	bl	882dc <__lshift>
   8490a:	9012      	str	r0, [sp, #72]	; 0x48
   8490c:	b12f      	cbz	r7, 8491a <_strtod_r+0x6d8>
   8490e:	9802      	ldr	r0, [sp, #8]
   84910:	9906      	ldr	r1, [sp, #24]
   84912:	463a      	mov	r2, r7
   84914:	f003 fc9f 	bl	88256 <__pow5mult>
   84918:	9006      	str	r0, [sp, #24]
   8491a:	2c00      	cmp	r4, #0
   8491c:	dd05      	ble.n	8492a <_strtod_r+0x6e8>
   8491e:	9802      	ldr	r0, [sp, #8]
   84920:	9906      	ldr	r1, [sp, #24]
   84922:	4622      	mov	r2, r4
   84924:	f003 fcda 	bl	882dc <__lshift>
   84928:	9006      	str	r0, [sp, #24]
   8492a:	2d00      	cmp	r5, #0
   8492c:	dd05      	ble.n	8493a <_strtod_r+0x6f8>
   8492e:	9802      	ldr	r0, [sp, #8]
   84930:	9903      	ldr	r1, [sp, #12]
   84932:	462a      	mov	r2, r5
   84934:	f003 fcd2 	bl	882dc <__lshift>
   84938:	9003      	str	r0, [sp, #12]
   8493a:	9912      	ldr	r1, [sp, #72]	; 0x48
   8493c:	9a06      	ldr	r2, [sp, #24]
   8493e:	9802      	ldr	r0, [sp, #8]
   84940:	f003 fd3d 	bl	883be <__mdiff>
   84944:	f04f 0900 	mov.w	r9, #0
   84948:	68c4      	ldr	r4, [r0, #12]
   8494a:	9903      	ldr	r1, [sp, #12]
   8494c:	f8c0 900c 	str.w	r9, [r0, #12]
   84950:	4680      	mov	r8, r0
   84952:	940a      	str	r4, [sp, #40]	; 0x28
   84954:	f003 fd16 	bl	88384 <__mcmp>
   84958:	4548      	cmp	r0, r9
   8495a:	da46      	bge.n	849ea <_strtod_r+0x7a8>
   8495c:	2c00      	cmp	r4, #0
   8495e:	f040 81b0 	bne.w	84cc2 <_strtod_r+0xa80>
   84962:	f1ba 0f00 	cmp.w	sl, #0
   84966:	f040 81ac 	bne.w	84cc2 <_strtod_r+0xa80>
   8496a:	f3cb 0013 	ubfx	r0, fp, #0, #20
   8496e:	465c      	mov	r4, fp
   84970:	2800      	cmp	r0, #0
   84972:	f040 81a6 	bne.w	84cc2 <_strtod_r+0xa80>
   84976:	4a9c      	ldr	r2, [pc, #624]	; (84be8 <_strtod_r+0x9a6>)
   84978:	4022      	ands	r2, r4
   8497a:	f1b2 6fd6 	cmp.w	r2, #112197632	; 0x6b00000
   8497e:	f240 81a0 	bls.w	84cc2 <_strtod_r+0xa80>
   84982:	f8d8 3014 	ldr.w	r3, [r8, #20]
   84986:	b35b      	cbz	r3, 849e0 <_strtod_r+0x79e>
   84988:	4641      	mov	r1, r8
   8498a:	2201      	movs	r2, #1
   8498c:	9802      	ldr	r0, [sp, #8]
   8498e:	f003 fca5 	bl	882dc <__lshift>
   84992:	9903      	ldr	r1, [sp, #12]
   84994:	4680      	mov	r8, r0
   84996:	f003 fcf5 	bl	88384 <__mcmp>
   8499a:	2800      	cmp	r0, #0
   8499c:	f340 8191 	ble.w	84cc2 <_strtod_r+0xa80>
   849a0:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
   849a4:	9b04      	ldr	r3, [sp, #16]
   849a6:	0d20      	lsrs	r0, r4, #20
   849a8:	0502      	lsls	r2, r0, #20
   849aa:	2b00      	cmp	r3, #0
   849ac:	d04a      	beq.n	84a44 <_strtod_r+0x802>
   849ae:	f1b2 6fd6 	cmp.w	r2, #112197632	; 0x6b00000
   849b2:	d847      	bhi.n	84a44 <_strtod_r+0x802>
   849b4:	f1b2 7f5c 	cmp.w	r2, #57671680	; 0x3700000
   849b8:	f200 8185 	bhi.w	84cc6 <_strtod_r+0xa84>
   849bc:	9c02      	ldr	r4, [sp, #8]
   849be:	2022      	movs	r0, #34	; 0x22
   849c0:	f04f 0a00 	mov.w	sl, #0
   849c4:	f04f 0b00 	mov.w	fp, #0
   849c8:	6020      	str	r0, [r4, #0]
   849ca:	9c07      	ldr	r4, [sp, #28]
   849cc:	2c00      	cmp	r4, #0
   849ce:	f040 818b 	bne.w	84ce8 <_strtod_r+0xaa6>
   849d2:	e19d      	b.n	84d10 <_strtod_r+0xace>
   849d4:	9d05      	ldr	r5, [sp, #20]
   849d6:	426a      	negs	r2, r5
   849d8:	e736      	b.n	84848 <_strtod_r+0x606>
   849da:	1abb      	subs	r3, r7, r2
   849dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   849de:	e75d      	b.n	8489c <_strtod_r+0x65a>
   849e0:	f8d8 1010 	ldr.w	r1, [r8, #16]
   849e4:	2901      	cmp	r1, #1
   849e6:	dccf      	bgt.n	84988 <_strtod_r+0x746>
   849e8:	e16b      	b.n	84cc2 <_strtod_r+0xa80>
   849ea:	d159      	bne.n	84aa0 <_strtod_r+0x85e>
   849ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   849ee:	b314      	cbz	r4, 84a36 <_strtod_r+0x7f4>
   849f0:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
   849f4:	4c7d      	ldr	r4, [pc, #500]	; (84bec <_strtod_r+0x9aa>)
   849f6:	f420 0170 	bic.w	r1, r0, #15728640	; 0xf00000
   849fa:	42a1      	cmp	r1, r4
   849fc:	465a      	mov	r2, fp
   849fe:	d12a      	bne.n	84a56 <_strtod_r+0x814>
   84a00:	9b04      	ldr	r3, [sp, #16]
   84a02:	4651      	mov	r1, sl
   84a04:	b163      	cbz	r3, 84a20 <_strtod_r+0x7de>
   84a06:	4878      	ldr	r0, [pc, #480]	; (84be8 <_strtod_r+0x9a6>)
   84a08:	4010      	ands	r0, r2
   84a0a:	f1b0 6fd4 	cmp.w	r0, #111149056	; 0x6a00000
   84a0e:	d807      	bhi.n	84a20 <_strtod_r+0x7de>
   84a10:	0d03      	lsrs	r3, r0, #20
   84a12:	f1c3 046b 	rsb	r4, r3, #107	; 0x6b
   84a16:	f04f 30ff 	mov.w	r0, #4294967295
   84a1a:	fa00 f404 	lsl.w	r4, r0, r4
   84a1e:	e001      	b.n	84a24 <_strtod_r+0x7e2>
   84a20:	f04f 34ff 	mov.w	r4, #4294967295
   84a24:	42a1      	cmp	r1, r4
   84a26:	d116      	bne.n	84a56 <_strtod_r+0x814>
   84a28:	496f      	ldr	r1, [pc, #444]	; (84be8 <_strtod_r+0x9a6>)
   84a2a:	f04f 0a00 	mov.w	sl, #0
   84a2e:	4011      	ands	r1, r2
   84a30:	f501 1b80 	add.w	fp, r1, #1048576	; 0x100000
   84a34:	e145      	b.n	84cc2 <_strtod_r+0xa80>
   84a36:	f3cb 0313 	ubfx	r3, fp, #0, #20
   84a3a:	b963      	cbnz	r3, 84a56 <_strtod_r+0x814>
   84a3c:	f1ba 0f00 	cmp.w	sl, #0
   84a40:	d109      	bne.n	84a56 <_strtod_r+0x814>
   84a42:	e7ad      	b.n	849a0 <_strtod_r+0x75e>
   84a44:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
   84a48:	ea6f 5a11 	mvn.w	sl, r1, lsr #20
   84a4c:	ea6f 5b0a 	mvn.w	fp, sl, lsl #20
   84a50:	f04f 3aff 	mov.w	sl, #4294967295
   84a54:	e135      	b.n	84cc2 <_strtod_r+0xa80>
   84a56:	f00a 0201 	and.w	r2, sl, #1
   84a5a:	2a00      	cmp	r2, #0
   84a5c:	f000 8131 	beq.w	84cc2 <_strtod_r+0xa80>
   84a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84a62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84a66:	b153      	cbz	r3, 84a7e <_strtod_r+0x83c>
   84a68:	f003 fd0b 	bl	88482 <__ulp>
   84a6c:	4602      	mov	r2, r0
   84a6e:	460b      	mov	r3, r1
   84a70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84a74:	f7fe fe36 	bl	836e4 <__adddf3>
   84a78:	4682      	mov	sl, r0
   84a7a:	468b      	mov	fp, r1
   84a7c:	e121      	b.n	84cc2 <_strtod_r+0xa80>
   84a7e:	f003 fd00 	bl	88482 <__ulp>
   84a82:	4602      	mov	r2, r0
   84a84:	460b      	mov	r3, r1
   84a86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84a8a:	f7fe fe29 	bl	836e0 <__aeabi_dsub>
   84a8e:	2200      	movs	r2, #0
   84a90:	2300      	movs	r3, #0
   84a92:	4682      	mov	sl, r0
   84a94:	468b      	mov	fp, r1
   84a96:	f005 fa9d 	bl	89fd4 <__aeabi_dcmpeq>
   84a9a:	2800      	cmp	r0, #0
   84a9c:	d18e      	bne.n	849bc <_strtod_r+0x77a>
   84a9e:	e110      	b.n	84cc2 <_strtod_r+0xa80>
   84aa0:	4640      	mov	r0, r8
   84aa2:	9903      	ldr	r1, [sp, #12]
   84aa4:	f003 fdb6 	bl	88614 <__ratio>
   84aa8:	2200      	movs	r2, #0
   84aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84aae:	4604      	mov	r4, r0
   84ab0:	460d      	mov	r5, r1
   84ab2:	f005 faa3 	bl	89ffc <__aeabi_dcmple>
   84ab6:	b378      	cbz	r0, 84b18 <_strtod_r+0x8d6>
   84ab8:	990a      	ldr	r1, [sp, #40]	; 0x28
   84aba:	b111      	cbz	r1, 84ac2 <_strtod_r+0x880>
   84abc:	2600      	movs	r6, #0
   84abe:	4f4c      	ldr	r7, [pc, #304]	; (84bf0 <_strtod_r+0x9ae>)
   84ac0:	e00f      	b.n	84ae2 <_strtod_r+0x8a0>
   84ac2:	4652      	mov	r2, sl
   84ac4:	f1ba 0f00 	cmp.w	sl, #0
   84ac8:	d103      	bne.n	84ad2 <_strtod_r+0x890>
   84aca:	f3cb 0613 	ubfx	r6, fp, #0, #20
   84ace:	b936      	cbnz	r6, 84ade <_strtod_r+0x89c>
   84ad0:	e00b      	b.n	84aea <_strtod_r+0x8a8>
   84ad2:	2a01      	cmp	r2, #1
   84ad4:	d103      	bne.n	84ade <_strtod_r+0x89c>
   84ad6:	f1bb 0f00 	cmp.w	fp, #0
   84ada:	f43f af6f 	beq.w	849bc <_strtod_r+0x77a>
   84ade:	4f45      	ldr	r7, [pc, #276]	; (84bf4 <_strtod_r+0x9b2>)
   84ae0:	2600      	movs	r6, #0
   84ae2:	2400      	movs	r4, #0
   84ae4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 84bf0 <_strtod_r+0x9ae>
   84ae8:	e026      	b.n	84b38 <_strtod_r+0x8f6>
   84aea:	4620      	mov	r0, r4
   84aec:	4629      	mov	r1, r5
   84aee:	2200      	movs	r2, #0
   84af0:	4b3f      	ldr	r3, [pc, #252]	; (84bf0 <_strtod_r+0x9ae>)
   84af2:	f005 fa79 	bl	89fe8 <__aeabi_dcmplt>
   84af6:	b940      	cbnz	r0, 84b0a <_strtod_r+0x8c8>
   84af8:	4620      	mov	r0, r4
   84afa:	4629      	mov	r1, r5
   84afc:	2200      	movs	r2, #0
   84afe:	4b3e      	ldr	r3, [pc, #248]	; (84bf8 <_strtod_r+0x9b6>)
   84b00:	f7fe ffa2 	bl	83a48 <__aeabi_dmul>
   84b04:	4604      	mov	r4, r0
   84b06:	4689      	mov	r9, r1
   84b08:	e002      	b.n	84b10 <_strtod_r+0x8ce>
   84b0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84b0c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 84bf8 <_strtod_r+0x9b6>
   84b10:	4626      	mov	r6, r4
   84b12:	f109 4700 	add.w	r7, r9, #2147483648	; 0x80000000
   84b16:	e00f      	b.n	84b38 <_strtod_r+0x8f6>
   84b18:	4620      	mov	r0, r4
   84b1a:	4629      	mov	r1, r5
   84b1c:	2200      	movs	r2, #0
   84b1e:	4b36      	ldr	r3, [pc, #216]	; (84bf8 <_strtod_r+0x9b6>)
   84b20:	f7fe ff92 	bl	83a48 <__aeabi_dmul>
   84b24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   84b26:	4604      	mov	r4, r0
   84b28:	4689      	mov	r9, r1
   84b2a:	b917      	cbnz	r7, 84b32 <_strtod_r+0x8f0>
   84b2c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   84b30:	e000      	b.n	84b34 <_strtod_r+0x8f2>
   84b32:	460d      	mov	r5, r1
   84b34:	4626      	mov	r6, r4
   84b36:	462f      	mov	r7, r5
   84b38:	4d2b      	ldr	r5, [pc, #172]	; (84be8 <_strtod_r+0x9a6>)
   84b3a:	465b      	mov	r3, fp
   84b3c:	482f      	ldr	r0, [pc, #188]	; (84bfc <_strtod_r+0x9ba>)
   84b3e:	401d      	ands	r5, r3
   84b40:	4285      	cmp	r5, r0
   84b42:	d12c      	bne.n	84b9e <_strtod_r+0x95c>
   84b44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   84b48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84b4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   84b50:	4650      	mov	r0, sl
   84b52:	4659      	mov	r1, fp
   84b54:	f003 fc95 	bl	88482 <__ulp>
   84b58:	4602      	mov	r2, r0
   84b5a:	460b      	mov	r3, r1
   84b5c:	4630      	mov	r0, r6
   84b5e:	4639      	mov	r1, r7
   84b60:	f7fe ff72 	bl	83a48 <__aeabi_dmul>
   84b64:	460b      	mov	r3, r1
   84b66:	4602      	mov	r2, r0
   84b68:	4659      	mov	r1, fp
   84b6a:	4650      	mov	r0, sl
   84b6c:	f7fe fdba 	bl	836e4 <__adddf3>
   84b70:	4682      	mov	sl, r0
   84b72:	481d      	ldr	r0, [pc, #116]	; (84be8 <_strtod_r+0x9a6>)
   84b74:	460b      	mov	r3, r1
   84b76:	4008      	ands	r0, r1
   84b78:	4921      	ldr	r1, [pc, #132]	; (84c00 <_strtod_r+0x9be>)
   84b7a:	4288      	cmp	r0, r1
   84b7c:	d90c      	bls.n	84b98 <_strtod_r+0x956>
   84b7e:	4821      	ldr	r0, [pc, #132]	; (84c04 <_strtod_r+0x9c2>)
   84b80:	990d      	ldr	r1, [sp, #52]	; 0x34
   84b82:	4281      	cmp	r1, r0
   84b84:	d103      	bne.n	84b8e <_strtod_r+0x94c>
   84b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84b88:	3201      	adds	r2, #1
   84b8a:	f43f ada3 	beq.w	846d4 <_strtod_r+0x492>
   84b8e:	f8df b074 	ldr.w	fp, [pc, #116]	; 84c04 <_strtod_r+0x9c2>
   84b92:	f04f 3aff 	mov.w	sl, #4294967295
   84b96:	e083      	b.n	84ca0 <_strtod_r+0xa5e>
   84b98:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   84b9c:	e04b      	b.n	84c36 <_strtod_r+0x9f4>
   84b9e:	9904      	ldr	r1, [sp, #16]
   84ba0:	2900      	cmp	r1, #0
   84ba2:	d036      	beq.n	84c12 <_strtod_r+0x9d0>
   84ba4:	f1b5 6fd4 	cmp.w	r5, #111149056	; 0x6a00000
   84ba8:	d833      	bhi.n	84c12 <_strtod_r+0x9d0>
   84baa:	4620      	mov	r0, r4
   84bac:	4649      	mov	r1, r9
   84bae:	a30c      	add	r3, pc, #48	; (adr r3, 84be0 <_strtod_r+0x99e>)
   84bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   84bb4:	f005 fa22 	bl	89ffc <__aeabi_dcmple>
   84bb8:	b340      	cbz	r0, 84c0c <_strtod_r+0x9ca>
   84bba:	4649      	mov	r1, r9
   84bbc:	4620      	mov	r0, r4
   84bbe:	f7ff f97d 	bl	83ebc <__aeabi_d2uiz>
   84bc2:	2800      	cmp	r0, #0
   84bc4:	bf08      	it	eq
   84bc6:	2001      	moveq	r0, #1
   84bc8:	f7fe fec8 	bl	8395c <__aeabi_ui2d>
   84bcc:	4604      	mov	r4, r0
   84bce:	980a      	ldr	r0, [sp, #40]	; 0x28
   84bd0:	4689      	mov	r9, r1
   84bd2:	b9c8      	cbnz	r0, 84c08 <_strtod_r+0x9c6>
   84bd4:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   84bd8:	e017      	b.n	84c0a <_strtod_r+0x9c8>
   84bda:	bf00      	nop
   84bdc:	f3af 8000 	nop.w
   84be0:	ffc00000 	.word	0xffc00000
   84be4:	41dfffff 	.word	0x41dfffff
   84be8:	7ff00000 	.word	0x7ff00000
   84bec:	000fffff 	.word	0x000fffff
   84bf0:	3ff00000 	.word	0x3ff00000
   84bf4:	bff00000 	.word	0xbff00000
   84bf8:	3fe00000 	.word	0x3fe00000
   84bfc:	7fe00000 	.word	0x7fe00000
   84c00:	7c9fffff 	.word	0x7c9fffff
   84c04:	7fefffff 	.word	0x7fefffff
   84c08:	460f      	mov	r7, r1
   84c0a:	4626      	mov	r6, r4
   84c0c:	f107 62d6 	add.w	r2, r7, #112197632	; 0x6b00000
   84c10:	1b57      	subs	r7, r2, r5
   84c12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84c16:	f003 fc34 	bl	88482 <__ulp>
   84c1a:	4602      	mov	r2, r0
   84c1c:	460b      	mov	r3, r1
   84c1e:	4630      	mov	r0, r6
   84c20:	4639      	mov	r1, r7
   84c22:	f7fe ff11 	bl	83a48 <__aeabi_dmul>
   84c26:	4602      	mov	r2, r0
   84c28:	460b      	mov	r3, r1
   84c2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84c2e:	f7fe fd59 	bl	836e4 <__adddf3>
   84c32:	4682      	mov	sl, r0
   84c34:	468b      	mov	fp, r1
   84c36:	9b04      	ldr	r3, [sp, #16]
   84c38:	465e      	mov	r6, fp
   84c3a:	2b00      	cmp	r3, #0
   84c3c:	d130      	bne.n	84ca0 <_strtod_r+0xa5e>
   84c3e:	4a42      	ldr	r2, [pc, #264]	; (84d48 <_strtod_r+0xb06>)
   84c40:	4032      	ands	r2, r6
   84c42:	4295      	cmp	r5, r2
   84c44:	d12c      	bne.n	84ca0 <_strtod_r+0xa5e>
   84c46:	4620      	mov	r0, r4
   84c48:	4649      	mov	r1, r9
   84c4a:	f7ff f90f 	bl	83e6c <__aeabi_d2iz>
   84c4e:	f7fe fe95 	bl	8397c <__aeabi_i2d>
   84c52:	460b      	mov	r3, r1
   84c54:	4602      	mov	r2, r0
   84c56:	4649      	mov	r1, r9
   84c58:	4620      	mov	r0, r4
   84c5a:	f7fe fd41 	bl	836e0 <__aeabi_dsub>
   84c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84c60:	4604      	mov	r4, r0
   84c62:	460d      	mov	r5, r1
   84c64:	b92b      	cbnz	r3, 84c72 <_strtod_r+0xa30>
   84c66:	f1ba 0f00 	cmp.w	sl, #0
   84c6a:	d102      	bne.n	84c72 <_strtod_r+0xa30>
   84c6c:	f3cb 0613 	ubfx	r6, fp, #0, #20
   84c70:	b186      	cbz	r6, 84c94 <_strtod_r+0xa52>
   84c72:	4620      	mov	r0, r4
   84c74:	4629      	mov	r1, r5
   84c76:	a32e      	add	r3, pc, #184	; (adr r3, 84d30 <_strtod_r+0xaee>)
   84c78:	e9d3 2300 	ldrd	r2, r3, [r3]
   84c7c:	f005 f9b4 	bl	89fe8 <__aeabi_dcmplt>
   84c80:	2800      	cmp	r0, #0
   84c82:	d131      	bne.n	84ce8 <_strtod_r+0xaa6>
   84c84:	4620      	mov	r0, r4
   84c86:	4629      	mov	r1, r5
   84c88:	a32b      	add	r3, pc, #172	; (adr r3, 84d38 <_strtod_r+0xaf6>)
   84c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   84c8e:	f005 f9c9 	bl	8a024 <__aeabi_dcmpgt>
   84c92:	e004      	b.n	84c9e <_strtod_r+0xa5c>
   84c94:	a32a      	add	r3, pc, #168	; (adr r3, 84d40 <_strtod_r+0xafe>)
   84c96:	e9d3 2300 	ldrd	r2, r3, [r3]
   84c9a:	f005 f9a5 	bl	89fe8 <__aeabi_dcmplt>
   84c9e:	bb18      	cbnz	r0, 84ce8 <_strtod_r+0xaa6>
   84ca0:	9802      	ldr	r0, [sp, #8]
   84ca2:	9912      	ldr	r1, [sp, #72]	; 0x48
   84ca4:	f003 f96a 	bl	87f7c <_Bfree>
   84ca8:	9802      	ldr	r0, [sp, #8]
   84caa:	9906      	ldr	r1, [sp, #24]
   84cac:	f003 f966 	bl	87f7c <_Bfree>
   84cb0:	9802      	ldr	r0, [sp, #8]
   84cb2:	9903      	ldr	r1, [sp, #12]
   84cb4:	f003 f962 	bl	87f7c <_Bfree>
   84cb8:	9802      	ldr	r0, [sp, #8]
   84cba:	4641      	mov	r1, r8
   84cbc:	f003 f95e 	bl	87f7c <_Bfree>
   84cc0:	e5c3      	b.n	8484a <_strtod_r+0x608>
   84cc2:	9a04      	ldr	r2, [sp, #16]
   84cc4:	b182      	cbz	r2, 84ce8 <_strtod_r+0xaa6>
   84cc6:	4b21      	ldr	r3, [pc, #132]	; (84d4c <_strtod_r+0xb0a>)
   84cc8:	2100      	movs	r1, #0
   84cca:	910c      	str	r1, [sp, #48]	; 0x30
   84ccc:	930d      	str	r3, [sp, #52]	; 0x34
   84cce:	4650      	mov	r0, sl
   84cd0:	4659      	mov	r1, fp
   84cd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   84cd6:	f7fe feb7 	bl	83a48 <__aeabi_dmul>
   84cda:	4682      	mov	sl, r0
   84cdc:	468b      	mov	fp, r1
   84cde:	b919      	cbnz	r1, 84ce8 <_strtod_r+0xaa6>
   84ce0:	b910      	cbnz	r0, 84ce8 <_strtod_r+0xaa6>
   84ce2:	9c02      	ldr	r4, [sp, #8]
   84ce4:	2022      	movs	r0, #34	; 0x22
   84ce6:	6020      	str	r0, [r4, #0]
   84ce8:	9802      	ldr	r0, [sp, #8]
   84cea:	9912      	ldr	r1, [sp, #72]	; 0x48
   84cec:	f003 f946 	bl	87f7c <_Bfree>
   84cf0:	9802      	ldr	r0, [sp, #8]
   84cf2:	9906      	ldr	r1, [sp, #24]
   84cf4:	f003 f942 	bl	87f7c <_Bfree>
   84cf8:	9802      	ldr	r0, [sp, #8]
   84cfa:	9903      	ldr	r1, [sp, #12]
   84cfc:	f003 f93e 	bl	87f7c <_Bfree>
   84d00:	9802      	ldr	r0, [sp, #8]
   84d02:	9907      	ldr	r1, [sp, #28]
   84d04:	f003 f93a 	bl	87f7c <_Bfree>
   84d08:	9802      	ldr	r0, [sp, #8]
   84d0a:	4641      	mov	r1, r8
   84d0c:	f003 f936 	bl	87f7c <_Bfree>
   84d10:	980f      	ldr	r0, [sp, #60]	; 0x3c
   84d12:	b108      	cbz	r0, 84d18 <_strtod_r+0xad6>
   84d14:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84d16:	6002      	str	r2, [r0, #0]
   84d18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84d1a:	4651      	mov	r1, sl
   84d1c:	b114      	cbz	r4, 84d24 <_strtod_r+0xae2>
   84d1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   84d22:	e000      	b.n	84d26 <_strtod_r+0xae4>
   84d24:	465b      	mov	r3, fp
   84d26:	4608      	mov	r0, r1
   84d28:	4619      	mov	r1, r3
   84d2a:	b017      	add	sp, #92	; 0x5c
   84d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d30:	94a03595 	.word	0x94a03595
   84d34:	3fdfffff 	.word	0x3fdfffff
   84d38:	35afe535 	.word	0x35afe535
   84d3c:	3fe00000 	.word	0x3fe00000
   84d40:	94a03595 	.word	0x94a03595
   84d44:	3fcfffff 	.word	0x3fcfffff
   84d48:	7ff00000 	.word	0x7ff00000
   84d4c:	39500000 	.word	0x39500000

00084d50 <strtod>:
   84d50:	460a      	mov	r2, r1
   84d52:	4903      	ldr	r1, [pc, #12]	; (84d60 <strtod+0x10>)
   84d54:	4603      	mov	r3, r0
   84d56:	6808      	ldr	r0, [r1, #0]
   84d58:	4619      	mov	r1, r3
   84d5a:	f7ff ba72 	b.w	84242 <_strtod_r>
   84d5e:	bf00      	nop
   84d60:	20070010 	.word	0x20070010

00084d64 <strtof>:
   84d64:	460a      	mov	r2, r1
   84d66:	490a      	ldr	r1, [pc, #40]	; (84d90 <strtof+0x2c>)
   84d68:	b538      	push	{r3, r4, r5, lr}
   84d6a:	4603      	mov	r3, r0
   84d6c:	6808      	ldr	r0, [r1, #0]
   84d6e:	4619      	mov	r1, r3
   84d70:	f7ff fa67 	bl	84242 <_strtod_r>
   84d74:	4604      	mov	r4, r0
   84d76:	460d      	mov	r5, r1
   84d78:	f003 feba 	bl	88af0 <__fpclassifyd>
   84d7c:	b918      	cbnz	r0, 84d86 <strtof+0x22>
   84d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84d82:	f003 bf27 	b.w	88bd4 <nanf>
   84d86:	4620      	mov	r0, r4
   84d88:	4629      	mov	r1, r5
   84d8a:	f005 f955 	bl	8a038 <__aeabi_d2f>
   84d8e:	bd38      	pop	{r3, r4, r5, pc}
   84d90:	20070010 	.word	0x20070010
   84d94:	f3af 8000 	nop.w

00084d98 <_svfprintf_r>:
   84d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84d9c:	461e      	mov	r6, r3
   84d9e:	898b      	ldrh	r3, [r1, #12]
   84da0:	4689      	mov	r9, r1
   84da2:	f003 0180 	and.w	r1, r3, #128	; 0x80
   84da6:	4614      	mov	r4, r2
   84da8:	b20a      	sxth	r2, r1
   84daa:	b0a9      	sub	sp, #164	; 0xa4
   84dac:	4683      	mov	fp, r0
   84dae:	b19a      	cbz	r2, 84dd8 <_svfprintf_r+0x40>
   84db0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   84db4:	b983      	cbnz	r3, 84dd8 <_svfprintf_r+0x40>
   84db6:	2140      	movs	r1, #64	; 0x40
   84db8:	f002 fe2e 	bl	87a18 <_malloc_r>
   84dbc:	f8c9 0000 	str.w	r0, [r9]
   84dc0:	f8c9 0010 	str.w	r0, [r9, #16]
   84dc4:	b928      	cbnz	r0, 84dd2 <_svfprintf_r+0x3a>
   84dc6:	220c      	movs	r2, #12
   84dc8:	f8cb 2000 	str.w	r2, [fp]
   84dcc:	f04f 30ff 	mov.w	r0, #4294967295
   84dd0:	e3da      	b.n	85588 <_svfprintf_r+0x7f0>
   84dd2:	2040      	movs	r0, #64	; 0x40
   84dd4:	f8c9 0014 	str.w	r0, [r9, #20]
   84dd8:	2100      	movs	r1, #0
   84dda:	ad18      	add	r5, sp, #96	; 0x60
   84ddc:	950b      	str	r5, [sp, #44]	; 0x2c
   84dde:	910d      	str	r1, [sp, #52]	; 0x34
   84de0:	910c      	str	r1, [sp, #48]	; 0x30
   84de2:	9401      	str	r4, [sp, #4]
   84de4:	9105      	str	r1, [sp, #20]
   84de6:	9104      	str	r1, [sp, #16]
   84de8:	46a8      	mov	r8, r5
   84dea:	9b01      	ldr	r3, [sp, #4]
   84dec:	461c      	mov	r4, r3
   84dee:	f813 2b01 	ldrb.w	r2, [r3], #1
   84df2:	b91a      	cbnz	r2, 84dfc <_svfprintf_r+0x64>
   84df4:	9801      	ldr	r0, [sp, #4]
   84df6:	1a25      	subs	r5, r4, r0
   84df8:	d103      	bne.n	84e02 <_svfprintf_r+0x6a>
   84dfa:	e01d      	b.n	84e38 <_svfprintf_r+0xa0>
   84dfc:	2a25      	cmp	r2, #37	; 0x25
   84dfe:	d1f5      	bne.n	84dec <_svfprintf_r+0x54>
   84e00:	e7f8      	b.n	84df4 <_svfprintf_r+0x5c>
   84e02:	9a01      	ldr	r2, [sp, #4]
   84e04:	990d      	ldr	r1, [sp, #52]	; 0x34
   84e06:	e888 0024 	stmia.w	r8, {r2, r5}
   84e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84e0c:	194b      	adds	r3, r1, r5
   84e0e:	1c50      	adds	r0, r2, #1
   84e10:	2807      	cmp	r0, #7
   84e12:	930d      	str	r3, [sp, #52]	; 0x34
   84e14:	900c      	str	r0, [sp, #48]	; 0x30
   84e16:	dc02      	bgt.n	84e1e <_svfprintf_r+0x86>
   84e18:	f108 0808 	add.w	r8, r8, #8
   84e1c:	e009      	b.n	84e32 <_svfprintf_r+0x9a>
   84e1e:	4658      	mov	r0, fp
   84e20:	4649      	mov	r1, r9
   84e22:	aa0b      	add	r2, sp, #44	; 0x2c
   84e24:	f004 f9c4 	bl	891b0 <__ssprint_r>
   84e28:	2800      	cmp	r0, #0
   84e2a:	f040 83a2 	bne.w	85572 <_svfprintf_r+0x7da>
   84e2e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84e32:	9904      	ldr	r1, [sp, #16]
   84e34:	194b      	adds	r3, r1, r5
   84e36:	9304      	str	r3, [sp, #16]
   84e38:	7822      	ldrb	r2, [r4, #0]
   84e3a:	2a00      	cmp	r2, #0
   84e3c:	f000 8392 	beq.w	85564 <_svfprintf_r+0x7cc>
   84e40:	2200      	movs	r2, #0
   84e42:	3401      	adds	r4, #1
   84e44:	9401      	str	r4, [sp, #4]
   84e46:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84e4a:	f04f 3cff 	mov.w	ip, #4294967295
   84e4e:	9203      	str	r2, [sp, #12]
   84e50:	4617      	mov	r7, r2
   84e52:	9801      	ldr	r0, [sp, #4]
   84e54:	f810 3b01 	ldrb.w	r3, [r0], #1
   84e58:	9001      	str	r0, [sp, #4]
   84e5a:	2b63      	cmp	r3, #99	; 0x63
   84e5c:	f000 80b3 	beq.w	84fc6 <_svfprintf_r+0x22e>
   84e60:	dc33      	bgt.n	84eca <_svfprintf_r+0x132>
   84e62:	2b39      	cmp	r3, #57	; 0x39
   84e64:	dc1a      	bgt.n	84e9c <_svfprintf_r+0x104>
   84e66:	2b31      	cmp	r3, #49	; 0x31
   84e68:	f280 8091 	bge.w	84f8e <_svfprintf_r+0x1f6>
   84e6c:	2b2b      	cmp	r3, #43	; 0x2b
   84e6e:	d101      	bne.n	84e74 <_svfprintf_r+0xdc>
   84e70:	461a      	mov	r2, r3
   84e72:	e7ee      	b.n	84e52 <_svfprintf_r+0xba>
   84e74:	dc0a      	bgt.n	84e8c <_svfprintf_r+0xf4>
   84e76:	2b23      	cmp	r3, #35	; 0x23
   84e78:	d055      	beq.n	84f26 <_svfprintf_r+0x18e>
   84e7a:	2b2a      	cmp	r3, #42	; 0x2a
   84e7c:	d056      	beq.n	84f2c <_svfprintf_r+0x194>
   84e7e:	2b20      	cmp	r3, #32
   84e80:	f040 81f5 	bne.w	8526e <_svfprintf_r+0x4d6>
   84e84:	2a00      	cmp	r2, #0
   84e86:	bf08      	it	eq
   84e88:	2220      	moveq	r2, #32
   84e8a:	e7e2      	b.n	84e52 <_svfprintf_r+0xba>
   84e8c:	2b2e      	cmp	r3, #46	; 0x2e
   84e8e:	d058      	beq.n	84f42 <_svfprintf_r+0x1aa>
   84e90:	2b30      	cmp	r3, #48	; 0x30
   84e92:	d079      	beq.n	84f88 <_svfprintf_r+0x1f0>
   84e94:	2b2d      	cmp	r3, #45	; 0x2d
   84e96:	f040 81ea 	bne.w	8526e <_svfprintf_r+0x4d6>
   84e9a:	e04f      	b.n	84f3c <_svfprintf_r+0x1a4>
   84e9c:	2b4f      	cmp	r3, #79	; 0x4f
   84e9e:	f000 80de 	beq.w	8505e <_svfprintf_r+0x2c6>
   84ea2:	dc07      	bgt.n	84eb4 <_svfprintf_r+0x11c>
   84ea4:	2b44      	cmp	r3, #68	; 0x44
   84ea6:	f040 81e2 	bne.w	8526e <_svfprintf_r+0x4d6>
   84eaa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84eae:	f047 0710 	orr.w	r7, r7, #16
   84eb2:	e090      	b.n	84fd6 <_svfprintf_r+0x23e>
   84eb4:	2b55      	cmp	r3, #85	; 0x55
   84eb6:	f000 811f 	beq.w	850f8 <_svfprintf_r+0x360>
   84eba:	2b58      	cmp	r3, #88	; 0x58
   84ebc:	f040 81d7 	bne.w	8526e <_svfprintf_r+0x4d6>
   84ec0:	4dae      	ldr	r5, [pc, #696]	; (8517c <_svfprintf_r+0x3e4>)
   84ec2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84ec6:	9505      	str	r5, [sp, #20]
   84ec8:	e130      	b.n	8512c <_svfprintf_r+0x394>
   84eca:	2b6f      	cmp	r3, #111	; 0x6f
   84ecc:	f000 80c9 	beq.w	85062 <_svfprintf_r+0x2ca>
   84ed0:	dc10      	bgt.n	84ef4 <_svfprintf_r+0x15c>
   84ed2:	2b69      	cmp	r3, #105	; 0x69
   84ed4:	d024      	beq.n	84f20 <_svfprintf_r+0x188>
   84ed6:	dc07      	bgt.n	84ee8 <_svfprintf_r+0x150>
   84ed8:	2b64      	cmp	r3, #100	; 0x64
   84eda:	d021      	beq.n	84f20 <_svfprintf_r+0x188>
   84edc:	2b68      	cmp	r3, #104	; 0x68
   84ede:	f040 81c6 	bne.w	8526e <_svfprintf_r+0x4d6>
   84ee2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   84ee6:	e7b4      	b.n	84e52 <_svfprintf_r+0xba>
   84ee8:	2b6c      	cmp	r3, #108	; 0x6c
   84eea:	d05f      	beq.n	84fac <_svfprintf_r+0x214>
   84eec:	2b6e      	cmp	r3, #110	; 0x6e
   84eee:	f040 81be 	bne.w	8526e <_svfprintf_r+0x4d6>
   84ef2:	e096      	b.n	85022 <_svfprintf_r+0x28a>
   84ef4:	2b73      	cmp	r3, #115	; 0x73
   84ef6:	f000 80df 	beq.w	850b8 <_svfprintf_r+0x320>
   84efa:	dc06      	bgt.n	84f0a <_svfprintf_r+0x172>
   84efc:	2b70      	cmp	r3, #112	; 0x70
   84efe:	f000 80cd 	beq.w	8509c <_svfprintf_r+0x304>
   84f02:	2b71      	cmp	r3, #113	; 0x71
   84f04:	f040 81b3 	bne.w	8526e <_svfprintf_r+0x4d6>
   84f08:	e05a      	b.n	84fc0 <_svfprintf_r+0x228>
   84f0a:	2b75      	cmp	r3, #117	; 0x75
   84f0c:	f000 80f6 	beq.w	850fc <_svfprintf_r+0x364>
   84f10:	2b78      	cmp	r3, #120	; 0x78
   84f12:	f040 81ac 	bne.w	8526e <_svfprintf_r+0x4d6>
   84f16:	4d9a      	ldr	r5, [pc, #616]	; (85180 <_svfprintf_r+0x3e8>)
   84f18:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84f1c:	9505      	str	r5, [sp, #20]
   84f1e:	e105      	b.n	8512c <_svfprintf_r+0x394>
   84f20:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84f24:	e057      	b.n	84fd6 <_svfprintf_r+0x23e>
   84f26:	f047 0701 	orr.w	r7, r7, #1
   84f2a:	e792      	b.n	84e52 <_svfprintf_r+0xba>
   84f2c:	1d33      	adds	r3, r6, #4
   84f2e:	6836      	ldr	r6, [r6, #0]
   84f30:	2e00      	cmp	r6, #0
   84f32:	9603      	str	r6, [sp, #12]
   84f34:	da15      	bge.n	84f62 <_svfprintf_r+0x1ca>
   84f36:	4270      	negs	r0, r6
   84f38:	9003      	str	r0, [sp, #12]
   84f3a:	461e      	mov	r6, r3
   84f3c:	f047 0704 	orr.w	r7, r7, #4
   84f40:	e787      	b.n	84e52 <_svfprintf_r+0xba>
   84f42:	9901      	ldr	r1, [sp, #4]
   84f44:	f811 3b01 	ldrb.w	r3, [r1], #1
   84f48:	2b2a      	cmp	r3, #42	; 0x2a
   84f4a:	9101      	str	r1, [sp, #4]
   84f4c:	d10b      	bne.n	84f66 <_svfprintf_r+0x1ce>
   84f4e:	f8d6 c000 	ldr.w	ip, [r6]
   84f52:	1d33      	adds	r3, r6, #4
   84f54:	f1bc 0f00 	cmp.w	ip, #0
   84f58:	da03      	bge.n	84f62 <_svfprintf_r+0x1ca>
   84f5a:	461e      	mov	r6, r3
   84f5c:	f04f 3cff 	mov.w	ip, #4294967295
   84f60:	e777      	b.n	84e52 <_svfprintf_r+0xba>
   84f62:	461e      	mov	r6, r3
   84f64:	e775      	b.n	84e52 <_svfprintf_r+0xba>
   84f66:	f04f 0c00 	mov.w	ip, #0
   84f6a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84f6e:	2809      	cmp	r0, #9
   84f70:	d807      	bhi.n	84f82 <_svfprintf_r+0x1ea>
   84f72:	9901      	ldr	r1, [sp, #4]
   84f74:	230a      	movs	r3, #10
   84f76:	fb03 0c0c 	mla	ip, r3, ip, r0
   84f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
   84f7e:	9101      	str	r1, [sp, #4]
   84f80:	e7f3      	b.n	84f6a <_svfprintf_r+0x1d2>
   84f82:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   84f86:	e768      	b.n	84e5a <_svfprintf_r+0xc2>
   84f88:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   84f8c:	e761      	b.n	84e52 <_svfprintf_r+0xba>
   84f8e:	9801      	ldr	r0, [sp, #4]
   84f90:	2100      	movs	r1, #0
   84f92:	3b30      	subs	r3, #48	; 0x30
   84f94:	240a      	movs	r4, #10
   84f96:	fb04 3101 	mla	r1, r4, r1, r3
   84f9a:	f810 3b01 	ldrb.w	r3, [r0], #1
   84f9e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   84fa2:	2c09      	cmp	r4, #9
   84fa4:	9001      	str	r0, [sp, #4]
   84fa6:	d9f4      	bls.n	84f92 <_svfprintf_r+0x1fa>
   84fa8:	9103      	str	r1, [sp, #12]
   84faa:	e756      	b.n	84e5a <_svfprintf_r+0xc2>
   84fac:	9901      	ldr	r1, [sp, #4]
   84fae:	780b      	ldrb	r3, [r1, #0]
   84fb0:	2b6c      	cmp	r3, #108	; 0x6c
   84fb2:	d102      	bne.n	84fba <_svfprintf_r+0x222>
   84fb4:	1c48      	adds	r0, r1, #1
   84fb6:	9001      	str	r0, [sp, #4]
   84fb8:	e002      	b.n	84fc0 <_svfprintf_r+0x228>
   84fba:	f047 0710 	orr.w	r7, r7, #16
   84fbe:	e748      	b.n	84e52 <_svfprintf_r+0xba>
   84fc0:	f047 0720 	orr.w	r7, r7, #32
   84fc4:	e745      	b.n	84e52 <_svfprintf_r+0xba>
   84fc6:	6832      	ldr	r2, [r6, #0]
   84fc8:	2500      	movs	r5, #0
   84fca:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   84fce:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84fd2:	3604      	adds	r6, #4
   84fd4:	e155      	b.n	85282 <_svfprintf_r+0x4ea>
   84fd6:	06ba      	lsls	r2, r7, #26
   84fd8:	d507      	bpl.n	84fea <_svfprintf_r+0x252>
   84fda:	3607      	adds	r6, #7
   84fdc:	f026 0507 	bic.w	r5, r6, #7
   84fe0:	f105 0608 	add.w	r6, r5, #8
   84fe4:	e9d5 4500 	ldrd	r4, r5, [r5]
   84fe8:	e00f      	b.n	8500a <_svfprintf_r+0x272>
   84fea:	f017 0f10 	tst.w	r7, #16
   84fee:	f106 0104 	add.w	r1, r6, #4
   84ff2:	d001      	beq.n	84ff8 <_svfprintf_r+0x260>
   84ff4:	6832      	ldr	r2, [r6, #0]
   84ff6:	e005      	b.n	85004 <_svfprintf_r+0x26c>
   84ff8:	f017 0f40 	tst.w	r7, #64	; 0x40
   84ffc:	6832      	ldr	r2, [r6, #0]
   84ffe:	d001      	beq.n	85004 <_svfprintf_r+0x26c>
   85000:	b214      	sxth	r4, r2
   85002:	e000      	b.n	85006 <_svfprintf_r+0x26e>
   85004:	4614      	mov	r4, r2
   85006:	17e5      	asrs	r5, r4, #31
   85008:	460e      	mov	r6, r1
   8500a:	2c00      	cmp	r4, #0
   8500c:	f175 0200 	sbcs.w	r2, r5, #0
   85010:	f280 80b8 	bge.w	85184 <_svfprintf_r+0x3ec>
   85014:	232d      	movs	r3, #45	; 0x2d
   85016:	4264      	negs	r4, r4
   85018:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8501c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   85020:	e0b0      	b.n	85184 <_svfprintf_r+0x3ec>
   85022:	f017 0f20 	tst.w	r7, #32
   85026:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8502a:	f106 0204 	add.w	r2, r6, #4
   8502e:	d005      	beq.n	8503c <_svfprintf_r+0x2a4>
   85030:	9c04      	ldr	r4, [sp, #16]
   85032:	6835      	ldr	r5, [r6, #0]
   85034:	17e0      	asrs	r0, r4, #31
   85036:	602c      	str	r4, [r5, #0]
   85038:	6068      	str	r0, [r5, #4]
   8503a:	e004      	b.n	85046 <_svfprintf_r+0x2ae>
   8503c:	06fb      	lsls	r3, r7, #27
   8503e:	d504      	bpl.n	8504a <_svfprintf_r+0x2b2>
   85040:	6833      	ldr	r3, [r6, #0]
   85042:	9904      	ldr	r1, [sp, #16]
   85044:	6019      	str	r1, [r3, #0]
   85046:	4616      	mov	r6, r2
   85048:	e6cf      	b.n	84dea <_svfprintf_r+0x52>
   8504a:	6830      	ldr	r0, [r6, #0]
   8504c:	9c04      	ldr	r4, [sp, #16]
   8504e:	f017 0f40 	tst.w	r7, #64	; 0x40
   85052:	f106 0604 	add.w	r6, r6, #4
   85056:	bf14      	ite	ne
   85058:	8004      	strhne	r4, [r0, #0]
   8505a:	6004      	streq	r4, [r0, #0]
   8505c:	e6c5      	b.n	84dea <_svfprintf_r+0x52>
   8505e:	f047 0710 	orr.w	r7, r7, #16
   85062:	f017 0020 	ands.w	r0, r7, #32
   85066:	d008      	beq.n	8507a <_svfprintf_r+0x2e2>
   85068:	1df3      	adds	r3, r6, #7
   8506a:	f023 0507 	bic.w	r5, r3, #7
   8506e:	f105 0608 	add.w	r6, r5, #8
   85072:	e9d5 4500 	ldrd	r4, r5, [r5]
   85076:	2000      	movs	r0, #0
   85078:	e07c      	b.n	85174 <_svfprintf_r+0x3dc>
   8507a:	f017 0110 	ands.w	r1, r7, #16
   8507e:	f106 0204 	add.w	r2, r6, #4
   85082:	d106      	bne.n	85092 <_svfprintf_r+0x2fa>
   85084:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   85088:	d003      	beq.n	85092 <_svfprintf_r+0x2fa>
   8508a:	8834      	ldrh	r4, [r6, #0]
   8508c:	2500      	movs	r5, #0
   8508e:	4616      	mov	r6, r2
   85090:	e7f1      	b.n	85076 <_svfprintf_r+0x2de>
   85092:	6836      	ldr	r6, [r6, #0]
   85094:	2500      	movs	r5, #0
   85096:	4634      	mov	r4, r6
   85098:	4616      	mov	r6, r2
   8509a:	e06b      	b.n	85174 <_svfprintf_r+0x3dc>
   8509c:	4b38      	ldr	r3, [pc, #224]	; (85180 <_svfprintf_r+0x3e8>)
   8509e:	2130      	movs	r1, #48	; 0x30
   850a0:	2278      	movs	r2, #120	; 0x78
   850a2:	6834      	ldr	r4, [r6, #0]
   850a4:	2500      	movs	r5, #0
   850a6:	f047 0702 	orr.w	r7, r7, #2
   850aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   850ae:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   850b2:	3604      	adds	r6, #4
   850b4:	9305      	str	r3, [sp, #20]
   850b6:	e05c      	b.n	85172 <_svfprintf_r+0x3da>
   850b8:	4631      	mov	r1, r6
   850ba:	2500      	movs	r5, #0
   850bc:	f8d1 a000 	ldr.w	sl, [r1]
   850c0:	3604      	adds	r6, #4
   850c2:	45ac      	cmp	ip, r5
   850c4:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   850c8:	4650      	mov	r0, sl
   850ca:	db11      	blt.n	850f0 <_svfprintf_r+0x358>
   850cc:	4662      	mov	r2, ip
   850ce:	4629      	mov	r1, r5
   850d0:	f8cd c000 	str.w	ip, [sp]
   850d4:	f002 ff02 	bl	87edc <memchr>
   850d8:	f8dd c000 	ldr.w	ip, [sp]
   850dc:	2800      	cmp	r0, #0
   850de:	f000 80d4 	beq.w	8528a <_svfprintf_r+0x4f2>
   850e2:	ebca 0400 	rsb	r4, sl, r0
   850e6:	4564      	cmp	r4, ip
   850e8:	f340 80d1 	ble.w	8528e <_svfprintf_r+0x4f6>
   850ec:	4664      	mov	r4, ip
   850ee:	e0ce      	b.n	8528e <_svfprintf_r+0x4f6>
   850f0:	f7ff f85e 	bl	841b0 <strlen>
   850f4:	4604      	mov	r4, r0
   850f6:	e0ca      	b.n	8528e <_svfprintf_r+0x4f6>
   850f8:	f047 0710 	orr.w	r7, r7, #16
   850fc:	06bd      	lsls	r5, r7, #26
   850fe:	d506      	bpl.n	8510e <_svfprintf_r+0x376>
   85100:	1df0      	adds	r0, r6, #7
   85102:	f020 0407 	bic.w	r4, r0, #7
   85106:	f104 0608 	add.w	r6, r4, #8
   8510a:	cc30      	ldmia	r4, {r4, r5}
   8510c:	e00c      	b.n	85128 <_svfprintf_r+0x390>
   8510e:	f017 0f10 	tst.w	r7, #16
   85112:	f106 0304 	add.w	r3, r6, #4
   85116:	d103      	bne.n	85120 <_svfprintf_r+0x388>
   85118:	067c      	lsls	r4, r7, #25
   8511a:	d501      	bpl.n	85120 <_svfprintf_r+0x388>
   8511c:	8834      	ldrh	r4, [r6, #0]
   8511e:	e001      	b.n	85124 <_svfprintf_r+0x38c>
   85120:	6835      	ldr	r5, [r6, #0]
   85122:	462c      	mov	r4, r5
   85124:	2500      	movs	r5, #0
   85126:	461e      	mov	r6, r3
   85128:	2001      	movs	r0, #1
   8512a:	e023      	b.n	85174 <_svfprintf_r+0x3dc>
   8512c:	06b8      	lsls	r0, r7, #26
   8512e:	d507      	bpl.n	85140 <_svfprintf_r+0x3a8>
   85130:	1df4      	adds	r4, r6, #7
   85132:	f024 0107 	bic.w	r1, r4, #7
   85136:	f101 0608 	add.w	r6, r1, #8
   8513a:	e9d1 4500 	ldrd	r4, r5, [r1]
   8513e:	e00c      	b.n	8515a <_svfprintf_r+0x3c2>
   85140:	f017 0f10 	tst.w	r7, #16
   85144:	f106 0004 	add.w	r0, r6, #4
   85148:	d103      	bne.n	85152 <_svfprintf_r+0x3ba>
   8514a:	0679      	lsls	r1, r7, #25
   8514c:	d501      	bpl.n	85152 <_svfprintf_r+0x3ba>
   8514e:	8834      	ldrh	r4, [r6, #0]
   85150:	e001      	b.n	85156 <_svfprintf_r+0x3be>
   85152:	6836      	ldr	r6, [r6, #0]
   85154:	4634      	mov	r4, r6
   85156:	2500      	movs	r5, #0
   85158:	4606      	mov	r6, r0
   8515a:	07fa      	lsls	r2, r7, #31
   8515c:	d509      	bpl.n	85172 <_svfprintf_r+0x3da>
   8515e:	ea54 0205 	orrs.w	r2, r4, r5
   85162:	d006      	beq.n	85172 <_svfprintf_r+0x3da>
   85164:	2230      	movs	r2, #48	; 0x30
   85166:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8516a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8516e:	f047 0702 	orr.w	r7, r7, #2
   85172:	2002      	movs	r0, #2
   85174:	2100      	movs	r1, #0
   85176:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8517a:	e004      	b.n	85186 <_svfprintf_r+0x3ee>
   8517c:	0008a7ac 	.word	0x0008a7ac
   85180:	0008a7bd 	.word	0x0008a7bd
   85184:	2001      	movs	r0, #1
   85186:	f1bc 0f00 	cmp.w	ip, #0
   8518a:	bfa8      	it	ge
   8518c:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   85190:	ea54 0105 	orrs.w	r1, r4, r5
   85194:	d102      	bne.n	8519c <_svfprintf_r+0x404>
   85196:	f1bc 0f00 	cmp.w	ip, #0
   8519a:	d058      	beq.n	8524e <_svfprintf_r+0x4b6>
   8519c:	2801      	cmp	r0, #1
   8519e:	d01d      	beq.n	851dc <_svfprintf_r+0x444>
   851a0:	2802      	cmp	r0, #2
   851a2:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   851a6:	d041      	beq.n	8522c <_svfprintf_r+0x494>
   851a8:	f004 0207 	and.w	r2, r4, #7
   851ac:	08e4      	lsrs	r4, r4, #3
   851ae:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   851b2:	08e9      	lsrs	r1, r5, #3
   851b4:	4604      	mov	r4, r0
   851b6:	460d      	mov	r5, r1
   851b8:	3230      	adds	r2, #48	; 0x30
   851ba:	ea54 0105 	orrs.w	r1, r4, r5
   851be:	469a      	mov	sl, r3
   851c0:	701a      	strb	r2, [r3, #0]
   851c2:	f103 33ff 	add.w	r3, r3, #4294967295
   851c6:	d1ef      	bne.n	851a8 <_svfprintf_r+0x410>
   851c8:	07f8      	lsls	r0, r7, #31
   851ca:	4655      	mov	r5, sl
   851cc:	d54a      	bpl.n	85264 <_svfprintf_r+0x4cc>
   851ce:	2a30      	cmp	r2, #48	; 0x30
   851d0:	d048      	beq.n	85264 <_svfprintf_r+0x4cc>
   851d2:	2230      	movs	r2, #48	; 0x30
   851d4:	469a      	mov	sl, r3
   851d6:	f805 2c01 	strb.w	r2, [r5, #-1]
   851da:	e043      	b.n	85264 <_svfprintf_r+0x4cc>
   851dc:	2d00      	cmp	r5, #0
   851de:	bf08      	it	eq
   851e0:	2c0a      	cmpeq	r4, #10
   851e2:	d203      	bcs.n	851ec <_svfprintf_r+0x454>
   851e4:	3430      	adds	r4, #48	; 0x30
   851e6:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   851ea:	e036      	b.n	8525a <_svfprintf_r+0x4c2>
   851ec:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   851f0:	9302      	str	r3, [sp, #8]
   851f2:	4620      	mov	r0, r4
   851f4:	4629      	mov	r1, r5
   851f6:	220a      	movs	r2, #10
   851f8:	2300      	movs	r3, #0
   851fa:	f8cd c000 	str.w	ip, [sp]
   851fe:	f004 ff6b 	bl	8a0d8 <__aeabi_uldivmod>
   85202:	9802      	ldr	r0, [sp, #8]
   85204:	3230      	adds	r2, #48	; 0x30
   85206:	f800 2901 	strb.w	r2, [r0], #-1
   8520a:	4629      	mov	r1, r5
   8520c:	220a      	movs	r2, #10
   8520e:	2300      	movs	r3, #0
   85210:	f8dd a008 	ldr.w	sl, [sp, #8]
   85214:	9002      	str	r0, [sp, #8]
   85216:	4620      	mov	r0, r4
   85218:	f004 ff5e 	bl	8a0d8 <__aeabi_uldivmod>
   8521c:	4604      	mov	r4, r0
   8521e:	460d      	mov	r5, r1
   85220:	ea54 0105 	orrs.w	r1, r4, r5
   85224:	f8dd c000 	ldr.w	ip, [sp]
   85228:	d1e3      	bne.n	851f2 <_svfprintf_r+0x45a>
   8522a:	e01b      	b.n	85264 <_svfprintf_r+0x4cc>
   8522c:	9905      	ldr	r1, [sp, #20]
   8522e:	f004 000f 	and.w	r0, r4, #15
   85232:	0924      	lsrs	r4, r4, #4
   85234:	5c0a      	ldrb	r2, [r1, r0]
   85236:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8523a:	0929      	lsrs	r1, r5, #4
   8523c:	4604      	mov	r4, r0
   8523e:	460d      	mov	r5, r1
   85240:	469a      	mov	sl, r3
   85242:	f803 2901 	strb.w	r2, [r3], #-1
   85246:	ea54 0205 	orrs.w	r2, r4, r5
   8524a:	d1ef      	bne.n	8522c <_svfprintf_r+0x494>
   8524c:	e00a      	b.n	85264 <_svfprintf_r+0x4cc>
   8524e:	b938      	cbnz	r0, 85260 <_svfprintf_r+0x4c8>
   85250:	07f9      	lsls	r1, r7, #31
   85252:	d505      	bpl.n	85260 <_svfprintf_r+0x4c8>
   85254:	2030      	movs	r0, #48	; 0x30
   85256:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8525a:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8525e:	e001      	b.n	85264 <_svfprintf_r+0x4cc>
   85260:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   85264:	ad18      	add	r5, sp, #96	; 0x60
   85266:	ebca 0405 	rsb	r4, sl, r5
   8526a:	4665      	mov	r5, ip
   8526c:	e00f      	b.n	8528e <_svfprintf_r+0x4f6>
   8526e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   85272:	2b00      	cmp	r3, #0
   85274:	f000 8176 	beq.w	85564 <_svfprintf_r+0x7cc>
   85278:	2500      	movs	r5, #0
   8527a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8527e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   85282:	2401      	movs	r4, #1
   85284:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   85288:	e001      	b.n	8528e <_svfprintf_r+0x4f6>
   8528a:	4664      	mov	r4, ip
   8528c:	4605      	mov	r5, r0
   8528e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   85292:	42ac      	cmp	r4, r5
   85294:	bfac      	ite	ge
   85296:	4621      	movge	r1, r4
   85298:	4629      	movlt	r1, r5
   8529a:	9102      	str	r1, [sp, #8]
   8529c:	b113      	cbz	r3, 852a4 <_svfprintf_r+0x50c>
   8529e:	9802      	ldr	r0, [sp, #8]
   852a0:	1c42      	adds	r2, r0, #1
   852a2:	9202      	str	r2, [sp, #8]
   852a4:	f017 0102 	ands.w	r1, r7, #2
   852a8:	9106      	str	r1, [sp, #24]
   852aa:	d002      	beq.n	852b2 <_svfprintf_r+0x51a>
   852ac:	9b02      	ldr	r3, [sp, #8]
   852ae:	1c98      	adds	r0, r3, #2
   852b0:	9002      	str	r0, [sp, #8]
   852b2:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   852b6:	9207      	str	r2, [sp, #28]
   852b8:	d13c      	bne.n	85334 <_svfprintf_r+0x59c>
   852ba:	9903      	ldr	r1, [sp, #12]
   852bc:	9b02      	ldr	r3, [sp, #8]
   852be:	1acb      	subs	r3, r1, r3
   852c0:	2b00      	cmp	r3, #0
   852c2:	dd37      	ble.n	85334 <_svfprintf_r+0x59c>
   852c4:	48a5      	ldr	r0, [pc, #660]	; (8555c <_svfprintf_r+0x7c4>)
   852c6:	2b10      	cmp	r3, #16
   852c8:	f8c8 0000 	str.w	r0, [r8]
   852cc:	dd1b      	ble.n	85306 <_svfprintf_r+0x56e>
   852ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   852d0:	2110      	movs	r1, #16
   852d2:	980d      	ldr	r0, [sp, #52]	; 0x34
   852d4:	f8c8 1004 	str.w	r1, [r8, #4]
   852d8:	1c51      	adds	r1, r2, #1
   852da:	3010      	adds	r0, #16
   852dc:	2907      	cmp	r1, #7
   852de:	900d      	str	r0, [sp, #52]	; 0x34
   852e0:	910c      	str	r1, [sp, #48]	; 0x30
   852e2:	dc02      	bgt.n	852ea <_svfprintf_r+0x552>
   852e4:	f108 0808 	add.w	r8, r8, #8
   852e8:	e00b      	b.n	85302 <_svfprintf_r+0x56a>
   852ea:	4658      	mov	r0, fp
   852ec:	4649      	mov	r1, r9
   852ee:	aa0b      	add	r2, sp, #44	; 0x2c
   852f0:	9300      	str	r3, [sp, #0]
   852f2:	f003 ff5d 	bl	891b0 <__ssprint_r>
   852f6:	9b00      	ldr	r3, [sp, #0]
   852f8:	2800      	cmp	r0, #0
   852fa:	f040 813a 	bne.w	85572 <_svfprintf_r+0x7da>
   852fe:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85302:	3b10      	subs	r3, #16
   85304:	e7de      	b.n	852c4 <_svfprintf_r+0x52c>
   85306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85308:	f8c8 3004 	str.w	r3, [r8, #4]
   8530c:	18d1      	adds	r1, r2, r3
   8530e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85310:	910d      	str	r1, [sp, #52]	; 0x34
   85312:	1c58      	adds	r0, r3, #1
   85314:	2807      	cmp	r0, #7
   85316:	900c      	str	r0, [sp, #48]	; 0x30
   85318:	dc02      	bgt.n	85320 <_svfprintf_r+0x588>
   8531a:	f108 0808 	add.w	r8, r8, #8
   8531e:	e009      	b.n	85334 <_svfprintf_r+0x59c>
   85320:	4658      	mov	r0, fp
   85322:	4649      	mov	r1, r9
   85324:	aa0b      	add	r2, sp, #44	; 0x2c
   85326:	f003 ff43 	bl	891b0 <__ssprint_r>
   8532a:	2800      	cmp	r0, #0
   8532c:	f040 8121 	bne.w	85572 <_svfprintf_r+0x7da>
   85330:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85334:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   85338:	b1da      	cbz	r2, 85372 <_svfprintf_r+0x5da>
   8533a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8533e:	f8c8 1000 	str.w	r1, [r8]
   85342:	990c      	ldr	r1, [sp, #48]	; 0x30
   85344:	2301      	movs	r3, #1
   85346:	980d      	ldr	r0, [sp, #52]	; 0x34
   85348:	f8c8 3004 	str.w	r3, [r8, #4]
   8534c:	1c4b      	adds	r3, r1, #1
   8534e:	1c42      	adds	r2, r0, #1
   85350:	2b07      	cmp	r3, #7
   85352:	920d      	str	r2, [sp, #52]	; 0x34
   85354:	930c      	str	r3, [sp, #48]	; 0x30
   85356:	dc02      	bgt.n	8535e <_svfprintf_r+0x5c6>
   85358:	f108 0808 	add.w	r8, r8, #8
   8535c:	e009      	b.n	85372 <_svfprintf_r+0x5da>
   8535e:	4658      	mov	r0, fp
   85360:	4649      	mov	r1, r9
   85362:	aa0b      	add	r2, sp, #44	; 0x2c
   85364:	f003 ff24 	bl	891b0 <__ssprint_r>
   85368:	2800      	cmp	r0, #0
   8536a:	f040 8102 	bne.w	85572 <_svfprintf_r+0x7da>
   8536e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85372:	9806      	ldr	r0, [sp, #24]
   85374:	b1d0      	cbz	r0, 853ac <_svfprintf_r+0x614>
   85376:	aa0a      	add	r2, sp, #40	; 0x28
   85378:	f8c8 2000 	str.w	r2, [r8]
   8537c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8537e:	2102      	movs	r1, #2
   85380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85382:	f8c8 1004 	str.w	r1, [r8, #4]
   85386:	1c51      	adds	r1, r2, #1
   85388:	1c98      	adds	r0, r3, #2
   8538a:	2907      	cmp	r1, #7
   8538c:	900d      	str	r0, [sp, #52]	; 0x34
   8538e:	910c      	str	r1, [sp, #48]	; 0x30
   85390:	dc02      	bgt.n	85398 <_svfprintf_r+0x600>
   85392:	f108 0808 	add.w	r8, r8, #8
   85396:	e009      	b.n	853ac <_svfprintf_r+0x614>
   85398:	4658      	mov	r0, fp
   8539a:	4649      	mov	r1, r9
   8539c:	aa0b      	add	r2, sp, #44	; 0x2c
   8539e:	f003 ff07 	bl	891b0 <__ssprint_r>
   853a2:	2800      	cmp	r0, #0
   853a4:	f040 80e5 	bne.w	85572 <_svfprintf_r+0x7da>
   853a8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   853ac:	9b07      	ldr	r3, [sp, #28]
   853ae:	2b80      	cmp	r3, #128	; 0x80
   853b0:	d13c      	bne.n	8542c <_svfprintf_r+0x694>
   853b2:	9803      	ldr	r0, [sp, #12]
   853b4:	9a02      	ldr	r2, [sp, #8]
   853b6:	1a83      	subs	r3, r0, r2
   853b8:	2b00      	cmp	r3, #0
   853ba:	dd37      	ble.n	8542c <_svfprintf_r+0x694>
   853bc:	4968      	ldr	r1, [pc, #416]	; (85560 <_svfprintf_r+0x7c8>)
   853be:	2b10      	cmp	r3, #16
   853c0:	f8c8 1000 	str.w	r1, [r8]
   853c4:	dd1b      	ble.n	853fe <_svfprintf_r+0x666>
   853c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   853c8:	2210      	movs	r2, #16
   853ca:	990d      	ldr	r1, [sp, #52]	; 0x34
   853cc:	f8c8 2004 	str.w	r2, [r8, #4]
   853d0:	1c42      	adds	r2, r0, #1
   853d2:	3110      	adds	r1, #16
   853d4:	2a07      	cmp	r2, #7
   853d6:	910d      	str	r1, [sp, #52]	; 0x34
   853d8:	920c      	str	r2, [sp, #48]	; 0x30
   853da:	dc02      	bgt.n	853e2 <_svfprintf_r+0x64a>
   853dc:	f108 0808 	add.w	r8, r8, #8
   853e0:	e00b      	b.n	853fa <_svfprintf_r+0x662>
   853e2:	4658      	mov	r0, fp
   853e4:	4649      	mov	r1, r9
   853e6:	aa0b      	add	r2, sp, #44	; 0x2c
   853e8:	9300      	str	r3, [sp, #0]
   853ea:	f003 fee1 	bl	891b0 <__ssprint_r>
   853ee:	9b00      	ldr	r3, [sp, #0]
   853f0:	2800      	cmp	r0, #0
   853f2:	f040 80be 	bne.w	85572 <_svfprintf_r+0x7da>
   853f6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   853fa:	3b10      	subs	r3, #16
   853fc:	e7de      	b.n	853bc <_svfprintf_r+0x624>
   853fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85400:	980d      	ldr	r0, [sp, #52]	; 0x34
   85402:	1c51      	adds	r1, r2, #1
   85404:	f8c8 3004 	str.w	r3, [r8, #4]
   85408:	2907      	cmp	r1, #7
   8540a:	4403      	add	r3, r0
   8540c:	930d      	str	r3, [sp, #52]	; 0x34
   8540e:	910c      	str	r1, [sp, #48]	; 0x30
   85410:	dc02      	bgt.n	85418 <_svfprintf_r+0x680>
   85412:	f108 0808 	add.w	r8, r8, #8
   85416:	e009      	b.n	8542c <_svfprintf_r+0x694>
   85418:	4658      	mov	r0, fp
   8541a:	4649      	mov	r1, r9
   8541c:	aa0b      	add	r2, sp, #44	; 0x2c
   8541e:	f003 fec7 	bl	891b0 <__ssprint_r>
   85422:	2800      	cmp	r0, #0
   85424:	f040 80a5 	bne.w	85572 <_svfprintf_r+0x7da>
   85428:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8542c:	1b2d      	subs	r5, r5, r4
   8542e:	2d00      	cmp	r5, #0
   85430:	dd34      	ble.n	8549c <_svfprintf_r+0x704>
   85432:	484b      	ldr	r0, [pc, #300]	; (85560 <_svfprintf_r+0x7c8>)
   85434:	2d10      	cmp	r5, #16
   85436:	f8c8 0000 	str.w	r0, [r8]
   8543a:	dd19      	ble.n	85470 <_svfprintf_r+0x6d8>
   8543c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8543e:	990d      	ldr	r1, [sp, #52]	; 0x34
   85440:	1c43      	adds	r3, r0, #1
   85442:	2210      	movs	r2, #16
   85444:	3110      	adds	r1, #16
   85446:	2b07      	cmp	r3, #7
   85448:	f8c8 2004 	str.w	r2, [r8, #4]
   8544c:	910d      	str	r1, [sp, #52]	; 0x34
   8544e:	930c      	str	r3, [sp, #48]	; 0x30
   85450:	dc02      	bgt.n	85458 <_svfprintf_r+0x6c0>
   85452:	f108 0808 	add.w	r8, r8, #8
   85456:	e009      	b.n	8546c <_svfprintf_r+0x6d4>
   85458:	4658      	mov	r0, fp
   8545a:	4649      	mov	r1, r9
   8545c:	aa0b      	add	r2, sp, #44	; 0x2c
   8545e:	f003 fea7 	bl	891b0 <__ssprint_r>
   85462:	2800      	cmp	r0, #0
   85464:	f040 8085 	bne.w	85572 <_svfprintf_r+0x7da>
   85468:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8546c:	3d10      	subs	r5, #16
   8546e:	e7e0      	b.n	85432 <_svfprintf_r+0x69a>
   85470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85474:	1c51      	adds	r1, r2, #1
   85476:	f8c8 5004 	str.w	r5, [r8, #4]
   8547a:	2907      	cmp	r1, #7
   8547c:	441d      	add	r5, r3
   8547e:	950d      	str	r5, [sp, #52]	; 0x34
   85480:	910c      	str	r1, [sp, #48]	; 0x30
   85482:	dc02      	bgt.n	8548a <_svfprintf_r+0x6f2>
   85484:	f108 0808 	add.w	r8, r8, #8
   85488:	e008      	b.n	8549c <_svfprintf_r+0x704>
   8548a:	4658      	mov	r0, fp
   8548c:	4649      	mov	r1, r9
   8548e:	aa0b      	add	r2, sp, #44	; 0x2c
   85490:	f003 fe8e 	bl	891b0 <__ssprint_r>
   85494:	2800      	cmp	r0, #0
   85496:	d16c      	bne.n	85572 <_svfprintf_r+0x7da>
   85498:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8549c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8549e:	980d      	ldr	r0, [sp, #52]	; 0x34
   854a0:	1c5a      	adds	r2, r3, #1
   854a2:	f8c8 4004 	str.w	r4, [r8, #4]
   854a6:	2a07      	cmp	r2, #7
   854a8:	4404      	add	r4, r0
   854aa:	f8c8 a000 	str.w	sl, [r8]
   854ae:	940d      	str	r4, [sp, #52]	; 0x34
   854b0:	920c      	str	r2, [sp, #48]	; 0x30
   854b2:	dc02      	bgt.n	854ba <_svfprintf_r+0x722>
   854b4:	f108 0308 	add.w	r3, r8, #8
   854b8:	e007      	b.n	854ca <_svfprintf_r+0x732>
   854ba:	4658      	mov	r0, fp
   854bc:	4649      	mov	r1, r9
   854be:	aa0b      	add	r2, sp, #44	; 0x2c
   854c0:	f003 fe76 	bl	891b0 <__ssprint_r>
   854c4:	2800      	cmp	r0, #0
   854c6:	d154      	bne.n	85572 <_svfprintf_r+0x7da>
   854c8:	ab18      	add	r3, sp, #96	; 0x60
   854ca:	077a      	lsls	r2, r7, #29
   854cc:	d40b      	bmi.n	854e6 <_svfprintf_r+0x74e>
   854ce:	9804      	ldr	r0, [sp, #16]
   854d0:	9b02      	ldr	r3, [sp, #8]
   854d2:	9a03      	ldr	r2, [sp, #12]
   854d4:	990d      	ldr	r1, [sp, #52]	; 0x34
   854d6:	4293      	cmp	r3, r2
   854d8:	bfac      	ite	ge
   854da:	18c0      	addge	r0, r0, r3
   854dc:	1880      	addlt	r0, r0, r2
   854de:	9004      	str	r0, [sp, #16]
   854e0:	2900      	cmp	r1, #0
   854e2:	d036      	beq.n	85552 <_svfprintf_r+0x7ba>
   854e4:	e02f      	b.n	85546 <_svfprintf_r+0x7ae>
   854e6:	9c03      	ldr	r4, [sp, #12]
   854e8:	9902      	ldr	r1, [sp, #8]
   854ea:	1a64      	subs	r4, r4, r1
   854ec:	2c00      	cmp	r4, #0
   854ee:	ddee      	ble.n	854ce <_svfprintf_r+0x736>
   854f0:	481a      	ldr	r0, [pc, #104]	; (8555c <_svfprintf_r+0x7c4>)
   854f2:	2c10      	cmp	r4, #16
   854f4:	6018      	str	r0, [r3, #0]
   854f6:	dd15      	ble.n	85524 <_svfprintf_r+0x78c>
   854f8:	990c      	ldr	r1, [sp, #48]	; 0x30
   854fa:	2010      	movs	r0, #16
   854fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   854fe:	6058      	str	r0, [r3, #4]
   85500:	1c48      	adds	r0, r1, #1
   85502:	3210      	adds	r2, #16
   85504:	2807      	cmp	r0, #7
   85506:	920d      	str	r2, [sp, #52]	; 0x34
   85508:	900c      	str	r0, [sp, #48]	; 0x30
   8550a:	dc01      	bgt.n	85510 <_svfprintf_r+0x778>
   8550c:	3308      	adds	r3, #8
   8550e:	e007      	b.n	85520 <_svfprintf_r+0x788>
   85510:	4658      	mov	r0, fp
   85512:	4649      	mov	r1, r9
   85514:	aa0b      	add	r2, sp, #44	; 0x2c
   85516:	f003 fe4b 	bl	891b0 <__ssprint_r>
   8551a:	2800      	cmp	r0, #0
   8551c:	d129      	bne.n	85572 <_svfprintf_r+0x7da>
   8551e:	ab18      	add	r3, sp, #96	; 0x60
   85520:	3c10      	subs	r4, #16
   85522:	e7e5      	b.n	854f0 <_svfprintf_r+0x758>
   85524:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85526:	605c      	str	r4, [r3, #4]
   85528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8552a:	1c51      	adds	r1, r2, #1
   8552c:	191c      	adds	r4, r3, r4
   8552e:	2907      	cmp	r1, #7
   85530:	940d      	str	r4, [sp, #52]	; 0x34
   85532:	910c      	str	r1, [sp, #48]	; 0x30
   85534:	ddcb      	ble.n	854ce <_svfprintf_r+0x736>
   85536:	4658      	mov	r0, fp
   85538:	4649      	mov	r1, r9
   8553a:	aa0b      	add	r2, sp, #44	; 0x2c
   8553c:	f003 fe38 	bl	891b0 <__ssprint_r>
   85540:	2800      	cmp	r0, #0
   85542:	d0c4      	beq.n	854ce <_svfprintf_r+0x736>
   85544:	e015      	b.n	85572 <_svfprintf_r+0x7da>
   85546:	4658      	mov	r0, fp
   85548:	4649      	mov	r1, r9
   8554a:	aa0b      	add	r2, sp, #44	; 0x2c
   8554c:	f003 fe30 	bl	891b0 <__ssprint_r>
   85550:	b978      	cbnz	r0, 85572 <_svfprintf_r+0x7da>
   85552:	2500      	movs	r5, #0
   85554:	950c      	str	r5, [sp, #48]	; 0x30
   85556:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8555a:	e446      	b.n	84dea <_svfprintf_r+0x52>
   8555c:	0008a78c 	.word	0x0008a78c
   85560:	0008a79c 	.word	0x0008a79c
   85564:	980d      	ldr	r0, [sp, #52]	; 0x34
   85566:	b120      	cbz	r0, 85572 <_svfprintf_r+0x7da>
   85568:	4658      	mov	r0, fp
   8556a:	4649      	mov	r1, r9
   8556c:	aa0b      	add	r2, sp, #44	; 0x2c
   8556e:	f003 fe1f 	bl	891b0 <__ssprint_r>
   85572:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   85576:	9b04      	ldr	r3, [sp, #16]
   85578:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8557c:	b208      	sxth	r0, r1
   8557e:	2800      	cmp	r0, #0
   85580:	bf18      	it	ne
   85582:	f04f 33ff 	movne.w	r3, #4294967295
   85586:	4618      	mov	r0, r3
   85588:	b029      	add	sp, #164	; 0xa4
   8558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8558e:	bf00      	nop

00085590 <__sprint_r>:
   85590:	6893      	ldr	r3, [r2, #8]
   85592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85596:	4681      	mov	r9, r0
   85598:	460f      	mov	r7, r1
   8559a:	4614      	mov	r4, r2
   8559c:	b91b      	cbnz	r3, 855a6 <__sprint_r+0x16>
   8559e:	6053      	str	r3, [r2, #4]
   855a0:	4618      	mov	r0, r3
   855a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   855a6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   855a8:	049b      	lsls	r3, r3, #18
   855aa:	d51e      	bpl.n	855ea <__sprint_r+0x5a>
   855ac:	6815      	ldr	r5, [r2, #0]
   855ae:	68a0      	ldr	r0, [r4, #8]
   855b0:	3508      	adds	r5, #8
   855b2:	b1c8      	cbz	r0, 855e8 <__sprint_r+0x58>
   855b4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   855b8:	f855 ac08 	ldr.w	sl, [r5, #-8]
   855bc:	ea4f 0891 	mov.w	r8, r1, lsr #2
   855c0:	2600      	movs	r6, #0
   855c2:	4546      	cmp	r6, r8
   855c4:	da09      	bge.n	855da <__sprint_r+0x4a>
   855c6:	4648      	mov	r0, r9
   855c8:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   855cc:	463a      	mov	r2, r7
   855ce:	f001 faa5 	bl	86b1c <_fputwc_r>
   855d2:	1c43      	adds	r3, r0, #1
   855d4:	d00b      	beq.n	855ee <__sprint_r+0x5e>
   855d6:	3601      	adds	r6, #1
   855d8:	e7f3      	b.n	855c2 <__sprint_r+0x32>
   855da:	68a2      	ldr	r2, [r4, #8]
   855dc:	ea4f 0888 	mov.w	r8, r8, lsl #2
   855e0:	ebc8 0302 	rsb	r3, r8, r2
   855e4:	60a3      	str	r3, [r4, #8]
   855e6:	e7e2      	b.n	855ae <__sprint_r+0x1e>
   855e8:	e001      	b.n	855ee <__sprint_r+0x5e>
   855ea:	f001 fc6d 	bl	86ec8 <__sfvwrite_r>
   855ee:	2100      	movs	r1, #0
   855f0:	60a1      	str	r1, [r4, #8]
   855f2:	6061      	str	r1, [r4, #4]
   855f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000855f8 <_vfiprintf_r>:
   855f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855fc:	4689      	mov	r9, r1
   855fe:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
   85602:	4614      	mov	r4, r2
   85604:	461e      	mov	r6, r3
   85606:	4683      	mov	fp, r0
   85608:	b118      	cbz	r0, 85612 <_vfiprintf_r+0x1a>
   8560a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8560c:	b90b      	cbnz	r3, 85612 <_vfiprintf_r+0x1a>
   8560e:	f001 fa09 	bl	86a24 <__sinit>
   85612:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   85616:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   8561a:	b211      	sxth	r1, r2
   8561c:	b949      	cbnz	r1, 85632 <_vfiprintf_r+0x3a>
   8561e:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   85622:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   85626:	f8a9 300c 	strh.w	r3, [r9, #12]
   8562a:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   8562e:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   85632:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   85636:	f001 0308 	and.w	r3, r1, #8
   8563a:	b218      	sxth	r0, r3
   8563c:	b148      	cbz	r0, 85652 <_vfiprintf_r+0x5a>
   8563e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   85642:	b132      	cbz	r2, 85652 <_vfiprintf_r+0x5a>
   85644:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   85648:	f000 011a 	and.w	r1, r0, #26
   8564c:	290a      	cmp	r1, #10
   8564e:	d149      	bne.n	856e4 <_vfiprintf_r+0xec>
   85650:	e00a      	b.n	85668 <_vfiprintf_r+0x70>
   85652:	4658      	mov	r0, fp
   85654:	4649      	mov	r1, r9
   85656:	f001 f83f 	bl	866d8 <__swsetup_r>
   8565a:	2800      	cmp	r0, #0
   8565c:	d0f2      	beq.n	85644 <_vfiprintf_r+0x4c>
   8565e:	f04f 31ff 	mov.w	r1, #4294967295
   85662:	9102      	str	r1, [sp, #8]
   85664:	f000 bc15 	b.w	85e92 <_vfiprintf_r+0x89a>
   85668:	f8b9 300e 	ldrh.w	r3, [r9, #14]
   8566c:	0419      	lsls	r1, r3, #16
   8566e:	d439      	bmi.n	856e4 <_vfiprintf_r+0xec>
   85670:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
   85674:	f8d9 201c 	ldr.w	r2, [r9, #28]
   85678:	f020 0002 	bic.w	r0, r0, #2
   8567c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
   85680:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   85684:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
   85688:	9131      	str	r1, [sp, #196]	; 0xc4
   8568a:	a832      	add	r0, sp, #200	; 0xc8
   8568c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85690:	921f      	str	r2, [sp, #124]	; 0x7c
   85692:	2200      	movs	r2, #0
   85694:	9321      	str	r3, [sp, #132]	; 0x84
   85696:	9018      	str	r0, [sp, #96]	; 0x60
   85698:	901c      	str	r0, [sp, #112]	; 0x70
   8569a:	911a      	str	r1, [sp, #104]	; 0x68
   8569c:	911d      	str	r1, [sp, #116]	; 0x74
   8569e:	921e      	str	r2, [sp, #120]	; 0x78
   856a0:	4658      	mov	r0, fp
   856a2:	a918      	add	r1, sp, #96	; 0x60
   856a4:	4622      	mov	r2, r4
   856a6:	4633      	mov	r3, r6
   856a8:	f7ff ffa6 	bl	855f8 <_vfiprintf_r>
   856ac:	2800      	cmp	r0, #0
   856ae:	9002      	str	r0, [sp, #8]
   856b0:	db09      	blt.n	856c6 <_vfiprintf_r+0xce>
   856b2:	4658      	mov	r0, fp
   856b4:	a918      	add	r1, sp, #96	; 0x60
   856b6:	f001 f8c3 	bl	86840 <_fflush_r>
   856ba:	9b02      	ldr	r3, [sp, #8]
   856bc:	2800      	cmp	r0, #0
   856be:	bf18      	it	ne
   856c0:	f04f 33ff 	movne.w	r3, #4294967295
   856c4:	9302      	str	r3, [sp, #8]
   856c6:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
   856ca:	f000 0140 	and.w	r1, r0, #64	; 0x40
   856ce:	b20a      	sxth	r2, r1
   856d0:	2a00      	cmp	r2, #0
   856d2:	f000 83de 	beq.w	85e92 <_vfiprintf_r+0x89a>
   856d6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   856da:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   856de:	f8a9 000c 	strh.w	r0, [r9, #12]
   856e2:	e3d6      	b.n	85e92 <_vfiprintf_r+0x89a>
   856e4:	2200      	movs	r2, #0
   856e6:	ad32      	add	r5, sp, #200	; 0xc8
   856e8:	950b      	str	r5, [sp, #44]	; 0x2c
   856ea:	920d      	str	r2, [sp, #52]	; 0x34
   856ec:	920c      	str	r2, [sp, #48]	; 0x30
   856ee:	9401      	str	r4, [sp, #4]
   856f0:	9205      	str	r2, [sp, #20]
   856f2:	9202      	str	r2, [sp, #8]
   856f4:	46a8      	mov	r8, r5
   856f6:	9801      	ldr	r0, [sp, #4]
   856f8:	4604      	mov	r4, r0
   856fa:	f810 1b01 	ldrb.w	r1, [r0], #1
   856fe:	b919      	cbnz	r1, 85708 <_vfiprintf_r+0x110>
   85700:	9b01      	ldr	r3, [sp, #4]
   85702:	1ae5      	subs	r5, r4, r3
   85704:	d103      	bne.n	8570e <_vfiprintf_r+0x116>
   85706:	e01d      	b.n	85744 <_vfiprintf_r+0x14c>
   85708:	2925      	cmp	r1, #37	; 0x25
   8570a:	d1f5      	bne.n	856f8 <_vfiprintf_r+0x100>
   8570c:	e7f8      	b.n	85700 <_vfiprintf_r+0x108>
   8570e:	9901      	ldr	r1, [sp, #4]
   85710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85712:	e888 0022 	stmia.w	r8, {r1, r5}
   85716:	990c      	ldr	r1, [sp, #48]	; 0x30
   85718:	1950      	adds	r0, r2, r5
   8571a:	1c4b      	adds	r3, r1, #1
   8571c:	2b07      	cmp	r3, #7
   8571e:	900d      	str	r0, [sp, #52]	; 0x34
   85720:	930c      	str	r3, [sp, #48]	; 0x30
   85722:	dc02      	bgt.n	8572a <_vfiprintf_r+0x132>
   85724:	f108 0808 	add.w	r8, r8, #8
   85728:	e009      	b.n	8573e <_vfiprintf_r+0x146>
   8572a:	4658      	mov	r0, fp
   8572c:	4649      	mov	r1, r9
   8572e:	aa0b      	add	r2, sp, #44	; 0x2c
   85730:	f7ff ff2e 	bl	85590 <__sprint_r>
   85734:	2800      	cmp	r0, #0
   85736:	f040 83a4 	bne.w	85e82 <_vfiprintf_r+0x88a>
   8573a:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   8573e:	9a02      	ldr	r2, [sp, #8]
   85740:	1950      	adds	r0, r2, r5
   85742:	9002      	str	r0, [sp, #8]
   85744:	7821      	ldrb	r1, [r4, #0]
   85746:	2900      	cmp	r1, #0
   85748:	f000 8394 	beq.w	85e74 <_vfiprintf_r+0x87c>
   8574c:	2200      	movs	r2, #0
   8574e:	3401      	adds	r4, #1
   85750:	9401      	str	r4, [sp, #4]
   85752:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   85756:	f04f 3cff 	mov.w	ip, #4294967295
   8575a:	9204      	str	r2, [sp, #16]
   8575c:	4617      	mov	r7, r2
   8575e:	9801      	ldr	r0, [sp, #4]
   85760:	f810 3b01 	ldrb.w	r3, [r0], #1
   85764:	9001      	str	r0, [sp, #4]
   85766:	2b63      	cmp	r3, #99	; 0x63
   85768:	f000 80b3 	beq.w	858d2 <_vfiprintf_r+0x2da>
   8576c:	dc33      	bgt.n	857d6 <_vfiprintf_r+0x1de>
   8576e:	2b39      	cmp	r3, #57	; 0x39
   85770:	dc1a      	bgt.n	857a8 <_vfiprintf_r+0x1b0>
   85772:	2b31      	cmp	r3, #49	; 0x31
   85774:	f280 8091 	bge.w	8589a <_vfiprintf_r+0x2a2>
   85778:	2b2b      	cmp	r3, #43	; 0x2b
   8577a:	d101      	bne.n	85780 <_vfiprintf_r+0x188>
   8577c:	461a      	mov	r2, r3
   8577e:	e7ee      	b.n	8575e <_vfiprintf_r+0x166>
   85780:	dc0a      	bgt.n	85798 <_vfiprintf_r+0x1a0>
   85782:	2b23      	cmp	r3, #35	; 0x23
   85784:	d055      	beq.n	85832 <_vfiprintf_r+0x23a>
   85786:	2b2a      	cmp	r3, #42	; 0x2a
   85788:	d056      	beq.n	85838 <_vfiprintf_r+0x240>
   8578a:	2b20      	cmp	r3, #32
   8578c:	f040 81f7 	bne.w	85b7e <_vfiprintf_r+0x586>
   85790:	2a00      	cmp	r2, #0
   85792:	bf08      	it	eq
   85794:	2220      	moveq	r2, #32
   85796:	e7e2      	b.n	8575e <_vfiprintf_r+0x166>
   85798:	2b2e      	cmp	r3, #46	; 0x2e
   8579a:	d058      	beq.n	8584e <_vfiprintf_r+0x256>
   8579c:	2b30      	cmp	r3, #48	; 0x30
   8579e:	d079      	beq.n	85894 <_vfiprintf_r+0x29c>
   857a0:	2b2d      	cmp	r3, #45	; 0x2d
   857a2:	f040 81ec 	bne.w	85b7e <_vfiprintf_r+0x586>
   857a6:	e04f      	b.n	85848 <_vfiprintf_r+0x250>
   857a8:	2b4f      	cmp	r3, #79	; 0x4f
   857aa:	f000 80de 	beq.w	8596a <_vfiprintf_r+0x372>
   857ae:	dc07      	bgt.n	857c0 <_vfiprintf_r+0x1c8>
   857b0:	2b44      	cmp	r3, #68	; 0x44
   857b2:	f040 81e4 	bne.w	85b7e <_vfiprintf_r+0x586>
   857b6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   857ba:	f047 0710 	orr.w	r7, r7, #16
   857be:	e090      	b.n	858e2 <_vfiprintf_r+0x2ea>
   857c0:	2b55      	cmp	r3, #85	; 0x55
   857c2:	f000 811f 	beq.w	85a04 <_vfiprintf_r+0x40c>
   857c6:	2b58      	cmp	r3, #88	; 0x58
   857c8:	f040 81d9 	bne.w	85b7e <_vfiprintf_r+0x586>
   857cc:	4dae      	ldr	r5, [pc, #696]	; (85a88 <_vfiprintf_r+0x490>)
   857ce:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   857d2:	9505      	str	r5, [sp, #20]
   857d4:	e130      	b.n	85a38 <_vfiprintf_r+0x440>
   857d6:	2b6f      	cmp	r3, #111	; 0x6f
   857d8:	f000 80c9 	beq.w	8596e <_vfiprintf_r+0x376>
   857dc:	dc10      	bgt.n	85800 <_vfiprintf_r+0x208>
   857de:	2b69      	cmp	r3, #105	; 0x69
   857e0:	d024      	beq.n	8582c <_vfiprintf_r+0x234>
   857e2:	dc07      	bgt.n	857f4 <_vfiprintf_r+0x1fc>
   857e4:	2b64      	cmp	r3, #100	; 0x64
   857e6:	d021      	beq.n	8582c <_vfiprintf_r+0x234>
   857e8:	2b68      	cmp	r3, #104	; 0x68
   857ea:	f040 81c8 	bne.w	85b7e <_vfiprintf_r+0x586>
   857ee:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   857f2:	e7b4      	b.n	8575e <_vfiprintf_r+0x166>
   857f4:	2b6c      	cmp	r3, #108	; 0x6c
   857f6:	d05f      	beq.n	858b8 <_vfiprintf_r+0x2c0>
   857f8:	2b6e      	cmp	r3, #110	; 0x6e
   857fa:	f040 81c0 	bne.w	85b7e <_vfiprintf_r+0x586>
   857fe:	e096      	b.n	8592e <_vfiprintf_r+0x336>
   85800:	2b73      	cmp	r3, #115	; 0x73
   85802:	f000 80df 	beq.w	859c4 <_vfiprintf_r+0x3cc>
   85806:	dc06      	bgt.n	85816 <_vfiprintf_r+0x21e>
   85808:	2b70      	cmp	r3, #112	; 0x70
   8580a:	f000 80cd 	beq.w	859a8 <_vfiprintf_r+0x3b0>
   8580e:	2b71      	cmp	r3, #113	; 0x71
   85810:	f040 81b5 	bne.w	85b7e <_vfiprintf_r+0x586>
   85814:	e05a      	b.n	858cc <_vfiprintf_r+0x2d4>
   85816:	2b75      	cmp	r3, #117	; 0x75
   85818:	f000 80f6 	beq.w	85a08 <_vfiprintf_r+0x410>
   8581c:	2b78      	cmp	r3, #120	; 0x78
   8581e:	f040 81ae 	bne.w	85b7e <_vfiprintf_r+0x586>
   85822:	4d9a      	ldr	r5, [pc, #616]	; (85a8c <_vfiprintf_r+0x494>)
   85824:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   85828:	9505      	str	r5, [sp, #20]
   8582a:	e105      	b.n	85a38 <_vfiprintf_r+0x440>
   8582c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   85830:	e057      	b.n	858e2 <_vfiprintf_r+0x2ea>
   85832:	f047 0701 	orr.w	r7, r7, #1
   85836:	e792      	b.n	8575e <_vfiprintf_r+0x166>
   85838:	1d33      	adds	r3, r6, #4
   8583a:	6836      	ldr	r6, [r6, #0]
   8583c:	2e00      	cmp	r6, #0
   8583e:	9604      	str	r6, [sp, #16]
   85840:	da15      	bge.n	8586e <_vfiprintf_r+0x276>
   85842:	4270      	negs	r0, r6
   85844:	9004      	str	r0, [sp, #16]
   85846:	461e      	mov	r6, r3
   85848:	f047 0704 	orr.w	r7, r7, #4
   8584c:	e787      	b.n	8575e <_vfiprintf_r+0x166>
   8584e:	9901      	ldr	r1, [sp, #4]
   85850:	f811 3b01 	ldrb.w	r3, [r1], #1
   85854:	2b2a      	cmp	r3, #42	; 0x2a
   85856:	9101      	str	r1, [sp, #4]
   85858:	d10b      	bne.n	85872 <_vfiprintf_r+0x27a>
   8585a:	f8d6 c000 	ldr.w	ip, [r6]
   8585e:	1d33      	adds	r3, r6, #4
   85860:	f1bc 0f00 	cmp.w	ip, #0
   85864:	da03      	bge.n	8586e <_vfiprintf_r+0x276>
   85866:	461e      	mov	r6, r3
   85868:	f04f 3cff 	mov.w	ip, #4294967295
   8586c:	e777      	b.n	8575e <_vfiprintf_r+0x166>
   8586e:	461e      	mov	r6, r3
   85870:	e775      	b.n	8575e <_vfiprintf_r+0x166>
   85872:	f04f 0c00 	mov.w	ip, #0
   85876:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8587a:	2809      	cmp	r0, #9
   8587c:	d807      	bhi.n	8588e <_vfiprintf_r+0x296>
   8587e:	9901      	ldr	r1, [sp, #4]
   85880:	230a      	movs	r3, #10
   85882:	fb03 0c0c 	mla	ip, r3, ip, r0
   85886:	f811 3b01 	ldrb.w	r3, [r1], #1
   8588a:	9101      	str	r1, [sp, #4]
   8588c:	e7f3      	b.n	85876 <_vfiprintf_r+0x27e>
   8588e:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   85892:	e768      	b.n	85766 <_vfiprintf_r+0x16e>
   85894:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   85898:	e761      	b.n	8575e <_vfiprintf_r+0x166>
   8589a:	9801      	ldr	r0, [sp, #4]
   8589c:	2100      	movs	r1, #0
   8589e:	3b30      	subs	r3, #48	; 0x30
   858a0:	240a      	movs	r4, #10
   858a2:	fb04 3101 	mla	r1, r4, r1, r3
   858a6:	f810 3b01 	ldrb.w	r3, [r0], #1
   858aa:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   858ae:	2c09      	cmp	r4, #9
   858b0:	9001      	str	r0, [sp, #4]
   858b2:	d9f4      	bls.n	8589e <_vfiprintf_r+0x2a6>
   858b4:	9104      	str	r1, [sp, #16]
   858b6:	e756      	b.n	85766 <_vfiprintf_r+0x16e>
   858b8:	9901      	ldr	r1, [sp, #4]
   858ba:	780b      	ldrb	r3, [r1, #0]
   858bc:	2b6c      	cmp	r3, #108	; 0x6c
   858be:	d102      	bne.n	858c6 <_vfiprintf_r+0x2ce>
   858c0:	1c48      	adds	r0, r1, #1
   858c2:	9001      	str	r0, [sp, #4]
   858c4:	e002      	b.n	858cc <_vfiprintf_r+0x2d4>
   858c6:	f047 0710 	orr.w	r7, r7, #16
   858ca:	e748      	b.n	8575e <_vfiprintf_r+0x166>
   858cc:	f047 0720 	orr.w	r7, r7, #32
   858d0:	e745      	b.n	8575e <_vfiprintf_r+0x166>
   858d2:	6832      	ldr	r2, [r6, #0]
   858d4:	2500      	movs	r5, #0
   858d6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   858da:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   858de:	3604      	adds	r6, #4
   858e0:	e157      	b.n	85b92 <_vfiprintf_r+0x59a>
   858e2:	06ba      	lsls	r2, r7, #26
   858e4:	d507      	bpl.n	858f6 <_vfiprintf_r+0x2fe>
   858e6:	3607      	adds	r6, #7
   858e8:	f026 0507 	bic.w	r5, r6, #7
   858ec:	f105 0608 	add.w	r6, r5, #8
   858f0:	e9d5 4500 	ldrd	r4, r5, [r5]
   858f4:	e00f      	b.n	85916 <_vfiprintf_r+0x31e>
   858f6:	f017 0f10 	tst.w	r7, #16
   858fa:	f106 0104 	add.w	r1, r6, #4
   858fe:	d001      	beq.n	85904 <_vfiprintf_r+0x30c>
   85900:	6832      	ldr	r2, [r6, #0]
   85902:	e005      	b.n	85910 <_vfiprintf_r+0x318>
   85904:	f017 0f40 	tst.w	r7, #64	; 0x40
   85908:	6832      	ldr	r2, [r6, #0]
   8590a:	d001      	beq.n	85910 <_vfiprintf_r+0x318>
   8590c:	b214      	sxth	r4, r2
   8590e:	e000      	b.n	85912 <_vfiprintf_r+0x31a>
   85910:	4614      	mov	r4, r2
   85912:	17e5      	asrs	r5, r4, #31
   85914:	460e      	mov	r6, r1
   85916:	2c00      	cmp	r4, #0
   85918:	f175 0200 	sbcs.w	r2, r5, #0
   8591c:	f280 80b8 	bge.w	85a90 <_vfiprintf_r+0x498>
   85920:	232d      	movs	r3, #45	; 0x2d
   85922:	4264      	negs	r4, r4
   85924:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   85928:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8592c:	e0b0      	b.n	85a90 <_vfiprintf_r+0x498>
   8592e:	f017 0f20 	tst.w	r7, #32
   85932:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   85936:	f106 0204 	add.w	r2, r6, #4
   8593a:	d005      	beq.n	85948 <_vfiprintf_r+0x350>
   8593c:	9c02      	ldr	r4, [sp, #8]
   8593e:	6835      	ldr	r5, [r6, #0]
   85940:	17e0      	asrs	r0, r4, #31
   85942:	602c      	str	r4, [r5, #0]
   85944:	6068      	str	r0, [r5, #4]
   85946:	e004      	b.n	85952 <_vfiprintf_r+0x35a>
   85948:	06fb      	lsls	r3, r7, #27
   8594a:	d504      	bpl.n	85956 <_vfiprintf_r+0x35e>
   8594c:	6833      	ldr	r3, [r6, #0]
   8594e:	9902      	ldr	r1, [sp, #8]
   85950:	6019      	str	r1, [r3, #0]
   85952:	4616      	mov	r6, r2
   85954:	e6cf      	b.n	856f6 <_vfiprintf_r+0xfe>
   85956:	6830      	ldr	r0, [r6, #0]
   85958:	9c02      	ldr	r4, [sp, #8]
   8595a:	f017 0f40 	tst.w	r7, #64	; 0x40
   8595e:	f106 0604 	add.w	r6, r6, #4
   85962:	bf14      	ite	ne
   85964:	8004      	strhne	r4, [r0, #0]
   85966:	6004      	streq	r4, [r0, #0]
   85968:	e6c5      	b.n	856f6 <_vfiprintf_r+0xfe>
   8596a:	f047 0710 	orr.w	r7, r7, #16
   8596e:	f017 0020 	ands.w	r0, r7, #32
   85972:	d008      	beq.n	85986 <_vfiprintf_r+0x38e>
   85974:	1df3      	adds	r3, r6, #7
   85976:	f023 0507 	bic.w	r5, r3, #7
   8597a:	f105 0608 	add.w	r6, r5, #8
   8597e:	e9d5 4500 	ldrd	r4, r5, [r5]
   85982:	2000      	movs	r0, #0
   85984:	e07c      	b.n	85a80 <_vfiprintf_r+0x488>
   85986:	f017 0110 	ands.w	r1, r7, #16
   8598a:	f106 0204 	add.w	r2, r6, #4
   8598e:	d106      	bne.n	8599e <_vfiprintf_r+0x3a6>
   85990:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   85994:	d003      	beq.n	8599e <_vfiprintf_r+0x3a6>
   85996:	8834      	ldrh	r4, [r6, #0]
   85998:	2500      	movs	r5, #0
   8599a:	4616      	mov	r6, r2
   8599c:	e7f1      	b.n	85982 <_vfiprintf_r+0x38a>
   8599e:	6836      	ldr	r6, [r6, #0]
   859a0:	2500      	movs	r5, #0
   859a2:	4634      	mov	r4, r6
   859a4:	4616      	mov	r6, r2
   859a6:	e06b      	b.n	85a80 <_vfiprintf_r+0x488>
   859a8:	4b38      	ldr	r3, [pc, #224]	; (85a8c <_vfiprintf_r+0x494>)
   859aa:	2130      	movs	r1, #48	; 0x30
   859ac:	2278      	movs	r2, #120	; 0x78
   859ae:	6834      	ldr	r4, [r6, #0]
   859b0:	2500      	movs	r5, #0
   859b2:	f047 0702 	orr.w	r7, r7, #2
   859b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   859ba:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   859be:	3604      	adds	r6, #4
   859c0:	9305      	str	r3, [sp, #20]
   859c2:	e05c      	b.n	85a7e <_vfiprintf_r+0x486>
   859c4:	4631      	mov	r1, r6
   859c6:	2500      	movs	r5, #0
   859c8:	f8d1 a000 	ldr.w	sl, [r1]
   859cc:	3604      	adds	r6, #4
   859ce:	45ac      	cmp	ip, r5
   859d0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   859d4:	4650      	mov	r0, sl
   859d6:	db11      	blt.n	859fc <_vfiprintf_r+0x404>
   859d8:	4662      	mov	r2, ip
   859da:	4629      	mov	r1, r5
   859dc:	f8cd c000 	str.w	ip, [sp]
   859e0:	f002 fa7c 	bl	87edc <memchr>
   859e4:	f8dd c000 	ldr.w	ip, [sp]
   859e8:	2800      	cmp	r0, #0
   859ea:	f000 80d6 	beq.w	85b9a <_vfiprintf_r+0x5a2>
   859ee:	ebca 0400 	rsb	r4, sl, r0
   859f2:	4564      	cmp	r4, ip
   859f4:	f340 80d3 	ble.w	85b9e <_vfiprintf_r+0x5a6>
   859f8:	4664      	mov	r4, ip
   859fa:	e0d0      	b.n	85b9e <_vfiprintf_r+0x5a6>
   859fc:	f7fe fbd8 	bl	841b0 <strlen>
   85a00:	4604      	mov	r4, r0
   85a02:	e0cc      	b.n	85b9e <_vfiprintf_r+0x5a6>
   85a04:	f047 0710 	orr.w	r7, r7, #16
   85a08:	06bd      	lsls	r5, r7, #26
   85a0a:	d506      	bpl.n	85a1a <_vfiprintf_r+0x422>
   85a0c:	1df0      	adds	r0, r6, #7
   85a0e:	f020 0407 	bic.w	r4, r0, #7
   85a12:	f104 0608 	add.w	r6, r4, #8
   85a16:	cc30      	ldmia	r4, {r4, r5}
   85a18:	e00c      	b.n	85a34 <_vfiprintf_r+0x43c>
   85a1a:	f017 0f10 	tst.w	r7, #16
   85a1e:	f106 0304 	add.w	r3, r6, #4
   85a22:	d103      	bne.n	85a2c <_vfiprintf_r+0x434>
   85a24:	067c      	lsls	r4, r7, #25
   85a26:	d501      	bpl.n	85a2c <_vfiprintf_r+0x434>
   85a28:	8834      	ldrh	r4, [r6, #0]
   85a2a:	e001      	b.n	85a30 <_vfiprintf_r+0x438>
   85a2c:	6835      	ldr	r5, [r6, #0]
   85a2e:	462c      	mov	r4, r5
   85a30:	2500      	movs	r5, #0
   85a32:	461e      	mov	r6, r3
   85a34:	2001      	movs	r0, #1
   85a36:	e023      	b.n	85a80 <_vfiprintf_r+0x488>
   85a38:	06b8      	lsls	r0, r7, #26
   85a3a:	d507      	bpl.n	85a4c <_vfiprintf_r+0x454>
   85a3c:	1df4      	adds	r4, r6, #7
   85a3e:	f024 0107 	bic.w	r1, r4, #7
   85a42:	f101 0608 	add.w	r6, r1, #8
   85a46:	e9d1 4500 	ldrd	r4, r5, [r1]
   85a4a:	e00c      	b.n	85a66 <_vfiprintf_r+0x46e>
   85a4c:	f017 0f10 	tst.w	r7, #16
   85a50:	f106 0004 	add.w	r0, r6, #4
   85a54:	d103      	bne.n	85a5e <_vfiprintf_r+0x466>
   85a56:	0679      	lsls	r1, r7, #25
   85a58:	d501      	bpl.n	85a5e <_vfiprintf_r+0x466>
   85a5a:	8834      	ldrh	r4, [r6, #0]
   85a5c:	e001      	b.n	85a62 <_vfiprintf_r+0x46a>
   85a5e:	6836      	ldr	r6, [r6, #0]
   85a60:	4634      	mov	r4, r6
   85a62:	2500      	movs	r5, #0
   85a64:	4606      	mov	r6, r0
   85a66:	07fa      	lsls	r2, r7, #31
   85a68:	d509      	bpl.n	85a7e <_vfiprintf_r+0x486>
   85a6a:	ea54 0205 	orrs.w	r2, r4, r5
   85a6e:	d006      	beq.n	85a7e <_vfiprintf_r+0x486>
   85a70:	2230      	movs	r2, #48	; 0x30
   85a72:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   85a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   85a7a:	f047 0702 	orr.w	r7, r7, #2
   85a7e:	2002      	movs	r0, #2
   85a80:	2100      	movs	r1, #0
   85a82:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   85a86:	e004      	b.n	85a92 <_vfiprintf_r+0x49a>
   85a88:	0008a7ac 	.word	0x0008a7ac
   85a8c:	0008a7bd 	.word	0x0008a7bd
   85a90:	2001      	movs	r0, #1
   85a92:	f1bc 0f00 	cmp.w	ip, #0
   85a96:	bfa8      	it	ge
   85a98:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   85a9c:	ea54 0105 	orrs.w	r1, r4, r5
   85aa0:	d102      	bne.n	85aa8 <_vfiprintf_r+0x4b0>
   85aa2:	f1bc 0f00 	cmp.w	ip, #0
   85aa6:	d05a      	beq.n	85b5e <_vfiprintf_r+0x566>
   85aa8:	2801      	cmp	r0, #1
   85aaa:	d01d      	beq.n	85ae8 <_vfiprintf_r+0x4f0>
   85aac:	2802      	cmp	r0, #2
   85aae:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   85ab2:	d043      	beq.n	85b3c <_vfiprintf_r+0x544>
   85ab4:	f004 0207 	and.w	r2, r4, #7
   85ab8:	08e4      	lsrs	r4, r4, #3
   85aba:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   85abe:	08e9      	lsrs	r1, r5, #3
   85ac0:	4604      	mov	r4, r0
   85ac2:	460d      	mov	r5, r1
   85ac4:	3230      	adds	r2, #48	; 0x30
   85ac6:	ea54 0105 	orrs.w	r1, r4, r5
   85aca:	469a      	mov	sl, r3
   85acc:	701a      	strb	r2, [r3, #0]
   85ace:	f103 33ff 	add.w	r3, r3, #4294967295
   85ad2:	d1ef      	bne.n	85ab4 <_vfiprintf_r+0x4bc>
   85ad4:	07f8      	lsls	r0, r7, #31
   85ad6:	4655      	mov	r5, sl
   85ad8:	d54c      	bpl.n	85b74 <_vfiprintf_r+0x57c>
   85ada:	2a30      	cmp	r2, #48	; 0x30
   85adc:	d04a      	beq.n	85b74 <_vfiprintf_r+0x57c>
   85ade:	2230      	movs	r2, #48	; 0x30
   85ae0:	469a      	mov	sl, r3
   85ae2:	f805 2c01 	strb.w	r2, [r5, #-1]
   85ae6:	e045      	b.n	85b74 <_vfiprintf_r+0x57c>
   85ae8:	2d00      	cmp	r5, #0
   85aea:	bf08      	it	eq
   85aec:	2c0a      	cmpeq	r4, #10
   85aee:	d205      	bcs.n	85afc <_vfiprintf_r+0x504>
   85af0:	3430      	adds	r4, #48	; 0x30
   85af2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   85af6:	f80a 4f27 	strb.w	r4, [sl, #39]!
   85afa:	e03b      	b.n	85b74 <_vfiprintf_r+0x57c>
   85afc:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   85b00:	9303      	str	r3, [sp, #12]
   85b02:	4620      	mov	r0, r4
   85b04:	4629      	mov	r1, r5
   85b06:	220a      	movs	r2, #10
   85b08:	2300      	movs	r3, #0
   85b0a:	f8cd c000 	str.w	ip, [sp]
   85b0e:	f004 fae3 	bl	8a0d8 <__aeabi_uldivmod>
   85b12:	9803      	ldr	r0, [sp, #12]
   85b14:	3230      	adds	r2, #48	; 0x30
   85b16:	f800 2901 	strb.w	r2, [r0], #-1
   85b1a:	4629      	mov	r1, r5
   85b1c:	220a      	movs	r2, #10
   85b1e:	2300      	movs	r3, #0
   85b20:	f8dd a00c 	ldr.w	sl, [sp, #12]
   85b24:	9003      	str	r0, [sp, #12]
   85b26:	4620      	mov	r0, r4
   85b28:	f004 fad6 	bl	8a0d8 <__aeabi_uldivmod>
   85b2c:	4604      	mov	r4, r0
   85b2e:	460d      	mov	r5, r1
   85b30:	ea54 0105 	orrs.w	r1, r4, r5
   85b34:	f8dd c000 	ldr.w	ip, [sp]
   85b38:	d1e3      	bne.n	85b02 <_vfiprintf_r+0x50a>
   85b3a:	e01b      	b.n	85b74 <_vfiprintf_r+0x57c>
   85b3c:	9905      	ldr	r1, [sp, #20]
   85b3e:	f004 000f 	and.w	r0, r4, #15
   85b42:	0924      	lsrs	r4, r4, #4
   85b44:	5c0a      	ldrb	r2, [r1, r0]
   85b46:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   85b4a:	0929      	lsrs	r1, r5, #4
   85b4c:	4604      	mov	r4, r0
   85b4e:	460d      	mov	r5, r1
   85b50:	469a      	mov	sl, r3
   85b52:	f803 2901 	strb.w	r2, [r3], #-1
   85b56:	ea54 0205 	orrs.w	r2, r4, r5
   85b5a:	d1ef      	bne.n	85b3c <_vfiprintf_r+0x544>
   85b5c:	e00a      	b.n	85b74 <_vfiprintf_r+0x57c>
   85b5e:	b938      	cbnz	r0, 85b70 <_vfiprintf_r+0x578>
   85b60:	07f9      	lsls	r1, r7, #31
   85b62:	d505      	bpl.n	85b70 <_vfiprintf_r+0x578>
   85b64:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   85b68:	2030      	movs	r0, #48	; 0x30
   85b6a:	f80a 0f27 	strb.w	r0, [sl, #39]!
   85b6e:	e001      	b.n	85b74 <_vfiprintf_r+0x57c>
   85b70:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   85b74:	ad18      	add	r5, sp, #96	; 0x60
   85b76:	ebca 0405 	rsb	r4, sl, r5
   85b7a:	4665      	mov	r5, ip
   85b7c:	e00f      	b.n	85b9e <_vfiprintf_r+0x5a6>
   85b7e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   85b82:	2b00      	cmp	r3, #0
   85b84:	f000 8176 	beq.w	85e74 <_vfiprintf_r+0x87c>
   85b88:	2500      	movs	r5, #0
   85b8a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   85b8e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   85b92:	2401      	movs	r4, #1
   85b94:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   85b98:	e001      	b.n	85b9e <_vfiprintf_r+0x5a6>
   85b9a:	4664      	mov	r4, ip
   85b9c:	4605      	mov	r5, r0
   85b9e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   85ba2:	42ac      	cmp	r4, r5
   85ba4:	bfac      	ite	ge
   85ba6:	4621      	movge	r1, r4
   85ba8:	4629      	movlt	r1, r5
   85baa:	9103      	str	r1, [sp, #12]
   85bac:	b113      	cbz	r3, 85bb4 <_vfiprintf_r+0x5bc>
   85bae:	9803      	ldr	r0, [sp, #12]
   85bb0:	1c42      	adds	r2, r0, #1
   85bb2:	9203      	str	r2, [sp, #12]
   85bb4:	f017 0102 	ands.w	r1, r7, #2
   85bb8:	9106      	str	r1, [sp, #24]
   85bba:	d002      	beq.n	85bc2 <_vfiprintf_r+0x5ca>
   85bbc:	9b03      	ldr	r3, [sp, #12]
   85bbe:	1c98      	adds	r0, r3, #2
   85bc0:	9003      	str	r0, [sp, #12]
   85bc2:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   85bc6:	9207      	str	r2, [sp, #28]
   85bc8:	d13c      	bne.n	85c44 <_vfiprintf_r+0x64c>
   85bca:	9904      	ldr	r1, [sp, #16]
   85bcc:	9b03      	ldr	r3, [sp, #12]
   85bce:	1acb      	subs	r3, r1, r3
   85bd0:	2b00      	cmp	r3, #0
   85bd2:	dd37      	ble.n	85c44 <_vfiprintf_r+0x64c>
   85bd4:	48a5      	ldr	r0, [pc, #660]	; (85e6c <_vfiprintf_r+0x874>)
   85bd6:	2b10      	cmp	r3, #16
   85bd8:	f8c8 0000 	str.w	r0, [r8]
   85bdc:	dd1b      	ble.n	85c16 <_vfiprintf_r+0x61e>
   85bde:	990c      	ldr	r1, [sp, #48]	; 0x30
   85be0:	2210      	movs	r2, #16
   85be2:	980d      	ldr	r0, [sp, #52]	; 0x34
   85be4:	f8c8 2004 	str.w	r2, [r8, #4]
   85be8:	1c4a      	adds	r2, r1, #1
   85bea:	3010      	adds	r0, #16
   85bec:	2a07      	cmp	r2, #7
   85bee:	900d      	str	r0, [sp, #52]	; 0x34
   85bf0:	920c      	str	r2, [sp, #48]	; 0x30
   85bf2:	dc02      	bgt.n	85bfa <_vfiprintf_r+0x602>
   85bf4:	f108 0808 	add.w	r8, r8, #8
   85bf8:	e00b      	b.n	85c12 <_vfiprintf_r+0x61a>
   85bfa:	4658      	mov	r0, fp
   85bfc:	4649      	mov	r1, r9
   85bfe:	aa0b      	add	r2, sp, #44	; 0x2c
   85c00:	9300      	str	r3, [sp, #0]
   85c02:	f7ff fcc5 	bl	85590 <__sprint_r>
   85c06:	9b00      	ldr	r3, [sp, #0]
   85c08:	2800      	cmp	r0, #0
   85c0a:	f040 813a 	bne.w	85e82 <_vfiprintf_r+0x88a>
   85c0e:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85c12:	3b10      	subs	r3, #16
   85c14:	e7de      	b.n	85bd4 <_vfiprintf_r+0x5dc>
   85c16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85c18:	f8c8 3004 	str.w	r3, [r8, #4]
   85c1c:	18d1      	adds	r1, r2, r3
   85c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85c20:	910d      	str	r1, [sp, #52]	; 0x34
   85c22:	1c58      	adds	r0, r3, #1
   85c24:	2807      	cmp	r0, #7
   85c26:	900c      	str	r0, [sp, #48]	; 0x30
   85c28:	dc02      	bgt.n	85c30 <_vfiprintf_r+0x638>
   85c2a:	f108 0808 	add.w	r8, r8, #8
   85c2e:	e009      	b.n	85c44 <_vfiprintf_r+0x64c>
   85c30:	4658      	mov	r0, fp
   85c32:	4649      	mov	r1, r9
   85c34:	aa0b      	add	r2, sp, #44	; 0x2c
   85c36:	f7ff fcab 	bl	85590 <__sprint_r>
   85c3a:	2800      	cmp	r0, #0
   85c3c:	f040 8121 	bne.w	85e82 <_vfiprintf_r+0x88a>
   85c40:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85c44:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   85c48:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   85c4c:	b1ca      	cbz	r2, 85c82 <_vfiprintf_r+0x68a>
   85c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85c50:	2301      	movs	r3, #1
   85c52:	980d      	ldr	r0, [sp, #52]	; 0x34
   85c54:	f8c8 3004 	str.w	r3, [r8, #4]
   85c58:	1c53      	adds	r3, r2, #1
   85c5a:	f8c8 1000 	str.w	r1, [r8]
   85c5e:	1c41      	adds	r1, r0, #1
   85c60:	2b07      	cmp	r3, #7
   85c62:	910d      	str	r1, [sp, #52]	; 0x34
   85c64:	930c      	str	r3, [sp, #48]	; 0x30
   85c66:	dc02      	bgt.n	85c6e <_vfiprintf_r+0x676>
   85c68:	f108 0808 	add.w	r8, r8, #8
   85c6c:	e009      	b.n	85c82 <_vfiprintf_r+0x68a>
   85c6e:	4658      	mov	r0, fp
   85c70:	4649      	mov	r1, r9
   85c72:	aa0b      	add	r2, sp, #44	; 0x2c
   85c74:	f7ff fc8c 	bl	85590 <__sprint_r>
   85c78:	2800      	cmp	r0, #0
   85c7a:	f040 8102 	bne.w	85e82 <_vfiprintf_r+0x88a>
   85c7e:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85c82:	9806      	ldr	r0, [sp, #24]
   85c84:	b1d0      	cbz	r0, 85cbc <_vfiprintf_r+0x6c4>
   85c86:	a90a      	add	r1, sp, #40	; 0x28
   85c88:	f8c8 1000 	str.w	r1, [r8]
   85c8c:	990c      	ldr	r1, [sp, #48]	; 0x30
   85c8e:	2202      	movs	r2, #2
   85c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85c92:	f8c8 2004 	str.w	r2, [r8, #4]
   85c96:	1c4a      	adds	r2, r1, #1
   85c98:	1c98      	adds	r0, r3, #2
   85c9a:	2a07      	cmp	r2, #7
   85c9c:	900d      	str	r0, [sp, #52]	; 0x34
   85c9e:	920c      	str	r2, [sp, #48]	; 0x30
   85ca0:	dc02      	bgt.n	85ca8 <_vfiprintf_r+0x6b0>
   85ca2:	f108 0808 	add.w	r8, r8, #8
   85ca6:	e009      	b.n	85cbc <_vfiprintf_r+0x6c4>
   85ca8:	4658      	mov	r0, fp
   85caa:	4649      	mov	r1, r9
   85cac:	aa0b      	add	r2, sp, #44	; 0x2c
   85cae:	f7ff fc6f 	bl	85590 <__sprint_r>
   85cb2:	2800      	cmp	r0, #0
   85cb4:	f040 80e5 	bne.w	85e82 <_vfiprintf_r+0x88a>
   85cb8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85cbc:	9b07      	ldr	r3, [sp, #28]
   85cbe:	2b80      	cmp	r3, #128	; 0x80
   85cc0:	d13c      	bne.n	85d3c <_vfiprintf_r+0x744>
   85cc2:	9804      	ldr	r0, [sp, #16]
   85cc4:	9903      	ldr	r1, [sp, #12]
   85cc6:	1a43      	subs	r3, r0, r1
   85cc8:	2b00      	cmp	r3, #0
   85cca:	dd37      	ble.n	85d3c <_vfiprintf_r+0x744>
   85ccc:	4a68      	ldr	r2, [pc, #416]	; (85e70 <_vfiprintf_r+0x878>)
   85cce:	2b10      	cmp	r3, #16
   85cd0:	f8c8 2000 	str.w	r2, [r8]
   85cd4:	dd1b      	ble.n	85d0e <_vfiprintf_r+0x716>
   85cd6:	980c      	ldr	r0, [sp, #48]	; 0x30
   85cd8:	2110      	movs	r1, #16
   85cda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85cdc:	f8c8 1004 	str.w	r1, [r8, #4]
   85ce0:	1c41      	adds	r1, r0, #1
   85ce2:	3210      	adds	r2, #16
   85ce4:	2907      	cmp	r1, #7
   85ce6:	920d      	str	r2, [sp, #52]	; 0x34
   85ce8:	910c      	str	r1, [sp, #48]	; 0x30
   85cea:	dc02      	bgt.n	85cf2 <_vfiprintf_r+0x6fa>
   85cec:	f108 0808 	add.w	r8, r8, #8
   85cf0:	e00b      	b.n	85d0a <_vfiprintf_r+0x712>
   85cf2:	4658      	mov	r0, fp
   85cf4:	4649      	mov	r1, r9
   85cf6:	aa0b      	add	r2, sp, #44	; 0x2c
   85cf8:	9300      	str	r3, [sp, #0]
   85cfa:	f7ff fc49 	bl	85590 <__sprint_r>
   85cfe:	9b00      	ldr	r3, [sp, #0]
   85d00:	2800      	cmp	r0, #0
   85d02:	f040 80be 	bne.w	85e82 <_vfiprintf_r+0x88a>
   85d06:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85d0a:	3b10      	subs	r3, #16
   85d0c:	e7de      	b.n	85ccc <_vfiprintf_r+0x6d4>
   85d0e:	990c      	ldr	r1, [sp, #48]	; 0x30
   85d10:	980d      	ldr	r0, [sp, #52]	; 0x34
   85d12:	1c4a      	adds	r2, r1, #1
   85d14:	f8c8 3004 	str.w	r3, [r8, #4]
   85d18:	2a07      	cmp	r2, #7
   85d1a:	4403      	add	r3, r0
   85d1c:	930d      	str	r3, [sp, #52]	; 0x34
   85d1e:	920c      	str	r2, [sp, #48]	; 0x30
   85d20:	dc02      	bgt.n	85d28 <_vfiprintf_r+0x730>
   85d22:	f108 0808 	add.w	r8, r8, #8
   85d26:	e009      	b.n	85d3c <_vfiprintf_r+0x744>
   85d28:	4658      	mov	r0, fp
   85d2a:	4649      	mov	r1, r9
   85d2c:	aa0b      	add	r2, sp, #44	; 0x2c
   85d2e:	f7ff fc2f 	bl	85590 <__sprint_r>
   85d32:	2800      	cmp	r0, #0
   85d34:	f040 80a5 	bne.w	85e82 <_vfiprintf_r+0x88a>
   85d38:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85d3c:	1b2d      	subs	r5, r5, r4
   85d3e:	2d00      	cmp	r5, #0
   85d40:	dd34      	ble.n	85dac <_vfiprintf_r+0x7b4>
   85d42:	484b      	ldr	r0, [pc, #300]	; (85e70 <_vfiprintf_r+0x878>)
   85d44:	2d10      	cmp	r5, #16
   85d46:	f8c8 0000 	str.w	r0, [r8]
   85d4a:	dd19      	ble.n	85d80 <_vfiprintf_r+0x788>
   85d4c:	980c      	ldr	r0, [sp, #48]	; 0x30
   85d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85d50:	1c43      	adds	r3, r0, #1
   85d52:	2110      	movs	r1, #16
   85d54:	3210      	adds	r2, #16
   85d56:	2b07      	cmp	r3, #7
   85d58:	f8c8 1004 	str.w	r1, [r8, #4]
   85d5c:	920d      	str	r2, [sp, #52]	; 0x34
   85d5e:	930c      	str	r3, [sp, #48]	; 0x30
   85d60:	dc02      	bgt.n	85d68 <_vfiprintf_r+0x770>
   85d62:	f108 0808 	add.w	r8, r8, #8
   85d66:	e009      	b.n	85d7c <_vfiprintf_r+0x784>
   85d68:	4658      	mov	r0, fp
   85d6a:	4649      	mov	r1, r9
   85d6c:	aa0b      	add	r2, sp, #44	; 0x2c
   85d6e:	f7ff fc0f 	bl	85590 <__sprint_r>
   85d72:	2800      	cmp	r0, #0
   85d74:	f040 8085 	bne.w	85e82 <_vfiprintf_r+0x88a>
   85d78:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85d7c:	3d10      	subs	r5, #16
   85d7e:	e7e0      	b.n	85d42 <_vfiprintf_r+0x74a>
   85d80:	990c      	ldr	r1, [sp, #48]	; 0x30
   85d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85d84:	1c4a      	adds	r2, r1, #1
   85d86:	f8c8 5004 	str.w	r5, [r8, #4]
   85d8a:	2a07      	cmp	r2, #7
   85d8c:	441d      	add	r5, r3
   85d8e:	950d      	str	r5, [sp, #52]	; 0x34
   85d90:	920c      	str	r2, [sp, #48]	; 0x30
   85d92:	dc02      	bgt.n	85d9a <_vfiprintf_r+0x7a2>
   85d94:	f108 0808 	add.w	r8, r8, #8
   85d98:	e008      	b.n	85dac <_vfiprintf_r+0x7b4>
   85d9a:	4658      	mov	r0, fp
   85d9c:	4649      	mov	r1, r9
   85d9e:	aa0b      	add	r2, sp, #44	; 0x2c
   85da0:	f7ff fbf6 	bl	85590 <__sprint_r>
   85da4:	2800      	cmp	r0, #0
   85da6:	d16c      	bne.n	85e82 <_vfiprintf_r+0x88a>
   85da8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85dae:	980d      	ldr	r0, [sp, #52]	; 0x34
   85db0:	1c59      	adds	r1, r3, #1
   85db2:	f8c8 4004 	str.w	r4, [r8, #4]
   85db6:	2907      	cmp	r1, #7
   85db8:	4404      	add	r4, r0
   85dba:	f8c8 a000 	str.w	sl, [r8]
   85dbe:	940d      	str	r4, [sp, #52]	; 0x34
   85dc0:	910c      	str	r1, [sp, #48]	; 0x30
   85dc2:	dc02      	bgt.n	85dca <_vfiprintf_r+0x7d2>
   85dc4:	f108 0308 	add.w	r3, r8, #8
   85dc8:	e007      	b.n	85dda <_vfiprintf_r+0x7e2>
   85dca:	4658      	mov	r0, fp
   85dcc:	4649      	mov	r1, r9
   85dce:	aa0b      	add	r2, sp, #44	; 0x2c
   85dd0:	f7ff fbde 	bl	85590 <__sprint_r>
   85dd4:	2800      	cmp	r0, #0
   85dd6:	d154      	bne.n	85e82 <_vfiprintf_r+0x88a>
   85dd8:	ab32      	add	r3, sp, #200	; 0xc8
   85dda:	077a      	lsls	r2, r7, #29
   85ddc:	d40b      	bmi.n	85df6 <_vfiprintf_r+0x7fe>
   85dde:	9802      	ldr	r0, [sp, #8]
   85de0:	9b03      	ldr	r3, [sp, #12]
   85de2:	9904      	ldr	r1, [sp, #16]
   85de4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85de6:	428b      	cmp	r3, r1
   85de8:	bfac      	ite	ge
   85dea:	18c0      	addge	r0, r0, r3
   85dec:	1840      	addlt	r0, r0, r1
   85dee:	9002      	str	r0, [sp, #8]
   85df0:	2a00      	cmp	r2, #0
   85df2:	d036      	beq.n	85e62 <_vfiprintf_r+0x86a>
   85df4:	e02f      	b.n	85e56 <_vfiprintf_r+0x85e>
   85df6:	9c04      	ldr	r4, [sp, #16]
   85df8:	9a03      	ldr	r2, [sp, #12]
   85dfa:	1aa4      	subs	r4, r4, r2
   85dfc:	2c00      	cmp	r4, #0
   85dfe:	ddee      	ble.n	85dde <_vfiprintf_r+0x7e6>
   85e00:	481a      	ldr	r0, [pc, #104]	; (85e6c <_vfiprintf_r+0x874>)
   85e02:	2c10      	cmp	r4, #16
   85e04:	6018      	str	r0, [r3, #0]
   85e06:	dd15      	ble.n	85e34 <_vfiprintf_r+0x83c>
   85e08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85e0a:	2010      	movs	r0, #16
   85e0c:	990d      	ldr	r1, [sp, #52]	; 0x34
   85e0e:	6058      	str	r0, [r3, #4]
   85e10:	1c50      	adds	r0, r2, #1
   85e12:	3110      	adds	r1, #16
   85e14:	2807      	cmp	r0, #7
   85e16:	910d      	str	r1, [sp, #52]	; 0x34
   85e18:	900c      	str	r0, [sp, #48]	; 0x30
   85e1a:	dc01      	bgt.n	85e20 <_vfiprintf_r+0x828>
   85e1c:	3308      	adds	r3, #8
   85e1e:	e007      	b.n	85e30 <_vfiprintf_r+0x838>
   85e20:	4658      	mov	r0, fp
   85e22:	4649      	mov	r1, r9
   85e24:	aa0b      	add	r2, sp, #44	; 0x2c
   85e26:	f7ff fbb3 	bl	85590 <__sprint_r>
   85e2a:	2800      	cmp	r0, #0
   85e2c:	d129      	bne.n	85e82 <_vfiprintf_r+0x88a>
   85e2e:	ab32      	add	r3, sp, #200	; 0xc8
   85e30:	3c10      	subs	r4, #16
   85e32:	e7e5      	b.n	85e00 <_vfiprintf_r+0x808>
   85e34:	990c      	ldr	r1, [sp, #48]	; 0x30
   85e36:	605c      	str	r4, [r3, #4]
   85e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85e3a:	1c4a      	adds	r2, r1, #1
   85e3c:	191c      	adds	r4, r3, r4
   85e3e:	2a07      	cmp	r2, #7
   85e40:	940d      	str	r4, [sp, #52]	; 0x34
   85e42:	920c      	str	r2, [sp, #48]	; 0x30
   85e44:	ddcb      	ble.n	85dde <_vfiprintf_r+0x7e6>
   85e46:	4658      	mov	r0, fp
   85e48:	4649      	mov	r1, r9
   85e4a:	aa0b      	add	r2, sp, #44	; 0x2c
   85e4c:	f7ff fba0 	bl	85590 <__sprint_r>
   85e50:	2800      	cmp	r0, #0
   85e52:	d0c4      	beq.n	85dde <_vfiprintf_r+0x7e6>
   85e54:	e015      	b.n	85e82 <_vfiprintf_r+0x88a>
   85e56:	4658      	mov	r0, fp
   85e58:	4649      	mov	r1, r9
   85e5a:	aa0b      	add	r2, sp, #44	; 0x2c
   85e5c:	f7ff fb98 	bl	85590 <__sprint_r>
   85e60:	b978      	cbnz	r0, 85e82 <_vfiprintf_r+0x88a>
   85e62:	2500      	movs	r5, #0
   85e64:	950c      	str	r5, [sp, #48]	; 0x30
   85e66:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85e6a:	e444      	b.n	856f6 <_vfiprintf_r+0xfe>
   85e6c:	0008a7ce 	.word	0x0008a7ce
   85e70:	0008a7de 	.word	0x0008a7de
   85e74:	980d      	ldr	r0, [sp, #52]	; 0x34
   85e76:	b120      	cbz	r0, 85e82 <_vfiprintf_r+0x88a>
   85e78:	4658      	mov	r0, fp
   85e7a:	4649      	mov	r1, r9
   85e7c:	aa0b      	add	r2, sp, #44	; 0x2c
   85e7e:	f7ff fb87 	bl	85590 <__sprint_r>
   85e82:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   85e86:	f001 0240 	and.w	r2, r1, #64	; 0x40
   85e8a:	b213      	sxth	r3, r2
   85e8c:	2b00      	cmp	r3, #0
   85e8e:	f47f abe6 	bne.w	8565e <_vfiprintf_r+0x66>
   85e92:	9802      	ldr	r0, [sp, #8]
   85e94:	b033      	add	sp, #204	; 0xcc
   85e96:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   85e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085e9e <vfiprintf>:
   85e9e:	b530      	push	{r4, r5, lr}
   85ea0:	4613      	mov	r3, r2
   85ea2:	4a05      	ldr	r2, [pc, #20]	; (85eb8 <vfiprintf+0x1a>)
   85ea4:	4605      	mov	r5, r0
   85ea6:	460c      	mov	r4, r1
   85ea8:	6810      	ldr	r0, [r2, #0]
   85eaa:	4629      	mov	r1, r5
   85eac:	4622      	mov	r2, r4
   85eae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85eb2:	f7ff bba1 	b.w	855f8 <_vfiprintf_r>
   85eb6:	bf00      	nop
   85eb8:	20070010 	.word	0x20070010

00085ebc <__svfscanf_r>:
   85ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85ec0:	460c      	mov	r4, r1
   85ec2:	b0d9      	sub	sp, #356	; 0x164
   85ec4:	4680      	mov	r8, r0
   85ec6:	4616      	mov	r6, r2
   85ec8:	461d      	mov	r5, r3
   85eca:	f000 fe0f 	bl	86aec <__sfp_lock_acquire>
   85ece:	89a3      	ldrh	r3, [r4, #12]
   85ed0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   85ed4:	b210      	sxth	r0, r2
   85ed6:	b930      	cbnz	r0, 85ee6 <__svfscanf_r+0x2a>
   85ed8:	6e67      	ldr	r7, [r4, #100]	; 0x64
   85eda:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   85ede:	f427 5300 	bic.w	r3, r7, #8192	; 0x2000
   85ee2:	81a1      	strh	r1, [r4, #12]
   85ee4:	6663      	str	r3, [r4, #100]	; 0x64
   85ee6:	9607      	str	r6, [sp, #28]
   85ee8:	2600      	movs	r6, #0
   85eea:	9605      	str	r6, [sp, #20]
   85eec:	9602      	str	r6, [sp, #8]
   85eee:	9604      	str	r6, [sp, #16]
   85ef0:	9f07      	ldr	r7, [sp, #28]
   85ef2:	f817 2b01 	ldrb.w	r2, [r7], #1
   85ef6:	9707      	str	r7, [sp, #28]
   85ef8:	9209      	str	r2, [sp, #36]	; 0x24
   85efa:	2a00      	cmp	r2, #0
   85efc:	f000 83ab 	beq.w	86656 <__svfscanf_r+0x79a>
   85f00:	489f      	ldr	r0, [pc, #636]	; (86180 <__svfscanf_r+0x2c4>)
   85f02:	6801      	ldr	r1, [r0, #0]
   85f04:	188f      	adds	r7, r1, r2
   85f06:	f897 b001 	ldrb.w	fp, [r7, #1]
   85f0a:	f00b 0b08 	and.w	fp, fp, #8
   85f0e:	fa5f f38b 	uxtb.w	r3, fp
   85f12:	b1db      	cbz	r3, 85f4c <__svfscanf_r+0x90>
   85f14:	6867      	ldr	r7, [r4, #4]
   85f16:	2f00      	cmp	r7, #0
   85f18:	dd11      	ble.n	85f3e <__svfscanf_r+0x82>
   85f1a:	4999      	ldr	r1, [pc, #612]	; (86180 <__svfscanf_r+0x2c4>)
   85f1c:	6823      	ldr	r3, [r4, #0]
   85f1e:	6808      	ldr	r0, [r1, #0]
   85f20:	781a      	ldrb	r2, [r3, #0]
   85f22:	1887      	adds	r7, r0, r2
   85f24:	787a      	ldrb	r2, [r7, #1]
   85f26:	f002 0108 	and.w	r1, r2, #8
   85f2a:	b2c8      	uxtb	r0, r1
   85f2c:	2800      	cmp	r0, #0
   85f2e:	d0df      	beq.n	85ef0 <__svfscanf_r+0x34>
   85f30:	6867      	ldr	r7, [r4, #4]
   85f32:	3301      	adds	r3, #1
   85f34:	1e7a      	subs	r2, r7, #1
   85f36:	3601      	adds	r6, #1
   85f38:	6062      	str	r2, [r4, #4]
   85f3a:	6023      	str	r3, [r4, #0]
   85f3c:	e7ea      	b.n	85f14 <__svfscanf_r+0x58>
   85f3e:	4640      	mov	r0, r8
   85f40:	4621      	mov	r1, r4
   85f42:	f002 fd5c 	bl	889fe <__srefill_r>
   85f46:	2800      	cmp	r0, #0
   85f48:	d0e7      	beq.n	85f1a <__svfscanf_r+0x5e>
   85f4a:	e7d1      	b.n	85ef0 <__svfscanf_r+0x34>
   85f4c:	2a25      	cmp	r2, #37	; 0x25
   85f4e:	d151      	bne.n	85ff4 <__svfscanf_r+0x138>
   85f50:	9a07      	ldr	r2, [sp, #28]
   85f52:	469b      	mov	fp, r3
   85f54:	469a      	mov	sl, r3
   85f56:	9f07      	ldr	r7, [sp, #28]
   85f58:	f817 0b01 	ldrb.w	r0, [r7], #1
   85f5c:	2864      	cmp	r0, #100	; 0x64
   85f5e:	9707      	str	r7, [sp, #28]
   85f60:	f000 80be 	beq.w	860e0 <__svfscanf_r+0x224>
   85f64:	d827      	bhi.n	85fb6 <__svfscanf_r+0xfa>
   85f66:	284c      	cmp	r0, #76	; 0x4c
   85f68:	d069      	beq.n	8603e <__svfscanf_r+0x182>
   85f6a:	d811      	bhi.n	85f90 <__svfscanf_r+0xd4>
   85f6c:	2839      	cmp	r0, #57	; 0x39
   85f6e:	d80b      	bhi.n	85f88 <__svfscanf_r+0xcc>
   85f70:	2830      	cmp	r0, #48	; 0x30
   85f72:	d267      	bcs.n	86044 <__svfscanf_r+0x188>
   85f74:	2825      	cmp	r0, #37	; 0x25
   85f76:	d03d      	beq.n	85ff4 <__svfscanf_r+0x138>
   85f78:	282a      	cmp	r0, #42	; 0x2a
   85f7a:	d054      	beq.n	86026 <__svfscanf_r+0x16a>
   85f7c:	2800      	cmp	r0, #0
   85f7e:	f040 80a2 	bne.w	860c6 <__svfscanf_r+0x20a>
   85f82:	f000 fdb4 	bl	86aee <__sfp_lock_release>
   85f86:	e35c      	b.n	86642 <__svfscanf_r+0x786>
   85f88:	2844      	cmp	r0, #68	; 0x44
   85f8a:	f040 809c 	bne.w	860c6 <__svfscanf_r+0x20a>
   85f8e:	e0a0      	b.n	860d2 <__svfscanf_r+0x216>
   85f90:	2858      	cmp	r0, #88	; 0x58
   85f92:	d063      	beq.n	8605c <__svfscanf_r+0x1a0>
   85f94:	d805      	bhi.n	85fa2 <__svfscanf_r+0xe6>
   85f96:	284f      	cmp	r0, #79	; 0x4f
   85f98:	f040 8095 	bne.w	860c6 <__svfscanf_r+0x20a>
   85f9c:	f04b 0b01 	orr.w	fp, fp, #1
   85fa0:	e056      	b.n	86050 <__svfscanf_r+0x194>
   85fa2:	285b      	cmp	r0, #91	; 0x5b
   85fa4:	d060      	beq.n	86068 <__svfscanf_r+0x1ac>
   85fa6:	2863      	cmp	r0, #99	; 0x63
   85fa8:	f040 808d 	bne.w	860c6 <__svfscanf_r+0x20a>
   85fac:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   85fb0:	f04f 0900 	mov.w	r9, #0
   85fb4:	e09a      	b.n	860ec <__svfscanf_r+0x230>
   85fb6:	286f      	cmp	r0, #111	; 0x6f
   85fb8:	d04a      	beq.n	86050 <__svfscanf_r+0x194>
   85fba:	d80e      	bhi.n	85fda <__svfscanf_r+0x11e>
   85fbc:	2869      	cmp	r0, #105	; 0x69
   85fbe:	f000 808b 	beq.w	860d8 <__svfscanf_r+0x21c>
   85fc2:	d805      	bhi.n	85fd0 <__svfscanf_r+0x114>
   85fc4:	2868      	cmp	r0, #104	; 0x68
   85fc6:	d17e      	bne.n	860c6 <__svfscanf_r+0x20a>
   85fc8:	f04b 0b04 	orr.w	fp, fp, #4
   85fcc:	9a07      	ldr	r2, [sp, #28]
   85fce:	e7c2      	b.n	85f56 <__svfscanf_r+0x9a>
   85fd0:	286c      	cmp	r0, #108	; 0x6c
   85fd2:	d02b      	beq.n	8602c <__svfscanf_r+0x170>
   85fd4:	286e      	cmp	r0, #110	; 0x6e
   85fd6:	d176      	bne.n	860c6 <__svfscanf_r+0x20a>
   85fd8:	e054      	b.n	86084 <__svfscanf_r+0x1c8>
   85fda:	2873      	cmp	r0, #115	; 0x73
   85fdc:	d041      	beq.n	86062 <__svfscanf_r+0x1a6>
   85fde:	d804      	bhi.n	85fea <__svfscanf_r+0x12e>
   85fe0:	2870      	cmp	r0, #112	; 0x70
   85fe2:	d170      	bne.n	860c6 <__svfscanf_r+0x20a>
   85fe4:	f44b 7b08 	orr.w	fp, fp, #544	; 0x220
   85fe8:	e048      	b.n	8607c <__svfscanf_r+0x1c0>
   85fea:	2875      	cmp	r0, #117	; 0x75
   85fec:	d034      	beq.n	86058 <__svfscanf_r+0x19c>
   85fee:	2878      	cmp	r0, #120	; 0x78
   85ff0:	d169      	bne.n	860c6 <__svfscanf_r+0x20a>
   85ff2:	e033      	b.n	8605c <__svfscanf_r+0x1a0>
   85ff4:	6867      	ldr	r7, [r4, #4]
   85ff6:	2f00      	cmp	r7, #0
   85ff8:	dd0e      	ble.n	86018 <__svfscanf_r+0x15c>
   85ffa:	6823      	ldr	r3, [r4, #0]
   85ffc:	9f07      	ldr	r7, [sp, #28]
   85ffe:	7819      	ldrb	r1, [r3, #0]
   86000:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   86004:	4291      	cmp	r1, r2
   86006:	f040 8326 	bne.w	86656 <__svfscanf_r+0x79a>
   8600a:	6860      	ldr	r0, [r4, #4]
   8600c:	3301      	adds	r3, #1
   8600e:	1e47      	subs	r7, r0, #1
   86010:	6067      	str	r7, [r4, #4]
   86012:	6023      	str	r3, [r4, #0]
   86014:	3601      	adds	r6, #1
   86016:	e76b      	b.n	85ef0 <__svfscanf_r+0x34>
   86018:	4640      	mov	r0, r8
   8601a:	4621      	mov	r1, r4
   8601c:	f002 fcef 	bl	889fe <__srefill_r>
   86020:	2800      	cmp	r0, #0
   86022:	d0ea      	beq.n	85ffa <__svfscanf_r+0x13e>
   86024:	e309      	b.n	8663a <__svfscanf_r+0x77e>
   86026:	f04b 0b10 	orr.w	fp, fp, #16
   8602a:	e7cf      	b.n	85fcc <__svfscanf_r+0x110>
   8602c:	7853      	ldrb	r3, [r2, #1]
   8602e:	2b6c      	cmp	r3, #108	; 0x6c
   86030:	d102      	bne.n	86038 <__svfscanf_r+0x17c>
   86032:	3202      	adds	r2, #2
   86034:	9207      	str	r2, [sp, #28]
   86036:	e002      	b.n	8603e <__svfscanf_r+0x182>
   86038:	f04b 0b01 	orr.w	fp, fp, #1
   8603c:	e7c6      	b.n	85fcc <__svfscanf_r+0x110>
   8603e:	f04b 0b02 	orr.w	fp, fp, #2
   86042:	e7c3      	b.n	85fcc <__svfscanf_r+0x110>
   86044:	220a      	movs	r2, #10
   86046:	fb02 0a0a 	mla	sl, r2, sl, r0
   8604a:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   8604e:	e7bd      	b.n	85fcc <__svfscanf_r+0x110>
   86050:	484c      	ldr	r0, [pc, #304]	; (86184 <__svfscanf_r+0x2c8>)
   86052:	2708      	movs	r7, #8
   86054:	9005      	str	r0, [sp, #20]
   86056:	e046      	b.n	860e6 <__svfscanf_r+0x22a>
   86058:	4f4a      	ldr	r7, [pc, #296]	; (86184 <__svfscanf_r+0x2c8>)
   8605a:	e042      	b.n	860e2 <__svfscanf_r+0x226>
   8605c:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
   86060:	e00c      	b.n	8607c <__svfscanf_r+0x1c0>
   86062:	f04f 0902 	mov.w	r9, #2
   86066:	e041      	b.n	860ec <__svfscanf_r+0x230>
   86068:	a818      	add	r0, sp, #96	; 0x60
   8606a:	9907      	ldr	r1, [sp, #28]
   8606c:	f002 fd82 	bl	88b74 <__sccl>
   86070:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   86074:	9007      	str	r0, [sp, #28]
   86076:	f04f 0901 	mov.w	r9, #1
   8607a:	e037      	b.n	860ec <__svfscanf_r+0x230>
   8607c:	4a41      	ldr	r2, [pc, #260]	; (86184 <__svfscanf_r+0x2c8>)
   8607e:	2710      	movs	r7, #16
   86080:	9205      	str	r2, [sp, #20]
   86082:	e030      	b.n	860e6 <__svfscanf_r+0x22a>
   86084:	f01b 0f10 	tst.w	fp, #16
   86088:	f47f af32 	bne.w	85ef0 <__svfscanf_r+0x34>
   8608c:	f01b 0f04 	tst.w	fp, #4
   86090:	f105 0104 	add.w	r1, r5, #4
   86094:	d002      	beq.n	8609c <__svfscanf_r+0x1e0>
   86096:	682d      	ldr	r5, [r5, #0]
   86098:	802e      	strh	r6, [r5, #0]
   8609a:	e004      	b.n	860a6 <__svfscanf_r+0x1ea>
   8609c:	f01b 0f01 	tst.w	fp, #1
   860a0:	d003      	beq.n	860aa <__svfscanf_r+0x1ee>
   860a2:	682f      	ldr	r7, [r5, #0]
   860a4:	603e      	str	r6, [r7, #0]
   860a6:	460d      	mov	r5, r1
   860a8:	e722      	b.n	85ef0 <__svfscanf_r+0x34>
   860aa:	f01b 0f02 	tst.w	fp, #2
   860ae:	f105 0704 	add.w	r7, r5, #4
   860b2:	d004      	beq.n	860be <__svfscanf_r+0x202>
   860b4:	682a      	ldr	r2, [r5, #0]
   860b6:	17f0      	asrs	r0, r6, #31
   860b8:	6016      	str	r6, [r2, #0]
   860ba:	6050      	str	r0, [r2, #4]
   860bc:	e001      	b.n	860c2 <__svfscanf_r+0x206>
   860be:	682d      	ldr	r5, [r5, #0]
   860c0:	602e      	str	r6, [r5, #0]
   860c2:	463d      	mov	r5, r7
   860c4:	e714      	b.n	85ef0 <__svfscanf_r+0x34>
   860c6:	180f      	adds	r7, r1, r0
   860c8:	787b      	ldrb	r3, [r7, #1]
   860ca:	f003 0103 	and.w	r1, r3, #3
   860ce:	2901      	cmp	r1, #1
   860d0:	d106      	bne.n	860e0 <__svfscanf_r+0x224>
   860d2:	f04b 0b01 	orr.w	fp, fp, #1
   860d6:	e003      	b.n	860e0 <__svfscanf_r+0x224>
   860d8:	482b      	ldr	r0, [pc, #172]	; (86188 <__svfscanf_r+0x2cc>)
   860da:	2700      	movs	r7, #0
   860dc:	9005      	str	r0, [sp, #20]
   860de:	e002      	b.n	860e6 <__svfscanf_r+0x22a>
   860e0:	4f29      	ldr	r7, [pc, #164]	; (86188 <__svfscanf_r+0x2cc>)
   860e2:	9705      	str	r7, [sp, #20]
   860e4:	270a      	movs	r7, #10
   860e6:	9702      	str	r7, [sp, #8]
   860e8:	f04f 0903 	mov.w	r9, #3
   860ec:	6863      	ldr	r3, [r4, #4]
   860ee:	2b00      	cmp	r3, #0
   860f0:	dd03      	ble.n	860fa <__svfscanf_r+0x23e>
   860f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   860f6:	d122      	bne.n	8613e <__svfscanf_r+0x282>
   860f8:	e00e      	b.n	86118 <__svfscanf_r+0x25c>
   860fa:	4640      	mov	r0, r8
   860fc:	4621      	mov	r1, r4
   860fe:	f002 fc7e 	bl	889fe <__srefill_r>
   86102:	2800      	cmp	r0, #0
   86104:	d0f5      	beq.n	860f2 <__svfscanf_r+0x236>
   86106:	e298      	b.n	8663a <__svfscanf_r+0x77e>
   86108:	6863      	ldr	r3, [r4, #4]
   8610a:	3601      	adds	r6, #1
   8610c:	1e5a      	subs	r2, r3, #1
   8610e:	2a00      	cmp	r2, #0
   86110:	6062      	str	r2, [r4, #4]
   86112:	dd0d      	ble.n	86130 <__svfscanf_r+0x274>
   86114:	3001      	adds	r0, #1
   86116:	6020      	str	r0, [r4, #0]
   86118:	4919      	ldr	r1, [pc, #100]	; (86180 <__svfscanf_r+0x2c4>)
   8611a:	6820      	ldr	r0, [r4, #0]
   8611c:	680b      	ldr	r3, [r1, #0]
   8611e:	7802      	ldrb	r2, [r0, #0]
   86120:	189a      	adds	r2, r3, r2
   86122:	7851      	ldrb	r1, [r2, #1]
   86124:	f001 0308 	and.w	r3, r1, #8
   86128:	b2da      	uxtb	r2, r3
   8612a:	2a00      	cmp	r2, #0
   8612c:	d1ec      	bne.n	86108 <__svfscanf_r+0x24c>
   8612e:	e006      	b.n	8613e <__svfscanf_r+0x282>
   86130:	4640      	mov	r0, r8
   86132:	4621      	mov	r1, r4
   86134:	f002 fc63 	bl	889fe <__srefill_r>
   86138:	2800      	cmp	r0, #0
   8613a:	d0ed      	beq.n	86118 <__svfscanf_r+0x25c>
   8613c:	e27d      	b.n	8663a <__svfscanf_r+0x77e>
   8613e:	f1b9 0f02 	cmp.w	r9, #2
   86142:	f000 80e6 	beq.w	86312 <__svfscanf_r+0x456>
   86146:	f1b9 0f03 	cmp.w	r9, #3
   8614a:	f000 81aa 	beq.w	864a2 <__svfscanf_r+0x5e6>
   8614e:	f1b9 0f01 	cmp.w	r9, #1
   86152:	f000 808a 	beq.w	8626a <__svfscanf_r+0x3ae>
   86156:	f1ba 0f00 	cmp.w	sl, #0
   8615a:	bf08      	it	eq
   8615c:	f04f 0a01 	moveq.w	sl, #1
   86160:	f01b 0901 	ands.w	r9, fp, #1
   86164:	d054      	beq.n	86210 <__svfscanf_r+0x354>
   86166:	2100      	movs	r1, #0
   86168:	2208      	movs	r2, #8
   8616a:	a80a      	add	r0, sp, #40	; 0x28
   8616c:	f7fd ff35 	bl	83fda <memset>
   86170:	f01b 0710 	ands.w	r7, fp, #16
   86174:	d10a      	bne.n	8618c <__svfscanf_r+0x2d0>
   86176:	f8d5 9000 	ldr.w	r9, [r5]
   8617a:	3504      	adds	r5, #4
   8617c:	e008      	b.n	86190 <__svfscanf_r+0x2d4>
   8617e:	bf00      	nop
   86180:	20070468 	.word	0x20070468
   86184:	00088f39 	.word	0x00088f39
   86188:	00088c81 	.word	0x00088c81
   8618c:	f04f 0900 	mov.w	r9, #0
   86190:	f04f 0b00 	mov.w	fp, #0
   86194:	f001 fba6 	bl	878e4 <__locale_mb_cur_max>
   86198:	4583      	cmp	fp, r0
   8619a:	f000 824e 	beq.w	8663a <__svfscanf_r+0x77e>
   8619e:	6820      	ldr	r0, [r4, #0]
   861a0:	6863      	ldr	r3, [r4, #4]
   861a2:	f810 1b01 	ldrb.w	r1, [r0], #1
   861a6:	aa0e      	add	r2, sp, #56	; 0x38
   861a8:	f802 100b 	strb.w	r1, [r2, fp]
   861ac:	6020      	str	r0, [r4, #0]
   861ae:	1e59      	subs	r1, r3, #1
   861b0:	a80a      	add	r0, sp, #40	; 0x28
   861b2:	f10b 0b01 	add.w	fp, fp, #1
   861b6:	6061      	str	r1, [r4, #4]
   861b8:	9000      	str	r0, [sp, #0]
   861ba:	4649      	mov	r1, r9
   861bc:	4640      	mov	r0, r8
   861be:	465b      	mov	r3, fp
   861c0:	f001 fe2c 	bl	87e1c <_mbrtowc_r>
   861c4:	1c42      	adds	r2, r0, #1
   861c6:	f000 8238 	beq.w	8663a <__svfscanf_r+0x77e>
   861ca:	b918      	cbnz	r0, 861d4 <__svfscanf_r+0x318>
   861cc:	b927      	cbnz	r7, 861d8 <__svfscanf_r+0x31c>
   861ce:	f8c9 7000 	str.w	r7, [r9]
   861d2:	e001      	b.n	861d8 <__svfscanf_r+0x31c>
   861d4:	3002      	adds	r0, #2
   861d6:	d007      	beq.n	861e8 <__svfscanf_r+0x32c>
   861d8:	445e      	add	r6, fp
   861da:	f10a 3aff 	add.w	sl, sl, #4294967295
   861de:	b90f      	cbnz	r7, 861e4 <__svfscanf_r+0x328>
   861e0:	f109 0904 	add.w	r9, r9, #4
   861e4:	f04f 0b00 	mov.w	fp, #0
   861e8:	6862      	ldr	r2, [r4, #4]
   861ea:	2a00      	cmp	r2, #0
   861ec:	dc0c      	bgt.n	86208 <__svfscanf_r+0x34c>
   861ee:	4640      	mov	r0, r8
   861f0:	4621      	mov	r1, r4
   861f2:	f002 fc04 	bl	889fe <__srefill_r>
   861f6:	b138      	cbz	r0, 86208 <__svfscanf_r+0x34c>
   861f8:	f1bb 0f00 	cmp.w	fp, #0
   861fc:	f040 821d 	bne.w	8663a <__svfscanf_r+0x77e>
   86200:	2f00      	cmp	r7, #0
   86202:	f000 80fa 	beq.w	863fa <__svfscanf_r+0x53e>
   86206:	e673      	b.n	85ef0 <__svfscanf_r+0x34>
   86208:	f1ba 0f00 	cmp.w	sl, #0
   8620c:	d1c2      	bne.n	86194 <__svfscanf_r+0x2d8>
   8620e:	e7f7      	b.n	86200 <__svfscanf_r+0x344>
   86210:	f01b 0f10 	tst.w	fp, #16
   86214:	d01b      	beq.n	8624e <__svfscanf_r+0x392>
   86216:	6867      	ldr	r7, [r4, #4]
   86218:	6820      	ldr	r0, [r4, #0]
   8621a:	4557      	cmp	r7, sl
   8621c:	da0f      	bge.n	8623e <__svfscanf_r+0x382>
   8621e:	19c2      	adds	r2, r0, r7
   86220:	6022      	str	r2, [r4, #0]
   86222:	4640      	mov	r0, r8
   86224:	4621      	mov	r1, r4
   86226:	44b9      	add	r9, r7
   86228:	ebc7 0a0a 	rsb	sl, r7, sl
   8622c:	f002 fbe7 	bl	889fe <__srefill_r>
   86230:	2800      	cmp	r0, #0
   86232:	d0f0      	beq.n	86216 <__svfscanf_r+0x35a>
   86234:	f1b9 0f00 	cmp.w	r9, #0
   86238:	f040 81fd 	bne.w	86636 <__svfscanf_r+0x77a>
   8623c:	e1fd      	b.n	8663a <__svfscanf_r+0x77e>
   8623e:	ebca 0107 	rsb	r1, sl, r7
   86242:	eb00 030a 	add.w	r3, r0, sl
   86246:	44d1      	add	r9, sl
   86248:	6061      	str	r1, [r4, #4]
   8624a:	6023      	str	r3, [r4, #0]
   8624c:	e1f3      	b.n	86636 <__svfscanf_r+0x77a>
   8624e:	9400      	str	r4, [sp, #0]
   86250:	4640      	mov	r0, r8
   86252:	6829      	ldr	r1, [r5, #0]
   86254:	2201      	movs	r2, #1
   86256:	4653      	mov	r3, sl
   86258:	f105 0904 	add.w	r9, r5, #4
   8625c:	f000 fcd2 	bl	86c04 <_fread_r>
   86260:	2800      	cmp	r0, #0
   86262:	f000 81ea 	beq.w	8663a <__svfscanf_r+0x77e>
   86266:	1986      	adds	r6, r0, r6
   86268:	e116      	b.n	86498 <__svfscanf_r+0x5dc>
   8626a:	f1ba 0f00 	cmp.w	sl, #0
   8626e:	bf08      	it	eq
   86270:	f04f 3aff 	moveq.w	sl, #4294967295
   86274:	f01b 0f10 	tst.w	fp, #16
   86278:	d01e      	beq.n	862b8 <__svfscanf_r+0x3fc>
   8627a:	f04f 0900 	mov.w	r9, #0
   8627e:	6823      	ldr	r3, [r4, #0]
   86280:	a818      	add	r0, sp, #96	; 0x60
   86282:	781a      	ldrb	r2, [r3, #0]
   86284:	5c81      	ldrb	r1, [r0, r2]
   86286:	b191      	cbz	r1, 862ae <__svfscanf_r+0x3f2>
   86288:	6862      	ldr	r2, [r4, #4]
   8628a:	f109 0901 	add.w	r9, r9, #1
   8628e:	1e50      	subs	r0, r2, #1
   86290:	3301      	adds	r3, #1
   86292:	45ca      	cmp	sl, r9
   86294:	6060      	str	r0, [r4, #4]
   86296:	6023      	str	r3, [r4, #0]
   86298:	f000 81cd 	beq.w	86636 <__svfscanf_r+0x77a>
   8629c:	2800      	cmp	r0, #0
   8629e:	dcee      	bgt.n	8627e <__svfscanf_r+0x3c2>
   862a0:	4640      	mov	r0, r8
   862a2:	4621      	mov	r1, r4
   862a4:	f002 fbab 	bl	889fe <__srefill_r>
   862a8:	2800      	cmp	r0, #0
   862aa:	d0e8      	beq.n	8627e <__svfscanf_r+0x3c2>
   862ac:	e1c3      	b.n	86636 <__svfscanf_r+0x77a>
   862ae:	f1b9 0f00 	cmp.w	r9, #0
   862b2:	f040 81c0 	bne.w	86636 <__svfscanf_r+0x77a>
   862b6:	e1ce      	b.n	86656 <__svfscanf_r+0x79a>
   862b8:	f8d5 9000 	ldr.w	r9, [r5]
   862bc:	f105 0b04 	add.w	fp, r5, #4
   862c0:	464d      	mov	r5, r9
   862c2:	6823      	ldr	r3, [r4, #0]
   862c4:	a918      	add	r1, sp, #96	; 0x60
   862c6:	7818      	ldrb	r0, [r3, #0]
   862c8:	5c0a      	ldrb	r2, [r1, r0]
   862ca:	b1ba      	cbz	r2, 862fc <__svfscanf_r+0x440>
   862cc:	6860      	ldr	r0, [r4, #4]
   862ce:	1e41      	subs	r1, r0, #1
   862d0:	6061      	str	r1, [r4, #4]
   862d2:	f813 2b01 	ldrb.w	r2, [r3], #1
   862d6:	f805 2b01 	strb.w	r2, [r5], #1
   862da:	6023      	str	r3, [r4, #0]
   862dc:	eb09 030a 	add.w	r3, r9, sl
   862e0:	42ab      	cmp	r3, r5
   862e2:	d00b      	beq.n	862fc <__svfscanf_r+0x440>
   862e4:	6860      	ldr	r0, [r4, #4]
   862e6:	2800      	cmp	r0, #0
   862e8:	dceb      	bgt.n	862c2 <__svfscanf_r+0x406>
   862ea:	4640      	mov	r0, r8
   862ec:	4621      	mov	r1, r4
   862ee:	f002 fb86 	bl	889fe <__srefill_r>
   862f2:	2800      	cmp	r0, #0
   862f4:	d0e5      	beq.n	862c2 <__svfscanf_r+0x406>
   862f6:	454d      	cmp	r5, r9
   862f8:	f000 819f 	beq.w	8663a <__svfscanf_r+0x77e>
   862fc:	ebb5 0909 	subs.w	r9, r5, r9
   86300:	f000 81a9 	beq.w	86656 <__svfscanf_r+0x79a>
   86304:	2700      	movs	r7, #0
   86306:	702f      	strb	r7, [r5, #0]
   86308:	9d04      	ldr	r5, [sp, #16]
   8630a:	1c69      	adds	r1, r5, #1
   8630c:	9104      	str	r1, [sp, #16]
   8630e:	465d      	mov	r5, fp
   86310:	e191      	b.n	86636 <__svfscanf_r+0x77a>
   86312:	f1ba 0f00 	cmp.w	sl, #0
   86316:	bf08      	it	eq
   86318:	f04f 3aff 	moveq.w	sl, #4294967295
   8631c:	f01b 0901 	ands.w	r9, fp, #1
   86320:	d06f      	beq.n	86402 <__svfscanf_r+0x546>
   86322:	2100      	movs	r1, #0
   86324:	2208      	movs	r2, #8
   86326:	a80c      	add	r0, sp, #48	; 0x30
   86328:	f7fd fe57 	bl	83fda <memset>
   8632c:	f01b 0710 	ands.w	r7, fp, #16
   86330:	d103      	bne.n	8633a <__svfscanf_r+0x47e>
   86332:	f8d5 9000 	ldr.w	r9, [r5]
   86336:	3504      	adds	r5, #4
   86338:	e001      	b.n	8633e <__svfscanf_r+0x482>
   8633a:	f10d 0924 	add.w	r9, sp, #36	; 0x24
   8633e:	f04f 0b00 	mov.w	fp, #0
   86342:	6822      	ldr	r2, [r4, #0]
   86344:	4990      	ldr	r1, [pc, #576]	; (86588 <__svfscanf_r+0x6cc>)
   86346:	7813      	ldrb	r3, [r2, #0]
   86348:	6808      	ldr	r0, [r1, #0]
   8634a:	18c2      	adds	r2, r0, r3
   8634c:	7853      	ldrb	r3, [r2, #1]
   8634e:	f003 0108 	and.w	r1, r3, #8
   86352:	b2c8      	uxtb	r0, r1
   86354:	2800      	cmp	r0, #0
   86356:	d14b      	bne.n	863f0 <__svfscanf_r+0x534>
   86358:	f1ba 0f00 	cmp.w	sl, #0
   8635c:	d048      	beq.n	863f0 <__svfscanf_r+0x534>
   8635e:	f001 fac1 	bl	878e4 <__locale_mb_cur_max>
   86362:	4583      	cmp	fp, r0
   86364:	f000 8169 	beq.w	8663a <__svfscanf_r+0x77e>
   86368:	6823      	ldr	r3, [r4, #0]
   8636a:	6860      	ldr	r0, [r4, #4]
   8636c:	f813 1b01 	ldrb.w	r1, [r3], #1
   86370:	aa0e      	add	r2, sp, #56	; 0x38
   86372:	f802 100b 	strb.w	r1, [r2, fp]
   86376:	6023      	str	r3, [r4, #0]
   86378:	1e41      	subs	r1, r0, #1
   8637a:	ab0c      	add	r3, sp, #48	; 0x30
   8637c:	f10b 0b01 	add.w	fp, fp, #1
   86380:	6061      	str	r1, [r4, #4]
   86382:	9300      	str	r3, [sp, #0]
   86384:	4640      	mov	r0, r8
   86386:	465b      	mov	r3, fp
   86388:	4649      	mov	r1, r9
   8638a:	f001 fd47 	bl	87e1c <_mbrtowc_r>
   8638e:	1c43      	adds	r3, r0, #1
   86390:	f000 8153 	beq.w	8663a <__svfscanf_r+0x77e>
   86394:	b910      	cbnz	r0, 8639c <__svfscanf_r+0x4e0>
   86396:	f8c9 0000 	str.w	r0, [r9]
   8639a:	e001      	b.n	863a0 <__svfscanf_r+0x4e4>
   8639c:	3002      	adds	r0, #2
   8639e:	d01a      	beq.n	863d6 <__svfscanf_r+0x51a>
   863a0:	f8d9 0000 	ldr.w	r0, [r9]
   863a4:	f001 fa6a 	bl	8787c <iswspace>
   863a8:	b160      	cbz	r0, 863c4 <__svfscanf_r+0x508>
   863aa:	f1bb 0f00 	cmp.w	fp, #0
   863ae:	d01f      	beq.n	863f0 <__svfscanf_r+0x534>
   863b0:	f10b 3bff 	add.w	fp, fp, #4294967295
   863b4:	a90e      	add	r1, sp, #56	; 0x38
   863b6:	4640      	mov	r0, r8
   863b8:	f811 100b 	ldrb.w	r1, [r1, fp]
   863bc:	4622      	mov	r2, r4
   863be:	f003 fbac 	bl	89b1a <_ungetc_r>
   863c2:	e7f2      	b.n	863aa <__svfscanf_r+0x4ee>
   863c4:	445e      	add	r6, fp
   863c6:	f10a 3aff 	add.w	sl, sl, #4294967295
   863ca:	b91f      	cbnz	r7, 863d4 <__svfscanf_r+0x518>
   863cc:	f109 0904 	add.w	r9, r9, #4
   863d0:	46bb      	mov	fp, r7
   863d2:	e000      	b.n	863d6 <__svfscanf_r+0x51a>
   863d4:	4683      	mov	fp, r0
   863d6:	6862      	ldr	r2, [r4, #4]
   863d8:	2a00      	cmp	r2, #0
   863da:	dcb2      	bgt.n	86342 <__svfscanf_r+0x486>
   863dc:	4640      	mov	r0, r8
   863de:	4621      	mov	r1, r4
   863e0:	f002 fb0d 	bl	889fe <__srefill_r>
   863e4:	2800      	cmp	r0, #0
   863e6:	d0ac      	beq.n	86342 <__svfscanf_r+0x486>
   863e8:	f1bb 0f00 	cmp.w	fp, #0
   863ec:	f040 8125 	bne.w	8663a <__svfscanf_r+0x77e>
   863f0:	2f00      	cmp	r7, #0
   863f2:	f47f ad7d 	bne.w	85ef0 <__svfscanf_r+0x34>
   863f6:	f8c9 7000 	str.w	r7, [r9]
   863fa:	9f04      	ldr	r7, [sp, #16]
   863fc:	1c78      	adds	r0, r7, #1
   863fe:	9004      	str	r0, [sp, #16]
   86400:	e576      	b.n	85ef0 <__svfscanf_r+0x34>
   86402:	f01b 0f10 	tst.w	fp, #16
   86406:	d01e      	beq.n	86446 <__svfscanf_r+0x58a>
   86408:	4a5f      	ldr	r2, [pc, #380]	; (86588 <__svfscanf_r+0x6cc>)
   8640a:	6820      	ldr	r0, [r4, #0]
   8640c:	6813      	ldr	r3, [r2, #0]
   8640e:	7807      	ldrb	r7, [r0, #0]
   86410:	19d9      	adds	r1, r3, r7
   86412:	784f      	ldrb	r7, [r1, #1]
   86414:	f007 0208 	and.w	r2, r7, #8
   86418:	b2d3      	uxtb	r3, r2
   8641a:	2b00      	cmp	r3, #0
   8641c:	f040 810b 	bne.w	86636 <__svfscanf_r+0x77a>
   86420:	6861      	ldr	r1, [r4, #4]
   86422:	f109 0901 	add.w	r9, r9, #1
   86426:	1e4f      	subs	r7, r1, #1
   86428:	3001      	adds	r0, #1
   8642a:	45ca      	cmp	sl, r9
   8642c:	6067      	str	r7, [r4, #4]
   8642e:	6020      	str	r0, [r4, #0]
   86430:	f000 8101 	beq.w	86636 <__svfscanf_r+0x77a>
   86434:	2f00      	cmp	r7, #0
   86436:	dce7      	bgt.n	86408 <__svfscanf_r+0x54c>
   86438:	4640      	mov	r0, r8
   8643a:	4621      	mov	r1, r4
   8643c:	f002 fadf 	bl	889fe <__srefill_r>
   86440:	2800      	cmp	r0, #0
   86442:	d0e1      	beq.n	86408 <__svfscanf_r+0x54c>
   86444:	e0f7      	b.n	86636 <__svfscanf_r+0x77a>
   86446:	f8d5 b000 	ldr.w	fp, [r5]
   8644a:	f105 0904 	add.w	r9, r5, #4
   8644e:	465d      	mov	r5, fp
   86450:	494d      	ldr	r1, [pc, #308]	; (86588 <__svfscanf_r+0x6cc>)
   86452:	6820      	ldr	r0, [r4, #0]
   86454:	680f      	ldr	r7, [r1, #0]
   86456:	7803      	ldrb	r3, [r0, #0]
   86458:	18fa      	adds	r2, r7, r3
   8645a:	7853      	ldrb	r3, [r2, #1]
   8645c:	f003 0108 	and.w	r1, r3, #8
   86460:	b2cf      	uxtb	r7, r1
   86462:	b9a7      	cbnz	r7, 8648e <__svfscanf_r+0x5d2>
   86464:	6862      	ldr	r2, [r4, #4]
   86466:	1e53      	subs	r3, r2, #1
   86468:	6063      	str	r3, [r4, #4]
   8646a:	f810 1b01 	ldrb.w	r1, [r0], #1
   8646e:	f805 1b01 	strb.w	r1, [r5], #1
   86472:	6020      	str	r0, [r4, #0]
   86474:	eb0b 000a 	add.w	r0, fp, sl
   86478:	42a8      	cmp	r0, r5
   8647a:	d008      	beq.n	8648e <__svfscanf_r+0x5d2>
   8647c:	6867      	ldr	r7, [r4, #4]
   8647e:	2f00      	cmp	r7, #0
   86480:	dce6      	bgt.n	86450 <__svfscanf_r+0x594>
   86482:	4640      	mov	r0, r8
   86484:	4621      	mov	r1, r4
   86486:	f002 faba 	bl	889fe <__srefill_r>
   8648a:	2800      	cmp	r0, #0
   8648c:	d0e0      	beq.n	86450 <__svfscanf_r+0x594>
   8648e:	2200      	movs	r2, #0
   86490:	702a      	strb	r2, [r5, #0]
   86492:	ebcb 0505 	rsb	r5, fp, r5
   86496:	1976      	adds	r6, r6, r5
   86498:	9b04      	ldr	r3, [sp, #16]
   8649a:	464d      	mov	r5, r9
   8649c:	1c59      	adds	r1, r3, #1
   8649e:	9104      	str	r1, [sp, #16]
   864a0:	e526      	b.n	85ef0 <__svfscanf_r+0x34>
   864a2:	f10a 33ff 	add.w	r3, sl, #4294967295
   864a6:	2b26      	cmp	r3, #38	; 0x26
   864a8:	bf86      	itte	hi
   864aa:	f1aa 0327 	subhi.w	r3, sl, #39	; 0x27
   864ae:	f04f 0a27 	movhi.w	sl, #39	; 0x27
   864b2:	2300      	movls	r3, #0
   864b4:	2700      	movs	r7, #0
   864b6:	f44b 6b58 	orr.w	fp, fp, #3456	; 0xd80
   864ba:	9706      	str	r7, [sp, #24]
   864bc:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   864c0:	6821      	ldr	r1, [r4, #0]
   864c2:	780a      	ldrb	r2, [r1, #0]
   864c4:	2a39      	cmp	r2, #57	; 0x39
   864c6:	d809      	bhi.n	864dc <__svfscanf_r+0x620>
   864c8:	2a38      	cmp	r2, #56	; 0x38
   864ca:	d235      	bcs.n	86538 <__svfscanf_r+0x67c>
   864cc:	2a30      	cmp	r2, #48	; 0x30
   864ce:	d014      	beq.n	864fa <__svfscanf_r+0x63e>
   864d0:	d82c      	bhi.n	8652c <__svfscanf_r+0x670>
   864d2:	2a2b      	cmp	r2, #43	; 0x2b
   864d4:	d03d      	beq.n	86552 <__svfscanf_r+0x696>
   864d6:	2a2d      	cmp	r2, #45	; 0x2d
   864d8:	d164      	bne.n	865a4 <__svfscanf_r+0x6e8>
   864da:	e03a      	b.n	86552 <__svfscanf_r+0x696>
   864dc:	2a58      	cmp	r2, #88	; 0x58
   864de:	d03e      	beq.n	8655e <__svfscanf_r+0x6a2>
   864e0:	d804      	bhi.n	864ec <__svfscanf_r+0x630>
   864e2:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   864e6:	2805      	cmp	r0, #5
   864e8:	d85c      	bhi.n	865a4 <__svfscanf_r+0x6e8>
   864ea:	e02c      	b.n	86546 <__svfscanf_r+0x68a>
   864ec:	2a61      	cmp	r2, #97	; 0x61
   864ee:	d359      	bcc.n	865a4 <__svfscanf_r+0x6e8>
   864f0:	2a66      	cmp	r2, #102	; 0x66
   864f2:	d928      	bls.n	86546 <__svfscanf_r+0x68a>
   864f4:	2a78      	cmp	r2, #120	; 0x78
   864f6:	d155      	bne.n	865a4 <__svfscanf_r+0x6e8>
   864f8:	e031      	b.n	8655e <__svfscanf_r+0x6a2>
   864fa:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   864fe:	d039      	beq.n	86574 <__svfscanf_r+0x6b8>
   86500:	9f02      	ldr	r7, [sp, #8]
   86502:	b91f      	cbnz	r7, 8650c <__svfscanf_r+0x650>
   86504:	2708      	movs	r7, #8
   86506:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
   8650a:	9702      	str	r7, [sp, #8]
   8650c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
   86510:	d002      	beq.n	86518 <__svfscanf_r+0x65c>
   86512:	f42b 6bb0 	bic.w	fp, fp, #1408	; 0x580
   86516:	e02d      	b.n	86574 <__svfscanf_r+0x6b8>
   86518:	f42b 7b60 	bic.w	fp, fp, #896	; 0x380
   8651c:	b113      	cbz	r3, 86524 <__svfscanf_r+0x668>
   8651e:	3b01      	subs	r3, #1
   86520:	f10a 0a01 	add.w	sl, sl, #1
   86524:	9f06      	ldr	r7, [sp, #24]
   86526:	3701      	adds	r7, #1
   86528:	9706      	str	r7, [sp, #24]
   8652a:	e025      	b.n	86578 <__svfscanf_r+0x6bc>
   8652c:	9f02      	ldr	r7, [sp, #8]
   8652e:	4817      	ldr	r0, [pc, #92]	; (8658c <__svfscanf_r+0x6d0>)
   86530:	f930 0017 	ldrsh.w	r0, [r0, r7, lsl #1]
   86534:	9002      	str	r0, [sp, #8]
   86536:	e009      	b.n	8654c <__svfscanf_r+0x690>
   86538:	9f02      	ldr	r7, [sp, #8]
   8653a:	4814      	ldr	r0, [pc, #80]	; (8658c <__svfscanf_r+0x6d0>)
   8653c:	f930 0017 	ldrsh.w	r0, [r0, r7, lsl #1]
   86540:	9002      	str	r0, [sp, #8]
   86542:	2808      	cmp	r0, #8
   86544:	e001      	b.n	8654a <__svfscanf_r+0x68e>
   86546:	9f02      	ldr	r7, [sp, #8]
   86548:	2f0a      	cmp	r7, #10
   8654a:	dd2b      	ble.n	865a4 <__svfscanf_r+0x6e8>
   8654c:	f42b 6b38 	bic.w	fp, fp, #2944	; 0xb80
   86550:	e010      	b.n	86574 <__svfscanf_r+0x6b8>
   86552:	f01b 0f80 	tst.w	fp, #128	; 0x80
   86556:	d025      	beq.n	865a4 <__svfscanf_r+0x6e8>
   86558:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   8655c:	e00a      	b.n	86574 <__svfscanf_r+0x6b8>
   8655e:	f40b 60c0 	and.w	r0, fp, #1536	; 0x600
   86562:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   86566:	d11d      	bne.n	865a4 <__svfscanf_r+0x6e8>
   86568:	f42b 7c00 	bic.w	ip, fp, #512	; 0x200
   8656c:	2710      	movs	r7, #16
   8656e:	f44c 6ba0 	orr.w	fp, ip, #1280	; 0x500
   86572:	9702      	str	r7, [sp, #8]
   86574:	f809 2b01 	strb.w	r2, [r9], #1
   86578:	6862      	ldr	r2, [r4, #4]
   8657a:	1e50      	subs	r0, r2, #1
   8657c:	2800      	cmp	r0, #0
   8657e:	6060      	str	r0, [r4, #4]
   86580:	dd06      	ble.n	86590 <__svfscanf_r+0x6d4>
   86582:	3101      	adds	r1, #1
   86584:	6021      	str	r1, [r4, #0]
   86586:	e00a      	b.n	8659e <__svfscanf_r+0x6e2>
   86588:	20070468 	.word	0x20070468
   8658c:	0008a7ee 	.word	0x0008a7ee
   86590:	4640      	mov	r0, r8
   86592:	4621      	mov	r1, r4
   86594:	9303      	str	r3, [sp, #12]
   86596:	f002 fa32 	bl	889fe <__srefill_r>
   8659a:	9b03      	ldr	r3, [sp, #12]
   8659c:	b910      	cbnz	r0, 865a4 <__svfscanf_r+0x6e8>
   8659e:	f1ba 0a01 	subs.w	sl, sl, #1
   865a2:	d18d      	bne.n	864c0 <__svfscanf_r+0x604>
   865a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
   865a8:	d00e      	beq.n	865c8 <__svfscanf_r+0x70c>
   865aa:	aa0e      	add	r2, sp, #56	; 0x38
   865ac:	4591      	cmp	r9, r2
   865ae:	d908      	bls.n	865c2 <__svfscanf_r+0x706>
   865b0:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   865b4:	4640      	mov	r0, r8
   865b6:	4622      	mov	r2, r4
   865b8:	f003 faaf 	bl	89b1a <_ungetc_r>
   865bc:	f109 3aff 	add.w	sl, r9, #4294967295
   865c0:	46d1      	mov	r9, sl
   865c2:	a80e      	add	r0, sp, #56	; 0x38
   865c4:	4581      	cmp	r9, r0
   865c6:	d046      	beq.n	86656 <__svfscanf_r+0x79a>
   865c8:	f01b 0210 	ands.w	r2, fp, #16
   865cc:	d12e      	bne.n	8662c <__svfscanf_r+0x770>
   865ce:	9b02      	ldr	r3, [sp, #8]
   865d0:	4640      	mov	r0, r8
   865d2:	a90e      	add	r1, sp, #56	; 0x38
   865d4:	9f05      	ldr	r7, [sp, #20]
   865d6:	f889 2000 	strb.w	r2, [r9]
   865da:	47b8      	blx	r7
   865dc:	f01b 0f20 	tst.w	fp, #32
   865e0:	f105 0304 	add.w	r3, r5, #4
   865e4:	d11c      	bne.n	86620 <__svfscanf_r+0x764>
   865e6:	f01b 0f04 	tst.w	fp, #4
   865ea:	d002      	beq.n	865f2 <__svfscanf_r+0x736>
   865ec:	682d      	ldr	r5, [r5, #0]
   865ee:	8028      	strh	r0, [r5, #0]
   865f0:	e018      	b.n	86624 <__svfscanf_r+0x768>
   865f2:	f01b 0201 	ands.w	r2, fp, #1
   865f6:	d113      	bne.n	86620 <__svfscanf_r+0x764>
   865f8:	f01b 0f02 	tst.w	fp, #2
   865fc:	d010      	beq.n	86620 <__svfscanf_r+0x764>
   865fe:	4b19      	ldr	r3, [pc, #100]	; (86664 <__svfscanf_r+0x7a8>)
   86600:	9f05      	ldr	r7, [sp, #20]
   86602:	4640      	mov	r0, r8
   86604:	429f      	cmp	r7, r3
   86606:	a90e      	add	r1, sp, #56	; 0x38
   86608:	9b02      	ldr	r3, [sp, #8]
   8660a:	d102      	bne.n	86612 <__svfscanf_r+0x756>
   8660c:	f002 fd20 	bl	89050 <_strtoull_r>
   86610:	e001      	b.n	86616 <__svfscanf_r+0x75a>
   86612:	f002 fbc9 	bl	88da8 <_strtoll_r>
   86616:	682a      	ldr	r2, [r5, #0]
   86618:	3504      	adds	r5, #4
   8661a:	e882 0003 	stmia.w	r2, {r0, r1}
   8661e:	e002      	b.n	86626 <__svfscanf_r+0x76a>
   86620:	6829      	ldr	r1, [r5, #0]
   86622:	6008      	str	r0, [r1, #0]
   86624:	461d      	mov	r5, r3
   86626:	9804      	ldr	r0, [sp, #16]
   86628:	1c43      	adds	r3, r0, #1
   8662a:	9304      	str	r3, [sp, #16]
   8662c:	af0e      	add	r7, sp, #56	; 0x38
   8662e:	9a06      	ldr	r2, [sp, #24]
   86630:	ebc7 0909 	rsb	r9, r7, r9
   86634:	4491      	add	r9, r2
   86636:	444e      	add	r6, r9
   86638:	e45a      	b.n	85ef0 <__svfscanf_r+0x34>
   8663a:	f000 fa58 	bl	86aee <__sfp_lock_release>
   8663e:	9f04      	ldr	r7, [sp, #16]
   86640:	b91f      	cbnz	r7, 8664a <__svfscanf_r+0x78e>
   86642:	f04f 37ff 	mov.w	r7, #4294967295
   86646:	9704      	str	r7, [sp, #16]
   86648:	e007      	b.n	8665a <__svfscanf_r+0x79e>
   8664a:	89a1      	ldrh	r1, [r4, #12]
   8664c:	f001 0240 	and.w	r2, r1, #64	; 0x40
   86650:	b210      	sxth	r0, r2
   86652:	b110      	cbz	r0, 8665a <__svfscanf_r+0x79e>
   86654:	e7f5      	b.n	86642 <__svfscanf_r+0x786>
   86656:	f000 fa4a 	bl	86aee <__sfp_lock_release>
   8665a:	9804      	ldr	r0, [sp, #16]
   8665c:	b059      	add	sp, #356	; 0x164
   8665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86662:	bf00      	nop
   86664:	00088f39 	.word	0x00088f39

00086668 <_vfscanf_r>:
   86668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8666c:	4688      	mov	r8, r1
   8666e:	4617      	mov	r7, r2
   86670:	461e      	mov	r6, r3
   86672:	4604      	mov	r4, r0
   86674:	b118      	cbz	r0, 8667e <_vfscanf_r+0x16>
   86676:	6b85      	ldr	r5, [r0, #56]	; 0x38
   86678:	b90d      	cbnz	r5, 8667e <_vfscanf_r+0x16>
   8667a:	f000 f9d3 	bl	86a24 <__sinit>
   8667e:	4620      	mov	r0, r4
   86680:	4641      	mov	r1, r8
   86682:	463a      	mov	r2, r7
   86684:	4633      	mov	r3, r6
   86686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8668a:	f7ff bc17 	b.w	85ebc <__svfscanf_r>

0008668e <__svfscanf>:
   8668e:	b530      	push	{r4, r5, lr}
   86690:	4613      	mov	r3, r2
   86692:	4a05      	ldr	r2, [pc, #20]	; (866a8 <__svfscanf+0x1a>)
   86694:	4605      	mov	r5, r0
   86696:	460c      	mov	r4, r1
   86698:	6810      	ldr	r0, [r2, #0]
   8669a:	4629      	mov	r1, r5
   8669c:	4622      	mov	r2, r4
   8669e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   866a2:	f7ff bc0b 	b.w	85ebc <__svfscanf_r>
   866a6:	bf00      	nop
   866a8:	20070010 	.word	0x20070010

000866ac <vfscanf>:
   866ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   866b0:	4c08      	ldr	r4, [pc, #32]	; (866d4 <vfscanf+0x28>)
   866b2:	4680      	mov	r8, r0
   866b4:	6820      	ldr	r0, [r4, #0]
   866b6:	460f      	mov	r7, r1
   866b8:	4616      	mov	r6, r2
   866ba:	b118      	cbz	r0, 866c4 <vfscanf+0x18>
   866bc:	6b85      	ldr	r5, [r0, #56]	; 0x38
   866be:	b90d      	cbnz	r5, 866c4 <vfscanf+0x18>
   866c0:	f000 f9b0 	bl	86a24 <__sinit>
   866c4:	6820      	ldr	r0, [r4, #0]
   866c6:	4641      	mov	r1, r8
   866c8:	463a      	mov	r2, r7
   866ca:	4633      	mov	r3, r6
   866cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   866d0:	f7ff bbf4 	b.w	85ebc <__svfscanf_r>
   866d4:	20070010 	.word	0x20070010

000866d8 <__swsetup_r>:
   866d8:	b538      	push	{r3, r4, r5, lr}
   866da:	4b2c      	ldr	r3, [pc, #176]	; (8678c <__swsetup_r+0xb4>)
   866dc:	4605      	mov	r5, r0
   866de:	6818      	ldr	r0, [r3, #0]
   866e0:	460c      	mov	r4, r1
   866e2:	b118      	cbz	r0, 866ec <__swsetup_r+0x14>
   866e4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   866e6:	b90a      	cbnz	r2, 866ec <__swsetup_r+0x14>
   866e8:	f000 f99c 	bl	86a24 <__sinit>
   866ec:	89a0      	ldrh	r0, [r4, #12]
   866ee:	f000 0108 	and.w	r1, r0, #8
   866f2:	b20b      	sxth	r3, r1
   866f4:	bb0b      	cbnz	r3, 8673a <__swsetup_r+0x62>
   866f6:	f000 0210 	and.w	r2, r0, #16
   866fa:	b211      	sxth	r1, r2
   866fc:	b911      	cbnz	r1, 86704 <__swsetup_r+0x2c>
   866fe:	f04f 30ff 	mov.w	r0, #4294967295
   86702:	bd38      	pop	{r3, r4, r5, pc}
   86704:	f000 0004 	and.w	r0, r0, #4
   86708:	b203      	sxth	r3, r0
   8670a:	b193      	cbz	r3, 86732 <__swsetup_r+0x5a>
   8670c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8670e:	b141      	cbz	r1, 86722 <__swsetup_r+0x4a>
   86710:	f104 0240 	add.w	r2, r4, #64	; 0x40
   86714:	4291      	cmp	r1, r2
   86716:	d002      	beq.n	8671e <__swsetup_r+0x46>
   86718:	4628      	mov	r0, r5
   8671a:	f000 fb1f 	bl	86d5c <_free_r>
   8671e:	2100      	movs	r1, #0
   86720:	6321      	str	r1, [r4, #48]	; 0x30
   86722:	89a0      	ldrh	r0, [r4, #12]
   86724:	6921      	ldr	r1, [r4, #16]
   86726:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   8672a:	2200      	movs	r2, #0
   8672c:	81a3      	strh	r3, [r4, #12]
   8672e:	6062      	str	r2, [r4, #4]
   86730:	6021      	str	r1, [r4, #0]
   86732:	89a0      	ldrh	r0, [r4, #12]
   86734:	f040 0308 	orr.w	r3, r0, #8
   86738:	81a3      	strh	r3, [r4, #12]
   8673a:	6922      	ldr	r2, [r4, #16]
   8673c:	b94a      	cbnz	r2, 86752 <__swsetup_r+0x7a>
   8673e:	89a1      	ldrh	r1, [r4, #12]
   86740:	f401 7020 	and.w	r0, r1, #640	; 0x280
   86744:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   86748:	d003      	beq.n	86752 <__swsetup_r+0x7a>
   8674a:	4628      	mov	r0, r5
   8674c:	4621      	mov	r1, r4
   8674e:	f001 f8e7 	bl	87920 <__smakebuf_r>
   86752:	89a3      	ldrh	r3, [r4, #12]
   86754:	f013 0201 	ands.w	r2, r3, #1
   86758:	d005      	beq.n	86766 <__swsetup_r+0x8e>
   8675a:	6961      	ldr	r1, [r4, #20]
   8675c:	2200      	movs	r2, #0
   8675e:	4248      	negs	r0, r1
   86760:	60a2      	str	r2, [r4, #8]
   86762:	61a0      	str	r0, [r4, #24]
   86764:	e007      	b.n	86776 <__swsetup_r+0x9e>
   86766:	f003 0102 	and.w	r1, r3, #2
   8676a:	b208      	sxth	r0, r1
   8676c:	b908      	cbnz	r0, 86772 <__swsetup_r+0x9a>
   8676e:	6963      	ldr	r3, [r4, #20]
   86770:	e000      	b.n	86774 <__swsetup_r+0x9c>
   86772:	4613      	mov	r3, r2
   86774:	60a3      	str	r3, [r4, #8]
   86776:	6923      	ldr	r3, [r4, #16]
   86778:	b933      	cbnz	r3, 86788 <__swsetup_r+0xb0>
   8677a:	89a2      	ldrh	r2, [r4, #12]
   8677c:	f002 0180 	and.w	r1, r2, #128	; 0x80
   86780:	b208      	sxth	r0, r1
   86782:	2800      	cmp	r0, #0
   86784:	d1bb      	bne.n	866fe <__swsetup_r+0x26>
   86786:	bd38      	pop	{r3, r4, r5, pc}
   86788:	2000      	movs	r0, #0
   8678a:	bd38      	pop	{r3, r4, r5, pc}
   8678c:	20070010 	.word	0x20070010

00086790 <__register_exitproc>:
   86790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86794:	4698      	mov	r8, r3
   86796:	4b23      	ldr	r3, [pc, #140]	; (86824 <__register_exitproc+0x94>)
   86798:	4606      	mov	r6, r0
   8679a:	681c      	ldr	r4, [r3, #0]
   8679c:	460f      	mov	r7, r1
   8679e:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   867a2:	4691      	mov	r9, r2
   867a4:	b918      	cbnz	r0, 867ae <__register_exitproc+0x1e>
   867a6:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   867aa:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   867ae:	6841      	ldr	r1, [r0, #4]
   867b0:	291f      	cmp	r1, #31
   867b2:	dd16      	ble.n	867e2 <__register_exitproc+0x52>
   867b4:	481c      	ldr	r0, [pc, #112]	; (86828 <__register_exitproc+0x98>)
   867b6:	b918      	cbnz	r0, 867c0 <__register_exitproc+0x30>
   867b8:	f04f 30ff 	mov.w	r0, #4294967295
   867bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   867c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   867c4:	f001 f918 	bl	879f8 <malloc>
   867c8:	2800      	cmp	r0, #0
   867ca:	d0f5      	beq.n	867b8 <__register_exitproc+0x28>
   867cc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   867d0:	2500      	movs	r5, #0
   867d2:	6045      	str	r5, [r0, #4]
   867d4:	6002      	str	r2, [r0, #0]
   867d6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   867da:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   867de:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   867e2:	b1b6      	cbz	r6, 86812 <__register_exitproc+0x82>
   867e4:	6844      	ldr	r4, [r0, #4]
   867e6:	2201      	movs	r2, #1
   867e8:	fa02 f204 	lsl.w	r2, r2, r4
   867ec:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   867f0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   867f4:	4311      	orrs	r1, r2
   867f6:	2e02      	cmp	r6, #2
   867f8:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   867fc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   86800:	461c      	mov	r4, r3
   86802:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   86806:	d104      	bne.n	86812 <__register_exitproc+0x82>
   86808:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8680c:	431a      	orrs	r2, r3
   8680e:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   86812:	6841      	ldr	r1, [r0, #4]
   86814:	1c8b      	adds	r3, r1, #2
   86816:	1c4a      	adds	r2, r1, #1
   86818:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   8681c:	6042      	str	r2, [r0, #4]
   8681e:	2000      	movs	r0, #0
   86820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86824:	0008a74c 	.word	0x0008a74c
   86828:	000879f9 	.word	0x000879f9

0008682c <register_fini>:
   8682c:	4b02      	ldr	r3, [pc, #8]	; (86838 <register_fini+0xc>)
   8682e:	b113      	cbz	r3, 86836 <register_fini+0xa>
   86830:	4802      	ldr	r0, [pc, #8]	; (8683c <register_fini+0x10>)
   86832:	f7fd bb63 	b.w	83efc <atexit>
   86836:	4770      	bx	lr
   86838:	00000000 	.word	0x00000000
   8683c:	00083f11 	.word	0x00083f11

00086840 <_fflush_r>:
   86840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86844:	460c      	mov	r4, r1
   86846:	4605      	mov	r5, r0
   86848:	b118      	cbz	r0, 86852 <_fflush_r+0x12>
   8684a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8684c:	b90b      	cbnz	r3, 86852 <_fflush_r+0x12>
   8684e:	f000 f8e9 	bl	86a24 <__sinit>
   86852:	89a2      	ldrh	r2, [r4, #12]
   86854:	b332      	cbz	r2, 868a4 <_fflush_r+0x64>
   86856:	f002 0008 	and.w	r0, r2, #8
   8685a:	b201      	sxth	r1, r0
   8685c:	2900      	cmp	r1, #0
   8685e:	d162      	bne.n	86926 <_fflush_r+0xe6>
   86860:	6861      	ldr	r1, [r4, #4]
   86862:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   86866:	2900      	cmp	r1, #0
   86868:	81a0      	strh	r0, [r4, #12]
   8686a:	dc02      	bgt.n	86872 <_fflush_r+0x32>
   8686c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8686e:	2b00      	cmp	r3, #0
   86870:	dd18      	ble.n	868a4 <_fflush_r+0x64>
   86872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   86874:	b1b6      	cbz	r6, 868a4 <_fflush_r+0x64>
   86876:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   8687a:	2000      	movs	r0, #0
   8687c:	b212      	sxth	r2, r2
   8687e:	682f      	ldr	r7, [r5, #0]
   86880:	6028      	str	r0, [r5, #0]
   86882:	b10a      	cbz	r2, 86888 <_fflush_r+0x48>
   86884:	6d22      	ldr	r2, [r4, #80]	; 0x50
   86886:	e010      	b.n	868aa <_fflush_r+0x6a>
   86888:	2301      	movs	r3, #1
   8688a:	4628      	mov	r0, r5
   8688c:	69e1      	ldr	r1, [r4, #28]
   8688e:	47b0      	blx	r6
   86890:	4602      	mov	r2, r0
   86892:	3001      	adds	r0, #1
   86894:	d109      	bne.n	868aa <_fflush_r+0x6a>
   86896:	6829      	ldr	r1, [r5, #0]
   86898:	b139      	cbz	r1, 868aa <_fflush_r+0x6a>
   8689a:	291d      	cmp	r1, #29
   8689c:	d001      	beq.n	868a2 <_fflush_r+0x62>
   8689e:	2916      	cmp	r1, #22
   868a0:	d14e      	bne.n	86940 <_fflush_r+0x100>
   868a2:	602f      	str	r7, [r5, #0]
   868a4:	2000      	movs	r0, #0
   868a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   868aa:	89a6      	ldrh	r6, [r4, #12]
   868ac:	f006 0104 	and.w	r1, r6, #4
   868b0:	b20b      	sxth	r3, r1
   868b2:	b12b      	cbz	r3, 868c0 <_fflush_r+0x80>
   868b4:	6860      	ldr	r0, [r4, #4]
   868b6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   868b8:	1a12      	subs	r2, r2, r0
   868ba:	b10e      	cbz	r6, 868c0 <_fflush_r+0x80>
   868bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   868be:	1a52      	subs	r2, r2, r1
   868c0:	69e1      	ldr	r1, [r4, #28]
   868c2:	2300      	movs	r3, #0
   868c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   868c6:	4628      	mov	r0, r5
   868c8:	47b0      	blx	r6
   868ca:	1c41      	adds	r1, r0, #1
   868cc:	d105      	bne.n	868da <_fflush_r+0x9a>
   868ce:	682a      	ldr	r2, [r5, #0]
   868d0:	b11a      	cbz	r2, 868da <_fflush_r+0x9a>
   868d2:	2a1d      	cmp	r2, #29
   868d4:	d001      	beq.n	868da <_fflush_r+0x9a>
   868d6:	2a16      	cmp	r2, #22
   868d8:	d11f      	bne.n	8691a <_fflush_r+0xda>
   868da:	89a3      	ldrh	r3, [r4, #12]
   868dc:	2100      	movs	r1, #0
   868de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   868e2:	81a2      	strh	r2, [r4, #12]
   868e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   868e8:	6922      	ldr	r2, [r4, #16]
   868ea:	6061      	str	r1, [r4, #4]
   868ec:	b219      	sxth	r1, r3
   868ee:	6022      	str	r2, [r4, #0]
   868f0:	b121      	cbz	r1, 868fc <_fflush_r+0xbc>
   868f2:	1c42      	adds	r2, r0, #1
   868f4:	d101      	bne.n	868fa <_fflush_r+0xba>
   868f6:	682a      	ldr	r2, [r5, #0]
   868f8:	b902      	cbnz	r2, 868fc <_fflush_r+0xbc>
   868fa:	6520      	str	r0, [r4, #80]	; 0x50
   868fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   868fe:	602f      	str	r7, [r5, #0]
   86900:	2900      	cmp	r1, #0
   86902:	d0cf      	beq.n	868a4 <_fflush_r+0x64>
   86904:	f104 0040 	add.w	r0, r4, #64	; 0x40
   86908:	4281      	cmp	r1, r0
   8690a:	d002      	beq.n	86912 <_fflush_r+0xd2>
   8690c:	4628      	mov	r0, r5
   8690e:	f000 fa25 	bl	86d5c <_free_r>
   86912:	2000      	movs	r0, #0
   86914:	6320      	str	r0, [r4, #48]	; 0x30
   86916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8691a:	89a3      	ldrh	r3, [r4, #12]
   8691c:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   86920:	81a1      	strh	r1, [r4, #12]
   86922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86926:	6926      	ldr	r6, [r4, #16]
   86928:	2e00      	cmp	r6, #0
   8692a:	d0bb      	beq.n	868a4 <_fflush_r+0x64>
   8692c:	0792      	lsls	r2, r2, #30
   8692e:	6823      	ldr	r3, [r4, #0]
   86930:	bf0c      	ite	eq
   86932:	6962      	ldreq	r2, [r4, #20]
   86934:	2200      	movne	r2, #0
   86936:	ebc6 0803 	rsb	r8, r6, r3
   8693a:	6026      	str	r6, [r4, #0]
   8693c:	60a2      	str	r2, [r4, #8]
   8693e:	e012      	b.n	86966 <_fflush_r+0x126>
   86940:	89a3      	ldrh	r3, [r4, #12]
   86942:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   86946:	81a0      	strh	r0, [r4, #12]
   86948:	f04f 30ff 	mov.w	r0, #4294967295
   8694c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86950:	6a67      	ldr	r7, [r4, #36]	; 0x24
   86952:	4628      	mov	r0, r5
   86954:	69e1      	ldr	r1, [r4, #28]
   86956:	4632      	mov	r2, r6
   86958:	4643      	mov	r3, r8
   8695a:	47b8      	blx	r7
   8695c:	2800      	cmp	r0, #0
   8695e:	ddef      	ble.n	86940 <_fflush_r+0x100>
   86960:	1836      	adds	r6, r6, r0
   86962:	ebc0 0808 	rsb	r8, r0, r8
   86966:	f1b8 0f00 	cmp.w	r8, #0
   8696a:	dcf1      	bgt.n	86950 <_fflush_r+0x110>
   8696c:	e79a      	b.n	868a4 <_fflush_r+0x64>

0008696e <fflush>:
   8696e:	4601      	mov	r1, r0
   86970:	b920      	cbnz	r0, 8697c <fflush+0xe>
   86972:	4804      	ldr	r0, [pc, #16]	; (86984 <fflush+0x16>)
   86974:	4904      	ldr	r1, [pc, #16]	; (86988 <fflush+0x1a>)
   86976:	6800      	ldr	r0, [r0, #0]
   86978:	f000 bc22 	b.w	871c0 <_fwalk_reent>
   8697c:	4b03      	ldr	r3, [pc, #12]	; (8698c <fflush+0x1e>)
   8697e:	6818      	ldr	r0, [r3, #0]
   86980:	f7ff bf5e 	b.w	86840 <_fflush_r>
   86984:	0008a74c 	.word	0x0008a74c
   86988:	00086841 	.word	0x00086841
   8698c:	20070010 	.word	0x20070010

00086990 <__fp_lock>:
   86990:	2000      	movs	r0, #0
   86992:	4770      	bx	lr

00086994 <__fp_unlock>:
   86994:	2000      	movs	r0, #0
   86996:	4770      	bx	lr

00086998 <_cleanup_r>:
   86998:	4901      	ldr	r1, [pc, #4]	; (869a0 <_cleanup_r+0x8>)
   8699a:	f000 bbf0 	b.w	8717e <_fwalk>
   8699e:	bf00      	nop
   869a0:	00089e8d 	.word	0x00089e8d

000869a4 <std.isra.0>:
   869a4:	2300      	movs	r3, #0
   869a6:	b510      	push	{r4, lr}
   869a8:	4604      	mov	r4, r0
   869aa:	6003      	str	r3, [r0, #0]
   869ac:	6043      	str	r3, [r0, #4]
   869ae:	6083      	str	r3, [r0, #8]
   869b0:	8181      	strh	r1, [r0, #12]
   869b2:	6643      	str	r3, [r0, #100]	; 0x64
   869b4:	81c2      	strh	r2, [r0, #14]
   869b6:	6103      	str	r3, [r0, #16]
   869b8:	6143      	str	r3, [r0, #20]
   869ba:	6183      	str	r3, [r0, #24]
   869bc:	4619      	mov	r1, r3
   869be:	2208      	movs	r2, #8
   869c0:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   869c4:	f7fd fb09 	bl	83fda <memset>
   869c8:	4804      	ldr	r0, [pc, #16]	; (869dc <std.isra.0+0x38>)
   869ca:	4905      	ldr	r1, [pc, #20]	; (869e0 <std.isra.0+0x3c>)
   869cc:	4a05      	ldr	r2, [pc, #20]	; (869e4 <std.isra.0+0x40>)
   869ce:	4b06      	ldr	r3, [pc, #24]	; (869e8 <std.isra.0+0x44>)
   869d0:	61e4      	str	r4, [r4, #28]
   869d2:	6220      	str	r0, [r4, #32]
   869d4:	6261      	str	r1, [r4, #36]	; 0x24
   869d6:	62a2      	str	r2, [r4, #40]	; 0x28
   869d8:	62e3      	str	r3, [r4, #44]	; 0x2c
   869da:	bd10      	pop	{r4, pc}
   869dc:	00088bdd 	.word	0x00088bdd
   869e0:	00088c03 	.word	0x00088c03
   869e4:	00088c3f 	.word	0x00088c3f
   869e8:	00088c63 	.word	0x00088c63

000869ec <__sfmoreglue>:
   869ec:	b570      	push	{r4, r5, r6, lr}
   869ee:	2568      	movs	r5, #104	; 0x68
   869f0:	434d      	muls	r5, r1
   869f2:	460e      	mov	r6, r1
   869f4:	f105 010c 	add.w	r1, r5, #12
   869f8:	f001 f80e 	bl	87a18 <_malloc_r>
   869fc:	4604      	mov	r4, r0
   869fe:	b140      	cbz	r0, 86a12 <__sfmoreglue+0x26>
   86a00:	f100 000c 	add.w	r0, r0, #12
   86a04:	2100      	movs	r1, #0
   86a06:	e884 0042 	stmia.w	r4, {r1, r6}
   86a0a:	60a0      	str	r0, [r4, #8]
   86a0c:	462a      	mov	r2, r5
   86a0e:	f7fd fae4 	bl	83fda <memset>
   86a12:	4620      	mov	r0, r4
   86a14:	bd70      	pop	{r4, r5, r6, pc}

00086a16 <_cleanup>:
   86a16:	4b02      	ldr	r3, [pc, #8]	; (86a20 <_cleanup+0xa>)
   86a18:	6818      	ldr	r0, [r3, #0]
   86a1a:	f7ff bfbd 	b.w	86998 <_cleanup_r>
   86a1e:	bf00      	nop
   86a20:	0008a74c 	.word	0x0008a74c

00086a24 <__sinit>:
   86a24:	b538      	push	{r3, r4, r5, lr}
   86a26:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86a28:	4604      	mov	r4, r0
   86a2a:	b9eb      	cbnz	r3, 86a68 <__sinit+0x44>
   86a2c:	4a0f      	ldr	r2, [pc, #60]	; (86a6c <__sinit+0x48>)
   86a2e:	2501      	movs	r5, #1
   86a30:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   86a34:	63c2      	str	r2, [r0, #60]	; 0x3c
   86a36:	6385      	str	r5, [r0, #56]	; 0x38
   86a38:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   86a3c:	2003      	movs	r0, #3
   86a3e:	461a      	mov	r2, r3
   86a40:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   86a44:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   86a48:	6860      	ldr	r0, [r4, #4]
   86a4a:	2104      	movs	r1, #4
   86a4c:	f7ff ffaa 	bl	869a4 <std.isra.0>
   86a50:	68a0      	ldr	r0, [r4, #8]
   86a52:	2109      	movs	r1, #9
   86a54:	462a      	mov	r2, r5
   86a56:	f7ff ffa5 	bl	869a4 <std.isra.0>
   86a5a:	68e0      	ldr	r0, [r4, #12]
   86a5c:	2112      	movs	r1, #18
   86a5e:	2202      	movs	r2, #2
   86a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86a64:	f7ff bf9e 	b.w	869a4 <std.isra.0>
   86a68:	bd38      	pop	{r3, r4, r5, pc}
   86a6a:	bf00      	nop
   86a6c:	00086999 	.word	0x00086999

00086a70 <__sfp>:
   86a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86a72:	4b1d      	ldr	r3, [pc, #116]	; (86ae8 <__sfp+0x78>)
   86a74:	4607      	mov	r7, r0
   86a76:	681e      	ldr	r6, [r3, #0]
   86a78:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   86a7a:	b910      	cbnz	r0, 86a82 <__sfp+0x12>
   86a7c:	4630      	mov	r0, r6
   86a7e:	f7ff ffd1 	bl	86a24 <__sinit>
   86a82:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   86a86:	68b4      	ldr	r4, [r6, #8]
   86a88:	6871      	ldr	r1, [r6, #4]
   86a8a:	3901      	subs	r1, #1
   86a8c:	d404      	bmi.n	86a98 <__sfp+0x28>
   86a8e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   86a92:	b185      	cbz	r5, 86ab6 <__sfp+0x46>
   86a94:	3468      	adds	r4, #104	; 0x68
   86a96:	e7f8      	b.n	86a8a <__sfp+0x1a>
   86a98:	6832      	ldr	r2, [r6, #0]
   86a9a:	b10a      	cbz	r2, 86aa0 <__sfp+0x30>
   86a9c:	6836      	ldr	r6, [r6, #0]
   86a9e:	e7f2      	b.n	86a86 <__sfp+0x16>
   86aa0:	4638      	mov	r0, r7
   86aa2:	2104      	movs	r1, #4
   86aa4:	f7ff ffa2 	bl	869ec <__sfmoreglue>
   86aa8:	6030      	str	r0, [r6, #0]
   86aaa:	2800      	cmp	r0, #0
   86aac:	d1f6      	bne.n	86a9c <__sfp+0x2c>
   86aae:	240c      	movs	r4, #12
   86ab0:	603c      	str	r4, [r7, #0]
   86ab2:	4604      	mov	r4, r0
   86ab4:	e015      	b.n	86ae2 <__sfp+0x72>
   86ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   86aba:	2001      	movs	r0, #1
   86abc:	81a0      	strh	r0, [r4, #12]
   86abe:	81e3      	strh	r3, [r4, #14]
   86ac0:	6665      	str	r5, [r4, #100]	; 0x64
   86ac2:	6025      	str	r5, [r4, #0]
   86ac4:	60a5      	str	r5, [r4, #8]
   86ac6:	6065      	str	r5, [r4, #4]
   86ac8:	6125      	str	r5, [r4, #16]
   86aca:	6165      	str	r5, [r4, #20]
   86acc:	61a5      	str	r5, [r4, #24]
   86ace:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   86ad2:	4629      	mov	r1, r5
   86ad4:	2208      	movs	r2, #8
   86ad6:	f7fd fa80 	bl	83fda <memset>
   86ada:	6325      	str	r5, [r4, #48]	; 0x30
   86adc:	6365      	str	r5, [r4, #52]	; 0x34
   86ade:	6465      	str	r5, [r4, #68]	; 0x44
   86ae0:	64a5      	str	r5, [r4, #72]	; 0x48
   86ae2:	4620      	mov	r0, r4
   86ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86ae6:	bf00      	nop
   86ae8:	0008a74c 	.word	0x0008a74c

00086aec <__sfp_lock_acquire>:
   86aec:	4770      	bx	lr

00086aee <__sfp_lock_release>:
   86aee:	4770      	bx	lr

00086af0 <__sinit_lock_acquire>:
   86af0:	4770      	bx	lr

00086af2 <__sinit_lock_release>:
   86af2:	4770      	bx	lr

00086af4 <__fp_lock_all>:
   86af4:	4b02      	ldr	r3, [pc, #8]	; (86b00 <__fp_lock_all+0xc>)
   86af6:	4903      	ldr	r1, [pc, #12]	; (86b04 <__fp_lock_all+0x10>)
   86af8:	6818      	ldr	r0, [r3, #0]
   86afa:	f000 bb40 	b.w	8717e <_fwalk>
   86afe:	bf00      	nop
   86b00:	20070010 	.word	0x20070010
   86b04:	00086991 	.word	0x00086991

00086b08 <__fp_unlock_all>:
   86b08:	4b02      	ldr	r3, [pc, #8]	; (86b14 <__fp_unlock_all+0xc>)
   86b0a:	4903      	ldr	r1, [pc, #12]	; (86b18 <__fp_unlock_all+0x10>)
   86b0c:	6818      	ldr	r0, [r3, #0]
   86b0e:	f000 bb36 	b.w	8717e <_fwalk>
   86b12:	bf00      	nop
   86b14:	20070010 	.word	0x20070010
   86b18:	00086995 	.word	0x00086995

00086b1c <_fputwc_r>:
   86b1c:	8993      	ldrh	r3, [r2, #12]
   86b1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   86b22:	4614      	mov	r4, r2
   86b24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   86b28:	4680      	mov	r8, r0
   86b2a:	b210      	sxth	r0, r2
   86b2c:	460e      	mov	r6, r1
   86b2e:	b930      	cbnz	r0, 86b3e <_fputwc_r+0x22>
   86b30:	6e67      	ldr	r7, [r4, #100]	; 0x64
   86b32:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   86b36:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   86b3a:	81a1      	strh	r1, [r4, #12]
   86b3c:	6663      	str	r3, [r4, #100]	; 0x64
   86b3e:	f000 fed1 	bl	878e4 <__locale_mb_cur_max>
   86b42:	2801      	cmp	r0, #1
   86b44:	d106      	bne.n	86b54 <_fputwc_r+0x38>
   86b46:	b12e      	cbz	r6, 86b54 <_fputwc_r+0x38>
   86b48:	2eff      	cmp	r6, #255	; 0xff
   86b4a:	d803      	bhi.n	86b54 <_fputwc_r+0x38>
   86b4c:	f88d 6004 	strb.w	r6, [sp, #4]
   86b50:	4607      	mov	r7, r0
   86b52:	e00f      	b.n	86b74 <_fputwc_r+0x58>
   86b54:	4632      	mov	r2, r6
   86b56:	4640      	mov	r0, r8
   86b58:	a901      	add	r1, sp, #4
   86b5a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   86b5e:	f003 f8ad 	bl	89cbc <_wcrtomb_r>
   86b62:	1c42      	adds	r2, r0, #1
   86b64:	4607      	mov	r7, r0
   86b66:	d105      	bne.n	86b74 <_fputwc_r+0x58>
   86b68:	89a2      	ldrh	r2, [r4, #12]
   86b6a:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   86b6e:	81a0      	strh	r0, [r4, #12]
   86b70:	4638      	mov	r0, r7
   86b72:	e031      	b.n	86bd8 <_fputwc_r+0xbc>
   86b74:	2500      	movs	r5, #0
   86b76:	42bd      	cmp	r5, r7
   86b78:	d02a      	beq.n	86bd0 <_fputwc_r+0xb4>
   86b7a:	68a1      	ldr	r1, [r4, #8]
   86b7c:	ab01      	add	r3, sp, #4
   86b7e:	1e4a      	subs	r2, r1, #1
   86b80:	2a00      	cmp	r2, #0
   86b82:	60a2      	str	r2, [r4, #8]
   86b84:	da1a      	bge.n	86bbc <_fputwc_r+0xa0>
   86b86:	69a0      	ldr	r0, [r4, #24]
   86b88:	4282      	cmp	r2, r0
   86b8a:	db0c      	blt.n	86ba6 <_fputwc_r+0x8a>
   86b8c:	6821      	ldr	r1, [r4, #0]
   86b8e:	5d5a      	ldrb	r2, [r3, r5]
   86b90:	700a      	strb	r2, [r1, #0]
   86b92:	6823      	ldr	r3, [r4, #0]
   86b94:	7819      	ldrb	r1, [r3, #0]
   86b96:	290a      	cmp	r1, #10
   86b98:	d003      	beq.n	86ba2 <_fputwc_r+0x86>
   86b9a:	3301      	adds	r3, #1
   86b9c:	2200      	movs	r2, #0
   86b9e:	6023      	str	r3, [r4, #0]
   86ba0:	e013      	b.n	86bca <_fputwc_r+0xae>
   86ba2:	4640      	mov	r0, r8
   86ba4:	e001      	b.n	86baa <_fputwc_r+0x8e>
   86ba6:	5d59      	ldrb	r1, [r3, r5]
   86ba8:	4640      	mov	r0, r8
   86baa:	4622      	mov	r2, r4
   86bac:	f003 f82c 	bl	89c08 <__swbuf_r>
   86bb0:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   86bb4:	4248      	negs	r0, r1
   86bb6:	eb50 0201 	adcs.w	r2, r0, r1
   86bba:	e006      	b.n	86bca <_fputwc_r+0xae>
   86bbc:	6820      	ldr	r0, [r4, #0]
   86bbe:	5d59      	ldrb	r1, [r3, r5]
   86bc0:	7001      	strb	r1, [r0, #0]
   86bc2:	6822      	ldr	r2, [r4, #0]
   86bc4:	1c53      	adds	r3, r2, #1
   86bc6:	6023      	str	r3, [r4, #0]
   86bc8:	e000      	b.n	86bcc <_fputwc_r+0xb0>
   86bca:	b91a      	cbnz	r2, 86bd4 <_fputwc_r+0xb8>
   86bcc:	3501      	adds	r5, #1
   86bce:	e7d2      	b.n	86b76 <_fputwc_r+0x5a>
   86bd0:	4630      	mov	r0, r6
   86bd2:	e001      	b.n	86bd8 <_fputwc_r+0xbc>
   86bd4:	f04f 30ff 	mov.w	r0, #4294967295
   86bd8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00086bdc <fputwc>:
   86bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86bde:	4c08      	ldr	r4, [pc, #32]	; (86c00 <fputwc+0x24>)
   86be0:	4607      	mov	r7, r0
   86be2:	6820      	ldr	r0, [r4, #0]
   86be4:	460e      	mov	r6, r1
   86be6:	b118      	cbz	r0, 86bf0 <fputwc+0x14>
   86be8:	6b85      	ldr	r5, [r0, #56]	; 0x38
   86bea:	b90d      	cbnz	r5, 86bf0 <fputwc+0x14>
   86bec:	f7ff ff1a 	bl	86a24 <__sinit>
   86bf0:	6820      	ldr	r0, [r4, #0]
   86bf2:	4639      	mov	r1, r7
   86bf4:	4632      	mov	r2, r6
   86bf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   86bfa:	f7ff bf8f 	b.w	86b1c <_fputwc_r>
   86bfe:	bf00      	nop
   86c00:	20070010 	.word	0x20070010

00086c04 <_fread_r>:
   86c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86c08:	461e      	mov	r6, r3
   86c0a:	4613      	mov	r3, r2
   86c0c:	4373      	muls	r3, r6
   86c0e:	4682      	mov	sl, r0
   86c10:	4688      	mov	r8, r1
   86c12:	4693      	mov	fp, r2
   86c14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86c16:	4699      	mov	r9, r3
   86c18:	d03e      	beq.n	86c98 <_fread_r+0x94>
   86c1a:	b118      	cbz	r0, 86c24 <_fread_r+0x20>
   86c1c:	6b81      	ldr	r1, [r0, #56]	; 0x38
   86c1e:	b909      	cbnz	r1, 86c24 <_fread_r+0x20>
   86c20:	f7ff ff00 	bl	86a24 <__sinit>
   86c24:	f7ff ff62 	bl	86aec <__sfp_lock_acquire>
   86c28:	89a0      	ldrh	r0, [r4, #12]
   86c2a:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   86c2e:	b215      	sxth	r5, r2
   86c30:	b935      	cbnz	r5, 86c40 <_fread_r+0x3c>
   86c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
   86c34:	f440 5700 	orr.w	r7, r0, #8192	; 0x2000
   86c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
   86c3c:	81a7      	strh	r7, [r4, #12]
   86c3e:	6661      	str	r1, [r4, #100]	; 0x64
   86c40:	6860      	ldr	r0, [r4, #4]
   86c42:	2800      	cmp	r0, #0
   86c44:	da01      	bge.n	86c4a <_fread_r+0x46>
   86c46:	2200      	movs	r2, #0
   86c48:	6062      	str	r2, [r4, #4]
   86c4a:	464d      	mov	r5, r9
   86c4c:	6867      	ldr	r7, [r4, #4]
   86c4e:	4640      	mov	r0, r8
   86c50:	42bd      	cmp	r5, r7
   86c52:	6821      	ldr	r1, [r4, #0]
   86c54:	d914      	bls.n	86c80 <_fread_r+0x7c>
   86c56:	463a      	mov	r2, r7
   86c58:	f7fd f9b6 	bl	83fc8 <memcpy>
   86c5c:	6822      	ldr	r2, [r4, #0]
   86c5e:	4650      	mov	r0, sl
   86c60:	19d3      	adds	r3, r2, r7
   86c62:	6023      	str	r3, [r4, #0]
   86c64:	4621      	mov	r1, r4
   86c66:	44b8      	add	r8, r7
   86c68:	1bed      	subs	r5, r5, r7
   86c6a:	f001 fec8 	bl	889fe <__srefill_r>
   86c6e:	2800      	cmp	r0, #0
   86c70:	d0ec      	beq.n	86c4c <_fread_r+0x48>
   86c72:	ebc5 0509 	rsb	r5, r5, r9
   86c76:	f7ff ff3a 	bl	86aee <__sfp_lock_release>
   86c7a:	fbb5 f6fb 	udiv	r6, r5, fp
   86c7e:	e00c      	b.n	86c9a <_fread_r+0x96>
   86c80:	462a      	mov	r2, r5
   86c82:	f7fd f9a1 	bl	83fc8 <memcpy>
   86c86:	6863      	ldr	r3, [r4, #4]
   86c88:	6820      	ldr	r0, [r4, #0]
   86c8a:	1b59      	subs	r1, r3, r5
   86c8c:	1945      	adds	r5, r0, r5
   86c8e:	6061      	str	r1, [r4, #4]
   86c90:	6025      	str	r5, [r4, #0]
   86c92:	f7ff ff2c 	bl	86aee <__sfp_lock_release>
   86c96:	e000      	b.n	86c9a <_fread_r+0x96>
   86c98:	461e      	mov	r6, r3
   86c9a:	4630      	mov	r0, r6
   86c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086ca0 <fread>:
   86ca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   86ca2:	9300      	str	r3, [sp, #0]
   86ca4:	4b05      	ldr	r3, [pc, #20]	; (86cbc <fread+0x1c>)
   86ca6:	4606      	mov	r6, r0
   86ca8:	460d      	mov	r5, r1
   86caa:	4614      	mov	r4, r2
   86cac:	6818      	ldr	r0, [r3, #0]
   86cae:	4631      	mov	r1, r6
   86cb0:	462a      	mov	r2, r5
   86cb2:	4623      	mov	r3, r4
   86cb4:	f7ff ffa6 	bl	86c04 <_fread_r>
   86cb8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   86cba:	bf00      	nop
   86cbc:	20070010 	.word	0x20070010

00086cc0 <_malloc_trim_r>:
   86cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86cc2:	4d23      	ldr	r5, [pc, #140]	; (86d50 <_malloc_trim_r+0x90>)
   86cc4:	460e      	mov	r6, r1
   86cc6:	4604      	mov	r4, r0
   86cc8:	f001 f930 	bl	87f2c <__malloc_lock>
   86ccc:	68ab      	ldr	r3, [r5, #8]
   86cce:	685f      	ldr	r7, [r3, #4]
   86cd0:	f027 0703 	bic.w	r7, r7, #3
   86cd4:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   86cd8:	1b81      	subs	r1, r0, r6
   86cda:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   86cde:	f022 060f 	bic.w	r6, r2, #15
   86ce2:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   86ce6:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   86cea:	da04      	bge.n	86cf6 <_malloc_trim_r+0x36>
   86cec:	4620      	mov	r0, r4
   86cee:	f001 f91e 	bl	87f2e <__malloc_unlock>
   86cf2:	2000      	movs	r0, #0
   86cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86cf6:	2100      	movs	r1, #0
   86cf8:	4620      	mov	r0, r4
   86cfa:	f001 ff2b 	bl	88b54 <_sbrk_r>
   86cfe:	68ab      	ldr	r3, [r5, #8]
   86d00:	19d9      	adds	r1, r3, r7
   86d02:	4288      	cmp	r0, r1
   86d04:	d1f2      	bne.n	86cec <_malloc_trim_r+0x2c>
   86d06:	4271      	negs	r1, r6
   86d08:	4620      	mov	r0, r4
   86d0a:	f001 ff23 	bl	88b54 <_sbrk_r>
   86d0e:	3001      	adds	r0, #1
   86d10:	d110      	bne.n	86d34 <_malloc_trim_r+0x74>
   86d12:	2100      	movs	r1, #0
   86d14:	4620      	mov	r0, r4
   86d16:	f001 ff1d 	bl	88b54 <_sbrk_r>
   86d1a:	68ab      	ldr	r3, [r5, #8]
   86d1c:	1ac2      	subs	r2, r0, r3
   86d1e:	2a0f      	cmp	r2, #15
   86d20:	dde4      	ble.n	86cec <_malloc_trim_r+0x2c>
   86d22:	490c      	ldr	r1, [pc, #48]	; (86d54 <_malloc_trim_r+0x94>)
   86d24:	f042 0201 	orr.w	r2, r2, #1
   86d28:	6809      	ldr	r1, [r1, #0]
   86d2a:	605a      	str	r2, [r3, #4]
   86d2c:	1a40      	subs	r0, r0, r1
   86d2e:	490a      	ldr	r1, [pc, #40]	; (86d58 <_malloc_trim_r+0x98>)
   86d30:	6008      	str	r0, [r1, #0]
   86d32:	e7db      	b.n	86cec <_malloc_trim_r+0x2c>
   86d34:	4b08      	ldr	r3, [pc, #32]	; (86d58 <_malloc_trim_r+0x98>)
   86d36:	68a8      	ldr	r0, [r5, #8]
   86d38:	681a      	ldr	r2, [r3, #0]
   86d3a:	1bbf      	subs	r7, r7, r6
   86d3c:	f047 0701 	orr.w	r7, r7, #1
   86d40:	6047      	str	r7, [r0, #4]
   86d42:	1b96      	subs	r6, r2, r6
   86d44:	4620      	mov	r0, r4
   86d46:	601e      	str	r6, [r3, #0]
   86d48:	f001 f8f1 	bl	87f2e <__malloc_unlock>
   86d4c:	2001      	movs	r0, #1
   86d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86d50:	200704e8 	.word	0x200704e8
   86d54:	200708f0 	.word	0x200708f0
   86d58:	2007ab08 	.word	0x2007ab08

00086d5c <_free_r>:
   86d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86d5e:	4606      	mov	r6, r0
   86d60:	460d      	mov	r5, r1
   86d62:	2900      	cmp	r1, #0
   86d64:	f000 80a6 	beq.w	86eb4 <_free_r+0x158>
   86d68:	f001 f8e0 	bl	87f2c <__malloc_lock>
   86d6c:	f855 cc04 	ldr.w	ip, [r5, #-4]
   86d70:	4f51      	ldr	r7, [pc, #324]	; (86eb8 <_free_r+0x15c>)
   86d72:	f1a5 0308 	sub.w	r3, r5, #8
   86d76:	f02c 0201 	bic.w	r2, ip, #1
   86d7a:	189c      	adds	r4, r3, r2
   86d7c:	68b9      	ldr	r1, [r7, #8]
   86d7e:	6860      	ldr	r0, [r4, #4]
   86d80:	428c      	cmp	r4, r1
   86d82:	f020 0003 	bic.w	r0, r0, #3
   86d86:	f00c 0101 	and.w	r1, ip, #1
   86d8a:	d11c      	bne.n	86dc6 <_free_r+0x6a>
   86d8c:	1882      	adds	r2, r0, r2
   86d8e:	b939      	cbnz	r1, 86da0 <_free_r+0x44>
   86d90:	f855 1c08 	ldr.w	r1, [r5, #-8]
   86d94:	1a5b      	subs	r3, r3, r1
   86d96:	6898      	ldr	r0, [r3, #8]
   86d98:	1852      	adds	r2, r2, r1
   86d9a:	68d9      	ldr	r1, [r3, #12]
   86d9c:	60c1      	str	r1, [r0, #12]
   86d9e:	6088      	str	r0, [r1, #8]
   86da0:	4845      	ldr	r0, [pc, #276]	; (86eb8 <_free_r+0x15c>)
   86da2:	f042 0101 	orr.w	r1, r2, #1
   86da6:	6059      	str	r1, [r3, #4]
   86da8:	6083      	str	r3, [r0, #8]
   86daa:	4b44      	ldr	r3, [pc, #272]	; (86ebc <_free_r+0x160>)
   86dac:	6819      	ldr	r1, [r3, #0]
   86dae:	428a      	cmp	r2, r1
   86db0:	d304      	bcc.n	86dbc <_free_r+0x60>
   86db2:	4a43      	ldr	r2, [pc, #268]	; (86ec0 <_free_r+0x164>)
   86db4:	4630      	mov	r0, r6
   86db6:	6811      	ldr	r1, [r2, #0]
   86db8:	f7ff ff82 	bl	86cc0 <_malloc_trim_r>
   86dbc:	4630      	mov	r0, r6
   86dbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   86dc2:	f001 b8b4 	b.w	87f2e <__malloc_unlock>
   86dc6:	6060      	str	r0, [r4, #4]
   86dc8:	b959      	cbnz	r1, 86de2 <_free_r+0x86>
   86dca:	f855 5c08 	ldr.w	r5, [r5, #-8]
   86dce:	3708      	adds	r7, #8
   86dd0:	1b5b      	subs	r3, r3, r5
   86dd2:	1952      	adds	r2, r2, r5
   86dd4:	689d      	ldr	r5, [r3, #8]
   86dd6:	42bd      	cmp	r5, r7
   86dd8:	d005      	beq.n	86de6 <_free_r+0x8a>
   86dda:	68df      	ldr	r7, [r3, #12]
   86ddc:	60ef      	str	r7, [r5, #12]
   86dde:	60bd      	str	r5, [r7, #8]
   86de0:	e002      	b.n	86de8 <_free_r+0x8c>
   86de2:	2100      	movs	r1, #0
   86de4:	e000      	b.n	86de8 <_free_r+0x8c>
   86de6:	2101      	movs	r1, #1
   86de8:	1825      	adds	r5, r4, r0
   86dea:	686d      	ldr	r5, [r5, #4]
   86dec:	f015 0f01 	tst.w	r5, #1
   86df0:	d10f      	bne.n	86e12 <_free_r+0xb6>
   86df2:	1812      	adds	r2, r2, r0
   86df4:	b949      	cbnz	r1, 86e0a <_free_r+0xae>
   86df6:	68a0      	ldr	r0, [r4, #8]
   86df8:	4d32      	ldr	r5, [pc, #200]	; (86ec4 <_free_r+0x168>)
   86dfa:	42a8      	cmp	r0, r5
   86dfc:	d105      	bne.n	86e0a <_free_r+0xae>
   86dfe:	60eb      	str	r3, [r5, #12]
   86e00:	60ab      	str	r3, [r5, #8]
   86e02:	60d8      	str	r0, [r3, #12]
   86e04:	6098      	str	r0, [r3, #8]
   86e06:	2101      	movs	r1, #1
   86e08:	e003      	b.n	86e12 <_free_r+0xb6>
   86e0a:	68e0      	ldr	r0, [r4, #12]
   86e0c:	68a4      	ldr	r4, [r4, #8]
   86e0e:	60e0      	str	r0, [r4, #12]
   86e10:	6084      	str	r4, [r0, #8]
   86e12:	f042 0001 	orr.w	r0, r2, #1
   86e16:	6058      	str	r0, [r3, #4]
   86e18:	509a      	str	r2, [r3, r2]
   86e1a:	2900      	cmp	r1, #0
   86e1c:	d1ce      	bne.n	86dbc <_free_r+0x60>
   86e1e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   86e22:	d20c      	bcs.n	86e3e <_free_r+0xe2>
   86e24:	08d2      	lsrs	r2, r2, #3
   86e26:	1090      	asrs	r0, r2, #2
   86e28:	2401      	movs	r4, #1
   86e2a:	fa04 f400 	lsl.w	r4, r4, r0
   86e2e:	4922      	ldr	r1, [pc, #136]	; (86eb8 <_free_r+0x15c>)
   86e30:	6848      	ldr	r0, [r1, #4]
   86e32:	4320      	orrs	r0, r4
   86e34:	6048      	str	r0, [r1, #4]
   86e36:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   86e3a:	6881      	ldr	r1, [r0, #8]
   86e3c:	e035      	b.n	86eaa <_free_r+0x14e>
   86e3e:	0a54      	lsrs	r4, r2, #9
   86e40:	2c04      	cmp	r4, #4
   86e42:	d802      	bhi.n	86e4a <_free_r+0xee>
   86e44:	0994      	lsrs	r4, r2, #6
   86e46:	3438      	adds	r4, #56	; 0x38
   86e48:	e016      	b.n	86e78 <_free_r+0x11c>
   86e4a:	2c14      	cmp	r4, #20
   86e4c:	d801      	bhi.n	86e52 <_free_r+0xf6>
   86e4e:	345b      	adds	r4, #91	; 0x5b
   86e50:	e012      	b.n	86e78 <_free_r+0x11c>
   86e52:	2c54      	cmp	r4, #84	; 0x54
   86e54:	d802      	bhi.n	86e5c <_free_r+0x100>
   86e56:	0b14      	lsrs	r4, r2, #12
   86e58:	346e      	adds	r4, #110	; 0x6e
   86e5a:	e00d      	b.n	86e78 <_free_r+0x11c>
   86e5c:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   86e60:	d802      	bhi.n	86e68 <_free_r+0x10c>
   86e62:	0bd4      	lsrs	r4, r2, #15
   86e64:	3477      	adds	r4, #119	; 0x77
   86e66:	e007      	b.n	86e78 <_free_r+0x11c>
   86e68:	f240 5554 	movw	r5, #1364	; 0x554
   86e6c:	42ac      	cmp	r4, r5
   86e6e:	d802      	bhi.n	86e76 <_free_r+0x11a>
   86e70:	0c94      	lsrs	r4, r2, #18
   86e72:	347c      	adds	r4, #124	; 0x7c
   86e74:	e000      	b.n	86e78 <_free_r+0x11c>
   86e76:	247e      	movs	r4, #126	; 0x7e
   86e78:	4d0f      	ldr	r5, [pc, #60]	; (86eb8 <_free_r+0x15c>)
   86e7a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   86e7e:	6881      	ldr	r1, [r0, #8]
   86e80:	4281      	cmp	r1, r0
   86e82:	d10c      	bne.n	86e9e <_free_r+0x142>
   86e84:	2201      	movs	r2, #1
   86e86:	10a4      	asrs	r4, r4, #2
   86e88:	fa02 f404 	lsl.w	r4, r2, r4
   86e8c:	6868      	ldr	r0, [r5, #4]
   86e8e:	ea44 0200 	orr.w	r2, r4, r0
   86e92:	606a      	str	r2, [r5, #4]
   86e94:	4608      	mov	r0, r1
   86e96:	e008      	b.n	86eaa <_free_r+0x14e>
   86e98:	6889      	ldr	r1, [r1, #8]
   86e9a:	4281      	cmp	r1, r0
   86e9c:	d004      	beq.n	86ea8 <_free_r+0x14c>
   86e9e:	684c      	ldr	r4, [r1, #4]
   86ea0:	f024 0403 	bic.w	r4, r4, #3
   86ea4:	42a2      	cmp	r2, r4
   86ea6:	d3f7      	bcc.n	86e98 <_free_r+0x13c>
   86ea8:	68c8      	ldr	r0, [r1, #12]
   86eaa:	60d8      	str	r0, [r3, #12]
   86eac:	6099      	str	r1, [r3, #8]
   86eae:	6083      	str	r3, [r0, #8]
   86eb0:	60cb      	str	r3, [r1, #12]
   86eb2:	e783      	b.n	86dbc <_free_r+0x60>
   86eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86eb6:	bf00      	nop
   86eb8:	200704e8 	.word	0x200704e8
   86ebc:	200708f4 	.word	0x200708f4
   86ec0:	2007ab04 	.word	0x2007ab04
   86ec4:	200704f0 	.word	0x200704f0

00086ec8 <__sfvwrite_r>:
   86ec8:	6893      	ldr	r3, [r2, #8]
   86eca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86ece:	4606      	mov	r6, r0
   86ed0:	460c      	mov	r4, r1
   86ed2:	4691      	mov	r9, r2
   86ed4:	b90b      	cbnz	r3, 86eda <__sfvwrite_r+0x12>
   86ed6:	2000      	movs	r0, #0
   86ed8:	e14f      	b.n	8717a <__sfvwrite_r+0x2b2>
   86eda:	8988      	ldrh	r0, [r1, #12]
   86edc:	f000 0108 	and.w	r1, r0, #8
   86ee0:	b20a      	sxth	r2, r1
   86ee2:	b10a      	cbz	r2, 86ee8 <__sfvwrite_r+0x20>
   86ee4:	6923      	ldr	r3, [r4, #16]
   86ee6:	b95b      	cbnz	r3, 86f00 <__sfvwrite_r+0x38>
   86ee8:	4630      	mov	r0, r6
   86eea:	4621      	mov	r1, r4
   86eec:	f7ff fbf4 	bl	866d8 <__swsetup_r>
   86ef0:	b130      	cbz	r0, 86f00 <__sfvwrite_r+0x38>
   86ef2:	89a1      	ldrh	r1, [r4, #12]
   86ef4:	2209      	movs	r2, #9
   86ef6:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   86efa:	81a0      	strh	r0, [r4, #12]
   86efc:	6032      	str	r2, [r6, #0]
   86efe:	e13a      	b.n	87176 <__sfvwrite_r+0x2ae>
   86f00:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   86f04:	f8d9 8000 	ldr.w	r8, [r9]
   86f08:	f00a 0c02 	and.w	ip, sl, #2
   86f0c:	fa0f f58c 	sxth.w	r5, ip
   86f10:	b315      	cbz	r5, 86f58 <__sfvwrite_r+0x90>
   86f12:	f04f 0a00 	mov.w	sl, #0
   86f16:	4657      	mov	r7, sl
   86f18:	b937      	cbnz	r7, 86f28 <__sfvwrite_r+0x60>
   86f1a:	f8d8 a000 	ldr.w	sl, [r8]
   86f1e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   86f22:	f108 0808 	add.w	r8, r8, #8
   86f26:	e7f7      	b.n	86f18 <__sfvwrite_r+0x50>
   86f28:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   86f2c:	bf34      	ite	cc
   86f2e:	463b      	movcc	r3, r7
   86f30:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   86f34:	4630      	mov	r0, r6
   86f36:	69e1      	ldr	r1, [r4, #28]
   86f38:	4652      	mov	r2, sl
   86f3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   86f3c:	47a8      	blx	r5
   86f3e:	2800      	cmp	r0, #0
   86f40:	f340 8115 	ble.w	8716e <__sfvwrite_r+0x2a6>
   86f44:	f8d9 1008 	ldr.w	r1, [r9, #8]
   86f48:	4482      	add	sl, r0
   86f4a:	1a3f      	subs	r7, r7, r0
   86f4c:	1a08      	subs	r0, r1, r0
   86f4e:	f8c9 0008 	str.w	r0, [r9, #8]
   86f52:	2800      	cmp	r0, #0
   86f54:	d1e0      	bne.n	86f18 <__sfvwrite_r+0x50>
   86f56:	e7be      	b.n	86ed6 <__sfvwrite_r+0xe>
   86f58:	f01a 0a01 	ands.w	sl, sl, #1
   86f5c:	d004      	beq.n	86f68 <__sfvwrite_r+0xa0>
   86f5e:	46ab      	mov	fp, r5
   86f60:	9501      	str	r5, [sp, #4]
   86f62:	462f      	mov	r7, r5
   86f64:	46aa      	mov	sl, r5
   86f66:	e0c7      	b.n	870f8 <__sfvwrite_r+0x230>
   86f68:	4655      	mov	r5, sl
   86f6a:	b935      	cbnz	r5, 86f7a <__sfvwrite_r+0xb2>
   86f6c:	f8d8 a000 	ldr.w	sl, [r8]
   86f70:	f8d8 5004 	ldr.w	r5, [r8, #4]
   86f74:	f108 0808 	add.w	r8, r8, #8
   86f78:	e7f7      	b.n	86f6a <__sfvwrite_r+0xa2>
   86f7a:	89a2      	ldrh	r2, [r4, #12]
   86f7c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   86f80:	f402 7000 	and.w	r0, r2, #512	; 0x200
   86f84:	b203      	sxth	r3, r0
   86f86:	2b00      	cmp	r3, #0
   86f88:	d052      	beq.n	87030 <__sfvwrite_r+0x168>
   86f8a:	455d      	cmp	r5, fp
   86f8c:	d340      	bcc.n	87010 <__sfvwrite_r+0x148>
   86f8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   86f92:	d03b      	beq.n	8700c <__sfvwrite_r+0x144>
   86f94:	6963      	ldr	r3, [r4, #20]
   86f96:	f04f 0b03 	mov.w	fp, #3
   86f9a:	fb0b f303 	mul.w	r3, fp, r3
   86f9e:	6921      	ldr	r1, [r4, #16]
   86fa0:	6827      	ldr	r7, [r4, #0]
   86fa2:	2002      	movs	r0, #2
   86fa4:	1a7f      	subs	r7, r7, r1
   86fa6:	fb93 fcf0 	sdiv	ip, r3, r0
   86faa:	1c7b      	adds	r3, r7, #1
   86fac:	1958      	adds	r0, r3, r5
   86fae:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   86fb2:	4584      	cmp	ip, r0
   86fb4:	bf28      	it	cs
   86fb6:	4660      	movcs	r0, ip
   86fb8:	b213      	sxth	r3, r2
   86fba:	9001      	str	r0, [sp, #4]
   86fbc:	4630      	mov	r0, r6
   86fbe:	b17b      	cbz	r3, 86fe0 <__sfvwrite_r+0x118>
   86fc0:	9901      	ldr	r1, [sp, #4]
   86fc2:	f000 fd29 	bl	87a18 <_malloc_r>
   86fc6:	4683      	mov	fp, r0
   86fc8:	b198      	cbz	r0, 86ff2 <__sfvwrite_r+0x12a>
   86fca:	6921      	ldr	r1, [r4, #16]
   86fcc:	463a      	mov	r2, r7
   86fce:	f7fc fffb 	bl	83fc8 <memcpy>
   86fd2:	89a1      	ldrh	r1, [r4, #12]
   86fd4:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   86fd8:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   86fdc:	81a2      	strh	r2, [r4, #12]
   86fde:	e00b      	b.n	86ff8 <__sfvwrite_r+0x130>
   86fe0:	9a01      	ldr	r2, [sp, #4]
   86fe2:	f001 fb95 	bl	88710 <_realloc_r>
   86fe6:	4683      	mov	fp, r0
   86fe8:	b930      	cbnz	r0, 86ff8 <__sfvwrite_r+0x130>
   86fea:	4630      	mov	r0, r6
   86fec:	6921      	ldr	r1, [r4, #16]
   86fee:	f7ff feb5 	bl	86d5c <_free_r>
   86ff2:	230c      	movs	r3, #12
   86ff4:	6033      	str	r3, [r6, #0]
   86ff6:	e0ba      	b.n	8716e <__sfvwrite_r+0x2a6>
   86ff8:	9901      	ldr	r1, [sp, #4]
   86ffa:	eb0b 0307 	add.w	r3, fp, r7
   86ffe:	1bcf      	subs	r7, r1, r7
   87000:	f8c4 b010 	str.w	fp, [r4, #16]
   87004:	6023      	str	r3, [r4, #0]
   87006:	6161      	str	r1, [r4, #20]
   87008:	46ab      	mov	fp, r5
   8700a:	60a7      	str	r7, [r4, #8]
   8700c:	455d      	cmp	r5, fp
   8700e:	d200      	bcs.n	87012 <__sfvwrite_r+0x14a>
   87010:	46ab      	mov	fp, r5
   87012:	465a      	mov	r2, fp
   87014:	4651      	mov	r1, sl
   87016:	6820      	ldr	r0, [r4, #0]
   87018:	f000 ff6e 	bl	87ef8 <memmove>
   8701c:	68a0      	ldr	r0, [r4, #8]
   8701e:	6823      	ldr	r3, [r4, #0]
   87020:	ebcb 0200 	rsb	r2, fp, r0
   87024:	eb03 010b 	add.w	r1, r3, fp
   87028:	60a2      	str	r2, [r4, #8]
   8702a:	6021      	str	r1, [r4, #0]
   8702c:	46ab      	mov	fp, r5
   8702e:	e02a      	b.n	87086 <__sfvwrite_r+0x1be>
   87030:	6820      	ldr	r0, [r4, #0]
   87032:	6921      	ldr	r1, [r4, #16]
   87034:	4288      	cmp	r0, r1
   87036:	d90f      	bls.n	87058 <__sfvwrite_r+0x190>
   87038:	455d      	cmp	r5, fp
   8703a:	d90d      	bls.n	87058 <__sfvwrite_r+0x190>
   8703c:	4651      	mov	r1, sl
   8703e:	465a      	mov	r2, fp
   87040:	f000 ff5a 	bl	87ef8 <memmove>
   87044:	6822      	ldr	r2, [r4, #0]
   87046:	4621      	mov	r1, r4
   87048:	eb02 000b 	add.w	r0, r2, fp
   8704c:	6020      	str	r0, [r4, #0]
   8704e:	4630      	mov	r0, r6
   87050:	f7ff fbf6 	bl	86840 <_fflush_r>
   87054:	b1b8      	cbz	r0, 87086 <__sfvwrite_r+0x1be>
   87056:	e08a      	b.n	8716e <__sfvwrite_r+0x2a6>
   87058:	6963      	ldr	r3, [r4, #20]
   8705a:	429d      	cmp	r5, r3
   8705c:	d308      	bcc.n	87070 <__sfvwrite_r+0x1a8>
   8705e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   87060:	4630      	mov	r0, r6
   87062:	69e1      	ldr	r1, [r4, #28]
   87064:	4652      	mov	r2, sl
   87066:	47b8      	blx	r7
   87068:	f1b0 0b00 	subs.w	fp, r0, #0
   8706c:	dc0b      	bgt.n	87086 <__sfvwrite_r+0x1be>
   8706e:	e07e      	b.n	8716e <__sfvwrite_r+0x2a6>
   87070:	4651      	mov	r1, sl
   87072:	462a      	mov	r2, r5
   87074:	f000 ff40 	bl	87ef8 <memmove>
   87078:	68a2      	ldr	r2, [r4, #8]
   8707a:	6823      	ldr	r3, [r4, #0]
   8707c:	1b50      	subs	r0, r2, r5
   8707e:	1959      	adds	r1, r3, r5
   87080:	46ab      	mov	fp, r5
   87082:	60a0      	str	r0, [r4, #8]
   87084:	6021      	str	r1, [r4, #0]
   87086:	f8d9 0008 	ldr.w	r0, [r9, #8]
   8708a:	44da      	add	sl, fp
   8708c:	ebcb 0200 	rsb	r2, fp, r0
   87090:	ebcb 0505 	rsb	r5, fp, r5
   87094:	f8c9 2008 	str.w	r2, [r9, #8]
   87098:	2a00      	cmp	r2, #0
   8709a:	f47f af66 	bne.w	86f6a <__sfvwrite_r+0xa2>
   8709e:	e71a      	b.n	86ed6 <__sfvwrite_r+0xe>
   870a0:	9801      	ldr	r0, [sp, #4]
   870a2:	2800      	cmp	r0, #0
   870a4:	d032      	beq.n	8710c <__sfvwrite_r+0x244>
   870a6:	6820      	ldr	r0, [r4, #0]
   870a8:	6921      	ldr	r1, [r4, #16]
   870aa:	45d3      	cmp	fp, sl
   870ac:	bf34      	ite	cc
   870ae:	465b      	movcc	r3, fp
   870b0:	4653      	movcs	r3, sl
   870b2:	4288      	cmp	r0, r1
   870b4:	68a5      	ldr	r5, [r4, #8]
   870b6:	f8d4 e014 	ldr.w	lr, [r4, #20]
   870ba:	d937      	bls.n	8712c <__sfvwrite_r+0x264>
   870bc:	4475      	add	r5, lr
   870be:	42ab      	cmp	r3, r5
   870c0:	dd34      	ble.n	8712c <__sfvwrite_r+0x264>
   870c2:	4639      	mov	r1, r7
   870c4:	462a      	mov	r2, r5
   870c6:	f000 ff17 	bl	87ef8 <memmove>
   870ca:	6820      	ldr	r0, [r4, #0]
   870cc:	4621      	mov	r1, r4
   870ce:	1943      	adds	r3, r0, r5
   870d0:	6023      	str	r3, [r4, #0]
   870d2:	4630      	mov	r0, r6
   870d4:	f7ff fbb4 	bl	86840 <_fflush_r>
   870d8:	2800      	cmp	r0, #0
   870da:	d148      	bne.n	8716e <__sfvwrite_r+0x2a6>
   870dc:	ebbb 0b05 	subs.w	fp, fp, r5
   870e0:	d03d      	beq.n	8715e <__sfvwrite_r+0x296>
   870e2:	f8d9 2008 	ldr.w	r2, [r9, #8]
   870e6:	197f      	adds	r7, r7, r5
   870e8:	ebc5 0a0a 	rsb	sl, r5, sl
   870ec:	1b55      	subs	r5, r2, r5
   870ee:	f8c9 5008 	str.w	r5, [r9, #8]
   870f2:	2d00      	cmp	r5, #0
   870f4:	f43f aeef 	beq.w	86ed6 <__sfvwrite_r+0xe>
   870f8:	f1ba 0f00 	cmp.w	sl, #0
   870fc:	d1d0      	bne.n	870a0 <__sfvwrite_r+0x1d8>
   870fe:	2100      	movs	r1, #0
   87100:	e898 0480 	ldmia.w	r8, {r7, sl}
   87104:	9101      	str	r1, [sp, #4]
   87106:	f108 0808 	add.w	r8, r8, #8
   8710a:	e7f5      	b.n	870f8 <__sfvwrite_r+0x230>
   8710c:	4638      	mov	r0, r7
   8710e:	210a      	movs	r1, #10
   87110:	4652      	mov	r2, sl
   87112:	f000 fee3 	bl	87edc <memchr>
   87116:	b120      	cbz	r0, 87122 <__sfvwrite_r+0x25a>
   87118:	f100 0101 	add.w	r1, r0, #1
   8711c:	ebc7 0b01 	rsb	fp, r7, r1
   87120:	e001      	b.n	87126 <__sfvwrite_r+0x25e>
   87122:	f10a 0b01 	add.w	fp, sl, #1
   87126:	2201      	movs	r2, #1
   87128:	9201      	str	r2, [sp, #4]
   8712a:	e7bc      	b.n	870a6 <__sfvwrite_r+0x1de>
   8712c:	4573      	cmp	r3, lr
   8712e:	db08      	blt.n	87142 <__sfvwrite_r+0x27a>
   87130:	6a65      	ldr	r5, [r4, #36]	; 0x24
   87132:	4630      	mov	r0, r6
   87134:	69e1      	ldr	r1, [r4, #28]
   87136:	463a      	mov	r2, r7
   87138:	4673      	mov	r3, lr
   8713a:	47a8      	blx	r5
   8713c:	1e05      	subs	r5, r0, #0
   8713e:	dccd      	bgt.n	870dc <__sfvwrite_r+0x214>
   87140:	e015      	b.n	8716e <__sfvwrite_r+0x2a6>
   87142:	461a      	mov	r2, r3
   87144:	4639      	mov	r1, r7
   87146:	9300      	str	r3, [sp, #0]
   87148:	f000 fed6 	bl	87ef8 <memmove>
   8714c:	9b00      	ldr	r3, [sp, #0]
   8714e:	6825      	ldr	r5, [r4, #0]
   87150:	68a0      	ldr	r0, [r4, #8]
   87152:	18e9      	adds	r1, r5, r3
   87154:	1ac2      	subs	r2, r0, r3
   87156:	60a2      	str	r2, [r4, #8]
   87158:	6021      	str	r1, [r4, #0]
   8715a:	461d      	mov	r5, r3
   8715c:	e7be      	b.n	870dc <__sfvwrite_r+0x214>
   8715e:	4630      	mov	r0, r6
   87160:	4621      	mov	r1, r4
   87162:	f7ff fb6d 	bl	86840 <_fflush_r>
   87166:	b910      	cbnz	r0, 8716e <__sfvwrite_r+0x2a6>
   87168:	f8cd b004 	str.w	fp, [sp, #4]
   8716c:	e7b9      	b.n	870e2 <__sfvwrite_r+0x21a>
   8716e:	89a2      	ldrh	r2, [r4, #12]
   87170:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   87174:	81a3      	strh	r3, [r4, #12]
   87176:	f04f 30ff 	mov.w	r0, #4294967295
   8717a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008717e <_fwalk>:
   8717e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87182:	4604      	mov	r4, r0
   87184:	4688      	mov	r8, r1
   87186:	f7ff fcb1 	bl	86aec <__sfp_lock_acquire>
   8718a:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   8718e:	2600      	movs	r6, #0
   87190:	b18c      	cbz	r4, 871b6 <_fwalk+0x38>
   87192:	68a5      	ldr	r5, [r4, #8]
   87194:	6867      	ldr	r7, [r4, #4]
   87196:	3f01      	subs	r7, #1
   87198:	d40b      	bmi.n	871b2 <_fwalk+0x34>
   8719a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8719e:	b133      	cbz	r3, 871ae <_fwalk+0x30>
   871a0:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   871a4:	1c43      	adds	r3, r0, #1
   871a6:	d002      	beq.n	871ae <_fwalk+0x30>
   871a8:	4628      	mov	r0, r5
   871aa:	47c0      	blx	r8
   871ac:	4306      	orrs	r6, r0
   871ae:	3568      	adds	r5, #104	; 0x68
   871b0:	e7f1      	b.n	87196 <_fwalk+0x18>
   871b2:	6824      	ldr	r4, [r4, #0]
   871b4:	e7ec      	b.n	87190 <_fwalk+0x12>
   871b6:	f7ff fc9a 	bl	86aee <__sfp_lock_release>
   871ba:	4630      	mov	r0, r6
   871bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000871c0 <_fwalk_reent>:
   871c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   871c4:	4680      	mov	r8, r0
   871c6:	4689      	mov	r9, r1
   871c8:	f7ff fc90 	bl	86aec <__sfp_lock_acquire>
   871cc:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   871d0:	2600      	movs	r6, #0
   871d2:	b194      	cbz	r4, 871fa <_fwalk_reent+0x3a>
   871d4:	68a5      	ldr	r5, [r4, #8]
   871d6:	6867      	ldr	r7, [r4, #4]
   871d8:	3f01      	subs	r7, #1
   871da:	d40c      	bmi.n	871f6 <_fwalk_reent+0x36>
   871dc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   871e0:	b13b      	cbz	r3, 871f2 <_fwalk_reent+0x32>
   871e2:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   871e6:	1c43      	adds	r3, r0, #1
   871e8:	d003      	beq.n	871f2 <_fwalk_reent+0x32>
   871ea:	4640      	mov	r0, r8
   871ec:	4629      	mov	r1, r5
   871ee:	47c8      	blx	r9
   871f0:	4306      	orrs	r6, r0
   871f2:	3568      	adds	r5, #104	; 0x68
   871f4:	e7f0      	b.n	871d8 <_fwalk_reent+0x18>
   871f6:	6824      	ldr	r4, [r4, #0]
   871f8:	e7eb      	b.n	871d2 <_fwalk_reent+0x12>
   871fa:	f7ff fc78 	bl	86aee <__sfp_lock_release>
   871fe:	4630      	mov	r0, r6
   87200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00087204 <rshift>:
   87204:	b5f0      	push	{r4, r5, r6, r7, lr}
   87206:	6906      	ldr	r6, [r0, #16]
   87208:	114b      	asrs	r3, r1, #5
   8720a:	42b3      	cmp	r3, r6
   8720c:	f100 0214 	add.w	r2, r0, #20
   87210:	da2a      	bge.n	87268 <rshift+0x64>
   87212:	1d1d      	adds	r5, r3, #4
   87214:	eb00 0686 	add.w	r6, r0, r6, lsl #2
   87218:	eb00 0385 	add.w	r3, r0, r5, lsl #2
   8721c:	3614      	adds	r6, #20
   8721e:	1d1d      	adds	r5, r3, #4
   87220:	f011 011f 	ands.w	r1, r1, #31
   87224:	d101      	bne.n	8722a <rshift+0x26>
   87226:	4613      	mov	r3, r2
   87228:	e017      	b.n	8725a <rshift+0x56>
   8722a:	685c      	ldr	r4, [r3, #4]
   8722c:	f1c1 0c20 	rsb	ip, r1, #32
   87230:	fa24 f401 	lsr.w	r4, r4, r1
   87234:	3504      	adds	r5, #4
   87236:	4613      	mov	r3, r2
   87238:	42b5      	cmp	r5, r6
   8723a:	d20a      	bcs.n	87252 <rshift+0x4e>
   8723c:	682f      	ldr	r7, [r5, #0]
   8723e:	fa07 f70c 	lsl.w	r7, r7, ip
   87242:	433c      	orrs	r4, r7
   87244:	f843 4b04 	str.w	r4, [r3], #4
   87248:	f855 4b04 	ldr.w	r4, [r5], #4
   8724c:	fa24 f401 	lsr.w	r4, r4, r1
   87250:	e7f2      	b.n	87238 <rshift+0x34>
   87252:	601c      	str	r4, [r3, #0]
   87254:	b14c      	cbz	r4, 8726a <rshift+0x66>
   87256:	3304      	adds	r3, #4
   87258:	e007      	b.n	8726a <rshift+0x66>
   8725a:	42b5      	cmp	r5, r6
   8725c:	d205      	bcs.n	8726a <rshift+0x66>
   8725e:	f855 1b04 	ldr.w	r1, [r5], #4
   87262:	f843 1b04 	str.w	r1, [r3], #4
   87266:	e7f8      	b.n	8725a <rshift+0x56>
   87268:	4613      	mov	r3, r2
   8726a:	1a9b      	subs	r3, r3, r2
   8726c:	109a      	asrs	r2, r3, #2
   8726e:	6102      	str	r2, [r0, #16]
   87270:	b902      	cbnz	r2, 87274 <rshift+0x70>
   87272:	6142      	str	r2, [r0, #20]
   87274:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087276 <htinit.constprop.0>:
   87276:	b530      	push	{r4, r5, lr}
   87278:	2300      	movs	r3, #0
   8727a:	5cc2      	ldrb	r2, [r0, r3]
   8727c:	b122      	cbz	r2, 87288 <htinit.constprop.0+0x12>
   8727e:	4c03      	ldr	r4, [pc, #12]	; (8728c <htinit.constprop.0+0x16>)
   87280:	185d      	adds	r5, r3, r1
   87282:	5515      	strb	r5, [r2, r4]
   87284:	3301      	adds	r3, #1
   87286:	e7f8      	b.n	8727a <htinit.constprop.0+0x4>
   87288:	bd30      	pop	{r4, r5, pc}
   8728a:	bf00      	nop
   8728c:	2007ab78 	.word	0x2007ab78

00087290 <__hexdig_init>:
   87290:	b508      	push	{r3, lr}
   87292:	2110      	movs	r1, #16
   87294:	4806      	ldr	r0, [pc, #24]	; (872b0 <__hexdig_init+0x20>)
   87296:	f7ff ffee 	bl	87276 <htinit.constprop.0>
   8729a:	211a      	movs	r1, #26
   8729c:	4805      	ldr	r0, [pc, #20]	; (872b4 <__hexdig_init+0x24>)
   8729e:	f7ff ffea 	bl	87276 <htinit.constprop.0>
   872a2:	4805      	ldr	r0, [pc, #20]	; (872b8 <__hexdig_init+0x28>)
   872a4:	211a      	movs	r1, #26
   872a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   872aa:	f7ff bfe4 	b.w	87276 <htinit.constprop.0>
   872ae:	bf00      	nop
   872b0:	0008a911 	.word	0x0008a911
   872b4:	0008a7c7 	.word	0x0008a7c7
   872b8:	0008a7b6 	.word	0x0008a7b6

000872bc <__gethex>:
   872bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   872c0:	b089      	sub	sp, #36	; 0x24
   872c2:	468a      	mov	sl, r1
   872c4:	4616      	mov	r6, r2
   872c6:	9306      	str	r3, [sp, #24]
   872c8:	9003      	str	r0, [sp, #12]
   872ca:	f000 fb17 	bl	878fc <_localeconv_r>
   872ce:	6800      	ldr	r0, [r0, #0]
   872d0:	9004      	str	r0, [sp, #16]
   872d2:	f7fc ff6d 	bl	841b0 <strlen>
   872d6:	9904      	ldr	r1, [sp, #16]
   872d8:	4a9d      	ldr	r2, [pc, #628]	; (87550 <__gethex+0x294>)
   872da:	180b      	adds	r3, r1, r0
   872dc:	4680      	mov	r8, r0
   872de:	f892 4030 	ldrb.w	r4, [r2, #48]	; 0x30
   872e2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   872e6:	9007      	str	r0, [sp, #28]
   872e8:	b90c      	cbnz	r4, 872ee <__gethex+0x32>
   872ea:	f7ff ffd1 	bl	87290 <__hexdig_init>
   872ee:	f8da 5000 	ldr.w	r5, [sl]
   872f2:	f04f 0900 	mov.w	r9, #0
   872f6:	1cac      	adds	r4, r5, #2
   872f8:	46a3      	mov	fp, r4
   872fa:	f814 7b01 	ldrb.w	r7, [r4], #1
   872fe:	2f30      	cmp	r7, #48	; 0x30
   87300:	d102      	bne.n	87308 <__gethex+0x4c>
   87302:	f109 0901 	add.w	r9, r9, #1
   87306:	e7f7      	b.n	872f8 <__gethex+0x3c>
   87308:	4c91      	ldr	r4, [pc, #580]	; (87550 <__gethex+0x294>)
   8730a:	5de5      	ldrb	r5, [r4, r7]
   8730c:	b9d5      	cbnz	r5, 87344 <__gethex+0x88>
   8730e:	4658      	mov	r0, fp
   87310:	9904      	ldr	r1, [sp, #16]
   87312:	4642      	mov	r2, r8
   87314:	f7fc ff54 	bl	841c0 <strncmp>
   87318:	2800      	cmp	r0, #0
   8731a:	d136      	bne.n	8738a <__gethex+0xce>
   8731c:	f81b 1008 	ldrb.w	r1, [fp, r8]
   87320:	eb0b 0708 	add.w	r7, fp, r8
   87324:	5c65      	ldrb	r5, [r4, r1]
   87326:	2d00      	cmp	r5, #0
   87328:	d030      	beq.n	8738c <__gethex+0xd0>
   8732a:	463b      	mov	r3, r7
   8732c:	4618      	mov	r0, r3
   8732e:	f813 2b01 	ldrb.w	r2, [r3], #1
   87332:	2a30      	cmp	r2, #48	; 0x30
   87334:	d0fa      	beq.n	8732c <__gethex+0x70>
   87336:	4d86      	ldr	r5, [pc, #536]	; (87550 <__gethex+0x294>)
   87338:	4683      	mov	fp, r0
   8733a:	5cac      	ldrb	r4, [r5, r2]
   8733c:	463d      	mov	r5, r7
   8733e:	b924      	cbnz	r4, 8734a <__gethex+0x8e>
   87340:	2401      	movs	r4, #1
   87342:	e003      	b.n	8734c <__gethex+0x90>
   87344:	2400      	movs	r4, #0
   87346:	4625      	mov	r5, r4
   87348:	e002      	b.n	87350 <__gethex+0x94>
   8734a:	2400      	movs	r4, #0
   8734c:	f04f 0901 	mov.w	r9, #1
   87350:	465b      	mov	r3, fp
   87352:	461f      	mov	r7, r3
   87354:	7838      	ldrb	r0, [r7, #0]
   87356:	497e      	ldr	r1, [pc, #504]	; (87550 <__gethex+0x294>)
   87358:	3301      	adds	r3, #1
   8735a:	5c0a      	ldrb	r2, [r1, r0]
   8735c:	2a00      	cmp	r2, #0
   8735e:	d1f8      	bne.n	87352 <__gethex+0x96>
   87360:	4638      	mov	r0, r7
   87362:	9904      	ldr	r1, [sp, #16]
   87364:	4642      	mov	r2, r8
   87366:	f7fc ff2b 	bl	841c0 <strncmp>
   8736a:	b950      	cbnz	r0, 87382 <__gethex+0xc6>
   8736c:	b955      	cbnz	r5, 87384 <__gethex+0xc8>
   8736e:	eb07 0508 	add.w	r5, r7, r8
   87372:	462b      	mov	r3, r5
   87374:	461f      	mov	r7, r3
   87376:	7838      	ldrb	r0, [r7, #0]
   87378:	4975      	ldr	r1, [pc, #468]	; (87550 <__gethex+0x294>)
   8737a:	3301      	adds	r3, #1
   8737c:	5c0a      	ldrb	r2, [r1, r0]
   8737e:	2a00      	cmp	r2, #0
   87380:	d1f8      	bne.n	87374 <__gethex+0xb8>
   87382:	b125      	cbz	r5, 8738e <__gethex+0xd2>
   87384:	1bed      	subs	r5, r5, r7
   87386:	00ad      	lsls	r5, r5, #2
   87388:	e001      	b.n	8738e <__gethex+0xd2>
   8738a:	465f      	mov	r7, fp
   8738c:	2401      	movs	r4, #1
   8738e:	783b      	ldrb	r3, [r7, #0]
   87390:	2b50      	cmp	r3, #80	; 0x50
   87392:	d001      	beq.n	87398 <__gethex+0xdc>
   87394:	2b70      	cmp	r3, #112	; 0x70
   87396:	d12e      	bne.n	873f6 <__gethex+0x13a>
   87398:	7878      	ldrb	r0, [r7, #1]
   8739a:	282b      	cmp	r0, #43	; 0x2b
   8739c:	d005      	beq.n	873aa <__gethex+0xee>
   8739e:	282d      	cmp	r0, #45	; 0x2d
   873a0:	d006      	beq.n	873b0 <__gethex+0xf4>
   873a2:	2100      	movs	r1, #0
   873a4:	1c78      	adds	r0, r7, #1
   873a6:	9105      	str	r1, [sp, #20]
   873a8:	e005      	b.n	873b6 <__gethex+0xfa>
   873aa:	2300      	movs	r3, #0
   873ac:	9305      	str	r3, [sp, #20]
   873ae:	e001      	b.n	873b4 <__gethex+0xf8>
   873b0:	2201      	movs	r2, #1
   873b2:	9205      	str	r2, [sp, #20]
   873b4:	1cb8      	adds	r0, r7, #2
   873b6:	7801      	ldrb	r1, [r0, #0]
   873b8:	4a65      	ldr	r2, [pc, #404]	; (87550 <__gethex+0x294>)
   873ba:	5c52      	ldrb	r2, [r2, r1]
   873bc:	b1da      	cbz	r2, 873f6 <__gethex+0x13a>
   873be:	2a19      	cmp	r2, #25
   873c0:	dc19      	bgt.n	873f6 <__gethex+0x13a>
   873c2:	3a10      	subs	r2, #16
   873c4:	3001      	adds	r0, #1
   873c6:	4603      	mov	r3, r0
   873c8:	f893 c000 	ldrb.w	ip, [r3]
   873cc:	4960      	ldr	r1, [pc, #384]	; (87550 <__gethex+0x294>)
   873ce:	3001      	adds	r0, #1
   873d0:	f811 100c 	ldrb.w	r1, [r1, ip]
   873d4:	9102      	str	r1, [sp, #8]
   873d6:	b919      	cbnz	r1, 873e0 <__gethex+0x124>
   873d8:	9805      	ldr	r0, [sp, #20]
   873da:	b150      	cbz	r0, 873f2 <__gethex+0x136>
   873dc:	4252      	negs	r2, r2
   873de:	e008      	b.n	873f2 <__gethex+0x136>
   873e0:	9902      	ldr	r1, [sp, #8]
   873e2:	2919      	cmp	r1, #25
   873e4:	dcf8      	bgt.n	873d8 <__gethex+0x11c>
   873e6:	9b02      	ldr	r3, [sp, #8]
   873e8:	210a      	movs	r1, #10
   873ea:	fb01 3202 	mla	r2, r1, r2, r3
   873ee:	3a10      	subs	r2, #16
   873f0:	e7e9      	b.n	873c6 <__gethex+0x10a>
   873f2:	18ad      	adds	r5, r5, r2
   873f4:	e000      	b.n	873f8 <__gethex+0x13c>
   873f6:	463b      	mov	r3, r7
   873f8:	f8ca 3000 	str.w	r3, [sl]
   873fc:	b13c      	cbz	r4, 8740e <__gethex+0x152>
   873fe:	f1b9 0f00 	cmp.w	r9, #0
   87402:	bf0c      	ite	eq
   87404:	f04f 0906 	moveq.w	r9, #6
   87408:	f04f 0900 	movne.w	r9, #0
   8740c:	e18b      	b.n	87726 <__gethex+0x46a>
   8740e:	ebcb 0007 	rsb	r0, fp, r7
   87412:	1e43      	subs	r3, r0, #1
   87414:	4621      	mov	r1, r4
   87416:	2b07      	cmp	r3, #7
   87418:	dd02      	ble.n	87420 <__gethex+0x164>
   8741a:	3101      	adds	r1, #1
   8741c:	105b      	asrs	r3, r3, #1
   8741e:	e7fa      	b.n	87416 <__gethex+0x15a>
   87420:	9803      	ldr	r0, [sp, #12]
   87422:	f000 fd85 	bl	87f30 <_Balloc>
   87426:	46b9      	mov	r9, r7
   87428:	f100 0314 	add.w	r3, r0, #20
   8742c:	2700      	movs	r7, #0
   8742e:	4604      	mov	r4, r0
   87430:	9302      	str	r3, [sp, #8]
   87432:	46ba      	mov	sl, r7
   87434:	45d9      	cmp	r9, fp
   87436:	d932      	bls.n	8749e <__gethex+0x1e2>
   87438:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   8743c:	f8dd c01c 	ldr.w	ip, [sp, #28]
   87440:	f109 3eff 	add.w	lr, r9, #4294967295
   87444:	4561      	cmp	r1, ip
   87446:	f8cd e014 	str.w	lr, [sp, #20]
   8744a:	d007      	beq.n	8745c <__gethex+0x1a0>
   8744c:	f1ba 0f20 	cmp.w	sl, #32
   87450:	d116      	bne.n	87480 <__gethex+0x1c4>
   87452:	f843 7b04 	str.w	r7, [r3], #4
   87456:	2700      	movs	r7, #0
   87458:	46ba      	mov	sl, r7
   8745a:	e011      	b.n	87480 <__gethex+0x1c4>
   8745c:	9a05      	ldr	r2, [sp, #20]
   8745e:	f1c8 0001 	rsb	r0, r8, #1
   87462:	eb02 0c00 	add.w	ip, r2, r0
   87466:	45dc      	cmp	ip, fp
   87468:	d3f0      	bcc.n	8744c <__gethex+0x190>
   8746a:	4660      	mov	r0, ip
   8746c:	9904      	ldr	r1, [sp, #16]
   8746e:	4642      	mov	r2, r8
   87470:	e88d 1008 	stmia.w	sp, {r3, ip}
   87474:	f7fc fea4 	bl	841c0 <strncmp>
   87478:	e89d 1008 	ldmia.w	sp, {r3, ip}
   8747c:	b168      	cbz	r0, 8749a <__gethex+0x1de>
   8747e:	e7e5      	b.n	8744c <__gethex+0x190>
   87480:	f819 0c01 	ldrb.w	r0, [r9, #-1]
   87484:	4932      	ldr	r1, [pc, #200]	; (87550 <__gethex+0x294>)
   87486:	f8dd c014 	ldr.w	ip, [sp, #20]
   8748a:	5c0a      	ldrb	r2, [r1, r0]
   8748c:	f002 000f 	and.w	r0, r2, #15
   87490:	fa00 f10a 	lsl.w	r1, r0, sl
   87494:	f10a 0a04 	add.w	sl, sl, #4
   87498:	430f      	orrs	r7, r1
   8749a:	46e1      	mov	r9, ip
   8749c:	e7ca      	b.n	87434 <__gethex+0x178>
   8749e:	9a02      	ldr	r2, [sp, #8]
   874a0:	f843 7b04 	str.w	r7, [r3], #4
   874a4:	1a99      	subs	r1, r3, r2
   874a6:	108b      	asrs	r3, r1, #2
   874a8:	4638      	mov	r0, r7
   874aa:	6123      	str	r3, [r4, #16]
   874ac:	ea4f 1a43 	mov.w	sl, r3, lsl #5
   874b0:	f000 fdeb 	bl	8808a <__hi0bits>
   874b4:	6837      	ldr	r7, [r6, #0]
   874b6:	ebc0 000a 	rsb	r0, r0, sl
   874ba:	42b8      	cmp	r0, r7
   874bc:	dd2a      	ble.n	87514 <__gethex+0x258>
   874be:	ebc7 0900 	rsb	r9, r7, r0
   874c2:	4649      	mov	r1, r9
   874c4:	4620      	mov	r0, r4
   874c6:	f001 f8fc 	bl	886c2 <__any_on>
   874ca:	b1e0      	cbz	r0, 87506 <__gethex+0x24a>
   874cc:	f109 33ff 	add.w	r3, r9, #4294967295
   874d0:	f003 011f 	and.w	r1, r3, #31
   874d4:	f04f 0a01 	mov.w	sl, #1
   874d8:	fa0a f001 	lsl.w	r0, sl, r1
   874dc:	115a      	asrs	r2, r3, #5
   874de:	eb04 0182 	add.w	r1, r4, r2, lsl #2
   874e2:	694a      	ldr	r2, [r1, #20]
   874e4:	4210      	tst	r0, r2
   874e6:	d00f      	beq.n	87508 <__gethex+0x24c>
   874e8:	4553      	cmp	r3, sl
   874ea:	dc02      	bgt.n	874f2 <__gethex+0x236>
   874ec:	f04f 0a02 	mov.w	sl, #2
   874f0:	e00a      	b.n	87508 <__gethex+0x24c>
   874f2:	4620      	mov	r0, r4
   874f4:	f1a9 0102 	sub.w	r1, r9, #2
   874f8:	f001 f8e3 	bl	886c2 <__any_on>
   874fc:	2800      	cmp	r0, #0
   874fe:	d0f5      	beq.n	874ec <__gethex+0x230>
   87500:	f04f 0a03 	mov.w	sl, #3
   87504:	e000      	b.n	87508 <__gethex+0x24c>
   87506:	4682      	mov	sl, r0
   87508:	4620      	mov	r0, r4
   8750a:	4649      	mov	r1, r9
   8750c:	f7ff fe7a 	bl	87204 <rshift>
   87510:	444d      	add	r5, r9
   87512:	e00f      	b.n	87534 <__gethex+0x278>
   87514:	da0c      	bge.n	87530 <__gethex+0x274>
   87516:	ebc0 0907 	rsb	r9, r0, r7
   8751a:	4621      	mov	r1, r4
   8751c:	464a      	mov	r2, r9
   8751e:	9803      	ldr	r0, [sp, #12]
   87520:	f000 fedc 	bl	882dc <__lshift>
   87524:	f100 0214 	add.w	r2, r0, #20
   87528:	4604      	mov	r4, r0
   8752a:	ebc9 0505 	rsb	r5, r9, r5
   8752e:	9202      	str	r2, [sp, #8]
   87530:	f04f 0a00 	mov.w	sl, #0
   87534:	68b3      	ldr	r3, [r6, #8]
   87536:	429d      	cmp	r5, r3
   87538:	dd0c      	ble.n	87554 <__gethex+0x298>
   8753a:	9803      	ldr	r0, [sp, #12]
   8753c:	4621      	mov	r1, r4
   8753e:	f000 fd1d 	bl	87f7c <_Bfree>
   87542:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87544:	2000      	movs	r0, #0
   87546:	6010      	str	r0, [r2, #0]
   87548:	f04f 09a3 	mov.w	r9, #163	; 0xa3
   8754c:	e0eb      	b.n	87726 <__gethex+0x46a>
   8754e:	bf00      	nop
   87550:	2007ab78 	.word	0x2007ab78
   87554:	6870      	ldr	r0, [r6, #4]
   87556:	4285      	cmp	r5, r0
   87558:	da58      	bge.n	8760c <__gethex+0x350>
   8755a:	1b45      	subs	r5, r0, r5
   8755c:	42bd      	cmp	r5, r7
   8755e:	db2e      	blt.n	875be <__gethex+0x302>
   87560:	68f2      	ldr	r2, [r6, #12]
   87562:	2a02      	cmp	r2, #2
   87564:	d01a      	beq.n	8759c <__gethex+0x2e0>
   87566:	2a03      	cmp	r2, #3
   87568:	d01c      	beq.n	875a4 <__gethex+0x2e8>
   8756a:	2a01      	cmp	r2, #1
   8756c:	d11d      	bne.n	875aa <__gethex+0x2ee>
   8756e:	42bd      	cmp	r5, r7
   87570:	d11b      	bne.n	875aa <__gethex+0x2ee>
   87572:	2f01      	cmp	r7, #1
   87574:	dc0b      	bgt.n	8758e <__gethex+0x2d2>
   87576:	6873      	ldr	r3, [r6, #4]
   87578:	9806      	ldr	r0, [sp, #24]
   8757a:	9902      	ldr	r1, [sp, #8]
   8757c:	6003      	str	r3, [r0, #0]
   8757e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87580:	2201      	movs	r2, #1
   87582:	6122      	str	r2, [r4, #16]
   87584:	f04f 0962 	mov.w	r9, #98	; 0x62
   87588:	600a      	str	r2, [r1, #0]
   8758a:	601c      	str	r4, [r3, #0]
   8758c:	e0cb      	b.n	87726 <__gethex+0x46a>
   8758e:	4620      	mov	r0, r4
   87590:	1e79      	subs	r1, r7, #1
   87592:	f001 f896 	bl	886c2 <__any_on>
   87596:	2800      	cmp	r0, #0
   87598:	d1ed      	bne.n	87576 <__gethex+0x2ba>
   8759a:	e006      	b.n	875aa <__gethex+0x2ee>
   8759c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   8759e:	2800      	cmp	r0, #0
   875a0:	d0e9      	beq.n	87576 <__gethex+0x2ba>
   875a2:	e002      	b.n	875aa <__gethex+0x2ee>
   875a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   875a6:	2b00      	cmp	r3, #0
   875a8:	d1e5      	bne.n	87576 <__gethex+0x2ba>
   875aa:	4621      	mov	r1, r4
   875ac:	9803      	ldr	r0, [sp, #12]
   875ae:	f000 fce5 	bl	87f7c <_Bfree>
   875b2:	9912      	ldr	r1, [sp, #72]	; 0x48
   875b4:	2200      	movs	r2, #0
   875b6:	600a      	str	r2, [r1, #0]
   875b8:	f04f 0950 	mov.w	r9, #80	; 0x50
   875bc:	e0b3      	b.n	87726 <__gethex+0x46a>
   875be:	f105 39ff 	add.w	r9, r5, #4294967295
   875c2:	f1ba 0f00 	cmp.w	sl, #0
   875c6:	d108      	bne.n	875da <__gethex+0x31e>
   875c8:	f1b9 0f00 	cmp.w	r9, #0
   875cc:	dd07      	ble.n	875de <__gethex+0x322>
   875ce:	4620      	mov	r0, r4
   875d0:	4649      	mov	r1, r9
   875d2:	f001 f876 	bl	886c2 <__any_on>
   875d6:	4682      	mov	sl, r0
   875d8:	e001      	b.n	875de <__gethex+0x322>
   875da:	f04f 0a01 	mov.w	sl, #1
   875de:	f009 031f 	and.w	r3, r9, #31
   875e2:	2201      	movs	r2, #1
   875e4:	fa02 f003 	lsl.w	r0, r2, r3
   875e8:	9b02      	ldr	r3, [sp, #8]
   875ea:	ea4f 1169 	mov.w	r1, r9, asr #5
   875ee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   875f2:	1b7f      	subs	r7, r7, r5
   875f4:	4208      	tst	r0, r1
   875f6:	4629      	mov	r1, r5
   875f8:	4620      	mov	r0, r4
   875fa:	bf18      	it	ne
   875fc:	f04a 0a02 	orrne.w	sl, sl, #2
   87600:	f04f 0902 	mov.w	r9, #2
   87604:	f7ff fdfe 	bl	87204 <rshift>
   87608:	6875      	ldr	r5, [r6, #4]
   8760a:	e001      	b.n	87610 <__gethex+0x354>
   8760c:	f04f 0901 	mov.w	r9, #1
   87610:	f1ba 0f00 	cmp.w	sl, #0
   87614:	f000 8083 	beq.w	8771e <__gethex+0x462>
   87618:	68f2      	ldr	r2, [r6, #12]
   8761a:	2a02      	cmp	r2, #2
   8761c:	d00e      	beq.n	8763c <__gethex+0x380>
   8761e:	2a03      	cmp	r2, #3
   87620:	d010      	beq.n	87644 <__gethex+0x388>
   87622:	2a01      	cmp	r2, #1
   87624:	d179      	bne.n	8771a <__gethex+0x45e>
   87626:	f01a 0f02 	tst.w	sl, #2
   8762a:	d076      	beq.n	8771a <__gethex+0x45e>
   8762c:	9802      	ldr	r0, [sp, #8]
   8762e:	6803      	ldr	r3, [r0, #0]
   87630:	ea4a 0a03 	orr.w	sl, sl, r3
   87634:	f01a 0f01 	tst.w	sl, #1
   87638:	d107      	bne.n	8764a <__gethex+0x38e>
   8763a:	e06e      	b.n	8771a <__gethex+0x45e>
   8763c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8763e:	f1c2 0101 	rsb	r1, r2, #1
   87642:	e000      	b.n	87646 <__gethex+0x38a>
   87644:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87646:	2900      	cmp	r1, #0
   87648:	d067      	beq.n	8771a <__gethex+0x45e>
   8764a:	f8d4 8010 	ldr.w	r8, [r4, #16]
   8764e:	f104 0314 	add.w	r3, r4, #20
   87652:	eb04 0188 	add.w	r1, r4, r8, lsl #2
   87656:	3114      	adds	r1, #20
   87658:	4618      	mov	r0, r3
   8765a:	f853 2b04 	ldr.w	r2, [r3], #4
   8765e:	f1b2 3fff 	cmp.w	r2, #4294967295
   87662:	d002      	beq.n	8766a <__gethex+0x3ae>
   87664:	3201      	adds	r2, #1
   87666:	6002      	str	r2, [r0, #0]
   87668:	e022      	b.n	876b0 <__gethex+0x3f4>
   8766a:	2000      	movs	r0, #0
   8766c:	428b      	cmp	r3, r1
   8766e:	f843 0c04 	str.w	r0, [r3, #-4]
   87672:	d3f1      	bcc.n	87658 <__gethex+0x39c>
   87674:	68a1      	ldr	r1, [r4, #8]
   87676:	4588      	cmp	r8, r1
   87678:	db13      	blt.n	876a2 <__gethex+0x3e6>
   8767a:	6863      	ldr	r3, [r4, #4]
   8767c:	9803      	ldr	r0, [sp, #12]
   8767e:	1c59      	adds	r1, r3, #1
   87680:	f000 fc56 	bl	87f30 <_Balloc>
   87684:	6922      	ldr	r2, [r4, #16]
   87686:	f104 010c 	add.w	r1, r4, #12
   8768a:	1c93      	adds	r3, r2, #2
   8768c:	4682      	mov	sl, r0
   8768e:	009a      	lsls	r2, r3, #2
   87690:	f100 000c 	add.w	r0, r0, #12
   87694:	f7fc fc98 	bl	83fc8 <memcpy>
   87698:	4621      	mov	r1, r4
   8769a:	9803      	ldr	r0, [sp, #12]
   8769c:	f000 fc6e 	bl	87f7c <_Bfree>
   876a0:	4654      	mov	r4, sl
   876a2:	6920      	ldr	r0, [r4, #16]
   876a4:	2101      	movs	r1, #1
   876a6:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   876aa:	1843      	adds	r3, r0, r1
   876ac:	6151      	str	r1, [r2, #20]
   876ae:	6123      	str	r3, [r4, #16]
   876b0:	f1b9 0f02 	cmp.w	r9, #2
   876b4:	d113      	bne.n	876de <__gethex+0x422>
   876b6:	6832      	ldr	r2, [r6, #0]
   876b8:	1e50      	subs	r0, r2, #1
   876ba:	4287      	cmp	r7, r0
   876bc:	d12a      	bne.n	87714 <__gethex+0x458>
   876be:	f007 011f 	and.w	r1, r7, #31
   876c2:	2201      	movs	r2, #1
   876c4:	fa02 f201 	lsl.w	r2, r2, r1
   876c8:	117f      	asrs	r7, r7, #5
   876ca:	eb04 0787 	add.w	r7, r4, r7, lsl #2
   876ce:	697b      	ldr	r3, [r7, #20]
   876d0:	421a      	tst	r2, r3
   876d2:	bf0c      	ite	eq
   876d4:	f04f 0902 	moveq.w	r9, #2
   876d8:	f04f 0901 	movne.w	r9, #1
   876dc:	e01a      	b.n	87714 <__gethex+0x458>
   876de:	6920      	ldr	r0, [r4, #16]
   876e0:	4540      	cmp	r0, r8
   876e2:	dd09      	ble.n	876f8 <__gethex+0x43c>
   876e4:	2101      	movs	r1, #1
   876e6:	4620      	mov	r0, r4
   876e8:	f7ff fd8c 	bl	87204 <rshift>
   876ec:	68b3      	ldr	r3, [r6, #8]
   876ee:	3501      	adds	r5, #1
   876f0:	429d      	cmp	r5, r3
   876f2:	f73f af22 	bgt.w	8753a <__gethex+0x27e>
   876f6:	e00b      	b.n	87710 <__gethex+0x454>
   876f8:	f017 071f 	ands.w	r7, r7, #31
   876fc:	d008      	beq.n	87710 <__gethex+0x454>
   876fe:	eb04 0188 	add.w	r1, r4, r8, lsl #2
   87702:	6908      	ldr	r0, [r1, #16]
   87704:	f000 fcc1 	bl	8808a <__hi0bits>
   87708:	f1c7 0720 	rsb	r7, r7, #32
   8770c:	42b8      	cmp	r0, r7
   8770e:	dbe9      	blt.n	876e4 <__gethex+0x428>
   87710:	f04f 0901 	mov.w	r9, #1
   87714:	f049 0920 	orr.w	r9, r9, #32
   87718:	e001      	b.n	8771e <__gethex+0x462>
   8771a:	f049 0910 	orr.w	r9, r9, #16
   8771e:	9812      	ldr	r0, [sp, #72]	; 0x48
   87720:	9906      	ldr	r1, [sp, #24]
   87722:	6004      	str	r4, [r0, #0]
   87724:	600d      	str	r5, [r1, #0]
   87726:	4648      	mov	r0, r9
   87728:	b009      	add	sp, #36	; 0x24
   8772a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8772e:	bf00      	nop

00087730 <L_shift>:
   87730:	f1c2 0208 	rsb	r2, r2, #8
   87734:	0092      	lsls	r2, r2, #2
   87736:	b570      	push	{r4, r5, r6, lr}
   87738:	f1c2 0420 	rsb	r4, r2, #32
   8773c:	6805      	ldr	r5, [r0, #0]
   8773e:	f850 3f04 	ldr.w	r3, [r0, #4]!
   87742:	fa03 f604 	lsl.w	r6, r3, r4
   87746:	fa23 f302 	lsr.w	r3, r3, r2
   8774a:	4335      	orrs	r5, r6
   8774c:	4288      	cmp	r0, r1
   8774e:	f840 5c04 	str.w	r5, [r0, #-4]
   87752:	6003      	str	r3, [r0, #0]
   87754:	d3f2      	bcc.n	8773c <L_shift+0xc>
   87756:	bd70      	pop	{r4, r5, r6, pc}

00087758 <__hexnan>:
   87758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8775c:	4b46      	ldr	r3, [pc, #280]	; (87878 <__hexnan+0x120>)
   8775e:	4683      	mov	fp, r0
   87760:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   87764:	460c      	mov	r4, r1
   87766:	4615      	mov	r5, r2
   87768:	b908      	cbnz	r0, 8776e <__hexnan+0x16>
   8776a:	f7ff fd91 	bl	87290 <__hexdig_init>
   8776e:	6821      	ldr	r1, [r4, #0]
   87770:	f8db 3000 	ldr.w	r3, [fp]
   87774:	114e      	asrs	r6, r1, #5
   87776:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   8777a:	f011 0a1f 	ands.w	sl, r1, #31
   8777e:	bf18      	it	ne
   87780:	3604      	addne	r6, #4
   87782:	f1a6 0904 	sub.w	r9, r6, #4
   87786:	2200      	movs	r2, #0
   87788:	f846 2c04 	str.w	r2, [r6, #-4]
   8778c:	464f      	mov	r7, r9
   8778e:	464c      	mov	r4, r9
   87790:	4694      	mov	ip, r2
   87792:	4690      	mov	r8, r2
   87794:	7859      	ldrb	r1, [r3, #1]
   87796:	b3b9      	cbz	r1, 87808 <__hexnan+0xb0>
   87798:	4837      	ldr	r0, [pc, #220]	; (87878 <__hexnan+0x120>)
   8779a:	5c40      	ldrb	r0, [r0, r1]
   8779c:	b9f0      	cbnz	r0, 877dc <__hexnan+0x84>
   8779e:	2920      	cmp	r1, #32
   877a0:	d816      	bhi.n	877d0 <__hexnan+0x78>
   877a2:	45c4      	cmp	ip, r8
   877a4:	da2e      	bge.n	87804 <__hexnan+0xac>
   877a6:	42bc      	cmp	r4, r7
   877a8:	d209      	bcs.n	877be <__hexnan+0x66>
   877aa:	2a07      	cmp	r2, #7
   877ac:	dc07      	bgt.n	877be <__hexnan+0x66>
   877ae:	4620      	mov	r0, r4
   877b0:	4639      	mov	r1, r7
   877b2:	e88d 1008 	stmia.w	sp, {r3, ip}
   877b6:	f7ff ffbb 	bl	87730 <L_shift>
   877ba:	e89d 1008 	ldmia.w	sp, {r3, ip}
   877be:	42ac      	cmp	r4, r5
   877c0:	d91f      	bls.n	87802 <__hexnan+0xaa>
   877c2:	2200      	movs	r2, #0
   877c4:	f844 2c04 	str.w	r2, [r4, #-4]
   877c8:	3c04      	subs	r4, #4
   877ca:	46c4      	mov	ip, r8
   877cc:	4627      	mov	r7, r4
   877ce:	e019      	b.n	87804 <__hexnan+0xac>
   877d0:	2929      	cmp	r1, #41	; 0x29
   877d2:	d14c      	bne.n	8786e <__hexnan+0x116>
   877d4:	3302      	adds	r3, #2
   877d6:	f8cb 3000 	str.w	r3, [fp]
   877da:	e015      	b.n	87808 <__hexnan+0xb0>
   877dc:	3201      	adds	r2, #1
   877de:	2a08      	cmp	r2, #8
   877e0:	f108 0801 	add.w	r8, r8, #1
   877e4:	dd06      	ble.n	877f4 <__hexnan+0x9c>
   877e6:	42ac      	cmp	r4, r5
   877e8:	d90c      	bls.n	87804 <__hexnan+0xac>
   877ea:	2200      	movs	r2, #0
   877ec:	f844 2c04 	str.w	r2, [r4, #-4]
   877f0:	3c04      	subs	r4, #4
   877f2:	2201      	movs	r2, #1
   877f4:	6821      	ldr	r1, [r4, #0]
   877f6:	f000 000f 	and.w	r0, r0, #15
   877fa:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
   877fe:	6021      	str	r1, [r4, #0]
   87800:	e000      	b.n	87804 <__hexnan+0xac>
   87802:	2208      	movs	r2, #8
   87804:	3301      	adds	r3, #1
   87806:	e7c5      	b.n	87794 <__hexnan+0x3c>
   87808:	f1b8 0f00 	cmp.w	r8, #0
   8780c:	d02f      	beq.n	8786e <__hexnan+0x116>
   8780e:	42bc      	cmp	r4, r7
   87810:	d205      	bcs.n	8781e <__hexnan+0xc6>
   87812:	2a07      	cmp	r2, #7
   87814:	dc03      	bgt.n	8781e <__hexnan+0xc6>
   87816:	4620      	mov	r0, r4
   87818:	4639      	mov	r1, r7
   8781a:	f7ff ff89 	bl	87730 <L_shift>
   8781e:	42ac      	cmp	r4, r5
   87820:	d90d      	bls.n	8783e <__hexnan+0xe6>
   87822:	462a      	mov	r2, r5
   87824:	f854 3b04 	ldr.w	r3, [r4], #4
   87828:	f842 3b04 	str.w	r3, [r2], #4
   8782c:	45a1      	cmp	r9, r4
   8782e:	4610      	mov	r0, r2
   87830:	d2f8      	bcs.n	87824 <__hexnan+0xcc>
   87832:	2100      	movs	r1, #0
   87834:	f840 1b04 	str.w	r1, [r0], #4
   87838:	4548      	cmp	r0, r9
   8783a:	d9fa      	bls.n	87832 <__hexnan+0xda>
   8783c:	e00e      	b.n	8785c <__hexnan+0x104>
   8783e:	f1ba 0f00 	cmp.w	sl, #0
   87842:	d00b      	beq.n	8785c <__hexnan+0x104>
   87844:	f1ca 0a20 	rsb	sl, sl, #32
   87848:	f04f 32ff 	mov.w	r2, #4294967295
   8784c:	fa22 fa0a 	lsr.w	sl, r2, sl
   87850:	f856 0c04 	ldr.w	r0, [r6, #-4]
   87854:	ea00 010a 	and.w	r1, r0, sl
   87858:	f846 1c04 	str.w	r1, [r6, #-4]
   8785c:	f856 2c04 	ldr.w	r2, [r6, #-4]
   87860:	3e04      	subs	r6, #4
   87862:	b932      	cbnz	r2, 87872 <__hexnan+0x11a>
   87864:	42b5      	cmp	r5, r6
   87866:	d1f9      	bne.n	8785c <__hexnan+0x104>
   87868:	2301      	movs	r3, #1
   8786a:	602b      	str	r3, [r5, #0]
   8786c:	e001      	b.n	87872 <__hexnan+0x11a>
   8786e:	2004      	movs	r0, #4
   87870:	e000      	b.n	87874 <__hexnan+0x11c>
   87872:	2005      	movs	r0, #5
   87874:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87878:	2007ab78 	.word	0x2007ab78

0008787c <iswspace>:
   8787c:	28ff      	cmp	r0, #255	; 0xff
   8787e:	d807      	bhi.n	87890 <iswspace+0x14>
   87880:	4b04      	ldr	r3, [pc, #16]	; (87894 <iswspace+0x18>)
   87882:	6819      	ldr	r1, [r3, #0]
   87884:	1808      	adds	r0, r1, r0
   87886:	7842      	ldrb	r2, [r0, #1]
   87888:	f002 0308 	and.w	r3, r2, #8
   8788c:	b2d8      	uxtb	r0, r3
   8788e:	4770      	bx	lr
   87890:	2000      	movs	r0, #0
   87892:	4770      	bx	lr
   87894:	20070468 	.word	0x20070468

00087898 <_setlocale_r>:
   87898:	b510      	push	{r4, lr}
   8789a:	4614      	mov	r4, r2
   8789c:	b90a      	cbnz	r2, 878a2 <_setlocale_r+0xa>
   8789e:	480c      	ldr	r0, [pc, #48]	; (878d0 <_setlocale_r+0x38>)
   878a0:	bd10      	pop	{r4, pc}
   878a2:	4610      	mov	r0, r2
   878a4:	490b      	ldr	r1, [pc, #44]	; (878d4 <_setlocale_r+0x3c>)
   878a6:	f001 f9e0 	bl	88c6a <strcmp>
   878aa:	2800      	cmp	r0, #0
   878ac:	d0f7      	beq.n	8789e <_setlocale_r+0x6>
   878ae:	4620      	mov	r0, r4
   878b0:	4907      	ldr	r1, [pc, #28]	; (878d0 <_setlocale_r+0x38>)
   878b2:	f001 f9da 	bl	88c6a <strcmp>
   878b6:	2800      	cmp	r0, #0
   878b8:	d0f1      	beq.n	8789e <_setlocale_r+0x6>
   878ba:	4620      	mov	r0, r4
   878bc:	4906      	ldr	r1, [pc, #24]	; (878d8 <_setlocale_r+0x40>)
   878be:	f001 f9d4 	bl	88c6a <strcmp>
   878c2:	4b03      	ldr	r3, [pc, #12]	; (878d0 <_setlocale_r+0x38>)
   878c4:	2800      	cmp	r0, #0
   878c6:	bf0c      	ite	eq
   878c8:	4618      	moveq	r0, r3
   878ca:	2000      	movne	r0, #0
   878cc:	bd10      	pop	{r4, pc}
   878ce:	bf00      	nop
   878d0:	0008a750 	.word	0x0008a750
   878d4:	0008a91c 	.word	0x0008a91c
   878d8:	0008a923 	.word	0x0008a923

000878dc <__locale_charset>:
   878dc:	4800      	ldr	r0, [pc, #0]	; (878e0 <__locale_charset+0x4>)
   878de:	4770      	bx	lr
   878e0:	2007046c 	.word	0x2007046c

000878e4 <__locale_mb_cur_max>:
   878e4:	4b01      	ldr	r3, [pc, #4]	; (878ec <__locale_mb_cur_max+0x8>)
   878e6:	6a18      	ldr	r0, [r3, #32]
   878e8:	4770      	bx	lr
   878ea:	bf00      	nop
   878ec:	2007046c 	.word	0x2007046c

000878f0 <__locale_msgcharset>:
   878f0:	4800      	ldr	r0, [pc, #0]	; (878f4 <__locale_msgcharset+0x4>)
   878f2:	4770      	bx	lr
   878f4:	20070490 	.word	0x20070490

000878f8 <__locale_cjk_lang>:
   878f8:	2000      	movs	r0, #0
   878fa:	4770      	bx	lr

000878fc <_localeconv_r>:
   878fc:	4800      	ldr	r0, [pc, #0]	; (87900 <_localeconv_r+0x4>)
   878fe:	4770      	bx	lr
   87900:	200704b0 	.word	0x200704b0

00087904 <setlocale>:
   87904:	460a      	mov	r2, r1
   87906:	4903      	ldr	r1, [pc, #12]	; (87914 <setlocale+0x10>)
   87908:	4603      	mov	r3, r0
   8790a:	6808      	ldr	r0, [r1, #0]
   8790c:	4619      	mov	r1, r3
   8790e:	f7ff bfc3 	b.w	87898 <_setlocale_r>
   87912:	bf00      	nop
   87914:	20070010 	.word	0x20070010

00087918 <localeconv>:
   87918:	4800      	ldr	r0, [pc, #0]	; (8791c <localeconv+0x4>)
   8791a:	4770      	bx	lr
   8791c:	200704b0 	.word	0x200704b0

00087920 <__smakebuf_r>:
   87920:	b5f0      	push	{r4, r5, r6, r7, lr}
   87922:	898b      	ldrh	r3, [r1, #12]
   87924:	460c      	mov	r4, r1
   87926:	f003 0102 	and.w	r1, r3, #2
   8792a:	b20a      	sxth	r2, r1
   8792c:	b091      	sub	sp, #68	; 0x44
   8792e:	4606      	mov	r6, r0
   87930:	2a00      	cmp	r2, #0
   87932:	d13f      	bne.n	879b4 <__smakebuf_r+0x94>
   87934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   87938:	2900      	cmp	r1, #0
   8793a:	da0d      	bge.n	87958 <__smakebuf_r+0x38>
   8793c:	89a7      	ldrh	r7, [r4, #12]
   8793e:	f007 0280 	and.w	r2, r7, #128	; 0x80
   87942:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   87946:	b210      	sxth	r0, r2
   87948:	2800      	cmp	r0, #0
   8794a:	bf0c      	ite	eq
   8794c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   87950:	2540      	movne	r5, #64	; 0x40
   87952:	81a3      	strh	r3, [r4, #12]
   87954:	2700      	movs	r7, #0
   87956:	e020      	b.n	8799a <__smakebuf_r+0x7a>
   87958:	aa01      	add	r2, sp, #4
   8795a:	f002 fa9f 	bl	89e9c <_fstat_r>
   8795e:	2800      	cmp	r0, #0
   87960:	dbec      	blt.n	8793c <__smakebuf_r+0x1c>
   87962:	9802      	ldr	r0, [sp, #8]
   87964:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   87968:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   8796c:	425f      	negs	r7, r3
   8796e:	415f      	adcs	r7, r3
   87970:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   87974:	d10b      	bne.n	8798e <__smakebuf_r+0x6e>
   87976:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   87978:	4a1d      	ldr	r2, [pc, #116]	; (879f0 <__smakebuf_r+0xd0>)
   8797a:	4291      	cmp	r1, r2
   8797c:	d107      	bne.n	8798e <__smakebuf_r+0x6e>
   8797e:	89a3      	ldrh	r3, [r4, #12]
   87980:	f44f 6580 	mov.w	r5, #1024	; 0x400
   87984:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   87988:	81a1      	strh	r1, [r4, #12]
   8798a:	64e5      	str	r5, [r4, #76]	; 0x4c
   8798c:	e005      	b.n	8799a <__smakebuf_r+0x7a>
   8798e:	89a0      	ldrh	r0, [r4, #12]
   87990:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   87994:	81a5      	strh	r5, [r4, #12]
   87996:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8799a:	4630      	mov	r0, r6
   8799c:	4629      	mov	r1, r5
   8799e:	f000 f83b 	bl	87a18 <_malloc_r>
   879a2:	b970      	cbnz	r0, 879c2 <__smakebuf_r+0xa2>
   879a4:	89a3      	ldrh	r3, [r4, #12]
   879a6:	f403 7200 	and.w	r2, r3, #512	; 0x200
   879aa:	b210      	sxth	r0, r2
   879ac:	b9e8      	cbnz	r0, 879ea <__smakebuf_r+0xca>
   879ae:	f043 0102 	orr.w	r1, r3, #2
   879b2:	81a1      	strh	r1, [r4, #12]
   879b4:	f104 0343 	add.w	r3, r4, #67	; 0x43
   879b8:	2201      	movs	r2, #1
   879ba:	6023      	str	r3, [r4, #0]
   879bc:	6123      	str	r3, [r4, #16]
   879be:	6162      	str	r2, [r4, #20]
   879c0:	e013      	b.n	879ea <__smakebuf_r+0xca>
   879c2:	89a2      	ldrh	r2, [r4, #12]
   879c4:	490b      	ldr	r1, [pc, #44]	; (879f4 <__smakebuf_r+0xd4>)
   879c6:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   879ca:	63f1      	str	r1, [r6, #60]	; 0x3c
   879cc:	81a3      	strh	r3, [r4, #12]
   879ce:	6020      	str	r0, [r4, #0]
   879d0:	6120      	str	r0, [r4, #16]
   879d2:	6165      	str	r5, [r4, #20]
   879d4:	b14f      	cbz	r7, 879ea <__smakebuf_r+0xca>
   879d6:	4630      	mov	r0, r6
   879d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   879dc:	f002 fa70 	bl	89ec0 <_isatty_r>
   879e0:	b118      	cbz	r0, 879ea <__smakebuf_r+0xca>
   879e2:	89a0      	ldrh	r0, [r4, #12]
   879e4:	f040 0101 	orr.w	r1, r0, #1
   879e8:	81a1      	strh	r1, [r4, #12]
   879ea:	b011      	add	sp, #68	; 0x44
   879ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   879ee:	bf00      	nop
   879f0:	00088c3f 	.word	0x00088c3f
   879f4:	00086999 	.word	0x00086999

000879f8 <malloc>:
   879f8:	4b02      	ldr	r3, [pc, #8]	; (87a04 <malloc+0xc>)
   879fa:	4601      	mov	r1, r0
   879fc:	6818      	ldr	r0, [r3, #0]
   879fe:	f000 b80b 	b.w	87a18 <_malloc_r>
   87a02:	bf00      	nop
   87a04:	20070010 	.word	0x20070010

00087a08 <free>:
   87a08:	4b02      	ldr	r3, [pc, #8]	; (87a14 <free+0xc>)
   87a0a:	4601      	mov	r1, r0
   87a0c:	6818      	ldr	r0, [r3, #0]
   87a0e:	f7ff b9a5 	b.w	86d5c <_free_r>
   87a12:	bf00      	nop
   87a14:	20070010 	.word	0x20070010

00087a18 <_malloc_r>:
   87a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87a1c:	f101 040b 	add.w	r4, r1, #11
   87a20:	2c16      	cmp	r4, #22
   87a22:	4606      	mov	r6, r0
   87a24:	d903      	bls.n	87a2e <_malloc_r+0x16>
   87a26:	f034 0407 	bics.w	r4, r4, #7
   87a2a:	d501      	bpl.n	87a30 <_malloc_r+0x18>
   87a2c:	e002      	b.n	87a34 <_malloc_r+0x1c>
   87a2e:	2410      	movs	r4, #16
   87a30:	428c      	cmp	r4, r1
   87a32:	d202      	bcs.n	87a3a <_malloc_r+0x22>
   87a34:	250c      	movs	r5, #12
   87a36:	6035      	str	r5, [r6, #0]
   87a38:	e1d9      	b.n	87dee <_malloc_r+0x3d6>
   87a3a:	4630      	mov	r0, r6
   87a3c:	f000 fa76 	bl	87f2c <__malloc_lock>
   87a40:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   87a44:	d214      	bcs.n	87a70 <_malloc_r+0x58>
   87a46:	4da0      	ldr	r5, [pc, #640]	; (87cc8 <_malloc_r+0x2b0>)
   87a48:	08e1      	lsrs	r1, r4, #3
   87a4a:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   87a4e:	68c5      	ldr	r5, [r0, #12]
   87a50:	4285      	cmp	r5, r0
   87a52:	d105      	bne.n	87a60 <_malloc_r+0x48>
   87a54:	f105 0308 	add.w	r3, r5, #8
   87a58:	696d      	ldr	r5, [r5, #20]
   87a5a:	1c8a      	adds	r2, r1, #2
   87a5c:	429d      	cmp	r5, r3
   87a5e:	d044      	beq.n	87aea <_malloc_r+0xd2>
   87a60:	68e8      	ldr	r0, [r5, #12]
   87a62:	68a9      	ldr	r1, [r5, #8]
   87a64:	686a      	ldr	r2, [r5, #4]
   87a66:	60c8      	str	r0, [r1, #12]
   87a68:	f022 0303 	bic.w	r3, r2, #3
   87a6c:	6081      	str	r1, [r0, #8]
   87a6e:	e059      	b.n	87b24 <_malloc_r+0x10c>
   87a70:	0a62      	lsrs	r2, r4, #9
   87a72:	d101      	bne.n	87a78 <_malloc_r+0x60>
   87a74:	08e2      	lsrs	r2, r4, #3
   87a76:	e01b      	b.n	87ab0 <_malloc_r+0x98>
   87a78:	2a04      	cmp	r2, #4
   87a7a:	d802      	bhi.n	87a82 <_malloc_r+0x6a>
   87a7c:	09a2      	lsrs	r2, r4, #6
   87a7e:	3238      	adds	r2, #56	; 0x38
   87a80:	e016      	b.n	87ab0 <_malloc_r+0x98>
   87a82:	2a14      	cmp	r2, #20
   87a84:	d801      	bhi.n	87a8a <_malloc_r+0x72>
   87a86:	325b      	adds	r2, #91	; 0x5b
   87a88:	e012      	b.n	87ab0 <_malloc_r+0x98>
   87a8a:	2a54      	cmp	r2, #84	; 0x54
   87a8c:	d802      	bhi.n	87a94 <_malloc_r+0x7c>
   87a8e:	0b22      	lsrs	r2, r4, #12
   87a90:	326e      	adds	r2, #110	; 0x6e
   87a92:	e00d      	b.n	87ab0 <_malloc_r+0x98>
   87a94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87a98:	d802      	bhi.n	87aa0 <_malloc_r+0x88>
   87a9a:	0be2      	lsrs	r2, r4, #15
   87a9c:	3277      	adds	r2, #119	; 0x77
   87a9e:	e007      	b.n	87ab0 <_malloc_r+0x98>
   87aa0:	f240 5354 	movw	r3, #1364	; 0x554
   87aa4:	429a      	cmp	r2, r3
   87aa6:	d802      	bhi.n	87aae <_malloc_r+0x96>
   87aa8:	0ca2      	lsrs	r2, r4, #18
   87aaa:	327c      	adds	r2, #124	; 0x7c
   87aac:	e000      	b.n	87ab0 <_malloc_r+0x98>
   87aae:	227e      	movs	r2, #126	; 0x7e
   87ab0:	4885      	ldr	r0, [pc, #532]	; (87cc8 <_malloc_r+0x2b0>)
   87ab2:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   87ab6:	68dd      	ldr	r5, [r3, #12]
   87ab8:	429d      	cmp	r5, r3
   87aba:	d015      	beq.n	87ae8 <_malloc_r+0xd0>
   87abc:	6869      	ldr	r1, [r5, #4]
   87abe:	f021 0103 	bic.w	r1, r1, #3
   87ac2:	1b08      	subs	r0, r1, r4
   87ac4:	280f      	cmp	r0, #15
   87ac6:	dd01      	ble.n	87acc <_malloc_r+0xb4>
   87ac8:	3a01      	subs	r2, #1
   87aca:	e00d      	b.n	87ae8 <_malloc_r+0xd0>
   87acc:	2800      	cmp	r0, #0
   87ace:	db09      	blt.n	87ae4 <_malloc_r+0xcc>
   87ad0:	68eb      	ldr	r3, [r5, #12]
   87ad2:	68aa      	ldr	r2, [r5, #8]
   87ad4:	60d3      	str	r3, [r2, #12]
   87ad6:	609a      	str	r2, [r3, #8]
   87ad8:	186b      	adds	r3, r5, r1
   87ada:	685a      	ldr	r2, [r3, #4]
   87adc:	f042 0001 	orr.w	r0, r2, #1
   87ae0:	6058      	str	r0, [r3, #4]
   87ae2:	e190      	b.n	87e06 <_malloc_r+0x3ee>
   87ae4:	68ed      	ldr	r5, [r5, #12]
   87ae6:	e7e7      	b.n	87ab8 <_malloc_r+0xa0>
   87ae8:	3201      	adds	r2, #1
   87aea:	4977      	ldr	r1, [pc, #476]	; (87cc8 <_malloc_r+0x2b0>)
   87aec:	690d      	ldr	r5, [r1, #16]
   87aee:	f101 0708 	add.w	r7, r1, #8
   87af2:	42bd      	cmp	r5, r7
   87af4:	d068      	beq.n	87bc8 <_malloc_r+0x1b0>
   87af6:	6868      	ldr	r0, [r5, #4]
   87af8:	f020 0303 	bic.w	r3, r0, #3
   87afc:	1b18      	subs	r0, r3, r4
   87afe:	280f      	cmp	r0, #15
   87b00:	dd0c      	ble.n	87b1c <_malloc_r+0x104>
   87b02:	192b      	adds	r3, r5, r4
   87b04:	614b      	str	r3, [r1, #20]
   87b06:	610b      	str	r3, [r1, #16]
   87b08:	f044 0401 	orr.w	r4, r4, #1
   87b0c:	f040 0101 	orr.w	r1, r0, #1
   87b10:	606c      	str	r4, [r5, #4]
   87b12:	60df      	str	r7, [r3, #12]
   87b14:	609f      	str	r7, [r3, #8]
   87b16:	6059      	str	r1, [r3, #4]
   87b18:	5018      	str	r0, [r3, r0]
   87b1a:	e174      	b.n	87e06 <_malloc_r+0x3ee>
   87b1c:	2800      	cmp	r0, #0
   87b1e:	614f      	str	r7, [r1, #20]
   87b20:	610f      	str	r7, [r1, #16]
   87b22:	db01      	blt.n	87b28 <_malloc_r+0x110>
   87b24:	18eb      	adds	r3, r5, r3
   87b26:	e7d8      	b.n	87ada <_malloc_r+0xc2>
   87b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87b2c:	d20f      	bcs.n	87b4e <_malloc_r+0x136>
   87b2e:	08db      	lsrs	r3, r3, #3
   87b30:	1098      	asrs	r0, r3, #2
   87b32:	2701      	movs	r7, #1
   87b34:	fa07 f700 	lsl.w	r7, r7, r0
   87b38:	6848      	ldr	r0, [r1, #4]
   87b3a:	4307      	orrs	r7, r0
   87b3c:	604f      	str	r7, [r1, #4]
   87b3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   87b42:	688b      	ldr	r3, [r1, #8]
   87b44:	60e9      	str	r1, [r5, #12]
   87b46:	60ab      	str	r3, [r5, #8]
   87b48:	60dd      	str	r5, [r3, #12]
   87b4a:	608d      	str	r5, [r1, #8]
   87b4c:	e03c      	b.n	87bc8 <_malloc_r+0x1b0>
   87b4e:	0a58      	lsrs	r0, r3, #9
   87b50:	2804      	cmp	r0, #4
   87b52:	d802      	bhi.n	87b5a <_malloc_r+0x142>
   87b54:	0998      	lsrs	r0, r3, #6
   87b56:	3038      	adds	r0, #56	; 0x38
   87b58:	e016      	b.n	87b88 <_malloc_r+0x170>
   87b5a:	2814      	cmp	r0, #20
   87b5c:	d801      	bhi.n	87b62 <_malloc_r+0x14a>
   87b5e:	305b      	adds	r0, #91	; 0x5b
   87b60:	e012      	b.n	87b88 <_malloc_r+0x170>
   87b62:	2854      	cmp	r0, #84	; 0x54
   87b64:	d802      	bhi.n	87b6c <_malloc_r+0x154>
   87b66:	0b18      	lsrs	r0, r3, #12
   87b68:	306e      	adds	r0, #110	; 0x6e
   87b6a:	e00d      	b.n	87b88 <_malloc_r+0x170>
   87b6c:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   87b70:	d802      	bhi.n	87b78 <_malloc_r+0x160>
   87b72:	0bd8      	lsrs	r0, r3, #15
   87b74:	3077      	adds	r0, #119	; 0x77
   87b76:	e007      	b.n	87b88 <_malloc_r+0x170>
   87b78:	f240 5754 	movw	r7, #1364	; 0x554
   87b7c:	42b8      	cmp	r0, r7
   87b7e:	d802      	bhi.n	87b86 <_malloc_r+0x16e>
   87b80:	0c98      	lsrs	r0, r3, #18
   87b82:	307c      	adds	r0, #124	; 0x7c
   87b84:	e000      	b.n	87b88 <_malloc_r+0x170>
   87b86:	207e      	movs	r0, #126	; 0x7e
   87b88:	f8df e13c 	ldr.w	lr, [pc, #316]	; 87cc8 <_malloc_r+0x2b0>
   87b8c:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   87b90:	68b9      	ldr	r1, [r7, #8]
   87b92:	42b9      	cmp	r1, r7
   87b94:	d10e      	bne.n	87bb4 <_malloc_r+0x19c>
   87b96:	1087      	asrs	r7, r0, #2
   87b98:	2301      	movs	r3, #1
   87b9a:	fa03 f007 	lsl.w	r0, r3, r7
   87b9e:	f8de 7004 	ldr.w	r7, [lr, #4]
   87ba2:	ea40 0307 	orr.w	r3, r0, r7
   87ba6:	f8ce 3004 	str.w	r3, [lr, #4]
   87baa:	4608      	mov	r0, r1
   87bac:	e008      	b.n	87bc0 <_malloc_r+0x1a8>
   87bae:	6889      	ldr	r1, [r1, #8]
   87bb0:	42b9      	cmp	r1, r7
   87bb2:	d004      	beq.n	87bbe <_malloc_r+0x1a6>
   87bb4:	6848      	ldr	r0, [r1, #4]
   87bb6:	f020 0003 	bic.w	r0, r0, #3
   87bba:	4283      	cmp	r3, r0
   87bbc:	d3f7      	bcc.n	87bae <_malloc_r+0x196>
   87bbe:	68c8      	ldr	r0, [r1, #12]
   87bc0:	60e8      	str	r0, [r5, #12]
   87bc2:	60a9      	str	r1, [r5, #8]
   87bc4:	60cd      	str	r5, [r1, #12]
   87bc6:	6085      	str	r5, [r0, #8]
   87bc8:	1095      	asrs	r5, r2, #2
   87bca:	2001      	movs	r0, #1
   87bcc:	fa00 f305 	lsl.w	r3, r0, r5
   87bd0:	4f3d      	ldr	r7, [pc, #244]	; (87cc8 <_malloc_r+0x2b0>)
   87bd2:	6879      	ldr	r1, [r7, #4]
   87bd4:	428b      	cmp	r3, r1
   87bd6:	d85d      	bhi.n	87c94 <_malloc_r+0x27c>
   87bd8:	420b      	tst	r3, r1
   87bda:	d105      	bne.n	87be8 <_malloc_r+0x1d0>
   87bdc:	f022 0203 	bic.w	r2, r2, #3
   87be0:	005b      	lsls	r3, r3, #1
   87be2:	3204      	adds	r2, #4
   87be4:	420b      	tst	r3, r1
   87be6:	d0fb      	beq.n	87be0 <_malloc_r+0x1c8>
   87be8:	4d37      	ldr	r5, [pc, #220]	; (87cc8 <_malloc_r+0x2b0>)
   87bea:	4610      	mov	r0, r2
   87bec:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   87bf0:	4677      	mov	r7, lr
   87bf2:	68fd      	ldr	r5, [r7, #12]
   87bf4:	42bd      	cmp	r5, r7
   87bf6:	d02d      	beq.n	87c54 <_malloc_r+0x23c>
   87bf8:	6869      	ldr	r1, [r5, #4]
   87bfa:	f021 0c03 	bic.w	ip, r1, #3
   87bfe:	ebc4 010c 	rsb	r1, r4, ip
   87c02:	290f      	cmp	r1, #15
   87c04:	dd13      	ble.n	87c2e <_malloc_r+0x216>
   87c06:	192b      	adds	r3, r5, r4
   87c08:	f044 0401 	orr.w	r4, r4, #1
   87c0c:	68ea      	ldr	r2, [r5, #12]
   87c0e:	606c      	str	r4, [r5, #4]
   87c10:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87c14:	5059      	str	r1, [r3, r1]
   87c16:	60c2      	str	r2, [r0, #12]
   87c18:	6090      	str	r0, [r2, #8]
   87c1a:	4a2b      	ldr	r2, [pc, #172]	; (87cc8 <_malloc_r+0x2b0>)
   87c1c:	f041 0001 	orr.w	r0, r1, #1
   87c20:	6153      	str	r3, [r2, #20]
   87c22:	6113      	str	r3, [r2, #16]
   87c24:	3208      	adds	r2, #8
   87c26:	60da      	str	r2, [r3, #12]
   87c28:	609a      	str	r2, [r3, #8]
   87c2a:	6058      	str	r0, [r3, #4]
   87c2c:	e00c      	b.n	87c48 <_malloc_r+0x230>
   87c2e:	2900      	cmp	r1, #0
   87c30:	db0e      	blt.n	87c50 <_malloc_r+0x238>
   87c32:	eb05 000c 	add.w	r0, r5, ip
   87c36:	6842      	ldr	r2, [r0, #4]
   87c38:	68e9      	ldr	r1, [r5, #12]
   87c3a:	f042 0301 	orr.w	r3, r2, #1
   87c3e:	6043      	str	r3, [r0, #4]
   87c40:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87c44:	60c1      	str	r1, [r0, #12]
   87c46:	6088      	str	r0, [r1, #8]
   87c48:	4630      	mov	r0, r6
   87c4a:	f000 f970 	bl	87f2e <__malloc_unlock>
   87c4e:	e0de      	b.n	87e0e <_malloc_r+0x3f6>
   87c50:	68ed      	ldr	r5, [r5, #12]
   87c52:	e7cf      	b.n	87bf4 <_malloc_r+0x1dc>
   87c54:	3001      	adds	r0, #1
   87c56:	0781      	lsls	r1, r0, #30
   87c58:	f105 0708 	add.w	r7, r5, #8
   87c5c:	d1c9      	bne.n	87bf2 <_malloc_r+0x1da>
   87c5e:	4671      	mov	r1, lr
   87c60:	0795      	lsls	r5, r2, #30
   87c62:	d105      	bne.n	87c70 <_malloc_r+0x258>
   87c64:	4a18      	ldr	r2, [pc, #96]	; (87cc8 <_malloc_r+0x2b0>)
   87c66:	6855      	ldr	r5, [r2, #4]
   87c68:	ea25 0503 	bic.w	r5, r5, r3
   87c6c:	6055      	str	r5, [r2, #4]
   87c6e:	e005      	b.n	87c7c <_malloc_r+0x264>
   87c70:	f1a1 0708 	sub.w	r7, r1, #8
   87c74:	6809      	ldr	r1, [r1, #0]
   87c76:	3a01      	subs	r2, #1
   87c78:	42b9      	cmp	r1, r7
   87c7a:	d0f1      	beq.n	87c60 <_malloc_r+0x248>
   87c7c:	4f12      	ldr	r7, [pc, #72]	; (87cc8 <_malloc_r+0x2b0>)
   87c7e:	005b      	lsls	r3, r3, #1
   87c80:	687f      	ldr	r7, [r7, #4]
   87c82:	42bb      	cmp	r3, r7
   87c84:	d806      	bhi.n	87c94 <_malloc_r+0x27c>
   87c86:	b12b      	cbz	r3, 87c94 <_malloc_r+0x27c>
   87c88:	4602      	mov	r2, r0
   87c8a:	423b      	tst	r3, r7
   87c8c:	d1ac      	bne.n	87be8 <_malloc_r+0x1d0>
   87c8e:	3204      	adds	r2, #4
   87c90:	005b      	lsls	r3, r3, #1
   87c92:	e7fa      	b.n	87c8a <_malloc_r+0x272>
   87c94:	4b0c      	ldr	r3, [pc, #48]	; (87cc8 <_malloc_r+0x2b0>)
   87c96:	689f      	ldr	r7, [r3, #8]
   87c98:	4619      	mov	r1, r3
   87c9a:	6878      	ldr	r0, [r7, #4]
   87c9c:	f020 0903 	bic.w	r9, r0, #3
   87ca0:	45a1      	cmp	r9, r4
   87ca2:	d304      	bcc.n	87cae <_malloc_r+0x296>
   87ca4:	ebc4 0009 	rsb	r0, r4, r9
   87ca8:	280f      	cmp	r0, #15
   87caa:	f300 80a2 	bgt.w	87df2 <_malloc_r+0x3da>
   87cae:	4a07      	ldr	r2, [pc, #28]	; (87ccc <_malloc_r+0x2b4>)
   87cb0:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   87cb4:	6815      	ldr	r5, [r2, #0]
   87cb6:	3301      	adds	r3, #1
   87cb8:	eb07 0a09 	add.w	sl, r7, r9
   87cbc:	eb04 0805 	add.w	r8, r4, r5
   87cc0:	d106      	bne.n	87cd0 <_malloc_r+0x2b8>
   87cc2:	f108 0810 	add.w	r8, r8, #16
   87cc6:	e00b      	b.n	87ce0 <_malloc_r+0x2c8>
   87cc8:	200704e8 	.word	0x200704e8
   87ccc:	2007ab04 	.word	0x2007ab04
   87cd0:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   87cd4:	f100 010f 	add.w	r1, r0, #15
   87cd8:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   87cdc:	f022 080f 	bic.w	r8, r2, #15
   87ce0:	4630      	mov	r0, r6
   87ce2:	4641      	mov	r1, r8
   87ce4:	f000 ff36 	bl	88b54 <_sbrk_r>
   87ce8:	1c42      	adds	r2, r0, #1
   87cea:	4605      	mov	r5, r0
   87cec:	d071      	beq.n	87dd2 <_malloc_r+0x3ba>
   87cee:	4550      	cmp	r0, sl
   87cf0:	d202      	bcs.n	87cf8 <_malloc_r+0x2e0>
   87cf2:	4b48      	ldr	r3, [pc, #288]	; (87e14 <_malloc_r+0x3fc>)
   87cf4:	429f      	cmp	r7, r3
   87cf6:	d16c      	bne.n	87dd2 <_malloc_r+0x3ba>
   87cf8:	4847      	ldr	r0, [pc, #284]	; (87e18 <_malloc_r+0x400>)
   87cfa:	4555      	cmp	r5, sl
   87cfc:	6841      	ldr	r1, [r0, #4]
   87cfe:	4a45      	ldr	r2, [pc, #276]	; (87e14 <_malloc_r+0x3fc>)
   87d00:	eb08 0301 	add.w	r3, r8, r1
   87d04:	6043      	str	r3, [r0, #4]
   87d06:	d107      	bne.n	87d18 <_malloc_r+0x300>
   87d08:	0529      	lsls	r1, r5, #20
   87d0a:	d105      	bne.n	87d18 <_malloc_r+0x300>
   87d0c:	6895      	ldr	r5, [r2, #8]
   87d0e:	44c8      	add	r8, r9
   87d10:	f048 0001 	orr.w	r0, r8, #1
   87d14:	6068      	str	r0, [r5, #4]
   87d16:	e051      	b.n	87dbc <_malloc_r+0x3a4>
   87d18:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   87d1c:	1c42      	adds	r2, r0, #1
   87d1e:	d103      	bne.n	87d28 <_malloc_r+0x310>
   87d20:	4a3c      	ldr	r2, [pc, #240]	; (87e14 <_malloc_r+0x3fc>)
   87d22:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   87d26:	e005      	b.n	87d34 <_malloc_r+0x31c>
   87d28:	ebca 0a05 	rsb	sl, sl, r5
   87d2c:	eb03 010a 	add.w	r1, r3, sl
   87d30:	4b39      	ldr	r3, [pc, #228]	; (87e18 <_malloc_r+0x400>)
   87d32:	6059      	str	r1, [r3, #4]
   87d34:	f015 0007 	ands.w	r0, r5, #7
   87d38:	bf1c      	itt	ne
   87d3a:	f1c0 0008 	rsbne	r0, r0, #8
   87d3e:	182d      	addne	r5, r5, r0
   87d40:	eb05 0c08 	add.w	ip, r5, r8
   87d44:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   87d48:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   87d4c:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   87d50:	4641      	mov	r1, r8
   87d52:	4630      	mov	r0, r6
   87d54:	f000 fefe 	bl	88b54 <_sbrk_r>
   87d58:	4a2f      	ldr	r2, [pc, #188]	; (87e18 <_malloc_r+0x400>)
   87d5a:	1c43      	adds	r3, r0, #1
   87d5c:	6853      	ldr	r3, [r2, #4]
   87d5e:	bf08      	it	eq
   87d60:	f04f 0800 	moveq.w	r8, #0
   87d64:	eb08 0103 	add.w	r1, r8, r3
   87d68:	bf08      	it	eq
   87d6a:	4628      	moveq	r0, r5
   87d6c:	6051      	str	r1, [r2, #4]
   87d6e:	1b40      	subs	r0, r0, r5
   87d70:	4a28      	ldr	r2, [pc, #160]	; (87e14 <_malloc_r+0x3fc>)
   87d72:	eb00 0308 	add.w	r3, r0, r8
   87d76:	f043 0101 	orr.w	r1, r3, #1
   87d7a:	4297      	cmp	r7, r2
   87d7c:	6095      	str	r5, [r2, #8]
   87d7e:	6069      	str	r1, [r5, #4]
   87d80:	d01c      	beq.n	87dbc <_malloc_r+0x3a4>
   87d82:	f1b9 0f0f 	cmp.w	r9, #15
   87d86:	d802      	bhi.n	87d8e <_malloc_r+0x376>
   87d88:	2201      	movs	r2, #1
   87d8a:	606a      	str	r2, [r5, #4]
   87d8c:	e021      	b.n	87dd2 <_malloc_r+0x3ba>
   87d8e:	687d      	ldr	r5, [r7, #4]
   87d90:	f1a9 090c 	sub.w	r9, r9, #12
   87d94:	f029 0907 	bic.w	r9, r9, #7
   87d98:	f005 0201 	and.w	r2, r5, #1
   87d9c:	2105      	movs	r1, #5
   87d9e:	eb07 0309 	add.w	r3, r7, r9
   87da2:	ea49 0002 	orr.w	r0, r9, r2
   87da6:	f1b9 0f0f 	cmp.w	r9, #15
   87daa:	6078      	str	r0, [r7, #4]
   87dac:	6059      	str	r1, [r3, #4]
   87dae:	6099      	str	r1, [r3, #8]
   87db0:	d904      	bls.n	87dbc <_malloc_r+0x3a4>
   87db2:	4630      	mov	r0, r6
   87db4:	f107 0108 	add.w	r1, r7, #8
   87db8:	f7fe ffd0 	bl	86d5c <_free_r>
   87dbc:	4a16      	ldr	r2, [pc, #88]	; (87e18 <_malloc_r+0x400>)
   87dbe:	6853      	ldr	r3, [r2, #4]
   87dc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   87dc2:	6b15      	ldr	r5, [r2, #48]	; 0x30
   87dc4:	428b      	cmp	r3, r1
   87dc6:	bf88      	it	hi
   87dc8:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   87dca:	42ab      	cmp	r3, r5
   87dcc:	bf84      	itt	hi
   87dce:	4d12      	ldrhi	r5, [pc, #72]	; (87e18 <_malloc_r+0x400>)
   87dd0:	632b      	strhi	r3, [r5, #48]	; 0x30
   87dd2:	4810      	ldr	r0, [pc, #64]	; (87e14 <_malloc_r+0x3fc>)
   87dd4:	6882      	ldr	r2, [r0, #8]
   87dd6:	6853      	ldr	r3, [r2, #4]
   87dd8:	f023 0103 	bic.w	r1, r3, #3
   87ddc:	42a1      	cmp	r1, r4
   87dde:	ebc4 0001 	rsb	r0, r4, r1
   87de2:	d301      	bcc.n	87de8 <_malloc_r+0x3d0>
   87de4:	280f      	cmp	r0, #15
   87de6:	dc04      	bgt.n	87df2 <_malloc_r+0x3da>
   87de8:	4630      	mov	r0, r6
   87dea:	f000 f8a0 	bl	87f2e <__malloc_unlock>
   87dee:	2500      	movs	r5, #0
   87df0:	e00d      	b.n	87e0e <_malloc_r+0x3f6>
   87df2:	4a08      	ldr	r2, [pc, #32]	; (87e14 <_malloc_r+0x3fc>)
   87df4:	f044 0301 	orr.w	r3, r4, #1
   87df8:	6895      	ldr	r5, [r2, #8]
   87dfa:	f040 0101 	orr.w	r1, r0, #1
   87dfe:	192c      	adds	r4, r5, r4
   87e00:	606b      	str	r3, [r5, #4]
   87e02:	6094      	str	r4, [r2, #8]
   87e04:	6061      	str	r1, [r4, #4]
   87e06:	4630      	mov	r0, r6
   87e08:	f000 f891 	bl	87f2e <__malloc_unlock>
   87e0c:	3508      	adds	r5, #8
   87e0e:	4628      	mov	r0, r5
   87e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87e14:	200704e8 	.word	0x200704e8
   87e18:	2007ab04 	.word	0x2007ab04

00087e1c <_mbrtowc_r>:
   87e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   87e20:	4616      	mov	r6, r2
   87e22:	4a10      	ldr	r2, [pc, #64]	; (87e64 <_mbrtowc_r+0x48>)
   87e24:	4604      	mov	r4, r0
   87e26:	4689      	mov	r9, r1
   87e28:	4698      	mov	r8, r3
   87e2a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87e2c:	6817      	ldr	r7, [r2, #0]
   87e2e:	b946      	cbnz	r6, 87e42 <_mbrtowc_r+0x26>
   87e30:	f7ff fd54 	bl	878dc <__locale_charset>
   87e34:	4631      	mov	r1, r6
   87e36:	e88d 0021 	stmia.w	sp, {r0, r5}
   87e3a:	4a0b      	ldr	r2, [pc, #44]	; (87e68 <_mbrtowc_r+0x4c>)
   87e3c:	4620      	mov	r0, r4
   87e3e:	2301      	movs	r3, #1
   87e40:	e007      	b.n	87e52 <_mbrtowc_r+0x36>
   87e42:	f7ff fd4b 	bl	878dc <__locale_charset>
   87e46:	4649      	mov	r1, r9
   87e48:	e88d 0021 	stmia.w	sp, {r0, r5}
   87e4c:	4632      	mov	r2, r6
   87e4e:	4620      	mov	r0, r4
   87e50:	4643      	mov	r3, r8
   87e52:	47b8      	blx	r7
   87e54:	1c43      	adds	r3, r0, #1
   87e56:	d103      	bne.n	87e60 <_mbrtowc_r+0x44>
   87e58:	2300      	movs	r3, #0
   87e5a:	218a      	movs	r1, #138	; 0x8a
   87e5c:	602b      	str	r3, [r5, #0]
   87e5e:	6021      	str	r1, [r4, #0]
   87e60:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   87e64:	200708f8 	.word	0x200708f8
   87e68:	0008a923 	.word	0x0008a923

00087e6c <mbrtowc>:
   87e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   87e6e:	9300      	str	r3, [sp, #0]
   87e70:	4b05      	ldr	r3, [pc, #20]	; (87e88 <mbrtowc+0x1c>)
   87e72:	4606      	mov	r6, r0
   87e74:	460d      	mov	r5, r1
   87e76:	4614      	mov	r4, r2
   87e78:	6818      	ldr	r0, [r3, #0]
   87e7a:	4631      	mov	r1, r6
   87e7c:	462a      	mov	r2, r5
   87e7e:	4623      	mov	r3, r4
   87e80:	f7ff ffcc 	bl	87e1c <_mbrtowc_r>
   87e84:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   87e86:	bf00      	nop
   87e88:	20070010 	.word	0x20070010

00087e8c <__ascii_mbtowc>:
   87e8c:	b082      	sub	sp, #8
   87e8e:	b901      	cbnz	r1, 87e92 <__ascii_mbtowc+0x6>
   87e90:	a901      	add	r1, sp, #4
   87e92:	b13a      	cbz	r2, 87ea4 <__ascii_mbtowc+0x18>
   87e94:	b143      	cbz	r3, 87ea8 <__ascii_mbtowc+0x1c>
   87e96:	7813      	ldrb	r3, [r2, #0]
   87e98:	600b      	str	r3, [r1, #0]
   87e9a:	7810      	ldrb	r0, [r2, #0]
   87e9c:	3000      	adds	r0, #0
   87e9e:	bf18      	it	ne
   87ea0:	2001      	movne	r0, #1
   87ea2:	e003      	b.n	87eac <__ascii_mbtowc+0x20>
   87ea4:	4610      	mov	r0, r2
   87ea6:	e001      	b.n	87eac <__ascii_mbtowc+0x20>
   87ea8:	f06f 0001 	mvn.w	r0, #1
   87eac:	b002      	add	sp, #8
   87eae:	4770      	bx	lr

00087eb0 <_mbtowc_r>:
   87eb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   87eb4:	461f      	mov	r7, r3
   87eb6:	4b08      	ldr	r3, [pc, #32]	; (87ed8 <_mbtowc_r+0x28>)
   87eb8:	4606      	mov	r6, r0
   87eba:	4689      	mov	r9, r1
   87ebc:	4690      	mov	r8, r2
   87ebe:	681c      	ldr	r4, [r3, #0]
   87ec0:	f7ff fd0c 	bl	878dc <__locale_charset>
   87ec4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87ec6:	9000      	str	r0, [sp, #0]
   87ec8:	9501      	str	r5, [sp, #4]
   87eca:	4630      	mov	r0, r6
   87ecc:	4649      	mov	r1, r9
   87ece:	4642      	mov	r2, r8
   87ed0:	463b      	mov	r3, r7
   87ed2:	47a0      	blx	r4
   87ed4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   87ed8:	200708f8 	.word	0x200708f8

00087edc <memchr>:
   87edc:	b510      	push	{r4, lr}
   87ede:	b2c9      	uxtb	r1, r1
   87ee0:	4603      	mov	r3, r0
   87ee2:	1882      	adds	r2, r0, r2
   87ee4:	4293      	cmp	r3, r2
   87ee6:	4618      	mov	r0, r3
   87ee8:	d004      	beq.n	87ef4 <memchr+0x18>
   87eea:	7804      	ldrb	r4, [r0, #0]
   87eec:	3301      	adds	r3, #1
   87eee:	428c      	cmp	r4, r1
   87ef0:	d1f8      	bne.n	87ee4 <memchr+0x8>
   87ef2:	e000      	b.n	87ef6 <memchr+0x1a>
   87ef4:	2000      	movs	r0, #0
   87ef6:	bd10      	pop	{r4, pc}

00087ef8 <memmove>:
   87ef8:	4281      	cmp	r1, r0
   87efa:	b570      	push	{r4, r5, r6, lr}
   87efc:	d20e      	bcs.n	87f1c <memmove+0x24>
   87efe:	188c      	adds	r4, r1, r2
   87f00:	42a0      	cmp	r0, r4
   87f02:	d20b      	bcs.n	87f1c <memmove+0x24>
   87f04:	1885      	adds	r5, r0, r2
   87f06:	4613      	mov	r3, r2
   87f08:	f113 33ff 	adds.w	r3, r3, #4294967295
   87f0c:	d305      	bcc.n	87f1a <memmove+0x22>
   87f0e:	4251      	negs	r1, r2
   87f10:	1866      	adds	r6, r4, r1
   87f12:	5cf6      	ldrb	r6, [r6, r3]
   87f14:	1869      	adds	r1, r5, r1
   87f16:	54ce      	strb	r6, [r1, r3]
   87f18:	e7f6      	b.n	87f08 <memmove+0x10>
   87f1a:	bd70      	pop	{r4, r5, r6, pc}
   87f1c:	2300      	movs	r3, #0
   87f1e:	4293      	cmp	r3, r2
   87f20:	d003      	beq.n	87f2a <memmove+0x32>
   87f22:	5ccc      	ldrb	r4, [r1, r3]
   87f24:	54c4      	strb	r4, [r0, r3]
   87f26:	3301      	adds	r3, #1
   87f28:	e7f9      	b.n	87f1e <memmove+0x26>
   87f2a:	bd70      	pop	{r4, r5, r6, pc}

00087f2c <__malloc_lock>:
   87f2c:	4770      	bx	lr

00087f2e <__malloc_unlock>:
   87f2e:	4770      	bx	lr

00087f30 <_Balloc>:
   87f30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87f32:	b570      	push	{r4, r5, r6, lr}
   87f34:	4605      	mov	r5, r0
   87f36:	460c      	mov	r4, r1
   87f38:	b13b      	cbz	r3, 87f4a <_Balloc+0x1a>
   87f3a:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   87f3c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
   87f40:	b160      	cbz	r0, 87f5c <_Balloc+0x2c>
   87f42:	6803      	ldr	r3, [r0, #0]
   87f44:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
   87f48:	e014      	b.n	87f74 <_Balloc+0x44>
   87f4a:	2104      	movs	r1, #4
   87f4c:	2221      	movs	r2, #33	; 0x21
   87f4e:	f001 ff1d 	bl	89d8c <_calloc_r>
   87f52:	64e8      	str	r0, [r5, #76]	; 0x4c
   87f54:	2800      	cmp	r0, #0
   87f56:	d1f0      	bne.n	87f3a <_Balloc+0xa>
   87f58:	2000      	movs	r0, #0
   87f5a:	bd70      	pop	{r4, r5, r6, pc}
   87f5c:	2101      	movs	r1, #1
   87f5e:	fa01 f604 	lsl.w	r6, r1, r4
   87f62:	1d72      	adds	r2, r6, #5
   87f64:	4628      	mov	r0, r5
   87f66:	0092      	lsls	r2, r2, #2
   87f68:	f001 ff10 	bl	89d8c <_calloc_r>
   87f6c:	2800      	cmp	r0, #0
   87f6e:	d0f3      	beq.n	87f58 <_Balloc+0x28>
   87f70:	6044      	str	r4, [r0, #4]
   87f72:	6086      	str	r6, [r0, #8]
   87f74:	2100      	movs	r1, #0
   87f76:	6101      	str	r1, [r0, #16]
   87f78:	60c1      	str	r1, [r0, #12]
   87f7a:	bd70      	pop	{r4, r5, r6, pc}

00087f7c <_Bfree>:
   87f7c:	b131      	cbz	r1, 87f8c <_Bfree+0x10>
   87f7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87f80:	684a      	ldr	r2, [r1, #4]
   87f82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   87f86:	6008      	str	r0, [r1, #0]
   87f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   87f8c:	4770      	bx	lr

00087f8e <__multadd>:
   87f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87f92:	460c      	mov	r4, r1
   87f94:	461e      	mov	r6, r3
   87f96:	690d      	ldr	r5, [r1, #16]
   87f98:	4607      	mov	r7, r0
   87f9a:	f101 0114 	add.w	r1, r1, #20
   87f9e:	2300      	movs	r3, #0
   87fa0:	6808      	ldr	r0, [r1, #0]
   87fa2:	3301      	adds	r3, #1
   87fa4:	fa1f fc80 	uxth.w	ip, r0
   87fa8:	fb02 6c0c 	mla	ip, r2, ip, r6
   87fac:	0c06      	lsrs	r6, r0, #16
   87fae:	4356      	muls	r6, r2
   87fb0:	eb06 401c 	add.w	r0, r6, ip, lsr #16
   87fb4:	fa1f fc8c 	uxth.w	ip, ip
   87fb8:	0c06      	lsrs	r6, r0, #16
   87fba:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
   87fbe:	42ab      	cmp	r3, r5
   87fc0:	f841 0b04 	str.w	r0, [r1], #4
   87fc4:	dbec      	blt.n	87fa0 <__multadd+0x12>
   87fc6:	b1de      	cbz	r6, 88000 <__multadd+0x72>
   87fc8:	68a2      	ldr	r2, [r4, #8]
   87fca:	4295      	cmp	r5, r2
   87fcc:	db13      	blt.n	87ff6 <__multadd+0x68>
   87fce:	6861      	ldr	r1, [r4, #4]
   87fd0:	4638      	mov	r0, r7
   87fd2:	3101      	adds	r1, #1
   87fd4:	f7ff ffac 	bl	87f30 <_Balloc>
   87fd8:	4680      	mov	r8, r0
   87fda:	6920      	ldr	r0, [r4, #16]
   87fdc:	f104 010c 	add.w	r1, r4, #12
   87fe0:	1c83      	adds	r3, r0, #2
   87fe2:	009a      	lsls	r2, r3, #2
   87fe4:	f108 000c 	add.w	r0, r8, #12
   87fe8:	f7fb ffee 	bl	83fc8 <memcpy>
   87fec:	4621      	mov	r1, r4
   87fee:	4638      	mov	r0, r7
   87ff0:	f7ff ffc4 	bl	87f7c <_Bfree>
   87ff4:	4644      	mov	r4, r8
   87ff6:	eb04 0285 	add.w	r2, r4, r5, lsl #2
   87ffa:	3501      	adds	r5, #1
   87ffc:	6156      	str	r6, [r2, #20]
   87ffe:	6125      	str	r5, [r4, #16]
   88000:	4620      	mov	r0, r4
   88002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00088006 <__s2b>:
   88006:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8800a:	4614      	mov	r4, r2
   8800c:	4698      	mov	r8, r3
   8800e:	f103 0208 	add.w	r2, r3, #8
   88012:	2309      	movs	r3, #9
   88014:	4605      	mov	r5, r0
   88016:	460e      	mov	r6, r1
   88018:	fb92 f0f3 	sdiv	r0, r2, r3
   8801c:	2100      	movs	r1, #0
   8801e:	2301      	movs	r3, #1
   88020:	4298      	cmp	r0, r3
   88022:	dd02      	ble.n	8802a <__s2b+0x24>
   88024:	005b      	lsls	r3, r3, #1
   88026:	3101      	adds	r1, #1
   88028:	e7fa      	b.n	88020 <__s2b+0x1a>
   8802a:	4628      	mov	r0, r5
   8802c:	f7ff ff80 	bl	87f30 <_Balloc>
   88030:	4601      	mov	r1, r0
   88032:	9808      	ldr	r0, [sp, #32]
   88034:	2701      	movs	r7, #1
   88036:	2c09      	cmp	r4, #9
   88038:	6148      	str	r0, [r1, #20]
   8803a:	610f      	str	r7, [r1, #16]
   8803c:	dd12      	ble.n	88064 <__s2b+0x5e>
   8803e:	f106 0909 	add.w	r9, r6, #9
   88042:	464f      	mov	r7, r9
   88044:	1936      	adds	r6, r6, r4
   88046:	f817 3b01 	ldrb.w	r3, [r7], #1
   8804a:	220a      	movs	r2, #10
   8804c:	3b30      	subs	r3, #48	; 0x30
   8804e:	4628      	mov	r0, r5
   88050:	f7ff ff9d 	bl	87f8e <__multadd>
   88054:	42b7      	cmp	r7, r6
   88056:	4601      	mov	r1, r0
   88058:	d1f5      	bne.n	88046 <__s2b+0x40>
   8805a:	eb09 0704 	add.w	r7, r9, r4
   8805e:	3f08      	subs	r7, #8
   88060:	4626      	mov	r6, r4
   88062:	e002      	b.n	8806a <__s2b+0x64>
   88064:	f106 070a 	add.w	r7, r6, #10
   88068:	2609      	movs	r6, #9
   8806a:	4634      	mov	r4, r6
   8806c:	4544      	cmp	r4, r8
   8806e:	da09      	bge.n	88084 <__s2b+0x7e>
   88070:	1bba      	subs	r2, r7, r6
   88072:	5d13      	ldrb	r3, [r2, r4]
   88074:	4628      	mov	r0, r5
   88076:	220a      	movs	r2, #10
   88078:	3b30      	subs	r3, #48	; 0x30
   8807a:	f7ff ff88 	bl	87f8e <__multadd>
   8807e:	3401      	adds	r4, #1
   88080:	4601      	mov	r1, r0
   88082:	e7f3      	b.n	8806c <__s2b+0x66>
   88084:	4608      	mov	r0, r1
   88086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008808a <__hi0bits>:
   8808a:	0c02      	lsrs	r2, r0, #16
   8808c:	4603      	mov	r3, r0
   8808e:	0410      	lsls	r0, r2, #16
   88090:	b910      	cbnz	r0, 88098 <__hi0bits+0xe>
   88092:	041b      	lsls	r3, r3, #16
   88094:	2010      	movs	r0, #16
   88096:	e000      	b.n	8809a <__hi0bits+0x10>
   88098:	2000      	movs	r0, #0
   8809a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8809e:	d101      	bne.n	880a4 <__hi0bits+0x1a>
   880a0:	3008      	adds	r0, #8
   880a2:	021b      	lsls	r3, r3, #8
   880a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   880a8:	d101      	bne.n	880ae <__hi0bits+0x24>
   880aa:	3004      	adds	r0, #4
   880ac:	011b      	lsls	r3, r3, #4
   880ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   880b2:	d101      	bne.n	880b8 <__hi0bits+0x2e>
   880b4:	3002      	adds	r0, #2
   880b6:	009b      	lsls	r3, r3, #2
   880b8:	2b00      	cmp	r3, #0
   880ba:	db04      	blt.n	880c6 <__hi0bits+0x3c>
   880bc:	005b      	lsls	r3, r3, #1
   880be:	d501      	bpl.n	880c4 <__hi0bits+0x3a>
   880c0:	3001      	adds	r0, #1
   880c2:	4770      	bx	lr
   880c4:	2020      	movs	r0, #32
   880c6:	4770      	bx	lr

000880c8 <__lo0bits>:
   880c8:	6803      	ldr	r3, [r0, #0]
   880ca:	4602      	mov	r2, r0
   880cc:	f013 0007 	ands.w	r0, r3, #7
   880d0:	d00b      	beq.n	880ea <__lo0bits+0x22>
   880d2:	07d9      	lsls	r1, r3, #31
   880d4:	d421      	bmi.n	8811a <__lo0bits+0x52>
   880d6:	0798      	lsls	r0, r3, #30
   880d8:	d503      	bpl.n	880e2 <__lo0bits+0x1a>
   880da:	0859      	lsrs	r1, r3, #1
   880dc:	6011      	str	r1, [r2, #0]
   880de:	2001      	movs	r0, #1
   880e0:	4770      	bx	lr
   880e2:	0898      	lsrs	r0, r3, #2
   880e4:	6010      	str	r0, [r2, #0]
   880e6:	2002      	movs	r0, #2
   880e8:	4770      	bx	lr
   880ea:	b299      	uxth	r1, r3
   880ec:	b909      	cbnz	r1, 880f2 <__lo0bits+0x2a>
   880ee:	0c1b      	lsrs	r3, r3, #16
   880f0:	2010      	movs	r0, #16
   880f2:	f013 0fff 	tst.w	r3, #255	; 0xff
   880f6:	d101      	bne.n	880fc <__lo0bits+0x34>
   880f8:	3008      	adds	r0, #8
   880fa:	0a1b      	lsrs	r3, r3, #8
   880fc:	0719      	lsls	r1, r3, #28
   880fe:	d101      	bne.n	88104 <__lo0bits+0x3c>
   88100:	3004      	adds	r0, #4
   88102:	091b      	lsrs	r3, r3, #4
   88104:	0799      	lsls	r1, r3, #30
   88106:	d101      	bne.n	8810c <__lo0bits+0x44>
   88108:	3002      	adds	r0, #2
   8810a:	089b      	lsrs	r3, r3, #2
   8810c:	07d9      	lsls	r1, r3, #31
   8810e:	d402      	bmi.n	88116 <__lo0bits+0x4e>
   88110:	085b      	lsrs	r3, r3, #1
   88112:	d004      	beq.n	8811e <__lo0bits+0x56>
   88114:	3001      	adds	r0, #1
   88116:	6013      	str	r3, [r2, #0]
   88118:	4770      	bx	lr
   8811a:	2000      	movs	r0, #0
   8811c:	4770      	bx	lr
   8811e:	2020      	movs	r0, #32
   88120:	4770      	bx	lr

00088122 <__i2b>:
   88122:	b510      	push	{r4, lr}
   88124:	460c      	mov	r4, r1
   88126:	2101      	movs	r1, #1
   88128:	f7ff ff02 	bl	87f30 <_Balloc>
   8812c:	2201      	movs	r2, #1
   8812e:	6144      	str	r4, [r0, #20]
   88130:	6102      	str	r2, [r0, #16]
   88132:	bd10      	pop	{r4, pc}

00088134 <__multiply>:
   88134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88138:	4616      	mov	r6, r2
   8813a:	6933      	ldr	r3, [r6, #16]
   8813c:	690a      	ldr	r2, [r1, #16]
   8813e:	b085      	sub	sp, #20
   88140:	429a      	cmp	r2, r3
   88142:	460d      	mov	r5, r1
   88144:	da01      	bge.n	8814a <__multiply+0x16>
   88146:	4635      	mov	r5, r6
   88148:	460e      	mov	r6, r1
   8814a:	f8d5 8010 	ldr.w	r8, [r5, #16]
   8814e:	6937      	ldr	r7, [r6, #16]
   88150:	68aa      	ldr	r2, [r5, #8]
   88152:	6869      	ldr	r1, [r5, #4]
   88154:	eb08 0407 	add.w	r4, r8, r7
   88158:	4294      	cmp	r4, r2
   8815a:	bfc8      	it	gt
   8815c:	3101      	addgt	r1, #1
   8815e:	f7ff fee7 	bl	87f30 <_Balloc>
   88162:	eb00 0184 	add.w	r1, r0, r4, lsl #2
   88166:	3114      	adds	r1, #20
   88168:	f100 0314 	add.w	r3, r0, #20
   8816c:	9101      	str	r1, [sp, #4]
   8816e:	9a01      	ldr	r2, [sp, #4]
   88170:	4293      	cmp	r3, r2
   88172:	d203      	bcs.n	8817c <__multiply+0x48>
   88174:	2200      	movs	r2, #0
   88176:	f843 2b04 	str.w	r2, [r3], #4
   8817a:	e7f8      	b.n	8816e <__multiply+0x3a>
   8817c:	eb06 0787 	add.w	r7, r6, r7, lsl #2
   88180:	f105 0314 	add.w	r3, r5, #20
   88184:	eb05 0c88 	add.w	ip, r5, r8, lsl #2
   88188:	3714      	adds	r7, #20
   8818a:	9302      	str	r3, [sp, #8]
   8818c:	f10c 0e14 	add.w	lr, ip, #20
   88190:	9703      	str	r7, [sp, #12]
   88192:	f100 0318 	add.w	r3, r0, #24
   88196:	f106 0214 	add.w	r2, r6, #20
   8819a:	9d03      	ldr	r5, [sp, #12]
   8819c:	4611      	mov	r1, r2
   8819e:	42aa      	cmp	r2, r5
   881a0:	d24c      	bcs.n	8823c <__multiply+0x108>
   881a2:	8809      	ldrh	r1, [r1, #0]
   881a4:	3204      	adds	r2, #4
   881a6:	b309      	cbz	r1, 881ec <__multiply+0xb8>
   881a8:	9f02      	ldr	r7, [sp, #8]
   881aa:	1f1d      	subs	r5, r3, #4
   881ac:	2600      	movs	r6, #0
   881ae:	f857 9b04 	ldr.w	r9, [r7], #4
   881b2:	f8d5 8000 	ldr.w	r8, [r5]
   881b6:	fa1f fb89 	uxth.w	fp, r9
   881ba:	fa1f fa88 	uxth.w	sl, r8
   881be:	fb01 ac0b 	mla	ip, r1, fp, sl
   881c2:	ea4f 4919 	mov.w	r9, r9, lsr #16
   881c6:	eb0c 0a06 	add.w	sl, ip, r6
   881ca:	ea4f 4618 	mov.w	r6, r8, lsr #16
   881ce:	fb01 6809 	mla	r8, r1, r9, r6
   881d2:	fa1f fc8a 	uxth.w	ip, sl
   881d6:	eb08 481a 	add.w	r8, r8, sl, lsr #16
   881da:	ea4c 4a08 	orr.w	sl, ip, r8, lsl #16
   881de:	45be      	cmp	lr, r7
   881e0:	ea4f 4618 	mov.w	r6, r8, lsr #16
   881e4:	f845 ab04 	str.w	sl, [r5], #4
   881e8:	d8e1      	bhi.n	881ae <__multiply+0x7a>
   881ea:	602e      	str	r6, [r5, #0]
   881ec:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   881f0:	b311      	cbz	r1, 88238 <__multiply+0x104>
   881f2:	f853 6c04 	ldr.w	r6, [r3, #-4]
   881f6:	9f02      	ldr	r7, [sp, #8]
   881f8:	461d      	mov	r5, r3
   881fa:	f04f 0900 	mov.w	r9, #0
   881fe:	f835 ac02 	ldrh.w	sl, [r5, #-2]
   88202:	f8b7 b000 	ldrh.w	fp, [r7]
   88206:	b2b6      	uxth	r6, r6
   88208:	fb01 ac0b 	mla	ip, r1, fp, sl
   8820c:	44e1      	add	r9, ip
   8820e:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
   88212:	f845 6c04 	str.w	r6, [r5, #-4]
   88216:	46a8      	mov	r8, r5
   88218:	f857 6b04 	ldr.w	r6, [r7], #4
   8821c:	f8b8 a000 	ldrh.w	sl, [r8]
   88220:	0c36      	lsrs	r6, r6, #16
   88222:	fb01 a606 	mla	r6, r1, r6, sl
   88226:	3504      	adds	r5, #4
   88228:	eb06 4619 	add.w	r6, r6, r9, lsr #16
   8822c:	4577      	cmp	r7, lr
   8822e:	ea4f 4916 	mov.w	r9, r6, lsr #16
   88232:	d3e4      	bcc.n	881fe <__multiply+0xca>
   88234:	f8c8 6000 	str.w	r6, [r8]
   88238:	3304      	adds	r3, #4
   8823a:	e7ae      	b.n	8819a <__multiply+0x66>
   8823c:	9b01      	ldr	r3, [sp, #4]
   8823e:	2c00      	cmp	r4, #0
   88240:	dc03      	bgt.n	8824a <__multiply+0x116>
   88242:	6104      	str	r4, [r0, #16]
   88244:	b005      	add	sp, #20
   88246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8824a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   8824e:	2a00      	cmp	r2, #0
   88250:	d1f7      	bne.n	88242 <__multiply+0x10e>
   88252:	3c01      	subs	r4, #1
   88254:	e7f3      	b.n	8823e <__multiply+0x10a>

00088256 <__pow5mult>:
   88256:	f012 0303 	ands.w	r3, r2, #3
   8825a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8825e:	4605      	mov	r5, r0
   88260:	460e      	mov	r6, r1
   88262:	4617      	mov	r7, r2
   88264:	d007      	beq.n	88276 <__pow5mult+0x20>
   88266:	4a1c      	ldr	r2, [pc, #112]	; (882d8 <__pow5mult+0x82>)
   88268:	1e5e      	subs	r6, r3, #1
   8826a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   8826e:	2300      	movs	r3, #0
   88270:	f7ff fe8d 	bl	87f8e <__multadd>
   88274:	4606      	mov	r6, r0
   88276:	10bf      	asrs	r7, r7, #2
   88278:	d02b      	beq.n	882d2 <__pow5mult+0x7c>
   8827a:	6cac      	ldr	r4, [r5, #72]	; 0x48
   8827c:	b994      	cbnz	r4, 882a4 <__pow5mult+0x4e>
   8827e:	4628      	mov	r0, r5
   88280:	f240 2171 	movw	r1, #625	; 0x271
   88284:	f7ff ff4d 	bl	88122 <__i2b>
   88288:	4604      	mov	r4, r0
   8828a:	64a8      	str	r0, [r5, #72]	; 0x48
   8828c:	2000      	movs	r0, #0
   8828e:	6020      	str	r0, [r4, #0]
   88290:	e008      	b.n	882a4 <__pow5mult+0x4e>
   88292:	107f      	asrs	r7, r7, #1
   88294:	d01d      	beq.n	882d2 <__pow5mult+0x7c>
   88296:	f8d4 8000 	ldr.w	r8, [r4]
   8829a:	4640      	mov	r0, r8
   8829c:	f1b8 0f00 	cmp.w	r8, #0
   882a0:	d00e      	beq.n	882c0 <__pow5mult+0x6a>
   882a2:	4604      	mov	r4, r0
   882a4:	07f8      	lsls	r0, r7, #31
   882a6:	d5f4      	bpl.n	88292 <__pow5mult+0x3c>
   882a8:	4631      	mov	r1, r6
   882aa:	4622      	mov	r2, r4
   882ac:	4628      	mov	r0, r5
   882ae:	f7ff ff41 	bl	88134 <__multiply>
   882b2:	4631      	mov	r1, r6
   882b4:	4680      	mov	r8, r0
   882b6:	4628      	mov	r0, r5
   882b8:	f7ff fe60 	bl	87f7c <_Bfree>
   882bc:	4646      	mov	r6, r8
   882be:	e7e8      	b.n	88292 <__pow5mult+0x3c>
   882c0:	4628      	mov	r0, r5
   882c2:	4621      	mov	r1, r4
   882c4:	4622      	mov	r2, r4
   882c6:	f7ff ff35 	bl	88134 <__multiply>
   882ca:	6020      	str	r0, [r4, #0]
   882cc:	f8c0 8000 	str.w	r8, [r0]
   882d0:	e7e7      	b.n	882a2 <__pow5mult+0x4c>
   882d2:	4630      	mov	r0, r6
   882d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   882d8:	0008a928 	.word	0x0008a928

000882dc <__lshift>:
   882dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   882e0:	460c      	mov	r4, r1
   882e2:	6923      	ldr	r3, [r4, #16]
   882e4:	ea4f 1862 	mov.w	r8, r2, asr #5
   882e8:	eb08 0a03 	add.w	sl, r8, r3
   882ec:	6849      	ldr	r1, [r1, #4]
   882ee:	68a5      	ldr	r5, [r4, #8]
   882f0:	4681      	mov	r9, r0
   882f2:	4617      	mov	r7, r2
   882f4:	f10a 0601 	add.w	r6, sl, #1
   882f8:	42ae      	cmp	r6, r5
   882fa:	dd02      	ble.n	88302 <__lshift+0x26>
   882fc:	3101      	adds	r1, #1
   882fe:	006d      	lsls	r5, r5, #1
   88300:	e7fa      	b.n	882f8 <__lshift+0x1c>
   88302:	4648      	mov	r0, r9
   88304:	f7ff fe14 	bl	87f30 <_Balloc>
   88308:	2200      	movs	r2, #0
   8830a:	4605      	mov	r5, r0
   8830c:	f100 0014 	add.w	r0, r0, #20
   88310:	4542      	cmp	r2, r8
   88312:	da04      	bge.n	8831e <__lshift+0x42>
   88314:	2100      	movs	r1, #0
   88316:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
   8831a:	3201      	adds	r2, #1
   8831c:	e7f8      	b.n	88310 <__lshift+0x34>
   8831e:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
   88322:	6922      	ldr	r2, [r4, #16]
   88324:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   88328:	3314      	adds	r3, #20
   8832a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
   8832e:	f017 071f 	ands.w	r7, r7, #31
   88332:	f104 0114 	add.w	r1, r4, #20
   88336:	f100 0e14 	add.w	lr, r0, #20
   8833a:	d014      	beq.n	88366 <__lshift+0x8a>
   8833c:	4618      	mov	r0, r3
   8833e:	f1c7 0c20 	rsb	ip, r7, #32
   88342:	2300      	movs	r3, #0
   88344:	680a      	ldr	r2, [r1, #0]
   88346:	fa02 f207 	lsl.w	r2, r2, r7
   8834a:	4313      	orrs	r3, r2
   8834c:	f840 3b04 	str.w	r3, [r0], #4
   88350:	f851 3b04 	ldr.w	r3, [r1], #4
   88354:	4571      	cmp	r1, lr
   88356:	fa23 f30c 	lsr.w	r3, r3, ip
   8835a:	d3f3      	bcc.n	88344 <__lshift+0x68>
   8835c:	6003      	str	r3, [r0, #0]
   8835e:	b143      	cbz	r3, 88372 <__lshift+0x96>
   88360:	f10a 0602 	add.w	r6, sl, #2
   88364:	e005      	b.n	88372 <__lshift+0x96>
   88366:	f851 2b04 	ldr.w	r2, [r1], #4
   8836a:	458e      	cmp	lr, r1
   8836c:	f843 2b04 	str.w	r2, [r3], #4
   88370:	d8f9      	bhi.n	88366 <__lshift+0x8a>
   88372:	3e01      	subs	r6, #1
   88374:	4648      	mov	r0, r9
   88376:	612e      	str	r6, [r5, #16]
   88378:	4621      	mov	r1, r4
   8837a:	f7ff fdff 	bl	87f7c <_Bfree>
   8837e:	4628      	mov	r0, r5
   88380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00088384 <__mcmp>:
   88384:	4603      	mov	r3, r0
   88386:	690a      	ldr	r2, [r1, #16]
   88388:	6900      	ldr	r0, [r0, #16]
   8838a:	b530      	push	{r4, r5, lr}
   8838c:	1a80      	subs	r0, r0, r2
   8838e:	d115      	bne.n	883bc <__mcmp+0x38>
   88390:	1d15      	adds	r5, r2, #4
   88392:	00aa      	lsls	r2, r5, #2
   88394:	f103 0414 	add.w	r4, r3, #20
   88398:	1889      	adds	r1, r1, r2
   8839a:	189b      	adds	r3, r3, r2
   8839c:	3304      	adds	r3, #4
   8839e:	1d0a      	adds	r2, r1, #4
   883a0:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   883a4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   883a8:	428d      	cmp	r5, r1
   883aa:	d003      	beq.n	883b4 <__mcmp+0x30>
   883ac:	d205      	bcs.n	883ba <__mcmp+0x36>
   883ae:	f04f 30ff 	mov.w	r0, #4294967295
   883b2:	bd30      	pop	{r4, r5, pc}
   883b4:	429c      	cmp	r4, r3
   883b6:	d3f3      	bcc.n	883a0 <__mcmp+0x1c>
   883b8:	bd30      	pop	{r4, r5, pc}
   883ba:	2001      	movs	r0, #1
   883bc:	bd30      	pop	{r4, r5, pc}

000883be <__mdiff>:
   883be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   883c2:	4606      	mov	r6, r0
   883c4:	460c      	mov	r4, r1
   883c6:	4608      	mov	r0, r1
   883c8:	4611      	mov	r1, r2
   883ca:	4615      	mov	r5, r2
   883cc:	f7ff ffda 	bl	88384 <__mcmp>
   883d0:	1e07      	subs	r7, r0, #0
   883d2:	d108      	bne.n	883e6 <__mdiff+0x28>
   883d4:	4639      	mov	r1, r7
   883d6:	4630      	mov	r0, r6
   883d8:	f7ff fdaa 	bl	87f30 <_Balloc>
   883dc:	2101      	movs	r1, #1
   883de:	6101      	str	r1, [r0, #16]
   883e0:	6147      	str	r7, [r0, #20]
   883e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   883e6:	db01      	blt.n	883ec <__mdiff+0x2e>
   883e8:	2700      	movs	r7, #0
   883ea:	e003      	b.n	883f4 <__mdiff+0x36>
   883ec:	4623      	mov	r3, r4
   883ee:	2701      	movs	r7, #1
   883f0:	462c      	mov	r4, r5
   883f2:	461d      	mov	r5, r3
   883f4:	6861      	ldr	r1, [r4, #4]
   883f6:	4630      	mov	r0, r6
   883f8:	f7ff fd9a 	bl	87f30 <_Balloc>
   883fc:	692a      	ldr	r2, [r5, #16]
   883fe:	6923      	ldr	r3, [r4, #16]
   88400:	eb05 0182 	add.w	r1, r5, r2, lsl #2
   88404:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   88408:	60c7      	str	r7, [r0, #12]
   8840a:	f10c 0c14 	add.w	ip, ip, #20
   8840e:	f101 0814 	add.w	r8, r1, #20
   88412:	3414      	adds	r4, #20
   88414:	3514      	adds	r5, #20
   88416:	f100 0714 	add.w	r7, r0, #20
   8841a:	2200      	movs	r2, #0
   8841c:	f854 6b04 	ldr.w	r6, [r4], #4
   88420:	f855 1b04 	ldr.w	r1, [r5], #4
   88424:	fa1f f986 	uxth.w	r9, r6
   88428:	444a      	add	r2, r9
   8842a:	fa1f fa81 	uxth.w	sl, r1
   8842e:	0c09      	lsrs	r1, r1, #16
   88430:	ebca 0e02 	rsb	lr, sl, r2
   88434:	ebc1 4616 	rsb	r6, r1, r6, lsr #16
   88438:	eb06 412e 	add.w	r1, r6, lr, asr #16
   8843c:	fa1f f98e 	uxth.w	r9, lr
   88440:	140a      	asrs	r2, r1, #16
   88442:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   88446:	f847 1b04 	str.w	r1, [r7], #4
   8844a:	45a8      	cmp	r8, r5
   8844c:	4626      	mov	r6, r4
   8844e:	4639      	mov	r1, r7
   88450:	d8e4      	bhi.n	8841c <__mdiff+0x5e>
   88452:	4566      	cmp	r6, ip
   88454:	d20d      	bcs.n	88472 <__mdiff+0xb4>
   88456:	f856 4b04 	ldr.w	r4, [r6], #4
   8845a:	b2a5      	uxth	r5, r4
   8845c:	18ad      	adds	r5, r5, r2
   8845e:	0c22      	lsrs	r2, r4, #16
   88460:	eb02 4425 	add.w	r4, r2, r5, asr #16
   88464:	b2ad      	uxth	r5, r5
   88466:	1422      	asrs	r2, r4, #16
   88468:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8846c:	f841 4b04 	str.w	r4, [r1], #4
   88470:	e7ef      	b.n	88452 <__mdiff+0x94>
   88472:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88476:	b90a      	cbnz	r2, 8847c <__mdiff+0xbe>
   88478:	3b01      	subs	r3, #1
   8847a:	e7fa      	b.n	88472 <__mdiff+0xb4>
   8847c:	6103      	str	r3, [r0, #16]
   8847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00088482 <__ulp>:
   88482:	4b0f      	ldr	r3, [pc, #60]	; (884c0 <__ulp+0x3e>)
   88484:	400b      	ands	r3, r1
   88486:	f1a3 7050 	sub.w	r0, r3, #54525952	; 0x3400000
   8848a:	2800      	cmp	r0, #0
   8848c:	dd01      	ble.n	88492 <__ulp+0x10>
   8848e:	4601      	mov	r1, r0
   88490:	e008      	b.n	884a4 <__ulp+0x22>
   88492:	4241      	negs	r1, r0
   88494:	150b      	asrs	r3, r1, #20
   88496:	2100      	movs	r1, #0
   88498:	2b13      	cmp	r3, #19
   8849a:	dc05      	bgt.n	884a8 <__ulp+0x26>
   8849c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   884a0:	fa40 f103 	asr.w	r1, r0, r3
   884a4:	2000      	movs	r0, #0
   884a6:	4770      	bx	lr
   884a8:	2b32      	cmp	r3, #50	; 0x32
   884aa:	f04f 0201 	mov.w	r2, #1
   884ae:	bfda      	itte	le
   884b0:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
   884b4:	fa02 f303 	lslle.w	r3, r2, r3
   884b8:	4613      	movgt	r3, r2
   884ba:	4618      	mov	r0, r3
   884bc:	4770      	bx	lr
   884be:	bf00      	nop
   884c0:	7ff00000 	.word	0x7ff00000

000884c4 <__b2d>:
   884c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   884c8:	6903      	ldr	r3, [r0, #16]
   884ca:	4689      	mov	r9, r1
   884cc:	1d19      	adds	r1, r3, #4
   884ce:	eb00 0881 	add.w	r8, r0, r1, lsl #2
   884d2:	4646      	mov	r6, r8
   884d4:	f856 4b04 	ldr.w	r4, [r6], #4
   884d8:	f100 0714 	add.w	r7, r0, #20
   884dc:	4620      	mov	r0, r4
   884de:	f7ff fdd4 	bl	8808a <__hi0bits>
   884e2:	f1c0 0220 	rsb	r2, r0, #32
   884e6:	280a      	cmp	r0, #10
   884e8:	4645      	mov	r5, r8
   884ea:	f8c9 2000 	str.w	r2, [r9]
   884ee:	dc14      	bgt.n	8851a <__b2d+0x56>
   884f0:	f1c0 010b 	rsb	r1, r0, #11
   884f4:	fa24 f501 	lsr.w	r5, r4, r1
   884f8:	45b8      	cmp	r8, r7
   884fa:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   884fe:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
   88502:	bf8c      	ite	hi
   88504:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
   88508:	2500      	movls	r5, #0
   8850a:	3015      	adds	r0, #21
   8850c:	fa25 f201 	lsr.w	r2, r5, r1
   88510:	fa04 f400 	lsl.w	r4, r4, r0
   88514:	ea42 0004 	orr.w	r0, r2, r4
   88518:	e025      	b.n	88566 <__b2d+0xa2>
   8851a:	45b8      	cmp	r8, r7
   8851c:	d903      	bls.n	88526 <__b2d+0x62>
   8851e:	3d04      	subs	r5, #4
   88520:	f856 1c08 	ldr.w	r1, [r6, #-8]
   88524:	e000      	b.n	88528 <__b2d+0x64>
   88526:	2100      	movs	r1, #0
   88528:	f1b0 060b 	subs.w	r6, r0, #11
   8852c:	d016      	beq.n	8855c <__b2d+0x98>
   8852e:	fa04 f406 	lsl.w	r4, r4, r6
   88532:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
   88536:	fa21 fc02 	lsr.w	ip, r1, r2
   8853a:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   8853e:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   88542:	42bd      	cmp	r5, r7
   88544:	ea44 030c 	orr.w	r3, r4, ip
   88548:	bf8c      	ite	hi
   8854a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   8854e:	2400      	movls	r4, #0
   88550:	fa24 f002 	lsr.w	r0, r4, r2
   88554:	fa01 f106 	lsl.w	r1, r1, r6
   88558:	4308      	orrs	r0, r1
   8855a:	e004      	b.n	88566 <__b2d+0xa2>
   8855c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   88560:	f444 1340 	orr.w	r3, r4, #3145728	; 0x300000
   88564:	4608      	mov	r0, r1
   88566:	4619      	mov	r1, r3
   88568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008856c <__d2b>:
   8856c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   88570:	2101      	movs	r1, #1
   88572:	461d      	mov	r5, r3
   88574:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   88578:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   8857c:	4614      	mov	r4, r2
   8857e:	f7ff fcd7 	bl	87f30 <_Balloc>
   88582:	f3c5 570a 	ubfx	r7, r5, #20, #11
   88586:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
   8858a:	4606      	mov	r6, r0
   8858c:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
   88590:	b10f      	cbz	r7, 88596 <__d2b+0x2a>
   88592:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   88596:	9001      	str	r0, [sp, #4]
   88598:	b1dc      	cbz	r4, 885d2 <__d2b+0x66>
   8859a:	aa02      	add	r2, sp, #8
   8859c:	4668      	mov	r0, sp
   8859e:	f842 4d08 	str.w	r4, [r2, #-8]!
   885a2:	f7ff fd91 	bl	880c8 <__lo0bits>
   885a6:	9c00      	ldr	r4, [sp, #0]
   885a8:	b150      	cbz	r0, 885c0 <__d2b+0x54>
   885aa:	9a01      	ldr	r2, [sp, #4]
   885ac:	f1c0 0320 	rsb	r3, r0, #32
   885b0:	fa02 f103 	lsl.w	r1, r2, r3
   885b4:	fa22 f200 	lsr.w	r2, r2, r0
   885b8:	430c      	orrs	r4, r1
   885ba:	6174      	str	r4, [r6, #20]
   885bc:	9201      	str	r2, [sp, #4]
   885be:	e000      	b.n	885c2 <__d2b+0x56>
   885c0:	6174      	str	r4, [r6, #20]
   885c2:	9a01      	ldr	r2, [sp, #4]
   885c4:	2a00      	cmp	r2, #0
   885c6:	bf0c      	ite	eq
   885c8:	2401      	moveq	r4, #1
   885ca:	2402      	movne	r4, #2
   885cc:	61b2      	str	r2, [r6, #24]
   885ce:	6134      	str	r4, [r6, #16]
   885d0:	e007      	b.n	885e2 <__d2b+0x76>
   885d2:	a801      	add	r0, sp, #4
   885d4:	f7ff fd78 	bl	880c8 <__lo0bits>
   885d8:	9901      	ldr	r1, [sp, #4]
   885da:	2401      	movs	r4, #1
   885dc:	6171      	str	r1, [r6, #20]
   885de:	6134      	str	r4, [r6, #16]
   885e0:	3020      	adds	r0, #32
   885e2:	b13f      	cbz	r7, 885f4 <__d2b+0x88>
   885e4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   885e8:	183f      	adds	r7, r7, r0
   885ea:	f8c9 7000 	str.w	r7, [r9]
   885ee:	f1c0 0135 	rsb	r1, r0, #53	; 0x35
   885f2:	e00a      	b.n	8860a <__d2b+0x9e>
   885f4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   885f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   885fc:	f8c9 0000 	str.w	r0, [r9]
   88600:	6918      	ldr	r0, [r3, #16]
   88602:	f7ff fd42 	bl	8808a <__hi0bits>
   88606:	0164      	lsls	r4, r4, #5
   88608:	1a21      	subs	r1, r4, r0
   8860a:	f8c8 1000 	str.w	r1, [r8]
   8860e:	4630      	mov	r0, r6
   88610:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

00088614 <__ratio>:
   88614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   88618:	460e      	mov	r6, r1
   8861a:	4669      	mov	r1, sp
   8861c:	4680      	mov	r8, r0
   8861e:	f7ff ff51 	bl	884c4 <__b2d>
   88622:	460d      	mov	r5, r1
   88624:	4604      	mov	r4, r0
   88626:	a901      	add	r1, sp, #4
   88628:	4630      	mov	r0, r6
   8862a:	f7ff ff4b 	bl	884c4 <__b2d>
   8862e:	9f00      	ldr	r7, [sp, #0]
   88630:	460b      	mov	r3, r1
   88632:	9901      	ldr	r1, [sp, #4]
   88634:	4602      	mov	r2, r0
   88636:	1a7f      	subs	r7, r7, r1
   88638:	f8d8 0010 	ldr.w	r0, [r8, #16]
   8863c:	6931      	ldr	r1, [r6, #16]
   8863e:	1a40      	subs	r0, r0, r1
   88640:	eb07 1140 	add.w	r1, r7, r0, lsl #5
   88644:	2900      	cmp	r1, #0
   88646:	bfd6      	itet	le
   88648:	eba3 5101 	suble.w	r1, r3, r1, lsl #20
   8864c:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
   88650:	460b      	movle	r3, r1
   88652:	4620      	mov	r0, r4
   88654:	4629      	mov	r1, r5
   88656:	f7fb fb21 	bl	83c9c <__aeabi_ddiv>
   8865a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0008865e <_mprec_log10>:
   8865e:	2817      	cmp	r0, #23
   88660:	b510      	push	{r4, lr}
   88662:	4604      	mov	r4, r0
   88664:	dc05      	bgt.n	88672 <_mprec_log10+0x14>
   88666:	4b07      	ldr	r3, [pc, #28]	; (88684 <_mprec_log10+0x26>)
   88668:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   8866c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   88670:	bd10      	pop	{r4, pc}
   88672:	4905      	ldr	r1, [pc, #20]	; (88688 <_mprec_log10+0x2a>)
   88674:	2000      	movs	r0, #0
   88676:	2200      	movs	r2, #0
   88678:	4b04      	ldr	r3, [pc, #16]	; (8868c <_mprec_log10+0x2e>)
   8867a:	f7fb f9e5 	bl	83a48 <__aeabi_dmul>
   8867e:	3c01      	subs	r4, #1
   88680:	d1f9      	bne.n	88676 <_mprec_log10+0x18>
   88682:	bd10      	pop	{r4, pc}
   88684:	0008a928 	.word	0x0008a928
   88688:	3ff00000 	.word	0x3ff00000
   8868c:	40240000 	.word	0x40240000

00088690 <__copybits>:
   88690:	3901      	subs	r1, #1
   88692:	114b      	asrs	r3, r1, #5
   88694:	b510      	push	{r4, lr}
   88696:	1c59      	adds	r1, r3, #1
   88698:	6913      	ldr	r3, [r2, #16]
   8869a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8869e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   886a2:	3314      	adds	r3, #20
   886a4:	3214      	adds	r2, #20
   886a6:	429a      	cmp	r2, r3
   886a8:	d204      	bcs.n	886b4 <__copybits+0x24>
   886aa:	f852 4b04 	ldr.w	r4, [r2], #4
   886ae:	f840 4b04 	str.w	r4, [r0], #4
   886b2:	e7f8      	b.n	886a6 <__copybits+0x16>
   886b4:	4288      	cmp	r0, r1
   886b6:	d203      	bcs.n	886c0 <__copybits+0x30>
   886b8:	2200      	movs	r2, #0
   886ba:	f840 2b04 	str.w	r2, [r0], #4
   886be:	e7f9      	b.n	886b4 <__copybits+0x24>
   886c0:	bd10      	pop	{r4, pc}

000886c2 <__any_on>:
   886c2:	6902      	ldr	r2, [r0, #16]
   886c4:	114b      	asrs	r3, r1, #5
   886c6:	4293      	cmp	r3, r2
   886c8:	b530      	push	{r4, r5, lr}
   886ca:	f100 0414 	add.w	r4, r0, #20
   886ce:	dc0d      	bgt.n	886ec <__any_on+0x2a>
   886d0:	da0d      	bge.n	886ee <__any_on+0x2c>
   886d2:	f011 011f 	ands.w	r1, r1, #31
   886d6:	d00a      	beq.n	886ee <__any_on+0x2c>
   886d8:	eb00 0583 	add.w	r5, r0, r3, lsl #2
   886dc:	696a      	ldr	r2, [r5, #20]
   886de:	fa22 f501 	lsr.w	r5, r2, r1
   886e2:	fa05 f101 	lsl.w	r1, r5, r1
   886e6:	4291      	cmp	r1, r2
   886e8:	d10f      	bne.n	8870a <__any_on+0x48>
   886ea:	e000      	b.n	886ee <__any_on+0x2c>
   886ec:	4613      	mov	r3, r2
   886ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   886f2:	3014      	adds	r0, #20
   886f4:	42a0      	cmp	r0, r4
   886f6:	4602      	mov	r2, r0
   886f8:	d905      	bls.n	88706 <__any_on+0x44>
   886fa:	f852 1c04 	ldr.w	r1, [r2, #-4]
   886fe:	3804      	subs	r0, #4
   88700:	2900      	cmp	r1, #0
   88702:	d0f7      	beq.n	886f4 <__any_on+0x32>
   88704:	e001      	b.n	8870a <__any_on+0x48>
   88706:	2000      	movs	r0, #0
   88708:	bd30      	pop	{r4, r5, pc}
   8870a:	2001      	movs	r0, #1
   8870c:	bd30      	pop	{r4, r5, pc}
   8870e:	bf00      	nop

00088710 <_realloc_r>:
   88710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88714:	4681      	mov	r9, r0
   88716:	4616      	mov	r6, r2
   88718:	460c      	mov	r4, r1
   8871a:	b921      	cbnz	r1, 88726 <_realloc_r+0x16>
   8871c:	4611      	mov	r1, r2
   8871e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88722:	f7ff b979 	b.w	87a18 <_malloc_r>
   88726:	f7ff fc01 	bl	87f2c <__malloc_lock>
   8872a:	f106 070b 	add.w	r7, r6, #11
   8872e:	f854 5c04 	ldr.w	r5, [r4, #-4]
   88732:	2f16      	cmp	r7, #22
   88734:	f1a4 0b08 	sub.w	fp, r4, #8
   88738:	f025 0803 	bic.w	r8, r5, #3
   8873c:	d903      	bls.n	88746 <_realloc_r+0x36>
   8873e:	f037 0707 	bics.w	r7, r7, #7
   88742:	d501      	bpl.n	88748 <_realloc_r+0x38>
   88744:	e002      	b.n	8874c <_realloc_r+0x3c>
   88746:	2710      	movs	r7, #16
   88748:	42b7      	cmp	r7, r6
   8874a:	d204      	bcs.n	88756 <_realloc_r+0x46>
   8874c:	200c      	movs	r0, #12
   8874e:	f8c9 0000 	str.w	r0, [r9]
   88752:	2600      	movs	r6, #0
   88754:	e145      	b.n	889e2 <_realloc_r+0x2d2>
   88756:	45b8      	cmp	r8, r7
   88758:	f280 811a 	bge.w	88990 <_realloc_r+0x280>
   8875c:	4aa2      	ldr	r2, [pc, #648]	; (889e8 <_realloc_r+0x2d8>)
   8875e:	eb0b 0308 	add.w	r3, fp, r8
   88762:	6891      	ldr	r1, [r2, #8]
   88764:	428b      	cmp	r3, r1
   88766:	d006      	beq.n	88776 <_realloc_r+0x66>
   88768:	6858      	ldr	r0, [r3, #4]
   8876a:	f020 0201 	bic.w	r2, r0, #1
   8876e:	1898      	adds	r0, r3, r2
   88770:	6842      	ldr	r2, [r0, #4]
   88772:	07d0      	lsls	r0, r2, #31
   88774:	d426      	bmi.n	887c4 <_realloc_r+0xb4>
   88776:	685a      	ldr	r2, [r3, #4]
   88778:	428b      	cmp	r3, r1
   8877a:	f022 0003 	bic.w	r0, r2, #3
   8877e:	eb00 0a08 	add.w	sl, r0, r8
   88782:	d118      	bne.n	887b6 <_realloc_r+0xa6>
   88784:	f107 0210 	add.w	r2, r7, #16
   88788:	4592      	cmp	sl, r2
   8878a:	db1d      	blt.n	887c8 <_realloc_r+0xb8>
   8878c:	ebc7 0a0a 	rsb	sl, r7, sl
   88790:	eb0b 0507 	add.w	r5, fp, r7
   88794:	f04a 0101 	orr.w	r1, sl, #1
   88798:	6069      	str	r1, [r5, #4]
   8879a:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8879e:	4e92      	ldr	r6, [pc, #584]	; (889e8 <_realloc_r+0x2d8>)
   887a0:	f002 0301 	and.w	r3, r2, #1
   887a4:	431f      	orrs	r7, r3
   887a6:	60b5      	str	r5, [r6, #8]
   887a8:	f844 7c04 	str.w	r7, [r4, #-4]
   887ac:	4648      	mov	r0, r9
   887ae:	f7ff fbbe 	bl	87f2e <__malloc_unlock>
   887b2:	4626      	mov	r6, r4
   887b4:	e115      	b.n	889e2 <_realloc_r+0x2d2>
   887b6:	45ba      	cmp	sl, r7
   887b8:	db06      	blt.n	887c8 <_realloc_r+0xb8>
   887ba:	68dd      	ldr	r5, [r3, #12]
   887bc:	689e      	ldr	r6, [r3, #8]
   887be:	60f5      	str	r5, [r6, #12]
   887c0:	60ae      	str	r6, [r5, #8]
   887c2:	e0e6      	b.n	88992 <_realloc_r+0x282>
   887c4:	2000      	movs	r0, #0
   887c6:	4603      	mov	r3, r0
   887c8:	07ea      	lsls	r2, r5, #31
   887ca:	f100 8091 	bmi.w	888f0 <_realloc_r+0x1e0>
   887ce:	f854 5c08 	ldr.w	r5, [r4, #-8]
   887d2:	ebc5 050b 	rsb	r5, r5, fp
   887d6:	686a      	ldr	r2, [r5, #4]
   887d8:	f022 0203 	bic.w	r2, r2, #3
   887dc:	2b00      	cmp	r3, #0
   887de:	d051      	beq.n	88884 <_realloc_r+0x174>
   887e0:	eb02 0a08 	add.w	sl, r2, r8
   887e4:	428b      	cmp	r3, r1
   887e6:	4482      	add	sl, r0
   887e8:	d145      	bne.n	88876 <_realloc_r+0x166>
   887ea:	f107 0310 	add.w	r3, r7, #16
   887ee:	459a      	cmp	sl, r3
   887f0:	db48      	blt.n	88884 <_realloc_r+0x174>
   887f2:	462e      	mov	r6, r5
   887f4:	68e9      	ldr	r1, [r5, #12]
   887f6:	f856 3f08 	ldr.w	r3, [r6, #8]!
   887fa:	f1a8 0204 	sub.w	r2, r8, #4
   887fe:	2a24      	cmp	r2, #36	; 0x24
   88800:	60d9      	str	r1, [r3, #12]
   88802:	608b      	str	r3, [r1, #8]
   88804:	d825      	bhi.n	88852 <_realloc_r+0x142>
   88806:	2a13      	cmp	r2, #19
   88808:	d91b      	bls.n	88842 <_realloc_r+0x132>
   8880a:	6821      	ldr	r1, [r4, #0]
   8880c:	2a1b      	cmp	r2, #27
   8880e:	60a9      	str	r1, [r5, #8]
   88810:	6863      	ldr	r3, [r4, #4]
   88812:	60eb      	str	r3, [r5, #12]
   88814:	d803      	bhi.n	8881e <_realloc_r+0x10e>
   88816:	f105 0010 	add.w	r0, r5, #16
   8881a:	3408      	adds	r4, #8
   8881c:	e012      	b.n	88844 <_realloc_r+0x134>
   8881e:	68a0      	ldr	r0, [r4, #8]
   88820:	2a24      	cmp	r2, #36	; 0x24
   88822:	6128      	str	r0, [r5, #16]
   88824:	68e1      	ldr	r1, [r4, #12]
   88826:	6169      	str	r1, [r5, #20]
   88828:	d003      	beq.n	88832 <_realloc_r+0x122>
   8882a:	f105 0018 	add.w	r0, r5, #24
   8882e:	3410      	adds	r4, #16
   88830:	e008      	b.n	88844 <_realloc_r+0x134>
   88832:	6922      	ldr	r2, [r4, #16]
   88834:	f105 0020 	add.w	r0, r5, #32
   88838:	61aa      	str	r2, [r5, #24]
   8883a:	6963      	ldr	r3, [r4, #20]
   8883c:	3418      	adds	r4, #24
   8883e:	61eb      	str	r3, [r5, #28]
   88840:	e000      	b.n	88844 <_realloc_r+0x134>
   88842:	4630      	mov	r0, r6
   88844:	6821      	ldr	r1, [r4, #0]
   88846:	6001      	str	r1, [r0, #0]
   88848:	6862      	ldr	r2, [r4, #4]
   8884a:	6042      	str	r2, [r0, #4]
   8884c:	68a3      	ldr	r3, [r4, #8]
   8884e:	6083      	str	r3, [r0, #8]
   88850:	e003      	b.n	8885a <_realloc_r+0x14a>
   88852:	4630      	mov	r0, r6
   88854:	4621      	mov	r1, r4
   88856:	f7ff fb4f 	bl	87ef8 <memmove>
   8885a:	ebc7 0a0a 	rsb	sl, r7, sl
   8885e:	19e8      	adds	r0, r5, r7
   88860:	f04a 0201 	orr.w	r2, sl, #1
   88864:	6042      	str	r2, [r0, #4]
   88866:	686b      	ldr	r3, [r5, #4]
   88868:	495f      	ldr	r1, [pc, #380]	; (889e8 <_realloc_r+0x2d8>)
   8886a:	6088      	str	r0, [r1, #8]
   8886c:	f003 0001 	and.w	r0, r3, #1
   88870:	4307      	orrs	r7, r0
   88872:	606f      	str	r7, [r5, #4]
   88874:	e088      	b.n	88988 <_realloc_r+0x278>
   88876:	45ba      	cmp	sl, r7
   88878:	db04      	blt.n	88884 <_realloc_r+0x174>
   8887a:	68d9      	ldr	r1, [r3, #12]
   8887c:	6898      	ldr	r0, [r3, #8]
   8887e:	60c1      	str	r1, [r0, #12]
   88880:	6088      	str	r0, [r1, #8]
   88882:	e003      	b.n	8888c <_realloc_r+0x17c>
   88884:	eb02 0a08 	add.w	sl, r2, r8
   88888:	45ba      	cmp	sl, r7
   8888a:	db31      	blt.n	888f0 <_realloc_r+0x1e0>
   8888c:	4628      	mov	r0, r5
   8888e:	68eb      	ldr	r3, [r5, #12]
   88890:	f850 1f08 	ldr.w	r1, [r0, #8]!
   88894:	f1a8 0204 	sub.w	r2, r8, #4
   88898:	2a24      	cmp	r2, #36	; 0x24
   8889a:	60cb      	str	r3, [r1, #12]
   8889c:	6099      	str	r1, [r3, #8]
   8889e:	d823      	bhi.n	888e8 <_realloc_r+0x1d8>
   888a0:	2a13      	cmp	r2, #19
   888a2:	d91a      	bls.n	888da <_realloc_r+0x1ca>
   888a4:	6820      	ldr	r0, [r4, #0]
   888a6:	2a1b      	cmp	r2, #27
   888a8:	60a8      	str	r0, [r5, #8]
   888aa:	6866      	ldr	r6, [r4, #4]
   888ac:	60ee      	str	r6, [r5, #12]
   888ae:	d803      	bhi.n	888b8 <_realloc_r+0x1a8>
   888b0:	f105 0010 	add.w	r0, r5, #16
   888b4:	3408      	adds	r4, #8
   888b6:	e010      	b.n	888da <_realloc_r+0x1ca>
   888b8:	68a3      	ldr	r3, [r4, #8]
   888ba:	2a24      	cmp	r2, #36	; 0x24
   888bc:	612b      	str	r3, [r5, #16]
   888be:	68e1      	ldr	r1, [r4, #12]
   888c0:	6169      	str	r1, [r5, #20]
   888c2:	d003      	beq.n	888cc <_realloc_r+0x1bc>
   888c4:	f105 0018 	add.w	r0, r5, #24
   888c8:	3410      	adds	r4, #16
   888ca:	e006      	b.n	888da <_realloc_r+0x1ca>
   888cc:	6922      	ldr	r2, [r4, #16]
   888ce:	61aa      	str	r2, [r5, #24]
   888d0:	6960      	ldr	r0, [r4, #20]
   888d2:	3418      	adds	r4, #24
   888d4:	61e8      	str	r0, [r5, #28]
   888d6:	f105 0020 	add.w	r0, r5, #32
   888da:	6826      	ldr	r6, [r4, #0]
   888dc:	6006      	str	r6, [r0, #0]
   888de:	6863      	ldr	r3, [r4, #4]
   888e0:	6043      	str	r3, [r0, #4]
   888e2:	68a1      	ldr	r1, [r4, #8]
   888e4:	6081      	str	r1, [r0, #8]
   888e6:	e055      	b.n	88994 <_realloc_r+0x284>
   888e8:	4621      	mov	r1, r4
   888ea:	f7ff fb05 	bl	87ef8 <memmove>
   888ee:	e051      	b.n	88994 <_realloc_r+0x284>
   888f0:	4631      	mov	r1, r6
   888f2:	4648      	mov	r0, r9
   888f4:	f7ff f890 	bl	87a18 <_malloc_r>
   888f8:	4606      	mov	r6, r0
   888fa:	2800      	cmp	r0, #0
   888fc:	d044      	beq.n	88988 <_realloc_r+0x278>
   888fe:	f854 1c04 	ldr.w	r1, [r4, #-4]
   88902:	f1a0 0208 	sub.w	r2, r0, #8
   88906:	f021 0301 	bic.w	r3, r1, #1
   8890a:	eb0b 0103 	add.w	r1, fp, r3
   8890e:	428a      	cmp	r2, r1
   88910:	d106      	bne.n	88920 <_realloc_r+0x210>
   88912:	f850 6c04 	ldr.w	r6, [r0, #-4]
   88916:	f026 0503 	bic.w	r5, r6, #3
   8891a:	eb05 0a08 	add.w	sl, r5, r8
   8891e:	e038      	b.n	88992 <_realloc_r+0x282>
   88920:	f1a8 0204 	sub.w	r2, r8, #4
   88924:	2a24      	cmp	r2, #36	; 0x24
   88926:	d828      	bhi.n	8897a <_realloc_r+0x26a>
   88928:	2a13      	cmp	r2, #19
   8892a:	d91e      	bls.n	8896a <_realloc_r+0x25a>
   8892c:	6823      	ldr	r3, [r4, #0]
   8892e:	2a1b      	cmp	r2, #27
   88930:	6003      	str	r3, [r0, #0]
   88932:	6861      	ldr	r1, [r4, #4]
   88934:	6041      	str	r1, [r0, #4]
   88936:	d804      	bhi.n	88942 <_realloc_r+0x232>
   88938:	f100 0008 	add.w	r0, r0, #8
   8893c:	f104 0208 	add.w	r2, r4, #8
   88940:	e014      	b.n	8896c <_realloc_r+0x25c>
   88942:	68a0      	ldr	r0, [r4, #8]
   88944:	2a24      	cmp	r2, #36	; 0x24
   88946:	60b0      	str	r0, [r6, #8]
   88948:	68e3      	ldr	r3, [r4, #12]
   8894a:	60f3      	str	r3, [r6, #12]
   8894c:	d004      	beq.n	88958 <_realloc_r+0x248>
   8894e:	f106 0010 	add.w	r0, r6, #16
   88952:	f104 0210 	add.w	r2, r4, #16
   88956:	e009      	b.n	8896c <_realloc_r+0x25c>
   88958:	6922      	ldr	r2, [r4, #16]
   8895a:	f106 0018 	add.w	r0, r6, #24
   8895e:	6132      	str	r2, [r6, #16]
   88960:	6961      	ldr	r1, [r4, #20]
   88962:	f104 0218 	add.w	r2, r4, #24
   88966:	6171      	str	r1, [r6, #20]
   88968:	e000      	b.n	8896c <_realloc_r+0x25c>
   8896a:	4622      	mov	r2, r4
   8896c:	6813      	ldr	r3, [r2, #0]
   8896e:	6003      	str	r3, [r0, #0]
   88970:	6851      	ldr	r1, [r2, #4]
   88972:	6041      	str	r1, [r0, #4]
   88974:	6892      	ldr	r2, [r2, #8]
   88976:	6082      	str	r2, [r0, #8]
   88978:	e002      	b.n	88980 <_realloc_r+0x270>
   8897a:	4621      	mov	r1, r4
   8897c:	f7ff fabc 	bl	87ef8 <memmove>
   88980:	4648      	mov	r0, r9
   88982:	4621      	mov	r1, r4
   88984:	f7fe f9ea 	bl	86d5c <_free_r>
   88988:	4648      	mov	r0, r9
   8898a:	f7ff fad0 	bl	87f2e <__malloc_unlock>
   8898e:	e028      	b.n	889e2 <_realloc_r+0x2d2>
   88990:	46c2      	mov	sl, r8
   88992:	465d      	mov	r5, fp
   88994:	ebc7 000a 	rsb	r0, r7, sl
   88998:	280f      	cmp	r0, #15
   8899a:	686a      	ldr	r2, [r5, #4]
   8899c:	d911      	bls.n	889c2 <_realloc_r+0x2b2>
   8899e:	f002 0601 	and.w	r6, r2, #1
   889a2:	19e9      	adds	r1, r5, r7
   889a4:	f040 0301 	orr.w	r3, r0, #1
   889a8:	4337      	orrs	r7, r6
   889aa:	606f      	str	r7, [r5, #4]
   889ac:	1808      	adds	r0, r1, r0
   889ae:	604b      	str	r3, [r1, #4]
   889b0:	6842      	ldr	r2, [r0, #4]
   889b2:	3108      	adds	r1, #8
   889b4:	f042 0601 	orr.w	r6, r2, #1
   889b8:	6046      	str	r6, [r0, #4]
   889ba:	4648      	mov	r0, r9
   889bc:	f7fe f9ce 	bl	86d5c <_free_r>
   889c0:	e00a      	b.n	889d8 <_realloc_r+0x2c8>
   889c2:	f002 0601 	and.w	r6, r2, #1
   889c6:	ea4a 0306 	orr.w	r3, sl, r6
   889ca:	606b      	str	r3, [r5, #4]
   889cc:	eb05 010a 	add.w	r1, r5, sl
   889d0:	6848      	ldr	r0, [r1, #4]
   889d2:	f040 0201 	orr.w	r2, r0, #1
   889d6:	604a      	str	r2, [r1, #4]
   889d8:	4648      	mov	r0, r9
   889da:	f7ff faa8 	bl	87f2e <__malloc_unlock>
   889de:	f105 0608 	add.w	r6, r5, #8
   889e2:	4630      	mov	r0, r6
   889e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   889e8:	200704e8 	.word	0x200704e8

000889ec <lflush>:
   889ec:	8983      	ldrh	r3, [r0, #12]
   889ee:	f003 0109 	and.w	r1, r3, #9
   889f2:	2909      	cmp	r1, #9
   889f4:	d101      	bne.n	889fa <lflush+0xe>
   889f6:	f7fd bfba 	b.w	8696e <fflush>
   889fa:	2000      	movs	r0, #0
   889fc:	4770      	bx	lr

000889fe <__srefill_r>:
   889fe:	b570      	push	{r4, r5, r6, lr}
   88a00:	460c      	mov	r4, r1
   88a02:	4605      	mov	r5, r0
   88a04:	b118      	cbz	r0, 88a0e <__srefill_r+0x10>
   88a06:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88a08:	b90b      	cbnz	r3, 88a0e <__srefill_r+0x10>
   88a0a:	f7fe f80b 	bl	86a24 <__sinit>
   88a0e:	89a0      	ldrh	r0, [r4, #12]
   88a10:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   88a14:	b211      	sxth	r1, r2
   88a16:	b931      	cbnz	r1, 88a26 <__srefill_r+0x28>
   88a18:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   88a1c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   88a1e:	81a3      	strh	r3, [r4, #12]
   88a20:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   88a24:	6662      	str	r2, [r4, #100]	; 0x64
   88a26:	89a3      	ldrh	r3, [r4, #12]
   88a28:	2100      	movs	r1, #0
   88a2a:	f003 0020 	and.w	r0, r3, #32
   88a2e:	b202      	sxth	r2, r0
   88a30:	6061      	str	r1, [r4, #4]
   88a32:	2a00      	cmp	r2, #0
   88a34:	d152      	bne.n	88adc <__srefill_r+0xde>
   88a36:	f003 0104 	and.w	r1, r3, #4
   88a3a:	b208      	sxth	r0, r1
   88a3c:	b9d8      	cbnz	r0, 88a76 <__srefill_r+0x78>
   88a3e:	f003 0010 	and.w	r0, r3, #16
   88a42:	b202      	sxth	r2, r0
   88a44:	b912      	cbnz	r2, 88a4c <__srefill_r+0x4e>
   88a46:	2109      	movs	r1, #9
   88a48:	6029      	str	r1, [r5, #0]
   88a4a:	e044      	b.n	88ad6 <__srefill_r+0xd8>
   88a4c:	f003 0308 	and.w	r3, r3, #8
   88a50:	b219      	sxth	r1, r3
   88a52:	b159      	cbz	r1, 88a6c <__srefill_r+0x6e>
   88a54:	4628      	mov	r0, r5
   88a56:	4621      	mov	r1, r4
   88a58:	f7fd fef2 	bl	86840 <_fflush_r>
   88a5c:	2800      	cmp	r0, #0
   88a5e:	d13d      	bne.n	88adc <__srefill_r+0xde>
   88a60:	89a6      	ldrh	r6, [r4, #12]
   88a62:	60a0      	str	r0, [r4, #8]
   88a64:	f026 0208 	bic.w	r2, r6, #8
   88a68:	81a2      	strh	r2, [r4, #12]
   88a6a:	61a0      	str	r0, [r4, #24]
   88a6c:	89a0      	ldrh	r0, [r4, #12]
   88a6e:	f040 0304 	orr.w	r3, r0, #4
   88a72:	81a3      	strh	r3, [r4, #12]
   88a74:	e010      	b.n	88a98 <__srefill_r+0x9a>
   88a76:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88a78:	b171      	cbz	r1, 88a98 <__srefill_r+0x9a>
   88a7a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   88a7e:	4299      	cmp	r1, r3
   88a80:	d002      	beq.n	88a88 <__srefill_r+0x8a>
   88a82:	4628      	mov	r0, r5
   88a84:	f7fe f96a 	bl	86d5c <_free_r>
   88a88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   88a8a:	2000      	movs	r0, #0
   88a8c:	6320      	str	r0, [r4, #48]	; 0x30
   88a8e:	6062      	str	r2, [r4, #4]
   88a90:	b112      	cbz	r2, 88a98 <__srefill_r+0x9a>
   88a92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   88a94:	6021      	str	r1, [r4, #0]
   88a96:	bd70      	pop	{r4, r5, r6, pc}
   88a98:	6921      	ldr	r1, [r4, #16]
   88a9a:	b919      	cbnz	r1, 88aa4 <__srefill_r+0xa6>
   88a9c:	4628      	mov	r0, r5
   88a9e:	4621      	mov	r1, r4
   88aa0:	f7fe ff3e 	bl	87920 <__smakebuf_r>
   88aa4:	89a6      	ldrh	r6, [r4, #12]
   88aa6:	07b3      	lsls	r3, r6, #30
   88aa8:	d004      	beq.n	88ab4 <__srefill_r+0xb6>
   88aaa:	4a0f      	ldr	r2, [pc, #60]	; (88ae8 <__srefill_r+0xea>)
   88aac:	490f      	ldr	r1, [pc, #60]	; (88aec <__srefill_r+0xee>)
   88aae:	6810      	ldr	r0, [r2, #0]
   88ab0:	f7fe fb65 	bl	8717e <_fwalk>
   88ab4:	6922      	ldr	r2, [r4, #16]
   88ab6:	6a26      	ldr	r6, [r4, #32]
   88ab8:	6022      	str	r2, [r4, #0]
   88aba:	4628      	mov	r0, r5
   88abc:	69e1      	ldr	r1, [r4, #28]
   88abe:	6963      	ldr	r3, [r4, #20]
   88ac0:	47b0      	blx	r6
   88ac2:	2800      	cmp	r0, #0
   88ac4:	6060      	str	r0, [r4, #4]
   88ac6:	dc0c      	bgt.n	88ae2 <__srefill_r+0xe4>
   88ac8:	89a3      	ldrh	r3, [r4, #12]
   88aca:	d102      	bne.n	88ad2 <__srefill_r+0xd4>
   88acc:	f043 0220 	orr.w	r2, r3, #32
   88ad0:	e003      	b.n	88ada <__srefill_r+0xdc>
   88ad2:	2000      	movs	r0, #0
   88ad4:	6060      	str	r0, [r4, #4]
   88ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   88ada:	81a2      	strh	r2, [r4, #12]
   88adc:	f04f 30ff 	mov.w	r0, #4294967295
   88ae0:	bd70      	pop	{r4, r5, r6, pc}
   88ae2:	2000      	movs	r0, #0
   88ae4:	bd70      	pop	{r4, r5, r6, pc}
   88ae6:	bf00      	nop
   88ae8:	0008a74c 	.word	0x0008a74c
   88aec:	000889ed 	.word	0x000889ed

00088af0 <__fpclassifyd>:
   88af0:	460b      	mov	r3, r1
   88af2:	b111      	cbz	r1, 88afa <__fpclassifyd+0xa>
   88af4:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   88af8:	d100      	bne.n	88afc <__fpclassifyd+0xc>
   88afa:	b1e0      	cbz	r0, 88b36 <__fpclassifyd+0x46>
   88afc:	4a12      	ldr	r2, [pc, #72]	; (88b48 <__fpclassifyd+0x58>)
   88afe:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
   88b02:	4291      	cmp	r1, r2
   88b04:	d919      	bls.n	88b3a <__fpclassifyd+0x4a>
   88b06:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
   88b0a:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
   88b0e:	4291      	cmp	r1, r2
   88b10:	d913      	bls.n	88b3a <__fpclassifyd+0x4a>
   88b12:	4a0e      	ldr	r2, [pc, #56]	; (88b4c <__fpclassifyd+0x5c>)
   88b14:	4293      	cmp	r3, r2
   88b16:	d912      	bls.n	88b3e <__fpclassifyd+0x4e>
   88b18:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   88b1c:	4291      	cmp	r1, r2
   88b1e:	d90e      	bls.n	88b3e <__fpclassifyd+0x4e>
   88b20:	4a0b      	ldr	r2, [pc, #44]	; (88b50 <__fpclassifyd+0x60>)
   88b22:	4293      	cmp	r3, r2
   88b24:	d002      	beq.n	88b2c <__fpclassifyd+0x3c>
   88b26:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
   88b2a:	d10a      	bne.n	88b42 <__fpclassifyd+0x52>
   88b2c:	f1d0 0001 	rsbs	r0, r0, #1
   88b30:	bf38      	it	cc
   88b32:	2000      	movcc	r0, #0
   88b34:	4770      	bx	lr
   88b36:	2002      	movs	r0, #2
   88b38:	4770      	bx	lr
   88b3a:	2004      	movs	r0, #4
   88b3c:	4770      	bx	lr
   88b3e:	2003      	movs	r0, #3
   88b40:	4770      	bx	lr
   88b42:	2000      	movs	r0, #0
   88b44:	4770      	bx	lr
   88b46:	bf00      	nop
   88b48:	7fdfffff 	.word	0x7fdfffff
   88b4c:	000fffff 	.word	0x000fffff
   88b50:	7ff00000 	.word	0x7ff00000

00088b54 <_sbrk_r>:
   88b54:	b538      	push	{r3, r4, r5, lr}
   88b56:	4c06      	ldr	r4, [pc, #24]	; (88b70 <_sbrk_r+0x1c>)
   88b58:	2300      	movs	r3, #0
   88b5a:	4605      	mov	r5, r0
   88b5c:	4608      	mov	r0, r1
   88b5e:	6023      	str	r3, [r4, #0]
   88b60:	f7f8 fe56 	bl	81810 <_sbrk>
   88b64:	1c43      	adds	r3, r0, #1
   88b66:	d102      	bne.n	88b6e <_sbrk_r+0x1a>
   88b68:	6821      	ldr	r1, [r4, #0]
   88b6a:	b101      	cbz	r1, 88b6e <_sbrk_r+0x1a>
   88b6c:	6029      	str	r1, [r5, #0]
   88b6e:	bd38      	pop	{r3, r4, r5, pc}
   88b70:	2007ac78 	.word	0x2007ac78

00088b74 <__sccl>:
   88b74:	b5f0      	push	{r4, r5, r6, r7, lr}
   88b76:	780b      	ldrb	r3, [r1, #0]
   88b78:	2b5e      	cmp	r3, #94	; 0x5e
   88b7a:	d002      	beq.n	88b82 <__sccl+0xe>
   88b7c:	3101      	adds	r1, #1
   88b7e:	2400      	movs	r4, #0
   88b80:	e002      	b.n	88b88 <__sccl+0x14>
   88b82:	784b      	ldrb	r3, [r1, #1]
   88b84:	2401      	movs	r4, #1
   88b86:	3102      	adds	r1, #2
   88b88:	2200      	movs	r2, #0
   88b8a:	5484      	strb	r4, [r0, r2]
   88b8c:	3201      	adds	r2, #1
   88b8e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   88b92:	d1fa      	bne.n	88b8a <__sccl+0x16>
   88b94:	b90b      	cbnz	r3, 88b9a <__sccl+0x26>
   88b96:	1e4a      	subs	r2, r1, #1
   88b98:	e01a      	b.n	88bd0 <__sccl+0x5c>
   88b9a:	f1c4 0701 	rsb	r7, r4, #1
   88b9e:	b2fe      	uxtb	r6, r7
   88ba0:	54c6      	strb	r6, [r0, r3]
   88ba2:	460a      	mov	r2, r1
   88ba4:	4611      	mov	r1, r2
   88ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
   88baa:	2c2d      	cmp	r4, #45	; 0x2d
   88bac:	d004      	beq.n	88bb8 <__sccl+0x44>
   88bae:	2c5d      	cmp	r4, #93	; 0x5d
   88bb0:	d00d      	beq.n	88bce <__sccl+0x5a>
   88bb2:	b16c      	cbz	r4, 88bd0 <__sccl+0x5c>
   88bb4:	4623      	mov	r3, r4
   88bb6:	e7f2      	b.n	88b9e <__sccl+0x2a>
   88bb8:	7855      	ldrb	r5, [r2, #1]
   88bba:	2d5d      	cmp	r5, #93	; 0x5d
   88bbc:	d0fa      	beq.n	88bb4 <__sccl+0x40>
   88bbe:	429d      	cmp	r5, r3
   88bc0:	dbf8      	blt.n	88bb4 <__sccl+0x40>
   88bc2:	3202      	adds	r2, #2
   88bc4:	3301      	adds	r3, #1
   88bc6:	42ab      	cmp	r3, r5
   88bc8:	54c6      	strb	r6, [r0, r3]
   88bca:	dbfb      	blt.n	88bc4 <__sccl+0x50>
   88bcc:	e7ea      	b.n	88ba4 <__sccl+0x30>
   88bce:	460a      	mov	r2, r1
   88bd0:	4610      	mov	r0, r2
   88bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00088bd4 <nanf>:
   88bd4:	4800      	ldr	r0, [pc, #0]	; (88bd8 <nanf+0x4>)
   88bd6:	4770      	bx	lr
   88bd8:	7fc00000 	.word	0x7fc00000

00088bdc <__sread>:
   88bdc:	b510      	push	{r4, lr}
   88bde:	460c      	mov	r4, r1
   88be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   88be4:	f001 f98e 	bl	89f04 <_read_r>
   88be8:	2800      	cmp	r0, #0
   88bea:	db03      	blt.n	88bf4 <__sread+0x18>
   88bec:	6d22      	ldr	r2, [r4, #80]	; 0x50
   88bee:	1813      	adds	r3, r2, r0
   88bf0:	6523      	str	r3, [r4, #80]	; 0x50
   88bf2:	bd10      	pop	{r4, pc}
   88bf4:	89a3      	ldrh	r3, [r4, #12]
   88bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   88bfa:	81a1      	strh	r1, [r4, #12]
   88bfc:	bd10      	pop	{r4, pc}

00088bfe <__seofread>:
   88bfe:	2000      	movs	r0, #0
   88c00:	4770      	bx	lr

00088c02 <__swrite>:
   88c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88c06:	461d      	mov	r5, r3
   88c08:	898b      	ldrh	r3, [r1, #12]
   88c0a:	460c      	mov	r4, r1
   88c0c:	f403 7180 	and.w	r1, r3, #256	; 0x100
   88c10:	4616      	mov	r6, r2
   88c12:	b20a      	sxth	r2, r1
   88c14:	4607      	mov	r7, r0
   88c16:	b12a      	cbz	r2, 88c24 <__swrite+0x22>
   88c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   88c1c:	2200      	movs	r2, #0
   88c1e:	2302      	movs	r3, #2
   88c20:	f001 f95e 	bl	89ee0 <_lseek_r>
   88c24:	89a0      	ldrh	r0, [r4, #12]
   88c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   88c2a:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   88c2e:	81a3      	strh	r3, [r4, #12]
   88c30:	4638      	mov	r0, r7
   88c32:	4632      	mov	r2, r6
   88c34:	462b      	mov	r3, r5
   88c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88c3a:	f001 b895 	b.w	89d68 <_write_r>

00088c3e <__sseek>:
   88c3e:	b510      	push	{r4, lr}
   88c40:	460c      	mov	r4, r1
   88c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   88c46:	f001 f94b 	bl	89ee0 <_lseek_r>
   88c4a:	1c43      	adds	r3, r0, #1
   88c4c:	89a3      	ldrh	r3, [r4, #12]
   88c4e:	d103      	bne.n	88c58 <__sseek+0x1a>
   88c50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   88c54:	81a2      	strh	r2, [r4, #12]
   88c56:	bd10      	pop	{r4, pc}
   88c58:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   88c5c:	81a1      	strh	r1, [r4, #12]
   88c5e:	6520      	str	r0, [r4, #80]	; 0x50
   88c60:	bd10      	pop	{r4, pc}

00088c62 <__sclose>:
   88c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   88c66:	f001 b8bf 	b.w	89de8 <_close_r>

00088c6a <strcmp>:
   88c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
   88c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
   88c72:	2a01      	cmp	r2, #1
   88c74:	bf28      	it	cs
   88c76:	429a      	cmpcs	r2, r3
   88c78:	d0f7      	beq.n	88c6a <strcmp>
   88c7a:	eba2 0003 	sub.w	r0, r2, r3
   88c7e:	4770      	bx	lr

00088c80 <_strtol_r>:
   88c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88c84:	9001      	str	r0, [sp, #4]
   88c86:	4840      	ldr	r0, [pc, #256]	; (88d88 <_strtol_r+0x108>)
   88c88:	f8d0 9000 	ldr.w	r9, [r0]
   88c8c:	4608      	mov	r0, r1
   88c8e:	4604      	mov	r4, r0
   88c90:	f814 5b01 	ldrb.w	r5, [r4], #1
   88c94:	eb09 0605 	add.w	r6, r9, r5
   88c98:	7877      	ldrb	r7, [r6, #1]
   88c9a:	4620      	mov	r0, r4
   88c9c:	f007 0608 	and.w	r6, r7, #8
   88ca0:	b2f7      	uxtb	r7, r6
   88ca2:	2f00      	cmp	r7, #0
   88ca4:	d1f3      	bne.n	88c8e <_strtol_r+0xe>
   88ca6:	2d2d      	cmp	r5, #45	; 0x2d
   88ca8:	d103      	bne.n	88cb2 <_strtol_r+0x32>
   88caa:	f814 5b01 	ldrb.w	r5, [r4], #1
   88cae:	2701      	movs	r7, #1
   88cb0:	e004      	b.n	88cbc <_strtol_r+0x3c>
   88cb2:	2d2b      	cmp	r5, #43	; 0x2b
   88cb4:	bf04      	itt	eq
   88cb6:	4624      	moveq	r4, r4
   88cb8:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   88cbc:	2b00      	cmp	r3, #0
   88cbe:	d05c      	beq.n	88d7a <_strtol_r+0xfa>
   88cc0:	2b10      	cmp	r3, #16
   88cc2:	d107      	bne.n	88cd4 <_strtol_r+0x54>
   88cc4:	2d30      	cmp	r5, #48	; 0x30
   88cc6:	d105      	bne.n	88cd4 <_strtol_r+0x54>
   88cc8:	7825      	ldrb	r5, [r4, #0]
   88cca:	2d78      	cmp	r5, #120	; 0x78
   88ccc:	d14e      	bne.n	88d6c <_strtol_r+0xec>
   88cce:	7865      	ldrb	r5, [r4, #1]
   88cd0:	2310      	movs	r3, #16
   88cd2:	3402      	adds	r4, #2
   88cd4:	2f00      	cmp	r7, #0
   88cd6:	bf0c      	ite	eq
   88cd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   88cdc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   88ce0:	fbb0 faf3 	udiv	sl, r0, r3
   88ce4:	2600      	movs	r6, #0
   88ce6:	fb03 081a 	mls	r8, r3, sl, r0
   88cea:	4630      	mov	r0, r6
   88cec:	eb09 0c05 	add.w	ip, r9, r5
   88cf0:	f89c c001 	ldrb.w	ip, [ip, #1]
   88cf4:	f00c 0b04 	and.w	fp, ip, #4
   88cf8:	fa5f fb8b 	uxtb.w	fp, fp
   88cfc:	f1bb 0f00 	cmp.w	fp, #0
   88d00:	d001      	beq.n	88d06 <_strtol_r+0x86>
   88d02:	3d30      	subs	r5, #48	; 0x30
   88d04:	e00b      	b.n	88d1e <_strtol_r+0x9e>
   88d06:	f01c 0c03 	ands.w	ip, ip, #3
   88d0a:	d01b      	beq.n	88d44 <_strtol_r+0xc4>
   88d0c:	f1bc 0f01 	cmp.w	ip, #1
   88d10:	bf14      	ite	ne
   88d12:	f04f 0c57 	movne.w	ip, #87	; 0x57
   88d16:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   88d1a:	ebcc 0505 	rsb	r5, ip, r5
   88d1e:	429d      	cmp	r5, r3
   88d20:	da10      	bge.n	88d44 <_strtol_r+0xc4>
   88d22:	f1b6 3fff 	cmp.w	r6, #4294967295
   88d26:	d00a      	beq.n	88d3e <_strtol_r+0xbe>
   88d28:	4550      	cmp	r0, sl
   88d2a:	d806      	bhi.n	88d3a <_strtol_r+0xba>
   88d2c:	d101      	bne.n	88d32 <_strtol_r+0xb2>
   88d2e:	4545      	cmp	r5, r8
   88d30:	dc03      	bgt.n	88d3a <_strtol_r+0xba>
   88d32:	fb03 5000 	mla	r0, r3, r0, r5
   88d36:	2601      	movs	r6, #1
   88d38:	e001      	b.n	88d3e <_strtol_r+0xbe>
   88d3a:	f04f 36ff 	mov.w	r6, #4294967295
   88d3e:	f814 5b01 	ldrb.w	r5, [r4], #1
   88d42:	e7d3      	b.n	88cec <_strtol_r+0x6c>
   88d44:	1c73      	adds	r3, r6, #1
   88d46:	d10a      	bne.n	88d5e <_strtol_r+0xde>
   88d48:	2f00      	cmp	r7, #0
   88d4a:	9901      	ldr	r1, [sp, #4]
   88d4c:	bf0c      	ite	eq
   88d4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   88d52:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   88d56:	2322      	movs	r3, #34	; 0x22
   88d58:	600b      	str	r3, [r1, #0]
   88d5a:	b922      	cbnz	r2, 88d66 <_strtol_r+0xe6>
   88d5c:	e011      	b.n	88d82 <_strtol_r+0x102>
   88d5e:	b107      	cbz	r7, 88d62 <_strtol_r+0xe2>
   88d60:	4240      	negs	r0, r0
   88d62:	b172      	cbz	r2, 88d82 <_strtol_r+0x102>
   88d64:	b106      	cbz	r6, 88d68 <_strtol_r+0xe8>
   88d66:	1e61      	subs	r1, r4, #1
   88d68:	6011      	str	r1, [r2, #0]
   88d6a:	e00a      	b.n	88d82 <_strtol_r+0x102>
   88d6c:	2d58      	cmp	r5, #88	; 0x58
   88d6e:	d0ae      	beq.n	88cce <_strtol_r+0x4e>
   88d70:	2530      	movs	r5, #48	; 0x30
   88d72:	2b00      	cmp	r3, #0
   88d74:	d1ae      	bne.n	88cd4 <_strtol_r+0x54>
   88d76:	2308      	movs	r3, #8
   88d78:	e7ac      	b.n	88cd4 <_strtol_r+0x54>
   88d7a:	2d30      	cmp	r5, #48	; 0x30
   88d7c:	d0a4      	beq.n	88cc8 <_strtol_r+0x48>
   88d7e:	230a      	movs	r3, #10
   88d80:	e7a8      	b.n	88cd4 <_strtol_r+0x54>
   88d82:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88d86:	bf00      	nop
   88d88:	20070468 	.word	0x20070468

00088d8c <strtol>:
   88d8c:	b530      	push	{r4, r5, lr}
   88d8e:	4613      	mov	r3, r2
   88d90:	4a04      	ldr	r2, [pc, #16]	; (88da4 <strtol+0x18>)
   88d92:	4605      	mov	r5, r0
   88d94:	460c      	mov	r4, r1
   88d96:	6810      	ldr	r0, [r2, #0]
   88d98:	4629      	mov	r1, r5
   88d9a:	4622      	mov	r2, r4
   88d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   88da0:	f7ff bf6e 	b.w	88c80 <_strtol_r>
   88da4:	20070010 	.word	0x20070010

00088da8 <_strtoll_r>:
   88da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88dac:	4698      	mov	r8, r3
   88dae:	4b61      	ldr	r3, [pc, #388]	; (88f34 <_strtoll_r+0x18c>)
   88db0:	b089      	sub	sp, #36	; 0x24
   88db2:	9007      	str	r0, [sp, #28]
   88db4:	6818      	ldr	r0, [r3, #0]
   88db6:	9104      	str	r1, [sp, #16]
   88db8:	4694      	mov	ip, r2
   88dba:	9005      	str	r0, [sp, #20]
   88dbc:	460e      	mov	r6, r1
   88dbe:	f816 7b01 	ldrb.w	r7, [r6], #1
   88dc2:	9c05      	ldr	r4, [sp, #20]
   88dc4:	4631      	mov	r1, r6
   88dc6:	19e2      	adds	r2, r4, r7
   88dc8:	f892 a001 	ldrb.w	sl, [r2, #1]
   88dcc:	f00a 0508 	and.w	r5, sl, #8
   88dd0:	b2eb      	uxtb	r3, r5
   88dd2:	2b00      	cmp	r3, #0
   88dd4:	d1f2      	bne.n	88dbc <_strtoll_r+0x14>
   88dd6:	2f2d      	cmp	r7, #45	; 0x2d
   88dd8:	d104      	bne.n	88de4 <_strtoll_r+0x3c>
   88dda:	f816 7b01 	ldrb.w	r7, [r6], #1
   88dde:	f04f 0a01 	mov.w	sl, #1
   88de2:	e005      	b.n	88df0 <_strtoll_r+0x48>
   88de4:	2f2b      	cmp	r7, #43	; 0x2b
   88de6:	bf04      	itt	eq
   88de8:	4636      	moveq	r6, r6
   88dea:	f816 7b01 	ldrbeq.w	r7, [r6], #1
   88dee:	469a      	mov	sl, r3
   88df0:	f1b8 0f00 	cmp.w	r8, #0
   88df4:	f000 8092 	beq.w	88f1c <_strtoll_r+0x174>
   88df8:	f1b8 0f10 	cmp.w	r8, #16
   88dfc:	d108      	bne.n	88e10 <_strtoll_r+0x68>
   88dfe:	2f30      	cmp	r7, #48	; 0x30
   88e00:	d106      	bne.n	88e10 <_strtoll_r+0x68>
   88e02:	7837      	ldrb	r7, [r6, #0]
   88e04:	2f78      	cmp	r7, #120	; 0x78
   88e06:	d17e      	bne.n	88f06 <_strtoll_r+0x15e>
   88e08:	7877      	ldrb	r7, [r6, #1]
   88e0a:	f04f 0810 	mov.w	r8, #16
   88e0e:	3602      	adds	r6, #2
   88e10:	f1ba 0f00 	cmp.w	sl, #0
   88e14:	d003      	beq.n	88e1e <_strtoll_r+0x76>
   88e16:	2400      	movs	r4, #0
   88e18:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   88e1c:	e003      	b.n	88e26 <_strtoll_r+0x7e>
   88e1e:	f04f 34ff 	mov.w	r4, #4294967295
   88e22:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   88e26:	ea4f 7be8 	mov.w	fp, r8, asr #31
   88e2a:	4620      	mov	r0, r4
   88e2c:	4629      	mov	r1, r5
   88e2e:	4642      	mov	r2, r8
   88e30:	465b      	mov	r3, fp
   88e32:	f8cd c004 	str.w	ip, [sp, #4]
   88e36:	f001 f94f 	bl	8a0d8 <__aeabi_uldivmod>
   88e3a:	465b      	mov	r3, fp
   88e3c:	9206      	str	r2, [sp, #24]
   88e3e:	4620      	mov	r0, r4
   88e40:	4642      	mov	r2, r8
   88e42:	4629      	mov	r1, r5
   88e44:	f001 f948 	bl	8a0d8 <__aeabi_uldivmod>
   88e48:	f8dd c004 	ldr.w	ip, [sp, #4]
   88e4c:	9103      	str	r1, [sp, #12]
   88e4e:	46c1      	mov	r9, r8
   88e50:	9002      	str	r0, [sp, #8]
   88e52:	2100      	movs	r1, #0
   88e54:	2200      	movs	r2, #0
   88e56:	2300      	movs	r3, #0
   88e58:	9805      	ldr	r0, [sp, #20]
   88e5a:	19c4      	adds	r4, r0, r7
   88e5c:	7860      	ldrb	r0, [r4, #1]
   88e5e:	f000 0404 	and.w	r4, r0, #4
   88e62:	b2e4      	uxtb	r4, r4
   88e64:	b10c      	cbz	r4, 88e6a <_strtoll_r+0xc2>
   88e66:	3f30      	subs	r7, #48	; 0x30
   88e68:	e007      	b.n	88e7a <_strtoll_r+0xd2>
   88e6a:	f010 0003 	ands.w	r0, r0, #3
   88e6e:	d026      	beq.n	88ebe <_strtoll_r+0x116>
   88e70:	2801      	cmp	r0, #1
   88e72:	bf14      	ite	ne
   88e74:	2057      	movne	r0, #87	; 0x57
   88e76:	2037      	moveq	r0, #55	; 0x37
   88e78:	1a3f      	subs	r7, r7, r0
   88e7a:	4547      	cmp	r7, r8
   88e7c:	da1f      	bge.n	88ebe <_strtoll_r+0x116>
   88e7e:	1c4c      	adds	r4, r1, #1
   88e80:	d01a      	beq.n	88eb8 <_strtoll_r+0x110>
   88e82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   88e86:	4299      	cmp	r1, r3
   88e88:	bf08      	it	eq
   88e8a:	4290      	cmpeq	r0, r2
   88e8c:	d312      	bcc.n	88eb4 <_strtoll_r+0x10c>
   88e8e:	428b      	cmp	r3, r1
   88e90:	bf08      	it	eq
   88e92:	4282      	cmpeq	r2, r0
   88e94:	d102      	bne.n	88e9c <_strtoll_r+0xf4>
   88e96:	9906      	ldr	r1, [sp, #24]
   88e98:	428f      	cmp	r7, r1
   88e9a:	dc0b      	bgt.n	88eb4 <_strtoll_r+0x10c>
   88e9c:	fb02 f40b 	mul.w	r4, r2, fp
   88ea0:	fb09 4003 	mla	r0, r9, r3, r4
   88ea4:	fba2 2309 	umull	r2, r3, r2, r9
   88ea8:	19d2      	adds	r2, r2, r7
   88eaa:	4403      	add	r3, r0
   88eac:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
   88eb0:	2101      	movs	r1, #1
   88eb2:	e001      	b.n	88eb8 <_strtoll_r+0x110>
   88eb4:	f04f 31ff 	mov.w	r1, #4294967295
   88eb8:	f816 7b01 	ldrb.w	r7, [r6], #1
   88ebc:	e7cc      	b.n	88e58 <_strtoll_r+0xb0>
   88ebe:	1c48      	adds	r0, r1, #1
   88ec0:	d111      	bne.n	88ee6 <_strtoll_r+0x13e>
   88ec2:	f1ba 0f00 	cmp.w	sl, #0
   88ec6:	d003      	beq.n	88ed0 <_strtoll_r+0x128>
   88ec8:	2200      	movs	r2, #0
   88eca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   88ece:	e003      	b.n	88ed8 <_strtoll_r+0x130>
   88ed0:	f04f 32ff 	mov.w	r2, #4294967295
   88ed4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   88ed8:	9c07      	ldr	r4, [sp, #28]
   88eda:	2022      	movs	r0, #34	; 0x22
   88edc:	6020      	str	r0, [r4, #0]
   88ede:	f1bc 0f00 	cmp.w	ip, #0
   88ee2:	d10a      	bne.n	88efa <_strtoll_r+0x152>
   88ee4:	e020      	b.n	88f28 <_strtoll_r+0x180>
   88ee6:	f1ba 0f00 	cmp.w	sl, #0
   88eea:	d002      	beq.n	88ef2 <_strtoll_r+0x14a>
   88eec:	4252      	negs	r2, r2
   88eee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   88ef2:	f1bc 0f00 	cmp.w	ip, #0
   88ef6:	d017      	beq.n	88f28 <_strtoll_r+0x180>
   88ef8:	b109      	cbz	r1, 88efe <_strtoll_r+0x156>
   88efa:	3e01      	subs	r6, #1
   88efc:	9604      	str	r6, [sp, #16]
   88efe:	9c04      	ldr	r4, [sp, #16]
   88f00:	f8cc 4000 	str.w	r4, [ip]
   88f04:	e010      	b.n	88f28 <_strtoll_r+0x180>
   88f06:	2f58      	cmp	r7, #88	; 0x58
   88f08:	f43f af7e 	beq.w	88e08 <_strtoll_r+0x60>
   88f0c:	2730      	movs	r7, #48	; 0x30
   88f0e:	f1b8 0f00 	cmp.w	r8, #0
   88f12:	f47f af7d 	bne.w	88e10 <_strtoll_r+0x68>
   88f16:	f04f 0808 	mov.w	r8, #8
   88f1a:	e779      	b.n	88e10 <_strtoll_r+0x68>
   88f1c:	2f30      	cmp	r7, #48	; 0x30
   88f1e:	f43f af70 	beq.w	88e02 <_strtoll_r+0x5a>
   88f22:	f04f 080a 	mov.w	r8, #10
   88f26:	e773      	b.n	88e10 <_strtoll_r+0x68>
   88f28:	4610      	mov	r0, r2
   88f2a:	4619      	mov	r1, r3
   88f2c:	b009      	add	sp, #36	; 0x24
   88f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f32:	bf00      	nop
   88f34:	20070468 	.word	0x20070468

00088f38 <_strtoul_r>:
   88f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88f3c:	9001      	str	r0, [sp, #4]
   88f3e:	483c      	ldr	r0, [pc, #240]	; (89030 <_strtoul_r+0xf8>)
   88f40:	f8d0 9000 	ldr.w	r9, [r0]
   88f44:	4608      	mov	r0, r1
   88f46:	4604      	mov	r4, r0
   88f48:	f814 5b01 	ldrb.w	r5, [r4], #1
   88f4c:	eb09 0605 	add.w	r6, r9, r5
   88f50:	7877      	ldrb	r7, [r6, #1]
   88f52:	4620      	mov	r0, r4
   88f54:	f007 0608 	and.w	r6, r7, #8
   88f58:	b2f7      	uxtb	r7, r6
   88f5a:	2f00      	cmp	r7, #0
   88f5c:	d1f3      	bne.n	88f46 <_strtoul_r+0xe>
   88f5e:	2d2d      	cmp	r5, #45	; 0x2d
   88f60:	d103      	bne.n	88f6a <_strtoul_r+0x32>
   88f62:	f814 5b01 	ldrb.w	r5, [r4], #1
   88f66:	2701      	movs	r7, #1
   88f68:	e004      	b.n	88f74 <_strtoul_r+0x3c>
   88f6a:	2d2b      	cmp	r5, #43	; 0x2b
   88f6c:	bf04      	itt	eq
   88f6e:	4624      	moveq	r4, r4
   88f70:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   88f74:	2b00      	cmp	r3, #0
   88f76:	d055      	beq.n	89024 <_strtoul_r+0xec>
   88f78:	2b10      	cmp	r3, #16
   88f7a:	d107      	bne.n	88f8c <_strtoul_r+0x54>
   88f7c:	2d30      	cmp	r5, #48	; 0x30
   88f7e:	d105      	bne.n	88f8c <_strtoul_r+0x54>
   88f80:	7825      	ldrb	r5, [r4, #0]
   88f82:	2d78      	cmp	r5, #120	; 0x78
   88f84:	d147      	bne.n	89016 <_strtoul_r+0xde>
   88f86:	7865      	ldrb	r5, [r4, #1]
   88f88:	2310      	movs	r3, #16
   88f8a:	3402      	adds	r4, #2
   88f8c:	f04f 3aff 	mov.w	sl, #4294967295
   88f90:	fbba faf3 	udiv	sl, sl, r3
   88f94:	fb03 f00a 	mul.w	r0, r3, sl
   88f98:	2600      	movs	r6, #0
   88f9a:	ea6f 0800 	mvn.w	r8, r0
   88f9e:	4630      	mov	r0, r6
   88fa0:	eb09 0c05 	add.w	ip, r9, r5
   88fa4:	f89c c001 	ldrb.w	ip, [ip, #1]
   88fa8:	f00c 0b04 	and.w	fp, ip, #4
   88fac:	fa5f fb8b 	uxtb.w	fp, fp
   88fb0:	f1bb 0f00 	cmp.w	fp, #0
   88fb4:	d001      	beq.n	88fba <_strtoul_r+0x82>
   88fb6:	3d30      	subs	r5, #48	; 0x30
   88fb8:	e00b      	b.n	88fd2 <_strtoul_r+0x9a>
   88fba:	f01c 0c03 	ands.w	ip, ip, #3
   88fbe:	d01b      	beq.n	88ff8 <_strtoul_r+0xc0>
   88fc0:	f1bc 0f01 	cmp.w	ip, #1
   88fc4:	bf14      	ite	ne
   88fc6:	f04f 0c57 	movne.w	ip, #87	; 0x57
   88fca:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   88fce:	ebcc 0505 	rsb	r5, ip, r5
   88fd2:	429d      	cmp	r5, r3
   88fd4:	da10      	bge.n	88ff8 <_strtoul_r+0xc0>
   88fd6:	f1b6 3fff 	cmp.w	r6, #4294967295
   88fda:	d00a      	beq.n	88ff2 <_strtoul_r+0xba>
   88fdc:	4550      	cmp	r0, sl
   88fde:	d806      	bhi.n	88fee <_strtoul_r+0xb6>
   88fe0:	d101      	bne.n	88fe6 <_strtoul_r+0xae>
   88fe2:	4545      	cmp	r5, r8
   88fe4:	dc03      	bgt.n	88fee <_strtoul_r+0xb6>
   88fe6:	fb03 5000 	mla	r0, r3, r0, r5
   88fea:	2601      	movs	r6, #1
   88fec:	e001      	b.n	88ff2 <_strtoul_r+0xba>
   88fee:	f04f 36ff 	mov.w	r6, #4294967295
   88ff2:	f814 5b01 	ldrb.w	r5, [r4], #1
   88ff6:	e7d3      	b.n	88fa0 <_strtoul_r+0x68>
   88ff8:	1c73      	adds	r3, r6, #1
   88ffa:	d105      	bne.n	89008 <_strtoul_r+0xd0>
   88ffc:	9901      	ldr	r1, [sp, #4]
   88ffe:	2322      	movs	r3, #34	; 0x22
   89000:	600b      	str	r3, [r1, #0]
   89002:	4630      	mov	r0, r6
   89004:	b922      	cbnz	r2, 89010 <_strtoul_r+0xd8>
   89006:	e011      	b.n	8902c <_strtoul_r+0xf4>
   89008:	b107      	cbz	r7, 8900c <_strtoul_r+0xd4>
   8900a:	4240      	negs	r0, r0
   8900c:	b172      	cbz	r2, 8902c <_strtoul_r+0xf4>
   8900e:	b106      	cbz	r6, 89012 <_strtoul_r+0xda>
   89010:	1e61      	subs	r1, r4, #1
   89012:	6011      	str	r1, [r2, #0]
   89014:	e00a      	b.n	8902c <_strtoul_r+0xf4>
   89016:	2d58      	cmp	r5, #88	; 0x58
   89018:	d0b5      	beq.n	88f86 <_strtoul_r+0x4e>
   8901a:	2530      	movs	r5, #48	; 0x30
   8901c:	2b00      	cmp	r3, #0
   8901e:	d1b5      	bne.n	88f8c <_strtoul_r+0x54>
   89020:	2308      	movs	r3, #8
   89022:	e7b3      	b.n	88f8c <_strtoul_r+0x54>
   89024:	2d30      	cmp	r5, #48	; 0x30
   89026:	d0ab      	beq.n	88f80 <_strtoul_r+0x48>
   89028:	230a      	movs	r3, #10
   8902a:	e7af      	b.n	88f8c <_strtoul_r+0x54>
   8902c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89030:	20070468 	.word	0x20070468

00089034 <strtoul>:
   89034:	b530      	push	{r4, r5, lr}
   89036:	4613      	mov	r3, r2
   89038:	4a04      	ldr	r2, [pc, #16]	; (8904c <strtoul+0x18>)
   8903a:	4605      	mov	r5, r0
   8903c:	460c      	mov	r4, r1
   8903e:	6810      	ldr	r0, [r2, #0]
   89040:	4629      	mov	r1, r5
   89042:	4622      	mov	r2, r4
   89044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   89048:	f7ff bf76 	b.w	88f38 <_strtoul_r>
   8904c:	20070010 	.word	0x20070010

00089050 <_strtoull_r>:
   89050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89054:	461e      	mov	r6, r3
   89056:	4b55      	ldr	r3, [pc, #340]	; (891ac <_strtoull_r+0x15c>)
   89058:	b087      	sub	sp, #28
   8905a:	9005      	str	r0, [sp, #20]
   8905c:	6818      	ldr	r0, [r3, #0]
   8905e:	468a      	mov	sl, r1
   89060:	4693      	mov	fp, r2
   89062:	9003      	str	r0, [sp, #12]
   89064:	460c      	mov	r4, r1
   89066:	f814 5b01 	ldrb.w	r5, [r4], #1
   8906a:	9a03      	ldr	r2, [sp, #12]
   8906c:	4621      	mov	r1, r4
   8906e:	1957      	adds	r7, r2, r5
   89070:	f897 9001 	ldrb.w	r9, [r7, #1]
   89074:	f009 0308 	and.w	r3, r9, #8
   89078:	b2d8      	uxtb	r0, r3
   8907a:	2800      	cmp	r0, #0
   8907c:	d1f2      	bne.n	89064 <_strtoull_r+0x14>
   8907e:	2d2d      	cmp	r5, #45	; 0x2d
   89080:	d104      	bne.n	8908c <_strtoull_r+0x3c>
   89082:	f814 5b01 	ldrb.w	r5, [r4], #1
   89086:	f04f 0901 	mov.w	r9, #1
   8908a:	e005      	b.n	89098 <_strtoull_r+0x48>
   8908c:	2d2b      	cmp	r5, #43	; 0x2b
   8908e:	bf04      	itt	eq
   89090:	4624      	moveq	r4, r4
   89092:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   89096:	4681      	mov	r9, r0
   89098:	2e00      	cmp	r6, #0
   8909a:	d07d      	beq.n	89198 <_strtoull_r+0x148>
   8909c:	2e10      	cmp	r6, #16
   8909e:	d107      	bne.n	890b0 <_strtoull_r+0x60>
   890a0:	2d30      	cmp	r5, #48	; 0x30
   890a2:	d105      	bne.n	890b0 <_strtoull_r+0x60>
   890a4:	7825      	ldrb	r5, [r4, #0]
   890a6:	2d78      	cmp	r5, #120	; 0x78
   890a8:	d16f      	bne.n	8918a <_strtoull_r+0x13a>
   890aa:	7865      	ldrb	r5, [r4, #1]
   890ac:	2610      	movs	r6, #16
   890ae:	3402      	adds	r4, #2
   890b0:	ea4f 78e6 	mov.w	r8, r6, asr #31
   890b4:	4632      	mov	r2, r6
   890b6:	4643      	mov	r3, r8
   890b8:	f04f 30ff 	mov.w	r0, #4294967295
   890bc:	f04f 31ff 	mov.w	r1, #4294967295
   890c0:	f001 f80a 	bl	8a0d8 <__aeabi_uldivmod>
   890c4:	4632      	mov	r2, r6
   890c6:	e88d 0003 	stmia.w	sp, {r0, r1}
   890ca:	4643      	mov	r3, r8
   890cc:	f04f 30ff 	mov.w	r0, #4294967295
   890d0:	f04f 31ff 	mov.w	r1, #4294967295
   890d4:	f001 f800 	bl	8a0d8 <__aeabi_uldivmod>
   890d8:	4637      	mov	r7, r6
   890da:	9204      	str	r2, [sp, #16]
   890dc:	2100      	movs	r1, #0
   890de:	2200      	movs	r2, #0
   890e0:	2300      	movs	r3, #0
   890e2:	9803      	ldr	r0, [sp, #12]
   890e4:	eb00 0c05 	add.w	ip, r0, r5
   890e8:	f89c 0001 	ldrb.w	r0, [ip, #1]
   890ec:	f000 0e04 	and.w	lr, r0, #4
   890f0:	fa5f fc8e 	uxtb.w	ip, lr
   890f4:	f1bc 0f00 	cmp.w	ip, #0
   890f8:	d001      	beq.n	890fe <_strtoull_r+0xae>
   890fa:	3d30      	subs	r5, #48	; 0x30
   890fc:	e007      	b.n	8910e <_strtoull_r+0xbe>
   890fe:	f010 0003 	ands.w	r0, r0, #3
   89102:	d026      	beq.n	89152 <_strtoull_r+0x102>
   89104:	2801      	cmp	r0, #1
   89106:	bf14      	ite	ne
   89108:	2057      	movne	r0, #87	; 0x57
   8910a:	2037      	moveq	r0, #55	; 0x37
   8910c:	1a2d      	subs	r5, r5, r0
   8910e:	42b5      	cmp	r5, r6
   89110:	da1f      	bge.n	89152 <_strtoull_r+0x102>
   89112:	1c48      	adds	r0, r1, #1
   89114:	d01a      	beq.n	8914c <_strtoull_r+0xfc>
   89116:	e9dd 0100 	ldrd	r0, r1, [sp]
   8911a:	4299      	cmp	r1, r3
   8911c:	bf08      	it	eq
   8911e:	4290      	cmpeq	r0, r2
   89120:	d312      	bcc.n	89148 <_strtoull_r+0xf8>
   89122:	428b      	cmp	r3, r1
   89124:	bf08      	it	eq
   89126:	4282      	cmpeq	r2, r0
   89128:	d102      	bne.n	89130 <_strtoull_r+0xe0>
   8912a:	9904      	ldr	r1, [sp, #16]
   8912c:	428d      	cmp	r5, r1
   8912e:	dc0b      	bgt.n	89148 <_strtoull_r+0xf8>
   89130:	fb02 f008 	mul.w	r0, r2, r8
   89134:	fb07 0103 	mla	r1, r7, r3, r0
   89138:	fba2 2307 	umull	r2, r3, r2, r7
   8913c:	18cb      	adds	r3, r1, r3
   8913e:	1952      	adds	r2, r2, r5
   89140:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   89144:	2101      	movs	r1, #1
   89146:	e001      	b.n	8914c <_strtoull_r+0xfc>
   89148:	f04f 31ff 	mov.w	r1, #4294967295
   8914c:	f814 5b01 	ldrb.w	r5, [r4], #1
   89150:	e7c7      	b.n	890e2 <_strtoull_r+0x92>
   89152:	1c48      	adds	r0, r1, #1
   89154:	d10a      	bne.n	8916c <_strtoull_r+0x11c>
   89156:	9a05      	ldr	r2, [sp, #20]
   89158:	2022      	movs	r0, #34	; 0x22
   8915a:	6010      	str	r0, [r2, #0]
   8915c:	f04f 33ff 	mov.w	r3, #4294967295
   89160:	f04f 32ff 	mov.w	r2, #4294967295
   89164:	f1bb 0f00 	cmp.w	fp, #0
   89168:	d10a      	bne.n	89180 <_strtoull_r+0x130>
   8916a:	e019      	b.n	891a0 <_strtoull_r+0x150>
   8916c:	f1b9 0f00 	cmp.w	r9, #0
   89170:	d002      	beq.n	89178 <_strtoull_r+0x128>
   89172:	4252      	negs	r2, r2
   89174:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   89178:	f1bb 0f00 	cmp.w	fp, #0
   8917c:	d010      	beq.n	891a0 <_strtoull_r+0x150>
   8917e:	b109      	cbz	r1, 89184 <_strtoull_r+0x134>
   89180:	f104 3aff 	add.w	sl, r4, #4294967295
   89184:	f8cb a000 	str.w	sl, [fp]
   89188:	e00a      	b.n	891a0 <_strtoull_r+0x150>
   8918a:	2d58      	cmp	r5, #88	; 0x58
   8918c:	d08d      	beq.n	890aa <_strtoull_r+0x5a>
   8918e:	2530      	movs	r5, #48	; 0x30
   89190:	2e00      	cmp	r6, #0
   89192:	d18d      	bne.n	890b0 <_strtoull_r+0x60>
   89194:	2608      	movs	r6, #8
   89196:	e78b      	b.n	890b0 <_strtoull_r+0x60>
   89198:	2d30      	cmp	r5, #48	; 0x30
   8919a:	d083      	beq.n	890a4 <_strtoull_r+0x54>
   8919c:	260a      	movs	r6, #10
   8919e:	e787      	b.n	890b0 <_strtoull_r+0x60>
   891a0:	4610      	mov	r0, r2
   891a2:	4619      	mov	r1, r3
   891a4:	b007      	add	sp, #28
   891a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   891aa:	bf00      	nop
   891ac:	20070468 	.word	0x20070468

000891b0 <__ssprint_r>:
   891b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   891b4:	4607      	mov	r7, r0
   891b6:	6890      	ldr	r0, [r2, #8]
   891b8:	460c      	mov	r4, r1
   891ba:	4615      	mov	r5, r2
   891bc:	f8d2 8000 	ldr.w	r8, [r2]
   891c0:	b908      	cbnz	r0, 891c6 <__ssprint_r+0x16>
   891c2:	6050      	str	r0, [r2, #4]
   891c4:	e06f      	b.n	892a6 <__ssprint_r+0xf6>
   891c6:	f04f 0b00 	mov.w	fp, #0
   891ca:	465e      	mov	r6, fp
   891cc:	b936      	cbnz	r6, 891dc <__ssprint_r+0x2c>
   891ce:	f8d8 b000 	ldr.w	fp, [r8]
   891d2:	f8d8 6004 	ldr.w	r6, [r8, #4]
   891d6:	f108 0808 	add.w	r8, r8, #8
   891da:	e7f7      	b.n	891cc <__ssprint_r+0x1c>
   891dc:	68a3      	ldr	r3, [r4, #8]
   891de:	429e      	cmp	r6, r3
   891e0:	d34c      	bcc.n	8927c <__ssprint_r+0xcc>
   891e2:	89a2      	ldrh	r2, [r4, #12]
   891e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
   891e8:	d046      	beq.n	89278 <__ssprint_r+0xc8>
   891ea:	6823      	ldr	r3, [r4, #0]
   891ec:	6960      	ldr	r0, [r4, #20]
   891ee:	6921      	ldr	r1, [r4, #16]
   891f0:	f04f 0a03 	mov.w	sl, #3
   891f4:	ebc1 0903 	rsb	r9, r1, r3
   891f8:	fb0a f300 	mul.w	r3, sl, r0
   891fc:	2002      	movs	r0, #2
   891fe:	fb93 faf0 	sdiv	sl, r3, r0
   89202:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   89206:	f109 0301 	add.w	r3, r9, #1
   8920a:	1998      	adds	r0, r3, r6
   8920c:	b213      	sxth	r3, r2
   8920e:	4582      	cmp	sl, r0
   89210:	bf38      	it	cc
   89212:	4682      	movcc	sl, r0
   89214:	4638      	mov	r0, r7
   89216:	b183      	cbz	r3, 8923a <__ssprint_r+0x8a>
   89218:	4651      	mov	r1, sl
   8921a:	f7fe fbfd 	bl	87a18 <_malloc_r>
   8921e:	b1a8      	cbz	r0, 8924c <__ssprint_r+0x9c>
   89220:	6921      	ldr	r1, [r4, #16]
   89222:	464a      	mov	r2, r9
   89224:	9001      	str	r0, [sp, #4]
   89226:	f7fa fecf 	bl	83fc8 <memcpy>
   8922a:	89a0      	ldrh	r0, [r4, #12]
   8922c:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   89230:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   89234:	81a1      	strh	r1, [r4, #12]
   89236:	9901      	ldr	r1, [sp, #4]
   89238:	e014      	b.n	89264 <__ssprint_r+0xb4>
   8923a:	4652      	mov	r2, sl
   8923c:	f7ff fa68 	bl	88710 <_realloc_r>
   89240:	4601      	mov	r1, r0
   89242:	b978      	cbnz	r0, 89264 <__ssprint_r+0xb4>
   89244:	4638      	mov	r0, r7
   89246:	6921      	ldr	r1, [r4, #16]
   89248:	f7fd fd88 	bl	86d5c <_free_r>
   8924c:	89a3      	ldrh	r3, [r4, #12]
   8924e:	200c      	movs	r0, #12
   89250:	2100      	movs	r1, #0
   89252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   89256:	6038      	str	r0, [r7, #0]
   89258:	81a2      	strh	r2, [r4, #12]
   8925a:	f04f 30ff 	mov.w	r0, #4294967295
   8925e:	60a9      	str	r1, [r5, #8]
   89260:	6069      	str	r1, [r5, #4]
   89262:	e020      	b.n	892a6 <__ssprint_r+0xf6>
   89264:	eb01 0309 	add.w	r3, r1, r9
   89268:	ebc9 000a 	rsb	r0, r9, sl
   8926c:	6023      	str	r3, [r4, #0]
   8926e:	6121      	str	r1, [r4, #16]
   89270:	f8c4 a014 	str.w	sl, [r4, #20]
   89274:	4633      	mov	r3, r6
   89276:	60a0      	str	r0, [r4, #8]
   89278:	429e      	cmp	r6, r3
   8927a:	d200      	bcs.n	8927e <__ssprint_r+0xce>
   8927c:	4633      	mov	r3, r6
   8927e:	461a      	mov	r2, r3
   89280:	4659      	mov	r1, fp
   89282:	6820      	ldr	r0, [r4, #0]
   89284:	9301      	str	r3, [sp, #4]
   89286:	f7fe fe37 	bl	87ef8 <memmove>
   8928a:	68a2      	ldr	r2, [r4, #8]
   8928c:	9901      	ldr	r1, [sp, #4]
   8928e:	6823      	ldr	r3, [r4, #0]
   89290:	1a50      	subs	r0, r2, r1
   89292:	185a      	adds	r2, r3, r1
   89294:	68a9      	ldr	r1, [r5, #8]
   89296:	60a0      	str	r0, [r4, #8]
   89298:	1b8e      	subs	r6, r1, r6
   8929a:	6022      	str	r2, [r4, #0]
   8929c:	60ae      	str	r6, [r5, #8]
   8929e:	2e00      	cmp	r6, #0
   892a0:	d195      	bne.n	891ce <__ssprint_r+0x1e>
   892a2:	606e      	str	r6, [r5, #4]
   892a4:	4630      	mov	r0, r6
   892a6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000892aa <_svfiprintf_r>:
   892aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   892ae:	461e      	mov	r6, r3
   892b0:	898b      	ldrh	r3, [r1, #12]
   892b2:	4689      	mov	r9, r1
   892b4:	f003 0180 	and.w	r1, r3, #128	; 0x80
   892b8:	4614      	mov	r4, r2
   892ba:	b20a      	sxth	r2, r1
   892bc:	b0a9      	sub	sp, #164	; 0xa4
   892be:	4683      	mov	fp, r0
   892c0:	b19a      	cbz	r2, 892ea <_svfiprintf_r+0x40>
   892c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   892c6:	b983      	cbnz	r3, 892ea <_svfiprintf_r+0x40>
   892c8:	2140      	movs	r1, #64	; 0x40
   892ca:	f7fe fba5 	bl	87a18 <_malloc_r>
   892ce:	f8c9 0000 	str.w	r0, [r9]
   892d2:	f8c9 0010 	str.w	r0, [r9, #16]
   892d6:	b928      	cbnz	r0, 892e4 <_svfiprintf_r+0x3a>
   892d8:	220c      	movs	r2, #12
   892da:	f8cb 2000 	str.w	r2, [fp]
   892de:	f04f 30ff 	mov.w	r0, #4294967295
   892e2:	e3db      	b.n	89a9c <_svfiprintf_r+0x7f2>
   892e4:	2040      	movs	r0, #64	; 0x40
   892e6:	f8c9 0014 	str.w	r0, [r9, #20]
   892ea:	2100      	movs	r1, #0
   892ec:	ad18      	add	r5, sp, #96	; 0x60
   892ee:	950b      	str	r5, [sp, #44]	; 0x2c
   892f0:	910d      	str	r1, [sp, #52]	; 0x34
   892f2:	910c      	str	r1, [sp, #48]	; 0x30
   892f4:	9401      	str	r4, [sp, #4]
   892f6:	9105      	str	r1, [sp, #20]
   892f8:	9104      	str	r1, [sp, #16]
   892fa:	46a8      	mov	r8, r5
   892fc:	9b01      	ldr	r3, [sp, #4]
   892fe:	461c      	mov	r4, r3
   89300:	f813 2b01 	ldrb.w	r2, [r3], #1
   89304:	b91a      	cbnz	r2, 8930e <_svfiprintf_r+0x64>
   89306:	9801      	ldr	r0, [sp, #4]
   89308:	1a25      	subs	r5, r4, r0
   8930a:	d103      	bne.n	89314 <_svfiprintf_r+0x6a>
   8930c:	e01d      	b.n	8934a <_svfiprintf_r+0xa0>
   8930e:	2a25      	cmp	r2, #37	; 0x25
   89310:	d1f5      	bne.n	892fe <_svfiprintf_r+0x54>
   89312:	e7f8      	b.n	89306 <_svfiprintf_r+0x5c>
   89314:	9a01      	ldr	r2, [sp, #4]
   89316:	990d      	ldr	r1, [sp, #52]	; 0x34
   89318:	e888 0024 	stmia.w	r8, {r2, r5}
   8931c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8931e:	194b      	adds	r3, r1, r5
   89320:	1c50      	adds	r0, r2, #1
   89322:	2807      	cmp	r0, #7
   89324:	930d      	str	r3, [sp, #52]	; 0x34
   89326:	900c      	str	r0, [sp, #48]	; 0x30
   89328:	dc02      	bgt.n	89330 <_svfiprintf_r+0x86>
   8932a:	f108 0808 	add.w	r8, r8, #8
   8932e:	e009      	b.n	89344 <_svfiprintf_r+0x9a>
   89330:	4658      	mov	r0, fp
   89332:	4649      	mov	r1, r9
   89334:	aa0b      	add	r2, sp, #44	; 0x2c
   89336:	f7ff ff3b 	bl	891b0 <__ssprint_r>
   8933a:	2800      	cmp	r0, #0
   8933c:	f040 83a3 	bne.w	89a86 <_svfiprintf_r+0x7dc>
   89340:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89344:	9904      	ldr	r1, [sp, #16]
   89346:	194b      	adds	r3, r1, r5
   89348:	9304      	str	r3, [sp, #16]
   8934a:	7822      	ldrb	r2, [r4, #0]
   8934c:	2a00      	cmp	r2, #0
   8934e:	f000 8393 	beq.w	89a78 <_svfiprintf_r+0x7ce>
   89352:	2200      	movs	r2, #0
   89354:	3401      	adds	r4, #1
   89356:	9401      	str	r4, [sp, #4]
   89358:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8935c:	f04f 3cff 	mov.w	ip, #4294967295
   89360:	9203      	str	r2, [sp, #12]
   89362:	4617      	mov	r7, r2
   89364:	9801      	ldr	r0, [sp, #4]
   89366:	f810 3b01 	ldrb.w	r3, [r0], #1
   8936a:	9001      	str	r0, [sp, #4]
   8936c:	2b63      	cmp	r3, #99	; 0x63
   8936e:	f000 80b3 	beq.w	894d8 <_svfiprintf_r+0x22e>
   89372:	dc33      	bgt.n	893dc <_svfiprintf_r+0x132>
   89374:	2b39      	cmp	r3, #57	; 0x39
   89376:	dc1a      	bgt.n	893ae <_svfiprintf_r+0x104>
   89378:	2b31      	cmp	r3, #49	; 0x31
   8937a:	f280 8091 	bge.w	894a0 <_svfiprintf_r+0x1f6>
   8937e:	2b2b      	cmp	r3, #43	; 0x2b
   89380:	d101      	bne.n	89386 <_svfiprintf_r+0xdc>
   89382:	461a      	mov	r2, r3
   89384:	e7ee      	b.n	89364 <_svfiprintf_r+0xba>
   89386:	dc0a      	bgt.n	8939e <_svfiprintf_r+0xf4>
   89388:	2b23      	cmp	r3, #35	; 0x23
   8938a:	d055      	beq.n	89438 <_svfiprintf_r+0x18e>
   8938c:	2b2a      	cmp	r3, #42	; 0x2a
   8938e:	d056      	beq.n	8943e <_svfiprintf_r+0x194>
   89390:	2b20      	cmp	r3, #32
   89392:	f040 81f6 	bne.w	89782 <_svfiprintf_r+0x4d8>
   89396:	2a00      	cmp	r2, #0
   89398:	bf08      	it	eq
   8939a:	2220      	moveq	r2, #32
   8939c:	e7e2      	b.n	89364 <_svfiprintf_r+0xba>
   8939e:	2b2e      	cmp	r3, #46	; 0x2e
   893a0:	d058      	beq.n	89454 <_svfiprintf_r+0x1aa>
   893a2:	2b30      	cmp	r3, #48	; 0x30
   893a4:	d079      	beq.n	8949a <_svfiprintf_r+0x1f0>
   893a6:	2b2d      	cmp	r3, #45	; 0x2d
   893a8:	f040 81eb 	bne.w	89782 <_svfiprintf_r+0x4d8>
   893ac:	e04f      	b.n	8944e <_svfiprintf_r+0x1a4>
   893ae:	2b4f      	cmp	r3, #79	; 0x4f
   893b0:	f000 80de 	beq.w	89570 <_svfiprintf_r+0x2c6>
   893b4:	dc07      	bgt.n	893c6 <_svfiprintf_r+0x11c>
   893b6:	2b44      	cmp	r3, #68	; 0x44
   893b8:	f040 81e3 	bne.w	89782 <_svfiprintf_r+0x4d8>
   893bc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   893c0:	f047 0710 	orr.w	r7, r7, #16
   893c4:	e090      	b.n	894e8 <_svfiprintf_r+0x23e>
   893c6:	2b55      	cmp	r3, #85	; 0x55
   893c8:	f000 811f 	beq.w	8960a <_svfiprintf_r+0x360>
   893cc:	2b58      	cmp	r3, #88	; 0x58
   893ce:	f040 81d8 	bne.w	89782 <_svfiprintf_r+0x4d8>
   893d2:	4daf      	ldr	r5, [pc, #700]	; (89690 <_svfiprintf_r+0x3e6>)
   893d4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   893d8:	9505      	str	r5, [sp, #20]
   893da:	e130      	b.n	8963e <_svfiprintf_r+0x394>
   893dc:	2b6f      	cmp	r3, #111	; 0x6f
   893de:	f000 80c9 	beq.w	89574 <_svfiprintf_r+0x2ca>
   893e2:	dc10      	bgt.n	89406 <_svfiprintf_r+0x15c>
   893e4:	2b69      	cmp	r3, #105	; 0x69
   893e6:	d024      	beq.n	89432 <_svfiprintf_r+0x188>
   893e8:	dc07      	bgt.n	893fa <_svfiprintf_r+0x150>
   893ea:	2b64      	cmp	r3, #100	; 0x64
   893ec:	d021      	beq.n	89432 <_svfiprintf_r+0x188>
   893ee:	2b68      	cmp	r3, #104	; 0x68
   893f0:	f040 81c7 	bne.w	89782 <_svfiprintf_r+0x4d8>
   893f4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   893f8:	e7b4      	b.n	89364 <_svfiprintf_r+0xba>
   893fa:	2b6c      	cmp	r3, #108	; 0x6c
   893fc:	d05f      	beq.n	894be <_svfiprintf_r+0x214>
   893fe:	2b6e      	cmp	r3, #110	; 0x6e
   89400:	f040 81bf 	bne.w	89782 <_svfiprintf_r+0x4d8>
   89404:	e096      	b.n	89534 <_svfiprintf_r+0x28a>
   89406:	2b73      	cmp	r3, #115	; 0x73
   89408:	f000 80df 	beq.w	895ca <_svfiprintf_r+0x320>
   8940c:	dc06      	bgt.n	8941c <_svfiprintf_r+0x172>
   8940e:	2b70      	cmp	r3, #112	; 0x70
   89410:	f000 80cd 	beq.w	895ae <_svfiprintf_r+0x304>
   89414:	2b71      	cmp	r3, #113	; 0x71
   89416:	f040 81b4 	bne.w	89782 <_svfiprintf_r+0x4d8>
   8941a:	e05a      	b.n	894d2 <_svfiprintf_r+0x228>
   8941c:	2b75      	cmp	r3, #117	; 0x75
   8941e:	f000 80f6 	beq.w	8960e <_svfiprintf_r+0x364>
   89422:	2b78      	cmp	r3, #120	; 0x78
   89424:	f040 81ad 	bne.w	89782 <_svfiprintf_r+0x4d8>
   89428:	4d9a      	ldr	r5, [pc, #616]	; (89694 <_svfiprintf_r+0x3ea>)
   8942a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8942e:	9505      	str	r5, [sp, #20]
   89430:	e105      	b.n	8963e <_svfiprintf_r+0x394>
   89432:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89436:	e057      	b.n	894e8 <_svfiprintf_r+0x23e>
   89438:	f047 0701 	orr.w	r7, r7, #1
   8943c:	e792      	b.n	89364 <_svfiprintf_r+0xba>
   8943e:	1d33      	adds	r3, r6, #4
   89440:	6836      	ldr	r6, [r6, #0]
   89442:	2e00      	cmp	r6, #0
   89444:	9603      	str	r6, [sp, #12]
   89446:	da15      	bge.n	89474 <_svfiprintf_r+0x1ca>
   89448:	4270      	negs	r0, r6
   8944a:	9003      	str	r0, [sp, #12]
   8944c:	461e      	mov	r6, r3
   8944e:	f047 0704 	orr.w	r7, r7, #4
   89452:	e787      	b.n	89364 <_svfiprintf_r+0xba>
   89454:	9901      	ldr	r1, [sp, #4]
   89456:	f811 3b01 	ldrb.w	r3, [r1], #1
   8945a:	2b2a      	cmp	r3, #42	; 0x2a
   8945c:	9101      	str	r1, [sp, #4]
   8945e:	d10b      	bne.n	89478 <_svfiprintf_r+0x1ce>
   89460:	f8d6 c000 	ldr.w	ip, [r6]
   89464:	1d33      	adds	r3, r6, #4
   89466:	f1bc 0f00 	cmp.w	ip, #0
   8946a:	da03      	bge.n	89474 <_svfiprintf_r+0x1ca>
   8946c:	461e      	mov	r6, r3
   8946e:	f04f 3cff 	mov.w	ip, #4294967295
   89472:	e777      	b.n	89364 <_svfiprintf_r+0xba>
   89474:	461e      	mov	r6, r3
   89476:	e775      	b.n	89364 <_svfiprintf_r+0xba>
   89478:	f04f 0c00 	mov.w	ip, #0
   8947c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   89480:	2809      	cmp	r0, #9
   89482:	d807      	bhi.n	89494 <_svfiprintf_r+0x1ea>
   89484:	9901      	ldr	r1, [sp, #4]
   89486:	230a      	movs	r3, #10
   89488:	fb03 0c0c 	mla	ip, r3, ip, r0
   8948c:	f811 3b01 	ldrb.w	r3, [r1], #1
   89490:	9101      	str	r1, [sp, #4]
   89492:	e7f3      	b.n	8947c <_svfiprintf_r+0x1d2>
   89494:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   89498:	e768      	b.n	8936c <_svfiprintf_r+0xc2>
   8949a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8949e:	e761      	b.n	89364 <_svfiprintf_r+0xba>
   894a0:	9801      	ldr	r0, [sp, #4]
   894a2:	2100      	movs	r1, #0
   894a4:	3b30      	subs	r3, #48	; 0x30
   894a6:	240a      	movs	r4, #10
   894a8:	fb04 3101 	mla	r1, r4, r1, r3
   894ac:	f810 3b01 	ldrb.w	r3, [r0], #1
   894b0:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   894b4:	2c09      	cmp	r4, #9
   894b6:	9001      	str	r0, [sp, #4]
   894b8:	d9f4      	bls.n	894a4 <_svfiprintf_r+0x1fa>
   894ba:	9103      	str	r1, [sp, #12]
   894bc:	e756      	b.n	8936c <_svfiprintf_r+0xc2>
   894be:	9901      	ldr	r1, [sp, #4]
   894c0:	780b      	ldrb	r3, [r1, #0]
   894c2:	2b6c      	cmp	r3, #108	; 0x6c
   894c4:	d102      	bne.n	894cc <_svfiprintf_r+0x222>
   894c6:	1c48      	adds	r0, r1, #1
   894c8:	9001      	str	r0, [sp, #4]
   894ca:	e002      	b.n	894d2 <_svfiprintf_r+0x228>
   894cc:	f047 0710 	orr.w	r7, r7, #16
   894d0:	e748      	b.n	89364 <_svfiprintf_r+0xba>
   894d2:	f047 0720 	orr.w	r7, r7, #32
   894d6:	e745      	b.n	89364 <_svfiprintf_r+0xba>
   894d8:	6832      	ldr	r2, [r6, #0]
   894da:	2500      	movs	r5, #0
   894dc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   894e0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   894e4:	3604      	adds	r6, #4
   894e6:	e156      	b.n	89796 <_svfiprintf_r+0x4ec>
   894e8:	06ba      	lsls	r2, r7, #26
   894ea:	d507      	bpl.n	894fc <_svfiprintf_r+0x252>
   894ec:	3607      	adds	r6, #7
   894ee:	f026 0507 	bic.w	r5, r6, #7
   894f2:	f105 0608 	add.w	r6, r5, #8
   894f6:	e9d5 4500 	ldrd	r4, r5, [r5]
   894fa:	e00f      	b.n	8951c <_svfiprintf_r+0x272>
   894fc:	f017 0f10 	tst.w	r7, #16
   89500:	f106 0104 	add.w	r1, r6, #4
   89504:	d001      	beq.n	8950a <_svfiprintf_r+0x260>
   89506:	6832      	ldr	r2, [r6, #0]
   89508:	e005      	b.n	89516 <_svfiprintf_r+0x26c>
   8950a:	f017 0f40 	tst.w	r7, #64	; 0x40
   8950e:	6832      	ldr	r2, [r6, #0]
   89510:	d001      	beq.n	89516 <_svfiprintf_r+0x26c>
   89512:	b214      	sxth	r4, r2
   89514:	e000      	b.n	89518 <_svfiprintf_r+0x26e>
   89516:	4614      	mov	r4, r2
   89518:	17e5      	asrs	r5, r4, #31
   8951a:	460e      	mov	r6, r1
   8951c:	2c00      	cmp	r4, #0
   8951e:	f175 0200 	sbcs.w	r2, r5, #0
   89522:	f280 80b9 	bge.w	89698 <_svfiprintf_r+0x3ee>
   89526:	232d      	movs	r3, #45	; 0x2d
   89528:	4264      	negs	r4, r4
   8952a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8952e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   89532:	e0b1      	b.n	89698 <_svfiprintf_r+0x3ee>
   89534:	f017 0f20 	tst.w	r7, #32
   89538:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8953c:	f106 0204 	add.w	r2, r6, #4
   89540:	d005      	beq.n	8954e <_svfiprintf_r+0x2a4>
   89542:	9c04      	ldr	r4, [sp, #16]
   89544:	6835      	ldr	r5, [r6, #0]
   89546:	17e0      	asrs	r0, r4, #31
   89548:	602c      	str	r4, [r5, #0]
   8954a:	6068      	str	r0, [r5, #4]
   8954c:	e004      	b.n	89558 <_svfiprintf_r+0x2ae>
   8954e:	06fb      	lsls	r3, r7, #27
   89550:	d504      	bpl.n	8955c <_svfiprintf_r+0x2b2>
   89552:	6833      	ldr	r3, [r6, #0]
   89554:	9904      	ldr	r1, [sp, #16]
   89556:	6019      	str	r1, [r3, #0]
   89558:	4616      	mov	r6, r2
   8955a:	e6cf      	b.n	892fc <_svfiprintf_r+0x52>
   8955c:	6830      	ldr	r0, [r6, #0]
   8955e:	9c04      	ldr	r4, [sp, #16]
   89560:	f017 0f40 	tst.w	r7, #64	; 0x40
   89564:	f106 0604 	add.w	r6, r6, #4
   89568:	bf14      	ite	ne
   8956a:	8004      	strhne	r4, [r0, #0]
   8956c:	6004      	streq	r4, [r0, #0]
   8956e:	e6c5      	b.n	892fc <_svfiprintf_r+0x52>
   89570:	f047 0710 	orr.w	r7, r7, #16
   89574:	f017 0020 	ands.w	r0, r7, #32
   89578:	d008      	beq.n	8958c <_svfiprintf_r+0x2e2>
   8957a:	1df3      	adds	r3, r6, #7
   8957c:	f023 0507 	bic.w	r5, r3, #7
   89580:	f105 0608 	add.w	r6, r5, #8
   89584:	e9d5 4500 	ldrd	r4, r5, [r5]
   89588:	2000      	movs	r0, #0
   8958a:	e07c      	b.n	89686 <_svfiprintf_r+0x3dc>
   8958c:	f017 0110 	ands.w	r1, r7, #16
   89590:	f106 0204 	add.w	r2, r6, #4
   89594:	d106      	bne.n	895a4 <_svfiprintf_r+0x2fa>
   89596:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8959a:	d003      	beq.n	895a4 <_svfiprintf_r+0x2fa>
   8959c:	8834      	ldrh	r4, [r6, #0]
   8959e:	2500      	movs	r5, #0
   895a0:	4616      	mov	r6, r2
   895a2:	e7f1      	b.n	89588 <_svfiprintf_r+0x2de>
   895a4:	6836      	ldr	r6, [r6, #0]
   895a6:	2500      	movs	r5, #0
   895a8:	4634      	mov	r4, r6
   895aa:	4616      	mov	r6, r2
   895ac:	e06b      	b.n	89686 <_svfiprintf_r+0x3dc>
   895ae:	4b39      	ldr	r3, [pc, #228]	; (89694 <_svfiprintf_r+0x3ea>)
   895b0:	2130      	movs	r1, #48	; 0x30
   895b2:	2278      	movs	r2, #120	; 0x78
   895b4:	6834      	ldr	r4, [r6, #0]
   895b6:	2500      	movs	r5, #0
   895b8:	f047 0702 	orr.w	r7, r7, #2
   895bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   895c0:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   895c4:	3604      	adds	r6, #4
   895c6:	9305      	str	r3, [sp, #20]
   895c8:	e05c      	b.n	89684 <_svfiprintf_r+0x3da>
   895ca:	4631      	mov	r1, r6
   895cc:	2500      	movs	r5, #0
   895ce:	f8d1 a000 	ldr.w	sl, [r1]
   895d2:	3604      	adds	r6, #4
   895d4:	45ac      	cmp	ip, r5
   895d6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   895da:	4650      	mov	r0, sl
   895dc:	db11      	blt.n	89602 <_svfiprintf_r+0x358>
   895de:	4662      	mov	r2, ip
   895e0:	4629      	mov	r1, r5
   895e2:	f8cd c000 	str.w	ip, [sp]
   895e6:	f7fe fc79 	bl	87edc <memchr>
   895ea:	f8dd c000 	ldr.w	ip, [sp]
   895ee:	2800      	cmp	r0, #0
   895f0:	f000 80d5 	beq.w	8979e <_svfiprintf_r+0x4f4>
   895f4:	ebca 0400 	rsb	r4, sl, r0
   895f8:	4564      	cmp	r4, ip
   895fa:	f340 80d2 	ble.w	897a2 <_svfiprintf_r+0x4f8>
   895fe:	4664      	mov	r4, ip
   89600:	e0cf      	b.n	897a2 <_svfiprintf_r+0x4f8>
   89602:	f7fa fdd5 	bl	841b0 <strlen>
   89606:	4604      	mov	r4, r0
   89608:	e0cb      	b.n	897a2 <_svfiprintf_r+0x4f8>
   8960a:	f047 0710 	orr.w	r7, r7, #16
   8960e:	06bd      	lsls	r5, r7, #26
   89610:	d506      	bpl.n	89620 <_svfiprintf_r+0x376>
   89612:	1df0      	adds	r0, r6, #7
   89614:	f020 0407 	bic.w	r4, r0, #7
   89618:	f104 0608 	add.w	r6, r4, #8
   8961c:	cc30      	ldmia	r4, {r4, r5}
   8961e:	e00c      	b.n	8963a <_svfiprintf_r+0x390>
   89620:	f017 0f10 	tst.w	r7, #16
   89624:	f106 0304 	add.w	r3, r6, #4
   89628:	d103      	bne.n	89632 <_svfiprintf_r+0x388>
   8962a:	067c      	lsls	r4, r7, #25
   8962c:	d501      	bpl.n	89632 <_svfiprintf_r+0x388>
   8962e:	8834      	ldrh	r4, [r6, #0]
   89630:	e001      	b.n	89636 <_svfiprintf_r+0x38c>
   89632:	6835      	ldr	r5, [r6, #0]
   89634:	462c      	mov	r4, r5
   89636:	2500      	movs	r5, #0
   89638:	461e      	mov	r6, r3
   8963a:	2001      	movs	r0, #1
   8963c:	e023      	b.n	89686 <_svfiprintf_r+0x3dc>
   8963e:	06b8      	lsls	r0, r7, #26
   89640:	d507      	bpl.n	89652 <_svfiprintf_r+0x3a8>
   89642:	1df4      	adds	r4, r6, #7
   89644:	f024 0107 	bic.w	r1, r4, #7
   89648:	f101 0608 	add.w	r6, r1, #8
   8964c:	e9d1 4500 	ldrd	r4, r5, [r1]
   89650:	e00c      	b.n	8966c <_svfiprintf_r+0x3c2>
   89652:	f017 0f10 	tst.w	r7, #16
   89656:	f106 0004 	add.w	r0, r6, #4
   8965a:	d103      	bne.n	89664 <_svfiprintf_r+0x3ba>
   8965c:	0679      	lsls	r1, r7, #25
   8965e:	d501      	bpl.n	89664 <_svfiprintf_r+0x3ba>
   89660:	8834      	ldrh	r4, [r6, #0]
   89662:	e001      	b.n	89668 <_svfiprintf_r+0x3be>
   89664:	6836      	ldr	r6, [r6, #0]
   89666:	4634      	mov	r4, r6
   89668:	2500      	movs	r5, #0
   8966a:	4606      	mov	r6, r0
   8966c:	07fa      	lsls	r2, r7, #31
   8966e:	d509      	bpl.n	89684 <_svfiprintf_r+0x3da>
   89670:	ea54 0205 	orrs.w	r2, r4, r5
   89674:	d006      	beq.n	89684 <_svfiprintf_r+0x3da>
   89676:	2230      	movs	r2, #48	; 0x30
   89678:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8967c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   89680:	f047 0702 	orr.w	r7, r7, #2
   89684:	2002      	movs	r0, #2
   89686:	2100      	movs	r1, #0
   89688:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8968c:	e005      	b.n	8969a <_svfiprintf_r+0x3f0>
   8968e:	bf00      	nop
   89690:	0008a7ac 	.word	0x0008a7ac
   89694:	0008a7bd 	.word	0x0008a7bd
   89698:	2001      	movs	r0, #1
   8969a:	f1bc 0f00 	cmp.w	ip, #0
   8969e:	bfa8      	it	ge
   896a0:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   896a4:	ea54 0105 	orrs.w	r1, r4, r5
   896a8:	d102      	bne.n	896b0 <_svfiprintf_r+0x406>
   896aa:	f1bc 0f00 	cmp.w	ip, #0
   896ae:	d058      	beq.n	89762 <_svfiprintf_r+0x4b8>
   896b0:	2801      	cmp	r0, #1
   896b2:	d01d      	beq.n	896f0 <_svfiprintf_r+0x446>
   896b4:	2802      	cmp	r0, #2
   896b6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   896ba:	d041      	beq.n	89740 <_svfiprintf_r+0x496>
   896bc:	f004 0207 	and.w	r2, r4, #7
   896c0:	08e4      	lsrs	r4, r4, #3
   896c2:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   896c6:	08e9      	lsrs	r1, r5, #3
   896c8:	4604      	mov	r4, r0
   896ca:	460d      	mov	r5, r1
   896cc:	3230      	adds	r2, #48	; 0x30
   896ce:	ea54 0105 	orrs.w	r1, r4, r5
   896d2:	469a      	mov	sl, r3
   896d4:	701a      	strb	r2, [r3, #0]
   896d6:	f103 33ff 	add.w	r3, r3, #4294967295
   896da:	d1ef      	bne.n	896bc <_svfiprintf_r+0x412>
   896dc:	07f8      	lsls	r0, r7, #31
   896de:	4655      	mov	r5, sl
   896e0:	d54a      	bpl.n	89778 <_svfiprintf_r+0x4ce>
   896e2:	2a30      	cmp	r2, #48	; 0x30
   896e4:	d048      	beq.n	89778 <_svfiprintf_r+0x4ce>
   896e6:	2230      	movs	r2, #48	; 0x30
   896e8:	469a      	mov	sl, r3
   896ea:	f805 2c01 	strb.w	r2, [r5, #-1]
   896ee:	e043      	b.n	89778 <_svfiprintf_r+0x4ce>
   896f0:	2d00      	cmp	r5, #0
   896f2:	bf08      	it	eq
   896f4:	2c0a      	cmpeq	r4, #10
   896f6:	d203      	bcs.n	89700 <_svfiprintf_r+0x456>
   896f8:	3430      	adds	r4, #48	; 0x30
   896fa:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   896fe:	e036      	b.n	8976e <_svfiprintf_r+0x4c4>
   89700:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   89704:	9302      	str	r3, [sp, #8]
   89706:	4620      	mov	r0, r4
   89708:	4629      	mov	r1, r5
   8970a:	220a      	movs	r2, #10
   8970c:	2300      	movs	r3, #0
   8970e:	f8cd c000 	str.w	ip, [sp]
   89712:	f000 fce1 	bl	8a0d8 <__aeabi_uldivmod>
   89716:	9802      	ldr	r0, [sp, #8]
   89718:	3230      	adds	r2, #48	; 0x30
   8971a:	f800 2901 	strb.w	r2, [r0], #-1
   8971e:	4629      	mov	r1, r5
   89720:	220a      	movs	r2, #10
   89722:	2300      	movs	r3, #0
   89724:	f8dd a008 	ldr.w	sl, [sp, #8]
   89728:	9002      	str	r0, [sp, #8]
   8972a:	4620      	mov	r0, r4
   8972c:	f000 fcd4 	bl	8a0d8 <__aeabi_uldivmod>
   89730:	4604      	mov	r4, r0
   89732:	460d      	mov	r5, r1
   89734:	ea54 0105 	orrs.w	r1, r4, r5
   89738:	f8dd c000 	ldr.w	ip, [sp]
   8973c:	d1e3      	bne.n	89706 <_svfiprintf_r+0x45c>
   8973e:	e01b      	b.n	89778 <_svfiprintf_r+0x4ce>
   89740:	9905      	ldr	r1, [sp, #20]
   89742:	f004 000f 	and.w	r0, r4, #15
   89746:	0924      	lsrs	r4, r4, #4
   89748:	5c0a      	ldrb	r2, [r1, r0]
   8974a:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8974e:	0929      	lsrs	r1, r5, #4
   89750:	4604      	mov	r4, r0
   89752:	460d      	mov	r5, r1
   89754:	469a      	mov	sl, r3
   89756:	f803 2901 	strb.w	r2, [r3], #-1
   8975a:	ea54 0205 	orrs.w	r2, r4, r5
   8975e:	d1ef      	bne.n	89740 <_svfiprintf_r+0x496>
   89760:	e00a      	b.n	89778 <_svfiprintf_r+0x4ce>
   89762:	b938      	cbnz	r0, 89774 <_svfiprintf_r+0x4ca>
   89764:	07f9      	lsls	r1, r7, #31
   89766:	d505      	bpl.n	89774 <_svfiprintf_r+0x4ca>
   89768:	2030      	movs	r0, #48	; 0x30
   8976a:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8976e:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   89772:	e001      	b.n	89778 <_svfiprintf_r+0x4ce>
   89774:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   89778:	ad18      	add	r5, sp, #96	; 0x60
   8977a:	ebca 0405 	rsb	r4, sl, r5
   8977e:	4665      	mov	r5, ip
   89780:	e00f      	b.n	897a2 <_svfiprintf_r+0x4f8>
   89782:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89786:	2b00      	cmp	r3, #0
   89788:	f000 8176 	beq.w	89a78 <_svfiprintf_r+0x7ce>
   8978c:	2500      	movs	r5, #0
   8978e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   89792:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   89796:	2401      	movs	r4, #1
   89798:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8979c:	e001      	b.n	897a2 <_svfiprintf_r+0x4f8>
   8979e:	4664      	mov	r4, ip
   897a0:	4605      	mov	r5, r0
   897a2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   897a6:	42ac      	cmp	r4, r5
   897a8:	bfac      	ite	ge
   897aa:	4621      	movge	r1, r4
   897ac:	4629      	movlt	r1, r5
   897ae:	9102      	str	r1, [sp, #8]
   897b0:	b113      	cbz	r3, 897b8 <_svfiprintf_r+0x50e>
   897b2:	9802      	ldr	r0, [sp, #8]
   897b4:	1c42      	adds	r2, r0, #1
   897b6:	9202      	str	r2, [sp, #8]
   897b8:	f017 0102 	ands.w	r1, r7, #2
   897bc:	9106      	str	r1, [sp, #24]
   897be:	d002      	beq.n	897c6 <_svfiprintf_r+0x51c>
   897c0:	9b02      	ldr	r3, [sp, #8]
   897c2:	1c98      	adds	r0, r3, #2
   897c4:	9002      	str	r0, [sp, #8]
   897c6:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   897ca:	9207      	str	r2, [sp, #28]
   897cc:	d13c      	bne.n	89848 <_svfiprintf_r+0x59e>
   897ce:	9903      	ldr	r1, [sp, #12]
   897d0:	9b02      	ldr	r3, [sp, #8]
   897d2:	1acb      	subs	r3, r1, r3
   897d4:	2b00      	cmp	r3, #0
   897d6:	dd37      	ble.n	89848 <_svfiprintf_r+0x59e>
   897d8:	48a5      	ldr	r0, [pc, #660]	; (89a70 <_svfiprintf_r+0x7c6>)
   897da:	2b10      	cmp	r3, #16
   897dc:	f8c8 0000 	str.w	r0, [r8]
   897e0:	dd1b      	ble.n	8981a <_svfiprintf_r+0x570>
   897e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   897e4:	2110      	movs	r1, #16
   897e6:	980d      	ldr	r0, [sp, #52]	; 0x34
   897e8:	f8c8 1004 	str.w	r1, [r8, #4]
   897ec:	1c51      	adds	r1, r2, #1
   897ee:	3010      	adds	r0, #16
   897f0:	2907      	cmp	r1, #7
   897f2:	900d      	str	r0, [sp, #52]	; 0x34
   897f4:	910c      	str	r1, [sp, #48]	; 0x30
   897f6:	dc02      	bgt.n	897fe <_svfiprintf_r+0x554>
   897f8:	f108 0808 	add.w	r8, r8, #8
   897fc:	e00b      	b.n	89816 <_svfiprintf_r+0x56c>
   897fe:	4658      	mov	r0, fp
   89800:	4649      	mov	r1, r9
   89802:	aa0b      	add	r2, sp, #44	; 0x2c
   89804:	9300      	str	r3, [sp, #0]
   89806:	f7ff fcd3 	bl	891b0 <__ssprint_r>
   8980a:	9b00      	ldr	r3, [sp, #0]
   8980c:	2800      	cmp	r0, #0
   8980e:	f040 813a 	bne.w	89a86 <_svfiprintf_r+0x7dc>
   89812:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89816:	3b10      	subs	r3, #16
   89818:	e7de      	b.n	897d8 <_svfiprintf_r+0x52e>
   8981a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8981c:	f8c8 3004 	str.w	r3, [r8, #4]
   89820:	18d1      	adds	r1, r2, r3
   89822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89824:	910d      	str	r1, [sp, #52]	; 0x34
   89826:	1c58      	adds	r0, r3, #1
   89828:	2807      	cmp	r0, #7
   8982a:	900c      	str	r0, [sp, #48]	; 0x30
   8982c:	dc02      	bgt.n	89834 <_svfiprintf_r+0x58a>
   8982e:	f108 0808 	add.w	r8, r8, #8
   89832:	e009      	b.n	89848 <_svfiprintf_r+0x59e>
   89834:	4658      	mov	r0, fp
   89836:	4649      	mov	r1, r9
   89838:	aa0b      	add	r2, sp, #44	; 0x2c
   8983a:	f7ff fcb9 	bl	891b0 <__ssprint_r>
   8983e:	2800      	cmp	r0, #0
   89840:	f040 8121 	bne.w	89a86 <_svfiprintf_r+0x7dc>
   89844:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89848:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8984c:	b1da      	cbz	r2, 89886 <_svfiprintf_r+0x5dc>
   8984e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   89852:	f8c8 1000 	str.w	r1, [r8]
   89856:	990c      	ldr	r1, [sp, #48]	; 0x30
   89858:	2301      	movs	r3, #1
   8985a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8985c:	f8c8 3004 	str.w	r3, [r8, #4]
   89860:	1c4b      	adds	r3, r1, #1
   89862:	1c42      	adds	r2, r0, #1
   89864:	2b07      	cmp	r3, #7
   89866:	920d      	str	r2, [sp, #52]	; 0x34
   89868:	930c      	str	r3, [sp, #48]	; 0x30
   8986a:	dc02      	bgt.n	89872 <_svfiprintf_r+0x5c8>
   8986c:	f108 0808 	add.w	r8, r8, #8
   89870:	e009      	b.n	89886 <_svfiprintf_r+0x5dc>
   89872:	4658      	mov	r0, fp
   89874:	4649      	mov	r1, r9
   89876:	aa0b      	add	r2, sp, #44	; 0x2c
   89878:	f7ff fc9a 	bl	891b0 <__ssprint_r>
   8987c:	2800      	cmp	r0, #0
   8987e:	f040 8102 	bne.w	89a86 <_svfiprintf_r+0x7dc>
   89882:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89886:	9806      	ldr	r0, [sp, #24]
   89888:	b1d0      	cbz	r0, 898c0 <_svfiprintf_r+0x616>
   8988a:	aa0a      	add	r2, sp, #40	; 0x28
   8988c:	f8c8 2000 	str.w	r2, [r8]
   89890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89892:	2102      	movs	r1, #2
   89894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89896:	f8c8 1004 	str.w	r1, [r8, #4]
   8989a:	1c51      	adds	r1, r2, #1
   8989c:	1c98      	adds	r0, r3, #2
   8989e:	2907      	cmp	r1, #7
   898a0:	900d      	str	r0, [sp, #52]	; 0x34
   898a2:	910c      	str	r1, [sp, #48]	; 0x30
   898a4:	dc02      	bgt.n	898ac <_svfiprintf_r+0x602>
   898a6:	f108 0808 	add.w	r8, r8, #8
   898aa:	e009      	b.n	898c0 <_svfiprintf_r+0x616>
   898ac:	4658      	mov	r0, fp
   898ae:	4649      	mov	r1, r9
   898b0:	aa0b      	add	r2, sp, #44	; 0x2c
   898b2:	f7ff fc7d 	bl	891b0 <__ssprint_r>
   898b6:	2800      	cmp	r0, #0
   898b8:	f040 80e5 	bne.w	89a86 <_svfiprintf_r+0x7dc>
   898bc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   898c0:	9b07      	ldr	r3, [sp, #28]
   898c2:	2b80      	cmp	r3, #128	; 0x80
   898c4:	d13c      	bne.n	89940 <_svfiprintf_r+0x696>
   898c6:	9803      	ldr	r0, [sp, #12]
   898c8:	9a02      	ldr	r2, [sp, #8]
   898ca:	1a83      	subs	r3, r0, r2
   898cc:	2b00      	cmp	r3, #0
   898ce:	dd37      	ble.n	89940 <_svfiprintf_r+0x696>
   898d0:	4968      	ldr	r1, [pc, #416]	; (89a74 <_svfiprintf_r+0x7ca>)
   898d2:	2b10      	cmp	r3, #16
   898d4:	f8c8 1000 	str.w	r1, [r8]
   898d8:	dd1b      	ble.n	89912 <_svfiprintf_r+0x668>
   898da:	980c      	ldr	r0, [sp, #48]	; 0x30
   898dc:	2210      	movs	r2, #16
   898de:	990d      	ldr	r1, [sp, #52]	; 0x34
   898e0:	f8c8 2004 	str.w	r2, [r8, #4]
   898e4:	1c42      	adds	r2, r0, #1
   898e6:	3110      	adds	r1, #16
   898e8:	2a07      	cmp	r2, #7
   898ea:	910d      	str	r1, [sp, #52]	; 0x34
   898ec:	920c      	str	r2, [sp, #48]	; 0x30
   898ee:	dc02      	bgt.n	898f6 <_svfiprintf_r+0x64c>
   898f0:	f108 0808 	add.w	r8, r8, #8
   898f4:	e00b      	b.n	8990e <_svfiprintf_r+0x664>
   898f6:	4658      	mov	r0, fp
   898f8:	4649      	mov	r1, r9
   898fa:	aa0b      	add	r2, sp, #44	; 0x2c
   898fc:	9300      	str	r3, [sp, #0]
   898fe:	f7ff fc57 	bl	891b0 <__ssprint_r>
   89902:	9b00      	ldr	r3, [sp, #0]
   89904:	2800      	cmp	r0, #0
   89906:	f040 80be 	bne.w	89a86 <_svfiprintf_r+0x7dc>
   8990a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8990e:	3b10      	subs	r3, #16
   89910:	e7de      	b.n	898d0 <_svfiprintf_r+0x626>
   89912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89914:	980d      	ldr	r0, [sp, #52]	; 0x34
   89916:	1c51      	adds	r1, r2, #1
   89918:	f8c8 3004 	str.w	r3, [r8, #4]
   8991c:	2907      	cmp	r1, #7
   8991e:	4403      	add	r3, r0
   89920:	930d      	str	r3, [sp, #52]	; 0x34
   89922:	910c      	str	r1, [sp, #48]	; 0x30
   89924:	dc02      	bgt.n	8992c <_svfiprintf_r+0x682>
   89926:	f108 0808 	add.w	r8, r8, #8
   8992a:	e009      	b.n	89940 <_svfiprintf_r+0x696>
   8992c:	4658      	mov	r0, fp
   8992e:	4649      	mov	r1, r9
   89930:	aa0b      	add	r2, sp, #44	; 0x2c
   89932:	f7ff fc3d 	bl	891b0 <__ssprint_r>
   89936:	2800      	cmp	r0, #0
   89938:	f040 80a5 	bne.w	89a86 <_svfiprintf_r+0x7dc>
   8993c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89940:	1b2d      	subs	r5, r5, r4
   89942:	2d00      	cmp	r5, #0
   89944:	dd34      	ble.n	899b0 <_svfiprintf_r+0x706>
   89946:	484b      	ldr	r0, [pc, #300]	; (89a74 <_svfiprintf_r+0x7ca>)
   89948:	2d10      	cmp	r5, #16
   8994a:	f8c8 0000 	str.w	r0, [r8]
   8994e:	dd19      	ble.n	89984 <_svfiprintf_r+0x6da>
   89950:	980c      	ldr	r0, [sp, #48]	; 0x30
   89952:	990d      	ldr	r1, [sp, #52]	; 0x34
   89954:	1c43      	adds	r3, r0, #1
   89956:	2210      	movs	r2, #16
   89958:	3110      	adds	r1, #16
   8995a:	2b07      	cmp	r3, #7
   8995c:	f8c8 2004 	str.w	r2, [r8, #4]
   89960:	910d      	str	r1, [sp, #52]	; 0x34
   89962:	930c      	str	r3, [sp, #48]	; 0x30
   89964:	dc02      	bgt.n	8996c <_svfiprintf_r+0x6c2>
   89966:	f108 0808 	add.w	r8, r8, #8
   8996a:	e009      	b.n	89980 <_svfiprintf_r+0x6d6>
   8996c:	4658      	mov	r0, fp
   8996e:	4649      	mov	r1, r9
   89970:	aa0b      	add	r2, sp, #44	; 0x2c
   89972:	f7ff fc1d 	bl	891b0 <__ssprint_r>
   89976:	2800      	cmp	r0, #0
   89978:	f040 8085 	bne.w	89a86 <_svfiprintf_r+0x7dc>
   8997c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89980:	3d10      	subs	r5, #16
   89982:	e7e0      	b.n	89946 <_svfiprintf_r+0x69c>
   89984:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89988:	1c51      	adds	r1, r2, #1
   8998a:	f8c8 5004 	str.w	r5, [r8, #4]
   8998e:	2907      	cmp	r1, #7
   89990:	441d      	add	r5, r3
   89992:	950d      	str	r5, [sp, #52]	; 0x34
   89994:	910c      	str	r1, [sp, #48]	; 0x30
   89996:	dc02      	bgt.n	8999e <_svfiprintf_r+0x6f4>
   89998:	f108 0808 	add.w	r8, r8, #8
   8999c:	e008      	b.n	899b0 <_svfiprintf_r+0x706>
   8999e:	4658      	mov	r0, fp
   899a0:	4649      	mov	r1, r9
   899a2:	aa0b      	add	r2, sp, #44	; 0x2c
   899a4:	f7ff fc04 	bl	891b0 <__ssprint_r>
   899a8:	2800      	cmp	r0, #0
   899aa:	d16c      	bne.n	89a86 <_svfiprintf_r+0x7dc>
   899ac:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   899b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   899b2:	980d      	ldr	r0, [sp, #52]	; 0x34
   899b4:	1c5a      	adds	r2, r3, #1
   899b6:	f8c8 4004 	str.w	r4, [r8, #4]
   899ba:	2a07      	cmp	r2, #7
   899bc:	4404      	add	r4, r0
   899be:	f8c8 a000 	str.w	sl, [r8]
   899c2:	940d      	str	r4, [sp, #52]	; 0x34
   899c4:	920c      	str	r2, [sp, #48]	; 0x30
   899c6:	dc02      	bgt.n	899ce <_svfiprintf_r+0x724>
   899c8:	f108 0308 	add.w	r3, r8, #8
   899cc:	e007      	b.n	899de <_svfiprintf_r+0x734>
   899ce:	4658      	mov	r0, fp
   899d0:	4649      	mov	r1, r9
   899d2:	aa0b      	add	r2, sp, #44	; 0x2c
   899d4:	f7ff fbec 	bl	891b0 <__ssprint_r>
   899d8:	2800      	cmp	r0, #0
   899da:	d154      	bne.n	89a86 <_svfiprintf_r+0x7dc>
   899dc:	ab18      	add	r3, sp, #96	; 0x60
   899de:	077a      	lsls	r2, r7, #29
   899e0:	d40b      	bmi.n	899fa <_svfiprintf_r+0x750>
   899e2:	9804      	ldr	r0, [sp, #16]
   899e4:	9b02      	ldr	r3, [sp, #8]
   899e6:	9a03      	ldr	r2, [sp, #12]
   899e8:	990d      	ldr	r1, [sp, #52]	; 0x34
   899ea:	4293      	cmp	r3, r2
   899ec:	bfac      	ite	ge
   899ee:	18c0      	addge	r0, r0, r3
   899f0:	1880      	addlt	r0, r0, r2
   899f2:	9004      	str	r0, [sp, #16]
   899f4:	2900      	cmp	r1, #0
   899f6:	d036      	beq.n	89a66 <_svfiprintf_r+0x7bc>
   899f8:	e02f      	b.n	89a5a <_svfiprintf_r+0x7b0>
   899fa:	9c03      	ldr	r4, [sp, #12]
   899fc:	9902      	ldr	r1, [sp, #8]
   899fe:	1a64      	subs	r4, r4, r1
   89a00:	2c00      	cmp	r4, #0
   89a02:	ddee      	ble.n	899e2 <_svfiprintf_r+0x738>
   89a04:	481a      	ldr	r0, [pc, #104]	; (89a70 <_svfiprintf_r+0x7c6>)
   89a06:	2c10      	cmp	r4, #16
   89a08:	6018      	str	r0, [r3, #0]
   89a0a:	dd15      	ble.n	89a38 <_svfiprintf_r+0x78e>
   89a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
   89a0e:	2010      	movs	r0, #16
   89a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89a12:	6058      	str	r0, [r3, #4]
   89a14:	1c48      	adds	r0, r1, #1
   89a16:	3210      	adds	r2, #16
   89a18:	2807      	cmp	r0, #7
   89a1a:	920d      	str	r2, [sp, #52]	; 0x34
   89a1c:	900c      	str	r0, [sp, #48]	; 0x30
   89a1e:	dc01      	bgt.n	89a24 <_svfiprintf_r+0x77a>
   89a20:	3308      	adds	r3, #8
   89a22:	e007      	b.n	89a34 <_svfiprintf_r+0x78a>
   89a24:	4658      	mov	r0, fp
   89a26:	4649      	mov	r1, r9
   89a28:	aa0b      	add	r2, sp, #44	; 0x2c
   89a2a:	f7ff fbc1 	bl	891b0 <__ssprint_r>
   89a2e:	2800      	cmp	r0, #0
   89a30:	d129      	bne.n	89a86 <_svfiprintf_r+0x7dc>
   89a32:	ab18      	add	r3, sp, #96	; 0x60
   89a34:	3c10      	subs	r4, #16
   89a36:	e7e5      	b.n	89a04 <_svfiprintf_r+0x75a>
   89a38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89a3a:	605c      	str	r4, [r3, #4]
   89a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89a3e:	1c51      	adds	r1, r2, #1
   89a40:	191c      	adds	r4, r3, r4
   89a42:	2907      	cmp	r1, #7
   89a44:	940d      	str	r4, [sp, #52]	; 0x34
   89a46:	910c      	str	r1, [sp, #48]	; 0x30
   89a48:	ddcb      	ble.n	899e2 <_svfiprintf_r+0x738>
   89a4a:	4658      	mov	r0, fp
   89a4c:	4649      	mov	r1, r9
   89a4e:	aa0b      	add	r2, sp, #44	; 0x2c
   89a50:	f7ff fbae 	bl	891b0 <__ssprint_r>
   89a54:	2800      	cmp	r0, #0
   89a56:	d0c4      	beq.n	899e2 <_svfiprintf_r+0x738>
   89a58:	e015      	b.n	89a86 <_svfiprintf_r+0x7dc>
   89a5a:	4658      	mov	r0, fp
   89a5c:	4649      	mov	r1, r9
   89a5e:	aa0b      	add	r2, sp, #44	; 0x2c
   89a60:	f7ff fba6 	bl	891b0 <__ssprint_r>
   89a64:	b978      	cbnz	r0, 89a86 <_svfiprintf_r+0x7dc>
   89a66:	2500      	movs	r5, #0
   89a68:	950c      	str	r5, [sp, #48]	; 0x30
   89a6a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89a6e:	e445      	b.n	892fc <_svfiprintf_r+0x52>
   89a70:	0008aa50 	.word	0x0008aa50
   89a74:	0008aa60 	.word	0x0008aa60
   89a78:	980d      	ldr	r0, [sp, #52]	; 0x34
   89a7a:	b120      	cbz	r0, 89a86 <_svfiprintf_r+0x7dc>
   89a7c:	4658      	mov	r0, fp
   89a7e:	4649      	mov	r1, r9
   89a80:	aa0b      	add	r2, sp, #44	; 0x2c
   89a82:	f7ff fb95 	bl	891b0 <__ssprint_r>
   89a86:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   89a8a:	9b04      	ldr	r3, [sp, #16]
   89a8c:	f002 0140 	and.w	r1, r2, #64	; 0x40
   89a90:	b208      	sxth	r0, r1
   89a92:	2800      	cmp	r0, #0
   89a94:	bf18      	it	ne
   89a96:	f04f 33ff 	movne.w	r3, #4294967295
   89a9a:	4618      	mov	r0, r3
   89a9c:	b029      	add	sp, #164	; 0xa4
   89a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89aa2:	bf00      	nop

00089aa4 <__submore>:
   89aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89aa8:	460c      	mov	r4, r1
   89aaa:	6b09      	ldr	r1, [r1, #48]	; 0x30
   89aac:	f104 0340 	add.w	r3, r4, #64	; 0x40
   89ab0:	4299      	cmp	r1, r3
   89ab2:	d11c      	bne.n	89aee <__submore+0x4a>
   89ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   89ab8:	f7fd ffae 	bl	87a18 <_malloc_r>
   89abc:	b918      	cbnz	r0, 89ac6 <__submore+0x22>
   89abe:	f04f 30ff 	mov.w	r0, #4294967295
   89ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89ac6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   89aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   89ace:	6320      	str	r0, [r4, #48]	; 0x30
   89ad0:	6361      	str	r1, [r4, #52]	; 0x34
   89ad2:	f880 23ff 	strb.w	r2, [r0, #1023]	; 0x3ff
   89ad6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   89ada:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   89ade:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   89ae2:	f880 13fd 	strb.w	r1, [r0, #1021]	; 0x3fd
   89ae6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   89aea:	6020      	str	r0, [r4, #0]
   89aec:	e012      	b.n	89b14 <__submore+0x70>
   89aee:	6b66      	ldr	r6, [r4, #52]	; 0x34
   89af0:	0077      	lsls	r7, r6, #1
   89af2:	463a      	mov	r2, r7
   89af4:	f7fe fe0c 	bl	88710 <_realloc_r>
   89af8:	4605      	mov	r5, r0
   89afa:	2800      	cmp	r0, #0
   89afc:	d0df      	beq.n	89abe <__submore+0x1a>
   89afe:	eb00 0806 	add.w	r8, r0, r6
   89b02:	4640      	mov	r0, r8
   89b04:	4629      	mov	r1, r5
   89b06:	4632      	mov	r2, r6
   89b08:	f7fa fa5e 	bl	83fc8 <memcpy>
   89b0c:	f8c4 8000 	str.w	r8, [r4]
   89b10:	6325      	str	r5, [r4, #48]	; 0x30
   89b12:	6367      	str	r7, [r4, #52]	; 0x34
   89b14:	2000      	movs	r0, #0
   89b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00089b1a <_ungetc_r>:
   89b1a:	1c4b      	adds	r3, r1, #1
   89b1c:	b570      	push	{r4, r5, r6, lr}
   89b1e:	4606      	mov	r6, r0
   89b20:	460d      	mov	r5, r1
   89b22:	4614      	mov	r4, r2
   89b24:	d102      	bne.n	89b2c <_ungetc_r+0x12>
   89b26:	f04f 35ff 	mov.w	r5, #4294967295
   89b2a:	e062      	b.n	89bf2 <_ungetc_r+0xd8>
   89b2c:	b118      	cbz	r0, 89b36 <_ungetc_r+0x1c>
   89b2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89b30:	b90b      	cbnz	r3, 89b36 <_ungetc_r+0x1c>
   89b32:	f7fc ff77 	bl	86a24 <__sinit>
   89b36:	89a0      	ldrh	r0, [r4, #12]
   89b38:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   89b3c:	b211      	sxth	r1, r2
   89b3e:	b931      	cbnz	r1, 89b4e <_ungetc_r+0x34>
   89b40:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   89b44:	6e60      	ldr	r0, [r4, #100]	; 0x64
   89b46:	81a3      	strh	r3, [r4, #12]
   89b48:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   89b4c:	6662      	str	r2, [r4, #100]	; 0x64
   89b4e:	89a1      	ldrh	r1, [r4, #12]
   89b50:	f001 0004 	and.w	r0, r1, #4
   89b54:	f021 0320 	bic.w	r3, r1, #32
   89b58:	b202      	sxth	r2, r0
   89b5a:	81a3      	strh	r3, [r4, #12]
   89b5c:	b9c2      	cbnz	r2, 89b90 <_ungetc_r+0x76>
   89b5e:	f001 0310 	and.w	r3, r1, #16
   89b62:	b218      	sxth	r0, r3
   89b64:	2800      	cmp	r0, #0
   89b66:	d0de      	beq.n	89b26 <_ungetc_r+0xc>
   89b68:	f001 0108 	and.w	r1, r1, #8
   89b6c:	b20a      	sxth	r2, r1
   89b6e:	b15a      	cbz	r2, 89b88 <_ungetc_r+0x6e>
   89b70:	4630      	mov	r0, r6
   89b72:	4621      	mov	r1, r4
   89b74:	f7fc fe64 	bl	86840 <_fflush_r>
   89b78:	2800      	cmp	r0, #0
   89b7a:	d1d4      	bne.n	89b26 <_ungetc_r+0xc>
   89b7c:	89a3      	ldrh	r3, [r4, #12]
   89b7e:	60a0      	str	r0, [r4, #8]
   89b80:	f023 0108 	bic.w	r1, r3, #8
   89b84:	81a1      	strh	r1, [r4, #12]
   89b86:	61a0      	str	r0, [r4, #24]
   89b88:	89a0      	ldrh	r0, [r4, #12]
   89b8a:	f040 0204 	orr.w	r2, r0, #4
   89b8e:	81a2      	strh	r2, [r4, #12]
   89b90:	6b23      	ldr	r3, [r4, #48]	; 0x30
   89b92:	b2ed      	uxtb	r5, r5
   89b94:	b183      	cbz	r3, 89bb8 <_ungetc_r+0x9e>
   89b96:	6862      	ldr	r2, [r4, #4]
   89b98:	6b63      	ldr	r3, [r4, #52]	; 0x34
   89b9a:	429a      	cmp	r2, r3
   89b9c:	da05      	bge.n	89baa <_ungetc_r+0x90>
   89b9e:	6821      	ldr	r1, [r4, #0]
   89ba0:	1e48      	subs	r0, r1, #1
   89ba2:	6020      	str	r0, [r4, #0]
   89ba4:	f801 5c01 	strb.w	r5, [r1, #-1]
   89ba8:	e011      	b.n	89bce <_ungetc_r+0xb4>
   89baa:	4630      	mov	r0, r6
   89bac:	4621      	mov	r1, r4
   89bae:	f7ff ff79 	bl	89aa4 <__submore>
   89bb2:	2800      	cmp	r0, #0
   89bb4:	d0f3      	beq.n	89b9e <_ungetc_r+0x84>
   89bb6:	e7b6      	b.n	89b26 <_ungetc_r+0xc>
   89bb8:	6921      	ldr	r1, [r4, #16]
   89bba:	b159      	cbz	r1, 89bd4 <_ungetc_r+0xba>
   89bbc:	6820      	ldr	r0, [r4, #0]
   89bbe:	4288      	cmp	r0, r1
   89bc0:	d908      	bls.n	89bd4 <_ungetc_r+0xba>
   89bc2:	f810 2c01 	ldrb.w	r2, [r0, #-1]
   89bc6:	42aa      	cmp	r2, r5
   89bc8:	d104      	bne.n	89bd4 <_ungetc_r+0xba>
   89bca:	3801      	subs	r0, #1
   89bcc:	6020      	str	r0, [r4, #0]
   89bce:	6862      	ldr	r2, [r4, #4]
   89bd0:	1c51      	adds	r1, r2, #1
   89bd2:	e00d      	b.n	89bf0 <_ungetc_r+0xd6>
   89bd4:	6863      	ldr	r3, [r4, #4]
   89bd6:	6821      	ldr	r1, [r4, #0]
   89bd8:	63e3      	str	r3, [r4, #60]	; 0x3c
   89bda:	4623      	mov	r3, r4
   89bdc:	f104 0040 	add.w	r0, r4, #64	; 0x40
   89be0:	2203      	movs	r2, #3
   89be2:	f803 5f42 	strb.w	r5, [r3, #66]!
   89be6:	63a1      	str	r1, [r4, #56]	; 0x38
   89be8:	6320      	str	r0, [r4, #48]	; 0x30
   89bea:	6362      	str	r2, [r4, #52]	; 0x34
   89bec:	6023      	str	r3, [r4, #0]
   89bee:	2101      	movs	r1, #1
   89bf0:	6061      	str	r1, [r4, #4]
   89bf2:	4628      	mov	r0, r5
   89bf4:	bd70      	pop	{r4, r5, r6, pc}

00089bf6 <ungetc>:
   89bf6:	460a      	mov	r2, r1
   89bf8:	4902      	ldr	r1, [pc, #8]	; (89c04 <ungetc+0xe>)
   89bfa:	4603      	mov	r3, r0
   89bfc:	6808      	ldr	r0, [r1, #0]
   89bfe:	4619      	mov	r1, r3
   89c00:	f7ff bf8b 	b.w	89b1a <_ungetc_r>
   89c04:	20070010 	.word	0x20070010

00089c08 <__swbuf_r>:
   89c08:	b570      	push	{r4, r5, r6, lr}
   89c0a:	460d      	mov	r5, r1
   89c0c:	4614      	mov	r4, r2
   89c0e:	4606      	mov	r6, r0
   89c10:	b118      	cbz	r0, 89c1a <__swbuf_r+0x12>
   89c12:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89c14:	b90b      	cbnz	r3, 89c1a <__swbuf_r+0x12>
   89c16:	f7fc ff05 	bl	86a24 <__sinit>
   89c1a:	89a1      	ldrh	r1, [r4, #12]
   89c1c:	69a0      	ldr	r0, [r4, #24]
   89c1e:	f001 0208 	and.w	r2, r1, #8
   89c22:	b213      	sxth	r3, r2
   89c24:	60a0      	str	r0, [r4, #8]
   89c26:	b10b      	cbz	r3, 89c2c <__swbuf_r+0x24>
   89c28:	6920      	ldr	r0, [r4, #16]
   89c2a:	b958      	cbnz	r0, 89c44 <__swbuf_r+0x3c>
   89c2c:	4630      	mov	r0, r6
   89c2e:	4621      	mov	r1, r4
   89c30:	f7fc fd52 	bl	866d8 <__swsetup_r>
   89c34:	b130      	cbz	r0, 89c44 <__swbuf_r+0x3c>
   89c36:	89a5      	ldrh	r5, [r4, #12]
   89c38:	2009      	movs	r0, #9
   89c3a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   89c3e:	81a1      	strh	r1, [r4, #12]
   89c40:	6030      	str	r0, [r6, #0]
   89c42:	e017      	b.n	89c74 <__swbuf_r+0x6c>
   89c44:	89a1      	ldrh	r1, [r4, #12]
   89c46:	b2ed      	uxtb	r5, r5
   89c48:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   89c4c:	b213      	sxth	r3, r2
   89c4e:	b933      	cbnz	r3, 89c5e <__swbuf_r+0x56>
   89c50:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   89c54:	6e61      	ldr	r1, [r4, #100]	; 0x64
   89c56:	81a0      	strh	r0, [r4, #12]
   89c58:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   89c5c:	6662      	str	r2, [r4, #100]	; 0x64
   89c5e:	6820      	ldr	r0, [r4, #0]
   89c60:	6923      	ldr	r3, [r4, #16]
   89c62:	6961      	ldr	r1, [r4, #20]
   89c64:	1ac0      	subs	r0, r0, r3
   89c66:	4288      	cmp	r0, r1
   89c68:	db07      	blt.n	89c7a <__swbuf_r+0x72>
   89c6a:	4630      	mov	r0, r6
   89c6c:	4621      	mov	r1, r4
   89c6e:	f7fc fde7 	bl	86840 <_fflush_r>
   89c72:	b110      	cbz	r0, 89c7a <__swbuf_r+0x72>
   89c74:	f04f 35ff 	mov.w	r5, #4294967295
   89c78:	e015      	b.n	89ca6 <__swbuf_r+0x9e>
   89c7a:	68a2      	ldr	r2, [r4, #8]
   89c7c:	6821      	ldr	r1, [r4, #0]
   89c7e:	1e53      	subs	r3, r2, #1
   89c80:	60a3      	str	r3, [r4, #8]
   89c82:	f801 5b01 	strb.w	r5, [r1], #1
   89c86:	6962      	ldr	r2, [r4, #20]
   89c88:	3001      	adds	r0, #1
   89c8a:	4290      	cmp	r0, r2
   89c8c:	6021      	str	r1, [r4, #0]
   89c8e:	d004      	beq.n	89c9a <__swbuf_r+0x92>
   89c90:	89a3      	ldrh	r3, [r4, #12]
   89c92:	07db      	lsls	r3, r3, #31
   89c94:	d507      	bpl.n	89ca6 <__swbuf_r+0x9e>
   89c96:	2d0a      	cmp	r5, #10
   89c98:	d105      	bne.n	89ca6 <__swbuf_r+0x9e>
   89c9a:	4630      	mov	r0, r6
   89c9c:	4621      	mov	r1, r4
   89c9e:	f7fc fdcf 	bl	86840 <_fflush_r>
   89ca2:	2800      	cmp	r0, #0
   89ca4:	d1e6      	bne.n	89c74 <__swbuf_r+0x6c>
   89ca6:	4628      	mov	r0, r5
   89ca8:	bd70      	pop	{r4, r5, r6, pc}

00089caa <__swbuf>:
   89caa:	460a      	mov	r2, r1
   89cac:	4902      	ldr	r1, [pc, #8]	; (89cb8 <__swbuf+0xe>)
   89cae:	4603      	mov	r3, r0
   89cb0:	6808      	ldr	r0, [r1, #0]
   89cb2:	4619      	mov	r1, r3
   89cb4:	f7ff bfa8 	b.w	89c08 <__swbuf_r>
   89cb8:	20070010 	.word	0x20070010

00089cbc <_wcrtomb_r>:
   89cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89cc0:	461d      	mov	r5, r3
   89cc2:	4b10      	ldr	r3, [pc, #64]	; (89d04 <_wcrtomb_r+0x48>)
   89cc4:	b086      	sub	sp, #24
   89cc6:	4604      	mov	r4, r0
   89cc8:	4690      	mov	r8, r2
   89cca:	460e      	mov	r6, r1
   89ccc:	681f      	ldr	r7, [r3, #0]
   89cce:	b939      	cbnz	r1, 89ce0 <_wcrtomb_r+0x24>
   89cd0:	f7fd fe04 	bl	878dc <__locale_charset>
   89cd4:	9500      	str	r5, [sp, #0]
   89cd6:	4603      	mov	r3, r0
   89cd8:	a903      	add	r1, sp, #12
   89cda:	4620      	mov	r0, r4
   89cdc:	4632      	mov	r2, r6
   89cde:	e006      	b.n	89cee <_wcrtomb_r+0x32>
   89ce0:	f7fd fdfc 	bl	878dc <__locale_charset>
   89ce4:	9500      	str	r5, [sp, #0]
   89ce6:	4603      	mov	r3, r0
   89ce8:	4631      	mov	r1, r6
   89cea:	4620      	mov	r0, r4
   89cec:	4642      	mov	r2, r8
   89cee:	47b8      	blx	r7
   89cf0:	1c43      	adds	r3, r0, #1
   89cf2:	d103      	bne.n	89cfc <_wcrtomb_r+0x40>
   89cf4:	2100      	movs	r1, #0
   89cf6:	228a      	movs	r2, #138	; 0x8a
   89cf8:	6029      	str	r1, [r5, #0]
   89cfa:	6022      	str	r2, [r4, #0]
   89cfc:	b006      	add	sp, #24
   89cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89d02:	bf00      	nop
   89d04:	200708fc 	.word	0x200708fc

00089d08 <wcrtomb>:
   89d08:	b530      	push	{r4, r5, lr}
   89d0a:	4613      	mov	r3, r2
   89d0c:	4a04      	ldr	r2, [pc, #16]	; (89d20 <wcrtomb+0x18>)
   89d0e:	4605      	mov	r5, r0
   89d10:	460c      	mov	r4, r1
   89d12:	6810      	ldr	r0, [r2, #0]
   89d14:	4629      	mov	r1, r5
   89d16:	4622      	mov	r2, r4
   89d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   89d1c:	f7ff bfce 	b.w	89cbc <_wcrtomb_r>
   89d20:	20070010 	.word	0x20070010

00089d24 <__ascii_wctomb>:
   89d24:	b149      	cbz	r1, 89d3a <__ascii_wctomb+0x16>
   89d26:	2aff      	cmp	r2, #255	; 0xff
   89d28:	d904      	bls.n	89d34 <__ascii_wctomb+0x10>
   89d2a:	238a      	movs	r3, #138	; 0x8a
   89d2c:	6003      	str	r3, [r0, #0]
   89d2e:	f04f 30ff 	mov.w	r0, #4294967295
   89d32:	4770      	bx	lr
   89d34:	700a      	strb	r2, [r1, #0]
   89d36:	2001      	movs	r0, #1
   89d38:	4770      	bx	lr
   89d3a:	4608      	mov	r0, r1
   89d3c:	4770      	bx	lr

00089d3e <_wctomb_r>:
   89d3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   89d42:	4698      	mov	r8, r3
   89d44:	4b07      	ldr	r3, [pc, #28]	; (89d64 <_wctomb_r+0x26>)
   89d46:	4605      	mov	r5, r0
   89d48:	460f      	mov	r7, r1
   89d4a:	4616      	mov	r6, r2
   89d4c:	681c      	ldr	r4, [r3, #0]
   89d4e:	f7fd fdc5 	bl	878dc <__locale_charset>
   89d52:	f8cd 8000 	str.w	r8, [sp]
   89d56:	4603      	mov	r3, r0
   89d58:	4639      	mov	r1, r7
   89d5a:	4628      	mov	r0, r5
   89d5c:	4632      	mov	r2, r6
   89d5e:	47a0      	blx	r4
   89d60:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   89d64:	200708fc 	.word	0x200708fc

00089d68 <_write_r>:
   89d68:	b538      	push	{r3, r4, r5, lr}
   89d6a:	4c07      	ldr	r4, [pc, #28]	; (89d88 <_write_r+0x20>)
   89d6c:	4605      	mov	r5, r0
   89d6e:	2000      	movs	r0, #0
   89d70:	6020      	str	r0, [r4, #0]
   89d72:	4608      	mov	r0, r1
   89d74:	4611      	mov	r1, r2
   89d76:	461a      	mov	r2, r3
   89d78:	f7f6 fdba 	bl	808f0 <_write>
   89d7c:	1c43      	adds	r3, r0, #1
   89d7e:	d102      	bne.n	89d86 <_write_r+0x1e>
   89d80:	6823      	ldr	r3, [r4, #0]
   89d82:	b103      	cbz	r3, 89d86 <_write_r+0x1e>
   89d84:	602b      	str	r3, [r5, #0]
   89d86:	bd38      	pop	{r3, r4, r5, pc}
   89d88:	2007ac78 	.word	0x2007ac78

00089d8c <_calloc_r>:
   89d8c:	b510      	push	{r4, lr}
   89d8e:	4351      	muls	r1, r2
   89d90:	f7fd fe42 	bl	87a18 <_malloc_r>
   89d94:	4604      	mov	r4, r0
   89d96:	b320      	cbz	r0, 89de2 <_calloc_r+0x56>
   89d98:	f850 2c04 	ldr.w	r2, [r0, #-4]
   89d9c:	f022 0103 	bic.w	r1, r2, #3
   89da0:	1f0a      	subs	r2, r1, #4
   89da2:	2a24      	cmp	r2, #36	; 0x24
   89da4:	d81a      	bhi.n	89ddc <_calloc_r+0x50>
   89da6:	2a13      	cmp	r2, #19
   89da8:	d912      	bls.n	89dd0 <_calloc_r+0x44>
   89daa:	2300      	movs	r3, #0
   89dac:	2a1b      	cmp	r2, #27
   89dae:	6003      	str	r3, [r0, #0]
   89db0:	6043      	str	r3, [r0, #4]
   89db2:	d802      	bhi.n	89dba <_calloc_r+0x2e>
   89db4:	f100 0308 	add.w	r3, r0, #8
   89db8:	e00b      	b.n	89dd2 <_calloc_r+0x46>
   89dba:	2a24      	cmp	r2, #36	; 0x24
   89dbc:	6083      	str	r3, [r0, #8]
   89dbe:	60c3      	str	r3, [r0, #12]
   89dc0:	bf05      	ittet	eq
   89dc2:	6103      	streq	r3, [r0, #16]
   89dc4:	6143      	streq	r3, [r0, #20]
   89dc6:	f100 0310 	addne.w	r3, r0, #16
   89dca:	f100 0318 	addeq.w	r3, r0, #24
   89dce:	e000      	b.n	89dd2 <_calloc_r+0x46>
   89dd0:	4603      	mov	r3, r0
   89dd2:	2000      	movs	r0, #0
   89dd4:	6018      	str	r0, [r3, #0]
   89dd6:	6058      	str	r0, [r3, #4]
   89dd8:	6098      	str	r0, [r3, #8]
   89dda:	e002      	b.n	89de2 <_calloc_r+0x56>
   89ddc:	2100      	movs	r1, #0
   89dde:	f7fa f8fc 	bl	83fda <memset>
   89de2:	4620      	mov	r0, r4
   89de4:	bd10      	pop	{r4, pc}
	...

00089de8 <_close_r>:
   89de8:	b538      	push	{r3, r4, r5, lr}
   89dea:	4c06      	ldr	r4, [pc, #24]	; (89e04 <_close_r+0x1c>)
   89dec:	2300      	movs	r3, #0
   89dee:	4605      	mov	r5, r0
   89df0:	4608      	mov	r0, r1
   89df2:	6023      	str	r3, [r4, #0]
   89df4:	f7f7 fd24 	bl	81840 <_close>
   89df8:	1c43      	adds	r3, r0, #1
   89dfa:	d102      	bne.n	89e02 <_close_r+0x1a>
   89dfc:	6821      	ldr	r1, [r4, #0]
   89dfe:	b101      	cbz	r1, 89e02 <_close_r+0x1a>
   89e00:	6029      	str	r1, [r5, #0]
   89e02:	bd38      	pop	{r3, r4, r5, pc}
   89e04:	2007ac78 	.word	0x2007ac78

00089e08 <_fclose_r>:
   89e08:	b570      	push	{r4, r5, r6, lr}
   89e0a:	4605      	mov	r5, r0
   89e0c:	460c      	mov	r4, r1
   89e0e:	2900      	cmp	r1, #0
   89e10:	d039      	beq.n	89e86 <_fclose_r+0x7e>
   89e12:	f7fc fe6b 	bl	86aec <__sfp_lock_acquire>
   89e16:	b125      	cbz	r5, 89e22 <_fclose_r+0x1a>
   89e18:	6bab      	ldr	r3, [r5, #56]	; 0x38
   89e1a:	b913      	cbnz	r3, 89e22 <_fclose_r+0x1a>
   89e1c:	4628      	mov	r0, r5
   89e1e:	f7fc fe01 	bl	86a24 <__sinit>
   89e22:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   89e26:	b35e      	cbz	r6, 89e80 <_fclose_r+0x78>
   89e28:	4628      	mov	r0, r5
   89e2a:	4621      	mov	r1, r4
   89e2c:	f7fc fd08 	bl	86840 <_fflush_r>
   89e30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   89e32:	4606      	mov	r6, r0
   89e34:	b13a      	cbz	r2, 89e46 <_fclose_r+0x3e>
   89e36:	4628      	mov	r0, r5
   89e38:	69e1      	ldr	r1, [r4, #28]
   89e3a:	4790      	blx	r2
   89e3c:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   89e40:	bf28      	it	cs
   89e42:	f04f 36ff 	movcs.w	r6, #4294967295
   89e46:	89a0      	ldrh	r0, [r4, #12]
   89e48:	f000 0180 	and.w	r1, r0, #128	; 0x80
   89e4c:	b20b      	sxth	r3, r1
   89e4e:	b11b      	cbz	r3, 89e58 <_fclose_r+0x50>
   89e50:	4628      	mov	r0, r5
   89e52:	6921      	ldr	r1, [r4, #16]
   89e54:	f7fc ff82 	bl	86d5c <_free_r>
   89e58:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89e5a:	b141      	cbz	r1, 89e6e <_fclose_r+0x66>
   89e5c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   89e60:	4291      	cmp	r1, r2
   89e62:	d002      	beq.n	89e6a <_fclose_r+0x62>
   89e64:	4628      	mov	r0, r5
   89e66:	f7fc ff79 	bl	86d5c <_free_r>
   89e6a:	2000      	movs	r0, #0
   89e6c:	6320      	str	r0, [r4, #48]	; 0x30
   89e6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   89e70:	b121      	cbz	r1, 89e7c <_fclose_r+0x74>
   89e72:	4628      	mov	r0, r5
   89e74:	f7fc ff72 	bl	86d5c <_free_r>
   89e78:	2100      	movs	r1, #0
   89e7a:	6461      	str	r1, [r4, #68]	; 0x44
   89e7c:	2300      	movs	r3, #0
   89e7e:	81a3      	strh	r3, [r4, #12]
   89e80:	f7fc fe35 	bl	86aee <__sfp_lock_release>
   89e84:	e000      	b.n	89e88 <_fclose_r+0x80>
   89e86:	460e      	mov	r6, r1
   89e88:	4630      	mov	r0, r6
   89e8a:	bd70      	pop	{r4, r5, r6, pc}

00089e8c <fclose>:
   89e8c:	4b02      	ldr	r3, [pc, #8]	; (89e98 <fclose+0xc>)
   89e8e:	4601      	mov	r1, r0
   89e90:	6818      	ldr	r0, [r3, #0]
   89e92:	f7ff bfb9 	b.w	89e08 <_fclose_r>
   89e96:	bf00      	nop
   89e98:	20070010 	.word	0x20070010

00089e9c <_fstat_r>:
   89e9c:	b538      	push	{r3, r4, r5, lr}
   89e9e:	4c07      	ldr	r4, [pc, #28]	; (89ebc <_fstat_r+0x20>)
   89ea0:	2300      	movs	r3, #0
   89ea2:	4605      	mov	r5, r0
   89ea4:	4608      	mov	r0, r1
   89ea6:	4611      	mov	r1, r2
   89ea8:	6023      	str	r3, [r4, #0]
   89eaa:	f7f7 fccd 	bl	81848 <_fstat>
   89eae:	1c43      	adds	r3, r0, #1
   89eb0:	d102      	bne.n	89eb8 <_fstat_r+0x1c>
   89eb2:	6821      	ldr	r1, [r4, #0]
   89eb4:	b101      	cbz	r1, 89eb8 <_fstat_r+0x1c>
   89eb6:	6029      	str	r1, [r5, #0]
   89eb8:	bd38      	pop	{r3, r4, r5, pc}
   89eba:	bf00      	nop
   89ebc:	2007ac78 	.word	0x2007ac78

00089ec0 <_isatty_r>:
   89ec0:	b538      	push	{r3, r4, r5, lr}
   89ec2:	4c06      	ldr	r4, [pc, #24]	; (89edc <_isatty_r+0x1c>)
   89ec4:	2300      	movs	r3, #0
   89ec6:	4605      	mov	r5, r0
   89ec8:	4608      	mov	r0, r1
   89eca:	6023      	str	r3, [r4, #0]
   89ecc:	f7f7 fcc2 	bl	81854 <_isatty>
   89ed0:	1c43      	adds	r3, r0, #1
   89ed2:	d102      	bne.n	89eda <_isatty_r+0x1a>
   89ed4:	6821      	ldr	r1, [r4, #0]
   89ed6:	b101      	cbz	r1, 89eda <_isatty_r+0x1a>
   89ed8:	6029      	str	r1, [r5, #0]
   89eda:	bd38      	pop	{r3, r4, r5, pc}
   89edc:	2007ac78 	.word	0x2007ac78

00089ee0 <_lseek_r>:
   89ee0:	b538      	push	{r3, r4, r5, lr}
   89ee2:	4c07      	ldr	r4, [pc, #28]	; (89f00 <_lseek_r+0x20>)
   89ee4:	4605      	mov	r5, r0
   89ee6:	2000      	movs	r0, #0
   89ee8:	6020      	str	r0, [r4, #0]
   89eea:	4608      	mov	r0, r1
   89eec:	4611      	mov	r1, r2
   89eee:	461a      	mov	r2, r3
   89ef0:	f7f7 fcb4 	bl	8185c <_lseek>
   89ef4:	1c43      	adds	r3, r0, #1
   89ef6:	d102      	bne.n	89efe <_lseek_r+0x1e>
   89ef8:	6823      	ldr	r3, [r4, #0]
   89efa:	b103      	cbz	r3, 89efe <_lseek_r+0x1e>
   89efc:	602b      	str	r3, [r5, #0]
   89efe:	bd38      	pop	{r3, r4, r5, pc}
   89f00:	2007ac78 	.word	0x2007ac78

00089f04 <_read_r>:
   89f04:	b538      	push	{r3, r4, r5, lr}
   89f06:	4c07      	ldr	r4, [pc, #28]	; (89f24 <_read_r+0x20>)
   89f08:	4605      	mov	r5, r0
   89f0a:	2000      	movs	r0, #0
   89f0c:	6020      	str	r0, [r4, #0]
   89f0e:	4608      	mov	r0, r1
   89f10:	4611      	mov	r1, r2
   89f12:	461a      	mov	r2, r3
   89f14:	f7f6 fca8 	bl	80868 <_read>
   89f18:	1c43      	adds	r3, r0, #1
   89f1a:	d102      	bne.n	89f22 <_read_r+0x1e>
   89f1c:	6823      	ldr	r3, [r4, #0]
   89f1e:	b103      	cbz	r3, 89f22 <_read_r+0x1e>
   89f20:	602b      	str	r3, [r5, #0]
   89f22:	bd38      	pop	{r3, r4, r5, pc}
   89f24:	2007ac78 	.word	0x2007ac78

00089f28 <__gedf2>:
   89f28:	f04f 3cff 	mov.w	ip, #4294967295
   89f2c:	e006      	b.n	89f3c <__cmpdf2+0x4>
   89f2e:	bf00      	nop

00089f30 <__ledf2>:
   89f30:	f04f 0c01 	mov.w	ip, #1
   89f34:	e002      	b.n	89f3c <__cmpdf2+0x4>
   89f36:	bf00      	nop

00089f38 <__cmpdf2>:
   89f38:	f04f 0c01 	mov.w	ip, #1
   89f3c:	f84d cd04 	str.w	ip, [sp, #-4]!
   89f40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89f48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89f4c:	bf18      	it	ne
   89f4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   89f52:	d01b      	beq.n	89f8c <__cmpdf2+0x54>
   89f54:	b001      	add	sp, #4
   89f56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   89f5a:	bf0c      	ite	eq
   89f5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   89f60:	ea91 0f03 	teqne	r1, r3
   89f64:	bf02      	ittt	eq
   89f66:	ea90 0f02 	teqeq	r0, r2
   89f6a:	2000      	moveq	r0, #0
   89f6c:	4770      	bxeq	lr
   89f6e:	f110 0f00 	cmn.w	r0, #0
   89f72:	ea91 0f03 	teq	r1, r3
   89f76:	bf58      	it	pl
   89f78:	4299      	cmppl	r1, r3
   89f7a:	bf08      	it	eq
   89f7c:	4290      	cmpeq	r0, r2
   89f7e:	bf2c      	ite	cs
   89f80:	17d8      	asrcs	r0, r3, #31
   89f82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   89f86:	f040 0001 	orr.w	r0, r0, #1
   89f8a:	4770      	bx	lr
   89f8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89f90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89f94:	d102      	bne.n	89f9c <__cmpdf2+0x64>
   89f96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   89f9a:	d107      	bne.n	89fac <__cmpdf2+0x74>
   89f9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89fa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89fa4:	d1d6      	bne.n	89f54 <__cmpdf2+0x1c>
   89fa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   89faa:	d0d3      	beq.n	89f54 <__cmpdf2+0x1c>
   89fac:	f85d 0b04 	ldr.w	r0, [sp], #4
   89fb0:	4770      	bx	lr
   89fb2:	bf00      	nop

00089fb4 <__aeabi_cdrcmple>:
   89fb4:	4684      	mov	ip, r0
   89fb6:	4610      	mov	r0, r2
   89fb8:	4662      	mov	r2, ip
   89fba:	468c      	mov	ip, r1
   89fbc:	4619      	mov	r1, r3
   89fbe:	4663      	mov	r3, ip
   89fc0:	e000      	b.n	89fc4 <__aeabi_cdcmpeq>
   89fc2:	bf00      	nop

00089fc4 <__aeabi_cdcmpeq>:
   89fc4:	b501      	push	{r0, lr}
   89fc6:	f7ff ffb7 	bl	89f38 <__cmpdf2>
   89fca:	2800      	cmp	r0, #0
   89fcc:	bf48      	it	mi
   89fce:	f110 0f00 	cmnmi.w	r0, #0
   89fd2:	bd01      	pop	{r0, pc}

00089fd4 <__aeabi_dcmpeq>:
   89fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   89fd8:	f7ff fff4 	bl	89fc4 <__aeabi_cdcmpeq>
   89fdc:	bf0c      	ite	eq
   89fde:	2001      	moveq	r0, #1
   89fe0:	2000      	movne	r0, #0
   89fe2:	f85d fb08 	ldr.w	pc, [sp], #8
   89fe6:	bf00      	nop

00089fe8 <__aeabi_dcmplt>:
   89fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
   89fec:	f7ff ffea 	bl	89fc4 <__aeabi_cdcmpeq>
   89ff0:	bf34      	ite	cc
   89ff2:	2001      	movcc	r0, #1
   89ff4:	2000      	movcs	r0, #0
   89ff6:	f85d fb08 	ldr.w	pc, [sp], #8
   89ffa:	bf00      	nop

00089ffc <__aeabi_dcmple>:
   89ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a000:	f7ff ffe0 	bl	89fc4 <__aeabi_cdcmpeq>
   8a004:	bf94      	ite	ls
   8a006:	2001      	movls	r0, #1
   8a008:	2000      	movhi	r0, #0
   8a00a:	f85d fb08 	ldr.w	pc, [sp], #8
   8a00e:	bf00      	nop

0008a010 <__aeabi_dcmpge>:
   8a010:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a014:	f7ff ffce 	bl	89fb4 <__aeabi_cdrcmple>
   8a018:	bf94      	ite	ls
   8a01a:	2001      	movls	r0, #1
   8a01c:	2000      	movhi	r0, #0
   8a01e:	f85d fb08 	ldr.w	pc, [sp], #8
   8a022:	bf00      	nop

0008a024 <__aeabi_dcmpgt>:
   8a024:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a028:	f7ff ffc4 	bl	89fb4 <__aeabi_cdrcmple>
   8a02c:	bf34      	ite	cc
   8a02e:	2001      	movcc	r0, #1
   8a030:	2000      	movcs	r0, #0
   8a032:	f85d fb08 	ldr.w	pc, [sp], #8
   8a036:	bf00      	nop

0008a038 <__aeabi_d2f>:
   8a038:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8a03c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   8a040:	bf24      	itt	cs
   8a042:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   8a046:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   8a04a:	d90d      	bls.n	8a068 <__aeabi_d2f+0x30>
   8a04c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8a050:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   8a054:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   8a058:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   8a05c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   8a060:	bf08      	it	eq
   8a062:	f020 0001 	biceq.w	r0, r0, #1
   8a066:	4770      	bx	lr
   8a068:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   8a06c:	d121      	bne.n	8a0b2 <__aeabi_d2f+0x7a>
   8a06e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8a072:	bfbc      	itt	lt
   8a074:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   8a078:	4770      	bxlt	lr
   8a07a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a07e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8a082:	f1c2 0218 	rsb	r2, r2, #24
   8a086:	f1c2 0c20 	rsb	ip, r2, #32
   8a08a:	fa10 f30c 	lsls.w	r3, r0, ip
   8a08e:	fa20 f002 	lsr.w	r0, r0, r2
   8a092:	bf18      	it	ne
   8a094:	f040 0001 	orrne.w	r0, r0, #1
   8a098:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8a09c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   8a0a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   8a0a4:	ea40 000c 	orr.w	r0, r0, ip
   8a0a8:	fa23 f302 	lsr.w	r3, r3, r2
   8a0ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8a0b0:	e7cc      	b.n	8a04c <__aeabi_d2f+0x14>
   8a0b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8a0b6:	d107      	bne.n	8a0c8 <__aeabi_d2f+0x90>
   8a0b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   8a0bc:	bf1e      	ittt	ne
   8a0be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8a0c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8a0c6:	4770      	bxne	lr
   8a0c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   8a0cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8a0d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8a0d4:	4770      	bx	lr
   8a0d6:	bf00      	nop

0008a0d8 <__aeabi_uldivmod>:
   8a0d8:	b94b      	cbnz	r3, 8a0ee <__aeabi_uldivmod+0x16>
   8a0da:	b942      	cbnz	r2, 8a0ee <__aeabi_uldivmod+0x16>
   8a0dc:	2900      	cmp	r1, #0
   8a0de:	bf08      	it	eq
   8a0e0:	2800      	cmpeq	r0, #0
   8a0e2:	d002      	beq.n	8a0ea <__aeabi_uldivmod+0x12>
   8a0e4:	f04f 31ff 	mov.w	r1, #4294967295
   8a0e8:	4608      	mov	r0, r1
   8a0ea:	f000 b83b 	b.w	8a164 <__aeabi_idiv0>
   8a0ee:	b082      	sub	sp, #8
   8a0f0:	46ec      	mov	ip, sp
   8a0f2:	e92d 5000 	stmdb	sp!, {ip, lr}
   8a0f6:	f000 f81d 	bl	8a134 <__gnu_uldivmod_helper>
   8a0fa:	f8dd e004 	ldr.w	lr, [sp, #4]
   8a0fe:	b002      	add	sp, #8
   8a100:	bc0c      	pop	{r2, r3}
   8a102:	4770      	bx	lr

0008a104 <__gnu_ldivmod_helper>:
   8a104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a108:	4616      	mov	r6, r2
   8a10a:	4698      	mov	r8, r3
   8a10c:	4604      	mov	r4, r0
   8a10e:	460d      	mov	r5, r1
   8a110:	f000 f82a 	bl	8a168 <__divdi3>
   8a114:	fb06 fc01 	mul.w	ip, r6, r1
   8a118:	fba6 2300 	umull	r2, r3, r6, r0
   8a11c:	fb00 c708 	mla	r7, r0, r8, ip
   8a120:	18fb      	adds	r3, r7, r3
   8a122:	1aa2      	subs	r2, r4, r2
   8a124:	eb65 0303 	sbc.w	r3, r5, r3
   8a128:	9c06      	ldr	r4, [sp, #24]
   8a12a:	e9c4 2300 	strd	r2, r3, [r4]
   8a12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a132:	bf00      	nop

0008a134 <__gnu_uldivmod_helper>:
   8a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a138:	4690      	mov	r8, r2
   8a13a:	4606      	mov	r6, r0
   8a13c:	460f      	mov	r7, r1
   8a13e:	461d      	mov	r5, r3
   8a140:	f000 f970 	bl	8a424 <__udivdi3>
   8a144:	fb00 f305 	mul.w	r3, r0, r5
   8a148:	fba0 4508 	umull	r4, r5, r0, r8
   8a14c:	fb08 3801 	mla	r8, r8, r1, r3
   8a150:	9b06      	ldr	r3, [sp, #24]
   8a152:	4445      	add	r5, r8
   8a154:	1b34      	subs	r4, r6, r4
   8a156:	eb67 0505 	sbc.w	r5, r7, r5
   8a15a:	e9c3 4500 	strd	r4, r5, [r3]
   8a15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a162:	bf00      	nop

0008a164 <__aeabi_idiv0>:
   8a164:	4770      	bx	lr
   8a166:	bf00      	nop

0008a168 <__divdi3>:
   8a168:	2900      	cmp	r1, #0
   8a16a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8a16e:	461d      	mov	r5, r3
   8a170:	f2c0 809d 	blt.w	8a2ae <__divdi3+0x146>
   8a174:	2400      	movs	r4, #0
   8a176:	2d00      	cmp	r5, #0
   8a178:	f2c0 8094 	blt.w	8a2a4 <__divdi3+0x13c>
   8a17c:	4680      	mov	r8, r0
   8a17e:	460f      	mov	r7, r1
   8a180:	4694      	mov	ip, r2
   8a182:	461e      	mov	r6, r3
   8a184:	bbe3      	cbnz	r3, 8a200 <__divdi3+0x98>
   8a186:	428a      	cmp	r2, r1
   8a188:	d955      	bls.n	8a236 <__divdi3+0xce>
   8a18a:	fab2 f782 	clz	r7, r2
   8a18e:	b147      	cbz	r7, 8a1a2 <__divdi3+0x3a>
   8a190:	f1c7 0520 	rsb	r5, r7, #32
   8a194:	fa20 f605 	lsr.w	r6, r0, r5
   8a198:	fa01 f107 	lsl.w	r1, r1, r7
   8a19c:	40ba      	lsls	r2, r7
   8a19e:	40b8      	lsls	r0, r7
   8a1a0:	4331      	orrs	r1, r6
   8a1a2:	0c17      	lsrs	r7, r2, #16
   8a1a4:	fbb1 f6f7 	udiv	r6, r1, r7
   8a1a8:	fa1f fc82 	uxth.w	ip, r2
   8a1ac:	fb07 1116 	mls	r1, r7, r6, r1
   8a1b0:	fb0c f506 	mul.w	r5, ip, r6
   8a1b4:	0c03      	lsrs	r3, r0, #16
   8a1b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8a1ba:	429d      	cmp	r5, r3
   8a1bc:	d908      	bls.n	8a1d0 <__divdi3+0x68>
   8a1be:	1e71      	subs	r1, r6, #1
   8a1c0:	189b      	adds	r3, r3, r2
   8a1c2:	f080 8113 	bcs.w	8a3ec <__divdi3+0x284>
   8a1c6:	429d      	cmp	r5, r3
   8a1c8:	f240 8110 	bls.w	8a3ec <__divdi3+0x284>
   8a1cc:	3e02      	subs	r6, #2
   8a1ce:	189b      	adds	r3, r3, r2
   8a1d0:	1b59      	subs	r1, r3, r5
   8a1d2:	fbb1 f5f7 	udiv	r5, r1, r7
   8a1d6:	fb07 1315 	mls	r3, r7, r5, r1
   8a1da:	fb0c fc05 	mul.w	ip, ip, r5
   8a1de:	b280      	uxth	r0, r0
   8a1e0:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8a1e4:	458c      	cmp	ip, r1
   8a1e6:	d907      	bls.n	8a1f8 <__divdi3+0x90>
   8a1e8:	1e6b      	subs	r3, r5, #1
   8a1ea:	188a      	adds	r2, r1, r2
   8a1ec:	f080 8100 	bcs.w	8a3f0 <__divdi3+0x288>
   8a1f0:	4594      	cmp	ip, r2
   8a1f2:	f240 80fd 	bls.w	8a3f0 <__divdi3+0x288>
   8a1f6:	3d02      	subs	r5, #2
   8a1f8:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8a1fc:	2500      	movs	r5, #0
   8a1fe:	e003      	b.n	8a208 <__divdi3+0xa0>
   8a200:	428b      	cmp	r3, r1
   8a202:	d90c      	bls.n	8a21e <__divdi3+0xb6>
   8a204:	2500      	movs	r5, #0
   8a206:	4629      	mov	r1, r5
   8a208:	460a      	mov	r2, r1
   8a20a:	462b      	mov	r3, r5
   8a20c:	b114      	cbz	r4, 8a214 <__divdi3+0xac>
   8a20e:	4252      	negs	r2, r2
   8a210:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8a214:	4610      	mov	r0, r2
   8a216:	4619      	mov	r1, r3
   8a218:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8a21c:	4770      	bx	lr
   8a21e:	fab3 f583 	clz	r5, r3
   8a222:	2d00      	cmp	r5, #0
   8a224:	f040 8087 	bne.w	8a336 <__divdi3+0x1ce>
   8a228:	428b      	cmp	r3, r1
   8a22a:	d301      	bcc.n	8a230 <__divdi3+0xc8>
   8a22c:	4282      	cmp	r2, r0
   8a22e:	d8ea      	bhi.n	8a206 <__divdi3+0x9e>
   8a230:	2500      	movs	r5, #0
   8a232:	2101      	movs	r1, #1
   8a234:	e7e8      	b.n	8a208 <__divdi3+0xa0>
   8a236:	b912      	cbnz	r2, 8a23e <__divdi3+0xd6>
   8a238:	2601      	movs	r6, #1
   8a23a:	fbb6 f2f2 	udiv	r2, r6, r2
   8a23e:	fab2 f682 	clz	r6, r2
   8a242:	2e00      	cmp	r6, #0
   8a244:	d139      	bne.n	8a2ba <__divdi3+0x152>
   8a246:	1a8e      	subs	r6, r1, r2
   8a248:	0c13      	lsrs	r3, r2, #16
   8a24a:	fa1f fc82 	uxth.w	ip, r2
   8a24e:	2501      	movs	r5, #1
   8a250:	fbb6 f7f3 	udiv	r7, r6, r3
   8a254:	fb03 6117 	mls	r1, r3, r7, r6
   8a258:	fb0c f807 	mul.w	r8, ip, r7
   8a25c:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8a260:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8a264:	45b0      	cmp	r8, r6
   8a266:	d906      	bls.n	8a276 <__divdi3+0x10e>
   8a268:	1e79      	subs	r1, r7, #1
   8a26a:	18b6      	adds	r6, r6, r2
   8a26c:	d202      	bcs.n	8a274 <__divdi3+0x10c>
   8a26e:	45b0      	cmp	r8, r6
   8a270:	f200 80d3 	bhi.w	8a41a <__divdi3+0x2b2>
   8a274:	460f      	mov	r7, r1
   8a276:	ebc8 0606 	rsb	r6, r8, r6
   8a27a:	fbb6 f1f3 	udiv	r1, r6, r3
   8a27e:	fb03 6311 	mls	r3, r3, r1, r6
   8a282:	fb0c fc01 	mul.w	ip, ip, r1
   8a286:	b280      	uxth	r0, r0
   8a288:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8a28c:	459c      	cmp	ip, r3
   8a28e:	d906      	bls.n	8a29e <__divdi3+0x136>
   8a290:	1e4e      	subs	r6, r1, #1
   8a292:	189a      	adds	r2, r3, r2
   8a294:	d202      	bcs.n	8a29c <__divdi3+0x134>
   8a296:	4594      	cmp	ip, r2
   8a298:	f200 80c2 	bhi.w	8a420 <__divdi3+0x2b8>
   8a29c:	4631      	mov	r1, r6
   8a29e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8a2a2:	e7b1      	b.n	8a208 <__divdi3+0xa0>
   8a2a4:	43e4      	mvns	r4, r4
   8a2a6:	4252      	negs	r2, r2
   8a2a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8a2ac:	e766      	b.n	8a17c <__divdi3+0x14>
   8a2ae:	4240      	negs	r0, r0
   8a2b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a2b4:	f04f 34ff 	mov.w	r4, #4294967295
   8a2b8:	e75d      	b.n	8a176 <__divdi3+0xe>
   8a2ba:	40b2      	lsls	r2, r6
   8a2bc:	f1c6 0920 	rsb	r9, r6, #32
   8a2c0:	fa21 f709 	lsr.w	r7, r1, r9
   8a2c4:	fa20 f909 	lsr.w	r9, r0, r9
   8a2c8:	fa01 f106 	lsl.w	r1, r1, r6
   8a2cc:	0c13      	lsrs	r3, r2, #16
   8a2ce:	fbb7 f8f3 	udiv	r8, r7, r3
   8a2d2:	fa1f fc82 	uxth.w	ip, r2
   8a2d6:	fb03 7718 	mls	r7, r3, r8, r7
   8a2da:	fb0c f508 	mul.w	r5, ip, r8
   8a2de:	ea49 0901 	orr.w	r9, r9, r1
   8a2e2:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8a2e6:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8a2ea:	40b0      	lsls	r0, r6
   8a2ec:	42bd      	cmp	r5, r7
   8a2ee:	d90a      	bls.n	8a306 <__divdi3+0x19e>
   8a2f0:	18bf      	adds	r7, r7, r2
   8a2f2:	f108 36ff 	add.w	r6, r8, #4294967295
   8a2f6:	f080 808e 	bcs.w	8a416 <__divdi3+0x2ae>
   8a2fa:	42bd      	cmp	r5, r7
   8a2fc:	f240 808b 	bls.w	8a416 <__divdi3+0x2ae>
   8a300:	f1a8 0802 	sub.w	r8, r8, #2
   8a304:	18bf      	adds	r7, r7, r2
   8a306:	1b79      	subs	r1, r7, r5
   8a308:	fbb1 f5f3 	udiv	r5, r1, r3
   8a30c:	fb03 1715 	mls	r7, r3, r5, r1
   8a310:	fb0c f605 	mul.w	r6, ip, r5
   8a314:	fa1f f989 	uxth.w	r9, r9
   8a318:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8a31c:	428e      	cmp	r6, r1
   8a31e:	d906      	bls.n	8a32e <__divdi3+0x1c6>
   8a320:	1e6f      	subs	r7, r5, #1
   8a322:	1889      	adds	r1, r1, r2
   8a324:	d271      	bcs.n	8a40a <__divdi3+0x2a2>
   8a326:	428e      	cmp	r6, r1
   8a328:	d96f      	bls.n	8a40a <__divdi3+0x2a2>
   8a32a:	3d02      	subs	r5, #2
   8a32c:	1889      	adds	r1, r1, r2
   8a32e:	1b8e      	subs	r6, r1, r6
   8a330:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8a334:	e78c      	b.n	8a250 <__divdi3+0xe8>
   8a336:	f1c5 0120 	rsb	r1, r5, #32
   8a33a:	fa22 f301 	lsr.w	r3, r2, r1
   8a33e:	fa06 f605 	lsl.w	r6, r6, r5
   8a342:	fa27 f201 	lsr.w	r2, r7, r1
   8a346:	fa07 f705 	lsl.w	r7, r7, r5
   8a34a:	fa20 f101 	lsr.w	r1, r0, r1
   8a34e:	431e      	orrs	r6, r3
   8a350:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8a354:	fbb2 f8f9 	udiv	r8, r2, r9
   8a358:	fa1f fa86 	uxth.w	sl, r6
   8a35c:	fb09 2218 	mls	r2, r9, r8, r2
   8a360:	fb0a fb08 	mul.w	fp, sl, r8
   8a364:	430f      	orrs	r7, r1
   8a366:	0c3b      	lsrs	r3, r7, #16
   8a368:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8a36c:	4593      	cmp	fp, r2
   8a36e:	fa0c fc05 	lsl.w	ip, ip, r5
   8a372:	d908      	bls.n	8a386 <__divdi3+0x21e>
   8a374:	1992      	adds	r2, r2, r6
   8a376:	f108 31ff 	add.w	r1, r8, #4294967295
   8a37a:	d24a      	bcs.n	8a412 <__divdi3+0x2aa>
   8a37c:	4593      	cmp	fp, r2
   8a37e:	d948      	bls.n	8a412 <__divdi3+0x2aa>
   8a380:	f1a8 0802 	sub.w	r8, r8, #2
   8a384:	1992      	adds	r2, r2, r6
   8a386:	ebcb 0302 	rsb	r3, fp, r2
   8a38a:	fbb3 f1f9 	udiv	r1, r3, r9
   8a38e:	fb09 3211 	mls	r2, r9, r1, r3
   8a392:	fb0a fa01 	mul.w	sl, sl, r1
   8a396:	b2bf      	uxth	r7, r7
   8a398:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8a39c:	459a      	cmp	sl, r3
   8a39e:	d906      	bls.n	8a3ae <__divdi3+0x246>
   8a3a0:	1e4a      	subs	r2, r1, #1
   8a3a2:	199b      	adds	r3, r3, r6
   8a3a4:	d233      	bcs.n	8a40e <__divdi3+0x2a6>
   8a3a6:	459a      	cmp	sl, r3
   8a3a8:	d931      	bls.n	8a40e <__divdi3+0x2a6>
   8a3aa:	3902      	subs	r1, #2
   8a3ac:	199b      	adds	r3, r3, r6
   8a3ae:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8a3b2:	0c0f      	lsrs	r7, r1, #16
   8a3b4:	fa1f f88c 	uxth.w	r8, ip
   8a3b8:	fb08 f607 	mul.w	r6, r8, r7
   8a3bc:	b28a      	uxth	r2, r1
   8a3be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8a3c2:	fb08 f802 	mul.w	r8, r8, r2
   8a3c6:	fb0c 6202 	mla	r2, ip, r2, r6
   8a3ca:	fb0c fc07 	mul.w	ip, ip, r7
   8a3ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8a3d2:	4296      	cmp	r6, r2
   8a3d4:	bf88      	it	hi
   8a3d6:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8a3da:	ebca 0303 	rsb	r3, sl, r3
   8a3de:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8a3e2:	4563      	cmp	r3, ip
   8a3e4:	d30e      	bcc.n	8a404 <__divdi3+0x29c>
   8a3e6:	d005      	beq.n	8a3f4 <__divdi3+0x28c>
   8a3e8:	2500      	movs	r5, #0
   8a3ea:	e70d      	b.n	8a208 <__divdi3+0xa0>
   8a3ec:	460e      	mov	r6, r1
   8a3ee:	e6ef      	b.n	8a1d0 <__divdi3+0x68>
   8a3f0:	461d      	mov	r5, r3
   8a3f2:	e701      	b.n	8a1f8 <__divdi3+0x90>
   8a3f4:	fa00 f005 	lsl.w	r0, r0, r5
   8a3f8:	fa1f f888 	uxth.w	r8, r8
   8a3fc:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8a400:	42a8      	cmp	r0, r5
   8a402:	d2f1      	bcs.n	8a3e8 <__divdi3+0x280>
   8a404:	3901      	subs	r1, #1
   8a406:	2500      	movs	r5, #0
   8a408:	e6fe      	b.n	8a208 <__divdi3+0xa0>
   8a40a:	463d      	mov	r5, r7
   8a40c:	e78f      	b.n	8a32e <__divdi3+0x1c6>
   8a40e:	4611      	mov	r1, r2
   8a410:	e7cd      	b.n	8a3ae <__divdi3+0x246>
   8a412:	4688      	mov	r8, r1
   8a414:	e7b7      	b.n	8a386 <__divdi3+0x21e>
   8a416:	46b0      	mov	r8, r6
   8a418:	e775      	b.n	8a306 <__divdi3+0x19e>
   8a41a:	3f02      	subs	r7, #2
   8a41c:	18b6      	adds	r6, r6, r2
   8a41e:	e72a      	b.n	8a276 <__divdi3+0x10e>
   8a420:	3902      	subs	r1, #2
   8a422:	e73c      	b.n	8a29e <__divdi3+0x136>

0008a424 <__udivdi3>:
   8a424:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8a428:	4614      	mov	r4, r2
   8a42a:	4605      	mov	r5, r0
   8a42c:	460e      	mov	r6, r1
   8a42e:	2b00      	cmp	r3, #0
   8a430:	d13d      	bne.n	8a4ae <__udivdi3+0x8a>
   8a432:	428a      	cmp	r2, r1
   8a434:	d949      	bls.n	8a4ca <__udivdi3+0xa6>
   8a436:	fab2 f782 	clz	r7, r2
   8a43a:	b147      	cbz	r7, 8a44e <__udivdi3+0x2a>
   8a43c:	f1c7 0120 	rsb	r1, r7, #32
   8a440:	fa20 f201 	lsr.w	r2, r0, r1
   8a444:	fa06 f607 	lsl.w	r6, r6, r7
   8a448:	40bc      	lsls	r4, r7
   8a44a:	40bd      	lsls	r5, r7
   8a44c:	4316      	orrs	r6, r2
   8a44e:	0c22      	lsrs	r2, r4, #16
   8a450:	fbb6 f0f2 	udiv	r0, r6, r2
   8a454:	b2a1      	uxth	r1, r4
   8a456:	fb02 6610 	mls	r6, r2, r0, r6
   8a45a:	fb01 f300 	mul.w	r3, r1, r0
   8a45e:	0c2f      	lsrs	r7, r5, #16
   8a460:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8a464:	42b3      	cmp	r3, r6
   8a466:	d908      	bls.n	8a47a <__udivdi3+0x56>
   8a468:	1e47      	subs	r7, r0, #1
   8a46a:	1936      	adds	r6, r6, r4
   8a46c:	f080 80fa 	bcs.w	8a664 <__udivdi3+0x240>
   8a470:	42b3      	cmp	r3, r6
   8a472:	f240 80f7 	bls.w	8a664 <__udivdi3+0x240>
   8a476:	3802      	subs	r0, #2
   8a478:	1936      	adds	r6, r6, r4
   8a47a:	1af6      	subs	r6, r6, r3
   8a47c:	fbb6 f3f2 	udiv	r3, r6, r2
   8a480:	fb02 6213 	mls	r2, r2, r3, r6
   8a484:	fb01 f103 	mul.w	r1, r1, r3
   8a488:	b2ad      	uxth	r5, r5
   8a48a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8a48e:	4291      	cmp	r1, r2
   8a490:	d907      	bls.n	8a4a2 <__udivdi3+0x7e>
   8a492:	1e5e      	subs	r6, r3, #1
   8a494:	1912      	adds	r2, r2, r4
   8a496:	f080 80e7 	bcs.w	8a668 <__udivdi3+0x244>
   8a49a:	4291      	cmp	r1, r2
   8a49c:	f240 80e4 	bls.w	8a668 <__udivdi3+0x244>
   8a4a0:	3b02      	subs	r3, #2
   8a4a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8a4a6:	2100      	movs	r1, #0
   8a4a8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8a4ac:	4770      	bx	lr
   8a4ae:	428b      	cmp	r3, r1
   8a4b0:	d843      	bhi.n	8a53a <__udivdi3+0x116>
   8a4b2:	fab3 f483 	clz	r4, r3
   8a4b6:	2c00      	cmp	r4, #0
   8a4b8:	d142      	bne.n	8a540 <__udivdi3+0x11c>
   8a4ba:	428b      	cmp	r3, r1
   8a4bc:	d302      	bcc.n	8a4c4 <__udivdi3+0xa0>
   8a4be:	4282      	cmp	r2, r0
   8a4c0:	f200 80e1 	bhi.w	8a686 <__udivdi3+0x262>
   8a4c4:	2100      	movs	r1, #0
   8a4c6:	2001      	movs	r0, #1
   8a4c8:	e7ee      	b.n	8a4a8 <__udivdi3+0x84>
   8a4ca:	b912      	cbnz	r2, 8a4d2 <__udivdi3+0xae>
   8a4cc:	2701      	movs	r7, #1
   8a4ce:	fbb7 f4f2 	udiv	r4, r7, r2
   8a4d2:	fab4 f284 	clz	r2, r4
   8a4d6:	2a00      	cmp	r2, #0
   8a4d8:	f040 8089 	bne.w	8a5ee <__udivdi3+0x1ca>
   8a4dc:	1b0a      	subs	r2, r1, r4
   8a4de:	0c23      	lsrs	r3, r4, #16
   8a4e0:	b2a7      	uxth	r7, r4
   8a4e2:	2101      	movs	r1, #1
   8a4e4:	fbb2 f6f3 	udiv	r6, r2, r3
   8a4e8:	fb03 2216 	mls	r2, r3, r6, r2
   8a4ec:	fb07 f006 	mul.w	r0, r7, r6
   8a4f0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8a4f4:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8a4f8:	4290      	cmp	r0, r2
   8a4fa:	d907      	bls.n	8a50c <__udivdi3+0xe8>
   8a4fc:	1912      	adds	r2, r2, r4
   8a4fe:	f106 3cff 	add.w	ip, r6, #4294967295
   8a502:	d202      	bcs.n	8a50a <__udivdi3+0xe6>
   8a504:	4290      	cmp	r0, r2
   8a506:	f200 80d0 	bhi.w	8a6aa <__udivdi3+0x286>
   8a50a:	4666      	mov	r6, ip
   8a50c:	1a12      	subs	r2, r2, r0
   8a50e:	fbb2 f0f3 	udiv	r0, r2, r3
   8a512:	fb03 2310 	mls	r3, r3, r0, r2
   8a516:	fb07 f700 	mul.w	r7, r7, r0
   8a51a:	b2ad      	uxth	r5, r5
   8a51c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8a520:	429f      	cmp	r7, r3
   8a522:	d907      	bls.n	8a534 <__udivdi3+0x110>
   8a524:	1e42      	subs	r2, r0, #1
   8a526:	191b      	adds	r3, r3, r4
   8a528:	f080 80a0 	bcs.w	8a66c <__udivdi3+0x248>
   8a52c:	429f      	cmp	r7, r3
   8a52e:	f240 809d 	bls.w	8a66c <__udivdi3+0x248>
   8a532:	3802      	subs	r0, #2
   8a534:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8a538:	e7b6      	b.n	8a4a8 <__udivdi3+0x84>
   8a53a:	2100      	movs	r1, #0
   8a53c:	4608      	mov	r0, r1
   8a53e:	e7b3      	b.n	8a4a8 <__udivdi3+0x84>
   8a540:	f1c4 0620 	rsb	r6, r4, #32
   8a544:	fa22 f706 	lsr.w	r7, r2, r6
   8a548:	fa03 f304 	lsl.w	r3, r3, r4
   8a54c:	fa21 f506 	lsr.w	r5, r1, r6
   8a550:	fa01 f104 	lsl.w	r1, r1, r4
   8a554:	fa20 f606 	lsr.w	r6, r0, r6
   8a558:	433b      	orrs	r3, r7
   8a55a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8a55e:	fbb5 f7fc 	udiv	r7, r5, ip
   8a562:	fa1f f883 	uxth.w	r8, r3
   8a566:	fb0c 5517 	mls	r5, ip, r7, r5
   8a56a:	fb08 f907 	mul.w	r9, r8, r7
   8a56e:	ea46 0a01 	orr.w	sl, r6, r1
   8a572:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8a576:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8a57a:	45a9      	cmp	r9, r5
   8a57c:	fa02 f204 	lsl.w	r2, r2, r4
   8a580:	d904      	bls.n	8a58c <__udivdi3+0x168>
   8a582:	1e7e      	subs	r6, r7, #1
   8a584:	18ed      	adds	r5, r5, r3
   8a586:	f0c0 8081 	bcc.w	8a68c <__udivdi3+0x268>
   8a58a:	4637      	mov	r7, r6
   8a58c:	ebc9 0105 	rsb	r1, r9, r5
   8a590:	fbb1 f6fc 	udiv	r6, r1, ip
   8a594:	fb0c 1516 	mls	r5, ip, r6, r1
   8a598:	fb08 f806 	mul.w	r8, r8, r6
   8a59c:	fa1f fa8a 	uxth.w	sl, sl
   8a5a0:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8a5a4:	4588      	cmp	r8, r1
   8a5a6:	d903      	bls.n	8a5b0 <__udivdi3+0x18c>
   8a5a8:	1e75      	subs	r5, r6, #1
   8a5aa:	18c9      	adds	r1, r1, r3
   8a5ac:	d374      	bcc.n	8a698 <__udivdi3+0x274>
   8a5ae:	462e      	mov	r6, r5
   8a5b0:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8a5b4:	0c37      	lsrs	r7, r6, #16
   8a5b6:	fa1f fc82 	uxth.w	ip, r2
   8a5ba:	fb0c f507 	mul.w	r5, ip, r7
   8a5be:	0c12      	lsrs	r2, r2, #16
   8a5c0:	b2b3      	uxth	r3, r6
   8a5c2:	fb0c fc03 	mul.w	ip, ip, r3
   8a5c6:	fb02 5303 	mla	r3, r2, r3, r5
   8a5ca:	fb02 f207 	mul.w	r2, r2, r7
   8a5ce:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8a5d2:	429d      	cmp	r5, r3
   8a5d4:	bf88      	it	hi
   8a5d6:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8a5da:	ebc8 0101 	rsb	r1, r8, r1
   8a5de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8a5e2:	4291      	cmp	r1, r2
   8a5e4:	d34c      	bcc.n	8a680 <__udivdi3+0x25c>
   8a5e6:	d043      	beq.n	8a670 <__udivdi3+0x24c>
   8a5e8:	4630      	mov	r0, r6
   8a5ea:	2100      	movs	r1, #0
   8a5ec:	e75c      	b.n	8a4a8 <__udivdi3+0x84>
   8a5ee:	4094      	lsls	r4, r2
   8a5f0:	f1c2 0520 	rsb	r5, r2, #32
   8a5f4:	fa21 f605 	lsr.w	r6, r1, r5
   8a5f8:	fa20 f505 	lsr.w	r5, r0, r5
   8a5fc:	fa01 f102 	lsl.w	r1, r1, r2
   8a600:	0c23      	lsrs	r3, r4, #16
   8a602:	fbb6 fcf3 	udiv	ip, r6, r3
   8a606:	b2a7      	uxth	r7, r4
   8a608:	fb03 661c 	mls	r6, r3, ip, r6
   8a60c:	fb07 f80c 	mul.w	r8, r7, ip
   8a610:	4329      	orrs	r1, r5
   8a612:	0c0d      	lsrs	r5, r1, #16
   8a614:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8a618:	45b0      	cmp	r8, r6
   8a61a:	fa00 f502 	lsl.w	r5, r0, r2
   8a61e:	d908      	bls.n	8a632 <__udivdi3+0x20e>
   8a620:	1936      	adds	r6, r6, r4
   8a622:	f10c 30ff 	add.w	r0, ip, #4294967295
   8a626:	d23e      	bcs.n	8a6a6 <__udivdi3+0x282>
   8a628:	45b0      	cmp	r8, r6
   8a62a:	d93c      	bls.n	8a6a6 <__udivdi3+0x282>
   8a62c:	f1ac 0c02 	sub.w	ip, ip, #2
   8a630:	1936      	adds	r6, r6, r4
   8a632:	ebc8 0206 	rsb	r2, r8, r6
   8a636:	fbb2 f0f3 	udiv	r0, r2, r3
   8a63a:	fb03 2610 	mls	r6, r3, r0, r2
   8a63e:	fb07 f800 	mul.w	r8, r7, r0
   8a642:	b289      	uxth	r1, r1
   8a644:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8a648:	4590      	cmp	r8, r2
   8a64a:	d906      	bls.n	8a65a <__udivdi3+0x236>
   8a64c:	1e46      	subs	r6, r0, #1
   8a64e:	1912      	adds	r2, r2, r4
   8a650:	d227      	bcs.n	8a6a2 <__udivdi3+0x27e>
   8a652:	4590      	cmp	r8, r2
   8a654:	d925      	bls.n	8a6a2 <__udivdi3+0x27e>
   8a656:	3802      	subs	r0, #2
   8a658:	1912      	adds	r2, r2, r4
   8a65a:	ebc8 0202 	rsb	r2, r8, r2
   8a65e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8a662:	e73f      	b.n	8a4e4 <__udivdi3+0xc0>
   8a664:	4638      	mov	r0, r7
   8a666:	e708      	b.n	8a47a <__udivdi3+0x56>
   8a668:	4633      	mov	r3, r6
   8a66a:	e71a      	b.n	8a4a2 <__udivdi3+0x7e>
   8a66c:	4610      	mov	r0, r2
   8a66e:	e761      	b.n	8a534 <__udivdi3+0x110>
   8a670:	fa00 f004 	lsl.w	r0, r0, r4
   8a674:	fa1f fc8c 	uxth.w	ip, ip
   8a678:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8a67c:	4298      	cmp	r0, r3
   8a67e:	d2b3      	bcs.n	8a5e8 <__udivdi3+0x1c4>
   8a680:	1e70      	subs	r0, r6, #1
   8a682:	2100      	movs	r1, #0
   8a684:	e710      	b.n	8a4a8 <__udivdi3+0x84>
   8a686:	4621      	mov	r1, r4
   8a688:	4620      	mov	r0, r4
   8a68a:	e70d      	b.n	8a4a8 <__udivdi3+0x84>
   8a68c:	45a9      	cmp	r9, r5
   8a68e:	f67f af7c 	bls.w	8a58a <__udivdi3+0x166>
   8a692:	3f02      	subs	r7, #2
   8a694:	18ed      	adds	r5, r5, r3
   8a696:	e779      	b.n	8a58c <__udivdi3+0x168>
   8a698:	4588      	cmp	r8, r1
   8a69a:	d988      	bls.n	8a5ae <__udivdi3+0x18a>
   8a69c:	3e02      	subs	r6, #2
   8a69e:	18c9      	adds	r1, r1, r3
   8a6a0:	e786      	b.n	8a5b0 <__udivdi3+0x18c>
   8a6a2:	4630      	mov	r0, r6
   8a6a4:	e7d9      	b.n	8a65a <__udivdi3+0x236>
   8a6a6:	4684      	mov	ip, r0
   8a6a8:	e7c3      	b.n	8a632 <__udivdi3+0x20e>
   8a6aa:	3e02      	subs	r6, #2
   8a6ac:	1912      	adds	r2, r2, r4
   8a6ae:	e72d      	b.n	8a50c <__udivdi3+0xe8>
   8a6b0:	00007325 	.word	0x00007325
   8a6b4:	00006425 	.word	0x00006425
   8a6b8:	000a7325 	.word	0x000a7325
   8a6bc:	00000001 	.word	0x00000001
   8a6c0:	00000002 	.word	0x00000002
   8a6c4:	00000004 	.word	0x00000004
   8a6c8:	00000008 	.word	0x00000008
   8a6cc:	00000010 	.word	0x00000010
   8a6d0:	00000020 	.word	0x00000020
   8a6d4:	00000040 	.word	0x00000040
   8a6d8:	00000080 	.word	0x00000080
   8a6dc:	00000100 	.word	0x00000100
   8a6e0:	00000200 	.word	0x00000200
   8a6e4:	00000400 	.word	0x00000400
   8a6e8:	09097325 	.word	0x09097325
   8a6ec:	25096325 	.word	0x25096325
   8a6f0:	75250975 	.word	0x75250975
   8a6f4:	0d752509 	.word	0x0d752509
   8a6f8:	0000000a 	.word	0x0000000a
   8a6fc:	454c4449 	.word	0x454c4449
   8a700:	00000000 	.word	0x00000000
   8a704:	00000a0d 	.word	0x00000a0d
   8a708:	20726d54 	.word	0x20726d54
   8a70c:	00637653 	.word	0x00637653
   8a710:	20444950 	.word	0x20444950
   8a714:	746e6f43 	.word	0x746e6f43
   8a718:	006c6f72 	.word	0x006c6f72
   8a71c:	6c696146 	.word	0x6c696146
   8a720:	74206465 	.word	0x74206465
   8a724:	7263206f 	.word	0x7263206f
   8a728:	65746165 	.word	0x65746165
   8a72c:	44495020 	.word	0x44495020
   8a730:	6e6f4320 	.word	0x6e6f4320
   8a734:	6c6f7274 	.word	0x6c6f7274
   8a738:	73617420 	.word	0x73617420
   8a73c:	000a0d6b 	.word	0x000a0d6b
   8a740:	746f6c50 	.word	0x746f6c50
   8a744:	6c615620 	.word	0x6c615620
   8a748:	00736575 	.word	0x00736575

0008a74c <_global_impure_ptr>:
   8a74c:	20070018 00000043 00000000              ... C.......

0008a758 <tinytens>:
   8a758:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   8a768:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   8a778:	64ac6f43 0e180628 6900666e 7974696e     Co.d(...nf.inity
   8a788:	006e6100                                .an.

0008a78c <blanks.6650>:
   8a78c:	20202020 20202020 20202020 20202020                     

0008a79c <zeroes.6651>:
   8a79c:	30303030 30303030 30303030 30303030     0000000000000000
   8a7ac:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8a7bc:	32313000 36353433 61393837 65646362     .0123456789abcde
   8a7cc:	20200066                                         f.

0008a7ce <blanks.6678>:
   8a7ce:	20202020 20202020 20202020 20202020                     

0008a7de <zeroes.6679>:
   8a7de:	30303030 30303030 30303030 30303030     0000000000000000

0008a7ee <basefix.6143>:
   8a7ee:	0001000a 00030002 00050004 00070006     ................
   8a7fe:	00090008 000b000a 000d000c 000f000e     ................
   8a80e:	20000010                                         ..

0008a810 <_ctype_>:
   8a810:	20202000 20202020 28282020 20282828     .         ((((( 
   8a820:	20202020 20202020 20202020 20202020                     
   8a830:	10108820 10101010 10101010 10101010      ...............
   8a840:	04040410 04040404 10040404 10101010     ................
   8a850:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8a860:	01010101 01010101 01010101 10101010     ................
   8a870:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8a880:	02020202 02020202 02020202 10101010     ................
   8a890:	00000020 00000000 00000000 00000000      ...............
	...
   8a910:	32313000 36353433 00393837 49534f50     .0123456789.POSI
   8a920:	002e0058 00000000                       X.......

0008a928 <p05.5242>:
   8a928:	00000005 00000019 0000007d 00000000     ........}.......

0008a938 <__mprec_tens>:
   8a938:	00000000 3ff00000 00000000 40240000     .......?......$@
   8a948:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8a958:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8a968:	00000000 412e8480 00000000 416312d0     .......A......cA
   8a978:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8a988:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8a998:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8a9a8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8a9b8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8a9c8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8a9d8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8a9e8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8a9f8:	79d99db4 44ea7843                       ...yCx.D

0008aa00 <__mprec_tinytens>:
   8aa00:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   8aa10:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   8aa20:	64ac6f43 0ac80628                       Co.d(...

0008aa28 <__mprec_bigtens>:
   8aa28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8aa38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8aa48:	7f73bf3c 75154fdd                       <.s..O.u

0008aa50 <blanks.6664>:
   8aa50:	20202020 20202020 20202020 20202020                     

0008aa60 <zeroes.6665>:
   8aa60:	30303030 30303030 30303030 30303030     0000000000000000

0008aa70 <_init>:
   8aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa72:	bf00      	nop
   8aa74:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8aa76:	bc08      	pop	{r3}
   8aa78:	469e      	mov	lr, r3
   8aa7a:	4770      	bx	lr

0008aa7c <__init_array_start>:
   8aa7c:	0008682d 	.word	0x0008682d

0008aa80 <__frame_dummy_init_array_entry>:
   8aa80:	0008016d                                m...

0008aa84 <_fini>:
   8aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa86:	bf00      	nop
   8aa88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8aa8a:	bc08      	pop	{r3}
   8aa8c:	469e      	mov	lr, r3
   8aa8e:	4770      	bx	lr

0008aa90 <__fini_array_start>:
   8aa90:	00080145 	.word	0x00080145
