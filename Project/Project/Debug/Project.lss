
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bd0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083bd0  00083bd0  0000bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008c8  20070000  00083bd8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000015c  200708c8  000844a0  000108c8  2**2
                  ALLOC
  4 .stack        00002004  20070a24  000845fc  000108c8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY
  6 .comment      00000070  00000000  00000000  000108f1  2**0
                  CONTENTS, READONLY
  7 .debug_info   00023847  00000000  00000000  00010961  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006e57  00000000  00000000  000341a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000af93  00000000  00000000  0003afff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000010a8  00000000  00000000  00045f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000db8  00000000  00000000  00047040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00016ceb  00000000  00000000  00047df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000133bb  00000000  00000000  0005eae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006557c  00000000  00000000  00071e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002214  00000000  00000000  000d741c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a28 	.word	0x20072a28
   80004:	000809d5 	.word	0x000809d5
   80008:	000809d1 	.word	0x000809d1
   8000c:	000809d1 	.word	0x000809d1
   80010:	000809d1 	.word	0x000809d1
   80014:	000809d1 	.word	0x000809d1
   80018:	000809d1 	.word	0x000809d1
	...
   8002c:	00080e11 	.word	0x00080e11
   80030:	000809d1 	.word	0x000809d1
   80034:	00000000 	.word	0x00000000
   80038:	00080e4d 	.word	0x00080e4d
   8003c:	00080e89 	.word	0x00080e89
   80040:	000809d1 	.word	0x000809d1
   80044:	000809d1 	.word	0x000809d1
   80048:	000809d1 	.word	0x000809d1
   8004c:	000809d1 	.word	0x000809d1
   80050:	000809d1 	.word	0x000809d1
   80054:	000809d1 	.word	0x000809d1
   80058:	000809d1 	.word	0x000809d1
   8005c:	000809d1 	.word	0x000809d1
   80060:	000809d1 	.word	0x000809d1
   80064:	000809d1 	.word	0x000809d1
   80068:	00000000 	.word	0x00000000
   8006c:	000806e9 	.word	0x000806e9
   80070:	00080705 	.word	0x00080705
   80074:	00080721 	.word	0x00080721
   80078:	0008073d 	.word	0x0008073d
	...
   80084:	000809d1 	.word	0x000809d1
   80088:	000809d1 	.word	0x000809d1
   8008c:	000809d1 	.word	0x000809d1
   80090:	000809d1 	.word	0x000809d1
   80094:	000809d1 	.word	0x000809d1
   80098:	000809d1 	.word	0x000809d1
   8009c:	000809d1 	.word	0x000809d1
   800a0:	000809d1 	.word	0x000809d1
   800a4:	00000000 	.word	0x00000000
   800a8:	000809d1 	.word	0x000809d1
   800ac:	000809d1 	.word	0x000809d1
   800b0:	000809d1 	.word	0x000809d1
   800b4:	000809d1 	.word	0x000809d1
   800b8:	000809d1 	.word	0x000809d1
   800bc:	000809d1 	.word	0x000809d1
   800c0:	000809d1 	.word	0x000809d1
   800c4:	000809d1 	.word	0x000809d1
   800c8:	000809d1 	.word	0x000809d1
   800cc:	000809d1 	.word	0x000809d1
   800d0:	000809d1 	.word	0x000809d1
   800d4:	000809d1 	.word	0x000809d1
   800d8:	000809d1 	.word	0x000809d1
   800dc:	000809d1 	.word	0x000809d1
   800e0:	000809d1 	.word	0x000809d1
   800e4:	000809d1 	.word	0x000809d1
   800e8:	000809d1 	.word	0x000809d1
   800ec:	000809d1 	.word	0x000809d1
   800f0:	000809d1 	.word	0x000809d1

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00083bd8 	.word	0x00083bd8
   80110:	00083bdb 	.word	0x00083bdb
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00083bd8 	.word	0x00083bd8
   8013c:	00083bd8 	.word	0x00083bd8
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708c8 	.word	0x200708c8
   80164:	00000000 	.word	0x00000000
   80168:	00083bd8 	.word	0x00083bd8

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00083bd8 	.word	0x00083bd8
   80198:	200708cc 	.word	0x200708cc
   8019c:	00083bd8 	.word	0x00083bd8
   801a0:	00000000 	.word	0x00000000

000801a4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   801a4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   801a6:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   801aa:	f2c0 5001 	movt	r0, #1281	; 0x501
   801ae:	f640 43d5 	movw	r3, #3285	; 0xcd5
   801b2:	f2c0 0308 	movt	r3, #8
   801b6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801b8:	f04f 0000 	mov.w	r0, #0
   801bc:	f04f 013e 	mov.w	r1, #62	; 0x3e
   801c0:	f240 72f9 	movw	r2, #2041	; 0x7f9
   801c4:	f2c0 0208 	movt	r2, #8
   801c8:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   801ca:	f640 0469 	movw	r4, #2153	; 0x869
   801ce:	f2c0 0408 	movt	r4, #8
   801d2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   801d4:	2800      	cmp	r0, #0
   801d6:	d0fc      	beq.n	801d2 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   801d8:	f640 0079 	movw	r0, #2169	; 0x879
   801dc:	f2c0 0008 	movt	r0, #8
   801e0:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   801e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   801e6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   801ea:	f643 7301 	movw	r3, #16129	; 0x3f01
   801ee:	f2c2 030d 	movt	r3, #8205	; 0x200d
   801f2:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   801f4:	f640 0489 	movw	r4, #2185	; 0x889
   801f8:	f2c0 0408 	movt	r4, #8
   801fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   801fe:	2800      	cmp	r0, #0
   80200:	d0fc      	beq.n	801fc <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80202:	f04f 0010 	mov.w	r0, #16
   80206:	f240 7259 	movw	r2, #1881	; 0x759
   8020a:	f2c0 0208 	movt	r2, #8
   8020e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80210:	f640 300d 	movw	r0, #2829	; 0xb0d
   80214:	f2c0 0008 	movt	r0, #8
   80218:	4780      	blx	r0
   8021a:	bd10      	pop	{r4, pc}

0008021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8021c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80220:	460c      	mov	r4, r1
   80222:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80224:	bb48      	cbnz	r0, 8027a <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   80226:	2a00      	cmp	r2, #0
   80228:	dd2b      	ble.n	80282 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   8022a:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   8022c:	f640 261c 	movw	r6, #2588	; 0xa1c
   80230:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80234:	f640 2514 	movw	r5, #2580	; 0xa14
   80238:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8023c:	ea6f 0901 	mvn.w	r9, r1
   80240:	eb07 0009 	add.w	r0, r7, r9
   80244:	f000 0901 	and.w	r9, r0, #1
   80248:	6830      	ldr	r0, [r6, #0]
   8024a:	682b      	ldr	r3, [r5, #0]
   8024c:	4798      	blx	r3
		ptr++;
   8024e:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80252:	42bc      	cmp	r4, r7
   80254:	d119      	bne.n	8028a <_read+0x6e>
   80256:	e00d      	b.n	80274 <_read+0x58>
		ptr_get(stdio_base, ptr);
   80258:	6830      	ldr	r0, [r6, #0]
   8025a:	682b      	ldr	r3, [r5, #0]
   8025c:	4621      	mov	r1, r4
   8025e:	4798      	blx	r3
		ptr++;
   80260:	f104 0401 	add.w	r4, r4, #1
   80264:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80266:	6830      	ldr	r0, [r6, #0]
   80268:	682a      	ldr	r2, [r5, #0]
   8026a:	4790      	blx	r2
		ptr++;
   8026c:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80270:	42bc      	cmp	r4, r7
   80272:	d1f1      	bne.n	80258 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80274:	4640      	mov	r0, r8
   80276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8027a:	f04f 30ff 	mov.w	r0, #4294967295
   8027e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   80282:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8028a:	f1b9 0f00 	cmp.w	r9, #0
   8028e:	d0e3      	beq.n	80258 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80290:	6830      	ldr	r0, [r6, #0]
   80292:	682a      	ldr	r2, [r5, #0]
   80294:	4621      	mov	r1, r4
   80296:	4790      	blx	r2
		ptr++;
   80298:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8029c:	42bc      	cmp	r4, r7
   8029e:	d1db      	bne.n	80258 <_read+0x3c>
   802a0:	e7e8      	b.n	80274 <_read+0x58>
   802a2:	bf00      	nop

000802a4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   802a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   802a8:	460d      	mov	r5, r1
   802aa:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802ac:	f100 30ff 	add.w	r0, r0, #4294967295
   802b0:	2802      	cmp	r0, #2
   802b2:	d824      	bhi.n	802fe <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   802b4:	b332      	cbz	r2, 80304 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802b6:	f640 261c 	movw	r6, #2588	; 0xa1c
   802ba:	f2c2 0607 	movt	r6, #8199	; 0x2007
   802be:	f640 2718 	movw	r7, #2584	; 0xa18
   802c2:	f2c2 0707 	movt	r7, #8199	; 0x2007
   802c6:	f04f 0400 	mov.w	r4, #0
   802ca:	f102 39ff 	add.w	r9, r2, #4294967295
   802ce:	f009 0901 	and.w	r9, r9, #1
   802d2:	6830      	ldr	r0, [r6, #0]
   802d4:	683b      	ldr	r3, [r7, #0]
   802d6:	5d09      	ldrb	r1, [r1, r4]
   802d8:	4798      	blx	r3
   802da:	42a0      	cmp	r0, r4
   802dc:	da1a      	bge.n	80314 <_write+0x70>
   802de:	e014      	b.n	8030a <_write+0x66>
   802e0:	6830      	ldr	r0, [r6, #0]
   802e2:	683b      	ldr	r3, [r7, #0]
   802e4:	5d29      	ldrb	r1, [r5, r4]
   802e6:	4798      	blx	r3
   802e8:	2800      	cmp	r0, #0
   802ea:	db0e      	blt.n	8030a <_write+0x66>
			return -1;
		}
		++nChars;
   802ec:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802f0:	6830      	ldr	r0, [r6, #0]
   802f2:	683a      	ldr	r2, [r7, #0]
   802f4:	5d29      	ldrb	r1, [r5, r4]
   802f6:	4790      	blx	r2
   802f8:	2800      	cmp	r0, #0
   802fa:	da1d      	bge.n	80338 <_write+0x94>
   802fc:	e005      	b.n	8030a <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   802fe:	f04f 34ff 	mov.w	r4, #4294967295
   80302:	e004      	b.n	8030e <_write+0x6a>
	}

	for (; len != 0; --len) {
   80304:	f04f 0400 	mov.w	r4, #0
   80308:	e001      	b.n	8030e <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8030a:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8030e:	4620      	mov	r0, r4
   80310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80314:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80318:	45a0      	cmp	r8, r4
   8031a:	d0f8      	beq.n	8030e <_write+0x6a>
   8031c:	f1b9 0f00 	cmp.w	r9, #0
   80320:	d0de      	beq.n	802e0 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80322:	6830      	ldr	r0, [r6, #0]
   80324:	683a      	ldr	r2, [r7, #0]
   80326:	5d29      	ldrb	r1, [r5, r4]
   80328:	4790      	blx	r2
   8032a:	2800      	cmp	r0, #0
   8032c:	dbed      	blt.n	8030a <_write+0x66>
			return -1;
		}
		++nChars;
   8032e:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80332:	45a0      	cmp	r8, r4
   80334:	d1d4      	bne.n	802e0 <_write+0x3c>
   80336:	e7ea      	b.n	8030e <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80338:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8033c:	45a0      	cmp	r8, r4
   8033e:	d1cf      	bne.n	802e0 <_write+0x3c>
   80340:	e7e5      	b.n	8030e <_write+0x6a>
   80342:	bf00      	nop

00080344 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80344:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80346:	f641 2350 	movw	r3, #6736	; 0x1a50
   8034a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8034e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80352:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80354:	f04f 000b 	mov.w	r0, #11
   80358:	f640 0499 	movw	r4, #2201	; 0x899
   8035c:	f2c0 0408 	movt	r4, #8
   80360:	47a0      	blx	r4
   80362:	f04f 000c 	mov.w	r0, #12
   80366:	47a0      	blx	r4
   80368:	f04f 000d 	mov.w	r0, #13
   8036c:	47a0      	blx	r4
   8036e:	f04f 000e 	mov.w	r0, #14
   80372:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80374:	f04f 003b 	mov.w	r0, #59	; 0x3b
   80378:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8037c:	f240 44cd 	movw	r4, #1229	; 0x4cd
   80380:	f2c0 0408 	movt	r4, #8
   80384:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80386:	f04f 0055 	mov.w	r0, #85	; 0x55
   8038a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8038e:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80390:	f04f 0056 	mov.w	r0, #86	; 0x56
   80394:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80398:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8039a:	f04f 0068 	mov.w	r0, #104	; 0x68
   8039e:	f04f 0179 	mov.w	r1, #121	; 0x79
   803a2:	f6c2 0100 	movt	r1, #10240	; 0x2800
   803a6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   803a8:	f04f 005c 	mov.w	r0, #92	; 0x5c
   803ac:	f04f 0101 	mov.w	r1, #1
   803b0:	f6c2 0100 	movt	r1, #10240	; 0x2800
   803b4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   803b6:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   803ba:	f2c4 000e 	movt	r0, #16398	; 0x400e
   803be:	f44f 7140 	mov.w	r1, #768	; 0x300
   803c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   803c6:	f240 53cd 	movw	r3, #1485	; 0x5cd
   803ca:	f2c0 0308 	movt	r3, #8
   803ce:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   803d0:	f04f 002b 	mov.w	r0, #43	; 0x2b
   803d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803d8:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   803da:	f04f 002a 	mov.w	r0, #42	; 0x2a
   803de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803e2:	47a0      	blx	r4
   803e4:	bd10      	pop	{r4, pc}
   803e6:	bf00      	nop

000803e8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803e8:	b10a      	cbz	r2, 803ee <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   803ea:	6641      	str	r1, [r0, #100]	; 0x64
   803ec:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803ee:	6601      	str	r1, [r0, #96]	; 0x60
   803f0:	4770      	bx	lr
   803f2:	bf00      	nop

000803f4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   803f4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   803f6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   803fa:	d016      	beq.n	8042a <pio_set_peripheral+0x36>
   803fc:	d804      	bhi.n	80408 <pio_set_peripheral+0x14>
   803fe:	b1c9      	cbz	r1, 80434 <pio_set_peripheral+0x40>
   80400:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80404:	d115      	bne.n	80432 <pio_set_peripheral+0x3e>
   80406:	e009      	b.n	8041c <pio_set_peripheral+0x28>
   80408:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8040c:	d012      	beq.n	80434 <pio_set_peripheral+0x40>
   8040e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80412:	d00f      	beq.n	80434 <pio_set_peripheral+0x40>
   80414:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80418:	d10b      	bne.n	80432 <pio_set_peripheral+0x3e>
   8041a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8041c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8041e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80420:	400b      	ands	r3, r1
   80422:	ea23 0302 	bic.w	r3, r3, r2
   80426:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80428:	e003      	b.n	80432 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8042a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8042c:	ea42 0103 	orr.w	r1, r2, r3
   80430:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80432:	6042      	str	r2, [r0, #4]
   80434:	4770      	bx	lr
   80436:	bf00      	nop

00080438 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80438:	6441      	str	r1, [r0, #68]	; 0x44
   8043a:	4770      	bx	lr

0008043c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8043e:	4604      	mov	r4, r0
   80440:	460d      	mov	r5, r1
   80442:	4616      	mov	r6, r2
   80444:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   80446:	f240 4339 	movw	r3, #1081	; 0x439
   8044a:	f2c0 0308 	movt	r3, #8
   8044e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80450:	4620      	mov	r0, r4
   80452:	4629      	mov	r1, r5
   80454:	9a06      	ldr	r2, [sp, #24]
   80456:	f240 33e9 	movw	r3, #1001	; 0x3e9
   8045a:	f2c0 0308 	movt	r3, #8
   8045e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80460:	b10f      	cbz	r7, 80466 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   80462:	6525      	str	r5, [r4, #80]	; 0x50
   80464:	e000      	b.n	80468 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80466:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80468:	b10e      	cbz	r6, 8046e <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   8046a:	6325      	str	r5, [r4, #48]	; 0x30
   8046c:	e000      	b.n	80470 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8046e:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80470:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   80472:	6025      	str	r5, [r4, #0]
   80474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80476:	bf00      	nop

00080478 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80478:	b570      	push	{r4, r5, r6, lr}
   8047a:	4604      	mov	r4, r0
   8047c:	460d      	mov	r5, r1
   8047e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   80480:	f240 4339 	movw	r3, #1081	; 0x439
   80484:	f2c0 0308 	movt	r3, #8
   80488:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8048a:	4620      	mov	r0, r4
   8048c:	4629      	mov	r1, r5
   8048e:	f006 0201 	and.w	r2, r6, #1
   80492:	f240 33e9 	movw	r3, #1001	; 0x3e9
   80496:	f2c0 0308 	movt	r3, #8
   8049a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8049c:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   804a0:	bf14      	ite	ne
   804a2:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   804a4:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   804a6:	f016 0f02 	tst.w	r6, #2
   804aa:	d002      	beq.n	804b2 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   804ac:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   804b0:	e004      	b.n	804bc <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   804b2:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   804b6:	bf18      	it	ne
   804b8:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   804bc:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   804be:	6025      	str	r5, [r4, #0]
   804c0:	bd70      	pop	{r4, r5, r6, pc}
   804c2:	bf00      	nop

000804c4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   804c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   804c6:	4770      	bx	lr

000804c8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   804c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   804ca:	4770      	bx	lr

000804cc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   804cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   804ce:	b083      	sub	sp, #12
   804d0:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   804d2:	ea4f 1650 	mov.w	r6, r0, lsr #5
   804d6:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   804da:	f201 7207 	addw	r2, r1, #1799	; 0x707
   804de:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   804e2:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   804e6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   804ea:	d042      	beq.n	80572 <pio_configure_pin+0xa6>
   804ec:	d806      	bhi.n	804fc <pio_configure_pin+0x30>
   804ee:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   804f2:	d00a      	beq.n	8050a <pio_configure_pin+0x3e>
   804f4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   804f8:	d164      	bne.n	805c4 <pio_configure_pin+0xf8>
   804fa:	e020      	b.n	8053e <pio_configure_pin+0x72>
   804fc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80500:	d046      	beq.n	80590 <pio_configure_pin+0xc4>
   80502:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80506:	d15d      	bne.n	805c4 <pio_configure_pin+0xf8>
   80508:	e042      	b.n	80590 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8050a:	f000 071f 	and.w	r7, r0, #31
   8050e:	f04f 0401 	mov.w	r4, #1
   80512:	fa04 f707 	lsl.w	r7, r4, r7
   80516:	4630      	mov	r0, r6
   80518:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8051c:	463a      	mov	r2, r7
   8051e:	f240 33f5 	movw	r3, #1013	; 0x3f5
   80522:	f2c0 0308 	movt	r3, #8
   80526:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80528:	4630      	mov	r0, r6
   8052a:	4639      	mov	r1, r7
   8052c:	ea05 0204 	and.w	r2, r5, r4
   80530:	f240 33e9 	movw	r3, #1001	; 0x3e9
   80534:	f2c0 0308 	movt	r3, #8
   80538:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8053a:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   8053c:	e044      	b.n	805c8 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8053e:	f000 001f 	and.w	r0, r0, #31
   80542:	f04f 0401 	mov.w	r4, #1
   80546:	fa04 f700 	lsl.w	r7, r4, r0
   8054a:	4630      	mov	r0, r6
   8054c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80550:	463a      	mov	r2, r7
   80552:	f240 33f5 	movw	r3, #1013	; 0x3f5
   80556:	f2c0 0308 	movt	r3, #8
   8055a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8055c:	4630      	mov	r0, r6
   8055e:	4639      	mov	r1, r7
   80560:	ea05 0204 	and.w	r2, r5, r4
   80564:	f240 33e9 	movw	r3, #1001	; 0x3e9
   80568:	f2c0 0308 	movt	r3, #8
   8056c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8056e:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80570:	e02a      	b.n	805c8 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80572:	f000 021f 	and.w	r2, r0, #31
   80576:	f04f 0401 	mov.w	r4, #1
   8057a:	4630      	mov	r0, r6
   8057c:	fa04 f102 	lsl.w	r1, r4, r2
   80580:	462a      	mov	r2, r5
   80582:	f240 4379 	movw	r3, #1145	; 0x479
   80586:	f2c0 0308 	movt	r3, #8
   8058a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8058c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8058e:	e01b      	b.n	805c8 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80590:	f000 021f 	and.w	r2, r0, #31
   80594:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80598:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8059c:	ea05 0104 	and.w	r1, r5, r4
   805a0:	9100      	str	r1, [sp, #0]
   805a2:	4630      	mov	r0, r6
   805a4:	fa04 f102 	lsl.w	r1, r4, r2
   805a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   805ac:	bf14      	ite	ne
   805ae:	2200      	movne	r2, #0
   805b0:	2201      	moveq	r2, #1
   805b2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   805b6:	f240 453d 	movw	r5, #1085	; 0x43d
   805ba:	f2c0 0508 	movt	r5, #8
   805be:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   805c0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   805c2:	e001      	b.n	805c8 <pio_configure_pin+0xfc>

	default:
		return 0;
   805c4:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   805c8:	b003      	add	sp, #12
   805ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000805cc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   805cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   805ce:	b083      	sub	sp, #12
   805d0:	4607      	mov	r7, r0
   805d2:	460e      	mov	r6, r1
   805d4:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   805d6:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   805da:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   805de:	d036      	beq.n	8064e <pio_configure_pin_group+0x82>
   805e0:	d806      	bhi.n	805f0 <pio_configure_pin_group+0x24>
   805e2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   805e6:	d00a      	beq.n	805fe <pio_configure_pin_group+0x32>
   805e8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   805ec:	d14d      	bne.n	8068a <pio_configure_pin_group+0xbe>
   805ee:	e01a      	b.n	80626 <pio_configure_pin_group+0x5a>
   805f0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   805f4:	d033      	beq.n	8065e <pio_configure_pin_group+0x92>
   805f6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   805fa:	d146      	bne.n	8068a <pio_configure_pin_group+0xbe>
   805fc:	e02f      	b.n	8065e <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   805fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80602:	4632      	mov	r2, r6
   80604:	f240 33f5 	movw	r3, #1013	; 0x3f5
   80608:	f2c0 0308 	movt	r3, #8
   8060c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8060e:	4638      	mov	r0, r7
   80610:	4631      	mov	r1, r6
   80612:	f005 0201 	and.w	r2, r5, #1
   80616:	f240 33e9 	movw	r3, #1001	; 0x3e9
   8061a:	f2c0 0308 	movt	r3, #8
   8061e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80620:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80624:	e033      	b.n	8068e <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80626:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8062a:	4632      	mov	r2, r6
   8062c:	f240 33f5 	movw	r3, #1013	; 0x3f5
   80630:	f2c0 0308 	movt	r3, #8
   80634:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80636:	4638      	mov	r0, r7
   80638:	4631      	mov	r1, r6
   8063a:	f005 0201 	and.w	r2, r5, #1
   8063e:	f240 33e9 	movw	r3, #1001	; 0x3e9
   80642:	f2c0 0308 	movt	r3, #8
   80646:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80648:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   8064c:	e01f      	b.n	8068e <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8064e:	f240 4379 	movw	r3, #1145	; 0x479
   80652:	f2c0 0308 	movt	r3, #8
   80656:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80658:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8065c:	e017      	b.n	8068e <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8065e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80662:	f005 0001 	and.w	r0, r5, #1
   80666:	9000      	str	r0, [sp, #0]
   80668:	4638      	mov	r0, r7
   8066a:	4631      	mov	r1, r6
   8066c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80670:	bf14      	ite	ne
   80672:	2200      	movne	r2, #0
   80674:	2201      	moveq	r2, #1
   80676:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8067a:	f240 443d 	movw	r4, #1085	; 0x43d
   8067e:	f2c0 0408 	movt	r4, #8
   80682:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80684:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80688:	e001      	b.n	8068e <pio_configure_pin_group+0xc2>

	default:
		return 0;
   8068a:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   8068e:	b003      	add	sp, #12
   80690:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80692:	bf00      	nop

00080694 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80696:	4604      	mov	r4, r0
   80698:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8069a:	f240 43c5 	movw	r3, #1221	; 0x4c5
   8069e:	f2c0 0308 	movt	r3, #8
   806a2:	4798      	blx	r3
   806a4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   806a6:	4620      	mov	r0, r4
   806a8:	f240 41c9 	movw	r1, #1225	; 0x4c9
   806ac:	f2c0 0108 	movt	r1, #8
   806b0:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   806b2:	4005      	ands	r5, r0
   806b4:	d014      	beq.n	806e0 <pio_handler_process+0x4c>
   806b6:	4c0b      	ldr	r4, [pc, #44]	; (806e4 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   806b8:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   806ba:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   806be:	42b0      	cmp	r0, r6
   806c0:	d10a      	bne.n	806d8 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   806c2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   806c6:	4229      	tst	r1, r5
   806c8:	d006      	beq.n	806d8 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   806ca:	6822      	ldr	r2, [r4, #0]
   806cc:	4630      	mov	r0, r6
   806ce:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   806d0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   806d4:	ea25 0503 	bic.w	r5, r5, r3
   806d8:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   806dc:	2d00      	cmp	r5, #0
   806de:	d1eb      	bne.n	806b8 <pio_handler_process+0x24>
   806e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806e2:	bf00      	nop
   806e4:	200708f0 	.word	0x200708f0

000806e8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   806e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   806ea:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   806ee:	f2c4 000e 	movt	r0, #16398	; 0x400e
   806f2:	f04f 010b 	mov.w	r1, #11
   806f6:	f240 6395 	movw	r3, #1685	; 0x695
   806fa:	f2c0 0308 	movt	r3, #8
   806fe:	4798      	blx	r3
   80700:	bd08      	pop	{r3, pc}
   80702:	bf00      	nop

00080704 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80704:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80706:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   8070a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8070e:	f04f 010c 	mov.w	r1, #12
   80712:	f240 6395 	movw	r3, #1685	; 0x695
   80716:	f2c0 0308 	movt	r3, #8
   8071a:	4798      	blx	r3
   8071c:	bd08      	pop	{r3, pc}
   8071e:	bf00      	nop

00080720 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80720:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80722:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80726:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8072a:	f04f 010d 	mov.w	r1, #13
   8072e:	f240 6395 	movw	r3, #1685	; 0x695
   80732:	f2c0 0308 	movt	r3, #8
   80736:	4798      	blx	r3
   80738:	bd08      	pop	{r3, pc}
   8073a:	bf00      	nop

0008073c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8073c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8073e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   80742:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80746:	f04f 010e 	mov.w	r1, #14
   8074a:	f240 6395 	movw	r3, #1685	; 0x695
   8074e:	f2c0 0308 	movt	r3, #8
   80752:	4798      	blx	r3
   80754:	bd08      	pop	{r3, pc}
   80756:	bf00      	nop

00080758 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80758:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8075c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80762:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80766:	4308      	orrs	r0, r1
   80768:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8076a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   8076c:	f010 0f08 	tst.w	r0, #8
   80770:	d007      	beq.n	80782 <pmc_switch_mck_to_pllack+0x2a>
   80772:	e010      	b.n	80796 <pmc_switch_mck_to_pllack+0x3e>
   80774:	f100 33ff 	add.w	r3, r0, #4294967295
   80778:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8077a:	f010 0f08 	tst.w	r0, #8
   8077e:	d038      	beq.n	807f2 <pmc_switch_mck_to_pllack+0x9a>
   80780:	e009      	b.n	80796 <pmc_switch_mck_to_pllack+0x3e>
   80782:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80786:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8078a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8078e:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80790:	f011 0f08 	tst.w	r1, #8
   80794:	d0ee      	beq.n	80774 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80796:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8079a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8079e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   807a0:	f022 0303 	bic.w	r3, r2, #3
   807a4:	f043 0002 	orr.w	r0, r3, #2
   807a8:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   807aa:	6e89      	ldr	r1, [r1, #104]	; 0x68
   807ac:	f011 0f08 	tst.w	r1, #8
   807b0:	d009      	beq.n	807c6 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   807b2:	f04f 0000 	mov.w	r0, #0
   807b6:	4770      	bx	lr
   807b8:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   807bc:	6e91      	ldr	r1, [r2, #104]	; 0x68
   807be:	f011 0f08 	tst.w	r1, #8
   807c2:	d013      	beq.n	807ec <pmc_switch_mck_to_pllack+0x94>
   807c4:	e009      	b.n	807da <pmc_switch_mck_to_pllack+0x82>
   807c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   807ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   807ce:	f2c4 020e 	movt	r2, #16398	; 0x400e
   807d2:	6e90      	ldr	r0, [r2, #104]	; 0x68
   807d4:	f010 0f08 	tst.w	r0, #8
   807d8:	d0ee      	beq.n	807b8 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   807da:	f04f 0000 	mov.w	r0, #0
   807de:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   807e0:	f04f 0001 	mov.w	r0, #1
   807e4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   807e6:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   807ea:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   807ec:	3b01      	subs	r3, #1
   807ee:	d1f0      	bne.n	807d2 <pmc_switch_mck_to_pllack+0x7a>
   807f0:	e7f9      	b.n	807e6 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   807f2:	1e58      	subs	r0, r3, #1
   807f4:	d1cb      	bne.n	8078e <pmc_switch_mck_to_pllack+0x36>
   807f6:	e7f3      	b.n	807e0 <pmc_switch_mck_to_pllack+0x88>

000807f8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   807f8:	b188      	cbz	r0, 8081e <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   807fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   807fe:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80802:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80804:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80808:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   8080c:	4002      	ands	r2, r0
   8080e:	f04f 0302 	mov.w	r3, #2
   80812:	f2c0 1337 	movt	r3, #311	; 0x137
   80816:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8081a:	6208      	str	r0, [r1, #32]
   8081c:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8081e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80822:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80826:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80828:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   8082c:	f020 0203 	bic.w	r2, r0, #3
   80830:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80834:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80838:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8083c:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80840:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80842:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80846:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8084a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8084c:	f013 0f01 	tst.w	r3, #1
   80850:	d0fb      	beq.n	8084a <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80852:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80856:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8085a:	6a08      	ldr	r0, [r1, #32]
   8085c:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80860:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80864:	620b      	str	r3, [r1, #32]
   80866:	4770      	bx	lr

00080868 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80868:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8086c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80870:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80872:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80876:	4770      	bx	lr

00080878 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80878:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8087c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80880:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80884:	629a      	str	r2, [r3, #40]	; 0x28
   80886:	4770      	bx	lr

00080888 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80888:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8088c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80890:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80892:	f000 0002 	and.w	r0, r0, #2
   80896:	4770      	bx	lr

00080898 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80898:	282c      	cmp	r0, #44	; 0x2c
   8089a:	d835      	bhi.n	80908 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   8089c:	281f      	cmp	r0, #31
   8089e:	d817      	bhi.n	808d0 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   808a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   808a4:	f2c4 010e 	movt	r1, #16398	; 0x400e
   808a8:	698a      	ldr	r2, [r1, #24]
   808aa:	f04f 0301 	mov.w	r3, #1
   808ae:	fa03 f300 	lsl.w	r3, r3, r0
   808b2:	401a      	ands	r2, r3
   808b4:	4293      	cmp	r3, r2
   808b6:	d02a      	beq.n	8090e <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   808b8:	f04f 0101 	mov.w	r1, #1
   808bc:	fa01 f000 	lsl.w	r0, r1, r0
   808c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   808c4:	f2c4 020e 	movt	r2, #16398	; 0x400e
   808c8:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   808ca:	f04f 0000 	mov.w	r0, #0
   808ce:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   808d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   808d4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   808d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   808dc:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   808e0:	f04f 0101 	mov.w	r1, #1
   808e4:	fa01 f100 	lsl.w	r1, r1, r0
   808e8:	400a      	ands	r2, r1
   808ea:	4291      	cmp	r1, r2
   808ec:	d012      	beq.n	80914 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   808ee:	f04f 0301 	mov.w	r3, #1
   808f2:	fa03 f000 	lsl.w	r0, r3, r0
   808f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   808fa:	f2c4 020e 	movt	r2, #16398	; 0x400e
   808fe:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80902:	f04f 0000 	mov.w	r0, #0
   80906:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80908:	f04f 0001 	mov.w	r0, #1
   8090c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8090e:	f04f 0000 	mov.w	r0, #0
   80912:	4770      	bx	lr
   80914:	f04f 0000 	mov.w	r0, #0
}
   80918:	4770      	bx	lr
   8091a:	bf00      	nop

0008091c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8091c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8091e:	f04f 03ac 	mov.w	r3, #172	; 0xac
   80922:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80924:	680a      	ldr	r2, [r1, #0]
   80926:	684c      	ldr	r4, [r1, #4]
   80928:	fbb2 f3f4 	udiv	r3, r2, r4
   8092c:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80930:	f103 34ff 	add.w	r4, r3, #4294967295
   80934:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80938:	4294      	cmp	r4, r2
   8093a:	d80c      	bhi.n	80956 <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   8093c:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8093e:	6889      	ldr	r1, [r1, #8]
   80940:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80942:	f240 2302 	movw	r3, #514	; 0x202
   80946:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8094a:	f04f 0250 	mov.w	r2, #80	; 0x50
   8094e:	6002      	str	r2, [r0, #0]

	return 0;
   80950:	f04f 0000 	mov.w	r0, #0
   80954:	e001      	b.n	8095a <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80956:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8095a:	bc10      	pop	{r4}
   8095c:	4770      	bx	lr
   8095e:	bf00      	nop

00080960 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80960:	6943      	ldr	r3, [r0, #20]
   80962:	f013 0f02 	tst.w	r3, #2
   80966:	d003      	beq.n	80970 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80968:	61c1      	str	r1, [r0, #28]
	return 0;
   8096a:	f04f 0000 	mov.w	r0, #0
   8096e:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80970:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80974:	4770      	bx	lr
   80976:	bf00      	nop

00080978 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80978:	6943      	ldr	r3, [r0, #20]
   8097a:	f013 0f01 	tst.w	r3, #1
   8097e:	d004      	beq.n	8098a <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80980:	6980      	ldr	r0, [r0, #24]
   80982:	7008      	strb	r0, [r1, #0]
	return 0;
   80984:	f04f 0000 	mov.w	r0, #0
   80988:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8098a:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8098e:	4770      	bx	lr

00080990 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80990:	6943      	ldr	r3, [r0, #20]
   80992:	f013 0f02 	tst.w	r3, #2
   80996:	d007      	beq.n	809a8 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80998:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   8099c:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   809a0:	61c2      	str	r2, [r0, #28]
	return 0;
   809a2:	f04f 0000 	mov.w	r0, #0
   809a6:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   809a8:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   809ac:	4770      	bx	lr
   809ae:	bf00      	nop

000809b0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   809b0:	6943      	ldr	r3, [r0, #20]
   809b2:	f013 0f01 	tst.w	r3, #1
   809b6:	d008      	beq.n	809ca <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   809b8:	6980      	ldr	r0, [r0, #24]
   809ba:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   809be:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   809c2:	600b      	str	r3, [r1, #0]

	return 0;
   809c4:	f04f 0000 	mov.w	r0, #0
   809c8:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   809ca:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   809ce:	4770      	bx	lr

000809d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   809d0:	e7fe      	b.n	809d0 <Dummy_Handler>
   809d2:	bf00      	nop

000809d4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   809d4:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   809d6:	f240 0300 	movw	r3, #0
   809da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   809de:	f643 32d8 	movw	r2, #15320	; 0x3bd8
   809e2:	f2c0 0208 	movt	r2, #8
   809e6:	429a      	cmp	r2, r3
   809e8:	d003      	beq.n	809f2 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   809ea:	4840      	ldr	r0, [pc, #256]	; (80aec <Reset_Handler+0x118>)
   809ec:	4940      	ldr	r1, [pc, #256]	; (80af0 <Reset_Handler+0x11c>)
   809ee:	4281      	cmp	r1, r0
   809f0:	d304      	bcc.n	809fc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   809f2:	4b40      	ldr	r3, [pc, #256]	; (80af4 <Reset_Handler+0x120>)
   809f4:	4a40      	ldr	r2, [pc, #256]	; (80af8 <Reset_Handler+0x124>)
   809f6:	429a      	cmp	r2, r3
   809f8:	d325      	bcc.n	80a46 <Reset_Handler+0x72>
   809fa:	e042      	b.n	80a82 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   809fc:	4d3f      	ldr	r5, [pc, #252]	; (80afc <Reset_Handler+0x128>)
   809fe:	4c40      	ldr	r4, [pc, #256]	; (80b00 <Reset_Handler+0x12c>)
   80a00:	1b63      	subs	r3, r4, r5
   80a02:	f023 0503 	bic.w	r5, r3, #3
   80a06:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80a0a:	f240 0200 	movw	r2, #0
   80a0e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80a12:	f643 31d8 	movw	r1, #15320	; 0x3bd8
   80a16:	f2c0 0108 	movt	r1, #8
   80a1a:	f105 0004 	add.w	r0, r5, #4
   80a1e:	f3c5 0480 	ubfx	r4, r5, #2, #1
   80a22:	585d      	ldr	r5, [r3, r1]
   80a24:	509d      	str	r5, [r3, r2]
   80a26:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a2a:	4283      	cmp	r3, r0
   80a2c:	d155      	bne.n	80ada <Reset_Handler+0x106>
   80a2e:	e7e0      	b.n	809f2 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   80a30:	585d      	ldr	r5, [r3, r1]
   80a32:	509d      	str	r5, [r3, r2]
   80a34:	f103 0304 	add.w	r3, r3, #4
   80a38:	585c      	ldr	r4, [r3, r1]
   80a3a:	509c      	str	r4, [r3, r2]
   80a3c:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a40:	4283      	cmp	r3, r0
   80a42:	d1f5      	bne.n	80a30 <Reset_Handler+0x5c>
   80a44:	e7d5      	b.n	809f2 <Reset_Handler+0x1e>
   80a46:	4d2f      	ldr	r5, [pc, #188]	; (80b04 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80a48:	492f      	ldr	r1, [pc, #188]	; (80b08 <Reset_Handler+0x134>)
   80a4a:	1b48      	subs	r0, r1, r5
   80a4c:	f020 0403 	bic.w	r4, r0, #3
   80a50:	f640 03c8 	movw	r3, #2248	; 0x8c8
   80a54:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a58:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80a5a:	f04f 0100 	mov.w	r1, #0
   80a5e:	1b50      	subs	r0, r2, r5
   80a60:	f1a0 0004 	sub.w	r0, r0, #4
   80a64:	f3c0 0480 	ubfx	r4, r0, #2, #1
   80a68:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a6c:	4295      	cmp	r5, r2
   80a6e:	d12d      	bne.n	80acc <Reset_Handler+0xf8>
   80a70:	e007      	b.n	80a82 <Reset_Handler+0xae>
   80a72:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   80a76:	6069      	str	r1, [r5, #4]
   80a78:	f105 0508 	add.w	r5, r5, #8
   80a7c:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a7e:	4295      	cmp	r5, r2
   80a80:	d1f7      	bne.n	80a72 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80a82:	f240 0500 	movw	r5, #0
   80a86:	f2c0 0508 	movt	r5, #8
   80a8a:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   80a8e:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   80a92:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   80a96:	f2ce 0000 	movt	r0, #57344	; 0xe000
   80a9a:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80a9c:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   80aa0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   80aa4:	d207      	bcs.n	80ab6 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80aa6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   80aaa:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80aae:	689d      	ldr	r5, [r3, #8]
   80ab0:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   80ab4:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80ab6:	f241 31e9 	movw	r1, #5097	; 0x13e9
   80aba:	f2c0 0108 	movt	r1, #8
   80abe:	4788      	blx	r1

	/* Branch to main function */
	main();
   80ac0:	f241 3079 	movw	r0, #4985	; 0x1379
   80ac4:	f2c0 0008 	movt	r0, #8
   80ac8:	4780      	blx	r0
   80aca:	e7fe      	b.n	80aca <Reset_Handler+0xf6>
   80acc:	2c00      	cmp	r4, #0
   80ace:	d0d0      	beq.n	80a72 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80ad0:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ad4:	4295      	cmp	r5, r2
   80ad6:	d1cc      	bne.n	80a72 <Reset_Handler+0x9e>
   80ad8:	e7d3      	b.n	80a82 <Reset_Handler+0xae>
   80ada:	2c00      	cmp	r4, #0
   80adc:	d0a8      	beq.n	80a30 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80ade:	585c      	ldr	r4, [r3, r1]
   80ae0:	509c      	str	r4, [r3, r2]
   80ae2:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80ae6:	4283      	cmp	r3, r0
   80ae8:	d1a2      	bne.n	80a30 <Reset_Handler+0x5c>
   80aea:	e782      	b.n	809f2 <Reset_Handler+0x1e>
   80aec:	200708c8 	.word	0x200708c8
   80af0:	20070000 	.word	0x20070000
   80af4:	20070a24 	.word	0x20070a24
   80af8:	200708c8 	.word	0x200708c8
   80afc:	20070004 	.word	0x20070004
   80b00:	200708cb 	.word	0x200708cb
   80b04:	200708c4 	.word	0x200708c4
   80b08:	20070a1f 	.word	0x20070a1f

00080b0c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80b0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b10:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b14:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80b16:	f000 0103 	and.w	r1, r0, #3
   80b1a:	2903      	cmp	r1, #3
   80b1c:	f200 80b1 	bhi.w	80c82 <SystemCoreClockUpdate+0x176>
   80b20:	e8df f001 	tbb	[pc, r1]
   80b24:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80b28:	f641 2010 	movw	r0, #6672	; 0x1a10
   80b2c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80b30:	6941      	ldr	r1, [r0, #20]
   80b32:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80b36:	f240 0300 	movw	r3, #0
   80b3a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80b3e:	bf14      	ite	ne
   80b40:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80b44:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80b48:	601a      	str	r2, [r3, #0]
   80b4a:	e09a      	b.n	80c82 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b50:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b54:	6a18      	ldr	r0, [r3, #32]
   80b56:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80b5a:	d009      	beq.n	80b70 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b5c:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80b60:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80b64:	f240 0200 	movw	r2, #0
   80b68:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80b6c:	6013      	str	r3, [r2, #0]
   80b6e:	e088      	b.n	80c82 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b70:	f44f 6110 	mov.w	r1, #2304	; 0x900
   80b74:	f2c0 013d 	movt	r1, #61	; 0x3d
   80b78:	f240 0200 	movw	r2, #0
   80b7c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80b80:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b86:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b8a:	6a18      	ldr	r0, [r3, #32]
   80b8c:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80b90:	2910      	cmp	r1, #16
   80b92:	d002      	beq.n	80b9a <SystemCoreClockUpdate+0x8e>
   80b94:	2920      	cmp	r1, #32
   80b96:	d174      	bne.n	80c82 <SystemCoreClockUpdate+0x176>
   80b98:	e009      	b.n	80bae <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b9a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80b9e:	f2c0 007a 	movt	r0, #122	; 0x7a
   80ba2:	f240 0100 	movw	r1, #0
   80ba6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80baa:	6008      	str	r0, [r1, #0]
				break;
   80bac:	e069      	b.n	80c82 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80bae:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80bb2:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80bb6:	f240 0200 	movw	r2, #0
   80bba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80bbe:	6013      	str	r3, [r2, #0]
				break;
   80bc0:	e05f      	b.n	80c82 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80bc2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80bc6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80bca:	6a13      	ldr	r3, [r2, #32]
   80bcc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80bd0:	d009      	beq.n	80be6 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80bd2:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80bd6:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80bda:	f240 0200 	movw	r2, #0
   80bde:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80be2:	6011      	str	r1, [r2, #0]
   80be4:	e027      	b.n	80c36 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80be6:	f44f 6010 	mov.w	r0, #2304	; 0x900
   80bea:	f2c0 003d 	movt	r0, #61	; 0x3d
   80bee:	f240 0100 	movw	r1, #0
   80bf2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80bf6:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80bf8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80bfc:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80c00:	6a13      	ldr	r3, [r2, #32]
   80c02:	f003 0070 	and.w	r0, r3, #112	; 0x70
   80c06:	2810      	cmp	r0, #16
   80c08:	d002      	beq.n	80c10 <SystemCoreClockUpdate+0x104>
   80c0a:	2820      	cmp	r0, #32
   80c0c:	d113      	bne.n	80c36 <SystemCoreClockUpdate+0x12a>
   80c0e:	e009      	b.n	80c24 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80c10:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   80c14:	f2c0 037a 	movt	r3, #122	; 0x7a
   80c18:	f240 0000 	movw	r0, #0
   80c1c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c20:	6003      	str	r3, [r0, #0]
				break;
   80c22:	e008      	b.n	80c36 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80c24:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80c28:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80c2c:	f240 0200 	movw	r2, #0
   80c30:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c34:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80c36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c3a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80c40:	f000 0103 	and.w	r1, r0, #3
   80c44:	2902      	cmp	r1, #2
   80c46:	d113      	bne.n	80c70 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80c48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80c4c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80c50:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80c52:	6a89      	ldr	r1, [r1, #40]	; 0x28
   80c54:	f240 0300 	movw	r3, #0
   80c58:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80c5c:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80c60:	681a      	ldr	r2, [r3, #0]
   80c62:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80c66:	b2c9      	uxtb	r1, r1
   80c68:	fbb0 f2f1 	udiv	r2, r0, r1
   80c6c:	601a      	str	r2, [r3, #0]
   80c6e:	e008      	b.n	80c82 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80c70:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   80c74:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   80c78:	f240 0200 	movw	r2, #0
   80c7c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c80:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80c82:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80c86:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80c8a:	6b10      	ldr	r0, [r2, #48]	; 0x30
   80c8c:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80c90:	2970      	cmp	r1, #112	; 0x70
   80c92:	d10e      	bne.n	80cb2 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   80c94:	f240 0300 	movw	r3, #0
   80c98:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80c9c:	6818      	ldr	r0, [r3, #0]
   80c9e:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   80ca2:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   80ca6:	fba2 0100 	umull	r0, r1, r2, r0
   80caa:	ea4f 0051 	mov.w	r0, r1, lsr #1
   80cae:	6018      	str	r0, [r3, #0]
   80cb0:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80cb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80cb6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80cbc:	f240 0000 	movw	r0, #0
   80cc0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80cc4:	f3c2 1102 	ubfx	r1, r2, #4, #3
   80cc8:	6803      	ldr	r3, [r0, #0]
   80cca:	fa23 f301 	lsr.w	r3, r3, r1
   80cce:	6003      	str	r3, [r0, #0]
   80cd0:	4770      	bx	lr
   80cd2:	bf00      	nop

00080cd4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80cd4:	f245 239f 	movw	r3, #21151	; 0x529f
   80cd8:	f2c0 1357 	movt	r3, #343	; 0x157
   80cdc:	4298      	cmp	r0, r3
   80cde:	d80c      	bhi.n	80cfa <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80ce0:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   80ce4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ce8:	f04f 0100 	mov.w	r1, #0
   80cec:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   80cee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   80cf2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80cf6:	6019      	str	r1, [r3, #0]
   80cf8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   80cfa:	f64c 417f 	movw	r1, #52351	; 0xcc7f
   80cfe:	f2c0 2106 	movt	r1, #518	; 0x206
   80d02:	4288      	cmp	r0, r1
   80d04:	d80c      	bhi.n	80d20 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   80d06:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   80d0a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80d12:	6019      	str	r1, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   80d14:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   80d18:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80d1c:	6011      	str	r1, [r2, #0]
   80d1e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   80d20:	f24b 733f 	movw	r3, #46911	; 0xb73f
   80d24:	f2c0 3328 	movt	r3, #808	; 0x328
   80d28:	4298      	cmp	r0, r3
   80d2a:	d80c      	bhi.n	80d46 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   80d2c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   80d30:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80d34:	f44f 7200 	mov.w	r2, #512	; 0x200
   80d38:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   80d3a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   80d3e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80d42:	6002      	str	r2, [r0, #0]
   80d44:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   80d46:	f642 717f 	movw	r1, #12159	; 0x2f7f
   80d4a:	f2c0 41a6 	movt	r1, #1190	; 0x4a6
   80d4e:	4288      	cmp	r0, r1
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   80d50:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   80d54:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80d58:	bf94      	ite	ls
   80d5a:	f44f 7240 	movls.w	r2, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80d5e:	f44f 6280 	movhi.w	r2, #1024	; 0x400
   80d62:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80d64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   80d68:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d6c:	601a      	str	r2, [r3, #0]
   80d6e:	4770      	bx	lr

00080d70 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   80d70:	f640 1354 	movw	r3, #2388	; 0x954
   80d74:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80d78:	6819      	ldr	r1, [r3, #0]
   80d7a:	b941      	cbnz	r1, 80d8e <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   80d7c:	f640 1354 	movw	r3, #2388	; 0x954
   80d80:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80d84:	f642 2228 	movw	r2, #10792	; 0x2a28
   80d88:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80d8c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80d8e:	f640 1154 	movw	r1, #2388	; 0x954
   80d92:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d96:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   80d98:	1818      	adds	r0, r3, r0
   80d9a:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   80d9c:	4618      	mov	r0, r3
   80d9e:	4770      	bx	lr

00080da0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80da0:	f04f 30ff 	mov.w	r0, #4294967295
   80da4:	4770      	bx	lr
   80da6:	bf00      	nop

00080da8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80dac:	604b      	str	r3, [r1, #4]

	return 0;
}
   80dae:	f04f 0000 	mov.w	r0, #0
   80db2:	4770      	bx	lr

00080db4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80db4:	f04f 0001 	mov.w	r0, #1
   80db8:	4770      	bx	lr
   80dba:	bf00      	nop

00080dbc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80dbc:	f04f 0000 	mov.w	r0, #0
   80dc0:	4770      	bx	lr
   80dc2:	bf00      	nop

00080dc4 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80dc4:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80dc6:	685a      	ldr	r2, [r3, #4]
   80dc8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80dca:	6842      	ldr	r2, [r0, #4]
   80dcc:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80dce:	685a      	ldr	r2, [r3, #4]
   80dd0:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80dd2:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80dd4:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80dd6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80dd8:	6801      	ldr	r1, [r0, #0]
   80dda:	f101 0101 	add.w	r1, r1, #1
   80dde:	6001      	str	r1, [r0, #0]
   80de0:	4770      	bx	lr
   80de2:	bf00      	nop

00080de4 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80de4:	6843      	ldr	r3, [r0, #4]
   80de6:	6882      	ldr	r2, [r0, #8]
   80de8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80dea:	6881      	ldr	r1, [r0, #8]
   80dec:	6843      	ldr	r3, [r0, #4]
   80dee:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80df0:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80df2:	684a      	ldr	r2, [r1, #4]
   80df4:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80df6:	bf04      	itt	eq
   80df8:	6882      	ldreq	r2, [r0, #8]
   80dfa:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80dfc:	f04f 0300 	mov.w	r3, #0
   80e00:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80e02:	6808      	ldr	r0, [r1, #0]
   80e04:	f100 32ff 	add.w	r2, r0, #4294967295
   80e08:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   80e0a:	6808      	ldr	r0, [r1, #0]
}
   80e0c:	4770      	bx	lr
   80e0e:	bf00      	nop

00080e10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80e10:	4b06      	ldr	r3, [pc, #24]	; (80e2c <pxCurrentTCBConst2>)
   80e12:	6819      	ldr	r1, [r3, #0]
   80e14:	6808      	ldr	r0, [r1, #0]
   80e16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80e1a:	f380 8809 	msr	PSP, r0
   80e1e:	f04f 0000 	mov.w	r0, #0
   80e22:	f380 8811 	msr	BASEPRI, r0
   80e26:	f04e 0e0d 	orr.w	lr, lr, #13
   80e2a:	4770      	bx	lr

00080e2c <pxCurrentTCBConst2>:
   80e2c:	200709cc 	.word	0x200709cc

00080e30 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80e30:	f3ef 8011 	mrs	r0, BASEPRI
   80e34:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80e38:	f381 8811 	msr	BASEPRI, r1
   80e3c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80e3e:	f04f 0000 	mov.w	r0, #0
   80e42:	bf00      	nop

00080e44 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80e44:	f380 8811 	msr	BASEPRI, r0
   80e48:	4770      	bx	lr
   80e4a:	bf00      	nop

00080e4c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80e4c:	f3ef 8009 	mrs	r0, PSP
   80e50:	4b0c      	ldr	r3, [pc, #48]	; (80e84 <pxCurrentTCBConst>)
   80e52:	681a      	ldr	r2, [r3, #0]
   80e54:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80e58:	6010      	str	r0, [r2, #0]
   80e5a:	e92d 4008 	stmdb	sp!, {r3, lr}
   80e5e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80e62:	f380 8811 	msr	BASEPRI, r0
   80e66:	f000 f8f1 	bl	8104c <vTaskSwitchContext>
   80e6a:	f04f 0000 	mov.w	r0, #0
   80e6e:	f380 8811 	msr	BASEPRI, r0
   80e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80e76:	6819      	ldr	r1, [r3, #0]
   80e78:	6808      	ldr	r0, [r1, #0]
   80e7a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80e7e:	f380 8809 	msr	PSP, r0
   80e82:	4770      	bx	lr

00080e84 <pxCurrentTCBConst>:
   80e84:	200709cc 	.word	0x200709cc

00080e88 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80e88:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80e8a:	f64e 5304 	movw	r3, #60676	; 0xed04
   80e8e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e96:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80e98:	f640 6031 	movw	r0, #3633	; 0xe31
   80e9c:	f2c0 0008 	movt	r0, #8
   80ea0:	4780      	blx	r0
	{
		vTaskIncrementTick();
   80ea2:	f640 61bd 	movw	r1, #3773	; 0xebd
   80ea6:	f2c0 0108 	movt	r1, #8
   80eaa:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80eac:	f04f 0000 	mov.w	r0, #0
   80eb0:	f640 6345 	movw	r3, #3653	; 0xe45
   80eb4:	f2c0 0308 	movt	r3, #8
   80eb8:	4798      	blx	r3
   80eba:	bd08      	pop	{r3, pc}

00080ebc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   80ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80ec0:	f640 13c8 	movw	r3, #2504	; 0x9c8
   80ec4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80ec8:	6818      	ldr	r0, [r3, #0]
   80eca:	2800      	cmp	r0, #0
   80ecc:	f040 80b3 	bne.w	81036 <vTaskIncrementTick+0x17a>
	{
		++xTickCount;
   80ed0:	f640 13d4 	movw	r3, #2516	; 0x9d4
   80ed4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80ed8:	6818      	ldr	r0, [r3, #0]
   80eda:	f100 0001 	add.w	r0, r0, #1
   80ede:	6018      	str	r0, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80ee0:	6819      	ldr	r1, [r3, #0]
   80ee2:	2900      	cmp	r1, #0
   80ee4:	d139      	bne.n	80f5a <vTaskIncrementTick+0x9e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80ee6:	f640 125c 	movw	r2, #2396	; 0x95c
   80eea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80eee:	6813      	ldr	r3, [r2, #0]
   80ef0:	6818      	ldr	r0, [r3, #0]
   80ef2:	b130      	cbz	r0, 80f02 <vTaskIncrementTick+0x46>
   80ef4:	f640 6531 	movw	r5, #3633	; 0xe31
   80ef8:	f2c0 0508 	movt	r5, #8
   80efc:	47a8      	blx	r5
   80efe:	bf00      	nop
   80f00:	e7fd      	b.n	80efe <vTaskIncrementTick+0x42>

			pxTemp = pxDelayedTaskList;
   80f02:	f640 135c 	movw	r3, #2396	; 0x95c
   80f06:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80f0a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80f0c:	f640 12d8 	movw	r2, #2520	; 0x9d8
   80f10:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f14:	6810      	ldr	r0, [r2, #0]
   80f16:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80f18:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80f1a:	f640 12d0 	movw	r2, #2512	; 0x9d0
   80f1e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f22:	6811      	ldr	r1, [r2, #0]
   80f24:	f101 0101 	add.w	r1, r1, #1
   80f28:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80f2a:	681b      	ldr	r3, [r3, #0]
   80f2c:	6818      	ldr	r0, [r3, #0]
   80f2e:	b938      	cbnz	r0, 80f40 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80f30:	f240 0304 	movw	r3, #4
   80f34:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80f38:	f04f 30ff 	mov.w	r0, #4294967295
   80f3c:	6018      	str	r0, [r3, #0]
   80f3e:	e00c      	b.n	80f5a <vTaskIncrementTick+0x9e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80f40:	f640 125c 	movw	r2, #2396	; 0x95c
   80f44:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f48:	6811      	ldr	r1, [r2, #0]
   80f4a:	68cb      	ldr	r3, [r1, #12]
   80f4c:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80f4e:	6842      	ldr	r2, [r0, #4]
   80f50:	f240 0104 	movw	r1, #4
   80f54:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f58:	600a      	str	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80f5a:	f640 12d4 	movw	r2, #2516	; 0x9d4
   80f5e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f62:	6811      	ldr	r1, [r2, #0]
   80f64:	f240 0304 	movw	r3, #4
   80f68:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80f6c:	6818      	ldr	r0, [r3, #0]
   80f6e:	4281      	cmp	r1, r0
   80f70:	d369      	bcc.n	81046 <vTaskIncrementTick+0x18a>
   80f72:	f640 125c 	movw	r2, #2396	; 0x95c
   80f76:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f7a:	6811      	ldr	r1, [r2, #0]
   80f7c:	680b      	ldr	r3, [r1, #0]
   80f7e:	b17b      	cbz	r3, 80fa0 <vTaskIncrementTick+0xe4>
   80f80:	f640 145c 	movw	r4, #2396	; 0x95c
   80f84:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80f88:	6820      	ldr	r0, [r4, #0]
   80f8a:	68c2      	ldr	r2, [r0, #12]
   80f8c:	68d4      	ldr	r4, [r2, #12]
   80f8e:	6863      	ldr	r3, [r4, #4]
   80f90:	f640 11d4 	movw	r1, #2516	; 0x9d4
   80f94:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f98:	6808      	ldr	r0, [r1, #0]
   80f9a:	4283      	cmp	r3, r0
   80f9c:	d91a      	bls.n	80fd4 <vTaskIncrementTick+0x118>
   80f9e:	e012      	b.n	80fc6 <vTaskIncrementTick+0x10a>
   80fa0:	f240 0304 	movw	r3, #4
   80fa4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80fa8:	f04f 30ff 	mov.w	r0, #4294967295
   80fac:	6018      	str	r0, [r3, #0]
   80fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fb2:	6834      	ldr	r4, [r6, #0]
   80fb4:	68e2      	ldr	r2, [r4, #12]
   80fb6:	68d4      	ldr	r4, [r2, #12]
   80fb8:	6863      	ldr	r3, [r4, #4]
   80fba:	4648      	mov	r0, r9
   80fbc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80fc0:	6801      	ldr	r1, [r0, #0]
   80fc2:	428b      	cmp	r3, r1
   80fc4:	d91c      	bls.n	81000 <vTaskIncrementTick+0x144>
   80fc6:	f240 0204 	movw	r2, #4
   80fca:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80fce:	6013      	str	r3, [r2, #0]
   80fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fd4:	f640 57e5 	movw	r7, #3557	; 0xde5
   80fd8:	f2c0 0708 	movt	r7, #8
   80fdc:	f640 1860 	movw	r8, #2400	; 0x960
   80fe0:	f2c2 0807 	movt	r8, #8199	; 0x2007
   80fe4:	f640 1b64 	movw	fp, #2404	; 0x964
   80fe8:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   80fec:	f640 5ac5 	movw	sl, #3525	; 0xdc5
   80ff0:	f2c0 0a08 	movt	sl, #8
   80ff4:	f640 165c 	movw	r6, #2396	; 0x95c
   80ff8:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80ffc:	f640 19d4 	movw	r9, #2516	; 0x9d4
   81000:	f104 0504 	add.w	r5, r4, #4
   81004:	4628      	mov	r0, r5
   81006:	47b8      	blx	r7
   81008:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8100a:	b113      	cbz	r3, 81012 <vTaskIncrementTick+0x156>
   8100c:	f104 0018 	add.w	r0, r4, #24
   81010:	47b8      	blx	r7
   81012:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81014:	f8d8 2000 	ldr.w	r2, [r8]
   81018:	4291      	cmp	r1, r2
   8101a:	bf88      	it	hi
   8101c:	f8c8 1000 	strhi.w	r1, [r8]
   81020:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   81024:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   81028:	4629      	mov	r1, r5
   8102a:	47d0      	blx	sl
   8102c:	6833      	ldr	r3, [r6, #0]
   8102e:	6819      	ldr	r1, [r3, #0]
   81030:	2900      	cmp	r1, #0
   81032:	d1be      	bne.n	80fb2 <vTaskIncrementTick+0xf6>
   81034:	e7b4      	b.n	80fa0 <vTaskIncrementTick+0xe4>
	}
	else
	{
		++uxMissedTicks;
   81036:	f640 1158 	movw	r1, #2392	; 0x958
   8103a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8103e:	680a      	ldr	r2, [r1, #0]
   81040:	f102 0201 	add.w	r2, r2, #1
   81044:	600a      	str	r2, [r1, #0]
   81046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8104a:	bf00      	nop

0008104c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   8104c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8104e:	f640 13c8 	movw	r3, #2504	; 0x9c8
   81052:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81056:	6818      	ldr	r0, [r3, #0]
   81058:	b9a8      	cbnz	r0, 81086 <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8105a:	f640 1160 	movw	r1, #2400	; 0x960
   8105e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81062:	680a      	ldr	r2, [r1, #0]
   81064:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   81068:	ea4f 0083 	mov.w	r0, r3, lsl #2
   8106c:	f640 1164 	movw	r1, #2404	; 0x964
   81070:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81074:	580a      	ldr	r2, [r1, r0]
   81076:	bb52      	cbnz	r2, 810ce <vTaskSwitchContext+0x82>
   81078:	f640 1360 	movw	r3, #2400	; 0x960
   8107c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81080:	6818      	ldr	r0, [r3, #0]
   81082:	b988      	cbnz	r0, 810a8 <vTaskSwitchContext+0x5c>
   81084:	e009      	b.n	8109a <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81086:	f640 11dc 	movw	r1, #2524	; 0x9dc
   8108a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8108e:	f04f 0001 	mov.w	r0, #1
   81092:	6008      	str	r0, [r1, #0]
   81094:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81096:	681a      	ldr	r2, [r3, #0]
   81098:	b972      	cbnz	r2, 810b8 <vTaskSwitchContext+0x6c>
   8109a:	f640 6331 	movw	r3, #3633	; 0xe31
   8109e:	f2c0 0308 	movt	r3, #8
   810a2:	4798      	blx	r3
   810a4:	bf00      	nop
   810a6:	e7fd      	b.n	810a4 <vTaskSwitchContext+0x58>
   810a8:	f640 1360 	movw	r3, #2400	; 0x960
   810ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   810b0:	f640 1164 	movw	r1, #2404	; 0x964
   810b4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   810b8:	681a      	ldr	r2, [r3, #0]
   810ba:	f102 30ff 	add.w	r0, r2, #4294967295
   810be:	6018      	str	r0, [r3, #0]
   810c0:	681a      	ldr	r2, [r3, #0]
   810c2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   810c6:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   810ca:	2a00      	cmp	r2, #0
   810cc:	d0e3      	beq.n	81096 <vTaskSwitchContext+0x4a>
   810ce:	f640 1360 	movw	r3, #2400	; 0x960
   810d2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   810d6:	6819      	ldr	r1, [r3, #0]
   810d8:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   810dc:	f640 1264 	movw	r2, #2404	; 0x964
   810e0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   810e4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   810e8:	6859      	ldr	r1, [r3, #4]
   810ea:	6848      	ldr	r0, [r1, #4]
   810ec:	6058      	str	r0, [r3, #4]
   810ee:	f103 0208 	add.w	r2, r3, #8
   810f2:	4290      	cmp	r0, r2
   810f4:	bf04      	itt	eq
   810f6:	6840      	ldreq	r0, [r0, #4]
   810f8:	6058      	streq	r0, [r3, #4]
   810fa:	685b      	ldr	r3, [r3, #4]
   810fc:	68d9      	ldr	r1, [r3, #12]
   810fe:	f640 10cc 	movw	r0, #2508	; 0x9cc
   81102:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81106:	6001      	str	r1, [r0, #0]
   81108:	bd08      	pop	{r3, pc}
   8110a:	bf00      	nop

0008110c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8110c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8110e:	b083      	sub	sp, #12
   81110:	4604      	mov	r4, r0
   81112:	460d      	mov	r5, r1
	uint32_t val = 0;
   81114:	f04f 0300 	mov.w	r3, #0
   81118:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8111a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8111e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81122:	4284      	cmp	r4, r0
   81124:	d10d      	bne.n	81142 <usart_serial_getchar+0x36>
		while (uart_read((Uart*)p_usart, data));
   81126:	f44f 6600 	mov.w	r6, #2048	; 0x800
   8112a:	f2c4 060e 	movt	r6, #16398	; 0x400e
   8112e:	f640 1779 	movw	r7, #2425	; 0x979
   81132:	f2c0 0708 	movt	r7, #8
   81136:	4630      	mov	r0, r6
   81138:	4629      	mov	r1, r5
   8113a:	47b8      	blx	r7
   8113c:	2800      	cmp	r0, #0
   8113e:	d1fa      	bne.n	81136 <usart_serial_getchar+0x2a>
   81140:	e02b      	b.n	8119a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81146:	f2c4 0109 	movt	r1, #16393	; 0x4009
   8114a:	428c      	cmp	r4, r1
   8114c:	d10f      	bne.n	8116e <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
   8114e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   81152:	f2c4 0609 	movt	r6, #16393	; 0x4009
   81156:	f640 17b1 	movw	r7, #2481	; 0x9b1
   8115a:	f2c0 0708 	movt	r7, #8
   8115e:	4630      	mov	r0, r6
   81160:	a901      	add	r1, sp, #4
   81162:	47b8      	blx	r7
   81164:	2800      	cmp	r0, #0
   81166:	d1fa      	bne.n	8115e <usart_serial_getchar+0x52>
		*data = (uint8_t)(val & 0xFF);
   81168:	9801      	ldr	r0, [sp, #4]
   8116a:	7028      	strb	r0, [r5, #0]
   8116c:	e02b      	b.n	811c6 <usart_serial_getchar+0xba>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8116e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   81172:	f2c4 0209 	movt	r2, #16393	; 0x4009
   81176:	4294      	cmp	r4, r2
   81178:	d10f      	bne.n	8119a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
   8117a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   8117e:	f2c4 0409 	movt	r4, #16393	; 0x4009
   81182:	f640 16b1 	movw	r6, #2481	; 0x9b1
   81186:	f2c0 0608 	movt	r6, #8
   8118a:	4620      	mov	r0, r4
   8118c:	a901      	add	r1, sp, #4
   8118e:	47b0      	blx	r6
   81190:	2800      	cmp	r0, #0
   81192:	d1fa      	bne.n	8118a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   81194:	9b01      	ldr	r3, [sp, #4]
   81196:	702b      	strb	r3, [r5, #0]
   81198:	e02a      	b.n	811f0 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8119a:	f04f 0100 	mov.w	r1, #0
   8119e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   811a2:	428c      	cmp	r4, r1
   811a4:	d10f      	bne.n	811c6 <usart_serial_getchar+0xba>
		while (usart_read(p_usart, &val));
   811a6:	f04f 0400 	mov.w	r4, #0
   811aa:	f2c4 040a 	movt	r4, #16394	; 0x400a
   811ae:	f640 16b1 	movw	r6, #2481	; 0x9b1
   811b2:	f2c0 0608 	movt	r6, #8
   811b6:	4620      	mov	r0, r4
   811b8:	a901      	add	r1, sp, #4
   811ba:	47b0      	blx	r6
   811bc:	2800      	cmp	r0, #0
   811be:	d1fa      	bne.n	811b6 <usart_serial_getchar+0xaa>
		*data = (uint8_t)(val & 0xFF);
   811c0:	9801      	ldr	r0, [sp, #4]
   811c2:	7028      	strb	r0, [r5, #0]
   811c4:	e014      	b.n	811f0 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   811c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   811ca:	f2c4 020a 	movt	r2, #16394	; 0x400a
   811ce:	4294      	cmp	r4, r2
   811d0:	d10e      	bne.n	811f0 <usart_serial_getchar+0xe4>
		while (usart_read(p_usart, &val));
   811d2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   811d6:	f2c4 040a 	movt	r4, #16394	; 0x400a
   811da:	f640 16b1 	movw	r6, #2481	; 0x9b1
   811de:	f2c0 0608 	movt	r6, #8
   811e2:	4620      	mov	r0, r4
   811e4:	a901      	add	r1, sp, #4
   811e6:	47b0      	blx	r6
   811e8:	2800      	cmp	r0, #0
   811ea:	d1fa      	bne.n	811e2 <usart_serial_getchar+0xd6>
		*data = (uint8_t)(val & 0xFF);
   811ec:	9b01      	ldr	r3, [sp, #4]
   811ee:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   811f0:	b003      	add	sp, #12
   811f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000811f4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   811f4:	b570      	push	{r4, r5, r6, lr}
   811f6:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   811f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   811fc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81200:	4298      	cmp	r0, r3
   81202:	d10f      	bne.n	81224 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   81204:	f44f 6500 	mov.w	r5, #2048	; 0x800
   81208:	f2c4 050e 	movt	r5, #16398	; 0x400e
   8120c:	f640 1661 	movw	r6, #2401	; 0x961
   81210:	f2c0 0608 	movt	r6, #8
   81214:	4628      	mov	r0, r5
   81216:	4621      	mov	r1, r4
   81218:	47b0      	blx	r6
   8121a:	2800      	cmp	r0, #0
   8121c:	d1fa      	bne.n	81214 <usart_serial_putchar+0x20>
		return 1;
   8121e:	f04f 0001 	mov.w	r0, #1
   81222:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81228:	f2c4 0109 	movt	r1, #16393	; 0x4009
   8122c:	4288      	cmp	r0, r1
   8122e:	d10f      	bne.n	81250 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81230:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   81234:	f2c4 0509 	movt	r5, #16393	; 0x4009
   81238:	f640 1691 	movw	r6, #2449	; 0x991
   8123c:	f2c0 0608 	movt	r6, #8
   81240:	4628      	mov	r0, r5
   81242:	4621      	mov	r1, r4
   81244:	47b0      	blx	r6
   81246:	2800      	cmp	r0, #0
   81248:	d1fa      	bne.n	81240 <usart_serial_putchar+0x4c>
		return 1;
   8124a:	f04f 0001 	mov.w	r0, #1
   8124e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81250:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   81254:	f2c4 0209 	movt	r2, #16393	; 0x4009
   81258:	4290      	cmp	r0, r2
   8125a:	d10f      	bne.n	8127c <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   8125c:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   81260:	f2c4 0509 	movt	r5, #16393	; 0x4009
   81264:	f640 1691 	movw	r6, #2449	; 0x991
   81268:	f2c0 0608 	movt	r6, #8
   8126c:	4628      	mov	r0, r5
   8126e:	4621      	mov	r1, r4
   81270:	47b0      	blx	r6
   81272:	2800      	cmp	r0, #0
   81274:	d1fa      	bne.n	8126c <usart_serial_putchar+0x78>
		return 1;
   81276:	f04f 0001 	mov.w	r0, #1
   8127a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8127c:	f04f 0300 	mov.w	r3, #0
   81280:	f2c4 030a 	movt	r3, #16394	; 0x400a
   81284:	4298      	cmp	r0, r3
   81286:	d10f      	bne.n	812a8 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   81288:	f04f 0500 	mov.w	r5, #0
   8128c:	f2c4 050a 	movt	r5, #16394	; 0x400a
   81290:	f640 1691 	movw	r6, #2449	; 0x991
   81294:	f2c0 0608 	movt	r6, #8
   81298:	4628      	mov	r0, r5
   8129a:	4621      	mov	r1, r4
   8129c:	47b0      	blx	r6
   8129e:	2800      	cmp	r0, #0
   812a0:	d1fa      	bne.n	81298 <usart_serial_putchar+0xa4>
		return 1;
   812a2:	f04f 0001 	mov.w	r0, #1
   812a6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   812a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   812ac:	f2c4 010a 	movt	r1, #16394	; 0x400a
   812b0:	4288      	cmp	r0, r1
   812b2:	d10f      	bne.n	812d4 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   812b4:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   812b8:	f2c4 050a 	movt	r5, #16394	; 0x400a
   812bc:	f640 1691 	movw	r6, #2449	; 0x991
   812c0:	f2c0 0608 	movt	r6, #8
   812c4:	4628      	mov	r0, r5
   812c6:	4621      	mov	r1, r4
   812c8:	47b0      	blx	r6
   812ca:	2800      	cmp	r0, #0
   812cc:	d1fa      	bne.n	812c4 <usart_serial_putchar+0xd0>
		return 1;
   812ce:	f04f 0001 	mov.w	r0, #1
   812d2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   812d4:	f04f 0000 	mov.w	r0, #0
}
   812d8:	bd70      	pop	{r4, r5, r6, pc}
   812da:	bf00      	nop

000812dc <configure_console>:


void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio.
*  Note that the baudrate, parity and other parameters must be set in */
{
   812dc:	b530      	push	{r4, r5, lr}
   812de:	b085      	sub	sp, #20
   812e0:	f04f 0008 	mov.w	r0, #8
   812e4:	f640 0599 	movw	r5, #2201	; 0x899
   812e8:	f2c0 0508 	movt	r5, #8
   812ec:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   812ee:	f44f 6400 	mov.w	r4, #2048	; 0x800
   812f2:	f2c4 040e 	movt	r4, #16398	; 0x400e
   812f6:	f640 231c 	movw	r3, #2588	; 0xa1c
   812fa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   812fe:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81300:	f640 2018 	movw	r0, #2584	; 0xa18
   81304:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81308:	f241 12f5 	movw	r2, #4597	; 0x11f5
   8130c:	f2c0 0208 	movt	r2, #8
   81310:	6002      	str	r2, [r0, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81312:	f640 2114 	movw	r1, #2580	; 0xa14
   81316:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8131a:	f241 130d 	movw	r3, #4365	; 0x110d
   8131e:	f2c0 0308 	movt	r3, #8
   81322:	600b      	str	r3, [r1, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81324:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   81328:	f2c0 5001 	movt	r0, #1281	; 0x501
   8132c:	9000      	str	r0, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   8132e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   81332:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   81334:	f44f 6100 	mov.w	r1, #2048	; 0x800
   81338:	9102      	str	r1, [sp, #8]
   8133a:	f04f 0008 	mov.w	r0, #8
   8133e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81340:	4620      	mov	r0, r4
   81342:	4669      	mov	r1, sp
   81344:	f640 151d 	movw	r5, #2333	; 0x91d
   81348:	f2c0 0508 	movt	r5, #8
   8134c:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8134e:	f240 0508 	movw	r5, #8
   81352:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81356:	682c      	ldr	r4, [r5, #0]
   81358:	68a0      	ldr	r0, [r4, #8]
   8135a:	f04f 0100 	mov.w	r1, #0
   8135e:	f241 4497 	movw	r4, #5271	; 0x1497
   81362:	f2c0 0408 	movt	r4, #8
   81366:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81368:	682b      	ldr	r3, [r5, #0]
   8136a:	6858      	ldr	r0, [r3, #4]
   8136c:	f04f 0100 	mov.w	r1, #0
   81370:	47a0      	blx	r4
	};
	
	/* Configure console UART */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   81372:	b005      	add	sp, #20
   81374:	bd30      	pop	{r4, r5, pc}
   81376:	bf00      	nop

00081378 <main>:
#include <asf.h>
#include <conf_board.h>
#include "ConsoleFunctions.h"

int main (void)
{
   81378:	b508      	push	{r3, lr}
	sysclk_init();	
   8137a:	f240 13a5 	movw	r3, #421	; 0x1a5
   8137e:	f2c0 0308 	movt	r3, #8
   81382:	4798      	blx	r3
	board_init();
   81384:	f240 3045 	movw	r0, #837	; 0x345
   81388:	f2c0 0008 	movt	r0, #8
   8138c:	4780      	blx	r0
	configure_console();
   8138e:	f241 21dd 	movw	r1, #4829	; 0x12dd
   81392:	f2c0 0108 	movt	r1, #8
   81396:	4788      	blx	r1
	
	
	/* Test terminal window */
	while(1)
	{	
		printf("Hej\n");
   81398:	f643 3554 	movw	r5, #15188	; 0x3b54
   8139c:	f2c0 0508 	movt	r5, #8
   813a0:	f241 4435 	movw	r4, #5173	; 0x1435
   813a4:	f2c0 0408 	movt	r4, #8
   813a8:	4628      	mov	r0, r5
   813aa:	47a0      	blx	r4
   813ac:	e7fc      	b.n	813a8 <main+0x30>
   813ae:	bf00      	nop

000813b0 <atexit>:
   813b0:	4601      	mov	r1, r0
   813b2:	2000      	movs	r0, #0
   813b4:	4602      	mov	r2, r0
   813b6:	4603      	mov	r3, r0
   813b8:	f000 bde6 	b.w	81f88 <__register_exitproc>

000813bc <__libc_fini_array>:
   813bc:	b570      	push	{r4, r5, r6, lr}
   813be:	4b08      	ldr	r3, [pc, #32]	; (813e0 <__libc_fini_array+0x24>)
   813c0:	4c08      	ldr	r4, [pc, #32]	; (813e4 <__libc_fini_array+0x28>)
   813c2:	2500      	movs	r5, #0
   813c4:	1ae0      	subs	r0, r4, r3
   813c6:	1084      	asrs	r4, r0, #2
   813c8:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   813cc:	3d04      	subs	r5, #4
   813ce:	b11c      	cbz	r4, 813d8 <__libc_fini_array+0x1c>
   813d0:	5972      	ldr	r2, [r6, r5]
   813d2:	4790      	blx	r2
   813d4:	3c01      	subs	r4, #1
   813d6:	e7f9      	b.n	813cc <__libc_fini_array+0x10>
   813d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   813dc:	f002 bbf0 	b.w	83bc0 <_fini>
   813e0:	00083bcc 	.word	0x00083bcc
   813e4:	00083bd0 	.word	0x00083bd0

000813e8 <__libc_init_array>:
   813e8:	b538      	push	{r3, r4, r5, lr}
   813ea:	4d0e      	ldr	r5, [pc, #56]	; (81424 <__libc_init_array+0x3c>)
   813ec:	4b0e      	ldr	r3, [pc, #56]	; (81428 <__libc_init_array+0x40>)
   813ee:	2400      	movs	r4, #0
   813f0:	1ae8      	subs	r0, r5, r3
   813f2:	1085      	asrs	r5, r0, #2
   813f4:	42ac      	cmp	r4, r5
   813f6:	d005      	beq.n	81404 <__libc_init_array+0x1c>
   813f8:	490b      	ldr	r1, [pc, #44]	; (81428 <__libc_init_array+0x40>)
   813fa:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   813fe:	4790      	blx	r2
   81400:	3401      	adds	r4, #1
   81402:	e7f7      	b.n	813f4 <__libc_init_array+0xc>
   81404:	f002 fbd2 	bl	83bac <_init>
   81408:	4908      	ldr	r1, [pc, #32]	; (8142c <__libc_init_array+0x44>)
   8140a:	4a09      	ldr	r2, [pc, #36]	; (81430 <__libc_init_array+0x48>)
   8140c:	1a54      	subs	r4, r2, r1
   8140e:	10a5      	asrs	r5, r4, #2
   81410:	2400      	movs	r4, #0
   81412:	42ac      	cmp	r4, r5
   81414:	d005      	beq.n	81422 <__libc_init_array+0x3a>
   81416:	4b05      	ldr	r3, [pc, #20]	; (8142c <__libc_init_array+0x44>)
   81418:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8141c:	4780      	blx	r0
   8141e:	3401      	adds	r4, #1
   81420:	e7f7      	b.n	81412 <__libc_init_array+0x2a>
   81422:	bd38      	pop	{r3, r4, r5, pc}
   81424:	00083bb8 	.word	0x00083bb8
   81428:	00083bb8 	.word	0x00083bb8
   8142c:	00083bb8 	.word	0x00083bb8
   81430:	00083bc0 	.word	0x00083bc0

00081434 <iprintf>:
   81434:	b40f      	push	{r0, r1, r2, r3}
   81436:	b507      	push	{r0, r1, r2, lr}
   81438:	4906      	ldr	r1, [pc, #24]	; (81454 <iprintf+0x20>)
   8143a:	ab04      	add	r3, sp, #16
   8143c:	6808      	ldr	r0, [r1, #0]
   8143e:	f853 2b04 	ldr.w	r2, [r3], #4
   81442:	6881      	ldr	r1, [r0, #8]
   81444:	9301      	str	r3, [sp, #4]
   81446:	f000 f8e1 	bl	8160c <_vfiprintf_r>
   8144a:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   8144e:	b004      	add	sp, #16
   81450:	4770      	bx	lr
   81452:	bf00      	nop
   81454:	20070008 	.word	0x20070008

00081458 <_iprintf_r>:
   81458:	b40e      	push	{r1, r2, r3}
   8145a:	b503      	push	{r0, r1, lr}
   8145c:	ab03      	add	r3, sp, #12
   8145e:	f853 2b04 	ldr.w	r2, [r3], #4
   81462:	6881      	ldr	r1, [r0, #8]
   81464:	9301      	str	r3, [sp, #4]
   81466:	f000 f8d1 	bl	8160c <_vfiprintf_r>
   8146a:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   8146e:	b003      	add	sp, #12
   81470:	4770      	bx	lr
   81472:	bf00      	nop

00081474 <memcpy>:
   81474:	b510      	push	{r4, lr}
   81476:	2300      	movs	r3, #0
   81478:	4293      	cmp	r3, r2
   8147a:	d003      	beq.n	81484 <memcpy+0x10>
   8147c:	5ccc      	ldrb	r4, [r1, r3]
   8147e:	54c4      	strb	r4, [r0, r3]
   81480:	3301      	adds	r3, #1
   81482:	e7f9      	b.n	81478 <memcpy+0x4>
   81484:	bd10      	pop	{r4, pc}

00081486 <memset>:
   81486:	1882      	adds	r2, r0, r2
   81488:	4603      	mov	r3, r0
   8148a:	4293      	cmp	r3, r2
   8148c:	d002      	beq.n	81494 <memset+0xe>
   8148e:	f803 1b01 	strb.w	r1, [r3], #1
   81492:	e7fa      	b.n	8148a <memset+0x4>
   81494:	4770      	bx	lr

00081496 <setbuf>:
   81496:	2900      	cmp	r1, #0
   81498:	bf0c      	ite	eq
   8149a:	2202      	moveq	r2, #2
   8149c:	2200      	movne	r2, #0
   8149e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   814a2:	f000 b801 	b.w	814a8 <setvbuf>
	...

000814a8 <setvbuf>:
   814a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   814ac:	461d      	mov	r5, r3
   814ae:	4b37      	ldr	r3, [pc, #220]	; (8158c <setvbuf+0xe4>)
   814b0:	4604      	mov	r4, r0
   814b2:	6818      	ldr	r0, [r3, #0]
   814b4:	460e      	mov	r6, r1
   814b6:	4617      	mov	r7, r2
   814b8:	4698      	mov	r8, r3
   814ba:	b118      	cbz	r0, 814c4 <setvbuf+0x1c>
   814bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   814be:	b90a      	cbnz	r2, 814c4 <setvbuf+0x1c>
   814c0:	f000 feac 	bl	8221c <__sinit>
   814c4:	2f02      	cmp	r7, #2
   814c6:	d85d      	bhi.n	81584 <setvbuf+0xdc>
   814c8:	2d00      	cmp	r5, #0
   814ca:	db5b      	blt.n	81584 <setvbuf+0xdc>
   814cc:	4621      	mov	r1, r4
   814ce:	f8d8 0000 	ldr.w	r0, [r8]
   814d2:	f000 fdb1 	bl	82038 <_fflush_r>
   814d6:	89a1      	ldrh	r1, [r4, #12]
   814d8:	2000      	movs	r0, #0
   814da:	f001 0380 	and.w	r3, r1, #128	; 0x80
   814de:	b21a      	sxth	r2, r3
   814e0:	6060      	str	r0, [r4, #4]
   814e2:	61a0      	str	r0, [r4, #24]
   814e4:	b122      	cbz	r2, 814f0 <setvbuf+0x48>
   814e6:	4829      	ldr	r0, [pc, #164]	; (8158c <setvbuf+0xe4>)
   814e8:	6921      	ldr	r1, [r4, #16]
   814ea:	6800      	ldr	r0, [r0, #0]
   814ec:	f000 ffd4 	bl	82498 <_free_r>
   814f0:	89a1      	ldrh	r1, [r4, #12]
   814f2:	2f02      	cmp	r7, #2
   814f4:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   814f8:	81a3      	strh	r3, [r4, #12]
   814fa:	d012      	beq.n	81522 <setvbuf+0x7a>
   814fc:	bb36      	cbnz	r6, 8154c <setvbuf+0xa4>
   814fe:	2d00      	cmp	r5, #0
   81500:	bf08      	it	eq
   81502:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   81506:	4628      	mov	r0, r5
   81508:	f001 faca 	bl	82aa0 <malloc>
   8150c:	4606      	mov	r6, r0
   8150e:	b9c8      	cbnz	r0, 81544 <setvbuf+0x9c>
   81510:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81514:	f001 fac4 	bl	82aa0 <malloc>
   81518:	4606      	mov	r6, r0
   8151a:	b988      	cbnz	r0, 81540 <setvbuf+0x98>
   8151c:	f04f 30ff 	mov.w	r0, #4294967295
   81520:	e000      	b.n	81524 <setvbuf+0x7c>
   81522:	2000      	movs	r0, #0
   81524:	89a1      	ldrh	r1, [r4, #12]
   81526:	2200      	movs	r2, #0
   81528:	f041 0302 	orr.w	r3, r1, #2
   8152c:	81a3      	strh	r3, [r4, #12]
   8152e:	f104 0143 	add.w	r1, r4, #67	; 0x43
   81532:	2301      	movs	r3, #1
   81534:	60a2      	str	r2, [r4, #8]
   81536:	6021      	str	r1, [r4, #0]
   81538:	6121      	str	r1, [r4, #16]
   8153a:	6163      	str	r3, [r4, #20]
   8153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81540:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81544:	89a2      	ldrh	r2, [r4, #12]
   81546:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   8154a:	81a0      	strh	r0, [r4, #12]
   8154c:	2f01      	cmp	r7, #1
   8154e:	d105      	bne.n	8155c <setvbuf+0xb4>
   81550:	89a1      	ldrh	r1, [r4, #12]
   81552:	426a      	negs	r2, r5
   81554:	f041 0301 	orr.w	r3, r1, #1
   81558:	81a3      	strh	r3, [r4, #12]
   8155a:	61a2      	str	r2, [r4, #24]
   8155c:	480b      	ldr	r0, [pc, #44]	; (8158c <setvbuf+0xe4>)
   8155e:	89a2      	ldrh	r2, [r4, #12]
   81560:	6801      	ldr	r1, [r0, #0]
   81562:	4b0b      	ldr	r3, [pc, #44]	; (81590 <setvbuf+0xe8>)
   81564:	f002 0008 	and.w	r0, r2, #8
   81568:	b200      	sxth	r0, r0
   8156a:	63cb      	str	r3, [r1, #60]	; 0x3c
   8156c:	6026      	str	r6, [r4, #0]
   8156e:	6126      	str	r6, [r4, #16]
   81570:	6165      	str	r5, [r4, #20]
   81572:	b148      	cbz	r0, 81588 <setvbuf+0xe0>
   81574:	f012 0f03 	tst.w	r2, #3
   81578:	bf18      	it	ne
   8157a:	2500      	movne	r5, #0
   8157c:	60a5      	str	r5, [r4, #8]
   8157e:	2000      	movs	r0, #0
   81580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81584:	f04f 30ff 	mov.w	r0, #4294967295
   81588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8158c:	20070008 	.word	0x20070008
   81590:	00082191 	.word	0x00082191

00081594 <strlen>:
   81594:	4603      	mov	r3, r0
   81596:	f813 2b01 	ldrb.w	r2, [r3], #1
   8159a:	2a00      	cmp	r2, #0
   8159c:	d1fb      	bne.n	81596 <strlen+0x2>
   8159e:	1a18      	subs	r0, r3, r0
   815a0:	3801      	subs	r0, #1
   815a2:	4770      	bx	lr

000815a4 <__sprint_r>:
   815a4:	6893      	ldr	r3, [r2, #8]
   815a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   815aa:	4681      	mov	r9, r0
   815ac:	460f      	mov	r7, r1
   815ae:	4614      	mov	r4, r2
   815b0:	b91b      	cbnz	r3, 815ba <__sprint_r+0x16>
   815b2:	6053      	str	r3, [r2, #4]
   815b4:	4618      	mov	r0, r3
   815b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   815ba:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   815bc:	049b      	lsls	r3, r3, #18
   815be:	d51e      	bpl.n	815fe <__sprint_r+0x5a>
   815c0:	6815      	ldr	r5, [r2, #0]
   815c2:	68a0      	ldr	r0, [r4, #8]
   815c4:	3508      	adds	r5, #8
   815c6:	b1c8      	cbz	r0, 815fc <__sprint_r+0x58>
   815c8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   815cc:	f855 ac08 	ldr.w	sl, [r5, #-8]
   815d0:	ea4f 0891 	mov.w	r8, r1, lsr #2
   815d4:	2600      	movs	r6, #0
   815d6:	4546      	cmp	r6, r8
   815d8:	da09      	bge.n	815ee <__sprint_r+0x4a>
   815da:	4648      	mov	r0, r9
   815dc:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   815e0:	463a      	mov	r2, r7
   815e2:	f000 fe97 	bl	82314 <_fputwc_r>
   815e6:	1c43      	adds	r3, r0, #1
   815e8:	d00b      	beq.n	81602 <__sprint_r+0x5e>
   815ea:	3601      	adds	r6, #1
   815ec:	e7f3      	b.n	815d6 <__sprint_r+0x32>
   815ee:	68a2      	ldr	r2, [r4, #8]
   815f0:	ea4f 0888 	mov.w	r8, r8, lsl #2
   815f4:	ebc8 0302 	rsb	r3, r8, r2
   815f8:	60a3      	str	r3, [r4, #8]
   815fa:	e7e2      	b.n	815c2 <__sprint_r+0x1e>
   815fc:	e001      	b.n	81602 <__sprint_r+0x5e>
   815fe:	f001 f801 	bl	82604 <__sfvwrite_r>
   81602:	2100      	movs	r1, #0
   81604:	60a1      	str	r1, [r4, #8]
   81606:	6061      	str	r1, [r4, #4]
   81608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008160c <_vfiprintf_r>:
   8160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81610:	4689      	mov	r9, r1
   81612:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
   81616:	4614      	mov	r4, r2
   81618:	461e      	mov	r6, r3
   8161a:	4683      	mov	fp, r0
   8161c:	b118      	cbz	r0, 81626 <_vfiprintf_r+0x1a>
   8161e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81620:	b90b      	cbnz	r3, 81626 <_vfiprintf_r+0x1a>
   81622:	f000 fdfb 	bl	8221c <__sinit>
   81626:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   8162a:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   8162e:	b211      	sxth	r1, r2
   81630:	b949      	cbnz	r1, 81646 <_vfiprintf_r+0x3a>
   81632:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   81636:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   8163a:	f8a9 300c 	strh.w	r3, [r9, #12]
   8163e:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   81642:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   81646:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   8164a:	f001 0308 	and.w	r3, r1, #8
   8164e:	b218      	sxth	r0, r3
   81650:	b148      	cbz	r0, 81666 <_vfiprintf_r+0x5a>
   81652:	f8d9 2010 	ldr.w	r2, [r9, #16]
   81656:	b132      	cbz	r2, 81666 <_vfiprintf_r+0x5a>
   81658:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   8165c:	f000 011a 	and.w	r1, r0, #26
   81660:	290a      	cmp	r1, #10
   81662:	d149      	bne.n	816f8 <_vfiprintf_r+0xec>
   81664:	e00a      	b.n	8167c <_vfiprintf_r+0x70>
   81666:	4658      	mov	r0, fp
   81668:	4649      	mov	r1, r9
   8166a:	f000 fc31 	bl	81ed0 <__swsetup_r>
   8166e:	2800      	cmp	r0, #0
   81670:	d0f2      	beq.n	81658 <_vfiprintf_r+0x4c>
   81672:	f04f 31ff 	mov.w	r1, #4294967295
   81676:	9102      	str	r1, [sp, #8]
   81678:	f000 bc15 	b.w	81ea6 <_vfiprintf_r+0x89a>
   8167c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
   81680:	0419      	lsls	r1, r3, #16
   81682:	d439      	bmi.n	816f8 <_vfiprintf_r+0xec>
   81684:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
   81688:	f8d9 201c 	ldr.w	r2, [r9, #28]
   8168c:	f020 0002 	bic.w	r0, r0, #2
   81690:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
   81694:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   81698:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
   8169c:	9131      	str	r1, [sp, #196]	; 0xc4
   8169e:	a832      	add	r0, sp, #200	; 0xc8
   816a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   816a4:	921f      	str	r2, [sp, #124]	; 0x7c
   816a6:	2200      	movs	r2, #0
   816a8:	9321      	str	r3, [sp, #132]	; 0x84
   816aa:	9018      	str	r0, [sp, #96]	; 0x60
   816ac:	901c      	str	r0, [sp, #112]	; 0x70
   816ae:	911a      	str	r1, [sp, #104]	; 0x68
   816b0:	911d      	str	r1, [sp, #116]	; 0x74
   816b2:	921e      	str	r2, [sp, #120]	; 0x78
   816b4:	4658      	mov	r0, fp
   816b6:	a918      	add	r1, sp, #96	; 0x60
   816b8:	4622      	mov	r2, r4
   816ba:	4633      	mov	r3, r6
   816bc:	f7ff ffa6 	bl	8160c <_vfiprintf_r>
   816c0:	2800      	cmp	r0, #0
   816c2:	9002      	str	r0, [sp, #8]
   816c4:	db09      	blt.n	816da <_vfiprintf_r+0xce>
   816c6:	4658      	mov	r0, fp
   816c8:	a918      	add	r1, sp, #96	; 0x60
   816ca:	f000 fcb5 	bl	82038 <_fflush_r>
   816ce:	9b02      	ldr	r3, [sp, #8]
   816d0:	2800      	cmp	r0, #0
   816d2:	bf18      	it	ne
   816d4:	f04f 33ff 	movne.w	r3, #4294967295
   816d8:	9302      	str	r3, [sp, #8]
   816da:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
   816de:	f000 0140 	and.w	r1, r0, #64	; 0x40
   816e2:	b20a      	sxth	r2, r1
   816e4:	2a00      	cmp	r2, #0
   816e6:	f000 83de 	beq.w	81ea6 <_vfiprintf_r+0x89a>
   816ea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   816ee:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   816f2:	f8a9 000c 	strh.w	r0, [r9, #12]
   816f6:	e3d6      	b.n	81ea6 <_vfiprintf_r+0x89a>
   816f8:	2200      	movs	r2, #0
   816fa:	ad32      	add	r5, sp, #200	; 0xc8
   816fc:	950b      	str	r5, [sp, #44]	; 0x2c
   816fe:	920d      	str	r2, [sp, #52]	; 0x34
   81700:	920c      	str	r2, [sp, #48]	; 0x30
   81702:	9401      	str	r4, [sp, #4]
   81704:	9205      	str	r2, [sp, #20]
   81706:	9202      	str	r2, [sp, #8]
   81708:	46a8      	mov	r8, r5
   8170a:	9801      	ldr	r0, [sp, #4]
   8170c:	4604      	mov	r4, r0
   8170e:	f810 1b01 	ldrb.w	r1, [r0], #1
   81712:	b919      	cbnz	r1, 8171c <_vfiprintf_r+0x110>
   81714:	9b01      	ldr	r3, [sp, #4]
   81716:	1ae5      	subs	r5, r4, r3
   81718:	d103      	bne.n	81722 <_vfiprintf_r+0x116>
   8171a:	e01d      	b.n	81758 <_vfiprintf_r+0x14c>
   8171c:	2925      	cmp	r1, #37	; 0x25
   8171e:	d1f5      	bne.n	8170c <_vfiprintf_r+0x100>
   81720:	e7f8      	b.n	81714 <_vfiprintf_r+0x108>
   81722:	9901      	ldr	r1, [sp, #4]
   81724:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81726:	e888 0022 	stmia.w	r8, {r1, r5}
   8172a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8172c:	1950      	adds	r0, r2, r5
   8172e:	1c4b      	adds	r3, r1, #1
   81730:	2b07      	cmp	r3, #7
   81732:	900d      	str	r0, [sp, #52]	; 0x34
   81734:	930c      	str	r3, [sp, #48]	; 0x30
   81736:	dc02      	bgt.n	8173e <_vfiprintf_r+0x132>
   81738:	f108 0808 	add.w	r8, r8, #8
   8173c:	e009      	b.n	81752 <_vfiprintf_r+0x146>
   8173e:	4658      	mov	r0, fp
   81740:	4649      	mov	r1, r9
   81742:	aa0b      	add	r2, sp, #44	; 0x2c
   81744:	f7ff ff2e 	bl	815a4 <__sprint_r>
   81748:	2800      	cmp	r0, #0
   8174a:	f040 83a4 	bne.w	81e96 <_vfiprintf_r+0x88a>
   8174e:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81752:	9a02      	ldr	r2, [sp, #8]
   81754:	1950      	adds	r0, r2, r5
   81756:	9002      	str	r0, [sp, #8]
   81758:	7821      	ldrb	r1, [r4, #0]
   8175a:	2900      	cmp	r1, #0
   8175c:	f000 8394 	beq.w	81e88 <_vfiprintf_r+0x87c>
   81760:	2200      	movs	r2, #0
   81762:	3401      	adds	r4, #1
   81764:	9401      	str	r4, [sp, #4]
   81766:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8176a:	f04f 3cff 	mov.w	ip, #4294967295
   8176e:	9204      	str	r2, [sp, #16]
   81770:	4617      	mov	r7, r2
   81772:	9801      	ldr	r0, [sp, #4]
   81774:	f810 3b01 	ldrb.w	r3, [r0], #1
   81778:	9001      	str	r0, [sp, #4]
   8177a:	2b63      	cmp	r3, #99	; 0x63
   8177c:	f000 80b3 	beq.w	818e6 <_vfiprintf_r+0x2da>
   81780:	dc33      	bgt.n	817ea <_vfiprintf_r+0x1de>
   81782:	2b39      	cmp	r3, #57	; 0x39
   81784:	dc1a      	bgt.n	817bc <_vfiprintf_r+0x1b0>
   81786:	2b31      	cmp	r3, #49	; 0x31
   81788:	f280 8091 	bge.w	818ae <_vfiprintf_r+0x2a2>
   8178c:	2b2b      	cmp	r3, #43	; 0x2b
   8178e:	d101      	bne.n	81794 <_vfiprintf_r+0x188>
   81790:	461a      	mov	r2, r3
   81792:	e7ee      	b.n	81772 <_vfiprintf_r+0x166>
   81794:	dc0a      	bgt.n	817ac <_vfiprintf_r+0x1a0>
   81796:	2b23      	cmp	r3, #35	; 0x23
   81798:	d055      	beq.n	81846 <_vfiprintf_r+0x23a>
   8179a:	2b2a      	cmp	r3, #42	; 0x2a
   8179c:	d056      	beq.n	8184c <_vfiprintf_r+0x240>
   8179e:	2b20      	cmp	r3, #32
   817a0:	f040 81f7 	bne.w	81b92 <_vfiprintf_r+0x586>
   817a4:	2a00      	cmp	r2, #0
   817a6:	bf08      	it	eq
   817a8:	2220      	moveq	r2, #32
   817aa:	e7e2      	b.n	81772 <_vfiprintf_r+0x166>
   817ac:	2b2e      	cmp	r3, #46	; 0x2e
   817ae:	d058      	beq.n	81862 <_vfiprintf_r+0x256>
   817b0:	2b30      	cmp	r3, #48	; 0x30
   817b2:	d079      	beq.n	818a8 <_vfiprintf_r+0x29c>
   817b4:	2b2d      	cmp	r3, #45	; 0x2d
   817b6:	f040 81ec 	bne.w	81b92 <_vfiprintf_r+0x586>
   817ba:	e04f      	b.n	8185c <_vfiprintf_r+0x250>
   817bc:	2b4f      	cmp	r3, #79	; 0x4f
   817be:	f000 80de 	beq.w	8197e <_vfiprintf_r+0x372>
   817c2:	dc07      	bgt.n	817d4 <_vfiprintf_r+0x1c8>
   817c4:	2b44      	cmp	r3, #68	; 0x44
   817c6:	f040 81e4 	bne.w	81b92 <_vfiprintf_r+0x586>
   817ca:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   817ce:	f047 0710 	orr.w	r7, r7, #16
   817d2:	e090      	b.n	818f6 <_vfiprintf_r+0x2ea>
   817d4:	2b55      	cmp	r3, #85	; 0x55
   817d6:	f000 811f 	beq.w	81a18 <_vfiprintf_r+0x40c>
   817da:	2b58      	cmp	r3, #88	; 0x58
   817dc:	f040 81d9 	bne.w	81b92 <_vfiprintf_r+0x586>
   817e0:	4dae      	ldr	r5, [pc, #696]	; (81a9c <_vfiprintf_r+0x490>)
   817e2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   817e6:	9505      	str	r5, [sp, #20]
   817e8:	e130      	b.n	81a4c <_vfiprintf_r+0x440>
   817ea:	2b6f      	cmp	r3, #111	; 0x6f
   817ec:	f000 80c9 	beq.w	81982 <_vfiprintf_r+0x376>
   817f0:	dc10      	bgt.n	81814 <_vfiprintf_r+0x208>
   817f2:	2b69      	cmp	r3, #105	; 0x69
   817f4:	d024      	beq.n	81840 <_vfiprintf_r+0x234>
   817f6:	dc07      	bgt.n	81808 <_vfiprintf_r+0x1fc>
   817f8:	2b64      	cmp	r3, #100	; 0x64
   817fa:	d021      	beq.n	81840 <_vfiprintf_r+0x234>
   817fc:	2b68      	cmp	r3, #104	; 0x68
   817fe:	f040 81c8 	bne.w	81b92 <_vfiprintf_r+0x586>
   81802:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   81806:	e7b4      	b.n	81772 <_vfiprintf_r+0x166>
   81808:	2b6c      	cmp	r3, #108	; 0x6c
   8180a:	d05f      	beq.n	818cc <_vfiprintf_r+0x2c0>
   8180c:	2b6e      	cmp	r3, #110	; 0x6e
   8180e:	f040 81c0 	bne.w	81b92 <_vfiprintf_r+0x586>
   81812:	e096      	b.n	81942 <_vfiprintf_r+0x336>
   81814:	2b73      	cmp	r3, #115	; 0x73
   81816:	f000 80df 	beq.w	819d8 <_vfiprintf_r+0x3cc>
   8181a:	dc06      	bgt.n	8182a <_vfiprintf_r+0x21e>
   8181c:	2b70      	cmp	r3, #112	; 0x70
   8181e:	f000 80cd 	beq.w	819bc <_vfiprintf_r+0x3b0>
   81822:	2b71      	cmp	r3, #113	; 0x71
   81824:	f040 81b5 	bne.w	81b92 <_vfiprintf_r+0x586>
   81828:	e05a      	b.n	818e0 <_vfiprintf_r+0x2d4>
   8182a:	2b75      	cmp	r3, #117	; 0x75
   8182c:	f000 80f6 	beq.w	81a1c <_vfiprintf_r+0x410>
   81830:	2b78      	cmp	r3, #120	; 0x78
   81832:	f040 81ae 	bne.w	81b92 <_vfiprintf_r+0x586>
   81836:	4d9a      	ldr	r5, [pc, #616]	; (81aa0 <_vfiprintf_r+0x494>)
   81838:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8183c:	9505      	str	r5, [sp, #20]
   8183e:	e105      	b.n	81a4c <_vfiprintf_r+0x440>
   81840:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   81844:	e057      	b.n	818f6 <_vfiprintf_r+0x2ea>
   81846:	f047 0701 	orr.w	r7, r7, #1
   8184a:	e792      	b.n	81772 <_vfiprintf_r+0x166>
   8184c:	1d33      	adds	r3, r6, #4
   8184e:	6836      	ldr	r6, [r6, #0]
   81850:	2e00      	cmp	r6, #0
   81852:	9604      	str	r6, [sp, #16]
   81854:	da15      	bge.n	81882 <_vfiprintf_r+0x276>
   81856:	4270      	negs	r0, r6
   81858:	9004      	str	r0, [sp, #16]
   8185a:	461e      	mov	r6, r3
   8185c:	f047 0704 	orr.w	r7, r7, #4
   81860:	e787      	b.n	81772 <_vfiprintf_r+0x166>
   81862:	9901      	ldr	r1, [sp, #4]
   81864:	f811 3b01 	ldrb.w	r3, [r1], #1
   81868:	2b2a      	cmp	r3, #42	; 0x2a
   8186a:	9101      	str	r1, [sp, #4]
   8186c:	d10b      	bne.n	81886 <_vfiprintf_r+0x27a>
   8186e:	f8d6 c000 	ldr.w	ip, [r6]
   81872:	1d33      	adds	r3, r6, #4
   81874:	f1bc 0f00 	cmp.w	ip, #0
   81878:	da03      	bge.n	81882 <_vfiprintf_r+0x276>
   8187a:	461e      	mov	r6, r3
   8187c:	f04f 3cff 	mov.w	ip, #4294967295
   81880:	e777      	b.n	81772 <_vfiprintf_r+0x166>
   81882:	461e      	mov	r6, r3
   81884:	e775      	b.n	81772 <_vfiprintf_r+0x166>
   81886:	f04f 0c00 	mov.w	ip, #0
   8188a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8188e:	2809      	cmp	r0, #9
   81890:	d807      	bhi.n	818a2 <_vfiprintf_r+0x296>
   81892:	9901      	ldr	r1, [sp, #4]
   81894:	230a      	movs	r3, #10
   81896:	fb03 0c0c 	mla	ip, r3, ip, r0
   8189a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8189e:	9101      	str	r1, [sp, #4]
   818a0:	e7f3      	b.n	8188a <_vfiprintf_r+0x27e>
   818a2:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   818a6:	e768      	b.n	8177a <_vfiprintf_r+0x16e>
   818a8:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   818ac:	e761      	b.n	81772 <_vfiprintf_r+0x166>
   818ae:	9801      	ldr	r0, [sp, #4]
   818b0:	2100      	movs	r1, #0
   818b2:	3b30      	subs	r3, #48	; 0x30
   818b4:	240a      	movs	r4, #10
   818b6:	fb04 3101 	mla	r1, r4, r1, r3
   818ba:	f810 3b01 	ldrb.w	r3, [r0], #1
   818be:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   818c2:	2c09      	cmp	r4, #9
   818c4:	9001      	str	r0, [sp, #4]
   818c6:	d9f4      	bls.n	818b2 <_vfiprintf_r+0x2a6>
   818c8:	9104      	str	r1, [sp, #16]
   818ca:	e756      	b.n	8177a <_vfiprintf_r+0x16e>
   818cc:	9901      	ldr	r1, [sp, #4]
   818ce:	780b      	ldrb	r3, [r1, #0]
   818d0:	2b6c      	cmp	r3, #108	; 0x6c
   818d2:	d102      	bne.n	818da <_vfiprintf_r+0x2ce>
   818d4:	1c48      	adds	r0, r1, #1
   818d6:	9001      	str	r0, [sp, #4]
   818d8:	e002      	b.n	818e0 <_vfiprintf_r+0x2d4>
   818da:	f047 0710 	orr.w	r7, r7, #16
   818de:	e748      	b.n	81772 <_vfiprintf_r+0x166>
   818e0:	f047 0720 	orr.w	r7, r7, #32
   818e4:	e745      	b.n	81772 <_vfiprintf_r+0x166>
   818e6:	6832      	ldr	r2, [r6, #0]
   818e8:	2500      	movs	r5, #0
   818ea:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   818ee:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   818f2:	3604      	adds	r6, #4
   818f4:	e157      	b.n	81ba6 <_vfiprintf_r+0x59a>
   818f6:	06ba      	lsls	r2, r7, #26
   818f8:	d507      	bpl.n	8190a <_vfiprintf_r+0x2fe>
   818fa:	3607      	adds	r6, #7
   818fc:	f026 0507 	bic.w	r5, r6, #7
   81900:	f105 0608 	add.w	r6, r5, #8
   81904:	e9d5 4500 	ldrd	r4, r5, [r5]
   81908:	e00f      	b.n	8192a <_vfiprintf_r+0x31e>
   8190a:	f017 0f10 	tst.w	r7, #16
   8190e:	f106 0104 	add.w	r1, r6, #4
   81912:	d001      	beq.n	81918 <_vfiprintf_r+0x30c>
   81914:	6832      	ldr	r2, [r6, #0]
   81916:	e005      	b.n	81924 <_vfiprintf_r+0x318>
   81918:	f017 0f40 	tst.w	r7, #64	; 0x40
   8191c:	6832      	ldr	r2, [r6, #0]
   8191e:	d001      	beq.n	81924 <_vfiprintf_r+0x318>
   81920:	b214      	sxth	r4, r2
   81922:	e000      	b.n	81926 <_vfiprintf_r+0x31a>
   81924:	4614      	mov	r4, r2
   81926:	17e5      	asrs	r5, r4, #31
   81928:	460e      	mov	r6, r1
   8192a:	2c00      	cmp	r4, #0
   8192c:	f175 0200 	sbcs.w	r2, r5, #0
   81930:	f280 80b8 	bge.w	81aa4 <_vfiprintf_r+0x498>
   81934:	232d      	movs	r3, #45	; 0x2d
   81936:	4264      	negs	r4, r4
   81938:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8193c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   81940:	e0b0      	b.n	81aa4 <_vfiprintf_r+0x498>
   81942:	f017 0f20 	tst.w	r7, #32
   81946:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8194a:	f106 0204 	add.w	r2, r6, #4
   8194e:	d005      	beq.n	8195c <_vfiprintf_r+0x350>
   81950:	9c02      	ldr	r4, [sp, #8]
   81952:	6835      	ldr	r5, [r6, #0]
   81954:	17e0      	asrs	r0, r4, #31
   81956:	602c      	str	r4, [r5, #0]
   81958:	6068      	str	r0, [r5, #4]
   8195a:	e004      	b.n	81966 <_vfiprintf_r+0x35a>
   8195c:	06fb      	lsls	r3, r7, #27
   8195e:	d504      	bpl.n	8196a <_vfiprintf_r+0x35e>
   81960:	6833      	ldr	r3, [r6, #0]
   81962:	9902      	ldr	r1, [sp, #8]
   81964:	6019      	str	r1, [r3, #0]
   81966:	4616      	mov	r6, r2
   81968:	e6cf      	b.n	8170a <_vfiprintf_r+0xfe>
   8196a:	6830      	ldr	r0, [r6, #0]
   8196c:	9c02      	ldr	r4, [sp, #8]
   8196e:	f017 0f40 	tst.w	r7, #64	; 0x40
   81972:	f106 0604 	add.w	r6, r6, #4
   81976:	bf14      	ite	ne
   81978:	8004      	strhne	r4, [r0, #0]
   8197a:	6004      	streq	r4, [r0, #0]
   8197c:	e6c5      	b.n	8170a <_vfiprintf_r+0xfe>
   8197e:	f047 0710 	orr.w	r7, r7, #16
   81982:	f017 0020 	ands.w	r0, r7, #32
   81986:	d008      	beq.n	8199a <_vfiprintf_r+0x38e>
   81988:	1df3      	adds	r3, r6, #7
   8198a:	f023 0507 	bic.w	r5, r3, #7
   8198e:	f105 0608 	add.w	r6, r5, #8
   81992:	e9d5 4500 	ldrd	r4, r5, [r5]
   81996:	2000      	movs	r0, #0
   81998:	e07c      	b.n	81a94 <_vfiprintf_r+0x488>
   8199a:	f017 0110 	ands.w	r1, r7, #16
   8199e:	f106 0204 	add.w	r2, r6, #4
   819a2:	d106      	bne.n	819b2 <_vfiprintf_r+0x3a6>
   819a4:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   819a8:	d003      	beq.n	819b2 <_vfiprintf_r+0x3a6>
   819aa:	8834      	ldrh	r4, [r6, #0]
   819ac:	2500      	movs	r5, #0
   819ae:	4616      	mov	r6, r2
   819b0:	e7f1      	b.n	81996 <_vfiprintf_r+0x38a>
   819b2:	6836      	ldr	r6, [r6, #0]
   819b4:	2500      	movs	r5, #0
   819b6:	4634      	mov	r4, r6
   819b8:	4616      	mov	r6, r2
   819ba:	e06b      	b.n	81a94 <_vfiprintf_r+0x488>
   819bc:	4b38      	ldr	r3, [pc, #224]	; (81aa0 <_vfiprintf_r+0x494>)
   819be:	2130      	movs	r1, #48	; 0x30
   819c0:	2278      	movs	r2, #120	; 0x78
   819c2:	6834      	ldr	r4, [r6, #0]
   819c4:	2500      	movs	r5, #0
   819c6:	f047 0702 	orr.w	r7, r7, #2
   819ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   819ce:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   819d2:	3604      	adds	r6, #4
   819d4:	9305      	str	r3, [sp, #20]
   819d6:	e05c      	b.n	81a92 <_vfiprintf_r+0x486>
   819d8:	4631      	mov	r1, r6
   819da:	2500      	movs	r5, #0
   819dc:	f8d1 a000 	ldr.w	sl, [r1]
   819e0:	3604      	adds	r6, #4
   819e2:	45ac      	cmp	ip, r5
   819e4:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   819e8:	4650      	mov	r0, sl
   819ea:	db11      	blt.n	81a10 <_vfiprintf_r+0x404>
   819ec:	4662      	mov	r2, ip
   819ee:	4629      	mov	r1, r5
   819f0:	f8cd c000 	str.w	ip, [sp]
   819f4:	f001 fa66 	bl	82ec4 <memchr>
   819f8:	f8dd c000 	ldr.w	ip, [sp]
   819fc:	2800      	cmp	r0, #0
   819fe:	f000 80d6 	beq.w	81bae <_vfiprintf_r+0x5a2>
   81a02:	ebca 0400 	rsb	r4, sl, r0
   81a06:	4564      	cmp	r4, ip
   81a08:	f340 80d3 	ble.w	81bb2 <_vfiprintf_r+0x5a6>
   81a0c:	4664      	mov	r4, ip
   81a0e:	e0d0      	b.n	81bb2 <_vfiprintf_r+0x5a6>
   81a10:	f7ff fdc0 	bl	81594 <strlen>
   81a14:	4604      	mov	r4, r0
   81a16:	e0cc      	b.n	81bb2 <_vfiprintf_r+0x5a6>
   81a18:	f047 0710 	orr.w	r7, r7, #16
   81a1c:	06bd      	lsls	r5, r7, #26
   81a1e:	d506      	bpl.n	81a2e <_vfiprintf_r+0x422>
   81a20:	1df0      	adds	r0, r6, #7
   81a22:	f020 0407 	bic.w	r4, r0, #7
   81a26:	f104 0608 	add.w	r6, r4, #8
   81a2a:	cc30      	ldmia	r4, {r4, r5}
   81a2c:	e00c      	b.n	81a48 <_vfiprintf_r+0x43c>
   81a2e:	f017 0f10 	tst.w	r7, #16
   81a32:	f106 0304 	add.w	r3, r6, #4
   81a36:	d103      	bne.n	81a40 <_vfiprintf_r+0x434>
   81a38:	067c      	lsls	r4, r7, #25
   81a3a:	d501      	bpl.n	81a40 <_vfiprintf_r+0x434>
   81a3c:	8834      	ldrh	r4, [r6, #0]
   81a3e:	e001      	b.n	81a44 <_vfiprintf_r+0x438>
   81a40:	6835      	ldr	r5, [r6, #0]
   81a42:	462c      	mov	r4, r5
   81a44:	2500      	movs	r5, #0
   81a46:	461e      	mov	r6, r3
   81a48:	2001      	movs	r0, #1
   81a4a:	e023      	b.n	81a94 <_vfiprintf_r+0x488>
   81a4c:	06b8      	lsls	r0, r7, #26
   81a4e:	d507      	bpl.n	81a60 <_vfiprintf_r+0x454>
   81a50:	1df4      	adds	r4, r6, #7
   81a52:	f024 0107 	bic.w	r1, r4, #7
   81a56:	f101 0608 	add.w	r6, r1, #8
   81a5a:	e9d1 4500 	ldrd	r4, r5, [r1]
   81a5e:	e00c      	b.n	81a7a <_vfiprintf_r+0x46e>
   81a60:	f017 0f10 	tst.w	r7, #16
   81a64:	f106 0004 	add.w	r0, r6, #4
   81a68:	d103      	bne.n	81a72 <_vfiprintf_r+0x466>
   81a6a:	0679      	lsls	r1, r7, #25
   81a6c:	d501      	bpl.n	81a72 <_vfiprintf_r+0x466>
   81a6e:	8834      	ldrh	r4, [r6, #0]
   81a70:	e001      	b.n	81a76 <_vfiprintf_r+0x46a>
   81a72:	6836      	ldr	r6, [r6, #0]
   81a74:	4634      	mov	r4, r6
   81a76:	2500      	movs	r5, #0
   81a78:	4606      	mov	r6, r0
   81a7a:	07fa      	lsls	r2, r7, #31
   81a7c:	d509      	bpl.n	81a92 <_vfiprintf_r+0x486>
   81a7e:	ea54 0205 	orrs.w	r2, r4, r5
   81a82:	d006      	beq.n	81a92 <_vfiprintf_r+0x486>
   81a84:	2230      	movs	r2, #48	; 0x30
   81a86:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   81a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   81a8e:	f047 0702 	orr.w	r7, r7, #2
   81a92:	2002      	movs	r0, #2
   81a94:	2100      	movs	r1, #0
   81a96:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   81a9a:	e004      	b.n	81aa6 <_vfiprintf_r+0x49a>
   81a9c:	00083b82 	.word	0x00083b82
   81aa0:	00083b93 	.word	0x00083b93
   81aa4:	2001      	movs	r0, #1
   81aa6:	f1bc 0f00 	cmp.w	ip, #0
   81aaa:	bfa8      	it	ge
   81aac:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   81ab0:	ea54 0105 	orrs.w	r1, r4, r5
   81ab4:	d102      	bne.n	81abc <_vfiprintf_r+0x4b0>
   81ab6:	f1bc 0f00 	cmp.w	ip, #0
   81aba:	d05a      	beq.n	81b72 <_vfiprintf_r+0x566>
   81abc:	2801      	cmp	r0, #1
   81abe:	d01d      	beq.n	81afc <_vfiprintf_r+0x4f0>
   81ac0:	2802      	cmp	r0, #2
   81ac2:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   81ac6:	d043      	beq.n	81b50 <_vfiprintf_r+0x544>
   81ac8:	f004 0207 	and.w	r2, r4, #7
   81acc:	08e4      	lsrs	r4, r4, #3
   81ace:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   81ad2:	08e9      	lsrs	r1, r5, #3
   81ad4:	4604      	mov	r4, r0
   81ad6:	460d      	mov	r5, r1
   81ad8:	3230      	adds	r2, #48	; 0x30
   81ada:	ea54 0105 	orrs.w	r1, r4, r5
   81ade:	469a      	mov	sl, r3
   81ae0:	701a      	strb	r2, [r3, #0]
   81ae2:	f103 33ff 	add.w	r3, r3, #4294967295
   81ae6:	d1ef      	bne.n	81ac8 <_vfiprintf_r+0x4bc>
   81ae8:	07f8      	lsls	r0, r7, #31
   81aea:	4655      	mov	r5, sl
   81aec:	d54c      	bpl.n	81b88 <_vfiprintf_r+0x57c>
   81aee:	2a30      	cmp	r2, #48	; 0x30
   81af0:	d04a      	beq.n	81b88 <_vfiprintf_r+0x57c>
   81af2:	2230      	movs	r2, #48	; 0x30
   81af4:	469a      	mov	sl, r3
   81af6:	f805 2c01 	strb.w	r2, [r5, #-1]
   81afa:	e045      	b.n	81b88 <_vfiprintf_r+0x57c>
   81afc:	2d00      	cmp	r5, #0
   81afe:	bf08      	it	eq
   81b00:	2c0a      	cmpeq	r4, #10
   81b02:	d205      	bcs.n	81b10 <_vfiprintf_r+0x504>
   81b04:	3430      	adds	r4, #48	; 0x30
   81b06:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   81b0a:	f80a 4f27 	strb.w	r4, [sl, #39]!
   81b0e:	e03b      	b.n	81b88 <_vfiprintf_r+0x57c>
   81b10:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   81b14:	9303      	str	r3, [sp, #12]
   81b16:	4620      	mov	r0, r4
   81b18:	4629      	mov	r1, r5
   81b1a:	220a      	movs	r2, #10
   81b1c:	2300      	movs	r3, #0
   81b1e:	f8cd c000 	str.w	ip, [sp]
   81b22:	f001 fd2b 	bl	8357c <__aeabi_uldivmod>
   81b26:	9803      	ldr	r0, [sp, #12]
   81b28:	3230      	adds	r2, #48	; 0x30
   81b2a:	f800 2901 	strb.w	r2, [r0], #-1
   81b2e:	4629      	mov	r1, r5
   81b30:	220a      	movs	r2, #10
   81b32:	2300      	movs	r3, #0
   81b34:	f8dd a00c 	ldr.w	sl, [sp, #12]
   81b38:	9003      	str	r0, [sp, #12]
   81b3a:	4620      	mov	r0, r4
   81b3c:	f001 fd1e 	bl	8357c <__aeabi_uldivmod>
   81b40:	4604      	mov	r4, r0
   81b42:	460d      	mov	r5, r1
   81b44:	ea54 0105 	orrs.w	r1, r4, r5
   81b48:	f8dd c000 	ldr.w	ip, [sp]
   81b4c:	d1e3      	bne.n	81b16 <_vfiprintf_r+0x50a>
   81b4e:	e01b      	b.n	81b88 <_vfiprintf_r+0x57c>
   81b50:	9905      	ldr	r1, [sp, #20]
   81b52:	f004 000f 	and.w	r0, r4, #15
   81b56:	0924      	lsrs	r4, r4, #4
   81b58:	5c0a      	ldrb	r2, [r1, r0]
   81b5a:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   81b5e:	0929      	lsrs	r1, r5, #4
   81b60:	4604      	mov	r4, r0
   81b62:	460d      	mov	r5, r1
   81b64:	469a      	mov	sl, r3
   81b66:	f803 2901 	strb.w	r2, [r3], #-1
   81b6a:	ea54 0205 	orrs.w	r2, r4, r5
   81b6e:	d1ef      	bne.n	81b50 <_vfiprintf_r+0x544>
   81b70:	e00a      	b.n	81b88 <_vfiprintf_r+0x57c>
   81b72:	b938      	cbnz	r0, 81b84 <_vfiprintf_r+0x578>
   81b74:	07f9      	lsls	r1, r7, #31
   81b76:	d505      	bpl.n	81b84 <_vfiprintf_r+0x578>
   81b78:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   81b7c:	2030      	movs	r0, #48	; 0x30
   81b7e:	f80a 0f27 	strb.w	r0, [sl, #39]!
   81b82:	e001      	b.n	81b88 <_vfiprintf_r+0x57c>
   81b84:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   81b88:	ad18      	add	r5, sp, #96	; 0x60
   81b8a:	ebca 0405 	rsb	r4, sl, r5
   81b8e:	4665      	mov	r5, ip
   81b90:	e00f      	b.n	81bb2 <_vfiprintf_r+0x5a6>
   81b92:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   81b96:	2b00      	cmp	r3, #0
   81b98:	f000 8176 	beq.w	81e88 <_vfiprintf_r+0x87c>
   81b9c:	2500      	movs	r5, #0
   81b9e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   81ba2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   81ba6:	2401      	movs	r4, #1
   81ba8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   81bac:	e001      	b.n	81bb2 <_vfiprintf_r+0x5a6>
   81bae:	4664      	mov	r4, ip
   81bb0:	4605      	mov	r5, r0
   81bb2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   81bb6:	42ac      	cmp	r4, r5
   81bb8:	bfac      	ite	ge
   81bba:	4621      	movge	r1, r4
   81bbc:	4629      	movlt	r1, r5
   81bbe:	9103      	str	r1, [sp, #12]
   81bc0:	b113      	cbz	r3, 81bc8 <_vfiprintf_r+0x5bc>
   81bc2:	9803      	ldr	r0, [sp, #12]
   81bc4:	1c42      	adds	r2, r0, #1
   81bc6:	9203      	str	r2, [sp, #12]
   81bc8:	f017 0102 	ands.w	r1, r7, #2
   81bcc:	9106      	str	r1, [sp, #24]
   81bce:	d002      	beq.n	81bd6 <_vfiprintf_r+0x5ca>
   81bd0:	9b03      	ldr	r3, [sp, #12]
   81bd2:	1c98      	adds	r0, r3, #2
   81bd4:	9003      	str	r0, [sp, #12]
   81bd6:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   81bda:	9207      	str	r2, [sp, #28]
   81bdc:	d13c      	bne.n	81c58 <_vfiprintf_r+0x64c>
   81bde:	9904      	ldr	r1, [sp, #16]
   81be0:	9b03      	ldr	r3, [sp, #12]
   81be2:	1acb      	subs	r3, r1, r3
   81be4:	2b00      	cmp	r3, #0
   81be6:	dd37      	ble.n	81c58 <_vfiprintf_r+0x64c>
   81be8:	48a5      	ldr	r0, [pc, #660]	; (81e80 <_vfiprintf_r+0x874>)
   81bea:	2b10      	cmp	r3, #16
   81bec:	f8c8 0000 	str.w	r0, [r8]
   81bf0:	dd1b      	ble.n	81c2a <_vfiprintf_r+0x61e>
   81bf2:	990c      	ldr	r1, [sp, #48]	; 0x30
   81bf4:	2210      	movs	r2, #16
   81bf6:	980d      	ldr	r0, [sp, #52]	; 0x34
   81bf8:	f8c8 2004 	str.w	r2, [r8, #4]
   81bfc:	1c4a      	adds	r2, r1, #1
   81bfe:	3010      	adds	r0, #16
   81c00:	2a07      	cmp	r2, #7
   81c02:	900d      	str	r0, [sp, #52]	; 0x34
   81c04:	920c      	str	r2, [sp, #48]	; 0x30
   81c06:	dc02      	bgt.n	81c0e <_vfiprintf_r+0x602>
   81c08:	f108 0808 	add.w	r8, r8, #8
   81c0c:	e00b      	b.n	81c26 <_vfiprintf_r+0x61a>
   81c0e:	4658      	mov	r0, fp
   81c10:	4649      	mov	r1, r9
   81c12:	aa0b      	add	r2, sp, #44	; 0x2c
   81c14:	9300      	str	r3, [sp, #0]
   81c16:	f7ff fcc5 	bl	815a4 <__sprint_r>
   81c1a:	9b00      	ldr	r3, [sp, #0]
   81c1c:	2800      	cmp	r0, #0
   81c1e:	f040 813a 	bne.w	81e96 <_vfiprintf_r+0x88a>
   81c22:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81c26:	3b10      	subs	r3, #16
   81c28:	e7de      	b.n	81be8 <_vfiprintf_r+0x5dc>
   81c2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81c2c:	f8c8 3004 	str.w	r3, [r8, #4]
   81c30:	18d1      	adds	r1, r2, r3
   81c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   81c34:	910d      	str	r1, [sp, #52]	; 0x34
   81c36:	1c58      	adds	r0, r3, #1
   81c38:	2807      	cmp	r0, #7
   81c3a:	900c      	str	r0, [sp, #48]	; 0x30
   81c3c:	dc02      	bgt.n	81c44 <_vfiprintf_r+0x638>
   81c3e:	f108 0808 	add.w	r8, r8, #8
   81c42:	e009      	b.n	81c58 <_vfiprintf_r+0x64c>
   81c44:	4658      	mov	r0, fp
   81c46:	4649      	mov	r1, r9
   81c48:	aa0b      	add	r2, sp, #44	; 0x2c
   81c4a:	f7ff fcab 	bl	815a4 <__sprint_r>
   81c4e:	2800      	cmp	r0, #0
   81c50:	f040 8121 	bne.w	81e96 <_vfiprintf_r+0x88a>
   81c54:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81c58:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   81c5c:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   81c60:	b1ca      	cbz	r2, 81c96 <_vfiprintf_r+0x68a>
   81c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   81c64:	2301      	movs	r3, #1
   81c66:	980d      	ldr	r0, [sp, #52]	; 0x34
   81c68:	f8c8 3004 	str.w	r3, [r8, #4]
   81c6c:	1c53      	adds	r3, r2, #1
   81c6e:	f8c8 1000 	str.w	r1, [r8]
   81c72:	1c41      	adds	r1, r0, #1
   81c74:	2b07      	cmp	r3, #7
   81c76:	910d      	str	r1, [sp, #52]	; 0x34
   81c78:	930c      	str	r3, [sp, #48]	; 0x30
   81c7a:	dc02      	bgt.n	81c82 <_vfiprintf_r+0x676>
   81c7c:	f108 0808 	add.w	r8, r8, #8
   81c80:	e009      	b.n	81c96 <_vfiprintf_r+0x68a>
   81c82:	4658      	mov	r0, fp
   81c84:	4649      	mov	r1, r9
   81c86:	aa0b      	add	r2, sp, #44	; 0x2c
   81c88:	f7ff fc8c 	bl	815a4 <__sprint_r>
   81c8c:	2800      	cmp	r0, #0
   81c8e:	f040 8102 	bne.w	81e96 <_vfiprintf_r+0x88a>
   81c92:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81c96:	9806      	ldr	r0, [sp, #24]
   81c98:	b1d0      	cbz	r0, 81cd0 <_vfiprintf_r+0x6c4>
   81c9a:	a90a      	add	r1, sp, #40	; 0x28
   81c9c:	f8c8 1000 	str.w	r1, [r8]
   81ca0:	990c      	ldr	r1, [sp, #48]	; 0x30
   81ca2:	2202      	movs	r2, #2
   81ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81ca6:	f8c8 2004 	str.w	r2, [r8, #4]
   81caa:	1c4a      	adds	r2, r1, #1
   81cac:	1c98      	adds	r0, r3, #2
   81cae:	2a07      	cmp	r2, #7
   81cb0:	900d      	str	r0, [sp, #52]	; 0x34
   81cb2:	920c      	str	r2, [sp, #48]	; 0x30
   81cb4:	dc02      	bgt.n	81cbc <_vfiprintf_r+0x6b0>
   81cb6:	f108 0808 	add.w	r8, r8, #8
   81cba:	e009      	b.n	81cd0 <_vfiprintf_r+0x6c4>
   81cbc:	4658      	mov	r0, fp
   81cbe:	4649      	mov	r1, r9
   81cc0:	aa0b      	add	r2, sp, #44	; 0x2c
   81cc2:	f7ff fc6f 	bl	815a4 <__sprint_r>
   81cc6:	2800      	cmp	r0, #0
   81cc8:	f040 80e5 	bne.w	81e96 <_vfiprintf_r+0x88a>
   81ccc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81cd0:	9b07      	ldr	r3, [sp, #28]
   81cd2:	2b80      	cmp	r3, #128	; 0x80
   81cd4:	d13c      	bne.n	81d50 <_vfiprintf_r+0x744>
   81cd6:	9804      	ldr	r0, [sp, #16]
   81cd8:	9903      	ldr	r1, [sp, #12]
   81cda:	1a43      	subs	r3, r0, r1
   81cdc:	2b00      	cmp	r3, #0
   81cde:	dd37      	ble.n	81d50 <_vfiprintf_r+0x744>
   81ce0:	4a68      	ldr	r2, [pc, #416]	; (81e84 <_vfiprintf_r+0x878>)
   81ce2:	2b10      	cmp	r3, #16
   81ce4:	f8c8 2000 	str.w	r2, [r8]
   81ce8:	dd1b      	ble.n	81d22 <_vfiprintf_r+0x716>
   81cea:	980c      	ldr	r0, [sp, #48]	; 0x30
   81cec:	2110      	movs	r1, #16
   81cee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81cf0:	f8c8 1004 	str.w	r1, [r8, #4]
   81cf4:	1c41      	adds	r1, r0, #1
   81cf6:	3210      	adds	r2, #16
   81cf8:	2907      	cmp	r1, #7
   81cfa:	920d      	str	r2, [sp, #52]	; 0x34
   81cfc:	910c      	str	r1, [sp, #48]	; 0x30
   81cfe:	dc02      	bgt.n	81d06 <_vfiprintf_r+0x6fa>
   81d00:	f108 0808 	add.w	r8, r8, #8
   81d04:	e00b      	b.n	81d1e <_vfiprintf_r+0x712>
   81d06:	4658      	mov	r0, fp
   81d08:	4649      	mov	r1, r9
   81d0a:	aa0b      	add	r2, sp, #44	; 0x2c
   81d0c:	9300      	str	r3, [sp, #0]
   81d0e:	f7ff fc49 	bl	815a4 <__sprint_r>
   81d12:	9b00      	ldr	r3, [sp, #0]
   81d14:	2800      	cmp	r0, #0
   81d16:	f040 80be 	bne.w	81e96 <_vfiprintf_r+0x88a>
   81d1a:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81d1e:	3b10      	subs	r3, #16
   81d20:	e7de      	b.n	81ce0 <_vfiprintf_r+0x6d4>
   81d22:	990c      	ldr	r1, [sp, #48]	; 0x30
   81d24:	980d      	ldr	r0, [sp, #52]	; 0x34
   81d26:	1c4a      	adds	r2, r1, #1
   81d28:	f8c8 3004 	str.w	r3, [r8, #4]
   81d2c:	2a07      	cmp	r2, #7
   81d2e:	4403      	add	r3, r0
   81d30:	930d      	str	r3, [sp, #52]	; 0x34
   81d32:	920c      	str	r2, [sp, #48]	; 0x30
   81d34:	dc02      	bgt.n	81d3c <_vfiprintf_r+0x730>
   81d36:	f108 0808 	add.w	r8, r8, #8
   81d3a:	e009      	b.n	81d50 <_vfiprintf_r+0x744>
   81d3c:	4658      	mov	r0, fp
   81d3e:	4649      	mov	r1, r9
   81d40:	aa0b      	add	r2, sp, #44	; 0x2c
   81d42:	f7ff fc2f 	bl	815a4 <__sprint_r>
   81d46:	2800      	cmp	r0, #0
   81d48:	f040 80a5 	bne.w	81e96 <_vfiprintf_r+0x88a>
   81d4c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81d50:	1b2d      	subs	r5, r5, r4
   81d52:	2d00      	cmp	r5, #0
   81d54:	dd34      	ble.n	81dc0 <_vfiprintf_r+0x7b4>
   81d56:	484b      	ldr	r0, [pc, #300]	; (81e84 <_vfiprintf_r+0x878>)
   81d58:	2d10      	cmp	r5, #16
   81d5a:	f8c8 0000 	str.w	r0, [r8]
   81d5e:	dd19      	ble.n	81d94 <_vfiprintf_r+0x788>
   81d60:	980c      	ldr	r0, [sp, #48]	; 0x30
   81d62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81d64:	1c43      	adds	r3, r0, #1
   81d66:	2110      	movs	r1, #16
   81d68:	3210      	adds	r2, #16
   81d6a:	2b07      	cmp	r3, #7
   81d6c:	f8c8 1004 	str.w	r1, [r8, #4]
   81d70:	920d      	str	r2, [sp, #52]	; 0x34
   81d72:	930c      	str	r3, [sp, #48]	; 0x30
   81d74:	dc02      	bgt.n	81d7c <_vfiprintf_r+0x770>
   81d76:	f108 0808 	add.w	r8, r8, #8
   81d7a:	e009      	b.n	81d90 <_vfiprintf_r+0x784>
   81d7c:	4658      	mov	r0, fp
   81d7e:	4649      	mov	r1, r9
   81d80:	aa0b      	add	r2, sp, #44	; 0x2c
   81d82:	f7ff fc0f 	bl	815a4 <__sprint_r>
   81d86:	2800      	cmp	r0, #0
   81d88:	f040 8085 	bne.w	81e96 <_vfiprintf_r+0x88a>
   81d8c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81d90:	3d10      	subs	r5, #16
   81d92:	e7e0      	b.n	81d56 <_vfiprintf_r+0x74a>
   81d94:	990c      	ldr	r1, [sp, #48]	; 0x30
   81d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81d98:	1c4a      	adds	r2, r1, #1
   81d9a:	f8c8 5004 	str.w	r5, [r8, #4]
   81d9e:	2a07      	cmp	r2, #7
   81da0:	441d      	add	r5, r3
   81da2:	950d      	str	r5, [sp, #52]	; 0x34
   81da4:	920c      	str	r2, [sp, #48]	; 0x30
   81da6:	dc02      	bgt.n	81dae <_vfiprintf_r+0x7a2>
   81da8:	f108 0808 	add.w	r8, r8, #8
   81dac:	e008      	b.n	81dc0 <_vfiprintf_r+0x7b4>
   81dae:	4658      	mov	r0, fp
   81db0:	4649      	mov	r1, r9
   81db2:	aa0b      	add	r2, sp, #44	; 0x2c
   81db4:	f7ff fbf6 	bl	815a4 <__sprint_r>
   81db8:	2800      	cmp	r0, #0
   81dba:	d16c      	bne.n	81e96 <_vfiprintf_r+0x88a>
   81dbc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   81dc2:	980d      	ldr	r0, [sp, #52]	; 0x34
   81dc4:	1c59      	adds	r1, r3, #1
   81dc6:	f8c8 4004 	str.w	r4, [r8, #4]
   81dca:	2907      	cmp	r1, #7
   81dcc:	4404      	add	r4, r0
   81dce:	f8c8 a000 	str.w	sl, [r8]
   81dd2:	940d      	str	r4, [sp, #52]	; 0x34
   81dd4:	910c      	str	r1, [sp, #48]	; 0x30
   81dd6:	dc02      	bgt.n	81dde <_vfiprintf_r+0x7d2>
   81dd8:	f108 0308 	add.w	r3, r8, #8
   81ddc:	e007      	b.n	81dee <_vfiprintf_r+0x7e2>
   81dde:	4658      	mov	r0, fp
   81de0:	4649      	mov	r1, r9
   81de2:	aa0b      	add	r2, sp, #44	; 0x2c
   81de4:	f7ff fbde 	bl	815a4 <__sprint_r>
   81de8:	2800      	cmp	r0, #0
   81dea:	d154      	bne.n	81e96 <_vfiprintf_r+0x88a>
   81dec:	ab32      	add	r3, sp, #200	; 0xc8
   81dee:	077a      	lsls	r2, r7, #29
   81df0:	d40b      	bmi.n	81e0a <_vfiprintf_r+0x7fe>
   81df2:	9802      	ldr	r0, [sp, #8]
   81df4:	9b03      	ldr	r3, [sp, #12]
   81df6:	9904      	ldr	r1, [sp, #16]
   81df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81dfa:	428b      	cmp	r3, r1
   81dfc:	bfac      	ite	ge
   81dfe:	18c0      	addge	r0, r0, r3
   81e00:	1840      	addlt	r0, r0, r1
   81e02:	9002      	str	r0, [sp, #8]
   81e04:	2a00      	cmp	r2, #0
   81e06:	d036      	beq.n	81e76 <_vfiprintf_r+0x86a>
   81e08:	e02f      	b.n	81e6a <_vfiprintf_r+0x85e>
   81e0a:	9c04      	ldr	r4, [sp, #16]
   81e0c:	9a03      	ldr	r2, [sp, #12]
   81e0e:	1aa4      	subs	r4, r4, r2
   81e10:	2c00      	cmp	r4, #0
   81e12:	ddee      	ble.n	81df2 <_vfiprintf_r+0x7e6>
   81e14:	481a      	ldr	r0, [pc, #104]	; (81e80 <_vfiprintf_r+0x874>)
   81e16:	2c10      	cmp	r4, #16
   81e18:	6018      	str	r0, [r3, #0]
   81e1a:	dd15      	ble.n	81e48 <_vfiprintf_r+0x83c>
   81e1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   81e1e:	2010      	movs	r0, #16
   81e20:	990d      	ldr	r1, [sp, #52]	; 0x34
   81e22:	6058      	str	r0, [r3, #4]
   81e24:	1c50      	adds	r0, r2, #1
   81e26:	3110      	adds	r1, #16
   81e28:	2807      	cmp	r0, #7
   81e2a:	910d      	str	r1, [sp, #52]	; 0x34
   81e2c:	900c      	str	r0, [sp, #48]	; 0x30
   81e2e:	dc01      	bgt.n	81e34 <_vfiprintf_r+0x828>
   81e30:	3308      	adds	r3, #8
   81e32:	e007      	b.n	81e44 <_vfiprintf_r+0x838>
   81e34:	4658      	mov	r0, fp
   81e36:	4649      	mov	r1, r9
   81e38:	aa0b      	add	r2, sp, #44	; 0x2c
   81e3a:	f7ff fbb3 	bl	815a4 <__sprint_r>
   81e3e:	2800      	cmp	r0, #0
   81e40:	d129      	bne.n	81e96 <_vfiprintf_r+0x88a>
   81e42:	ab32      	add	r3, sp, #200	; 0xc8
   81e44:	3c10      	subs	r4, #16
   81e46:	e7e5      	b.n	81e14 <_vfiprintf_r+0x808>
   81e48:	990c      	ldr	r1, [sp, #48]	; 0x30
   81e4a:	605c      	str	r4, [r3, #4]
   81e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81e4e:	1c4a      	adds	r2, r1, #1
   81e50:	191c      	adds	r4, r3, r4
   81e52:	2a07      	cmp	r2, #7
   81e54:	940d      	str	r4, [sp, #52]	; 0x34
   81e56:	920c      	str	r2, [sp, #48]	; 0x30
   81e58:	ddcb      	ble.n	81df2 <_vfiprintf_r+0x7e6>
   81e5a:	4658      	mov	r0, fp
   81e5c:	4649      	mov	r1, r9
   81e5e:	aa0b      	add	r2, sp, #44	; 0x2c
   81e60:	f7ff fba0 	bl	815a4 <__sprint_r>
   81e64:	2800      	cmp	r0, #0
   81e66:	d0c4      	beq.n	81df2 <_vfiprintf_r+0x7e6>
   81e68:	e015      	b.n	81e96 <_vfiprintf_r+0x88a>
   81e6a:	4658      	mov	r0, fp
   81e6c:	4649      	mov	r1, r9
   81e6e:	aa0b      	add	r2, sp, #44	; 0x2c
   81e70:	f7ff fb98 	bl	815a4 <__sprint_r>
   81e74:	b978      	cbnz	r0, 81e96 <_vfiprintf_r+0x88a>
   81e76:	2500      	movs	r5, #0
   81e78:	950c      	str	r5, [sp, #48]	; 0x30
   81e7a:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   81e7e:	e444      	b.n	8170a <_vfiprintf_r+0xfe>
   81e80:	00083b62 	.word	0x00083b62
   81e84:	00083b72 	.word	0x00083b72
   81e88:	980d      	ldr	r0, [sp, #52]	; 0x34
   81e8a:	b120      	cbz	r0, 81e96 <_vfiprintf_r+0x88a>
   81e8c:	4658      	mov	r0, fp
   81e8e:	4649      	mov	r1, r9
   81e90:	aa0b      	add	r2, sp, #44	; 0x2c
   81e92:	f7ff fb87 	bl	815a4 <__sprint_r>
   81e96:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   81e9a:	f001 0240 	and.w	r2, r1, #64	; 0x40
   81e9e:	b213      	sxth	r3, r2
   81ea0:	2b00      	cmp	r3, #0
   81ea2:	f47f abe6 	bne.w	81672 <_vfiprintf_r+0x66>
   81ea6:	9802      	ldr	r0, [sp, #8]
   81ea8:	b033      	add	sp, #204	; 0xcc
   81eaa:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   81eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00081eb2 <vfiprintf>:
   81eb2:	b530      	push	{r4, r5, lr}
   81eb4:	4613      	mov	r3, r2
   81eb6:	4a05      	ldr	r2, [pc, #20]	; (81ecc <vfiprintf+0x1a>)
   81eb8:	4605      	mov	r5, r0
   81eba:	460c      	mov	r4, r1
   81ebc:	6810      	ldr	r0, [r2, #0]
   81ebe:	4629      	mov	r1, r5
   81ec0:	4622      	mov	r2, r4
   81ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   81ec6:	f7ff bba1 	b.w	8160c <_vfiprintf_r>
   81eca:	bf00      	nop
   81ecc:	20070008 	.word	0x20070008

00081ed0 <__swsetup_r>:
   81ed0:	b538      	push	{r3, r4, r5, lr}
   81ed2:	4b2c      	ldr	r3, [pc, #176]	; (81f84 <__swsetup_r+0xb4>)
   81ed4:	4605      	mov	r5, r0
   81ed6:	6818      	ldr	r0, [r3, #0]
   81ed8:	460c      	mov	r4, r1
   81eda:	b118      	cbz	r0, 81ee4 <__swsetup_r+0x14>
   81edc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81ede:	b90a      	cbnz	r2, 81ee4 <__swsetup_r+0x14>
   81ee0:	f000 f99c 	bl	8221c <__sinit>
   81ee4:	89a0      	ldrh	r0, [r4, #12]
   81ee6:	f000 0108 	and.w	r1, r0, #8
   81eea:	b20b      	sxth	r3, r1
   81eec:	bb0b      	cbnz	r3, 81f32 <__swsetup_r+0x62>
   81eee:	f000 0210 	and.w	r2, r0, #16
   81ef2:	b211      	sxth	r1, r2
   81ef4:	b911      	cbnz	r1, 81efc <__swsetup_r+0x2c>
   81ef6:	f04f 30ff 	mov.w	r0, #4294967295
   81efa:	bd38      	pop	{r3, r4, r5, pc}
   81efc:	f000 0004 	and.w	r0, r0, #4
   81f00:	b203      	sxth	r3, r0
   81f02:	b193      	cbz	r3, 81f2a <__swsetup_r+0x5a>
   81f04:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f06:	b141      	cbz	r1, 81f1a <__swsetup_r+0x4a>
   81f08:	f104 0240 	add.w	r2, r4, #64	; 0x40
   81f0c:	4291      	cmp	r1, r2
   81f0e:	d002      	beq.n	81f16 <__swsetup_r+0x46>
   81f10:	4628      	mov	r0, r5
   81f12:	f000 fac1 	bl	82498 <_free_r>
   81f16:	2100      	movs	r1, #0
   81f18:	6321      	str	r1, [r4, #48]	; 0x30
   81f1a:	89a0      	ldrh	r0, [r4, #12]
   81f1c:	6921      	ldr	r1, [r4, #16]
   81f1e:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   81f22:	2200      	movs	r2, #0
   81f24:	81a3      	strh	r3, [r4, #12]
   81f26:	6062      	str	r2, [r4, #4]
   81f28:	6021      	str	r1, [r4, #0]
   81f2a:	89a0      	ldrh	r0, [r4, #12]
   81f2c:	f040 0308 	orr.w	r3, r0, #8
   81f30:	81a3      	strh	r3, [r4, #12]
   81f32:	6922      	ldr	r2, [r4, #16]
   81f34:	b94a      	cbnz	r2, 81f4a <__swsetup_r+0x7a>
   81f36:	89a1      	ldrh	r1, [r4, #12]
   81f38:	f401 7020 	and.w	r0, r1, #640	; 0x280
   81f3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   81f40:	d003      	beq.n	81f4a <__swsetup_r+0x7a>
   81f42:	4628      	mov	r0, r5
   81f44:	4621      	mov	r1, r4
   81f46:	f000 fd3f 	bl	829c8 <__smakebuf_r>
   81f4a:	89a3      	ldrh	r3, [r4, #12]
   81f4c:	f013 0201 	ands.w	r2, r3, #1
   81f50:	d005      	beq.n	81f5e <__swsetup_r+0x8e>
   81f52:	6961      	ldr	r1, [r4, #20]
   81f54:	2200      	movs	r2, #0
   81f56:	4248      	negs	r0, r1
   81f58:	60a2      	str	r2, [r4, #8]
   81f5a:	61a0      	str	r0, [r4, #24]
   81f5c:	e007      	b.n	81f6e <__swsetup_r+0x9e>
   81f5e:	f003 0102 	and.w	r1, r3, #2
   81f62:	b208      	sxth	r0, r1
   81f64:	b908      	cbnz	r0, 81f6a <__swsetup_r+0x9a>
   81f66:	6963      	ldr	r3, [r4, #20]
   81f68:	e000      	b.n	81f6c <__swsetup_r+0x9c>
   81f6a:	4613      	mov	r3, r2
   81f6c:	60a3      	str	r3, [r4, #8]
   81f6e:	6923      	ldr	r3, [r4, #16]
   81f70:	b933      	cbnz	r3, 81f80 <__swsetup_r+0xb0>
   81f72:	89a2      	ldrh	r2, [r4, #12]
   81f74:	f002 0180 	and.w	r1, r2, #128	; 0x80
   81f78:	b208      	sxth	r0, r1
   81f7a:	2800      	cmp	r0, #0
   81f7c:	d1bb      	bne.n	81ef6 <__swsetup_r+0x26>
   81f7e:	bd38      	pop	{r3, r4, r5, pc}
   81f80:	2000      	movs	r0, #0
   81f82:	bd38      	pop	{r3, r4, r5, pc}
   81f84:	20070008 	.word	0x20070008

00081f88 <__register_exitproc>:
   81f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81f8c:	4698      	mov	r8, r3
   81f8e:	4b23      	ldr	r3, [pc, #140]	; (8201c <__register_exitproc+0x94>)
   81f90:	4606      	mov	r6, r0
   81f92:	681c      	ldr	r4, [r3, #0]
   81f94:	460f      	mov	r7, r1
   81f96:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   81f9a:	4691      	mov	r9, r2
   81f9c:	b918      	cbnz	r0, 81fa6 <__register_exitproc+0x1e>
   81f9e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   81fa2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   81fa6:	6841      	ldr	r1, [r0, #4]
   81fa8:	291f      	cmp	r1, #31
   81faa:	dd16      	ble.n	81fda <__register_exitproc+0x52>
   81fac:	481c      	ldr	r0, [pc, #112]	; (82020 <__register_exitproc+0x98>)
   81fae:	b918      	cbnz	r0, 81fb8 <__register_exitproc+0x30>
   81fb0:	f04f 30ff 	mov.w	r0, #4294967295
   81fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81fb8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81fbc:	f000 fd70 	bl	82aa0 <malloc>
   81fc0:	2800      	cmp	r0, #0
   81fc2:	d0f5      	beq.n	81fb0 <__register_exitproc+0x28>
   81fc4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   81fc8:	2500      	movs	r5, #0
   81fca:	6045      	str	r5, [r0, #4]
   81fcc:	6002      	str	r2, [r0, #0]
   81fce:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   81fd2:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   81fd6:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   81fda:	b1b6      	cbz	r6, 8200a <__register_exitproc+0x82>
   81fdc:	6844      	ldr	r4, [r0, #4]
   81fde:	2201      	movs	r2, #1
   81fe0:	fa02 f204 	lsl.w	r2, r2, r4
   81fe4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   81fe8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   81fec:	4311      	orrs	r1, r2
   81fee:	2e02      	cmp	r6, #2
   81ff0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   81ff4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   81ff8:	461c      	mov	r4, r3
   81ffa:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   81ffe:	d104      	bne.n	8200a <__register_exitproc+0x82>
   82000:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   82004:	431a      	orrs	r2, r3
   82006:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   8200a:	6841      	ldr	r1, [r0, #4]
   8200c:	1c8b      	adds	r3, r1, #2
   8200e:	1c4a      	adds	r2, r1, #1
   82010:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   82014:	6042      	str	r2, [r0, #4]
   82016:	2000      	movs	r0, #0
   82018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8201c:	00083b5c 	.word	0x00083b5c
   82020:	00082aa1 	.word	0x00082aa1

00082024 <register_fini>:
   82024:	4b02      	ldr	r3, [pc, #8]	; (82030 <register_fini+0xc>)
   82026:	b113      	cbz	r3, 8202e <register_fini+0xa>
   82028:	4802      	ldr	r0, [pc, #8]	; (82034 <register_fini+0x10>)
   8202a:	f7ff b9c1 	b.w	813b0 <atexit>
   8202e:	4770      	bx	lr
   82030:	00000000 	.word	0x00000000
   82034:	000813bd 	.word	0x000813bd

00082038 <_fflush_r>:
   82038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8203c:	460c      	mov	r4, r1
   8203e:	4605      	mov	r5, r0
   82040:	b118      	cbz	r0, 8204a <_fflush_r+0x12>
   82042:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82044:	b90b      	cbnz	r3, 8204a <_fflush_r+0x12>
   82046:	f000 f8e9 	bl	8221c <__sinit>
   8204a:	89a2      	ldrh	r2, [r4, #12]
   8204c:	b332      	cbz	r2, 8209c <_fflush_r+0x64>
   8204e:	f002 0008 	and.w	r0, r2, #8
   82052:	b201      	sxth	r1, r0
   82054:	2900      	cmp	r1, #0
   82056:	d162      	bne.n	8211e <_fflush_r+0xe6>
   82058:	6861      	ldr	r1, [r4, #4]
   8205a:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   8205e:	2900      	cmp	r1, #0
   82060:	81a0      	strh	r0, [r4, #12]
   82062:	dc02      	bgt.n	8206a <_fflush_r+0x32>
   82064:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   82066:	2b00      	cmp	r3, #0
   82068:	dd18      	ble.n	8209c <_fflush_r+0x64>
   8206a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   8206c:	b1b6      	cbz	r6, 8209c <_fflush_r+0x64>
   8206e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   82072:	2000      	movs	r0, #0
   82074:	b212      	sxth	r2, r2
   82076:	682f      	ldr	r7, [r5, #0]
   82078:	6028      	str	r0, [r5, #0]
   8207a:	b10a      	cbz	r2, 82080 <_fflush_r+0x48>
   8207c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   8207e:	e010      	b.n	820a2 <_fflush_r+0x6a>
   82080:	2301      	movs	r3, #1
   82082:	4628      	mov	r0, r5
   82084:	69e1      	ldr	r1, [r4, #28]
   82086:	47b0      	blx	r6
   82088:	4602      	mov	r2, r0
   8208a:	3001      	adds	r0, #1
   8208c:	d109      	bne.n	820a2 <_fflush_r+0x6a>
   8208e:	6829      	ldr	r1, [r5, #0]
   82090:	b139      	cbz	r1, 820a2 <_fflush_r+0x6a>
   82092:	291d      	cmp	r1, #29
   82094:	d001      	beq.n	8209a <_fflush_r+0x62>
   82096:	2916      	cmp	r1, #22
   82098:	d14e      	bne.n	82138 <_fflush_r+0x100>
   8209a:	602f      	str	r7, [r5, #0]
   8209c:	2000      	movs	r0, #0
   8209e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820a2:	89a6      	ldrh	r6, [r4, #12]
   820a4:	f006 0104 	and.w	r1, r6, #4
   820a8:	b20b      	sxth	r3, r1
   820aa:	b12b      	cbz	r3, 820b8 <_fflush_r+0x80>
   820ac:	6860      	ldr	r0, [r4, #4]
   820ae:	6b26      	ldr	r6, [r4, #48]	; 0x30
   820b0:	1a12      	subs	r2, r2, r0
   820b2:	b10e      	cbz	r6, 820b8 <_fflush_r+0x80>
   820b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   820b6:	1a52      	subs	r2, r2, r1
   820b8:	69e1      	ldr	r1, [r4, #28]
   820ba:	2300      	movs	r3, #0
   820bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   820be:	4628      	mov	r0, r5
   820c0:	47b0      	blx	r6
   820c2:	1c41      	adds	r1, r0, #1
   820c4:	d105      	bne.n	820d2 <_fflush_r+0x9a>
   820c6:	682a      	ldr	r2, [r5, #0]
   820c8:	b11a      	cbz	r2, 820d2 <_fflush_r+0x9a>
   820ca:	2a1d      	cmp	r2, #29
   820cc:	d001      	beq.n	820d2 <_fflush_r+0x9a>
   820ce:	2a16      	cmp	r2, #22
   820d0:	d11f      	bne.n	82112 <_fflush_r+0xda>
   820d2:	89a3      	ldrh	r3, [r4, #12]
   820d4:	2100      	movs	r1, #0
   820d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   820da:	81a2      	strh	r2, [r4, #12]
   820dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   820e0:	6922      	ldr	r2, [r4, #16]
   820e2:	6061      	str	r1, [r4, #4]
   820e4:	b219      	sxth	r1, r3
   820e6:	6022      	str	r2, [r4, #0]
   820e8:	b121      	cbz	r1, 820f4 <_fflush_r+0xbc>
   820ea:	1c42      	adds	r2, r0, #1
   820ec:	d101      	bne.n	820f2 <_fflush_r+0xba>
   820ee:	682a      	ldr	r2, [r5, #0]
   820f0:	b902      	cbnz	r2, 820f4 <_fflush_r+0xbc>
   820f2:	6520      	str	r0, [r4, #80]	; 0x50
   820f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   820f6:	602f      	str	r7, [r5, #0]
   820f8:	2900      	cmp	r1, #0
   820fa:	d0cf      	beq.n	8209c <_fflush_r+0x64>
   820fc:	f104 0040 	add.w	r0, r4, #64	; 0x40
   82100:	4281      	cmp	r1, r0
   82102:	d002      	beq.n	8210a <_fflush_r+0xd2>
   82104:	4628      	mov	r0, r5
   82106:	f000 f9c7 	bl	82498 <_free_r>
   8210a:	2000      	movs	r0, #0
   8210c:	6320      	str	r0, [r4, #48]	; 0x30
   8210e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82112:	89a3      	ldrh	r3, [r4, #12]
   82114:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   82118:	81a1      	strh	r1, [r4, #12]
   8211a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8211e:	6926      	ldr	r6, [r4, #16]
   82120:	2e00      	cmp	r6, #0
   82122:	d0bb      	beq.n	8209c <_fflush_r+0x64>
   82124:	0792      	lsls	r2, r2, #30
   82126:	6823      	ldr	r3, [r4, #0]
   82128:	bf0c      	ite	eq
   8212a:	6962      	ldreq	r2, [r4, #20]
   8212c:	2200      	movne	r2, #0
   8212e:	ebc6 0803 	rsb	r8, r6, r3
   82132:	6026      	str	r6, [r4, #0]
   82134:	60a2      	str	r2, [r4, #8]
   82136:	e012      	b.n	8215e <_fflush_r+0x126>
   82138:	89a3      	ldrh	r3, [r4, #12]
   8213a:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   8213e:	81a0      	strh	r0, [r4, #12]
   82140:	f04f 30ff 	mov.w	r0, #4294967295
   82144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82148:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8214a:	4628      	mov	r0, r5
   8214c:	69e1      	ldr	r1, [r4, #28]
   8214e:	4632      	mov	r2, r6
   82150:	4643      	mov	r3, r8
   82152:	47b8      	blx	r7
   82154:	2800      	cmp	r0, #0
   82156:	ddef      	ble.n	82138 <_fflush_r+0x100>
   82158:	1836      	adds	r6, r6, r0
   8215a:	ebc0 0808 	rsb	r8, r0, r8
   8215e:	f1b8 0f00 	cmp.w	r8, #0
   82162:	dcf1      	bgt.n	82148 <_fflush_r+0x110>
   82164:	e79a      	b.n	8209c <_fflush_r+0x64>

00082166 <fflush>:
   82166:	4601      	mov	r1, r0
   82168:	b920      	cbnz	r0, 82174 <fflush+0xe>
   8216a:	4804      	ldr	r0, [pc, #16]	; (8217c <fflush+0x16>)
   8216c:	4904      	ldr	r1, [pc, #16]	; (82180 <fflush+0x1a>)
   8216e:	6800      	ldr	r0, [r0, #0]
   82170:	f000 bbc4 	b.w	828fc <_fwalk_reent>
   82174:	4b03      	ldr	r3, [pc, #12]	; (82184 <fflush+0x1e>)
   82176:	6818      	ldr	r0, [r3, #0]
   82178:	f7ff bf5e 	b.w	82038 <_fflush_r>
   8217c:	00083b5c 	.word	0x00083b5c
   82180:	00082039 	.word	0x00082039
   82184:	20070008 	.word	0x20070008

00082188 <__fp_lock>:
   82188:	2000      	movs	r0, #0
   8218a:	4770      	bx	lr

0008218c <__fp_unlock>:
   8218c:	2000      	movs	r0, #0
   8218e:	4770      	bx	lr

00082190 <_cleanup_r>:
   82190:	4901      	ldr	r1, [pc, #4]	; (82198 <_cleanup_r+0x8>)
   82192:	f000 bb92 	b.w	828ba <_fwalk>
   82196:	bf00      	nop
   82198:	000834e1 	.word	0x000834e1

0008219c <std.isra.0>:
   8219c:	2300      	movs	r3, #0
   8219e:	b510      	push	{r4, lr}
   821a0:	4604      	mov	r4, r0
   821a2:	6003      	str	r3, [r0, #0]
   821a4:	6043      	str	r3, [r0, #4]
   821a6:	6083      	str	r3, [r0, #8]
   821a8:	8181      	strh	r1, [r0, #12]
   821aa:	6643      	str	r3, [r0, #100]	; 0x64
   821ac:	81c2      	strh	r2, [r0, #14]
   821ae:	6103      	str	r3, [r0, #16]
   821b0:	6143      	str	r3, [r0, #20]
   821b2:	6183      	str	r3, [r0, #24]
   821b4:	4619      	mov	r1, r3
   821b6:	2208      	movs	r2, #8
   821b8:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   821bc:	f7ff f963 	bl	81486 <memset>
   821c0:	4804      	ldr	r0, [pc, #16]	; (821d4 <std.isra.0+0x38>)
   821c2:	4905      	ldr	r1, [pc, #20]	; (821d8 <std.isra.0+0x3c>)
   821c4:	4a05      	ldr	r2, [pc, #20]	; (821dc <std.isra.0+0x40>)
   821c6:	4b06      	ldr	r3, [pc, #24]	; (821e0 <std.isra.0+0x44>)
   821c8:	61e4      	str	r4, [r4, #28]
   821ca:	6220      	str	r0, [r4, #32]
   821cc:	6261      	str	r1, [r4, #36]	; 0x24
   821ce:	62a2      	str	r2, [r4, #40]	; 0x28
   821d0:	62e3      	str	r3, [r4, #44]	; 0x2c
   821d2:	bd10      	pop	{r4, pc}
   821d4:	00083215 	.word	0x00083215
   821d8:	0008323b 	.word	0x0008323b
   821dc:	00083277 	.word	0x00083277
   821e0:	0008329b 	.word	0x0008329b

000821e4 <__sfmoreglue>:
   821e4:	b570      	push	{r4, r5, r6, lr}
   821e6:	2568      	movs	r5, #104	; 0x68
   821e8:	434d      	muls	r5, r1
   821ea:	460e      	mov	r6, r1
   821ec:	f105 010c 	add.w	r1, r5, #12
   821f0:	f000 fc66 	bl	82ac0 <_malloc_r>
   821f4:	4604      	mov	r4, r0
   821f6:	b140      	cbz	r0, 8220a <__sfmoreglue+0x26>
   821f8:	f100 000c 	add.w	r0, r0, #12
   821fc:	2100      	movs	r1, #0
   821fe:	e884 0042 	stmia.w	r4, {r1, r6}
   82202:	60a0      	str	r0, [r4, #8]
   82204:	462a      	mov	r2, r5
   82206:	f7ff f93e 	bl	81486 <memset>
   8220a:	4620      	mov	r0, r4
   8220c:	bd70      	pop	{r4, r5, r6, pc}

0008220e <_cleanup>:
   8220e:	4b02      	ldr	r3, [pc, #8]	; (82218 <_cleanup+0xa>)
   82210:	6818      	ldr	r0, [r3, #0]
   82212:	f7ff bfbd 	b.w	82190 <_cleanup_r>
   82216:	bf00      	nop
   82218:	00083b5c 	.word	0x00083b5c

0008221c <__sinit>:
   8221c:	b538      	push	{r3, r4, r5, lr}
   8221e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82220:	4604      	mov	r4, r0
   82222:	b9eb      	cbnz	r3, 82260 <__sinit+0x44>
   82224:	4a0f      	ldr	r2, [pc, #60]	; (82264 <__sinit+0x48>)
   82226:	2501      	movs	r5, #1
   82228:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   8222c:	63c2      	str	r2, [r0, #60]	; 0x3c
   8222e:	6385      	str	r5, [r0, #56]	; 0x38
   82230:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   82234:	2003      	movs	r0, #3
   82236:	461a      	mov	r2, r3
   82238:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8223c:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   82240:	6860      	ldr	r0, [r4, #4]
   82242:	2104      	movs	r1, #4
   82244:	f7ff ffaa 	bl	8219c <std.isra.0>
   82248:	68a0      	ldr	r0, [r4, #8]
   8224a:	2109      	movs	r1, #9
   8224c:	462a      	mov	r2, r5
   8224e:	f7ff ffa5 	bl	8219c <std.isra.0>
   82252:	68e0      	ldr	r0, [r4, #12]
   82254:	2112      	movs	r1, #18
   82256:	2202      	movs	r2, #2
   82258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8225c:	f7ff bf9e 	b.w	8219c <std.isra.0>
   82260:	bd38      	pop	{r3, r4, r5, pc}
   82262:	bf00      	nop
   82264:	00082191 	.word	0x00082191

00082268 <__sfp>:
   82268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8226a:	4b1d      	ldr	r3, [pc, #116]	; (822e0 <__sfp+0x78>)
   8226c:	4607      	mov	r7, r0
   8226e:	681e      	ldr	r6, [r3, #0]
   82270:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   82272:	b910      	cbnz	r0, 8227a <__sfp+0x12>
   82274:	4630      	mov	r0, r6
   82276:	f7ff ffd1 	bl	8221c <__sinit>
   8227a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   8227e:	68b4      	ldr	r4, [r6, #8]
   82280:	6871      	ldr	r1, [r6, #4]
   82282:	3901      	subs	r1, #1
   82284:	d404      	bmi.n	82290 <__sfp+0x28>
   82286:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   8228a:	b185      	cbz	r5, 822ae <__sfp+0x46>
   8228c:	3468      	adds	r4, #104	; 0x68
   8228e:	e7f8      	b.n	82282 <__sfp+0x1a>
   82290:	6832      	ldr	r2, [r6, #0]
   82292:	b10a      	cbz	r2, 82298 <__sfp+0x30>
   82294:	6836      	ldr	r6, [r6, #0]
   82296:	e7f2      	b.n	8227e <__sfp+0x16>
   82298:	4638      	mov	r0, r7
   8229a:	2104      	movs	r1, #4
   8229c:	f7ff ffa2 	bl	821e4 <__sfmoreglue>
   822a0:	6030      	str	r0, [r6, #0]
   822a2:	2800      	cmp	r0, #0
   822a4:	d1f6      	bne.n	82294 <__sfp+0x2c>
   822a6:	240c      	movs	r4, #12
   822a8:	603c      	str	r4, [r7, #0]
   822aa:	4604      	mov	r4, r0
   822ac:	e015      	b.n	822da <__sfp+0x72>
   822ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   822b2:	2001      	movs	r0, #1
   822b4:	81a0      	strh	r0, [r4, #12]
   822b6:	81e3      	strh	r3, [r4, #14]
   822b8:	6665      	str	r5, [r4, #100]	; 0x64
   822ba:	6025      	str	r5, [r4, #0]
   822bc:	60a5      	str	r5, [r4, #8]
   822be:	6065      	str	r5, [r4, #4]
   822c0:	6125      	str	r5, [r4, #16]
   822c2:	6165      	str	r5, [r4, #20]
   822c4:	61a5      	str	r5, [r4, #24]
   822c6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   822ca:	4629      	mov	r1, r5
   822cc:	2208      	movs	r2, #8
   822ce:	f7ff f8da 	bl	81486 <memset>
   822d2:	6325      	str	r5, [r4, #48]	; 0x30
   822d4:	6365      	str	r5, [r4, #52]	; 0x34
   822d6:	6465      	str	r5, [r4, #68]	; 0x44
   822d8:	64a5      	str	r5, [r4, #72]	; 0x48
   822da:	4620      	mov	r0, r4
   822dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   822de:	bf00      	nop
   822e0:	00083b5c 	.word	0x00083b5c

000822e4 <__sfp_lock_acquire>:
   822e4:	4770      	bx	lr

000822e6 <__sfp_lock_release>:
   822e6:	4770      	bx	lr

000822e8 <__sinit_lock_acquire>:
   822e8:	4770      	bx	lr

000822ea <__sinit_lock_release>:
   822ea:	4770      	bx	lr

000822ec <__fp_lock_all>:
   822ec:	4b02      	ldr	r3, [pc, #8]	; (822f8 <__fp_lock_all+0xc>)
   822ee:	4903      	ldr	r1, [pc, #12]	; (822fc <__fp_lock_all+0x10>)
   822f0:	6818      	ldr	r0, [r3, #0]
   822f2:	f000 bae2 	b.w	828ba <_fwalk>
   822f6:	bf00      	nop
   822f8:	20070008 	.word	0x20070008
   822fc:	00082189 	.word	0x00082189

00082300 <__fp_unlock_all>:
   82300:	4b02      	ldr	r3, [pc, #8]	; (8230c <__fp_unlock_all+0xc>)
   82302:	4903      	ldr	r1, [pc, #12]	; (82310 <__fp_unlock_all+0x10>)
   82304:	6818      	ldr	r0, [r3, #0]
   82306:	f000 bad8 	b.w	828ba <_fwalk>
   8230a:	bf00      	nop
   8230c:	20070008 	.word	0x20070008
   82310:	0008218d 	.word	0x0008218d

00082314 <_fputwc_r>:
   82314:	8993      	ldrh	r3, [r2, #12]
   82316:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   8231a:	4614      	mov	r4, r2
   8231c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   82320:	4680      	mov	r8, r0
   82322:	b210      	sxth	r0, r2
   82324:	460e      	mov	r6, r1
   82326:	b930      	cbnz	r0, 82336 <_fputwc_r+0x22>
   82328:	6e67      	ldr	r7, [r4, #100]	; 0x64
   8232a:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   8232e:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   82332:	81a1      	strh	r1, [r4, #12]
   82334:	6663      	str	r3, [r4, #100]	; 0x64
   82336:	f000 fb29 	bl	8298c <__locale_mb_cur_max>
   8233a:	2801      	cmp	r0, #1
   8233c:	d106      	bne.n	8234c <_fputwc_r+0x38>
   8233e:	b12e      	cbz	r6, 8234c <_fputwc_r+0x38>
   82340:	2eff      	cmp	r6, #255	; 0xff
   82342:	d803      	bhi.n	8234c <_fputwc_r+0x38>
   82344:	f88d 6004 	strb.w	r6, [sp, #4]
   82348:	4607      	mov	r7, r0
   8234a:	e00f      	b.n	8236c <_fputwc_r+0x58>
   8234c:	4632      	mov	r2, r6
   8234e:	4640      	mov	r0, r8
   82350:	a901      	add	r1, sp, #4
   82352:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82356:	f001 f809 	bl	8336c <_wcrtomb_r>
   8235a:	1c42      	adds	r2, r0, #1
   8235c:	4607      	mov	r7, r0
   8235e:	d105      	bne.n	8236c <_fputwc_r+0x58>
   82360:	89a2      	ldrh	r2, [r4, #12]
   82362:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   82366:	81a0      	strh	r0, [r4, #12]
   82368:	4638      	mov	r0, r7
   8236a:	e031      	b.n	823d0 <_fputwc_r+0xbc>
   8236c:	2500      	movs	r5, #0
   8236e:	42bd      	cmp	r5, r7
   82370:	d02a      	beq.n	823c8 <_fputwc_r+0xb4>
   82372:	68a1      	ldr	r1, [r4, #8]
   82374:	ab01      	add	r3, sp, #4
   82376:	1e4a      	subs	r2, r1, #1
   82378:	2a00      	cmp	r2, #0
   8237a:	60a2      	str	r2, [r4, #8]
   8237c:	da1a      	bge.n	823b4 <_fputwc_r+0xa0>
   8237e:	69a0      	ldr	r0, [r4, #24]
   82380:	4282      	cmp	r2, r0
   82382:	db0c      	blt.n	8239e <_fputwc_r+0x8a>
   82384:	6821      	ldr	r1, [r4, #0]
   82386:	5d5a      	ldrb	r2, [r3, r5]
   82388:	700a      	strb	r2, [r1, #0]
   8238a:	6823      	ldr	r3, [r4, #0]
   8238c:	7819      	ldrb	r1, [r3, #0]
   8238e:	290a      	cmp	r1, #10
   82390:	d003      	beq.n	8239a <_fputwc_r+0x86>
   82392:	3301      	adds	r3, #1
   82394:	2200      	movs	r2, #0
   82396:	6023      	str	r3, [r4, #0]
   82398:	e013      	b.n	823c2 <_fputwc_r+0xae>
   8239a:	4640      	mov	r0, r8
   8239c:	e001      	b.n	823a2 <_fputwc_r+0x8e>
   8239e:	5d59      	ldrb	r1, [r3, r5]
   823a0:	4640      	mov	r0, r8
   823a2:	4622      	mov	r2, r4
   823a4:	f000 ff88 	bl	832b8 <__swbuf_r>
   823a8:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   823ac:	4248      	negs	r0, r1
   823ae:	eb50 0201 	adcs.w	r2, r0, r1
   823b2:	e006      	b.n	823c2 <_fputwc_r+0xae>
   823b4:	6820      	ldr	r0, [r4, #0]
   823b6:	5d59      	ldrb	r1, [r3, r5]
   823b8:	7001      	strb	r1, [r0, #0]
   823ba:	6822      	ldr	r2, [r4, #0]
   823bc:	1c53      	adds	r3, r2, #1
   823be:	6023      	str	r3, [r4, #0]
   823c0:	e000      	b.n	823c4 <_fputwc_r+0xb0>
   823c2:	b91a      	cbnz	r2, 823cc <_fputwc_r+0xb8>
   823c4:	3501      	adds	r5, #1
   823c6:	e7d2      	b.n	8236e <_fputwc_r+0x5a>
   823c8:	4630      	mov	r0, r6
   823ca:	e001      	b.n	823d0 <_fputwc_r+0xbc>
   823cc:	f04f 30ff 	mov.w	r0, #4294967295
   823d0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

000823d4 <fputwc>:
   823d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   823d6:	4c08      	ldr	r4, [pc, #32]	; (823f8 <fputwc+0x24>)
   823d8:	4607      	mov	r7, r0
   823da:	6820      	ldr	r0, [r4, #0]
   823dc:	460e      	mov	r6, r1
   823de:	b118      	cbz	r0, 823e8 <fputwc+0x14>
   823e0:	6b85      	ldr	r5, [r0, #56]	; 0x38
   823e2:	b90d      	cbnz	r5, 823e8 <fputwc+0x14>
   823e4:	f7ff ff1a 	bl	8221c <__sinit>
   823e8:	6820      	ldr	r0, [r4, #0]
   823ea:	4639      	mov	r1, r7
   823ec:	4632      	mov	r2, r6
   823ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   823f2:	f7ff bf8f 	b.w	82314 <_fputwc_r>
   823f6:	bf00      	nop
   823f8:	20070008 	.word	0x20070008

000823fc <_malloc_trim_r>:
   823fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   823fe:	4d23      	ldr	r5, [pc, #140]	; (8248c <_malloc_trim_r+0x90>)
   82400:	460e      	mov	r6, r1
   82402:	4604      	mov	r4, r0
   82404:	f000 fd86 	bl	82f14 <__malloc_lock>
   82408:	68ab      	ldr	r3, [r5, #8]
   8240a:	685f      	ldr	r7, [r3, #4]
   8240c:	f027 0703 	bic.w	r7, r7, #3
   82410:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   82414:	1b81      	subs	r1, r0, r6
   82416:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8241a:	f022 060f 	bic.w	r6, r2, #15
   8241e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   82422:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   82426:	da04      	bge.n	82432 <_malloc_trim_r+0x36>
   82428:	4620      	mov	r0, r4
   8242a:	f000 fd74 	bl	82f16 <__malloc_unlock>
   8242e:	2000      	movs	r0, #0
   82430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82432:	2100      	movs	r1, #0
   82434:	4620      	mov	r0, r4
   82436:	f000 fedd 	bl	831f4 <_sbrk_r>
   8243a:	68ab      	ldr	r3, [r5, #8]
   8243c:	19d9      	adds	r1, r3, r7
   8243e:	4288      	cmp	r0, r1
   82440:	d1f2      	bne.n	82428 <_malloc_trim_r+0x2c>
   82442:	4271      	negs	r1, r6
   82444:	4620      	mov	r0, r4
   82446:	f000 fed5 	bl	831f4 <_sbrk_r>
   8244a:	3001      	adds	r0, #1
   8244c:	d110      	bne.n	82470 <_malloc_trim_r+0x74>
   8244e:	2100      	movs	r1, #0
   82450:	4620      	mov	r0, r4
   82452:	f000 fecf 	bl	831f4 <_sbrk_r>
   82456:	68ab      	ldr	r3, [r5, #8]
   82458:	1ac2      	subs	r2, r0, r3
   8245a:	2a0f      	cmp	r2, #15
   8245c:	dde4      	ble.n	82428 <_malloc_trim_r+0x2c>
   8245e:	490c      	ldr	r1, [pc, #48]	; (82490 <_malloc_trim_r+0x94>)
   82460:	f042 0201 	orr.w	r2, r2, #1
   82464:	6809      	ldr	r1, [r1, #0]
   82466:	605a      	str	r2, [r3, #4]
   82468:	1a40      	subs	r0, r0, r1
   8246a:	490a      	ldr	r1, [pc, #40]	; (82494 <_malloc_trim_r+0x98>)
   8246c:	6008      	str	r0, [r1, #0]
   8246e:	e7db      	b.n	82428 <_malloc_trim_r+0x2c>
   82470:	4b08      	ldr	r3, [pc, #32]	; (82494 <_malloc_trim_r+0x98>)
   82472:	68a8      	ldr	r0, [r5, #8]
   82474:	681a      	ldr	r2, [r3, #0]
   82476:	1bbf      	subs	r7, r7, r6
   82478:	f047 0701 	orr.w	r7, r7, #1
   8247c:	6047      	str	r7, [r0, #4]
   8247e:	1b96      	subs	r6, r2, r6
   82480:	4620      	mov	r0, r4
   82482:	601e      	str	r6, [r3, #0]
   82484:	f000 fd47 	bl	82f16 <__malloc_unlock>
   82488:	2001      	movs	r0, #1
   8248a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8248c:	200704b4 	.word	0x200704b4
   82490:	200708bc 	.word	0x200708bc
   82494:	200709e4 	.word	0x200709e4

00082498 <_free_r>:
   82498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8249a:	4606      	mov	r6, r0
   8249c:	460d      	mov	r5, r1
   8249e:	2900      	cmp	r1, #0
   824a0:	f000 80a6 	beq.w	825f0 <_free_r+0x158>
   824a4:	f000 fd36 	bl	82f14 <__malloc_lock>
   824a8:	f855 cc04 	ldr.w	ip, [r5, #-4]
   824ac:	4f51      	ldr	r7, [pc, #324]	; (825f4 <_free_r+0x15c>)
   824ae:	f1a5 0308 	sub.w	r3, r5, #8
   824b2:	f02c 0201 	bic.w	r2, ip, #1
   824b6:	189c      	adds	r4, r3, r2
   824b8:	68b9      	ldr	r1, [r7, #8]
   824ba:	6860      	ldr	r0, [r4, #4]
   824bc:	428c      	cmp	r4, r1
   824be:	f020 0003 	bic.w	r0, r0, #3
   824c2:	f00c 0101 	and.w	r1, ip, #1
   824c6:	d11c      	bne.n	82502 <_free_r+0x6a>
   824c8:	1882      	adds	r2, r0, r2
   824ca:	b939      	cbnz	r1, 824dc <_free_r+0x44>
   824cc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   824d0:	1a5b      	subs	r3, r3, r1
   824d2:	6898      	ldr	r0, [r3, #8]
   824d4:	1852      	adds	r2, r2, r1
   824d6:	68d9      	ldr	r1, [r3, #12]
   824d8:	60c1      	str	r1, [r0, #12]
   824da:	6088      	str	r0, [r1, #8]
   824dc:	4845      	ldr	r0, [pc, #276]	; (825f4 <_free_r+0x15c>)
   824de:	f042 0101 	orr.w	r1, r2, #1
   824e2:	6059      	str	r1, [r3, #4]
   824e4:	6083      	str	r3, [r0, #8]
   824e6:	4b44      	ldr	r3, [pc, #272]	; (825f8 <_free_r+0x160>)
   824e8:	6819      	ldr	r1, [r3, #0]
   824ea:	428a      	cmp	r2, r1
   824ec:	d304      	bcc.n	824f8 <_free_r+0x60>
   824ee:	4a43      	ldr	r2, [pc, #268]	; (825fc <_free_r+0x164>)
   824f0:	4630      	mov	r0, r6
   824f2:	6811      	ldr	r1, [r2, #0]
   824f4:	f7ff ff82 	bl	823fc <_malloc_trim_r>
   824f8:	4630      	mov	r0, r6
   824fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   824fe:	f000 bd0a 	b.w	82f16 <__malloc_unlock>
   82502:	6060      	str	r0, [r4, #4]
   82504:	b959      	cbnz	r1, 8251e <_free_r+0x86>
   82506:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8250a:	3708      	adds	r7, #8
   8250c:	1b5b      	subs	r3, r3, r5
   8250e:	1952      	adds	r2, r2, r5
   82510:	689d      	ldr	r5, [r3, #8]
   82512:	42bd      	cmp	r5, r7
   82514:	d005      	beq.n	82522 <_free_r+0x8a>
   82516:	68df      	ldr	r7, [r3, #12]
   82518:	60ef      	str	r7, [r5, #12]
   8251a:	60bd      	str	r5, [r7, #8]
   8251c:	e002      	b.n	82524 <_free_r+0x8c>
   8251e:	2100      	movs	r1, #0
   82520:	e000      	b.n	82524 <_free_r+0x8c>
   82522:	2101      	movs	r1, #1
   82524:	1825      	adds	r5, r4, r0
   82526:	686d      	ldr	r5, [r5, #4]
   82528:	f015 0f01 	tst.w	r5, #1
   8252c:	d10f      	bne.n	8254e <_free_r+0xb6>
   8252e:	1812      	adds	r2, r2, r0
   82530:	b949      	cbnz	r1, 82546 <_free_r+0xae>
   82532:	68a0      	ldr	r0, [r4, #8]
   82534:	4d32      	ldr	r5, [pc, #200]	; (82600 <_free_r+0x168>)
   82536:	42a8      	cmp	r0, r5
   82538:	d105      	bne.n	82546 <_free_r+0xae>
   8253a:	60eb      	str	r3, [r5, #12]
   8253c:	60ab      	str	r3, [r5, #8]
   8253e:	60d8      	str	r0, [r3, #12]
   82540:	6098      	str	r0, [r3, #8]
   82542:	2101      	movs	r1, #1
   82544:	e003      	b.n	8254e <_free_r+0xb6>
   82546:	68e0      	ldr	r0, [r4, #12]
   82548:	68a4      	ldr	r4, [r4, #8]
   8254a:	60e0      	str	r0, [r4, #12]
   8254c:	6084      	str	r4, [r0, #8]
   8254e:	f042 0001 	orr.w	r0, r2, #1
   82552:	6058      	str	r0, [r3, #4]
   82554:	509a      	str	r2, [r3, r2]
   82556:	2900      	cmp	r1, #0
   82558:	d1ce      	bne.n	824f8 <_free_r+0x60>
   8255a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8255e:	d20c      	bcs.n	8257a <_free_r+0xe2>
   82560:	08d2      	lsrs	r2, r2, #3
   82562:	1090      	asrs	r0, r2, #2
   82564:	2401      	movs	r4, #1
   82566:	fa04 f400 	lsl.w	r4, r4, r0
   8256a:	4922      	ldr	r1, [pc, #136]	; (825f4 <_free_r+0x15c>)
   8256c:	6848      	ldr	r0, [r1, #4]
   8256e:	4320      	orrs	r0, r4
   82570:	6048      	str	r0, [r1, #4]
   82572:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   82576:	6881      	ldr	r1, [r0, #8]
   82578:	e035      	b.n	825e6 <_free_r+0x14e>
   8257a:	0a54      	lsrs	r4, r2, #9
   8257c:	2c04      	cmp	r4, #4
   8257e:	d802      	bhi.n	82586 <_free_r+0xee>
   82580:	0994      	lsrs	r4, r2, #6
   82582:	3438      	adds	r4, #56	; 0x38
   82584:	e016      	b.n	825b4 <_free_r+0x11c>
   82586:	2c14      	cmp	r4, #20
   82588:	d801      	bhi.n	8258e <_free_r+0xf6>
   8258a:	345b      	adds	r4, #91	; 0x5b
   8258c:	e012      	b.n	825b4 <_free_r+0x11c>
   8258e:	2c54      	cmp	r4, #84	; 0x54
   82590:	d802      	bhi.n	82598 <_free_r+0x100>
   82592:	0b14      	lsrs	r4, r2, #12
   82594:	346e      	adds	r4, #110	; 0x6e
   82596:	e00d      	b.n	825b4 <_free_r+0x11c>
   82598:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   8259c:	d802      	bhi.n	825a4 <_free_r+0x10c>
   8259e:	0bd4      	lsrs	r4, r2, #15
   825a0:	3477      	adds	r4, #119	; 0x77
   825a2:	e007      	b.n	825b4 <_free_r+0x11c>
   825a4:	f240 5554 	movw	r5, #1364	; 0x554
   825a8:	42ac      	cmp	r4, r5
   825aa:	d802      	bhi.n	825b2 <_free_r+0x11a>
   825ac:	0c94      	lsrs	r4, r2, #18
   825ae:	347c      	adds	r4, #124	; 0x7c
   825b0:	e000      	b.n	825b4 <_free_r+0x11c>
   825b2:	247e      	movs	r4, #126	; 0x7e
   825b4:	4d0f      	ldr	r5, [pc, #60]	; (825f4 <_free_r+0x15c>)
   825b6:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   825ba:	6881      	ldr	r1, [r0, #8]
   825bc:	4281      	cmp	r1, r0
   825be:	d10c      	bne.n	825da <_free_r+0x142>
   825c0:	2201      	movs	r2, #1
   825c2:	10a4      	asrs	r4, r4, #2
   825c4:	fa02 f404 	lsl.w	r4, r2, r4
   825c8:	6868      	ldr	r0, [r5, #4]
   825ca:	ea44 0200 	orr.w	r2, r4, r0
   825ce:	606a      	str	r2, [r5, #4]
   825d0:	4608      	mov	r0, r1
   825d2:	e008      	b.n	825e6 <_free_r+0x14e>
   825d4:	6889      	ldr	r1, [r1, #8]
   825d6:	4281      	cmp	r1, r0
   825d8:	d004      	beq.n	825e4 <_free_r+0x14c>
   825da:	684c      	ldr	r4, [r1, #4]
   825dc:	f024 0403 	bic.w	r4, r4, #3
   825e0:	42a2      	cmp	r2, r4
   825e2:	d3f7      	bcc.n	825d4 <_free_r+0x13c>
   825e4:	68c8      	ldr	r0, [r1, #12]
   825e6:	60d8      	str	r0, [r3, #12]
   825e8:	6099      	str	r1, [r3, #8]
   825ea:	6083      	str	r3, [r0, #8]
   825ec:	60cb      	str	r3, [r1, #12]
   825ee:	e783      	b.n	824f8 <_free_r+0x60>
   825f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   825f2:	bf00      	nop
   825f4:	200704b4 	.word	0x200704b4
   825f8:	200708c0 	.word	0x200708c0
   825fc:	200709e0 	.word	0x200709e0
   82600:	200704bc 	.word	0x200704bc

00082604 <__sfvwrite_r>:
   82604:	6893      	ldr	r3, [r2, #8]
   82606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8260a:	4606      	mov	r6, r0
   8260c:	460c      	mov	r4, r1
   8260e:	4691      	mov	r9, r2
   82610:	b90b      	cbnz	r3, 82616 <__sfvwrite_r+0x12>
   82612:	2000      	movs	r0, #0
   82614:	e14f      	b.n	828b6 <__sfvwrite_r+0x2b2>
   82616:	8988      	ldrh	r0, [r1, #12]
   82618:	f000 0108 	and.w	r1, r0, #8
   8261c:	b20a      	sxth	r2, r1
   8261e:	b10a      	cbz	r2, 82624 <__sfvwrite_r+0x20>
   82620:	6923      	ldr	r3, [r4, #16]
   82622:	b95b      	cbnz	r3, 8263c <__sfvwrite_r+0x38>
   82624:	4630      	mov	r0, r6
   82626:	4621      	mov	r1, r4
   82628:	f7ff fc52 	bl	81ed0 <__swsetup_r>
   8262c:	b130      	cbz	r0, 8263c <__sfvwrite_r+0x38>
   8262e:	89a1      	ldrh	r1, [r4, #12]
   82630:	2209      	movs	r2, #9
   82632:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   82636:	81a0      	strh	r0, [r4, #12]
   82638:	6032      	str	r2, [r6, #0]
   8263a:	e13a      	b.n	828b2 <__sfvwrite_r+0x2ae>
   8263c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   82640:	f8d9 8000 	ldr.w	r8, [r9]
   82644:	f00a 0c02 	and.w	ip, sl, #2
   82648:	fa0f f58c 	sxth.w	r5, ip
   8264c:	b315      	cbz	r5, 82694 <__sfvwrite_r+0x90>
   8264e:	f04f 0a00 	mov.w	sl, #0
   82652:	4657      	mov	r7, sl
   82654:	b937      	cbnz	r7, 82664 <__sfvwrite_r+0x60>
   82656:	f8d8 a000 	ldr.w	sl, [r8]
   8265a:	f8d8 7004 	ldr.w	r7, [r8, #4]
   8265e:	f108 0808 	add.w	r8, r8, #8
   82662:	e7f7      	b.n	82654 <__sfvwrite_r+0x50>
   82664:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   82668:	bf34      	ite	cc
   8266a:	463b      	movcc	r3, r7
   8266c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   82670:	4630      	mov	r0, r6
   82672:	69e1      	ldr	r1, [r4, #28]
   82674:	4652      	mov	r2, sl
   82676:	6a65      	ldr	r5, [r4, #36]	; 0x24
   82678:	47a8      	blx	r5
   8267a:	2800      	cmp	r0, #0
   8267c:	f340 8115 	ble.w	828aa <__sfvwrite_r+0x2a6>
   82680:	f8d9 1008 	ldr.w	r1, [r9, #8]
   82684:	4482      	add	sl, r0
   82686:	1a3f      	subs	r7, r7, r0
   82688:	1a08      	subs	r0, r1, r0
   8268a:	f8c9 0008 	str.w	r0, [r9, #8]
   8268e:	2800      	cmp	r0, #0
   82690:	d1e0      	bne.n	82654 <__sfvwrite_r+0x50>
   82692:	e7be      	b.n	82612 <__sfvwrite_r+0xe>
   82694:	f01a 0a01 	ands.w	sl, sl, #1
   82698:	d004      	beq.n	826a4 <__sfvwrite_r+0xa0>
   8269a:	46ab      	mov	fp, r5
   8269c:	9501      	str	r5, [sp, #4]
   8269e:	462f      	mov	r7, r5
   826a0:	46aa      	mov	sl, r5
   826a2:	e0c7      	b.n	82834 <__sfvwrite_r+0x230>
   826a4:	4655      	mov	r5, sl
   826a6:	b935      	cbnz	r5, 826b6 <__sfvwrite_r+0xb2>
   826a8:	f8d8 a000 	ldr.w	sl, [r8]
   826ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
   826b0:	f108 0808 	add.w	r8, r8, #8
   826b4:	e7f7      	b.n	826a6 <__sfvwrite_r+0xa2>
   826b6:	89a2      	ldrh	r2, [r4, #12]
   826b8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   826bc:	f402 7000 	and.w	r0, r2, #512	; 0x200
   826c0:	b203      	sxth	r3, r0
   826c2:	2b00      	cmp	r3, #0
   826c4:	d052      	beq.n	8276c <__sfvwrite_r+0x168>
   826c6:	455d      	cmp	r5, fp
   826c8:	d340      	bcc.n	8274c <__sfvwrite_r+0x148>
   826ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
   826ce:	d03b      	beq.n	82748 <__sfvwrite_r+0x144>
   826d0:	6963      	ldr	r3, [r4, #20]
   826d2:	f04f 0b03 	mov.w	fp, #3
   826d6:	fb0b f303 	mul.w	r3, fp, r3
   826da:	6921      	ldr	r1, [r4, #16]
   826dc:	6827      	ldr	r7, [r4, #0]
   826de:	2002      	movs	r0, #2
   826e0:	1a7f      	subs	r7, r7, r1
   826e2:	fb93 fcf0 	sdiv	ip, r3, r0
   826e6:	1c7b      	adds	r3, r7, #1
   826e8:	1958      	adds	r0, r3, r5
   826ea:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   826ee:	4584      	cmp	ip, r0
   826f0:	bf28      	it	cs
   826f2:	4660      	movcs	r0, ip
   826f4:	b213      	sxth	r3, r2
   826f6:	9001      	str	r0, [sp, #4]
   826f8:	4630      	mov	r0, r6
   826fa:	b17b      	cbz	r3, 8271c <__sfvwrite_r+0x118>
   826fc:	9901      	ldr	r1, [sp, #4]
   826fe:	f000 f9df 	bl	82ac0 <_malloc_r>
   82702:	4683      	mov	fp, r0
   82704:	b198      	cbz	r0, 8272e <__sfvwrite_r+0x12a>
   82706:	6921      	ldr	r1, [r4, #16]
   82708:	463a      	mov	r2, r7
   8270a:	f7fe feb3 	bl	81474 <memcpy>
   8270e:	89a1      	ldrh	r1, [r4, #12]
   82710:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   82714:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   82718:	81a2      	strh	r2, [r4, #12]
   8271a:	e00b      	b.n	82734 <__sfvwrite_r+0x130>
   8271c:	9a01      	ldr	r2, [sp, #4]
   8271e:	f000 fbfb 	bl	82f18 <_realloc_r>
   82722:	4683      	mov	fp, r0
   82724:	b930      	cbnz	r0, 82734 <__sfvwrite_r+0x130>
   82726:	4630      	mov	r0, r6
   82728:	6921      	ldr	r1, [r4, #16]
   8272a:	f7ff feb5 	bl	82498 <_free_r>
   8272e:	230c      	movs	r3, #12
   82730:	6033      	str	r3, [r6, #0]
   82732:	e0ba      	b.n	828aa <__sfvwrite_r+0x2a6>
   82734:	9901      	ldr	r1, [sp, #4]
   82736:	eb0b 0307 	add.w	r3, fp, r7
   8273a:	1bcf      	subs	r7, r1, r7
   8273c:	f8c4 b010 	str.w	fp, [r4, #16]
   82740:	6023      	str	r3, [r4, #0]
   82742:	6161      	str	r1, [r4, #20]
   82744:	46ab      	mov	fp, r5
   82746:	60a7      	str	r7, [r4, #8]
   82748:	455d      	cmp	r5, fp
   8274a:	d200      	bcs.n	8274e <__sfvwrite_r+0x14a>
   8274c:	46ab      	mov	fp, r5
   8274e:	465a      	mov	r2, fp
   82750:	4651      	mov	r1, sl
   82752:	6820      	ldr	r0, [r4, #0]
   82754:	f000 fbc4 	bl	82ee0 <memmove>
   82758:	68a0      	ldr	r0, [r4, #8]
   8275a:	6823      	ldr	r3, [r4, #0]
   8275c:	ebcb 0200 	rsb	r2, fp, r0
   82760:	eb03 010b 	add.w	r1, r3, fp
   82764:	60a2      	str	r2, [r4, #8]
   82766:	6021      	str	r1, [r4, #0]
   82768:	46ab      	mov	fp, r5
   8276a:	e02a      	b.n	827c2 <__sfvwrite_r+0x1be>
   8276c:	6820      	ldr	r0, [r4, #0]
   8276e:	6921      	ldr	r1, [r4, #16]
   82770:	4288      	cmp	r0, r1
   82772:	d90f      	bls.n	82794 <__sfvwrite_r+0x190>
   82774:	455d      	cmp	r5, fp
   82776:	d90d      	bls.n	82794 <__sfvwrite_r+0x190>
   82778:	4651      	mov	r1, sl
   8277a:	465a      	mov	r2, fp
   8277c:	f000 fbb0 	bl	82ee0 <memmove>
   82780:	6822      	ldr	r2, [r4, #0]
   82782:	4621      	mov	r1, r4
   82784:	eb02 000b 	add.w	r0, r2, fp
   82788:	6020      	str	r0, [r4, #0]
   8278a:	4630      	mov	r0, r6
   8278c:	f7ff fc54 	bl	82038 <_fflush_r>
   82790:	b1b8      	cbz	r0, 827c2 <__sfvwrite_r+0x1be>
   82792:	e08a      	b.n	828aa <__sfvwrite_r+0x2a6>
   82794:	6963      	ldr	r3, [r4, #20]
   82796:	429d      	cmp	r5, r3
   82798:	d308      	bcc.n	827ac <__sfvwrite_r+0x1a8>
   8279a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8279c:	4630      	mov	r0, r6
   8279e:	69e1      	ldr	r1, [r4, #28]
   827a0:	4652      	mov	r2, sl
   827a2:	47b8      	blx	r7
   827a4:	f1b0 0b00 	subs.w	fp, r0, #0
   827a8:	dc0b      	bgt.n	827c2 <__sfvwrite_r+0x1be>
   827aa:	e07e      	b.n	828aa <__sfvwrite_r+0x2a6>
   827ac:	4651      	mov	r1, sl
   827ae:	462a      	mov	r2, r5
   827b0:	f000 fb96 	bl	82ee0 <memmove>
   827b4:	68a2      	ldr	r2, [r4, #8]
   827b6:	6823      	ldr	r3, [r4, #0]
   827b8:	1b50      	subs	r0, r2, r5
   827ba:	1959      	adds	r1, r3, r5
   827bc:	46ab      	mov	fp, r5
   827be:	60a0      	str	r0, [r4, #8]
   827c0:	6021      	str	r1, [r4, #0]
   827c2:	f8d9 0008 	ldr.w	r0, [r9, #8]
   827c6:	44da      	add	sl, fp
   827c8:	ebcb 0200 	rsb	r2, fp, r0
   827cc:	ebcb 0505 	rsb	r5, fp, r5
   827d0:	f8c9 2008 	str.w	r2, [r9, #8]
   827d4:	2a00      	cmp	r2, #0
   827d6:	f47f af66 	bne.w	826a6 <__sfvwrite_r+0xa2>
   827da:	e71a      	b.n	82612 <__sfvwrite_r+0xe>
   827dc:	9801      	ldr	r0, [sp, #4]
   827de:	2800      	cmp	r0, #0
   827e0:	d032      	beq.n	82848 <__sfvwrite_r+0x244>
   827e2:	6820      	ldr	r0, [r4, #0]
   827e4:	6921      	ldr	r1, [r4, #16]
   827e6:	45d3      	cmp	fp, sl
   827e8:	bf34      	ite	cc
   827ea:	465b      	movcc	r3, fp
   827ec:	4653      	movcs	r3, sl
   827ee:	4288      	cmp	r0, r1
   827f0:	68a5      	ldr	r5, [r4, #8]
   827f2:	f8d4 e014 	ldr.w	lr, [r4, #20]
   827f6:	d937      	bls.n	82868 <__sfvwrite_r+0x264>
   827f8:	4475      	add	r5, lr
   827fa:	42ab      	cmp	r3, r5
   827fc:	dd34      	ble.n	82868 <__sfvwrite_r+0x264>
   827fe:	4639      	mov	r1, r7
   82800:	462a      	mov	r2, r5
   82802:	f000 fb6d 	bl	82ee0 <memmove>
   82806:	6820      	ldr	r0, [r4, #0]
   82808:	4621      	mov	r1, r4
   8280a:	1943      	adds	r3, r0, r5
   8280c:	6023      	str	r3, [r4, #0]
   8280e:	4630      	mov	r0, r6
   82810:	f7ff fc12 	bl	82038 <_fflush_r>
   82814:	2800      	cmp	r0, #0
   82816:	d148      	bne.n	828aa <__sfvwrite_r+0x2a6>
   82818:	ebbb 0b05 	subs.w	fp, fp, r5
   8281c:	d03d      	beq.n	8289a <__sfvwrite_r+0x296>
   8281e:	f8d9 2008 	ldr.w	r2, [r9, #8]
   82822:	197f      	adds	r7, r7, r5
   82824:	ebc5 0a0a 	rsb	sl, r5, sl
   82828:	1b55      	subs	r5, r2, r5
   8282a:	f8c9 5008 	str.w	r5, [r9, #8]
   8282e:	2d00      	cmp	r5, #0
   82830:	f43f aeef 	beq.w	82612 <__sfvwrite_r+0xe>
   82834:	f1ba 0f00 	cmp.w	sl, #0
   82838:	d1d0      	bne.n	827dc <__sfvwrite_r+0x1d8>
   8283a:	2100      	movs	r1, #0
   8283c:	e898 0480 	ldmia.w	r8, {r7, sl}
   82840:	9101      	str	r1, [sp, #4]
   82842:	f108 0808 	add.w	r8, r8, #8
   82846:	e7f5      	b.n	82834 <__sfvwrite_r+0x230>
   82848:	4638      	mov	r0, r7
   8284a:	210a      	movs	r1, #10
   8284c:	4652      	mov	r2, sl
   8284e:	f000 fb39 	bl	82ec4 <memchr>
   82852:	b120      	cbz	r0, 8285e <__sfvwrite_r+0x25a>
   82854:	f100 0101 	add.w	r1, r0, #1
   82858:	ebc7 0b01 	rsb	fp, r7, r1
   8285c:	e001      	b.n	82862 <__sfvwrite_r+0x25e>
   8285e:	f10a 0b01 	add.w	fp, sl, #1
   82862:	2201      	movs	r2, #1
   82864:	9201      	str	r2, [sp, #4]
   82866:	e7bc      	b.n	827e2 <__sfvwrite_r+0x1de>
   82868:	4573      	cmp	r3, lr
   8286a:	db08      	blt.n	8287e <__sfvwrite_r+0x27a>
   8286c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   8286e:	4630      	mov	r0, r6
   82870:	69e1      	ldr	r1, [r4, #28]
   82872:	463a      	mov	r2, r7
   82874:	4673      	mov	r3, lr
   82876:	47a8      	blx	r5
   82878:	1e05      	subs	r5, r0, #0
   8287a:	dccd      	bgt.n	82818 <__sfvwrite_r+0x214>
   8287c:	e015      	b.n	828aa <__sfvwrite_r+0x2a6>
   8287e:	461a      	mov	r2, r3
   82880:	4639      	mov	r1, r7
   82882:	9300      	str	r3, [sp, #0]
   82884:	f000 fb2c 	bl	82ee0 <memmove>
   82888:	9b00      	ldr	r3, [sp, #0]
   8288a:	6825      	ldr	r5, [r4, #0]
   8288c:	68a0      	ldr	r0, [r4, #8]
   8288e:	18e9      	adds	r1, r5, r3
   82890:	1ac2      	subs	r2, r0, r3
   82892:	60a2      	str	r2, [r4, #8]
   82894:	6021      	str	r1, [r4, #0]
   82896:	461d      	mov	r5, r3
   82898:	e7be      	b.n	82818 <__sfvwrite_r+0x214>
   8289a:	4630      	mov	r0, r6
   8289c:	4621      	mov	r1, r4
   8289e:	f7ff fbcb 	bl	82038 <_fflush_r>
   828a2:	b910      	cbnz	r0, 828aa <__sfvwrite_r+0x2a6>
   828a4:	f8cd b004 	str.w	fp, [sp, #4]
   828a8:	e7b9      	b.n	8281e <__sfvwrite_r+0x21a>
   828aa:	89a2      	ldrh	r2, [r4, #12]
   828ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   828b0:	81a3      	strh	r3, [r4, #12]
   828b2:	f04f 30ff 	mov.w	r0, #4294967295
   828b6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000828ba <_fwalk>:
   828ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828be:	4604      	mov	r4, r0
   828c0:	4688      	mov	r8, r1
   828c2:	f7ff fd0f 	bl	822e4 <__sfp_lock_acquire>
   828c6:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   828ca:	2600      	movs	r6, #0
   828cc:	b18c      	cbz	r4, 828f2 <_fwalk+0x38>
   828ce:	68a5      	ldr	r5, [r4, #8]
   828d0:	6867      	ldr	r7, [r4, #4]
   828d2:	3f01      	subs	r7, #1
   828d4:	d40b      	bmi.n	828ee <_fwalk+0x34>
   828d6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   828da:	b133      	cbz	r3, 828ea <_fwalk+0x30>
   828dc:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   828e0:	1c43      	adds	r3, r0, #1
   828e2:	d002      	beq.n	828ea <_fwalk+0x30>
   828e4:	4628      	mov	r0, r5
   828e6:	47c0      	blx	r8
   828e8:	4306      	orrs	r6, r0
   828ea:	3568      	adds	r5, #104	; 0x68
   828ec:	e7f1      	b.n	828d2 <_fwalk+0x18>
   828ee:	6824      	ldr	r4, [r4, #0]
   828f0:	e7ec      	b.n	828cc <_fwalk+0x12>
   828f2:	f7ff fcf8 	bl	822e6 <__sfp_lock_release>
   828f6:	4630      	mov	r0, r6
   828f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000828fc <_fwalk_reent>:
   828fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82900:	4680      	mov	r8, r0
   82902:	4689      	mov	r9, r1
   82904:	f7ff fcee 	bl	822e4 <__sfp_lock_acquire>
   82908:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   8290c:	2600      	movs	r6, #0
   8290e:	b194      	cbz	r4, 82936 <_fwalk_reent+0x3a>
   82910:	68a5      	ldr	r5, [r4, #8]
   82912:	6867      	ldr	r7, [r4, #4]
   82914:	3f01      	subs	r7, #1
   82916:	d40c      	bmi.n	82932 <_fwalk_reent+0x36>
   82918:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8291c:	b13b      	cbz	r3, 8292e <_fwalk_reent+0x32>
   8291e:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   82922:	1c43      	adds	r3, r0, #1
   82924:	d003      	beq.n	8292e <_fwalk_reent+0x32>
   82926:	4640      	mov	r0, r8
   82928:	4629      	mov	r1, r5
   8292a:	47c8      	blx	r9
   8292c:	4306      	orrs	r6, r0
   8292e:	3568      	adds	r5, #104	; 0x68
   82930:	e7f0      	b.n	82914 <_fwalk_reent+0x18>
   82932:	6824      	ldr	r4, [r4, #0]
   82934:	e7eb      	b.n	8290e <_fwalk_reent+0x12>
   82936:	f7ff fcd6 	bl	822e6 <__sfp_lock_release>
   8293a:	4630      	mov	r0, r6
   8293c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082940 <_setlocale_r>:
   82940:	b510      	push	{r4, lr}
   82942:	4614      	mov	r4, r2
   82944:	b90a      	cbnz	r2, 8294a <_setlocale_r+0xa>
   82946:	480c      	ldr	r0, [pc, #48]	; (82978 <_setlocale_r+0x38>)
   82948:	bd10      	pop	{r4, pc}
   8294a:	4610      	mov	r0, r2
   8294c:	490b      	ldr	r1, [pc, #44]	; (8297c <_setlocale_r+0x3c>)
   8294e:	f000 fca8 	bl	832a2 <strcmp>
   82952:	2800      	cmp	r0, #0
   82954:	d0f7      	beq.n	82946 <_setlocale_r+0x6>
   82956:	4620      	mov	r0, r4
   82958:	4907      	ldr	r1, [pc, #28]	; (82978 <_setlocale_r+0x38>)
   8295a:	f000 fca2 	bl	832a2 <strcmp>
   8295e:	2800      	cmp	r0, #0
   82960:	d0f1      	beq.n	82946 <_setlocale_r+0x6>
   82962:	4620      	mov	r0, r4
   82964:	4906      	ldr	r1, [pc, #24]	; (82980 <_setlocale_r+0x40>)
   82966:	f000 fc9c 	bl	832a2 <strcmp>
   8296a:	4b03      	ldr	r3, [pc, #12]	; (82978 <_setlocale_r+0x38>)
   8296c:	2800      	cmp	r0, #0
   8296e:	bf0c      	ite	eq
   82970:	4618      	moveq	r0, r3
   82972:	2000      	movne	r0, #0
   82974:	bd10      	pop	{r4, pc}
   82976:	bf00      	nop
   82978:	00083b60 	.word	0x00083b60
   8297c:	00083ba4 	.word	0x00083ba4
   82980:	00083bab 	.word	0x00083bab

00082984 <__locale_charset>:
   82984:	4800      	ldr	r0, [pc, #0]	; (82988 <__locale_charset+0x4>)
   82986:	4770      	bx	lr
   82988:	20070438 	.word	0x20070438

0008298c <__locale_mb_cur_max>:
   8298c:	4b01      	ldr	r3, [pc, #4]	; (82994 <__locale_mb_cur_max+0x8>)
   8298e:	6a18      	ldr	r0, [r3, #32]
   82990:	4770      	bx	lr
   82992:	bf00      	nop
   82994:	20070438 	.word	0x20070438

00082998 <__locale_msgcharset>:
   82998:	4800      	ldr	r0, [pc, #0]	; (8299c <__locale_msgcharset+0x4>)
   8299a:	4770      	bx	lr
   8299c:	2007045c 	.word	0x2007045c

000829a0 <__locale_cjk_lang>:
   829a0:	2000      	movs	r0, #0
   829a2:	4770      	bx	lr

000829a4 <_localeconv_r>:
   829a4:	4800      	ldr	r0, [pc, #0]	; (829a8 <_localeconv_r+0x4>)
   829a6:	4770      	bx	lr
   829a8:	2007047c 	.word	0x2007047c

000829ac <setlocale>:
   829ac:	460a      	mov	r2, r1
   829ae:	4903      	ldr	r1, [pc, #12]	; (829bc <setlocale+0x10>)
   829b0:	4603      	mov	r3, r0
   829b2:	6808      	ldr	r0, [r1, #0]
   829b4:	4619      	mov	r1, r3
   829b6:	f7ff bfc3 	b.w	82940 <_setlocale_r>
   829ba:	bf00      	nop
   829bc:	20070008 	.word	0x20070008

000829c0 <localeconv>:
   829c0:	4800      	ldr	r0, [pc, #0]	; (829c4 <localeconv+0x4>)
   829c2:	4770      	bx	lr
   829c4:	2007047c 	.word	0x2007047c

000829c8 <__smakebuf_r>:
   829c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   829ca:	898b      	ldrh	r3, [r1, #12]
   829cc:	460c      	mov	r4, r1
   829ce:	f003 0102 	and.w	r1, r3, #2
   829d2:	b20a      	sxth	r2, r1
   829d4:	b091      	sub	sp, #68	; 0x44
   829d6:	4606      	mov	r6, r0
   829d8:	2a00      	cmp	r2, #0
   829da:	d13f      	bne.n	82a5c <__smakebuf_r+0x94>
   829dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   829e0:	2900      	cmp	r1, #0
   829e2:	da0d      	bge.n	82a00 <__smakebuf_r+0x38>
   829e4:	89a7      	ldrh	r7, [r4, #12]
   829e6:	f007 0280 	and.w	r2, r7, #128	; 0x80
   829ea:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   829ee:	b210      	sxth	r0, r2
   829f0:	2800      	cmp	r0, #0
   829f2:	bf0c      	ite	eq
   829f4:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   829f8:	2540      	movne	r5, #64	; 0x40
   829fa:	81a3      	strh	r3, [r4, #12]
   829fc:	2700      	movs	r7, #0
   829fe:	e020      	b.n	82a42 <__smakebuf_r+0x7a>
   82a00:	aa01      	add	r2, sp, #4
   82a02:	f000 fd75 	bl	834f0 <_fstat_r>
   82a06:	2800      	cmp	r0, #0
   82a08:	dbec      	blt.n	829e4 <__smakebuf_r+0x1c>
   82a0a:	9802      	ldr	r0, [sp, #8]
   82a0c:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   82a10:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   82a14:	425f      	negs	r7, r3
   82a16:	415f      	adcs	r7, r3
   82a18:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   82a1c:	d10b      	bne.n	82a36 <__smakebuf_r+0x6e>
   82a1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   82a20:	4a1d      	ldr	r2, [pc, #116]	; (82a98 <__smakebuf_r+0xd0>)
   82a22:	4291      	cmp	r1, r2
   82a24:	d107      	bne.n	82a36 <__smakebuf_r+0x6e>
   82a26:	89a3      	ldrh	r3, [r4, #12]
   82a28:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82a2c:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   82a30:	81a1      	strh	r1, [r4, #12]
   82a32:	64e5      	str	r5, [r4, #76]	; 0x4c
   82a34:	e005      	b.n	82a42 <__smakebuf_r+0x7a>
   82a36:	89a0      	ldrh	r0, [r4, #12]
   82a38:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   82a3c:	81a5      	strh	r5, [r4, #12]
   82a3e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82a42:	4630      	mov	r0, r6
   82a44:	4629      	mov	r1, r5
   82a46:	f000 f83b 	bl	82ac0 <_malloc_r>
   82a4a:	b970      	cbnz	r0, 82a6a <__smakebuf_r+0xa2>
   82a4c:	89a3      	ldrh	r3, [r4, #12]
   82a4e:	f403 7200 	and.w	r2, r3, #512	; 0x200
   82a52:	b210      	sxth	r0, r2
   82a54:	b9e8      	cbnz	r0, 82a92 <__smakebuf_r+0xca>
   82a56:	f043 0102 	orr.w	r1, r3, #2
   82a5a:	81a1      	strh	r1, [r4, #12]
   82a5c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   82a60:	2201      	movs	r2, #1
   82a62:	6023      	str	r3, [r4, #0]
   82a64:	6123      	str	r3, [r4, #16]
   82a66:	6162      	str	r2, [r4, #20]
   82a68:	e013      	b.n	82a92 <__smakebuf_r+0xca>
   82a6a:	89a2      	ldrh	r2, [r4, #12]
   82a6c:	490b      	ldr	r1, [pc, #44]	; (82a9c <__smakebuf_r+0xd4>)
   82a6e:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   82a72:	63f1      	str	r1, [r6, #60]	; 0x3c
   82a74:	81a3      	strh	r3, [r4, #12]
   82a76:	6020      	str	r0, [r4, #0]
   82a78:	6120      	str	r0, [r4, #16]
   82a7a:	6165      	str	r5, [r4, #20]
   82a7c:	b14f      	cbz	r7, 82a92 <__smakebuf_r+0xca>
   82a7e:	4630      	mov	r0, r6
   82a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a84:	f000 fd46 	bl	83514 <_isatty_r>
   82a88:	b118      	cbz	r0, 82a92 <__smakebuf_r+0xca>
   82a8a:	89a0      	ldrh	r0, [r4, #12]
   82a8c:	f040 0101 	orr.w	r1, r0, #1
   82a90:	81a1      	strh	r1, [r4, #12]
   82a92:	b011      	add	sp, #68	; 0x44
   82a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82a96:	bf00      	nop
   82a98:	00083277 	.word	0x00083277
   82a9c:	00082191 	.word	0x00082191

00082aa0 <malloc>:
   82aa0:	4b02      	ldr	r3, [pc, #8]	; (82aac <malloc+0xc>)
   82aa2:	4601      	mov	r1, r0
   82aa4:	6818      	ldr	r0, [r3, #0]
   82aa6:	f000 b80b 	b.w	82ac0 <_malloc_r>
   82aaa:	bf00      	nop
   82aac:	20070008 	.word	0x20070008

00082ab0 <free>:
   82ab0:	4b02      	ldr	r3, [pc, #8]	; (82abc <free+0xc>)
   82ab2:	4601      	mov	r1, r0
   82ab4:	6818      	ldr	r0, [r3, #0]
   82ab6:	f7ff bcef 	b.w	82498 <_free_r>
   82aba:	bf00      	nop
   82abc:	20070008 	.word	0x20070008

00082ac0 <_malloc_r>:
   82ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82ac4:	f101 040b 	add.w	r4, r1, #11
   82ac8:	2c16      	cmp	r4, #22
   82aca:	4606      	mov	r6, r0
   82acc:	d903      	bls.n	82ad6 <_malloc_r+0x16>
   82ace:	f034 0407 	bics.w	r4, r4, #7
   82ad2:	d501      	bpl.n	82ad8 <_malloc_r+0x18>
   82ad4:	e002      	b.n	82adc <_malloc_r+0x1c>
   82ad6:	2410      	movs	r4, #16
   82ad8:	428c      	cmp	r4, r1
   82ada:	d202      	bcs.n	82ae2 <_malloc_r+0x22>
   82adc:	250c      	movs	r5, #12
   82ade:	6035      	str	r5, [r6, #0]
   82ae0:	e1d9      	b.n	82e96 <_malloc_r+0x3d6>
   82ae2:	4630      	mov	r0, r6
   82ae4:	f000 fa16 	bl	82f14 <__malloc_lock>
   82ae8:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   82aec:	d214      	bcs.n	82b18 <_malloc_r+0x58>
   82aee:	4da0      	ldr	r5, [pc, #640]	; (82d70 <_malloc_r+0x2b0>)
   82af0:	08e1      	lsrs	r1, r4, #3
   82af2:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   82af6:	68c5      	ldr	r5, [r0, #12]
   82af8:	4285      	cmp	r5, r0
   82afa:	d105      	bne.n	82b08 <_malloc_r+0x48>
   82afc:	f105 0308 	add.w	r3, r5, #8
   82b00:	696d      	ldr	r5, [r5, #20]
   82b02:	1c8a      	adds	r2, r1, #2
   82b04:	429d      	cmp	r5, r3
   82b06:	d044      	beq.n	82b92 <_malloc_r+0xd2>
   82b08:	68e8      	ldr	r0, [r5, #12]
   82b0a:	68a9      	ldr	r1, [r5, #8]
   82b0c:	686a      	ldr	r2, [r5, #4]
   82b0e:	60c8      	str	r0, [r1, #12]
   82b10:	f022 0303 	bic.w	r3, r2, #3
   82b14:	6081      	str	r1, [r0, #8]
   82b16:	e059      	b.n	82bcc <_malloc_r+0x10c>
   82b18:	0a62      	lsrs	r2, r4, #9
   82b1a:	d101      	bne.n	82b20 <_malloc_r+0x60>
   82b1c:	08e2      	lsrs	r2, r4, #3
   82b1e:	e01b      	b.n	82b58 <_malloc_r+0x98>
   82b20:	2a04      	cmp	r2, #4
   82b22:	d802      	bhi.n	82b2a <_malloc_r+0x6a>
   82b24:	09a2      	lsrs	r2, r4, #6
   82b26:	3238      	adds	r2, #56	; 0x38
   82b28:	e016      	b.n	82b58 <_malloc_r+0x98>
   82b2a:	2a14      	cmp	r2, #20
   82b2c:	d801      	bhi.n	82b32 <_malloc_r+0x72>
   82b2e:	325b      	adds	r2, #91	; 0x5b
   82b30:	e012      	b.n	82b58 <_malloc_r+0x98>
   82b32:	2a54      	cmp	r2, #84	; 0x54
   82b34:	d802      	bhi.n	82b3c <_malloc_r+0x7c>
   82b36:	0b22      	lsrs	r2, r4, #12
   82b38:	326e      	adds	r2, #110	; 0x6e
   82b3a:	e00d      	b.n	82b58 <_malloc_r+0x98>
   82b3c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82b40:	d802      	bhi.n	82b48 <_malloc_r+0x88>
   82b42:	0be2      	lsrs	r2, r4, #15
   82b44:	3277      	adds	r2, #119	; 0x77
   82b46:	e007      	b.n	82b58 <_malloc_r+0x98>
   82b48:	f240 5354 	movw	r3, #1364	; 0x554
   82b4c:	429a      	cmp	r2, r3
   82b4e:	d802      	bhi.n	82b56 <_malloc_r+0x96>
   82b50:	0ca2      	lsrs	r2, r4, #18
   82b52:	327c      	adds	r2, #124	; 0x7c
   82b54:	e000      	b.n	82b58 <_malloc_r+0x98>
   82b56:	227e      	movs	r2, #126	; 0x7e
   82b58:	4885      	ldr	r0, [pc, #532]	; (82d70 <_malloc_r+0x2b0>)
   82b5a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   82b5e:	68dd      	ldr	r5, [r3, #12]
   82b60:	429d      	cmp	r5, r3
   82b62:	d015      	beq.n	82b90 <_malloc_r+0xd0>
   82b64:	6869      	ldr	r1, [r5, #4]
   82b66:	f021 0103 	bic.w	r1, r1, #3
   82b6a:	1b08      	subs	r0, r1, r4
   82b6c:	280f      	cmp	r0, #15
   82b6e:	dd01      	ble.n	82b74 <_malloc_r+0xb4>
   82b70:	3a01      	subs	r2, #1
   82b72:	e00d      	b.n	82b90 <_malloc_r+0xd0>
   82b74:	2800      	cmp	r0, #0
   82b76:	db09      	blt.n	82b8c <_malloc_r+0xcc>
   82b78:	68eb      	ldr	r3, [r5, #12]
   82b7a:	68aa      	ldr	r2, [r5, #8]
   82b7c:	60d3      	str	r3, [r2, #12]
   82b7e:	609a      	str	r2, [r3, #8]
   82b80:	186b      	adds	r3, r5, r1
   82b82:	685a      	ldr	r2, [r3, #4]
   82b84:	f042 0001 	orr.w	r0, r2, #1
   82b88:	6058      	str	r0, [r3, #4]
   82b8a:	e190      	b.n	82eae <_malloc_r+0x3ee>
   82b8c:	68ed      	ldr	r5, [r5, #12]
   82b8e:	e7e7      	b.n	82b60 <_malloc_r+0xa0>
   82b90:	3201      	adds	r2, #1
   82b92:	4977      	ldr	r1, [pc, #476]	; (82d70 <_malloc_r+0x2b0>)
   82b94:	690d      	ldr	r5, [r1, #16]
   82b96:	f101 0708 	add.w	r7, r1, #8
   82b9a:	42bd      	cmp	r5, r7
   82b9c:	d068      	beq.n	82c70 <_malloc_r+0x1b0>
   82b9e:	6868      	ldr	r0, [r5, #4]
   82ba0:	f020 0303 	bic.w	r3, r0, #3
   82ba4:	1b18      	subs	r0, r3, r4
   82ba6:	280f      	cmp	r0, #15
   82ba8:	dd0c      	ble.n	82bc4 <_malloc_r+0x104>
   82baa:	192b      	adds	r3, r5, r4
   82bac:	614b      	str	r3, [r1, #20]
   82bae:	610b      	str	r3, [r1, #16]
   82bb0:	f044 0401 	orr.w	r4, r4, #1
   82bb4:	f040 0101 	orr.w	r1, r0, #1
   82bb8:	606c      	str	r4, [r5, #4]
   82bba:	60df      	str	r7, [r3, #12]
   82bbc:	609f      	str	r7, [r3, #8]
   82bbe:	6059      	str	r1, [r3, #4]
   82bc0:	5018      	str	r0, [r3, r0]
   82bc2:	e174      	b.n	82eae <_malloc_r+0x3ee>
   82bc4:	2800      	cmp	r0, #0
   82bc6:	614f      	str	r7, [r1, #20]
   82bc8:	610f      	str	r7, [r1, #16]
   82bca:	db01      	blt.n	82bd0 <_malloc_r+0x110>
   82bcc:	18eb      	adds	r3, r5, r3
   82bce:	e7d8      	b.n	82b82 <_malloc_r+0xc2>
   82bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82bd4:	d20f      	bcs.n	82bf6 <_malloc_r+0x136>
   82bd6:	08db      	lsrs	r3, r3, #3
   82bd8:	1098      	asrs	r0, r3, #2
   82bda:	2701      	movs	r7, #1
   82bdc:	fa07 f700 	lsl.w	r7, r7, r0
   82be0:	6848      	ldr	r0, [r1, #4]
   82be2:	4307      	orrs	r7, r0
   82be4:	604f      	str	r7, [r1, #4]
   82be6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   82bea:	688b      	ldr	r3, [r1, #8]
   82bec:	60e9      	str	r1, [r5, #12]
   82bee:	60ab      	str	r3, [r5, #8]
   82bf0:	60dd      	str	r5, [r3, #12]
   82bf2:	608d      	str	r5, [r1, #8]
   82bf4:	e03c      	b.n	82c70 <_malloc_r+0x1b0>
   82bf6:	0a58      	lsrs	r0, r3, #9
   82bf8:	2804      	cmp	r0, #4
   82bfa:	d802      	bhi.n	82c02 <_malloc_r+0x142>
   82bfc:	0998      	lsrs	r0, r3, #6
   82bfe:	3038      	adds	r0, #56	; 0x38
   82c00:	e016      	b.n	82c30 <_malloc_r+0x170>
   82c02:	2814      	cmp	r0, #20
   82c04:	d801      	bhi.n	82c0a <_malloc_r+0x14a>
   82c06:	305b      	adds	r0, #91	; 0x5b
   82c08:	e012      	b.n	82c30 <_malloc_r+0x170>
   82c0a:	2854      	cmp	r0, #84	; 0x54
   82c0c:	d802      	bhi.n	82c14 <_malloc_r+0x154>
   82c0e:	0b18      	lsrs	r0, r3, #12
   82c10:	306e      	adds	r0, #110	; 0x6e
   82c12:	e00d      	b.n	82c30 <_malloc_r+0x170>
   82c14:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   82c18:	d802      	bhi.n	82c20 <_malloc_r+0x160>
   82c1a:	0bd8      	lsrs	r0, r3, #15
   82c1c:	3077      	adds	r0, #119	; 0x77
   82c1e:	e007      	b.n	82c30 <_malloc_r+0x170>
   82c20:	f240 5754 	movw	r7, #1364	; 0x554
   82c24:	42b8      	cmp	r0, r7
   82c26:	d802      	bhi.n	82c2e <_malloc_r+0x16e>
   82c28:	0c98      	lsrs	r0, r3, #18
   82c2a:	307c      	adds	r0, #124	; 0x7c
   82c2c:	e000      	b.n	82c30 <_malloc_r+0x170>
   82c2e:	207e      	movs	r0, #126	; 0x7e
   82c30:	f8df e13c 	ldr.w	lr, [pc, #316]	; 82d70 <_malloc_r+0x2b0>
   82c34:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   82c38:	68b9      	ldr	r1, [r7, #8]
   82c3a:	42b9      	cmp	r1, r7
   82c3c:	d10e      	bne.n	82c5c <_malloc_r+0x19c>
   82c3e:	1087      	asrs	r7, r0, #2
   82c40:	2301      	movs	r3, #1
   82c42:	fa03 f007 	lsl.w	r0, r3, r7
   82c46:	f8de 7004 	ldr.w	r7, [lr, #4]
   82c4a:	ea40 0307 	orr.w	r3, r0, r7
   82c4e:	f8ce 3004 	str.w	r3, [lr, #4]
   82c52:	4608      	mov	r0, r1
   82c54:	e008      	b.n	82c68 <_malloc_r+0x1a8>
   82c56:	6889      	ldr	r1, [r1, #8]
   82c58:	42b9      	cmp	r1, r7
   82c5a:	d004      	beq.n	82c66 <_malloc_r+0x1a6>
   82c5c:	6848      	ldr	r0, [r1, #4]
   82c5e:	f020 0003 	bic.w	r0, r0, #3
   82c62:	4283      	cmp	r3, r0
   82c64:	d3f7      	bcc.n	82c56 <_malloc_r+0x196>
   82c66:	68c8      	ldr	r0, [r1, #12]
   82c68:	60e8      	str	r0, [r5, #12]
   82c6a:	60a9      	str	r1, [r5, #8]
   82c6c:	60cd      	str	r5, [r1, #12]
   82c6e:	6085      	str	r5, [r0, #8]
   82c70:	1095      	asrs	r5, r2, #2
   82c72:	2001      	movs	r0, #1
   82c74:	fa00 f305 	lsl.w	r3, r0, r5
   82c78:	4f3d      	ldr	r7, [pc, #244]	; (82d70 <_malloc_r+0x2b0>)
   82c7a:	6879      	ldr	r1, [r7, #4]
   82c7c:	428b      	cmp	r3, r1
   82c7e:	d85d      	bhi.n	82d3c <_malloc_r+0x27c>
   82c80:	420b      	tst	r3, r1
   82c82:	d105      	bne.n	82c90 <_malloc_r+0x1d0>
   82c84:	f022 0203 	bic.w	r2, r2, #3
   82c88:	005b      	lsls	r3, r3, #1
   82c8a:	3204      	adds	r2, #4
   82c8c:	420b      	tst	r3, r1
   82c8e:	d0fb      	beq.n	82c88 <_malloc_r+0x1c8>
   82c90:	4d37      	ldr	r5, [pc, #220]	; (82d70 <_malloc_r+0x2b0>)
   82c92:	4610      	mov	r0, r2
   82c94:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   82c98:	4677      	mov	r7, lr
   82c9a:	68fd      	ldr	r5, [r7, #12]
   82c9c:	42bd      	cmp	r5, r7
   82c9e:	d02d      	beq.n	82cfc <_malloc_r+0x23c>
   82ca0:	6869      	ldr	r1, [r5, #4]
   82ca2:	f021 0c03 	bic.w	ip, r1, #3
   82ca6:	ebc4 010c 	rsb	r1, r4, ip
   82caa:	290f      	cmp	r1, #15
   82cac:	dd13      	ble.n	82cd6 <_malloc_r+0x216>
   82cae:	192b      	adds	r3, r5, r4
   82cb0:	f044 0401 	orr.w	r4, r4, #1
   82cb4:	68ea      	ldr	r2, [r5, #12]
   82cb6:	606c      	str	r4, [r5, #4]
   82cb8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   82cbc:	5059      	str	r1, [r3, r1]
   82cbe:	60c2      	str	r2, [r0, #12]
   82cc0:	6090      	str	r0, [r2, #8]
   82cc2:	4a2b      	ldr	r2, [pc, #172]	; (82d70 <_malloc_r+0x2b0>)
   82cc4:	f041 0001 	orr.w	r0, r1, #1
   82cc8:	6153      	str	r3, [r2, #20]
   82cca:	6113      	str	r3, [r2, #16]
   82ccc:	3208      	adds	r2, #8
   82cce:	60da      	str	r2, [r3, #12]
   82cd0:	609a      	str	r2, [r3, #8]
   82cd2:	6058      	str	r0, [r3, #4]
   82cd4:	e00c      	b.n	82cf0 <_malloc_r+0x230>
   82cd6:	2900      	cmp	r1, #0
   82cd8:	db0e      	blt.n	82cf8 <_malloc_r+0x238>
   82cda:	eb05 000c 	add.w	r0, r5, ip
   82cde:	6842      	ldr	r2, [r0, #4]
   82ce0:	68e9      	ldr	r1, [r5, #12]
   82ce2:	f042 0301 	orr.w	r3, r2, #1
   82ce6:	6043      	str	r3, [r0, #4]
   82ce8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   82cec:	60c1      	str	r1, [r0, #12]
   82cee:	6088      	str	r0, [r1, #8]
   82cf0:	4630      	mov	r0, r6
   82cf2:	f000 f910 	bl	82f16 <__malloc_unlock>
   82cf6:	e0de      	b.n	82eb6 <_malloc_r+0x3f6>
   82cf8:	68ed      	ldr	r5, [r5, #12]
   82cfa:	e7cf      	b.n	82c9c <_malloc_r+0x1dc>
   82cfc:	3001      	adds	r0, #1
   82cfe:	0781      	lsls	r1, r0, #30
   82d00:	f105 0708 	add.w	r7, r5, #8
   82d04:	d1c9      	bne.n	82c9a <_malloc_r+0x1da>
   82d06:	4671      	mov	r1, lr
   82d08:	0795      	lsls	r5, r2, #30
   82d0a:	d105      	bne.n	82d18 <_malloc_r+0x258>
   82d0c:	4a18      	ldr	r2, [pc, #96]	; (82d70 <_malloc_r+0x2b0>)
   82d0e:	6855      	ldr	r5, [r2, #4]
   82d10:	ea25 0503 	bic.w	r5, r5, r3
   82d14:	6055      	str	r5, [r2, #4]
   82d16:	e005      	b.n	82d24 <_malloc_r+0x264>
   82d18:	f1a1 0708 	sub.w	r7, r1, #8
   82d1c:	6809      	ldr	r1, [r1, #0]
   82d1e:	3a01      	subs	r2, #1
   82d20:	42b9      	cmp	r1, r7
   82d22:	d0f1      	beq.n	82d08 <_malloc_r+0x248>
   82d24:	4f12      	ldr	r7, [pc, #72]	; (82d70 <_malloc_r+0x2b0>)
   82d26:	005b      	lsls	r3, r3, #1
   82d28:	687f      	ldr	r7, [r7, #4]
   82d2a:	42bb      	cmp	r3, r7
   82d2c:	d806      	bhi.n	82d3c <_malloc_r+0x27c>
   82d2e:	b12b      	cbz	r3, 82d3c <_malloc_r+0x27c>
   82d30:	4602      	mov	r2, r0
   82d32:	423b      	tst	r3, r7
   82d34:	d1ac      	bne.n	82c90 <_malloc_r+0x1d0>
   82d36:	3204      	adds	r2, #4
   82d38:	005b      	lsls	r3, r3, #1
   82d3a:	e7fa      	b.n	82d32 <_malloc_r+0x272>
   82d3c:	4b0c      	ldr	r3, [pc, #48]	; (82d70 <_malloc_r+0x2b0>)
   82d3e:	689f      	ldr	r7, [r3, #8]
   82d40:	4619      	mov	r1, r3
   82d42:	6878      	ldr	r0, [r7, #4]
   82d44:	f020 0903 	bic.w	r9, r0, #3
   82d48:	45a1      	cmp	r9, r4
   82d4a:	d304      	bcc.n	82d56 <_malloc_r+0x296>
   82d4c:	ebc4 0009 	rsb	r0, r4, r9
   82d50:	280f      	cmp	r0, #15
   82d52:	f300 80a2 	bgt.w	82e9a <_malloc_r+0x3da>
   82d56:	4a07      	ldr	r2, [pc, #28]	; (82d74 <_malloc_r+0x2b4>)
   82d58:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   82d5c:	6815      	ldr	r5, [r2, #0]
   82d5e:	3301      	adds	r3, #1
   82d60:	eb07 0a09 	add.w	sl, r7, r9
   82d64:	eb04 0805 	add.w	r8, r4, r5
   82d68:	d106      	bne.n	82d78 <_malloc_r+0x2b8>
   82d6a:	f108 0810 	add.w	r8, r8, #16
   82d6e:	e00b      	b.n	82d88 <_malloc_r+0x2c8>
   82d70:	200704b4 	.word	0x200704b4
   82d74:	200709e0 	.word	0x200709e0
   82d78:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   82d7c:	f100 010f 	add.w	r1, r0, #15
   82d80:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   82d84:	f022 080f 	bic.w	r8, r2, #15
   82d88:	4630      	mov	r0, r6
   82d8a:	4641      	mov	r1, r8
   82d8c:	f000 fa32 	bl	831f4 <_sbrk_r>
   82d90:	1c42      	adds	r2, r0, #1
   82d92:	4605      	mov	r5, r0
   82d94:	d071      	beq.n	82e7a <_malloc_r+0x3ba>
   82d96:	4550      	cmp	r0, sl
   82d98:	d202      	bcs.n	82da0 <_malloc_r+0x2e0>
   82d9a:	4b48      	ldr	r3, [pc, #288]	; (82ebc <_malloc_r+0x3fc>)
   82d9c:	429f      	cmp	r7, r3
   82d9e:	d16c      	bne.n	82e7a <_malloc_r+0x3ba>
   82da0:	4847      	ldr	r0, [pc, #284]	; (82ec0 <_malloc_r+0x400>)
   82da2:	4555      	cmp	r5, sl
   82da4:	6841      	ldr	r1, [r0, #4]
   82da6:	4a45      	ldr	r2, [pc, #276]	; (82ebc <_malloc_r+0x3fc>)
   82da8:	eb08 0301 	add.w	r3, r8, r1
   82dac:	6043      	str	r3, [r0, #4]
   82dae:	d107      	bne.n	82dc0 <_malloc_r+0x300>
   82db0:	0529      	lsls	r1, r5, #20
   82db2:	d105      	bne.n	82dc0 <_malloc_r+0x300>
   82db4:	6895      	ldr	r5, [r2, #8]
   82db6:	44c8      	add	r8, r9
   82db8:	f048 0001 	orr.w	r0, r8, #1
   82dbc:	6068      	str	r0, [r5, #4]
   82dbe:	e051      	b.n	82e64 <_malloc_r+0x3a4>
   82dc0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   82dc4:	1c42      	adds	r2, r0, #1
   82dc6:	d103      	bne.n	82dd0 <_malloc_r+0x310>
   82dc8:	4a3c      	ldr	r2, [pc, #240]	; (82ebc <_malloc_r+0x3fc>)
   82dca:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   82dce:	e005      	b.n	82ddc <_malloc_r+0x31c>
   82dd0:	ebca 0a05 	rsb	sl, sl, r5
   82dd4:	eb03 010a 	add.w	r1, r3, sl
   82dd8:	4b39      	ldr	r3, [pc, #228]	; (82ec0 <_malloc_r+0x400>)
   82dda:	6059      	str	r1, [r3, #4]
   82ddc:	f015 0007 	ands.w	r0, r5, #7
   82de0:	bf1c      	itt	ne
   82de2:	f1c0 0008 	rsbne	r0, r0, #8
   82de6:	182d      	addne	r5, r5, r0
   82de8:	eb05 0c08 	add.w	ip, r5, r8
   82dec:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   82df0:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   82df4:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   82df8:	4641      	mov	r1, r8
   82dfa:	4630      	mov	r0, r6
   82dfc:	f000 f9fa 	bl	831f4 <_sbrk_r>
   82e00:	4a2f      	ldr	r2, [pc, #188]	; (82ec0 <_malloc_r+0x400>)
   82e02:	1c43      	adds	r3, r0, #1
   82e04:	6853      	ldr	r3, [r2, #4]
   82e06:	bf08      	it	eq
   82e08:	f04f 0800 	moveq.w	r8, #0
   82e0c:	eb08 0103 	add.w	r1, r8, r3
   82e10:	bf08      	it	eq
   82e12:	4628      	moveq	r0, r5
   82e14:	6051      	str	r1, [r2, #4]
   82e16:	1b40      	subs	r0, r0, r5
   82e18:	4a28      	ldr	r2, [pc, #160]	; (82ebc <_malloc_r+0x3fc>)
   82e1a:	eb00 0308 	add.w	r3, r0, r8
   82e1e:	f043 0101 	orr.w	r1, r3, #1
   82e22:	4297      	cmp	r7, r2
   82e24:	6095      	str	r5, [r2, #8]
   82e26:	6069      	str	r1, [r5, #4]
   82e28:	d01c      	beq.n	82e64 <_malloc_r+0x3a4>
   82e2a:	f1b9 0f0f 	cmp.w	r9, #15
   82e2e:	d802      	bhi.n	82e36 <_malloc_r+0x376>
   82e30:	2201      	movs	r2, #1
   82e32:	606a      	str	r2, [r5, #4]
   82e34:	e021      	b.n	82e7a <_malloc_r+0x3ba>
   82e36:	687d      	ldr	r5, [r7, #4]
   82e38:	f1a9 090c 	sub.w	r9, r9, #12
   82e3c:	f029 0907 	bic.w	r9, r9, #7
   82e40:	f005 0201 	and.w	r2, r5, #1
   82e44:	2105      	movs	r1, #5
   82e46:	eb07 0309 	add.w	r3, r7, r9
   82e4a:	ea49 0002 	orr.w	r0, r9, r2
   82e4e:	f1b9 0f0f 	cmp.w	r9, #15
   82e52:	6078      	str	r0, [r7, #4]
   82e54:	6059      	str	r1, [r3, #4]
   82e56:	6099      	str	r1, [r3, #8]
   82e58:	d904      	bls.n	82e64 <_malloc_r+0x3a4>
   82e5a:	4630      	mov	r0, r6
   82e5c:	f107 0108 	add.w	r1, r7, #8
   82e60:	f7ff fb1a 	bl	82498 <_free_r>
   82e64:	4a16      	ldr	r2, [pc, #88]	; (82ec0 <_malloc_r+0x400>)
   82e66:	6853      	ldr	r3, [r2, #4]
   82e68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   82e6a:	6b15      	ldr	r5, [r2, #48]	; 0x30
   82e6c:	428b      	cmp	r3, r1
   82e6e:	bf88      	it	hi
   82e70:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   82e72:	42ab      	cmp	r3, r5
   82e74:	bf84      	itt	hi
   82e76:	4d12      	ldrhi	r5, [pc, #72]	; (82ec0 <_malloc_r+0x400>)
   82e78:	632b      	strhi	r3, [r5, #48]	; 0x30
   82e7a:	4810      	ldr	r0, [pc, #64]	; (82ebc <_malloc_r+0x3fc>)
   82e7c:	6882      	ldr	r2, [r0, #8]
   82e7e:	6853      	ldr	r3, [r2, #4]
   82e80:	f023 0103 	bic.w	r1, r3, #3
   82e84:	42a1      	cmp	r1, r4
   82e86:	ebc4 0001 	rsb	r0, r4, r1
   82e8a:	d301      	bcc.n	82e90 <_malloc_r+0x3d0>
   82e8c:	280f      	cmp	r0, #15
   82e8e:	dc04      	bgt.n	82e9a <_malloc_r+0x3da>
   82e90:	4630      	mov	r0, r6
   82e92:	f000 f840 	bl	82f16 <__malloc_unlock>
   82e96:	2500      	movs	r5, #0
   82e98:	e00d      	b.n	82eb6 <_malloc_r+0x3f6>
   82e9a:	4a08      	ldr	r2, [pc, #32]	; (82ebc <_malloc_r+0x3fc>)
   82e9c:	f044 0301 	orr.w	r3, r4, #1
   82ea0:	6895      	ldr	r5, [r2, #8]
   82ea2:	f040 0101 	orr.w	r1, r0, #1
   82ea6:	192c      	adds	r4, r5, r4
   82ea8:	606b      	str	r3, [r5, #4]
   82eaa:	6094      	str	r4, [r2, #8]
   82eac:	6061      	str	r1, [r4, #4]
   82eae:	4630      	mov	r0, r6
   82eb0:	f000 f831 	bl	82f16 <__malloc_unlock>
   82eb4:	3508      	adds	r5, #8
   82eb6:	4628      	mov	r0, r5
   82eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82ebc:	200704b4 	.word	0x200704b4
   82ec0:	200709e0 	.word	0x200709e0

00082ec4 <memchr>:
   82ec4:	b510      	push	{r4, lr}
   82ec6:	b2c9      	uxtb	r1, r1
   82ec8:	4603      	mov	r3, r0
   82eca:	1882      	adds	r2, r0, r2
   82ecc:	4293      	cmp	r3, r2
   82ece:	4618      	mov	r0, r3
   82ed0:	d004      	beq.n	82edc <memchr+0x18>
   82ed2:	7804      	ldrb	r4, [r0, #0]
   82ed4:	3301      	adds	r3, #1
   82ed6:	428c      	cmp	r4, r1
   82ed8:	d1f8      	bne.n	82ecc <memchr+0x8>
   82eda:	e000      	b.n	82ede <memchr+0x1a>
   82edc:	2000      	movs	r0, #0
   82ede:	bd10      	pop	{r4, pc}

00082ee0 <memmove>:
   82ee0:	4281      	cmp	r1, r0
   82ee2:	b570      	push	{r4, r5, r6, lr}
   82ee4:	d20e      	bcs.n	82f04 <memmove+0x24>
   82ee6:	188c      	adds	r4, r1, r2
   82ee8:	42a0      	cmp	r0, r4
   82eea:	d20b      	bcs.n	82f04 <memmove+0x24>
   82eec:	1885      	adds	r5, r0, r2
   82eee:	4613      	mov	r3, r2
   82ef0:	f113 33ff 	adds.w	r3, r3, #4294967295
   82ef4:	d305      	bcc.n	82f02 <memmove+0x22>
   82ef6:	4251      	negs	r1, r2
   82ef8:	1866      	adds	r6, r4, r1
   82efa:	5cf6      	ldrb	r6, [r6, r3]
   82efc:	1869      	adds	r1, r5, r1
   82efe:	54ce      	strb	r6, [r1, r3]
   82f00:	e7f6      	b.n	82ef0 <memmove+0x10>
   82f02:	bd70      	pop	{r4, r5, r6, pc}
   82f04:	2300      	movs	r3, #0
   82f06:	4293      	cmp	r3, r2
   82f08:	d003      	beq.n	82f12 <memmove+0x32>
   82f0a:	5ccc      	ldrb	r4, [r1, r3]
   82f0c:	54c4      	strb	r4, [r0, r3]
   82f0e:	3301      	adds	r3, #1
   82f10:	e7f9      	b.n	82f06 <memmove+0x26>
   82f12:	bd70      	pop	{r4, r5, r6, pc}

00082f14 <__malloc_lock>:
   82f14:	4770      	bx	lr

00082f16 <__malloc_unlock>:
   82f16:	4770      	bx	lr

00082f18 <_realloc_r>:
   82f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f1c:	4681      	mov	r9, r0
   82f1e:	4616      	mov	r6, r2
   82f20:	460c      	mov	r4, r1
   82f22:	b921      	cbnz	r1, 82f2e <_realloc_r+0x16>
   82f24:	4611      	mov	r1, r2
   82f26:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f2a:	f7ff bdc9 	b.w	82ac0 <_malloc_r>
   82f2e:	f7ff fff1 	bl	82f14 <__malloc_lock>
   82f32:	f106 070b 	add.w	r7, r6, #11
   82f36:	f854 5c04 	ldr.w	r5, [r4, #-4]
   82f3a:	2f16      	cmp	r7, #22
   82f3c:	f1a4 0b08 	sub.w	fp, r4, #8
   82f40:	f025 0803 	bic.w	r8, r5, #3
   82f44:	d903      	bls.n	82f4e <_realloc_r+0x36>
   82f46:	f037 0707 	bics.w	r7, r7, #7
   82f4a:	d501      	bpl.n	82f50 <_realloc_r+0x38>
   82f4c:	e002      	b.n	82f54 <_realloc_r+0x3c>
   82f4e:	2710      	movs	r7, #16
   82f50:	42b7      	cmp	r7, r6
   82f52:	d204      	bcs.n	82f5e <_realloc_r+0x46>
   82f54:	200c      	movs	r0, #12
   82f56:	f8c9 0000 	str.w	r0, [r9]
   82f5a:	2600      	movs	r6, #0
   82f5c:	e145      	b.n	831ea <_realloc_r+0x2d2>
   82f5e:	45b8      	cmp	r8, r7
   82f60:	f280 811a 	bge.w	83198 <_realloc_r+0x280>
   82f64:	4aa2      	ldr	r2, [pc, #648]	; (831f0 <_realloc_r+0x2d8>)
   82f66:	eb0b 0308 	add.w	r3, fp, r8
   82f6a:	6891      	ldr	r1, [r2, #8]
   82f6c:	428b      	cmp	r3, r1
   82f6e:	d006      	beq.n	82f7e <_realloc_r+0x66>
   82f70:	6858      	ldr	r0, [r3, #4]
   82f72:	f020 0201 	bic.w	r2, r0, #1
   82f76:	1898      	adds	r0, r3, r2
   82f78:	6842      	ldr	r2, [r0, #4]
   82f7a:	07d0      	lsls	r0, r2, #31
   82f7c:	d426      	bmi.n	82fcc <_realloc_r+0xb4>
   82f7e:	685a      	ldr	r2, [r3, #4]
   82f80:	428b      	cmp	r3, r1
   82f82:	f022 0003 	bic.w	r0, r2, #3
   82f86:	eb00 0a08 	add.w	sl, r0, r8
   82f8a:	d118      	bne.n	82fbe <_realloc_r+0xa6>
   82f8c:	f107 0210 	add.w	r2, r7, #16
   82f90:	4592      	cmp	sl, r2
   82f92:	db1d      	blt.n	82fd0 <_realloc_r+0xb8>
   82f94:	ebc7 0a0a 	rsb	sl, r7, sl
   82f98:	eb0b 0507 	add.w	r5, fp, r7
   82f9c:	f04a 0101 	orr.w	r1, sl, #1
   82fa0:	6069      	str	r1, [r5, #4]
   82fa2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   82fa6:	4e92      	ldr	r6, [pc, #584]	; (831f0 <_realloc_r+0x2d8>)
   82fa8:	f002 0301 	and.w	r3, r2, #1
   82fac:	431f      	orrs	r7, r3
   82fae:	60b5      	str	r5, [r6, #8]
   82fb0:	f844 7c04 	str.w	r7, [r4, #-4]
   82fb4:	4648      	mov	r0, r9
   82fb6:	f7ff ffae 	bl	82f16 <__malloc_unlock>
   82fba:	4626      	mov	r6, r4
   82fbc:	e115      	b.n	831ea <_realloc_r+0x2d2>
   82fbe:	45ba      	cmp	sl, r7
   82fc0:	db06      	blt.n	82fd0 <_realloc_r+0xb8>
   82fc2:	68dd      	ldr	r5, [r3, #12]
   82fc4:	689e      	ldr	r6, [r3, #8]
   82fc6:	60f5      	str	r5, [r6, #12]
   82fc8:	60ae      	str	r6, [r5, #8]
   82fca:	e0e6      	b.n	8319a <_realloc_r+0x282>
   82fcc:	2000      	movs	r0, #0
   82fce:	4603      	mov	r3, r0
   82fd0:	07ea      	lsls	r2, r5, #31
   82fd2:	f100 8091 	bmi.w	830f8 <_realloc_r+0x1e0>
   82fd6:	f854 5c08 	ldr.w	r5, [r4, #-8]
   82fda:	ebc5 050b 	rsb	r5, r5, fp
   82fde:	686a      	ldr	r2, [r5, #4]
   82fe0:	f022 0203 	bic.w	r2, r2, #3
   82fe4:	2b00      	cmp	r3, #0
   82fe6:	d051      	beq.n	8308c <_realloc_r+0x174>
   82fe8:	eb02 0a08 	add.w	sl, r2, r8
   82fec:	428b      	cmp	r3, r1
   82fee:	4482      	add	sl, r0
   82ff0:	d145      	bne.n	8307e <_realloc_r+0x166>
   82ff2:	f107 0310 	add.w	r3, r7, #16
   82ff6:	459a      	cmp	sl, r3
   82ff8:	db48      	blt.n	8308c <_realloc_r+0x174>
   82ffa:	462e      	mov	r6, r5
   82ffc:	68e9      	ldr	r1, [r5, #12]
   82ffe:	f856 3f08 	ldr.w	r3, [r6, #8]!
   83002:	f1a8 0204 	sub.w	r2, r8, #4
   83006:	2a24      	cmp	r2, #36	; 0x24
   83008:	60d9      	str	r1, [r3, #12]
   8300a:	608b      	str	r3, [r1, #8]
   8300c:	d825      	bhi.n	8305a <_realloc_r+0x142>
   8300e:	2a13      	cmp	r2, #19
   83010:	d91b      	bls.n	8304a <_realloc_r+0x132>
   83012:	6821      	ldr	r1, [r4, #0]
   83014:	2a1b      	cmp	r2, #27
   83016:	60a9      	str	r1, [r5, #8]
   83018:	6863      	ldr	r3, [r4, #4]
   8301a:	60eb      	str	r3, [r5, #12]
   8301c:	d803      	bhi.n	83026 <_realloc_r+0x10e>
   8301e:	f105 0010 	add.w	r0, r5, #16
   83022:	3408      	adds	r4, #8
   83024:	e012      	b.n	8304c <_realloc_r+0x134>
   83026:	68a0      	ldr	r0, [r4, #8]
   83028:	2a24      	cmp	r2, #36	; 0x24
   8302a:	6128      	str	r0, [r5, #16]
   8302c:	68e1      	ldr	r1, [r4, #12]
   8302e:	6169      	str	r1, [r5, #20]
   83030:	d003      	beq.n	8303a <_realloc_r+0x122>
   83032:	f105 0018 	add.w	r0, r5, #24
   83036:	3410      	adds	r4, #16
   83038:	e008      	b.n	8304c <_realloc_r+0x134>
   8303a:	6922      	ldr	r2, [r4, #16]
   8303c:	f105 0020 	add.w	r0, r5, #32
   83040:	61aa      	str	r2, [r5, #24]
   83042:	6963      	ldr	r3, [r4, #20]
   83044:	3418      	adds	r4, #24
   83046:	61eb      	str	r3, [r5, #28]
   83048:	e000      	b.n	8304c <_realloc_r+0x134>
   8304a:	4630      	mov	r0, r6
   8304c:	6821      	ldr	r1, [r4, #0]
   8304e:	6001      	str	r1, [r0, #0]
   83050:	6862      	ldr	r2, [r4, #4]
   83052:	6042      	str	r2, [r0, #4]
   83054:	68a3      	ldr	r3, [r4, #8]
   83056:	6083      	str	r3, [r0, #8]
   83058:	e003      	b.n	83062 <_realloc_r+0x14a>
   8305a:	4630      	mov	r0, r6
   8305c:	4621      	mov	r1, r4
   8305e:	f7ff ff3f 	bl	82ee0 <memmove>
   83062:	ebc7 0a0a 	rsb	sl, r7, sl
   83066:	19e8      	adds	r0, r5, r7
   83068:	f04a 0201 	orr.w	r2, sl, #1
   8306c:	6042      	str	r2, [r0, #4]
   8306e:	686b      	ldr	r3, [r5, #4]
   83070:	495f      	ldr	r1, [pc, #380]	; (831f0 <_realloc_r+0x2d8>)
   83072:	6088      	str	r0, [r1, #8]
   83074:	f003 0001 	and.w	r0, r3, #1
   83078:	4307      	orrs	r7, r0
   8307a:	606f      	str	r7, [r5, #4]
   8307c:	e088      	b.n	83190 <_realloc_r+0x278>
   8307e:	45ba      	cmp	sl, r7
   83080:	db04      	blt.n	8308c <_realloc_r+0x174>
   83082:	68d9      	ldr	r1, [r3, #12]
   83084:	6898      	ldr	r0, [r3, #8]
   83086:	60c1      	str	r1, [r0, #12]
   83088:	6088      	str	r0, [r1, #8]
   8308a:	e003      	b.n	83094 <_realloc_r+0x17c>
   8308c:	eb02 0a08 	add.w	sl, r2, r8
   83090:	45ba      	cmp	sl, r7
   83092:	db31      	blt.n	830f8 <_realloc_r+0x1e0>
   83094:	4628      	mov	r0, r5
   83096:	68eb      	ldr	r3, [r5, #12]
   83098:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8309c:	f1a8 0204 	sub.w	r2, r8, #4
   830a0:	2a24      	cmp	r2, #36	; 0x24
   830a2:	60cb      	str	r3, [r1, #12]
   830a4:	6099      	str	r1, [r3, #8]
   830a6:	d823      	bhi.n	830f0 <_realloc_r+0x1d8>
   830a8:	2a13      	cmp	r2, #19
   830aa:	d91a      	bls.n	830e2 <_realloc_r+0x1ca>
   830ac:	6820      	ldr	r0, [r4, #0]
   830ae:	2a1b      	cmp	r2, #27
   830b0:	60a8      	str	r0, [r5, #8]
   830b2:	6866      	ldr	r6, [r4, #4]
   830b4:	60ee      	str	r6, [r5, #12]
   830b6:	d803      	bhi.n	830c0 <_realloc_r+0x1a8>
   830b8:	f105 0010 	add.w	r0, r5, #16
   830bc:	3408      	adds	r4, #8
   830be:	e010      	b.n	830e2 <_realloc_r+0x1ca>
   830c0:	68a3      	ldr	r3, [r4, #8]
   830c2:	2a24      	cmp	r2, #36	; 0x24
   830c4:	612b      	str	r3, [r5, #16]
   830c6:	68e1      	ldr	r1, [r4, #12]
   830c8:	6169      	str	r1, [r5, #20]
   830ca:	d003      	beq.n	830d4 <_realloc_r+0x1bc>
   830cc:	f105 0018 	add.w	r0, r5, #24
   830d0:	3410      	adds	r4, #16
   830d2:	e006      	b.n	830e2 <_realloc_r+0x1ca>
   830d4:	6922      	ldr	r2, [r4, #16]
   830d6:	61aa      	str	r2, [r5, #24]
   830d8:	6960      	ldr	r0, [r4, #20]
   830da:	3418      	adds	r4, #24
   830dc:	61e8      	str	r0, [r5, #28]
   830de:	f105 0020 	add.w	r0, r5, #32
   830e2:	6826      	ldr	r6, [r4, #0]
   830e4:	6006      	str	r6, [r0, #0]
   830e6:	6863      	ldr	r3, [r4, #4]
   830e8:	6043      	str	r3, [r0, #4]
   830ea:	68a1      	ldr	r1, [r4, #8]
   830ec:	6081      	str	r1, [r0, #8]
   830ee:	e055      	b.n	8319c <_realloc_r+0x284>
   830f0:	4621      	mov	r1, r4
   830f2:	f7ff fef5 	bl	82ee0 <memmove>
   830f6:	e051      	b.n	8319c <_realloc_r+0x284>
   830f8:	4631      	mov	r1, r6
   830fa:	4648      	mov	r0, r9
   830fc:	f7ff fce0 	bl	82ac0 <_malloc_r>
   83100:	4606      	mov	r6, r0
   83102:	2800      	cmp	r0, #0
   83104:	d044      	beq.n	83190 <_realloc_r+0x278>
   83106:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8310a:	f1a0 0208 	sub.w	r2, r0, #8
   8310e:	f021 0301 	bic.w	r3, r1, #1
   83112:	eb0b 0103 	add.w	r1, fp, r3
   83116:	428a      	cmp	r2, r1
   83118:	d106      	bne.n	83128 <_realloc_r+0x210>
   8311a:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8311e:	f026 0503 	bic.w	r5, r6, #3
   83122:	eb05 0a08 	add.w	sl, r5, r8
   83126:	e038      	b.n	8319a <_realloc_r+0x282>
   83128:	f1a8 0204 	sub.w	r2, r8, #4
   8312c:	2a24      	cmp	r2, #36	; 0x24
   8312e:	d828      	bhi.n	83182 <_realloc_r+0x26a>
   83130:	2a13      	cmp	r2, #19
   83132:	d91e      	bls.n	83172 <_realloc_r+0x25a>
   83134:	6823      	ldr	r3, [r4, #0]
   83136:	2a1b      	cmp	r2, #27
   83138:	6003      	str	r3, [r0, #0]
   8313a:	6861      	ldr	r1, [r4, #4]
   8313c:	6041      	str	r1, [r0, #4]
   8313e:	d804      	bhi.n	8314a <_realloc_r+0x232>
   83140:	f100 0008 	add.w	r0, r0, #8
   83144:	f104 0208 	add.w	r2, r4, #8
   83148:	e014      	b.n	83174 <_realloc_r+0x25c>
   8314a:	68a0      	ldr	r0, [r4, #8]
   8314c:	2a24      	cmp	r2, #36	; 0x24
   8314e:	60b0      	str	r0, [r6, #8]
   83150:	68e3      	ldr	r3, [r4, #12]
   83152:	60f3      	str	r3, [r6, #12]
   83154:	d004      	beq.n	83160 <_realloc_r+0x248>
   83156:	f106 0010 	add.w	r0, r6, #16
   8315a:	f104 0210 	add.w	r2, r4, #16
   8315e:	e009      	b.n	83174 <_realloc_r+0x25c>
   83160:	6922      	ldr	r2, [r4, #16]
   83162:	f106 0018 	add.w	r0, r6, #24
   83166:	6132      	str	r2, [r6, #16]
   83168:	6961      	ldr	r1, [r4, #20]
   8316a:	f104 0218 	add.w	r2, r4, #24
   8316e:	6171      	str	r1, [r6, #20]
   83170:	e000      	b.n	83174 <_realloc_r+0x25c>
   83172:	4622      	mov	r2, r4
   83174:	6813      	ldr	r3, [r2, #0]
   83176:	6003      	str	r3, [r0, #0]
   83178:	6851      	ldr	r1, [r2, #4]
   8317a:	6041      	str	r1, [r0, #4]
   8317c:	6892      	ldr	r2, [r2, #8]
   8317e:	6082      	str	r2, [r0, #8]
   83180:	e002      	b.n	83188 <_realloc_r+0x270>
   83182:	4621      	mov	r1, r4
   83184:	f7ff feac 	bl	82ee0 <memmove>
   83188:	4648      	mov	r0, r9
   8318a:	4621      	mov	r1, r4
   8318c:	f7ff f984 	bl	82498 <_free_r>
   83190:	4648      	mov	r0, r9
   83192:	f7ff fec0 	bl	82f16 <__malloc_unlock>
   83196:	e028      	b.n	831ea <_realloc_r+0x2d2>
   83198:	46c2      	mov	sl, r8
   8319a:	465d      	mov	r5, fp
   8319c:	ebc7 000a 	rsb	r0, r7, sl
   831a0:	280f      	cmp	r0, #15
   831a2:	686a      	ldr	r2, [r5, #4]
   831a4:	d911      	bls.n	831ca <_realloc_r+0x2b2>
   831a6:	f002 0601 	and.w	r6, r2, #1
   831aa:	19e9      	adds	r1, r5, r7
   831ac:	f040 0301 	orr.w	r3, r0, #1
   831b0:	4337      	orrs	r7, r6
   831b2:	606f      	str	r7, [r5, #4]
   831b4:	1808      	adds	r0, r1, r0
   831b6:	604b      	str	r3, [r1, #4]
   831b8:	6842      	ldr	r2, [r0, #4]
   831ba:	3108      	adds	r1, #8
   831bc:	f042 0601 	orr.w	r6, r2, #1
   831c0:	6046      	str	r6, [r0, #4]
   831c2:	4648      	mov	r0, r9
   831c4:	f7ff f968 	bl	82498 <_free_r>
   831c8:	e00a      	b.n	831e0 <_realloc_r+0x2c8>
   831ca:	f002 0601 	and.w	r6, r2, #1
   831ce:	ea4a 0306 	orr.w	r3, sl, r6
   831d2:	606b      	str	r3, [r5, #4]
   831d4:	eb05 010a 	add.w	r1, r5, sl
   831d8:	6848      	ldr	r0, [r1, #4]
   831da:	f040 0201 	orr.w	r2, r0, #1
   831de:	604a      	str	r2, [r1, #4]
   831e0:	4648      	mov	r0, r9
   831e2:	f7ff fe98 	bl	82f16 <__malloc_unlock>
   831e6:	f105 0608 	add.w	r6, r5, #8
   831ea:	4630      	mov	r0, r6
   831ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   831f0:	200704b4 	.word	0x200704b4

000831f4 <_sbrk_r>:
   831f4:	b538      	push	{r3, r4, r5, lr}
   831f6:	4c06      	ldr	r4, [pc, #24]	; (83210 <_sbrk_r+0x1c>)
   831f8:	2300      	movs	r3, #0
   831fa:	4605      	mov	r5, r0
   831fc:	4608      	mov	r0, r1
   831fe:	6023      	str	r3, [r4, #0]
   83200:	f7fd fdb6 	bl	80d70 <_sbrk>
   83204:	1c43      	adds	r3, r0, #1
   83206:	d102      	bne.n	8320e <_sbrk_r+0x1a>
   83208:	6821      	ldr	r1, [r4, #0]
   8320a:	b101      	cbz	r1, 8320e <_sbrk_r+0x1a>
   8320c:	6029      	str	r1, [r5, #0]
   8320e:	bd38      	pop	{r3, r4, r5, pc}
   83210:	20070a20 	.word	0x20070a20

00083214 <__sread>:
   83214:	b510      	push	{r4, lr}
   83216:	460c      	mov	r4, r1
   83218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8321c:	f000 f99c 	bl	83558 <_read_r>
   83220:	2800      	cmp	r0, #0
   83222:	db03      	blt.n	8322c <__sread+0x18>
   83224:	6d22      	ldr	r2, [r4, #80]	; 0x50
   83226:	1813      	adds	r3, r2, r0
   83228:	6523      	str	r3, [r4, #80]	; 0x50
   8322a:	bd10      	pop	{r4, pc}
   8322c:	89a3      	ldrh	r3, [r4, #12]
   8322e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   83232:	81a1      	strh	r1, [r4, #12]
   83234:	bd10      	pop	{r4, pc}

00083236 <__seofread>:
   83236:	2000      	movs	r0, #0
   83238:	4770      	bx	lr

0008323a <__swrite>:
   8323a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8323e:	461d      	mov	r5, r3
   83240:	898b      	ldrh	r3, [r1, #12]
   83242:	460c      	mov	r4, r1
   83244:	f403 7180 	and.w	r1, r3, #256	; 0x100
   83248:	4616      	mov	r6, r2
   8324a:	b20a      	sxth	r2, r1
   8324c:	4607      	mov	r7, r0
   8324e:	b12a      	cbz	r2, 8325c <__swrite+0x22>
   83250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83254:	2200      	movs	r2, #0
   83256:	2302      	movs	r3, #2
   83258:	f000 f96c 	bl	83534 <_lseek_r>
   8325c:	89a0      	ldrh	r0, [r4, #12]
   8325e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83262:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   83266:	81a3      	strh	r3, [r4, #12]
   83268:	4638      	mov	r0, r7
   8326a:	4632      	mov	r2, r6
   8326c:	462b      	mov	r3, r5
   8326e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83272:	f000 b8d1 	b.w	83418 <_write_r>

00083276 <__sseek>:
   83276:	b510      	push	{r4, lr}
   83278:	460c      	mov	r4, r1
   8327a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8327e:	f000 f959 	bl	83534 <_lseek_r>
   83282:	1c43      	adds	r3, r0, #1
   83284:	89a3      	ldrh	r3, [r4, #12]
   83286:	d103      	bne.n	83290 <__sseek+0x1a>
   83288:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   8328c:	81a2      	strh	r2, [r4, #12]
   8328e:	bd10      	pop	{r4, pc}
   83290:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   83294:	81a1      	strh	r1, [r4, #12]
   83296:	6520      	str	r0, [r4, #80]	; 0x50
   83298:	bd10      	pop	{r4, pc}

0008329a <__sclose>:
   8329a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8329e:	f000 b8cd 	b.w	8343c <_close_r>

000832a2 <strcmp>:
   832a2:	f810 2b01 	ldrb.w	r2, [r0], #1
   832a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   832aa:	2a01      	cmp	r2, #1
   832ac:	bf28      	it	cs
   832ae:	429a      	cmpcs	r2, r3
   832b0:	d0f7      	beq.n	832a2 <strcmp>
   832b2:	eba2 0003 	sub.w	r0, r2, r3
   832b6:	4770      	bx	lr

000832b8 <__swbuf_r>:
   832b8:	b570      	push	{r4, r5, r6, lr}
   832ba:	460d      	mov	r5, r1
   832bc:	4614      	mov	r4, r2
   832be:	4606      	mov	r6, r0
   832c0:	b118      	cbz	r0, 832ca <__swbuf_r+0x12>
   832c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   832c4:	b90b      	cbnz	r3, 832ca <__swbuf_r+0x12>
   832c6:	f7fe ffa9 	bl	8221c <__sinit>
   832ca:	89a1      	ldrh	r1, [r4, #12]
   832cc:	69a0      	ldr	r0, [r4, #24]
   832ce:	f001 0208 	and.w	r2, r1, #8
   832d2:	b213      	sxth	r3, r2
   832d4:	60a0      	str	r0, [r4, #8]
   832d6:	b10b      	cbz	r3, 832dc <__swbuf_r+0x24>
   832d8:	6920      	ldr	r0, [r4, #16]
   832da:	b958      	cbnz	r0, 832f4 <__swbuf_r+0x3c>
   832dc:	4630      	mov	r0, r6
   832de:	4621      	mov	r1, r4
   832e0:	f7fe fdf6 	bl	81ed0 <__swsetup_r>
   832e4:	b130      	cbz	r0, 832f4 <__swbuf_r+0x3c>
   832e6:	89a5      	ldrh	r5, [r4, #12]
   832e8:	2009      	movs	r0, #9
   832ea:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   832ee:	81a1      	strh	r1, [r4, #12]
   832f0:	6030      	str	r0, [r6, #0]
   832f2:	e017      	b.n	83324 <__swbuf_r+0x6c>
   832f4:	89a1      	ldrh	r1, [r4, #12]
   832f6:	b2ed      	uxtb	r5, r5
   832f8:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   832fc:	b213      	sxth	r3, r2
   832fe:	b933      	cbnz	r3, 8330e <__swbuf_r+0x56>
   83300:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   83304:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83306:	81a0      	strh	r0, [r4, #12]
   83308:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   8330c:	6662      	str	r2, [r4, #100]	; 0x64
   8330e:	6820      	ldr	r0, [r4, #0]
   83310:	6923      	ldr	r3, [r4, #16]
   83312:	6961      	ldr	r1, [r4, #20]
   83314:	1ac0      	subs	r0, r0, r3
   83316:	4288      	cmp	r0, r1
   83318:	db07      	blt.n	8332a <__swbuf_r+0x72>
   8331a:	4630      	mov	r0, r6
   8331c:	4621      	mov	r1, r4
   8331e:	f7fe fe8b 	bl	82038 <_fflush_r>
   83322:	b110      	cbz	r0, 8332a <__swbuf_r+0x72>
   83324:	f04f 35ff 	mov.w	r5, #4294967295
   83328:	e015      	b.n	83356 <__swbuf_r+0x9e>
   8332a:	68a2      	ldr	r2, [r4, #8]
   8332c:	6821      	ldr	r1, [r4, #0]
   8332e:	1e53      	subs	r3, r2, #1
   83330:	60a3      	str	r3, [r4, #8]
   83332:	f801 5b01 	strb.w	r5, [r1], #1
   83336:	6962      	ldr	r2, [r4, #20]
   83338:	3001      	adds	r0, #1
   8333a:	4290      	cmp	r0, r2
   8333c:	6021      	str	r1, [r4, #0]
   8333e:	d004      	beq.n	8334a <__swbuf_r+0x92>
   83340:	89a3      	ldrh	r3, [r4, #12]
   83342:	07db      	lsls	r3, r3, #31
   83344:	d507      	bpl.n	83356 <__swbuf_r+0x9e>
   83346:	2d0a      	cmp	r5, #10
   83348:	d105      	bne.n	83356 <__swbuf_r+0x9e>
   8334a:	4630      	mov	r0, r6
   8334c:	4621      	mov	r1, r4
   8334e:	f7fe fe73 	bl	82038 <_fflush_r>
   83352:	2800      	cmp	r0, #0
   83354:	d1e6      	bne.n	83324 <__swbuf_r+0x6c>
   83356:	4628      	mov	r0, r5
   83358:	bd70      	pop	{r4, r5, r6, pc}

0008335a <__swbuf>:
   8335a:	460a      	mov	r2, r1
   8335c:	4902      	ldr	r1, [pc, #8]	; (83368 <__swbuf+0xe>)
   8335e:	4603      	mov	r3, r0
   83360:	6808      	ldr	r0, [r1, #0]
   83362:	4619      	mov	r1, r3
   83364:	f7ff bfa8 	b.w	832b8 <__swbuf_r>
   83368:	20070008 	.word	0x20070008

0008336c <_wcrtomb_r>:
   8336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83370:	461d      	mov	r5, r3
   83372:	4b10      	ldr	r3, [pc, #64]	; (833b4 <_wcrtomb_r+0x48>)
   83374:	b086      	sub	sp, #24
   83376:	4604      	mov	r4, r0
   83378:	4690      	mov	r8, r2
   8337a:	460e      	mov	r6, r1
   8337c:	681f      	ldr	r7, [r3, #0]
   8337e:	b939      	cbnz	r1, 83390 <_wcrtomb_r+0x24>
   83380:	f7ff fb00 	bl	82984 <__locale_charset>
   83384:	9500      	str	r5, [sp, #0]
   83386:	4603      	mov	r3, r0
   83388:	a903      	add	r1, sp, #12
   8338a:	4620      	mov	r0, r4
   8338c:	4632      	mov	r2, r6
   8338e:	e006      	b.n	8339e <_wcrtomb_r+0x32>
   83390:	f7ff faf8 	bl	82984 <__locale_charset>
   83394:	9500      	str	r5, [sp, #0]
   83396:	4603      	mov	r3, r0
   83398:	4631      	mov	r1, r6
   8339a:	4620      	mov	r0, r4
   8339c:	4642      	mov	r2, r8
   8339e:	47b8      	blx	r7
   833a0:	1c43      	adds	r3, r0, #1
   833a2:	d103      	bne.n	833ac <_wcrtomb_r+0x40>
   833a4:	2100      	movs	r1, #0
   833a6:	228a      	movs	r2, #138	; 0x8a
   833a8:	6029      	str	r1, [r5, #0]
   833aa:	6022      	str	r2, [r4, #0]
   833ac:	b006      	add	sp, #24
   833ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   833b2:	bf00      	nop
   833b4:	200708c4 	.word	0x200708c4

000833b8 <wcrtomb>:
   833b8:	b530      	push	{r4, r5, lr}
   833ba:	4613      	mov	r3, r2
   833bc:	4a04      	ldr	r2, [pc, #16]	; (833d0 <wcrtomb+0x18>)
   833be:	4605      	mov	r5, r0
   833c0:	460c      	mov	r4, r1
   833c2:	6810      	ldr	r0, [r2, #0]
   833c4:	4629      	mov	r1, r5
   833c6:	4622      	mov	r2, r4
   833c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   833cc:	f7ff bfce 	b.w	8336c <_wcrtomb_r>
   833d0:	20070008 	.word	0x20070008

000833d4 <__ascii_wctomb>:
   833d4:	b149      	cbz	r1, 833ea <__ascii_wctomb+0x16>
   833d6:	2aff      	cmp	r2, #255	; 0xff
   833d8:	d904      	bls.n	833e4 <__ascii_wctomb+0x10>
   833da:	238a      	movs	r3, #138	; 0x8a
   833dc:	6003      	str	r3, [r0, #0]
   833de:	f04f 30ff 	mov.w	r0, #4294967295
   833e2:	4770      	bx	lr
   833e4:	700a      	strb	r2, [r1, #0]
   833e6:	2001      	movs	r0, #1
   833e8:	4770      	bx	lr
   833ea:	4608      	mov	r0, r1
   833ec:	4770      	bx	lr

000833ee <_wctomb_r>:
   833ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   833f2:	4698      	mov	r8, r3
   833f4:	4b07      	ldr	r3, [pc, #28]	; (83414 <_wctomb_r+0x26>)
   833f6:	4605      	mov	r5, r0
   833f8:	460f      	mov	r7, r1
   833fa:	4616      	mov	r6, r2
   833fc:	681c      	ldr	r4, [r3, #0]
   833fe:	f7ff fac1 	bl	82984 <__locale_charset>
   83402:	f8cd 8000 	str.w	r8, [sp]
   83406:	4603      	mov	r3, r0
   83408:	4639      	mov	r1, r7
   8340a:	4628      	mov	r0, r5
   8340c:	4632      	mov	r2, r6
   8340e:	47a0      	blx	r4
   83410:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   83414:	200708c4 	.word	0x200708c4

00083418 <_write_r>:
   83418:	b538      	push	{r3, r4, r5, lr}
   8341a:	4c07      	ldr	r4, [pc, #28]	; (83438 <_write_r+0x20>)
   8341c:	4605      	mov	r5, r0
   8341e:	2000      	movs	r0, #0
   83420:	6020      	str	r0, [r4, #0]
   83422:	4608      	mov	r0, r1
   83424:	4611      	mov	r1, r2
   83426:	461a      	mov	r2, r3
   83428:	f7fc ff3c 	bl	802a4 <_write>
   8342c:	1c43      	adds	r3, r0, #1
   8342e:	d102      	bne.n	83436 <_write_r+0x1e>
   83430:	6823      	ldr	r3, [r4, #0]
   83432:	b103      	cbz	r3, 83436 <_write_r+0x1e>
   83434:	602b      	str	r3, [r5, #0]
   83436:	bd38      	pop	{r3, r4, r5, pc}
   83438:	20070a20 	.word	0x20070a20

0008343c <_close_r>:
   8343c:	b538      	push	{r3, r4, r5, lr}
   8343e:	4c06      	ldr	r4, [pc, #24]	; (83458 <_close_r+0x1c>)
   83440:	2300      	movs	r3, #0
   83442:	4605      	mov	r5, r0
   83444:	4608      	mov	r0, r1
   83446:	6023      	str	r3, [r4, #0]
   83448:	f7fd fcaa 	bl	80da0 <_close>
   8344c:	1c43      	adds	r3, r0, #1
   8344e:	d102      	bne.n	83456 <_close_r+0x1a>
   83450:	6821      	ldr	r1, [r4, #0]
   83452:	b101      	cbz	r1, 83456 <_close_r+0x1a>
   83454:	6029      	str	r1, [r5, #0]
   83456:	bd38      	pop	{r3, r4, r5, pc}
   83458:	20070a20 	.word	0x20070a20

0008345c <_fclose_r>:
   8345c:	b570      	push	{r4, r5, r6, lr}
   8345e:	4605      	mov	r5, r0
   83460:	460c      	mov	r4, r1
   83462:	2900      	cmp	r1, #0
   83464:	d039      	beq.n	834da <_fclose_r+0x7e>
   83466:	f7fe ff3d 	bl	822e4 <__sfp_lock_acquire>
   8346a:	b125      	cbz	r5, 83476 <_fclose_r+0x1a>
   8346c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8346e:	b913      	cbnz	r3, 83476 <_fclose_r+0x1a>
   83470:	4628      	mov	r0, r5
   83472:	f7fe fed3 	bl	8221c <__sinit>
   83476:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   8347a:	b35e      	cbz	r6, 834d4 <_fclose_r+0x78>
   8347c:	4628      	mov	r0, r5
   8347e:	4621      	mov	r1, r4
   83480:	f7fe fdda 	bl	82038 <_fflush_r>
   83484:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   83486:	4606      	mov	r6, r0
   83488:	b13a      	cbz	r2, 8349a <_fclose_r+0x3e>
   8348a:	4628      	mov	r0, r5
   8348c:	69e1      	ldr	r1, [r4, #28]
   8348e:	4790      	blx	r2
   83490:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   83494:	bf28      	it	cs
   83496:	f04f 36ff 	movcs.w	r6, #4294967295
   8349a:	89a0      	ldrh	r0, [r4, #12]
   8349c:	f000 0180 	and.w	r1, r0, #128	; 0x80
   834a0:	b20b      	sxth	r3, r1
   834a2:	b11b      	cbz	r3, 834ac <_fclose_r+0x50>
   834a4:	4628      	mov	r0, r5
   834a6:	6921      	ldr	r1, [r4, #16]
   834a8:	f7fe fff6 	bl	82498 <_free_r>
   834ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
   834ae:	b141      	cbz	r1, 834c2 <_fclose_r+0x66>
   834b0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   834b4:	4291      	cmp	r1, r2
   834b6:	d002      	beq.n	834be <_fclose_r+0x62>
   834b8:	4628      	mov	r0, r5
   834ba:	f7fe ffed 	bl	82498 <_free_r>
   834be:	2000      	movs	r0, #0
   834c0:	6320      	str	r0, [r4, #48]	; 0x30
   834c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   834c4:	b121      	cbz	r1, 834d0 <_fclose_r+0x74>
   834c6:	4628      	mov	r0, r5
   834c8:	f7fe ffe6 	bl	82498 <_free_r>
   834cc:	2100      	movs	r1, #0
   834ce:	6461      	str	r1, [r4, #68]	; 0x44
   834d0:	2300      	movs	r3, #0
   834d2:	81a3      	strh	r3, [r4, #12]
   834d4:	f7fe ff07 	bl	822e6 <__sfp_lock_release>
   834d8:	e000      	b.n	834dc <_fclose_r+0x80>
   834da:	460e      	mov	r6, r1
   834dc:	4630      	mov	r0, r6
   834de:	bd70      	pop	{r4, r5, r6, pc}

000834e0 <fclose>:
   834e0:	4b02      	ldr	r3, [pc, #8]	; (834ec <fclose+0xc>)
   834e2:	4601      	mov	r1, r0
   834e4:	6818      	ldr	r0, [r3, #0]
   834e6:	f7ff bfb9 	b.w	8345c <_fclose_r>
   834ea:	bf00      	nop
   834ec:	20070008 	.word	0x20070008

000834f0 <_fstat_r>:
   834f0:	b538      	push	{r3, r4, r5, lr}
   834f2:	4c07      	ldr	r4, [pc, #28]	; (83510 <_fstat_r+0x20>)
   834f4:	2300      	movs	r3, #0
   834f6:	4605      	mov	r5, r0
   834f8:	4608      	mov	r0, r1
   834fa:	4611      	mov	r1, r2
   834fc:	6023      	str	r3, [r4, #0]
   834fe:	f7fd fc53 	bl	80da8 <_fstat>
   83502:	1c43      	adds	r3, r0, #1
   83504:	d102      	bne.n	8350c <_fstat_r+0x1c>
   83506:	6821      	ldr	r1, [r4, #0]
   83508:	b101      	cbz	r1, 8350c <_fstat_r+0x1c>
   8350a:	6029      	str	r1, [r5, #0]
   8350c:	bd38      	pop	{r3, r4, r5, pc}
   8350e:	bf00      	nop
   83510:	20070a20 	.word	0x20070a20

00083514 <_isatty_r>:
   83514:	b538      	push	{r3, r4, r5, lr}
   83516:	4c06      	ldr	r4, [pc, #24]	; (83530 <_isatty_r+0x1c>)
   83518:	2300      	movs	r3, #0
   8351a:	4605      	mov	r5, r0
   8351c:	4608      	mov	r0, r1
   8351e:	6023      	str	r3, [r4, #0]
   83520:	f7fd fc48 	bl	80db4 <_isatty>
   83524:	1c43      	adds	r3, r0, #1
   83526:	d102      	bne.n	8352e <_isatty_r+0x1a>
   83528:	6821      	ldr	r1, [r4, #0]
   8352a:	b101      	cbz	r1, 8352e <_isatty_r+0x1a>
   8352c:	6029      	str	r1, [r5, #0]
   8352e:	bd38      	pop	{r3, r4, r5, pc}
   83530:	20070a20 	.word	0x20070a20

00083534 <_lseek_r>:
   83534:	b538      	push	{r3, r4, r5, lr}
   83536:	4c07      	ldr	r4, [pc, #28]	; (83554 <_lseek_r+0x20>)
   83538:	4605      	mov	r5, r0
   8353a:	2000      	movs	r0, #0
   8353c:	6020      	str	r0, [r4, #0]
   8353e:	4608      	mov	r0, r1
   83540:	4611      	mov	r1, r2
   83542:	461a      	mov	r2, r3
   83544:	f7fd fc3a 	bl	80dbc <_lseek>
   83548:	1c43      	adds	r3, r0, #1
   8354a:	d102      	bne.n	83552 <_lseek_r+0x1e>
   8354c:	6823      	ldr	r3, [r4, #0]
   8354e:	b103      	cbz	r3, 83552 <_lseek_r+0x1e>
   83550:	602b      	str	r3, [r5, #0]
   83552:	bd38      	pop	{r3, r4, r5, pc}
   83554:	20070a20 	.word	0x20070a20

00083558 <_read_r>:
   83558:	b538      	push	{r3, r4, r5, lr}
   8355a:	4c07      	ldr	r4, [pc, #28]	; (83578 <_read_r+0x20>)
   8355c:	4605      	mov	r5, r0
   8355e:	2000      	movs	r0, #0
   83560:	6020      	str	r0, [r4, #0]
   83562:	4608      	mov	r0, r1
   83564:	4611      	mov	r1, r2
   83566:	461a      	mov	r2, r3
   83568:	f7fc fe58 	bl	8021c <_read>
   8356c:	1c43      	adds	r3, r0, #1
   8356e:	d102      	bne.n	83576 <_read_r+0x1e>
   83570:	6823      	ldr	r3, [r4, #0]
   83572:	b103      	cbz	r3, 83576 <_read_r+0x1e>
   83574:	602b      	str	r3, [r5, #0]
   83576:	bd38      	pop	{r3, r4, r5, pc}
   83578:	20070a20 	.word	0x20070a20

0008357c <__aeabi_uldivmod>:
   8357c:	b94b      	cbnz	r3, 83592 <__aeabi_uldivmod+0x16>
   8357e:	b942      	cbnz	r2, 83592 <__aeabi_uldivmod+0x16>
   83580:	2900      	cmp	r1, #0
   83582:	bf08      	it	eq
   83584:	2800      	cmpeq	r0, #0
   83586:	d002      	beq.n	8358e <__aeabi_uldivmod+0x12>
   83588:	f04f 31ff 	mov.w	r1, #4294967295
   8358c:	4608      	mov	r0, r1
   8358e:	f000 b83b 	b.w	83608 <__aeabi_idiv0>
   83592:	b082      	sub	sp, #8
   83594:	46ec      	mov	ip, sp
   83596:	e92d 5000 	stmdb	sp!, {ip, lr}
   8359a:	f000 f81d 	bl	835d8 <__gnu_uldivmod_helper>
   8359e:	f8dd e004 	ldr.w	lr, [sp, #4]
   835a2:	b002      	add	sp, #8
   835a4:	bc0c      	pop	{r2, r3}
   835a6:	4770      	bx	lr

000835a8 <__gnu_ldivmod_helper>:
   835a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835ac:	4616      	mov	r6, r2
   835ae:	4698      	mov	r8, r3
   835b0:	4604      	mov	r4, r0
   835b2:	460d      	mov	r5, r1
   835b4:	f000 f82a 	bl	8360c <__divdi3>
   835b8:	fb06 fc01 	mul.w	ip, r6, r1
   835bc:	fba6 2300 	umull	r2, r3, r6, r0
   835c0:	fb00 c708 	mla	r7, r0, r8, ip
   835c4:	18fb      	adds	r3, r7, r3
   835c6:	1aa2      	subs	r2, r4, r2
   835c8:	eb65 0303 	sbc.w	r3, r5, r3
   835cc:	9c06      	ldr	r4, [sp, #24]
   835ce:	e9c4 2300 	strd	r2, r3, [r4]
   835d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   835d6:	bf00      	nop

000835d8 <__gnu_uldivmod_helper>:
   835d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835dc:	4690      	mov	r8, r2
   835de:	4606      	mov	r6, r0
   835e0:	460f      	mov	r7, r1
   835e2:	461d      	mov	r5, r3
   835e4:	f000 f970 	bl	838c8 <__udivdi3>
   835e8:	fb00 f305 	mul.w	r3, r0, r5
   835ec:	fba0 4508 	umull	r4, r5, r0, r8
   835f0:	fb08 3801 	mla	r8, r8, r1, r3
   835f4:	9b06      	ldr	r3, [sp, #24]
   835f6:	4445      	add	r5, r8
   835f8:	1b34      	subs	r4, r6, r4
   835fa:	eb67 0505 	sbc.w	r5, r7, r5
   835fe:	e9c3 4500 	strd	r4, r5, [r3]
   83602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83606:	bf00      	nop

00083608 <__aeabi_idiv0>:
   83608:	4770      	bx	lr
   8360a:	bf00      	nop

0008360c <__divdi3>:
   8360c:	2900      	cmp	r1, #0
   8360e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83612:	461d      	mov	r5, r3
   83614:	f2c0 809d 	blt.w	83752 <__divdi3+0x146>
   83618:	2400      	movs	r4, #0
   8361a:	2d00      	cmp	r5, #0
   8361c:	f2c0 8094 	blt.w	83748 <__divdi3+0x13c>
   83620:	4680      	mov	r8, r0
   83622:	460f      	mov	r7, r1
   83624:	4694      	mov	ip, r2
   83626:	461e      	mov	r6, r3
   83628:	bbe3      	cbnz	r3, 836a4 <__divdi3+0x98>
   8362a:	428a      	cmp	r2, r1
   8362c:	d955      	bls.n	836da <__divdi3+0xce>
   8362e:	fab2 f782 	clz	r7, r2
   83632:	b147      	cbz	r7, 83646 <__divdi3+0x3a>
   83634:	f1c7 0520 	rsb	r5, r7, #32
   83638:	fa20 f605 	lsr.w	r6, r0, r5
   8363c:	fa01 f107 	lsl.w	r1, r1, r7
   83640:	40ba      	lsls	r2, r7
   83642:	40b8      	lsls	r0, r7
   83644:	4331      	orrs	r1, r6
   83646:	0c17      	lsrs	r7, r2, #16
   83648:	fbb1 f6f7 	udiv	r6, r1, r7
   8364c:	fa1f fc82 	uxth.w	ip, r2
   83650:	fb07 1116 	mls	r1, r7, r6, r1
   83654:	fb0c f506 	mul.w	r5, ip, r6
   83658:	0c03      	lsrs	r3, r0, #16
   8365a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8365e:	429d      	cmp	r5, r3
   83660:	d908      	bls.n	83674 <__divdi3+0x68>
   83662:	1e71      	subs	r1, r6, #1
   83664:	189b      	adds	r3, r3, r2
   83666:	f080 8113 	bcs.w	83890 <__divdi3+0x284>
   8366a:	429d      	cmp	r5, r3
   8366c:	f240 8110 	bls.w	83890 <__divdi3+0x284>
   83670:	3e02      	subs	r6, #2
   83672:	189b      	adds	r3, r3, r2
   83674:	1b59      	subs	r1, r3, r5
   83676:	fbb1 f5f7 	udiv	r5, r1, r7
   8367a:	fb07 1315 	mls	r3, r7, r5, r1
   8367e:	fb0c fc05 	mul.w	ip, ip, r5
   83682:	b280      	uxth	r0, r0
   83684:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   83688:	458c      	cmp	ip, r1
   8368a:	d907      	bls.n	8369c <__divdi3+0x90>
   8368c:	1e6b      	subs	r3, r5, #1
   8368e:	188a      	adds	r2, r1, r2
   83690:	f080 8100 	bcs.w	83894 <__divdi3+0x288>
   83694:	4594      	cmp	ip, r2
   83696:	f240 80fd 	bls.w	83894 <__divdi3+0x288>
   8369a:	3d02      	subs	r5, #2
   8369c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   836a0:	2500      	movs	r5, #0
   836a2:	e003      	b.n	836ac <__divdi3+0xa0>
   836a4:	428b      	cmp	r3, r1
   836a6:	d90c      	bls.n	836c2 <__divdi3+0xb6>
   836a8:	2500      	movs	r5, #0
   836aa:	4629      	mov	r1, r5
   836ac:	460a      	mov	r2, r1
   836ae:	462b      	mov	r3, r5
   836b0:	b114      	cbz	r4, 836b8 <__divdi3+0xac>
   836b2:	4252      	negs	r2, r2
   836b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   836b8:	4610      	mov	r0, r2
   836ba:	4619      	mov	r1, r3
   836bc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   836c0:	4770      	bx	lr
   836c2:	fab3 f583 	clz	r5, r3
   836c6:	2d00      	cmp	r5, #0
   836c8:	f040 8087 	bne.w	837da <__divdi3+0x1ce>
   836cc:	428b      	cmp	r3, r1
   836ce:	d301      	bcc.n	836d4 <__divdi3+0xc8>
   836d0:	4282      	cmp	r2, r0
   836d2:	d8ea      	bhi.n	836aa <__divdi3+0x9e>
   836d4:	2500      	movs	r5, #0
   836d6:	2101      	movs	r1, #1
   836d8:	e7e8      	b.n	836ac <__divdi3+0xa0>
   836da:	b912      	cbnz	r2, 836e2 <__divdi3+0xd6>
   836dc:	2601      	movs	r6, #1
   836de:	fbb6 f2f2 	udiv	r2, r6, r2
   836e2:	fab2 f682 	clz	r6, r2
   836e6:	2e00      	cmp	r6, #0
   836e8:	d139      	bne.n	8375e <__divdi3+0x152>
   836ea:	1a8e      	subs	r6, r1, r2
   836ec:	0c13      	lsrs	r3, r2, #16
   836ee:	fa1f fc82 	uxth.w	ip, r2
   836f2:	2501      	movs	r5, #1
   836f4:	fbb6 f7f3 	udiv	r7, r6, r3
   836f8:	fb03 6117 	mls	r1, r3, r7, r6
   836fc:	fb0c f807 	mul.w	r8, ip, r7
   83700:	ea4f 4910 	mov.w	r9, r0, lsr #16
   83704:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   83708:	45b0      	cmp	r8, r6
   8370a:	d906      	bls.n	8371a <__divdi3+0x10e>
   8370c:	1e79      	subs	r1, r7, #1
   8370e:	18b6      	adds	r6, r6, r2
   83710:	d202      	bcs.n	83718 <__divdi3+0x10c>
   83712:	45b0      	cmp	r8, r6
   83714:	f200 80d3 	bhi.w	838be <__divdi3+0x2b2>
   83718:	460f      	mov	r7, r1
   8371a:	ebc8 0606 	rsb	r6, r8, r6
   8371e:	fbb6 f1f3 	udiv	r1, r6, r3
   83722:	fb03 6311 	mls	r3, r3, r1, r6
   83726:	fb0c fc01 	mul.w	ip, ip, r1
   8372a:	b280      	uxth	r0, r0
   8372c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   83730:	459c      	cmp	ip, r3
   83732:	d906      	bls.n	83742 <__divdi3+0x136>
   83734:	1e4e      	subs	r6, r1, #1
   83736:	189a      	adds	r2, r3, r2
   83738:	d202      	bcs.n	83740 <__divdi3+0x134>
   8373a:	4594      	cmp	ip, r2
   8373c:	f200 80c2 	bhi.w	838c4 <__divdi3+0x2b8>
   83740:	4631      	mov	r1, r6
   83742:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   83746:	e7b1      	b.n	836ac <__divdi3+0xa0>
   83748:	43e4      	mvns	r4, r4
   8374a:	4252      	negs	r2, r2
   8374c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83750:	e766      	b.n	83620 <__divdi3+0x14>
   83752:	4240      	negs	r0, r0
   83754:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83758:	f04f 34ff 	mov.w	r4, #4294967295
   8375c:	e75d      	b.n	8361a <__divdi3+0xe>
   8375e:	40b2      	lsls	r2, r6
   83760:	f1c6 0920 	rsb	r9, r6, #32
   83764:	fa21 f709 	lsr.w	r7, r1, r9
   83768:	fa20 f909 	lsr.w	r9, r0, r9
   8376c:	fa01 f106 	lsl.w	r1, r1, r6
   83770:	0c13      	lsrs	r3, r2, #16
   83772:	fbb7 f8f3 	udiv	r8, r7, r3
   83776:	fa1f fc82 	uxth.w	ip, r2
   8377a:	fb03 7718 	mls	r7, r3, r8, r7
   8377e:	fb0c f508 	mul.w	r5, ip, r8
   83782:	ea49 0901 	orr.w	r9, r9, r1
   83786:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8378a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8378e:	40b0      	lsls	r0, r6
   83790:	42bd      	cmp	r5, r7
   83792:	d90a      	bls.n	837aa <__divdi3+0x19e>
   83794:	18bf      	adds	r7, r7, r2
   83796:	f108 36ff 	add.w	r6, r8, #4294967295
   8379a:	f080 808e 	bcs.w	838ba <__divdi3+0x2ae>
   8379e:	42bd      	cmp	r5, r7
   837a0:	f240 808b 	bls.w	838ba <__divdi3+0x2ae>
   837a4:	f1a8 0802 	sub.w	r8, r8, #2
   837a8:	18bf      	adds	r7, r7, r2
   837aa:	1b79      	subs	r1, r7, r5
   837ac:	fbb1 f5f3 	udiv	r5, r1, r3
   837b0:	fb03 1715 	mls	r7, r3, r5, r1
   837b4:	fb0c f605 	mul.w	r6, ip, r5
   837b8:	fa1f f989 	uxth.w	r9, r9
   837bc:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   837c0:	428e      	cmp	r6, r1
   837c2:	d906      	bls.n	837d2 <__divdi3+0x1c6>
   837c4:	1e6f      	subs	r7, r5, #1
   837c6:	1889      	adds	r1, r1, r2
   837c8:	d271      	bcs.n	838ae <__divdi3+0x2a2>
   837ca:	428e      	cmp	r6, r1
   837cc:	d96f      	bls.n	838ae <__divdi3+0x2a2>
   837ce:	3d02      	subs	r5, #2
   837d0:	1889      	adds	r1, r1, r2
   837d2:	1b8e      	subs	r6, r1, r6
   837d4:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   837d8:	e78c      	b.n	836f4 <__divdi3+0xe8>
   837da:	f1c5 0120 	rsb	r1, r5, #32
   837de:	fa22 f301 	lsr.w	r3, r2, r1
   837e2:	fa06 f605 	lsl.w	r6, r6, r5
   837e6:	fa27 f201 	lsr.w	r2, r7, r1
   837ea:	fa07 f705 	lsl.w	r7, r7, r5
   837ee:	fa20 f101 	lsr.w	r1, r0, r1
   837f2:	431e      	orrs	r6, r3
   837f4:	ea4f 4916 	mov.w	r9, r6, lsr #16
   837f8:	fbb2 f8f9 	udiv	r8, r2, r9
   837fc:	fa1f fa86 	uxth.w	sl, r6
   83800:	fb09 2218 	mls	r2, r9, r8, r2
   83804:	fb0a fb08 	mul.w	fp, sl, r8
   83808:	430f      	orrs	r7, r1
   8380a:	0c3b      	lsrs	r3, r7, #16
   8380c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83810:	4593      	cmp	fp, r2
   83812:	fa0c fc05 	lsl.w	ip, ip, r5
   83816:	d908      	bls.n	8382a <__divdi3+0x21e>
   83818:	1992      	adds	r2, r2, r6
   8381a:	f108 31ff 	add.w	r1, r8, #4294967295
   8381e:	d24a      	bcs.n	838b6 <__divdi3+0x2aa>
   83820:	4593      	cmp	fp, r2
   83822:	d948      	bls.n	838b6 <__divdi3+0x2aa>
   83824:	f1a8 0802 	sub.w	r8, r8, #2
   83828:	1992      	adds	r2, r2, r6
   8382a:	ebcb 0302 	rsb	r3, fp, r2
   8382e:	fbb3 f1f9 	udiv	r1, r3, r9
   83832:	fb09 3211 	mls	r2, r9, r1, r3
   83836:	fb0a fa01 	mul.w	sl, sl, r1
   8383a:	b2bf      	uxth	r7, r7
   8383c:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   83840:	459a      	cmp	sl, r3
   83842:	d906      	bls.n	83852 <__divdi3+0x246>
   83844:	1e4a      	subs	r2, r1, #1
   83846:	199b      	adds	r3, r3, r6
   83848:	d233      	bcs.n	838b2 <__divdi3+0x2a6>
   8384a:	459a      	cmp	sl, r3
   8384c:	d931      	bls.n	838b2 <__divdi3+0x2a6>
   8384e:	3902      	subs	r1, #2
   83850:	199b      	adds	r3, r3, r6
   83852:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   83856:	0c0f      	lsrs	r7, r1, #16
   83858:	fa1f f88c 	uxth.w	r8, ip
   8385c:	fb08 f607 	mul.w	r6, r8, r7
   83860:	b28a      	uxth	r2, r1
   83862:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   83866:	fb08 f802 	mul.w	r8, r8, r2
   8386a:	fb0c 6202 	mla	r2, ip, r2, r6
   8386e:	fb0c fc07 	mul.w	ip, ip, r7
   83872:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   83876:	4296      	cmp	r6, r2
   83878:	bf88      	it	hi
   8387a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8387e:	ebca 0303 	rsb	r3, sl, r3
   83882:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   83886:	4563      	cmp	r3, ip
   83888:	d30e      	bcc.n	838a8 <__divdi3+0x29c>
   8388a:	d005      	beq.n	83898 <__divdi3+0x28c>
   8388c:	2500      	movs	r5, #0
   8388e:	e70d      	b.n	836ac <__divdi3+0xa0>
   83890:	460e      	mov	r6, r1
   83892:	e6ef      	b.n	83674 <__divdi3+0x68>
   83894:	461d      	mov	r5, r3
   83896:	e701      	b.n	8369c <__divdi3+0x90>
   83898:	fa00 f005 	lsl.w	r0, r0, r5
   8389c:	fa1f f888 	uxth.w	r8, r8
   838a0:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   838a4:	42a8      	cmp	r0, r5
   838a6:	d2f1      	bcs.n	8388c <__divdi3+0x280>
   838a8:	3901      	subs	r1, #1
   838aa:	2500      	movs	r5, #0
   838ac:	e6fe      	b.n	836ac <__divdi3+0xa0>
   838ae:	463d      	mov	r5, r7
   838b0:	e78f      	b.n	837d2 <__divdi3+0x1c6>
   838b2:	4611      	mov	r1, r2
   838b4:	e7cd      	b.n	83852 <__divdi3+0x246>
   838b6:	4688      	mov	r8, r1
   838b8:	e7b7      	b.n	8382a <__divdi3+0x21e>
   838ba:	46b0      	mov	r8, r6
   838bc:	e775      	b.n	837aa <__divdi3+0x19e>
   838be:	3f02      	subs	r7, #2
   838c0:	18b6      	adds	r6, r6, r2
   838c2:	e72a      	b.n	8371a <__divdi3+0x10e>
   838c4:	3902      	subs	r1, #2
   838c6:	e73c      	b.n	83742 <__divdi3+0x136>

000838c8 <__udivdi3>:
   838c8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   838cc:	4614      	mov	r4, r2
   838ce:	4605      	mov	r5, r0
   838d0:	460e      	mov	r6, r1
   838d2:	2b00      	cmp	r3, #0
   838d4:	d13d      	bne.n	83952 <__udivdi3+0x8a>
   838d6:	428a      	cmp	r2, r1
   838d8:	d949      	bls.n	8396e <__udivdi3+0xa6>
   838da:	fab2 f782 	clz	r7, r2
   838de:	b147      	cbz	r7, 838f2 <__udivdi3+0x2a>
   838e0:	f1c7 0120 	rsb	r1, r7, #32
   838e4:	fa20 f201 	lsr.w	r2, r0, r1
   838e8:	fa06 f607 	lsl.w	r6, r6, r7
   838ec:	40bc      	lsls	r4, r7
   838ee:	40bd      	lsls	r5, r7
   838f0:	4316      	orrs	r6, r2
   838f2:	0c22      	lsrs	r2, r4, #16
   838f4:	fbb6 f0f2 	udiv	r0, r6, r2
   838f8:	b2a1      	uxth	r1, r4
   838fa:	fb02 6610 	mls	r6, r2, r0, r6
   838fe:	fb01 f300 	mul.w	r3, r1, r0
   83902:	0c2f      	lsrs	r7, r5, #16
   83904:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83908:	42b3      	cmp	r3, r6
   8390a:	d908      	bls.n	8391e <__udivdi3+0x56>
   8390c:	1e47      	subs	r7, r0, #1
   8390e:	1936      	adds	r6, r6, r4
   83910:	f080 80fa 	bcs.w	83b08 <__udivdi3+0x240>
   83914:	42b3      	cmp	r3, r6
   83916:	f240 80f7 	bls.w	83b08 <__udivdi3+0x240>
   8391a:	3802      	subs	r0, #2
   8391c:	1936      	adds	r6, r6, r4
   8391e:	1af6      	subs	r6, r6, r3
   83920:	fbb6 f3f2 	udiv	r3, r6, r2
   83924:	fb02 6213 	mls	r2, r2, r3, r6
   83928:	fb01 f103 	mul.w	r1, r1, r3
   8392c:	b2ad      	uxth	r5, r5
   8392e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   83932:	4291      	cmp	r1, r2
   83934:	d907      	bls.n	83946 <__udivdi3+0x7e>
   83936:	1e5e      	subs	r6, r3, #1
   83938:	1912      	adds	r2, r2, r4
   8393a:	f080 80e7 	bcs.w	83b0c <__udivdi3+0x244>
   8393e:	4291      	cmp	r1, r2
   83940:	f240 80e4 	bls.w	83b0c <__udivdi3+0x244>
   83944:	3b02      	subs	r3, #2
   83946:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8394a:	2100      	movs	r1, #0
   8394c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   83950:	4770      	bx	lr
   83952:	428b      	cmp	r3, r1
   83954:	d843      	bhi.n	839de <__udivdi3+0x116>
   83956:	fab3 f483 	clz	r4, r3
   8395a:	2c00      	cmp	r4, #0
   8395c:	d142      	bne.n	839e4 <__udivdi3+0x11c>
   8395e:	428b      	cmp	r3, r1
   83960:	d302      	bcc.n	83968 <__udivdi3+0xa0>
   83962:	4282      	cmp	r2, r0
   83964:	f200 80e1 	bhi.w	83b2a <__udivdi3+0x262>
   83968:	2100      	movs	r1, #0
   8396a:	2001      	movs	r0, #1
   8396c:	e7ee      	b.n	8394c <__udivdi3+0x84>
   8396e:	b912      	cbnz	r2, 83976 <__udivdi3+0xae>
   83970:	2701      	movs	r7, #1
   83972:	fbb7 f4f2 	udiv	r4, r7, r2
   83976:	fab4 f284 	clz	r2, r4
   8397a:	2a00      	cmp	r2, #0
   8397c:	f040 8089 	bne.w	83a92 <__udivdi3+0x1ca>
   83980:	1b0a      	subs	r2, r1, r4
   83982:	0c23      	lsrs	r3, r4, #16
   83984:	b2a7      	uxth	r7, r4
   83986:	2101      	movs	r1, #1
   83988:	fbb2 f6f3 	udiv	r6, r2, r3
   8398c:	fb03 2216 	mls	r2, r3, r6, r2
   83990:	fb07 f006 	mul.w	r0, r7, r6
   83994:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83998:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8399c:	4290      	cmp	r0, r2
   8399e:	d907      	bls.n	839b0 <__udivdi3+0xe8>
   839a0:	1912      	adds	r2, r2, r4
   839a2:	f106 3cff 	add.w	ip, r6, #4294967295
   839a6:	d202      	bcs.n	839ae <__udivdi3+0xe6>
   839a8:	4290      	cmp	r0, r2
   839aa:	f200 80d0 	bhi.w	83b4e <__udivdi3+0x286>
   839ae:	4666      	mov	r6, ip
   839b0:	1a12      	subs	r2, r2, r0
   839b2:	fbb2 f0f3 	udiv	r0, r2, r3
   839b6:	fb03 2310 	mls	r3, r3, r0, r2
   839ba:	fb07 f700 	mul.w	r7, r7, r0
   839be:	b2ad      	uxth	r5, r5
   839c0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   839c4:	429f      	cmp	r7, r3
   839c6:	d907      	bls.n	839d8 <__udivdi3+0x110>
   839c8:	1e42      	subs	r2, r0, #1
   839ca:	191b      	adds	r3, r3, r4
   839cc:	f080 80a0 	bcs.w	83b10 <__udivdi3+0x248>
   839d0:	429f      	cmp	r7, r3
   839d2:	f240 809d 	bls.w	83b10 <__udivdi3+0x248>
   839d6:	3802      	subs	r0, #2
   839d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   839dc:	e7b6      	b.n	8394c <__udivdi3+0x84>
   839de:	2100      	movs	r1, #0
   839e0:	4608      	mov	r0, r1
   839e2:	e7b3      	b.n	8394c <__udivdi3+0x84>
   839e4:	f1c4 0620 	rsb	r6, r4, #32
   839e8:	fa22 f706 	lsr.w	r7, r2, r6
   839ec:	fa03 f304 	lsl.w	r3, r3, r4
   839f0:	fa21 f506 	lsr.w	r5, r1, r6
   839f4:	fa01 f104 	lsl.w	r1, r1, r4
   839f8:	fa20 f606 	lsr.w	r6, r0, r6
   839fc:	433b      	orrs	r3, r7
   839fe:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   83a02:	fbb5 f7fc 	udiv	r7, r5, ip
   83a06:	fa1f f883 	uxth.w	r8, r3
   83a0a:	fb0c 5517 	mls	r5, ip, r7, r5
   83a0e:	fb08 f907 	mul.w	r9, r8, r7
   83a12:	ea46 0a01 	orr.w	sl, r6, r1
   83a16:	ea4f 411a 	mov.w	r1, sl, lsr #16
   83a1a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   83a1e:	45a9      	cmp	r9, r5
   83a20:	fa02 f204 	lsl.w	r2, r2, r4
   83a24:	d904      	bls.n	83a30 <__udivdi3+0x168>
   83a26:	1e7e      	subs	r6, r7, #1
   83a28:	18ed      	adds	r5, r5, r3
   83a2a:	f0c0 8081 	bcc.w	83b30 <__udivdi3+0x268>
   83a2e:	4637      	mov	r7, r6
   83a30:	ebc9 0105 	rsb	r1, r9, r5
   83a34:	fbb1 f6fc 	udiv	r6, r1, ip
   83a38:	fb0c 1516 	mls	r5, ip, r6, r1
   83a3c:	fb08 f806 	mul.w	r8, r8, r6
   83a40:	fa1f fa8a 	uxth.w	sl, sl
   83a44:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   83a48:	4588      	cmp	r8, r1
   83a4a:	d903      	bls.n	83a54 <__udivdi3+0x18c>
   83a4c:	1e75      	subs	r5, r6, #1
   83a4e:	18c9      	adds	r1, r1, r3
   83a50:	d374      	bcc.n	83b3c <__udivdi3+0x274>
   83a52:	462e      	mov	r6, r5
   83a54:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   83a58:	0c37      	lsrs	r7, r6, #16
   83a5a:	fa1f fc82 	uxth.w	ip, r2
   83a5e:	fb0c f507 	mul.w	r5, ip, r7
   83a62:	0c12      	lsrs	r2, r2, #16
   83a64:	b2b3      	uxth	r3, r6
   83a66:	fb0c fc03 	mul.w	ip, ip, r3
   83a6a:	fb02 5303 	mla	r3, r2, r3, r5
   83a6e:	fb02 f207 	mul.w	r2, r2, r7
   83a72:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   83a76:	429d      	cmp	r5, r3
   83a78:	bf88      	it	hi
   83a7a:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   83a7e:	ebc8 0101 	rsb	r1, r8, r1
   83a82:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   83a86:	4291      	cmp	r1, r2
   83a88:	d34c      	bcc.n	83b24 <__udivdi3+0x25c>
   83a8a:	d043      	beq.n	83b14 <__udivdi3+0x24c>
   83a8c:	4630      	mov	r0, r6
   83a8e:	2100      	movs	r1, #0
   83a90:	e75c      	b.n	8394c <__udivdi3+0x84>
   83a92:	4094      	lsls	r4, r2
   83a94:	f1c2 0520 	rsb	r5, r2, #32
   83a98:	fa21 f605 	lsr.w	r6, r1, r5
   83a9c:	fa20 f505 	lsr.w	r5, r0, r5
   83aa0:	fa01 f102 	lsl.w	r1, r1, r2
   83aa4:	0c23      	lsrs	r3, r4, #16
   83aa6:	fbb6 fcf3 	udiv	ip, r6, r3
   83aaa:	b2a7      	uxth	r7, r4
   83aac:	fb03 661c 	mls	r6, r3, ip, r6
   83ab0:	fb07 f80c 	mul.w	r8, r7, ip
   83ab4:	4329      	orrs	r1, r5
   83ab6:	0c0d      	lsrs	r5, r1, #16
   83ab8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   83abc:	45b0      	cmp	r8, r6
   83abe:	fa00 f502 	lsl.w	r5, r0, r2
   83ac2:	d908      	bls.n	83ad6 <__udivdi3+0x20e>
   83ac4:	1936      	adds	r6, r6, r4
   83ac6:	f10c 30ff 	add.w	r0, ip, #4294967295
   83aca:	d23e      	bcs.n	83b4a <__udivdi3+0x282>
   83acc:	45b0      	cmp	r8, r6
   83ace:	d93c      	bls.n	83b4a <__udivdi3+0x282>
   83ad0:	f1ac 0c02 	sub.w	ip, ip, #2
   83ad4:	1936      	adds	r6, r6, r4
   83ad6:	ebc8 0206 	rsb	r2, r8, r6
   83ada:	fbb2 f0f3 	udiv	r0, r2, r3
   83ade:	fb03 2610 	mls	r6, r3, r0, r2
   83ae2:	fb07 f800 	mul.w	r8, r7, r0
   83ae6:	b289      	uxth	r1, r1
   83ae8:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   83aec:	4590      	cmp	r8, r2
   83aee:	d906      	bls.n	83afe <__udivdi3+0x236>
   83af0:	1e46      	subs	r6, r0, #1
   83af2:	1912      	adds	r2, r2, r4
   83af4:	d227      	bcs.n	83b46 <__udivdi3+0x27e>
   83af6:	4590      	cmp	r8, r2
   83af8:	d925      	bls.n	83b46 <__udivdi3+0x27e>
   83afa:	3802      	subs	r0, #2
   83afc:	1912      	adds	r2, r2, r4
   83afe:	ebc8 0202 	rsb	r2, r8, r2
   83b02:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   83b06:	e73f      	b.n	83988 <__udivdi3+0xc0>
   83b08:	4638      	mov	r0, r7
   83b0a:	e708      	b.n	8391e <__udivdi3+0x56>
   83b0c:	4633      	mov	r3, r6
   83b0e:	e71a      	b.n	83946 <__udivdi3+0x7e>
   83b10:	4610      	mov	r0, r2
   83b12:	e761      	b.n	839d8 <__udivdi3+0x110>
   83b14:	fa00 f004 	lsl.w	r0, r0, r4
   83b18:	fa1f fc8c 	uxth.w	ip, ip
   83b1c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   83b20:	4298      	cmp	r0, r3
   83b22:	d2b3      	bcs.n	83a8c <__udivdi3+0x1c4>
   83b24:	1e70      	subs	r0, r6, #1
   83b26:	2100      	movs	r1, #0
   83b28:	e710      	b.n	8394c <__udivdi3+0x84>
   83b2a:	4621      	mov	r1, r4
   83b2c:	4620      	mov	r0, r4
   83b2e:	e70d      	b.n	8394c <__udivdi3+0x84>
   83b30:	45a9      	cmp	r9, r5
   83b32:	f67f af7c 	bls.w	83a2e <__udivdi3+0x166>
   83b36:	3f02      	subs	r7, #2
   83b38:	18ed      	adds	r5, r5, r3
   83b3a:	e779      	b.n	83a30 <__udivdi3+0x168>
   83b3c:	4588      	cmp	r8, r1
   83b3e:	d988      	bls.n	83a52 <__udivdi3+0x18a>
   83b40:	3e02      	subs	r6, #2
   83b42:	18c9      	adds	r1, r1, r3
   83b44:	e786      	b.n	83a54 <__udivdi3+0x18c>
   83b46:	4630      	mov	r0, r6
   83b48:	e7d9      	b.n	83afe <__udivdi3+0x236>
   83b4a:	4684      	mov	ip, r0
   83b4c:	e7c3      	b.n	83ad6 <__udivdi3+0x20e>
   83b4e:	3e02      	subs	r6, #2
   83b50:	1912      	adds	r2, r2, r4
   83b52:	e72d      	b.n	839b0 <__udivdi3+0xe8>
   83b54:	0a6a6548 	.word	0x0a6a6548
   83b58:	00000000 	.word	0x00000000

00083b5c <_global_impure_ptr>:
   83b5c:	20070010 20200043                                ... C.

00083b62 <blanks.6678>:
   83b62:	20202020 20202020 20202020 20202020                     

00083b72 <zeroes.6679>:
   83b72:	30303030 30303030 30303030 30303030     0000000000000000
   83b82:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   83b92:	32313000 36353433 61393837 65646362     .0123456789abcde
   83ba2:	4f500066 00584953 b5f8002e                       f.POSIX...

00083bac <_init>:
   83bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bae:	bf00      	nop
   83bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83bb2:	bc08      	pop	{r3}
   83bb4:	469e      	mov	lr, r3
   83bb6:	4770      	bx	lr

00083bb8 <__init_array_start>:
   83bb8:	00082025 	.word	0x00082025

00083bbc <__frame_dummy_init_array_entry>:
   83bbc:	0008016d                                m...

00083bc0 <_fini>:
   83bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bc2:	bf00      	nop
   83bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83bc6:	bc08      	pop	{r3}
   83bc8:	469e      	mov	lr, r3
   83bca:	4770      	bx	lr

00083bcc <__fini_array_start>:
   83bcc:	00080145 	.word	0x00080145
