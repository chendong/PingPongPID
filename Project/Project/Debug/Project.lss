
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000063ac  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000863ac  000863ac  0000e3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008e0  20070000  000863b4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000a278  200708e0  00086c98  000108e0  2**3
                  ALLOC
  4 .stack        00002000  2007ab58  00090f10  000108e0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108e0  2**0
                  CONTENTS, READONLY
  6 .comment      00000070  00000000  00000000  00010909  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002d898  00000000  00000000  00010979  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000878e  00000000  00000000  0003e211  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f06c  00000000  00000000  0004699f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000016f8  00000000  00000000  00055a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001378  00000000  00000000  00057108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ad1f  00000000  00000000  00058480  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001c8c6  00000000  00000000  0007319f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00068a8b  00000000  00000000  0008fa65  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002f14  00000000  00000000  000f84f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cb58 	.word	0x2007cb58
   80004:	000810d1 	.word	0x000810d1
   80008:	000810cd 	.word	0x000810cd
   8000c:	000810cd 	.word	0x000810cd
   80010:	000810cd 	.word	0x000810cd
   80014:	000810cd 	.word	0x000810cd
   80018:	000810cd 	.word	0x000810cd
	...
   8002c:	0008159d 	.word	0x0008159d
   80030:	000810cd 	.word	0x000810cd
   80034:	00000000 	.word	0x00000000
   80038:	0008162d 	.word	0x0008162d
   8003c:	00081669 	.word	0x00081669
   80040:	000810cd 	.word	0x000810cd
   80044:	000810cd 	.word	0x000810cd
   80048:	000810cd 	.word	0x000810cd
   8004c:	000810cd 	.word	0x000810cd
   80050:	000810cd 	.word	0x000810cd
   80054:	000810cd 	.word	0x000810cd
   80058:	000810cd 	.word	0x000810cd
   8005c:	000810cd 	.word	0x000810cd
   80060:	000810cd 	.word	0x000810cd
   80064:	000810cd 	.word	0x000810cd
   80068:	00000000 	.word	0x00000000
   8006c:	00080add 	.word	0x00080add
   80070:	00080af9 	.word	0x00080af9
   80074:	00080b15 	.word	0x00080b15
   80078:	00080b31 	.word	0x00080b31
	...
   80084:	000810cd 	.word	0x000810cd
   80088:	000810cd 	.word	0x000810cd
   8008c:	000810cd 	.word	0x000810cd
   80090:	000810cd 	.word	0x000810cd
   80094:	000810cd 	.word	0x000810cd
   80098:	000810cd 	.word	0x000810cd
   8009c:	000810cd 	.word	0x000810cd
   800a0:	000810cd 	.word	0x000810cd
   800a4:	00000000 	.word	0x00000000
   800a8:	000810cd 	.word	0x000810cd
   800ac:	000810cd 	.word	0x000810cd
   800b0:	000810cd 	.word	0x000810cd
   800b4:	000810cd 	.word	0x000810cd
   800b8:	000810cd 	.word	0x000810cd
   800bc:	000810cd 	.word	0x000810cd
   800c0:	000810cd 	.word	0x000810cd
   800c4:	000810cd 	.word	0x000810cd
   800c8:	000810cd 	.word	0x000810cd
   800cc:	000810cd 	.word	0x000810cd
   800d0:	000810cd 	.word	0x000810cd
   800d4:	000810cd 	.word	0x000810cd
   800d8:	000810cd 	.word	0x000810cd
   800dc:	000810cd 	.word	0x000810cd
   800e0:	000810cd 	.word	0x000810cd
   800e4:	000810cd 	.word	0x000810cd
   800e8:	000810cd 	.word	0x000810cd
   800ec:	000810cd 	.word	0x000810cd
   800f0:	000810cd 	.word	0x000810cd

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	000863b4 	.word	0x000863b4
   80110:	000863b7 	.word	0x000863b7
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	000863b4 	.word	0x000863b4
   8013c:	000863b4 	.word	0x000863b4
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708e0 	.word	0x200708e0
   80164:	00000000 	.word	0x00000000
   80168:	000863b4 	.word	0x000863b4

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	000863b4 	.word	0x000863b4
   80198:	200708e4 	.word	0x200708e4
   8019c:	000863b4 	.word	0x000863b4
   801a0:	00000000 	.word	0x00000000

000801a4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   801a4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   801a6:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   801aa:	f2c0 5001 	movt	r0, #1281	; 0x501
   801ae:	f241 33d1 	movw	r3, #5073	; 0x13d1
   801b2:	f2c0 0308 	movt	r3, #8
   801b6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801b8:	f04f 0000 	mov.w	r0, #0
   801bc:	f04f 013e 	mov.w	r1, #62	; 0x3e
   801c0:	f640 32ed 	movw	r2, #3053	; 0xbed
   801c4:	f2c0 0208 	movt	r2, #8
   801c8:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   801ca:	f640 445d 	movw	r4, #3165	; 0xc5d
   801ce:	f2c0 0408 	movt	r4, #8
   801d2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   801d4:	2800      	cmp	r0, #0
   801d6:	d0fc      	beq.n	801d2 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   801d8:	f640 406d 	movw	r0, #3181	; 0xc6d
   801dc:	f2c0 0008 	movt	r0, #8
   801e0:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   801e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   801e6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   801ea:	f643 7301 	movw	r3, #16129	; 0x3f01
   801ee:	f2c2 030d 	movt	r3, #8205	; 0x200d
   801f2:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   801f4:	f640 447d 	movw	r4, #3197	; 0xc7d
   801f8:	f2c0 0408 	movt	r4, #8
   801fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   801fe:	2800      	cmp	r0, #0
   80200:	d0fc      	beq.n	801fc <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80202:	f04f 0010 	mov.w	r0, #16
   80206:	f640 324d 	movw	r2, #2893	; 0xb4d
   8020a:	f2c0 0208 	movt	r2, #8
   8020e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80210:	f241 2009 	movw	r0, #4617	; 0x1209
   80214:	f2c0 0008 	movt	r0, #8
   80218:	4780      	blx	r0
   8021a:	bd10      	pop	{r4, pc}

0008021c <delay_init>:

#include "asf.h"
#include "DelayFunctions.h"

int delay_init(void)
{
   8021c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   8021e:	f04f 001b 	mov.w	r0, #27
   80222:	f640 438d 	movw	r3, #3213	; 0xc8d
   80226:	f2c0 0308 	movt	r3, #8
   8022a:	4798      	blx	r3
	tc_init(TC0,0,0);
   8022c:	f04f 0400 	mov.w	r4, #0
   80230:	f2c4 0408 	movt	r4, #16392	; 0x4008
   80234:	4620      	mov	r0, r4
   80236:	f04f 0100 	mov.w	r1, #0
   8023a:	460a      	mov	r2, r1
   8023c:	f640 73e9 	movw	r3, #4073	; 0xfe9
   80240:	f2c0 0308 	movt	r3, #8
   80244:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80246:	4620      	mov	r0, r4
   80248:	f04f 0100 	mov.w	r1, #0
   8024c:	f241 0205 	movw	r2, #4101	; 0x1005
   80250:	f2c0 0208 	movt	r2, #8
   80254:	4790      	blx	r2
	tc_stop(TC0,0);
   80256:	4620      	mov	r0, r4
   80258:	f04f 0100 	mov.w	r1, #0
   8025c:	f241 030d 	movw	r3, #4109	; 0x100d
   80260:	f2c0 0308 	movt	r3, #8
   80264:	4798      	blx	r3
	return 0;
}
   80266:	f04f 0000 	mov.w	r0, #0
   8026a:	bd10      	pop	{r4, pc}

0008026c <motorshield_setup>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8026c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   80270:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80274:	f44f 7280 	mov.w	r2, #256	; 0x100
   80278:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8027a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8027e:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80280:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80284:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80288:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   8028c:	6101      	str	r1, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8028e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80292:	6301      	str	r1, [r0, #48]	; 0x30
   80294:	4770      	bx	lr
   80296:	bf00      	nop

00080298 <pid_control>:
int16_t error;
uint16_t current_value;


void pid_control(void *p)
{	
   80298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8029c:	b083      	sub	sp, #12
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = 100;
	xLastWakeTime = xTaskGetTickCount();
   8029e:	f242 23e5 	movw	r3, #8933	; 0x22e5
   802a2:	f2c0 0308 	movt	r3, #8
   802a6:	4798      	blx	r3
   802a8:	9001      	str	r0, [sp, #4]
	
	while(1)
	{
		vTaskDelayUntil( &xLastWakeTime, xTimeIncrement); /* Wait for the next cycle */
   802aa:	f242 6a85 	movw	sl, #9861	; 0x2685
   802ae:	f2c0 0a08 	movt	sl, #8
		
		current_value = sensor_read();
   802b2:	f240 49d9 	movw	r9, #1241	; 0x4d9
   802b6:	f2c0 0908 	movt	r9, #8
   802ba:	f64a 3718 	movw	r7, #43800	; 0xab18
   802be:	f2c2 0707 	movt	r7, #8199	; 0x2007
		error = setpoint - current_value;
   802c2:	f240 0808 	movw	r8, #8
   802c6:	f2c2 0807 	movt	r8, #8199	; 0x2007
   802ca:	f64a 3638 	movw	r6, #43832	; 0xab38
   802ce:	f2c2 0607 	movt	r6, #8199	; 0x2007
		proportional= (Kp*error*100);
   802d2:	f04f 0400 	mov.w	r4, #0
   802d6:	f04f 0500 	mov.w	r5, #0
   802da:	f2c4 0559 	movt	r5, #16473	; 0x4059
	portTickType xTimeIncrement = 100;
	xLastWakeTime = xTaskGetTickCount();
	
	while(1)
	{
		vTaskDelayUntil( &xLastWakeTime, xTimeIncrement); /* Wait for the next cycle */
   802de:	a801      	add	r0, sp, #4
   802e0:	f04f 0164 	mov.w	r1, #100	; 0x64
   802e4:	47d0      	blx	sl
		
		current_value = sensor_read();
   802e6:	47c8      	blx	r9
   802e8:	8038      	strh	r0, [r7, #0]
		error = setpoint - current_value;
   802ea:	f8b8 1000 	ldrh.w	r1, [r8]
   802ee:	1a08      	subs	r0, r1, r0
   802f0:	b282      	uxth	r2, r0
   802f2:	8032      	strh	r2, [r6, #0]
		proportional= (Kp*error*100);
   802f4:	b210      	sxth	r0, r2
   802f6:	f243 5381 	movw	r3, #13697	; 0x3581
   802fa:	f2c0 0308 	movt	r3, #8
   802fe:	4798      	blx	r3
   80300:	f243 6b4d 	movw	fp, #13901	; 0x364d
   80304:	f2c0 0b08 	movt	fp, #8
   80308:	f240 0200 	movw	r2, #0
   8030c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80310:	ca0c      	ldmia	r2, {r2, r3}
   80312:	47d8      	blx	fp
   80314:	4622      	mov	r2, r4
   80316:	462b      	mov	r3, r5
   80318:	47d8      	blx	fp
   8031a:	f643 2371 	movw	r3, #14961	; 0x3a71
   8031e:	f2c0 0308 	movt	r3, #8
   80322:	4798      	blx	r3
   80324:	f640 01fc 	movw	r1, #2300	; 0x8fc
   80328:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8032c:	6008      	str	r0, [r1, #0]
		
		if(proportional > 1000)
   8032e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   80332:	dd07      	ble.n	80344 <pid_control+0xac>
		{
			proportional = 1000;
   80334:	f640 03fc 	movw	r3, #2300	; 0x8fc
   80338:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8033c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   80340:	6019      	str	r1, [r3, #0]
   80342:	e008      	b.n	80356 <pid_control+0xbe>
		}
		if(proportional < 0)
   80344:	2800      	cmp	r0, #0
   80346:	da06      	bge.n	80356 <pid_control+0xbe>
		{
			proportional = 0;
   80348:	f640 00fc 	movw	r0, #2300	; 0x8fc
   8034c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80350:	f04f 0200 	mov.w	r2, #0
   80354:	6002      	str	r2, [r0, #0]
		}
		pwm_update(proportional);
   80356:	f640 0bfc 	movw	fp, #2300	; 0x8fc
   8035a:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   8035e:	f8db 0000 	ldr.w	r0, [fp]
   80362:	f240 4235 	movw	r2, #1077	; 0x435
   80366:	f2c0 0208 	movt	r2, #8
   8036a:	4790      	blx	r2
		printf("C: %d, E: %d, P: %d\n", current_value, error, proportional);
   8036c:	f246 2090 	movw	r0, #25232	; 0x6290
   80370:	f2c0 0008 	movt	r0, #8
   80374:	8839      	ldrh	r1, [r7, #0]
   80376:	f9b6 2000 	ldrsh.w	r2, [r6]
   8037a:	f8db 3000 	ldr.w	r3, [fp]
   8037e:	f643 3c45 	movw	ip, #15173	; 0x3b45
   80382:	f2c0 0c08 	movt	ip, #8
   80386:	47e0      	blx	ip
	}
   80388:	e7a9      	b.n	802de <pid_control+0x46>
   8038a:	bf00      	nop

0008038c <pwm_setup>:
static pwm_channel_t pwm_channel_instance;			// Define the PWM channel instance in order to configure channel


/* Initialize PWM for pin DAC1 */
void pwm_setup(void)
{
   8038c:	b530      	push	{r4, r5, lr}
   8038e:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);					// Enable the module clock for PWM peripheral
   80390:	f04f 0024 	mov.w	r0, #36	; 0x24
   80394:	f640 438d 	movw	r3, #3213	; 0xc8d
   80398:	f2c0 0308 	movt	r3, #8
   8039c:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);			// Disable channel 0
   8039e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   803a2:	f2c4 0509 	movt	r5, #16393	; 0x4009
   803a6:	4628      	mov	r0, r5
   803a8:	f04f 0100 	mov.w	r1, #0
   803ac:	f640 72dd 	movw	r2, #4061	; 0xfdd
   803b0:	f2c0 0208 	movt	r2, #8
   803b4:	4790      	blx	r2
	
	pwm_clock_t clock_setting = {					// Setup clock for PWM module
   803b6:	f244 2040 	movw	r0, #16960	; 0x4240
   803ba:	f2c0 000f 	movt	r0, #15
   803be:	9001      	str	r0, [sp, #4]
   803c0:	f04f 0400 	mov.w	r4, #0
   803c4:	9402      	str	r4, [sp, #8]
   803c6:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   803ca:	f2c0 5101 	movt	r1, #1281	; 0x501
   803ce:	9103      	str	r1, [sp, #12]
		.ul_clka = 1000 * 1000,						// Clock A is configured, frequencey = 1KHz, period = 1000
		.ul_clkb = 0,								// Clock B is not used
		.ul_mck = sysclk_get_cpu_hz()				// System main clock = 48MHz   (eller sysclk_get_cpu_hz() ?), sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   803d0:	4628      	mov	r0, r5
   803d2:	a901      	add	r1, sp, #4
   803d4:	f640 6335 	movw	r3, #3637	; 0xe35
   803d8:	f2c0 0308 	movt	r3, #8
   803dc:	4798      	blx	r3
	
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;			// Clock A as source clock
   803de:	f640 1100 	movw	r1, #2304	; 0x900
   803e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803e6:	f04f 020b 	mov.w	r2, #11
   803ea:	604a      	str	r2, [r1, #4]
	pwm_channel_instance.ul_period = 1000;
   803ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   803f0:	6108      	str	r0, [r1, #16]
	pwm_channel_instance.ul_duty = 0;
   803f2:	60cc      	str	r4, [r1, #12]
	pwm_channel_instance.channel = PWM_CHANNEL;						// Configure channel 0
   803f4:	600c      	str	r4, [r1, #0]
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;				// Period is left-aligned
   803f6:	810c      	strh	r4, [r1, #8]
	pwm_channel_instance.polarity = PWM_LOW;						// Output waveform starts at a low level
   803f8:	728c      	strb	r4, [r1, #10]
	
	pwm_channel_init(PWM, &pwm_channel_instance);					// Initialize channel instance
   803fa:	4628      	mov	r0, r5
   803fc:	f640 6281 	movw	r2, #3713	; 0xe81
   80400:	f2c0 0208 	movt	r2, #8
   80404:	4790      	blx	r2
	pio_set_peripheral(PIOB, PIO_PERIPH_B, PIO_PB16B_PWML0);		// Setup PWM for pin DAC1
   80406:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   8040a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8040e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80412:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80416:	f240 73e9 	movw	r3, #2025	; 0x7e9
   8041a:	f2c0 0308 	movt	r3, #8
   8041e:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL);							// Enable channel 6
   80420:	4628      	mov	r0, r5
   80422:	4621      	mov	r1, r4
   80424:	f640 72d1 	movw	r2, #4049	; 0xfd1
   80428:	f2c0 0208 	movt	r2, #8
   8042c:	4790      	blx	r2
}
   8042e:	b005      	add	sp, #20
   80430:	bd30      	pop	{r4, r5, pc}
   80432:	bf00      	nop

00080434 <pwm_update>:


/* Update duty cycle */
void pwm_update(int duty_cycle)
{
   80434:	b508      	push	{r3, lr}
   80436:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel_instance, duty_cycle);
   80438:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   8043c:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80440:	f640 1100 	movw	r1, #2304	; 0x900
   80444:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80448:	f640 73ad 	movw	r3, #4013	; 0xfad
   8044c:	f2c0 0308 	movt	r3, #8
   80450:	4798      	blx	r3
   80452:	bd08      	pop	{r3, pc}

00080454 <adc_setup>:
#include "SensorFunctions.h"


/* Initialize ADC for pin A8 */
void adc_setup(void)
{
   80454:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);							// Enable specified peripheral clock
   80456:	f04f 0025 	mov.w	r0, #37	; 0x25
   8045a:	f640 438d 	movw	r3, #3213	; 0xc8d
   8045e:	f2c0 0308 	movt	r3, #8
   80462:	4798      	blx	r3
	
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);		// Initialize the given ADC with the specified ADC clock and startup time
   80464:	f04f 0400 	mov.w	r4, #0
   80468:	f2c4 040c 	movt	r4, #16396	; 0x400c
   8046c:	4620      	mov	r0, r4
   8046e:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   80472:	f6c0 2103 	movt	r1, #2563	; 0xa03
   80476:	f244 2240 	movw	r2, #16960	; 0x4240
   8047a:	f2c0 020f 	movt	r2, #15
   8047e:	f04f 0308 	mov.w	r3, #8
   80482:	f240 752d 	movw	r5, #1837	; 0x72d
   80486:	f2c0 0508 	movt	r5, #8
   8048a:	47a8      	blx	r5
															// sysclk_get_main_hz() is used to get master clock frequency
															// ADC_CLOCK gives the ADC clock frequency
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);	// Configure ADC timing
   8048c:	4620      	mov	r0, r4
   8048e:	f04f 0100 	mov.w	r1, #0
   80492:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80496:	f04f 0301 	mov.w	r3, #1
   8049a:	f240 7595 	movw	r5, #1941	; 0x795
   8049e:	f2c0 0508 	movt	r5, #8
   804a2:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);			// Set ADC resolution with 12 bits, 2^12 = 4096 (voltage read converted to number between 0-4095)
   804a4:	4620      	mov	r0, r4
   804a6:	f04f 0100 	mov.w	r1, #0
   804aa:	f240 7275 	movw	r2, #1909	; 0x775
   804ae:	f2c0 0208 	movt	r2, #8
   804b2:	4790      	blx	r2
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// Enable specified ADC channel (pin A8)
   804b4:	4620      	mov	r0, r4
   804b6:	f04f 010a 	mov.w	r1, #10
   804ba:	f240 73bd 	movw	r3, #1981	; 0x7bd
   804be:	f2c0 0308 	movt	r3, #8
   804c2:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// Configure software conversion trigger
   804c4:	4620      	mov	r0, r4
   804c6:	f04f 0100 	mov.w	r1, #0
   804ca:	460a      	mov	r2, r1
   804cc:	f240 7385 	movw	r3, #1925	; 0x785
   804d0:	f2c0 0308 	movt	r3, #8
   804d4:	4798      	blx	r3
   804d6:	bd38      	pop	{r3, r4, r5, pc}

000804d8 <sensor_read>:
* 45-40cm = 1660
* 40-35cm = 1510
* 35-30cm = 1380	max value
*/
uint16_t sensor_read(void)
{
   804d8:	b510      	push	{r4, lr}
	uint16_t distance = 0;	
	
	while(1)
	{	
		adc_start(ADC);
   804da:	f04f 0400 	mov.w	r4, #0
   804de:	f2c4 040c 	movt	r4, #16396	; 0x400c
   804e2:	4620      	mov	r0, r4
   804e4:	f240 73b5 	movw	r3, #1973	; 0x7b5
   804e8:	f2c0 0308 	movt	r3, #8
   804ec:	4798      	blx	r3
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
   804ee:	4620      	mov	r0, r4
   804f0:	f04f 010a 	mov.w	r1, #10
   804f4:	f240 72c9 	movw	r2, #1993	; 0x7c9
   804f8:	f2c0 0208 	movt	r2, #8
   804fc:	4790      	blx	r2
   804fe:	b284      	uxth	r4, r0
		printf("sensor: %d\n", sensor_value);
   80500:	f246 20a8 	movw	r0, #25256	; 0x62a8
   80504:	f2c0 0008 	movt	r0, #8
   80508:	4621      	mov	r1, r4
   8050a:	f643 3345 	movw	r3, #15173	; 0x3b45
   8050e:	f2c0 0308 	movt	r3, #8
   80512:	4798      	blx	r3
	
		if(sensor_value > 1850)
   80514:	f240 703a 	movw	r0, #1850	; 0x73a
   80518:	4284      	cmp	r4, r0
   8051a:	d815      	bhi.n	80548 <sensor_read+0x70>
		{
			distance = 30;
		}
		else if(sensor_value < 1850 && sensor_value >= 1760)
   8051c:	f5a4 62dc 	sub.w	r2, r4, #1760	; 0x6e0
   80520:	b291      	uxth	r1, r2
   80522:	2959      	cmp	r1, #89	; 0x59
   80524:	d913      	bls.n	8054e <sensor_read+0x76>
		{
			distance = 35;
		}
		else if(sensor_value < 1760 && sensor_value >= 1660)
   80526:	f2a4 637c 	subw	r3, r4, #1660	; 0x67c
   8052a:	b298      	uxth	r0, r3
   8052c:	2863      	cmp	r0, #99	; 0x63
   8052e:	d911      	bls.n	80554 <sensor_read+0x7c>
		{
			distance = 40;
		}
		else if(sensor_value < 1660 && sensor_value >= 1510)
   80530:	f2a4 52e6 	subw	r2, r4, #1510	; 0x5e6
   80534:	b291      	uxth	r1, r2
   80536:	2995      	cmp	r1, #149	; 0x95
   80538:	d90f      	bls.n	8055a <sensor_read+0x82>
* 40-35cm = 1510
* 35-30cm = 1380	max value
*/
uint16_t sensor_read(void)
{
	uint16_t distance = 0;	
   8053a:	f240 53e5 	movw	r3, #1509	; 0x5e5
   8053e:	429c      	cmp	r4, r3
   80540:	bf94      	ite	ls
   80542:	2032      	movls	r0, #50	; 0x32
   80544:	2000      	movhi	r0, #0
   80546:	bd10      	pop	{r4, pc}
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
		printf("sensor: %d\n", sensor_value);
	
		if(sensor_value > 1850)
		{
			distance = 30;
   80548:	f04f 001e 	mov.w	r0, #30
   8054c:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 1850 && sensor_value >= 1760)
		{
			distance = 35;
   8054e:	f04f 0023 	mov.w	r0, #35	; 0x23
   80552:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 1760 && sensor_value >= 1660)
		{
			distance = 40;
   80554:	f04f 0028 	mov.w	r0, #40	; 0x28
   80558:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value < 1660 && sensor_value >= 1510)
		{
			distance = 45;
   8055a:	f04f 002d 	mov.w	r0, #45	; 0x2d
		//printf("Sensor value: %d, Distance: %d\n", sensor_value, distance);
		return distance;
		
	}
	
}
   8055e:	bd10      	pop	{r4, pc}

00080560 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80564:	460c      	mov	r4, r1
   80566:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80568:	bb48      	cbnz	r0, 805be <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   8056a:	2a00      	cmp	r2, #0
   8056c:	dd2b      	ble.n	805c6 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   8056e:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80570:	f64a 3650 	movw	r6, #43856	; 0xab50
   80574:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80578:	f64a 3548 	movw	r5, #43848	; 0xab48
   8057c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80580:	ea6f 0901 	mvn.w	r9, r1
   80584:	eb07 0009 	add.w	r0, r7, r9
   80588:	f000 0901 	and.w	r9, r0, #1
   8058c:	6830      	ldr	r0, [r6, #0]
   8058e:	682b      	ldr	r3, [r5, #0]
   80590:	4798      	blx	r3
		ptr++;
   80592:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80596:	42bc      	cmp	r4, r7
   80598:	d119      	bne.n	805ce <_read+0x6e>
   8059a:	e00d      	b.n	805b8 <_read+0x58>
		ptr_get(stdio_base, ptr);
   8059c:	6830      	ldr	r0, [r6, #0]
   8059e:	682b      	ldr	r3, [r5, #0]
   805a0:	4621      	mov	r1, r4
   805a2:	4798      	blx	r3
		ptr++;
   805a4:	f104 0401 	add.w	r4, r4, #1
   805a8:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   805aa:	6830      	ldr	r0, [r6, #0]
   805ac:	682a      	ldr	r2, [r5, #0]
   805ae:	4790      	blx	r2
		ptr++;
   805b0:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   805b4:	42bc      	cmp	r4, r7
   805b6:	d1f1      	bne.n	8059c <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   805b8:	4640      	mov	r0, r8
   805ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   805be:	f04f 30ff 	mov.w	r0, #4294967295
   805c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   805c6:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   805ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   805ce:	f1b9 0f00 	cmp.w	r9, #0
   805d2:	d0e3      	beq.n	8059c <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   805d4:	6830      	ldr	r0, [r6, #0]
   805d6:	682a      	ldr	r2, [r5, #0]
   805d8:	4621      	mov	r1, r4
   805da:	4790      	blx	r2
		ptr++;
   805dc:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   805e0:	42bc      	cmp	r4, r7
   805e2:	d1db      	bne.n	8059c <_read+0x3c>
   805e4:	e7e8      	b.n	805b8 <_read+0x58>
   805e6:	bf00      	nop

000805e8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   805e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   805ec:	460d      	mov	r5, r1
   805ee:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   805f0:	f100 30ff 	add.w	r0, r0, #4294967295
   805f4:	2802      	cmp	r0, #2
   805f6:	d824      	bhi.n	80642 <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   805f8:	b332      	cbz	r2, 80648 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   805fa:	f64a 3650 	movw	r6, #43856	; 0xab50
   805fe:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80602:	f64a 374c 	movw	r7, #43852	; 0xab4c
   80606:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8060a:	f04f 0400 	mov.w	r4, #0
   8060e:	f102 39ff 	add.w	r9, r2, #4294967295
   80612:	f009 0901 	and.w	r9, r9, #1
   80616:	6830      	ldr	r0, [r6, #0]
   80618:	683b      	ldr	r3, [r7, #0]
   8061a:	5d09      	ldrb	r1, [r1, r4]
   8061c:	4798      	blx	r3
   8061e:	42a0      	cmp	r0, r4
   80620:	da1a      	bge.n	80658 <_write+0x70>
   80622:	e014      	b.n	8064e <_write+0x66>
   80624:	6830      	ldr	r0, [r6, #0]
   80626:	683b      	ldr	r3, [r7, #0]
   80628:	5d29      	ldrb	r1, [r5, r4]
   8062a:	4798      	blx	r3
   8062c:	2800      	cmp	r0, #0
   8062e:	db0e      	blt.n	8064e <_write+0x66>
			return -1;
		}
		++nChars;
   80630:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80634:	6830      	ldr	r0, [r6, #0]
   80636:	683a      	ldr	r2, [r7, #0]
   80638:	5d29      	ldrb	r1, [r5, r4]
   8063a:	4790      	blx	r2
   8063c:	2800      	cmp	r0, #0
   8063e:	da1d      	bge.n	8067c <_write+0x94>
   80640:	e005      	b.n	8064e <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80642:	f04f 34ff 	mov.w	r4, #4294967295
   80646:	e004      	b.n	80652 <_write+0x6a>
	}

	for (; len != 0; --len) {
   80648:	f04f 0400 	mov.w	r4, #0
   8064c:	e001      	b.n	80652 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8064e:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80652:	4620      	mov	r0, r4
   80654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80658:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8065c:	45a0      	cmp	r8, r4
   8065e:	d0f8      	beq.n	80652 <_write+0x6a>
   80660:	f1b9 0f00 	cmp.w	r9, #0
   80664:	d0de      	beq.n	80624 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80666:	6830      	ldr	r0, [r6, #0]
   80668:	683a      	ldr	r2, [r7, #0]
   8066a:	5d29      	ldrb	r1, [r5, r4]
   8066c:	4790      	blx	r2
   8066e:	2800      	cmp	r0, #0
   80670:	dbed      	blt.n	8064e <_write+0x66>
			return -1;
		}
		++nChars;
   80672:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80676:	45a0      	cmp	r8, r4
   80678:	d1d4      	bne.n	80624 <_write+0x3c>
   8067a:	e7ea      	b.n	80652 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   8067c:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80680:	45a0      	cmp	r8, r4
   80682:	d1cf      	bne.n	80624 <_write+0x3c>
   80684:	e7e5      	b.n	80652 <_write+0x6a>
   80686:	bf00      	nop

00080688 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80688:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8068a:	f641 2350 	movw	r3, #6736	; 0x1a50
   8068e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80692:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80696:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80698:	f04f 000b 	mov.w	r0, #11
   8069c:	f640 448d 	movw	r4, #3213	; 0xc8d
   806a0:	f2c0 0408 	movt	r4, #8
   806a4:	47a0      	blx	r4
   806a6:	f04f 000c 	mov.w	r0, #12
   806aa:	47a0      	blx	r4
   806ac:	f04f 000d 	mov.w	r0, #13
   806b0:	47a0      	blx	r4
   806b2:	f04f 000e 	mov.w	r0, #14
   806b6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   806b8:	f04f 003b 	mov.w	r0, #59	; 0x3b
   806bc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806c0:	f640 04c1 	movw	r4, #2241	; 0x8c1
   806c4:	f2c0 0408 	movt	r4, #8
   806c8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   806ca:	f04f 0055 	mov.w	r0, #85	; 0x55
   806ce:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806d2:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   806d4:	f04f 0056 	mov.w	r0, #86	; 0x56
   806d8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806dc:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   806de:	f04f 0068 	mov.w	r0, #104	; 0x68
   806e2:	f04f 0179 	mov.w	r1, #121	; 0x79
   806e6:	f6c2 0100 	movt	r1, #10240	; 0x2800
   806ea:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   806ec:	f04f 005c 	mov.w	r0, #92	; 0x5c
   806f0:	f04f 0101 	mov.w	r1, #1
   806f4:	f6c2 0100 	movt	r1, #10240	; 0x2800
   806f8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   806fa:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   806fe:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80702:	f44f 7140 	mov.w	r1, #768	; 0x300
   80706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8070a:	f640 13c1 	movw	r3, #2497	; 0x9c1
   8070e:	f2c0 0308 	movt	r3, #8
   80712:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80714:	f04f 002b 	mov.w	r0, #43	; 0x2b
   80718:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8071c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8071e:	f04f 002a 	mov.w	r0, #42	; 0x2a
   80722:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80726:	47a0      	blx	r4
   80728:	bd10      	pop	{r4, pc}
   8072a:	bf00      	nop

0008072c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const uint8_t uc_startup)
{
   8072c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8072e:	f04f 0401 	mov.w	r4, #1
   80732:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80734:	f04f 0400 	mov.w	r4, #0
   80738:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8073a:	f240 2502 	movw	r5, #514	; 0x202
   8073e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80742:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80746:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   8074a:	6845      	ldr	r5, [r0, #4]
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8074c:	ea4f 0242 	mov.w	r2, r2, lsl #1
   80750:	fbb1 f1f2 	udiv	r1, r1, r2
   80754:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80758:	ea4f 6102 	mov.w	r1, r2, lsl #24
			((uc_startup << ADC_MR_STARTUP_Pos) &
   8075c:	ea4f 4303 	mov.w	r3, r3, lsl #16
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80760:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
   80764:	ea42 4111 	orr.w	r1, r2, r1, lsr #16
   80768:	430d      	orrs	r5, r1
   8076a:	6045      	str	r5, [r0, #4]
			((uc_startup << ADC_MR_STARTUP_Pos) &
			ADC_MR_STARTUP_Msk);
	return 0;
}
   8076c:	4620      	mov	r0, r4
   8076e:	bc30      	pop	{r4, r5}
   80770:	4770      	bx	lr
   80772:	bf00      	nop

00080774 <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   80774:	6843      	ldr	r3, [r0, #4]
   80776:	ea4f 1101 	mov.w	r1, r1, lsl #4
   8077a:	f001 0210 	and.w	r2, r1, #16
   8077e:	4313      	orrs	r3, r2
   80780:	6043      	str	r3, [r0, #4]
   80782:	4770      	bx	lr

00080784 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80784:	6843      	ldr	r3, [r0, #4]
   80786:	4319      	orrs	r1, r3
   80788:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   8078c:	b2d3      	uxtb	r3, r2
   8078e:	4319      	orrs	r1, r3
   80790:	6041      	str	r1, [r0, #4]
   80792:	4770      	bx	lr

00080794 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80794:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80796:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80798:	4322      	orrs	r2, r4
   8079a:	ea4f 6101 	mov.w	r1, r1, lsl #24
   8079e:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   807a2:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   807a4:	ea4f 7303 	mov.w	r3, r3, lsl #28
   807a8:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   807ac:	430a      	orrs	r2, r1
   807ae:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   807b0:	bc10      	pop	{r4}
   807b2:	4770      	bx	lr

000807b4 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   807b4:	f04f 0302 	mov.w	r3, #2
   807b8:	6003      	str	r3, [r0, #0]
   807ba:	4770      	bx	lr

000807bc <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   807bc:	f04f 0301 	mov.w	r3, #1
   807c0:	fa03 f101 	lsl.w	r1, r3, r1
   807c4:	6101      	str	r1, [r0, #16]
   807c6:	4770      	bx	lr

000807c8 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   807c8:	290f      	cmp	r1, #15
   807ca:	d804      	bhi.n	807d6 <adc_get_channel_value+0xe>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   807cc:	f101 0114 	add.w	r1, r1, #20
   807d0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   807d4:	4770      	bx	lr
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   807d6:	f04f 0000 	mov.w	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   807da:	4770      	bx	lr

000807dc <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   807dc:	b10a      	cbz	r2, 807e2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   807de:	6641      	str	r1, [r0, #100]	; 0x64
   807e0:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   807e2:	6601      	str	r1, [r0, #96]	; 0x60
   807e4:	4770      	bx	lr
   807e6:	bf00      	nop

000807e8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   807e8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   807ea:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   807ee:	d016      	beq.n	8081e <pio_set_peripheral+0x36>
   807f0:	d804      	bhi.n	807fc <pio_set_peripheral+0x14>
   807f2:	b1c9      	cbz	r1, 80828 <pio_set_peripheral+0x40>
   807f4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   807f8:	d115      	bne.n	80826 <pio_set_peripheral+0x3e>
   807fa:	e009      	b.n	80810 <pio_set_peripheral+0x28>
   807fc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80800:	d012      	beq.n	80828 <pio_set_peripheral+0x40>
   80802:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80806:	d00f      	beq.n	80828 <pio_set_peripheral+0x40>
   80808:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8080c:	d10b      	bne.n	80826 <pio_set_peripheral+0x3e>
   8080e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80810:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80812:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80814:	400b      	ands	r3, r1
   80816:	ea23 0302 	bic.w	r3, r3, r2
   8081a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8081c:	e003      	b.n	80826 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8081e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80820:	ea42 0103 	orr.w	r1, r2, r3
   80824:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80826:	6042      	str	r2, [r0, #4]
   80828:	4770      	bx	lr
   8082a:	bf00      	nop

0008082c <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8082c:	6441      	str	r1, [r0, #68]	; 0x44
   8082e:	4770      	bx	lr

00080830 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80832:	4604      	mov	r4, r0
   80834:	460d      	mov	r5, r1
   80836:	4616      	mov	r6, r2
   80838:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   8083a:	f640 032d 	movw	r3, #2093	; 0x82d
   8083e:	f2c0 0308 	movt	r3, #8
   80842:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80844:	4620      	mov	r0, r4
   80846:	4629      	mov	r1, r5
   80848:	9a06      	ldr	r2, [sp, #24]
   8084a:	f240 73dd 	movw	r3, #2013	; 0x7dd
   8084e:	f2c0 0308 	movt	r3, #8
   80852:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80854:	b10f      	cbz	r7, 8085a <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   80856:	6525      	str	r5, [r4, #80]	; 0x50
   80858:	e000      	b.n	8085c <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8085a:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8085c:	b10e      	cbz	r6, 80862 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   8085e:	6325      	str	r5, [r4, #48]	; 0x30
   80860:	e000      	b.n	80864 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80862:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80864:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   80866:	6025      	str	r5, [r4, #0]
   80868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8086a:	bf00      	nop

0008086c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   8086c:	b570      	push	{r4, r5, r6, lr}
   8086e:	4604      	mov	r4, r0
   80870:	460d      	mov	r5, r1
   80872:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   80874:	f640 032d 	movw	r3, #2093	; 0x82d
   80878:	f2c0 0308 	movt	r3, #8
   8087c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8087e:	4620      	mov	r0, r4
   80880:	4629      	mov	r1, r5
   80882:	f006 0201 	and.w	r2, r6, #1
   80886:	f240 73dd 	movw	r3, #2013	; 0x7dd
   8088a:	f2c0 0308 	movt	r3, #8
   8088e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80890:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   80894:	bf14      	ite	ne
   80896:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80898:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8089a:	f016 0f02 	tst.w	r6, #2
   8089e:	d002      	beq.n	808a6 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   808a0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   808a4:	e004      	b.n	808b0 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   808a6:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   808aa:	bf18      	it	ne
   808ac:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   808b0:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   808b2:	6025      	str	r5, [r4, #0]
   808b4:	bd70      	pop	{r4, r5, r6, pc}
   808b6:	bf00      	nop

000808b8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   808b8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   808ba:	4770      	bx	lr

000808bc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   808bc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   808be:	4770      	bx	lr

000808c0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   808c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   808c2:	b083      	sub	sp, #12
   808c4:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808c6:	ea4f 1650 	mov.w	r6, r0, lsr #5
   808ca:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   808ce:	f201 7207 	addw	r2, r1, #1799	; 0x707
   808d2:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   808d6:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   808da:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   808de:	d042      	beq.n	80966 <pio_configure_pin+0xa6>
   808e0:	d806      	bhi.n	808f0 <pio_configure_pin+0x30>
   808e2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   808e6:	d00a      	beq.n	808fe <pio_configure_pin+0x3e>
   808e8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   808ec:	d164      	bne.n	809b8 <pio_configure_pin+0xf8>
   808ee:	e020      	b.n	80932 <pio_configure_pin+0x72>
   808f0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   808f4:	d046      	beq.n	80984 <pio_configure_pin+0xc4>
   808f6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   808fa:	d15d      	bne.n	809b8 <pio_configure_pin+0xf8>
   808fc:	e042      	b.n	80984 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   808fe:	f000 071f 	and.w	r7, r0, #31
   80902:	f04f 0401 	mov.w	r4, #1
   80906:	fa04 f707 	lsl.w	r7, r4, r7
   8090a:	4630      	mov	r0, r6
   8090c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80910:	463a      	mov	r2, r7
   80912:	f240 73e9 	movw	r3, #2025	; 0x7e9
   80916:	f2c0 0308 	movt	r3, #8
   8091a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8091c:	4630      	mov	r0, r6
   8091e:	4639      	mov	r1, r7
   80920:	ea05 0204 	and.w	r2, r5, r4
   80924:	f240 73dd 	movw	r3, #2013	; 0x7dd
   80928:	f2c0 0308 	movt	r3, #8
   8092c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8092e:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80930:	e044      	b.n	809bc <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80932:	f000 001f 	and.w	r0, r0, #31
   80936:	f04f 0401 	mov.w	r4, #1
   8093a:	fa04 f700 	lsl.w	r7, r4, r0
   8093e:	4630      	mov	r0, r6
   80940:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80944:	463a      	mov	r2, r7
   80946:	f240 73e9 	movw	r3, #2025	; 0x7e9
   8094a:	f2c0 0308 	movt	r3, #8
   8094e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80950:	4630      	mov	r0, r6
   80952:	4639      	mov	r1, r7
   80954:	ea05 0204 	and.w	r2, r5, r4
   80958:	f240 73dd 	movw	r3, #2013	; 0x7dd
   8095c:	f2c0 0308 	movt	r3, #8
   80960:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80962:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80964:	e02a      	b.n	809bc <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80966:	f000 021f 	and.w	r2, r0, #31
   8096a:	f04f 0401 	mov.w	r4, #1
   8096e:	4630      	mov	r0, r6
   80970:	fa04 f102 	lsl.w	r1, r4, r2
   80974:	462a      	mov	r2, r5
   80976:	f640 036d 	movw	r3, #2157	; 0x86d
   8097a:	f2c0 0308 	movt	r3, #8
   8097e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80980:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80982:	e01b      	b.n	809bc <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80984:	f000 021f 	and.w	r2, r0, #31
   80988:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8098c:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80990:	ea05 0104 	and.w	r1, r5, r4
   80994:	9100      	str	r1, [sp, #0]
   80996:	4630      	mov	r0, r6
   80998:	fa04 f102 	lsl.w	r1, r4, r2
   8099c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   809a0:	bf14      	ite	ne
   809a2:	2200      	movne	r2, #0
   809a4:	2201      	moveq	r2, #1
   809a6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   809aa:	f640 0531 	movw	r5, #2097	; 0x831
   809ae:	f2c0 0508 	movt	r5, #8
   809b2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   809b4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   809b6:	e001      	b.n	809bc <pio_configure_pin+0xfc>

	default:
		return 0;
   809b8:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   809bc:	b003      	add	sp, #12
   809be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000809c0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   809c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   809c2:	b083      	sub	sp, #12
   809c4:	4607      	mov	r7, r0
   809c6:	460e      	mov	r6, r1
   809c8:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   809ca:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   809ce:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   809d2:	d036      	beq.n	80a42 <pio_configure_pin_group+0x82>
   809d4:	d806      	bhi.n	809e4 <pio_configure_pin_group+0x24>
   809d6:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   809da:	d00a      	beq.n	809f2 <pio_configure_pin_group+0x32>
   809dc:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   809e0:	d14d      	bne.n	80a7e <pio_configure_pin_group+0xbe>
   809e2:	e01a      	b.n	80a1a <pio_configure_pin_group+0x5a>
   809e4:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   809e8:	d033      	beq.n	80a52 <pio_configure_pin_group+0x92>
   809ea:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   809ee:	d146      	bne.n	80a7e <pio_configure_pin_group+0xbe>
   809f0:	e02f      	b.n	80a52 <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   809f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809f6:	4632      	mov	r2, r6
   809f8:	f240 73e9 	movw	r3, #2025	; 0x7e9
   809fc:	f2c0 0308 	movt	r3, #8
   80a00:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80a02:	4638      	mov	r0, r7
   80a04:	4631      	mov	r1, r6
   80a06:	f005 0201 	and.w	r2, r5, #1
   80a0a:	f240 73dd 	movw	r3, #2013	; 0x7dd
   80a0e:	f2c0 0308 	movt	r3, #8
   80a12:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a14:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80a18:	e033      	b.n	80a82 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a1e:	4632      	mov	r2, r6
   80a20:	f240 73e9 	movw	r3, #2025	; 0x7e9
   80a24:	f2c0 0308 	movt	r3, #8
   80a28:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80a2a:	4638      	mov	r0, r7
   80a2c:	4631      	mov	r1, r6
   80a2e:	f005 0201 	and.w	r2, r5, #1
   80a32:	f240 73dd 	movw	r3, #2013	; 0x7dd
   80a36:	f2c0 0308 	movt	r3, #8
   80a3a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a3c:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80a40:	e01f      	b.n	80a82 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a42:	f640 036d 	movw	r3, #2157	; 0x86d
   80a46:	f2c0 0308 	movt	r3, #8
   80a4a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a4c:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80a50:	e017      	b.n	80a82 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a52:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80a56:	f005 0001 	and.w	r0, r5, #1
   80a5a:	9000      	str	r0, [sp, #0]
   80a5c:	4638      	mov	r0, r7
   80a5e:	4631      	mov	r1, r6
   80a60:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a64:	bf14      	ite	ne
   80a66:	2200      	movne	r2, #0
   80a68:	2201      	moveq	r2, #1
   80a6a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a6e:	f640 0431 	movw	r4, #2097	; 0x831
   80a72:	f2c0 0408 	movt	r4, #8
   80a76:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a78:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a7c:	e001      	b.n	80a82 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   80a7e:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80a82:	b003      	add	sp, #12
   80a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a86:	bf00      	nop

00080a88 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a8a:	4604      	mov	r4, r0
   80a8c:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80a8e:	f640 03b9 	movw	r3, #2233	; 0x8b9
   80a92:	f2c0 0308 	movt	r3, #8
   80a96:	4798      	blx	r3
   80a98:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80a9a:	4620      	mov	r0, r4
   80a9c:	f640 01bd 	movw	r1, #2237	; 0x8bd
   80aa0:	f2c0 0108 	movt	r1, #8
   80aa4:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   80aa6:	4005      	ands	r5, r0
   80aa8:	d014      	beq.n	80ad4 <pio_handler_process+0x4c>
   80aaa:	4c0b      	ldr	r4, [pc, #44]	; (80ad8 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   80aac:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80aae:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   80ab2:	42b0      	cmp	r0, r6
   80ab4:	d10a      	bne.n	80acc <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80ab6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80aba:	4229      	tst	r1, r5
   80abc:	d006      	beq.n	80acc <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80abe:	6822      	ldr	r2, [r4, #0]
   80ac0:	4630      	mov	r0, r6
   80ac2:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80ac4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80ac8:	ea25 0503 	bic.w	r5, r5, r3
   80acc:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80ad0:	2d00      	cmp	r5, #0
   80ad2:	d1eb      	bne.n	80aac <pio_handler_process+0x24>
   80ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ad6:	bf00      	nop
   80ad8:	20070934 	.word	0x20070934

00080adc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80adc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80ade:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80ae2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ae6:	f04f 010b 	mov.w	r1, #11
   80aea:	f640 2389 	movw	r3, #2697	; 0xa89
   80aee:	f2c0 0308 	movt	r3, #8
   80af2:	4798      	blx	r3
   80af4:	bd08      	pop	{r3, pc}
   80af6:	bf00      	nop

00080af8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80af8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80afa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80afe:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80b02:	f04f 010c 	mov.w	r1, #12
   80b06:	f640 2389 	movw	r3, #2697	; 0xa89
   80b0a:	f2c0 0308 	movt	r3, #8
   80b0e:	4798      	blx	r3
   80b10:	bd08      	pop	{r3, pc}
   80b12:	bf00      	nop

00080b14 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80b14:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80b16:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80b1a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80b1e:	f04f 010d 	mov.w	r1, #13
   80b22:	f640 2389 	movw	r3, #2697	; 0xa89
   80b26:	f2c0 0308 	movt	r3, #8
   80b2a:	4798      	blx	r3
   80b2c:	bd08      	pop	{r3, pc}
   80b2e:	bf00      	nop

00080b30 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80b30:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80b32:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   80b36:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80b3a:	f04f 010e 	mov.w	r1, #14
   80b3e:	f640 2389 	movw	r3, #2697	; 0xa89
   80b42:	f2c0 0308 	movt	r3, #8
   80b46:	4798      	blx	r3
   80b48:	bd08      	pop	{r3, pc}
   80b4a:	bf00      	nop

00080b4c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b50:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b56:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80b5a:	4308      	orrs	r0, r1
   80b5c:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b60:	f010 0f08 	tst.w	r0, #8
   80b64:	d007      	beq.n	80b76 <pmc_switch_mck_to_pllack+0x2a>
   80b66:	e010      	b.n	80b8a <pmc_switch_mck_to_pllack+0x3e>
   80b68:	f100 33ff 	add.w	r3, r0, #4294967295
   80b6c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80b6e:	f010 0f08 	tst.w	r0, #8
   80b72:	d038      	beq.n	80be6 <pmc_switch_mck_to_pllack+0x9a>
   80b74:	e009      	b.n	80b8a <pmc_switch_mck_to_pllack+0x3e>
   80b76:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80b7a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80b7e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80b82:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80b84:	f011 0f08 	tst.w	r1, #8
   80b88:	d0ee      	beq.n	80b68 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80b8e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80b92:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80b94:	f022 0303 	bic.w	r3, r2, #3
   80b98:	f043 0002 	orr.w	r0, r3, #2
   80b9c:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b9e:	6e89      	ldr	r1, [r1, #104]	; 0x68
   80ba0:	f011 0f08 	tst.w	r1, #8
   80ba4:	d009      	beq.n	80bba <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80ba6:	f04f 0000 	mov.w	r0, #0
   80baa:	4770      	bx	lr
   80bac:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80bb0:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80bb2:	f011 0f08 	tst.w	r1, #8
   80bb6:	d013      	beq.n	80be0 <pmc_switch_mck_to_pllack+0x94>
   80bb8:	e009      	b.n	80bce <pmc_switch_mck_to_pllack+0x82>
   80bba:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80bbe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80bc2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80bc6:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80bc8:	f010 0f08 	tst.w	r0, #8
   80bcc:	d0ee      	beq.n	80bac <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80bce:	f04f 0000 	mov.w	r0, #0
   80bd2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80bd4:	f04f 0001 	mov.w	r0, #1
   80bd8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80bda:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80bde:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80be0:	3b01      	subs	r3, #1
   80be2:	d1f0      	bne.n	80bc6 <pmc_switch_mck_to_pllack+0x7a>
   80be4:	e7f9      	b.n	80bda <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80be6:	1e58      	subs	r0, r3, #1
   80be8:	d1cb      	bne.n	80b82 <pmc_switch_mck_to_pllack+0x36>
   80bea:	e7f3      	b.n	80bd4 <pmc_switch_mck_to_pllack+0x88>

00080bec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80bec:	b188      	cbz	r0, 80c12 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80bf2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80bf6:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80bf8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80bfc:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80c00:	4002      	ands	r2, r0
   80c02:	f04f 0302 	mov.w	r3, #2
   80c06:	f2c0 1337 	movt	r3, #311	; 0x137
   80c0a:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80c0e:	6208      	str	r0, [r1, #32]
   80c10:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c16:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c1a:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80c1c:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80c20:	f020 0203 	bic.w	r2, r0, #3
   80c24:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80c28:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80c2c:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80c30:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c34:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80c36:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80c3a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80c3e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c40:	f013 0f01 	tst.w	r3, #1
   80c44:	d0fb      	beq.n	80c3e <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80c46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80c4a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80c4e:	6a08      	ldr	r0, [r1, #32]
   80c50:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80c54:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80c58:	620b      	str	r3, [r1, #32]
   80c5a:	4770      	bx	lr

00080c5c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c60:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c64:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c66:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80c6a:	4770      	bx	lr

00080c6c <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c70:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c78:	629a      	str	r2, [r3, #40]	; 0x28
   80c7a:	4770      	bx	lr

00080c7c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c80:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c84:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c86:	f000 0002 	and.w	r0, r0, #2
   80c8a:	4770      	bx	lr

00080c8c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c8c:	282c      	cmp	r0, #44	; 0x2c
   80c8e:	d835      	bhi.n	80cfc <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   80c90:	281f      	cmp	r0, #31
   80c92:	d817      	bhi.n	80cc4 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c94:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80c98:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80c9c:	698a      	ldr	r2, [r1, #24]
   80c9e:	f04f 0301 	mov.w	r3, #1
   80ca2:	fa03 f300 	lsl.w	r3, r3, r0
   80ca6:	401a      	ands	r2, r3
   80ca8:	4293      	cmp	r3, r2
   80caa:	d02a      	beq.n	80d02 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   80cac:	f04f 0101 	mov.w	r1, #1
   80cb0:	fa01 f000 	lsl.w	r0, r1, r0
   80cb4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80cb8:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80cbc:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80cbe:	f04f 0000 	mov.w	r0, #0
   80cc2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80cc4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80cc8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ccc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   80cd0:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80cd4:	f04f 0101 	mov.w	r1, #1
   80cd8:	fa01 f100 	lsl.w	r1, r1, r0
   80cdc:	400a      	ands	r2, r1
   80cde:	4291      	cmp	r1, r2
   80ce0:	d012      	beq.n	80d08 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   80ce2:	f04f 0301 	mov.w	r3, #1
   80ce6:	fa03 f000 	lsl.w	r0, r3, r0
   80cea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80cee:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80cf2:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80cf6:	f04f 0000 	mov.w	r0, #0
   80cfa:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80cfc:	f04f 0001 	mov.w	r0, #1
   80d00:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d02:	f04f 0000 	mov.w	r0, #0
   80d06:	4770      	bx	lr
   80d08:	f04f 0000 	mov.w	r0, #0
}
   80d0c:	4770      	bx	lr
   80d0e:	bf00      	nop

00080d10 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for SAM3N)
 * or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80d10:	b4f0      	push	{r4, r5, r6, r7}
   80d12:	b08c      	sub	sp, #48	; 0x30
   80d14:	4606      	mov	r6, r0
   80d16:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80d18:	ac01      	add	r4, sp, #4
   80d1a:	f246 25b4 	movw	r5, #25268	; 0x62b4
   80d1e:	f2c0 0508 	movt	r5, #8
   80d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80d2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80d2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80d32:	9b01      	ldr	r3, [sp, #4]
   80d34:	fbb7 f0f3 	udiv	r0, r7, r3
   80d38:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80d3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80d40:	d952      	bls.n	80de8 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80d42:	9902      	ldr	r1, [sp, #8]
   80d44:	fbb7 f2f1 	udiv	r2, r7, r1
   80d48:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80d4c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80d50:	d94f      	bls.n	80df2 <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80d52:	9b03      	ldr	r3, [sp, #12]
   80d54:	fbb7 f0f3 	udiv	r0, r7, r3
   80d58:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80d5c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80d60:	d94a      	bls.n	80df8 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80d62:	9904      	ldr	r1, [sp, #16]
   80d64:	fbb7 f2f1 	udiv	r2, r7, r1
   80d68:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80d6c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80d70:	d945      	bls.n	80dfe <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80d72:	9b05      	ldr	r3, [sp, #20]
   80d74:	fbb7 f0f3 	udiv	r0, r7, r3
   80d78:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80d7c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80d80:	d940      	bls.n	80e04 <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80d82:	9906      	ldr	r1, [sp, #24]
   80d84:	fbb7 f2f1 	udiv	r2, r7, r1
   80d88:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80d8c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80d90:	d93b      	bls.n	80e0a <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80d92:	9b07      	ldr	r3, [sp, #28]
   80d94:	fbb7 f0f3 	udiv	r0, r7, r3
   80d98:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80d9c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80da0:	d936      	bls.n	80e10 <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80da2:	9908      	ldr	r1, [sp, #32]
   80da4:	fbb7 f2f1 	udiv	r2, r7, r1
   80da8:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80dac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80db0:	d931      	bls.n	80e16 <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   80db4:	fbb7 f0f3 	udiv	r0, r7, r3
   80db8:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80dbc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80dc0:	d92c      	bls.n	80e1c <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80dc2:	990a      	ldr	r1, [sp, #40]	; 0x28
   80dc4:	fbb7 f2f1 	udiv	r2, r7, r1
   80dc8:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80dcc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80dd0:	d927      	bls.n	80e22 <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80dd4:	fbb7 f0f3 	udiv	r0, r7, r3
   80dd8:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   80ddc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80de0:	d922      	bls.n	80e28 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80de2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80de6:	e022      	b.n	80e2e <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80de8:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   80dec:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   80df0:	e01d      	b.n	80e2e <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   80df2:	f04f 0201 	mov.w	r2, #1
   80df6:	e7f9      	b.n	80dec <pwm_clocks_generate+0xdc>
   80df8:	f04f 0202 	mov.w	r2, #2
   80dfc:	e7f6      	b.n	80dec <pwm_clocks_generate+0xdc>
   80dfe:	f04f 0203 	mov.w	r2, #3
   80e02:	e7f3      	b.n	80dec <pwm_clocks_generate+0xdc>
   80e04:	f04f 0204 	mov.w	r2, #4
   80e08:	e7f0      	b.n	80dec <pwm_clocks_generate+0xdc>
   80e0a:	f04f 0205 	mov.w	r2, #5
   80e0e:	e7ed      	b.n	80dec <pwm_clocks_generate+0xdc>
   80e10:	f04f 0206 	mov.w	r2, #6
   80e14:	e7ea      	b.n	80dec <pwm_clocks_generate+0xdc>
   80e16:	f04f 0207 	mov.w	r2, #7
   80e1a:	e7e7      	b.n	80dec <pwm_clocks_generate+0xdc>
   80e1c:	f04f 0208 	mov.w	r2, #8
   80e20:	e7e4      	b.n	80dec <pwm_clocks_generate+0xdc>
   80e22:	f04f 0209 	mov.w	r2, #9
   80e26:	e7e1      	b.n	80dec <pwm_clocks_generate+0xdc>
   80e28:	f04f 020a 	mov.w	r2, #10
   80e2c:	e7de      	b.n	80dec <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   80e2e:	b00c      	add	sp, #48	; 0x30
   80e30:	bcf0      	pop	{r4, r5, r6, r7}
   80e32:	4770      	bx	lr

00080e34 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80e34:	b570      	push	{r4, r5, r6, lr}
   80e36:	4606      	mov	r6, r0
   80e38:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80e3a:	6808      	ldr	r0, [r1, #0]
   80e3c:	b158      	cbz	r0, 80e56 <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80e3e:	6889      	ldr	r1, [r1, #8]
   80e40:	f640 5311 	movw	r3, #3345	; 0xd11
   80e44:	f2c0 0308 	movt	r3, #8
   80e48:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   80e4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   80e4e:	4288      	cmp	r0, r1
   80e50:	d014      	beq.n	80e7c <pwm_init+0x48>
			return result;
		}

		clock = result;
   80e52:	4605      	mov	r5, r0
   80e54:	e001      	b.n	80e5a <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80e56:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80e5a:	6860      	ldr	r0, [r4, #4]
   80e5c:	b158      	cbz	r0, 80e76 <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80e5e:	68a1      	ldr	r1, [r4, #8]
   80e60:	f640 5211 	movw	r2, #3345	; 0xd11
   80e64:	f2c0 0208 	movt	r2, #8
   80e68:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   80e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80e6e:	4298      	cmp	r0, r3
   80e70:	d004      	beq.n	80e7c <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   80e72:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if SAM3N
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80e76:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80e78:	f04f 0000 	mov.w	r0, #0
}
   80e7c:	bd70      	pop	{r4, r5, r6, pc}
   80e7e:	bf00      	nop

00080e80 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80e80:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80e82:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   80e84:	f04f 0201 	mov.w	r2, #1
   80e88:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80e8c:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   80e8e:	684c      	ldr	r4, [r1, #4]
   80e90:	f004 050f 	and.w	r5, r4, #15
   80e94:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80e96:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80e98:	4326      	orrs	r6, r4
   80e9a:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80e9c:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80ea0:	7d8c      	ldrb	r4, [r1, #22]
   80ea2:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80ea6:	7dce      	ldrb	r6, [r1, #23]
   80ea8:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80eac:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   80eae:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   80eb2:	f103 0510 	add.w	r5, r3, #16
   80eb6:	ea4f 1445 	mov.w	r4, r5, lsl #5
   80eba:	1905      	adds	r5, r0, r4
   80ebc:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80ebe:	68cc      	ldr	r4, [r1, #12]
   80ec0:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80ec2:	690c      	ldr	r4, [r1, #16]
   80ec4:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   80ec8:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80ecc:	7d8c      	ldrb	r4, [r1, #22]
   80ece:	b13c      	cbz	r4, 80ee0 <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80ed0:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80ed2:	8b4c      	ldrh	r4, [r1, #26]
   80ed4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80ed8:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   80edc:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   80ee0:	7fcd      	ldrb	r5, [r1, #31]
   80ee2:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   80ee6:	7f8c      	ldrb	r4, [r1, #30]
   80ee8:	fa04 f403 	lsl.w	r4, r4, r3
   80eec:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   80ef0:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   80ef2:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80ef6:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   80efa:	f891 4020 	ldrb.w	r4, [r1, #32]
   80efe:	fa04 f403 	lsl.w	r4, r4, r3
   80f02:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   80f06:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   80f08:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80f0c:	b11c      	cbz	r4, 80f16 <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   80f0e:	6a04      	ldr	r4, [r0, #32]
   80f10:	4314      	orrs	r4, r2
   80f12:	6204      	str	r4, [r0, #32]
   80f14:	e003      	b.n	80f1e <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80f16:	6a04      	ldr	r4, [r0, #32]
   80f18:	ea24 0402 	bic.w	r4, r4, r2
   80f1c:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80f1e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80f22:	2c01      	cmp	r4, #1
   80f24:	d103      	bne.n	80f2e <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80f26:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80f28:	4314      	orrs	r4, r2
   80f2a:	6684      	str	r4, [r0, #104]	; 0x68
   80f2c:	e006      	b.n	80f3c <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   80f2e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80f30:	2a00      	cmp	r2, #0
   80f32:	bf14      	ite	ne
   80f34:	2400      	movne	r4, #0
   80f36:	f004 0401 	andeq.w	r4, r4, #1
   80f3a:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80f3c:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80f40:	2c01      	cmp	r4, #1
   80f42:	d104      	bne.n	80f4e <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80f44:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80f46:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   80f4a:	6682      	str	r2, [r0, #104]	; 0x68
   80f4c:	e006      	b.n	80f5c <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   80f4e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80f50:	0412      	lsls	r2, r2, #16
   80f52:	bf14      	ite	ne
   80f54:	2200      	movne	r2, #0
   80f56:	f004 0201 	andeq.w	r2, r4, #1
   80f5a:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80f5c:	2b03      	cmp	r3, #3
   80f5e:	d80f      	bhi.n	80f80 <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80f60:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80f62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80f66:	f04f 02ff 	mov.w	r2, #255	; 0xff
   80f6a:	fa02 f203 	lsl.w	r2, r2, r3
   80f6e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80f72:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80f76:	fa01 f303 	lsl.w	r3, r1, r3
   80f7a:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80f7c:	66c2      	str	r2, [r0, #108]	; 0x6c
   80f7e:	e010      	b.n	80fa2 <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   80f80:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80f84:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80f86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80f8a:	f04f 02ff 	mov.w	r2, #255	; 0xff
   80f8e:	fa02 f203 	lsl.w	r2, r2, r3
   80f92:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80f96:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80f9a:	fa01 f303 	lsl.w	r3, r1, r3
   80f9e:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80fa0:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80fa2:	f04f 0000 	mov.w	r0, #0
   80fa6:	bc70      	pop	{r4, r5, r6}
   80fa8:	4770      	bx	lr
   80faa:	bf00      	nop

00080fac <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80fac:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80fae:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80fb0:	690b      	ldr	r3, [r1, #16]
   80fb2:	4293      	cmp	r3, r2
   80fb4:	d307      	bcc.n	80fc6 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80fb6:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80fb8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80fbc:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80fc0:	f04f 0000 	mov.w	r0, #0
   80fc4:	e001      	b.n	80fca <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80fc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80fca:	bc10      	pop	{r4}
   80fcc:	4770      	bx	lr
   80fce:	bf00      	nop

00080fd0 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80fd0:	f04f 0301 	mov.w	r3, #1
   80fd4:	fa03 f101 	lsl.w	r1, r3, r1
   80fd8:	6041      	str	r1, [r0, #4]
   80fda:	4770      	bx	lr

00080fdc <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80fdc:	f04f 0301 	mov.w	r3, #1
   80fe0:	fa03 f101 	lsl.w	r1, r3, r1
   80fe4:	6081      	str	r1, [r0, #8]
   80fe6:	4770      	bx	lr

00080fe8 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   80fe8:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80fea:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80fee:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80ff0:	f04f 0402 	mov.w	r4, #2
   80ff4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80ff6:	f04f 30ff 	mov.w	r0, #4294967295
   80ffa:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80ffc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80ffe:	605a      	str	r2, [r3, #4]
}
   81000:	bc10      	pop	{r4}
   81002:	4770      	bx	lr

00081004 <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   81004:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   81008:	4770      	bx	lr
   8100a:	bf00      	nop

0008100c <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8100c:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81010:	f04f 0302 	mov.w	r3, #2
   81014:	5043      	str	r3, [r0, r1]
   81016:	4770      	bx	lr

00081018 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81018:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8101a:	f04f 03ac 	mov.w	r3, #172	; 0xac
   8101e:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81020:	680a      	ldr	r2, [r1, #0]
   81022:	684c      	ldr	r4, [r1, #4]
   81024:	fbb2 f3f4 	udiv	r3, r2, r4
   81028:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8102c:	f103 34ff 	add.w	r4, r3, #4294967295
   81030:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81034:	4294      	cmp	r4, r2
   81036:	d80c      	bhi.n	81052 <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   81038:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8103a:	6889      	ldr	r1, [r1, #8]
   8103c:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8103e:	f240 2302 	movw	r3, #514	; 0x202
   81042:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81046:	f04f 0250 	mov.w	r2, #80	; 0x50
   8104a:	6002      	str	r2, [r0, #0]

	return 0;
   8104c:	f04f 0000 	mov.w	r0, #0
   81050:	e001      	b.n	81056 <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81052:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81056:	bc10      	pop	{r4}
   81058:	4770      	bx	lr
   8105a:	bf00      	nop

0008105c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8105c:	6943      	ldr	r3, [r0, #20]
   8105e:	f013 0f02 	tst.w	r3, #2
   81062:	d003      	beq.n	8106c <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81064:	61c1      	str	r1, [r0, #28]
	return 0;
   81066:	f04f 0000 	mov.w	r0, #0
   8106a:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8106c:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81070:	4770      	bx	lr
   81072:	bf00      	nop

00081074 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81074:	6943      	ldr	r3, [r0, #20]
   81076:	f013 0f01 	tst.w	r3, #1
   8107a:	d004      	beq.n	81086 <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8107c:	6980      	ldr	r0, [r0, #24]
   8107e:	7008      	strb	r0, [r1, #0]
	return 0;
   81080:	f04f 0000 	mov.w	r0, #0
   81084:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   81086:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8108a:	4770      	bx	lr

0008108c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8108c:	6943      	ldr	r3, [r0, #20]
   8108e:	f013 0f02 	tst.w	r3, #2
   81092:	d007      	beq.n	810a4 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81094:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   81098:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   8109c:	61c2      	str	r2, [r0, #28]
	return 0;
   8109e:	f04f 0000 	mov.w	r0, #0
   810a2:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   810a4:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   810a8:	4770      	bx	lr
   810aa:	bf00      	nop

000810ac <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   810ac:	6943      	ldr	r3, [r0, #20]
   810ae:	f013 0f01 	tst.w	r3, #1
   810b2:	d008      	beq.n	810c6 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   810b4:	6980      	ldr	r0, [r0, #24]
   810b6:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   810ba:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   810be:	600b      	str	r3, [r1, #0]

	return 0;
   810c0:	f04f 0000 	mov.w	r0, #0
   810c4:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   810c6:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   810ca:	4770      	bx	lr

000810cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   810cc:	e7fe      	b.n	810cc <Dummy_Handler>
   810ce:	bf00      	nop

000810d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   810d0:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   810d2:	f240 0300 	movw	r3, #0
   810d6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   810da:	f246 32b4 	movw	r2, #25524	; 0x63b4
   810de:	f2c0 0208 	movt	r2, #8
   810e2:	429a      	cmp	r2, r3
   810e4:	d003      	beq.n	810ee <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   810e6:	4840      	ldr	r0, [pc, #256]	; (811e8 <Reset_Handler+0x118>)
   810e8:	4940      	ldr	r1, [pc, #256]	; (811ec <Reset_Handler+0x11c>)
   810ea:	4281      	cmp	r1, r0
   810ec:	d304      	bcc.n	810f8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   810ee:	4b40      	ldr	r3, [pc, #256]	; (811f0 <Reset_Handler+0x120>)
   810f0:	4a40      	ldr	r2, [pc, #256]	; (811f4 <Reset_Handler+0x124>)
   810f2:	429a      	cmp	r2, r3
   810f4:	d325      	bcc.n	81142 <Reset_Handler+0x72>
   810f6:	e042      	b.n	8117e <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   810f8:	4d3f      	ldr	r5, [pc, #252]	; (811f8 <Reset_Handler+0x128>)
   810fa:	4c40      	ldr	r4, [pc, #256]	; (811fc <Reset_Handler+0x12c>)
   810fc:	1b63      	subs	r3, r4, r5
   810fe:	f023 0503 	bic.w	r5, r3, #3
   81102:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   81106:	f240 0200 	movw	r2, #0
   8110a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8110e:	f246 31b4 	movw	r1, #25524	; 0x63b4
   81112:	f2c0 0108 	movt	r1, #8
   81116:	f105 0004 	add.w	r0, r5, #4
   8111a:	f3c5 0480 	ubfx	r4, r5, #2, #1
   8111e:	585d      	ldr	r5, [r3, r1]
   81120:	509d      	str	r5, [r3, r2]
   81122:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81126:	4283      	cmp	r3, r0
   81128:	d155      	bne.n	811d6 <Reset_Handler+0x106>
   8112a:	e7e0      	b.n	810ee <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   8112c:	585d      	ldr	r5, [r3, r1]
   8112e:	509d      	str	r5, [r3, r2]
   81130:	f103 0304 	add.w	r3, r3, #4
   81134:	585c      	ldr	r4, [r3, r1]
   81136:	509c      	str	r4, [r3, r2]
   81138:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8113c:	4283      	cmp	r3, r0
   8113e:	d1f5      	bne.n	8112c <Reset_Handler+0x5c>
   81140:	e7d5      	b.n	810ee <Reset_Handler+0x1e>
   81142:	4d2f      	ldr	r5, [pc, #188]	; (81200 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   81144:	492f      	ldr	r1, [pc, #188]	; (81204 <Reset_Handler+0x134>)
   81146:	1b48      	subs	r0, r1, r5
   81148:	f020 0403 	bic.w	r4, r0, #3
   8114c:	f640 03e0 	movw	r3, #2272	; 0x8e0
   81150:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81154:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81156:	f04f 0100 	mov.w	r1, #0
   8115a:	1b50      	subs	r0, r2, r5
   8115c:	f1a0 0004 	sub.w	r0, r0, #4
   81160:	f3c0 0480 	ubfx	r4, r0, #2, #1
   81164:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81168:	4295      	cmp	r5, r2
   8116a:	d12d      	bne.n	811c8 <Reset_Handler+0xf8>
   8116c:	e007      	b.n	8117e <Reset_Handler+0xae>
   8116e:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   81172:	6069      	str	r1, [r5, #4]
   81174:	f105 0508 	add.w	r5, r5, #8
   81178:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8117a:	4295      	cmp	r5, r2
   8117c:	d1f7      	bne.n	8116e <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8117e:	f240 0500 	movw	r5, #0
   81182:	f2c0 0508 	movt	r5, #8
   81186:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   8118a:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   8118e:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   81192:	f2ce 0000 	movt	r0, #57344	; 0xe000
   81196:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81198:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   8119c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   811a0:	d207      	bcs.n	811b2 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   811a2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   811a6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   811aa:	689d      	ldr	r5, [r3, #8]
   811ac:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   811b0:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   811b2:	f643 21f9 	movw	r1, #15097	; 0x3af9
   811b6:	f2c0 0108 	movt	r1, #8
   811ba:	4788      	blx	r1

	/* Branch to main function */
	main();
   811bc:	f243 2041 	movw	r0, #12865	; 0x3241
   811c0:	f2c0 0008 	movt	r0, #8
   811c4:	4780      	blx	r0
   811c6:	e7fe      	b.n	811c6 <Reset_Handler+0xf6>
   811c8:	2c00      	cmp	r4, #0
   811ca:	d0d0      	beq.n	8116e <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   811cc:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   811d0:	4295      	cmp	r5, r2
   811d2:	d1cc      	bne.n	8116e <Reset_Handler+0x9e>
   811d4:	e7d3      	b.n	8117e <Reset_Handler+0xae>
   811d6:	2c00      	cmp	r4, #0
   811d8:	d0a8      	beq.n	8112c <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   811da:	585c      	ldr	r4, [r3, r1]
   811dc:	509c      	str	r4, [r3, r2]
   811de:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   811e2:	4283      	cmp	r3, r0
   811e4:	d1a2      	bne.n	8112c <Reset_Handler+0x5c>
   811e6:	e782      	b.n	810ee <Reset_Handler+0x1e>
   811e8:	200708e0 	.word	0x200708e0
   811ec:	20070000 	.word	0x20070000
   811f0:	2007ab58 	.word	0x2007ab58
   811f4:	200708e0 	.word	0x200708e0
   811f8:	20070004 	.word	0x20070004
   811fc:	200708e3 	.word	0x200708e3
   81200:	200708dc 	.word	0x200708dc
   81204:	2007ab53 	.word	0x2007ab53

00081208 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81208:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8120c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81210:	6b18      	ldr	r0, [r3, #48]	; 0x30
   81212:	f000 0103 	and.w	r1, r0, #3
   81216:	2903      	cmp	r1, #3
   81218:	f200 80b1 	bhi.w	8137e <SystemCoreClockUpdate+0x176>
   8121c:	e8df f001 	tbb	[pc, r1]
   81220:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81224:	f641 2010 	movw	r0, #6672	; 0x1a10
   81228:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8122c:	6941      	ldr	r1, [r0, #20]
   8122e:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81232:	f240 030c 	movw	r3, #12
   81236:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8123a:	bf14      	ite	ne
   8123c:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81240:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81244:	601a      	str	r2, [r3, #0]
   81246:	e09a      	b.n	8137e <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81248:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8124c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81250:	6a18      	ldr	r0, [r3, #32]
   81252:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   81256:	d009      	beq.n	8126c <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81258:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   8125c:	f2c0 03b7 	movt	r3, #183	; 0xb7
   81260:	f240 020c 	movw	r2, #12
   81264:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81268:	6013      	str	r3, [r2, #0]
   8126a:	e088      	b.n	8137e <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8126c:	f44f 6110 	mov.w	r1, #2304	; 0x900
   81270:	f2c0 013d 	movt	r1, #61	; 0x3d
   81274:	f240 020c 	movw	r2, #12
   81278:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8127c:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8127e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81282:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81286:	6a18      	ldr	r0, [r3, #32]
   81288:	f000 0170 	and.w	r1, r0, #112	; 0x70
   8128c:	2910      	cmp	r1, #16
   8128e:	d002      	beq.n	81296 <SystemCoreClockUpdate+0x8e>
   81290:	2920      	cmp	r1, #32
   81292:	d174      	bne.n	8137e <SystemCoreClockUpdate+0x176>
   81294:	e009      	b.n	812aa <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81296:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8129a:	f2c0 007a 	movt	r0, #122	; 0x7a
   8129e:	f240 010c 	movw	r1, #12
   812a2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   812a6:	6008      	str	r0, [r1, #0]
				break;
   812a8:	e069      	b.n	8137e <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   812aa:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   812ae:	f2c0 03b7 	movt	r3, #183	; 0xb7
   812b2:	f240 020c 	movw	r2, #12
   812b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812ba:	6013      	str	r3, [r2, #0]
				break;
   812bc:	e05f      	b.n	8137e <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   812be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   812c2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   812c6:	6a13      	ldr	r3, [r2, #32]
   812c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   812cc:	d009      	beq.n	812e2 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   812ce:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   812d2:	f2c0 01b7 	movt	r1, #183	; 0xb7
   812d6:	f240 020c 	movw	r2, #12
   812da:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812de:	6011      	str	r1, [r2, #0]
   812e0:	e027      	b.n	81332 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   812e2:	f44f 6010 	mov.w	r0, #2304	; 0x900
   812e6:	f2c0 003d 	movt	r0, #61	; 0x3d
   812ea:	f240 010c 	movw	r1, #12
   812ee:	f2c2 0107 	movt	r1, #8199	; 0x2007
   812f2:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   812f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   812f8:	f2c4 020e 	movt	r2, #16398	; 0x400e
   812fc:	6a13      	ldr	r3, [r2, #32]
   812fe:	f003 0070 	and.w	r0, r3, #112	; 0x70
   81302:	2810      	cmp	r0, #16
   81304:	d002      	beq.n	8130c <SystemCoreClockUpdate+0x104>
   81306:	2820      	cmp	r0, #32
   81308:	d113      	bne.n	81332 <SystemCoreClockUpdate+0x12a>
   8130a:	e009      	b.n	81320 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8130c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81310:	f2c0 037a 	movt	r3, #122	; 0x7a
   81314:	f240 000c 	movw	r0, #12
   81318:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8131c:	6003      	str	r3, [r0, #0]
				break;
   8131e:	e008      	b.n	81332 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81320:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   81324:	f2c0 01b7 	movt	r1, #183	; 0xb7
   81328:	f240 020c 	movw	r2, #12
   8132c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81330:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81332:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81336:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8133a:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8133c:	f000 0103 	and.w	r1, r0, #3
   81340:	2902      	cmp	r1, #2
   81342:	d113      	bne.n	8136c <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81344:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   81348:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8134c:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8134e:	6a89      	ldr	r1, [r1, #40]	; 0x28
   81350:	f240 030c 	movw	r3, #12
   81354:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81358:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8135c:	681a      	ldr	r2, [r3, #0]
   8135e:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81362:	b2c9      	uxtb	r1, r1
   81364:	fbb0 f2f1 	udiv	r2, r0, r1
   81368:	601a      	str	r2, [r3, #0]
   8136a:	e008      	b.n	8137e <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8136c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   81370:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   81374:	f240 020c 	movw	r2, #12
   81378:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8137c:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8137e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   81382:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81386:	6b10      	ldr	r0, [r2, #48]	; 0x30
   81388:	f000 0170 	and.w	r1, r0, #112	; 0x70
   8138c:	2970      	cmp	r1, #112	; 0x70
   8138e:	d10e      	bne.n	813ae <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   81390:	f240 030c 	movw	r3, #12
   81394:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81398:	6818      	ldr	r0, [r3, #0]
   8139a:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   8139e:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   813a2:	fba2 0100 	umull	r0, r1, r2, r0
   813a6:	ea4f 0051 	mov.w	r0, r1, lsr #1
   813aa:	6018      	str	r0, [r3, #0]
   813ac:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   813ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   813b2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   813b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   813b8:	f240 000c 	movw	r0, #12
   813bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813c0:	f3c2 1102 	ubfx	r1, r2, #4, #3
   813c4:	6803      	ldr	r3, [r0, #0]
   813c6:	fa23 f301 	lsr.w	r3, r3, r1
   813ca:	6003      	str	r3, [r0, #0]
   813cc:	4770      	bx	lr
   813ce:	bf00      	nop

000813d0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   813d0:	f245 239f 	movw	r3, #21151	; 0x529f
   813d4:	f2c0 1357 	movt	r3, #343	; 0x157
   813d8:	4298      	cmp	r0, r3
   813da:	d80c      	bhi.n	813f6 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   813dc:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   813e0:	f2c4 000e 	movt	r0, #16398	; 0x400e
   813e4:	f04f 0100 	mov.w	r1, #0
   813e8:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   813ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   813ee:	f2c4 030e 	movt	r3, #16398	; 0x400e
   813f2:	6019      	str	r1, [r3, #0]
   813f4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   813f6:	f64c 417f 	movw	r1, #52351	; 0xcc7f
   813fa:	f2c0 2106 	movt	r1, #518	; 0x206
   813fe:	4288      	cmp	r0, r1
   81400:	d80c      	bhi.n	8141c <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   81402:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   81406:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8140a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8140e:	6019      	str	r1, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81410:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   81414:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81418:	6011      	str	r1, [r2, #0]
   8141a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   8141c:	f24b 733f 	movw	r3, #46911	; 0xb73f
   81420:	f2c0 3328 	movt	r3, #808	; 0x328
   81424:	4298      	cmp	r0, r3
   81426:	d80c      	bhi.n	81442 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81428:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   8142c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81430:	f44f 7200 	mov.w	r2, #512	; 0x200
   81434:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   81436:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   8143a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8143e:	6002      	str	r2, [r0, #0]
   81440:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   81442:	f642 717f 	movw	r1, #12159	; 0x2f7f
   81446:	f2c0 41a6 	movt	r1, #1190	; 0x4a6
   8144a:	4288      	cmp	r0, r1
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   8144c:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   81450:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81454:	bf94      	ite	ls
   81456:	f44f 7240 	movls.w	r2, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8145a:	f44f 6280 	movhi.w	r2, #1024	; 0x400
   8145e:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   81460:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   81464:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81468:	601a      	str	r2, [r3, #0]
   8146a:	4770      	bx	lr

0008146c <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   8146c:	f640 1398 	movw	r3, #2456	; 0x998
   81470:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81474:	6819      	ldr	r1, [r3, #0]
   81476:	b941      	cbnz	r1, 8148a <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   81478:	f640 1398 	movw	r3, #2456	; 0x998
   8147c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81480:	f64c 3258 	movw	r2, #52056	; 0xcb58
   81484:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81488:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8148a:	f640 1198 	movw	r1, #2456	; 0x998
   8148e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81492:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   81494:	1818      	adds	r0, r3, r0
   81496:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   81498:	4618      	mov	r0, r3
   8149a:	4770      	bx	lr

0008149c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8149c:	f04f 30ff 	mov.w	r0, #4294967295
   814a0:	4770      	bx	lr
   814a2:	bf00      	nop

000814a4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   814a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   814a8:	604b      	str	r3, [r1, #4]

	return 0;
}
   814aa:	f04f 0000 	mov.w	r0, #0
   814ae:	4770      	bx	lr

000814b0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   814b0:	f04f 0001 	mov.w	r0, #1
   814b4:	4770      	bx	lr
   814b6:	bf00      	nop

000814b8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   814b8:	f04f 0000 	mov.w	r0, #0
   814bc:	4770      	bx	lr
   814be:	bf00      	nop

000814c0 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   814c0:	f100 0308 	add.w	r3, r0, #8
   814c4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   814c6:	f04f 32ff 	mov.w	r2, #4294967295
   814ca:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   814cc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   814ce:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   814d0:	f04f 0100 	mov.w	r1, #0
   814d4:	6001      	str	r1, [r0, #0]
   814d6:	4770      	bx	lr

000814d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   814d8:	f04f 0300 	mov.w	r3, #0
   814dc:	6103      	str	r3, [r0, #16]
   814de:	4770      	bx	lr

000814e0 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   814e0:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   814e2:	685a      	ldr	r2, [r3, #4]
   814e4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   814e6:	6842      	ldr	r2, [r0, #4]
   814e8:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   814ea:	685a      	ldr	r2, [r3, #4]
   814ec:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   814ee:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   814f0:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   814f2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   814f4:	6801      	ldr	r1, [r0, #0]
   814f6:	f101 0101 	add.w	r1, r1, #1
   814fa:	6001      	str	r1, [r0, #0]
   814fc:	4770      	bx	lr
   814fe:	bf00      	nop

00081500 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   81500:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   81502:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   81504:	f1b4 3fff 	cmp.w	r4, #4294967295
   81508:	d101      	bne.n	8150e <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   8150a:	6903      	ldr	r3, [r0, #16]
   8150c:	e00a      	b.n	81524 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8150e:	f100 0308 	add.w	r3, r0, #8
   81512:	68c2      	ldr	r2, [r0, #12]
   81514:	6812      	ldr	r2, [r2, #0]
   81516:	4294      	cmp	r4, r2
   81518:	d304      	bcc.n	81524 <vListInsert+0x24>
   8151a:	685b      	ldr	r3, [r3, #4]
   8151c:	685a      	ldr	r2, [r3, #4]
   8151e:	6812      	ldr	r2, [r2, #0]
   81520:	4294      	cmp	r4, r2
   81522:	d2fa      	bcs.n	8151a <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   81524:	685a      	ldr	r2, [r3, #4]
   81526:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81528:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8152a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8152c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8152e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81530:	6801      	ldr	r1, [r0, #0]
   81532:	f101 0101 	add.w	r1, r1, #1
   81536:	6001      	str	r1, [r0, #0]
}
   81538:	bc10      	pop	{r4}
   8153a:	4770      	bx	lr

0008153c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8153c:	6843      	ldr	r3, [r0, #4]
   8153e:	6882      	ldr	r2, [r0, #8]
   81540:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81542:	6881      	ldr	r1, [r0, #8]
   81544:	6843      	ldr	r3, [r0, #4]
   81546:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81548:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8154a:	684a      	ldr	r2, [r1, #4]
   8154c:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8154e:	bf04      	itt	eq
   81550:	6882      	ldreq	r2, [r0, #8]
   81552:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81554:	f04f 0300 	mov.w	r3, #0
   81558:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8155a:	6808      	ldr	r0, [r1, #0]
   8155c:	f100 32ff 	add.w	r2, r0, #4294967295
   81560:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   81562:	6808      	ldr	r0, [r1, #0]
}
   81564:	4770      	bx	lr
   81566:	bf00      	nop

00081568 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81568:	4803      	ldr	r0, [pc, #12]	; (81578 <prvPortStartFirstTask+0x10>)
   8156a:	6800      	ldr	r0, [r0, #0]
   8156c:	6800      	ldr	r0, [r0, #0]
   8156e:	f380 8808 	msr	MSP, r0
   81572:	b662      	cpsie	i
   81574:	df00      	svc	0
   81576:	bf00      	nop
   81578:	e000ed08 	.word	0xe000ed08

0008157c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8157c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81580:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   81584:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   81588:	f04f 0100 	mov.w	r1, #0
   8158c:	f840 1c0c 	str.w	r1, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   81590:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   81594:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
   81598:	4770      	bx	lr
   8159a:	bf00      	nop

0008159c <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   8159c:	4b06      	ldr	r3, [pc, #24]	; (815b8 <pxCurrentTCBConst2>)
   8159e:	6819      	ldr	r1, [r3, #0]
   815a0:	6808      	ldr	r0, [r1, #0]
   815a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   815a6:	f380 8809 	msr	PSP, r0
   815aa:	f04f 0000 	mov.w	r0, #0
   815ae:	f380 8811 	msr	BASEPRI, r0
   815b2:	f04e 0e0d 	orr.w	lr, lr, #13
   815b6:	4770      	bx	lr

000815b8 <pxCurrentTCBConst2>:
   815b8:	2007aa64 	.word	0x2007aa64

000815bc <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   815bc:	f64e 5304 	movw	r3, #60676	; 0xed04
   815c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
   815c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   815c8:	601a      	str	r2, [r3, #0]
   815ca:	4770      	bx	lr

000815cc <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   815cc:	f3ef 8011 	mrs	r0, BASEPRI
   815d0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   815d4:	f381 8811 	msr	BASEPRI, r1
   815d8:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   815da:	f04f 0000 	mov.w	r0, #0
   815de:	bf00      	nop

000815e0 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   815e0:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   815e2:	f241 53cd 	movw	r3, #5581	; 0x15cd
   815e6:	f2c0 0308 	movt	r3, #8
   815ea:	4798      	blx	r3
	uxCriticalNesting++;
   815ec:	f240 0010 	movw	r0, #16
   815f0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   815f4:	6802      	ldr	r2, [r0, #0]
   815f6:	f102 0201 	add.w	r2, r2, #1
   815fa:	6002      	str	r2, [r0, #0]
   815fc:	bd08      	pop	{r3, pc}
   815fe:	bf00      	nop

00081600 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81600:	f380 8811 	msr	BASEPRI, r0
   81604:	4770      	bx	lr
   81606:	bf00      	nop

00081608 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81608:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   8160a:	f240 0210 	movw	r2, #16
   8160e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81612:	6813      	ldr	r3, [r2, #0]
   81614:	f103 30ff 	add.w	r0, r3, #4294967295
   81618:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
   8161a:	b930      	cbnz	r0, 8162a <vPortExitCritical+0x22>
	{
		portENABLE_INTERRUPTS();
   8161c:	f04f 0000 	mov.w	r0, #0
   81620:	f241 6101 	movw	r1, #5633	; 0x1601
   81624:	f2c0 0108 	movt	r1, #8
   81628:	4788      	blx	r1
   8162a:	bd08      	pop	{r3, pc}

0008162c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8162c:	f3ef 8009 	mrs	r0, PSP
   81630:	4b0c      	ldr	r3, [pc, #48]	; (81664 <pxCurrentTCBConst>)
   81632:	681a      	ldr	r2, [r3, #0]
   81634:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81638:	6010      	str	r0, [r2, #0]
   8163a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8163e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81642:	f380 8811 	msr	BASEPRI, r0
   81646:	f001 f877 	bl	82738 <vTaskSwitchContext>
   8164a:	f04f 0000 	mov.w	r0, #0
   8164e:	f380 8811 	msr	BASEPRI, r0
   81652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81656:	6819      	ldr	r1, [r3, #0]
   81658:	6808      	ldr	r0, [r1, #0]
   8165a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8165e:	f380 8809 	msr	PSP, r0
   81662:	4770      	bx	lr

00081664 <pxCurrentTCBConst>:
   81664:	2007aa64 	.word	0x2007aa64

00081668 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81668:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8166a:	f64e 5304 	movw	r3, #60676	; 0xed04
   8166e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81676:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81678:	f241 50cd 	movw	r0, #5581	; 0x15cd
   8167c:	f2c0 0008 	movt	r0, #8
   81680:	4780      	blx	r0
	{
		vTaskIncrementTick();
   81682:	f242 3109 	movw	r1, #8969	; 0x2309
   81686:	f2c0 0108 	movt	r1, #8
   8168a:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8168c:	f04f 0000 	mov.w	r0, #0
   81690:	f241 6301 	movw	r3, #5633	; 0x1601
   81694:	f2c0 0308 	movt	r3, #8
   81698:	4798      	blx	r3
   8169a:	bd08      	pop	{r3, pc}

0008169c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   8169c:	f24e 0314 	movw	r3, #57364	; 0xe014
   816a0:	f2ce 0300 	movt	r3, #57344	; 0xe000
   816a4:	f644 021f 	movw	r2, #18463	; 0x481f
   816a8:	f2c0 0201 	movt	r2, #1
   816ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   816ae:	f24e 0010 	movw	r0, #57360	; 0xe010
   816b2:	f2ce 0000 	movt	r0, #57344	; 0xe000
   816b6:	f04f 0107 	mov.w	r1, #7
   816ba:	6001      	str	r1, [r0, #0]
   816bc:	4770      	bx	lr
   816be:	bf00      	nop

000816c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   816c0:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   816c2:	f64e 5320 	movw	r3, #60704	; 0xed20
   816c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   816ca:	681a      	ldr	r2, [r3, #0]
   816cc:	f442 0070 	orr.w	r0, r2, #15728640	; 0xf00000
   816d0:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   816d2:	6819      	ldr	r1, [r3, #0]
   816d4:	f041 4470 	orr.w	r4, r1, #4026531840	; 0xf0000000
   816d8:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   816da:	f241 639d 	movw	r3, #5789	; 0x169d
   816de:	f2c0 0308 	movt	r3, #8
   816e2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   816e4:	f04f 0400 	mov.w	r4, #0
   816e8:	f240 0210 	movw	r2, #16
   816ec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   816f0:	6014      	str	r4, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   816f2:	f241 5069 	movw	r0, #5481	; 0x1569
   816f6:	f2c0 0008 	movt	r0, #8
   816fa:	4780      	blx	r0

	/* Should not get here! */
	return 0;
}
   816fc:	4620      	mov	r0, r4
   816fe:	bd10      	pop	{r4, pc}

00081700 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   81700:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   81702:	f64a 12a4 	movw	r2, #43428	; 0xa9a4
   81706:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8170a:	e000      	b.n	8170e <prvInsertBlockIntoFreeList+0xe>
   8170c:	461a      	mov	r2, r3
   8170e:	6813      	ldr	r3, [r2, #0]
   81710:	4283      	cmp	r3, r0
   81712:	d3fb      	bcc.n	8170c <prvInsertBlockIntoFreeList+0xc>
   81714:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81716:	6854      	ldr	r4, [r2, #4]
   81718:	1915      	adds	r5, r2, r4
   8171a:	4285      	cmp	r5, r0
   8171c:	d103      	bne.n	81726 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8171e:	6868      	ldr	r0, [r5, #4]
   81720:	1904      	adds	r4, r0, r4
   81722:	6054      	str	r4, [r2, #4]
   81724:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81726:	6842      	ldr	r2, [r0, #4]
   81728:	1884      	adds	r4, r0, r2
   8172a:	42a3      	cmp	r3, r4
   8172c:	d10f      	bne.n	8174e <prvInsertBlockIntoFreeList+0x4e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8172e:	f64a 14a0 	movw	r4, #43424	; 0xa9a0
   81732:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81736:	6824      	ldr	r4, [r4, #0]
   81738:	429c      	cmp	r4, r3
   8173a:	d006      	beq.n	8174a <prvInsertBlockIntoFreeList+0x4a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   8173c:	685b      	ldr	r3, [r3, #4]
   8173e:	189a      	adds	r2, r3, r2
   81740:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81742:	680b      	ldr	r3, [r1, #0]
   81744:	681a      	ldr	r2, [r3, #0]
   81746:	6002      	str	r2, [r0, #0]
   81748:	e002      	b.n	81750 <prvInsertBlockIntoFreeList+0x50>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8174a:	6003      	str	r3, [r0, #0]
   8174c:	e000      	b.n	81750 <prvInsertBlockIntoFreeList+0x50>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   8174e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81750:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81752:	bf18      	it	ne
   81754:	6008      	strne	r0, [r1, #0]
	}
}
   81756:	bc30      	pop	{r4, r5}
   81758:	4770      	bx	lr
   8175a:	bf00      	nop

0008175c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   8175c:	b538      	push	{r3, r4, r5, lr}
   8175e:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81760:	f242 23d1 	movw	r3, #8913	; 0x22d1
   81764:	f2c0 0308 	movt	r3, #8
   81768:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   8176a:	f64a 10a0 	movw	r0, #43424	; 0xa9a0
   8176e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81772:	6801      	ldr	r1, [r0, #0]
   81774:	bb21      	cbnz	r1, 817c0 <pvPortMalloc+0x64>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   81776:	f64a 12a4 	movw	r2, #43428	; 0xa9a4
   8177a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8177e:	f640 13a0 	movw	r3, #2464	; 0x9a0
   81782:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81786:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81788:	f04f 0100 	mov.w	r1, #0
   8178c:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   8178e:	f503 421f 	add.w	r2, r3, #40704	; 0x9f00
   81792:	f102 00f0 	add.w	r0, r2, #240	; 0xf0
   81796:	f64a 15a0 	movw	r5, #43424	; 0xa9a0
   8179a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8179e:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   817a0:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
	pxEnd->pxNextFreeBlock = NULL;
   817a4:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   817a8:	f649 71f0 	movw	r1, #40944	; 0x9ff0
   817ac:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   817ae:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   817b0:	f240 0314 	movw	r3, #20
   817b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   817b8:	681a      	ldr	r2, [r3, #0]
   817ba:	f1a2 0210 	sub.w	r2, r2, #16
   817be:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   817c0:	2c00      	cmp	r4, #0
   817c2:	d03c      	beq.n	8183e <pvPortMalloc+0xe2>
		{
			xWantedSize += heapSTRUCT_SIZE;
   817c4:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   817c8:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   817cc:	bf1c      	itt	ne
   817ce:	f022 0207 	bicne.w	r2, r2, #7
   817d2:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   817d4:	f102 30ff 	add.w	r0, r2, #4294967295
   817d8:	f649 75fe 	movw	r5, #40958	; 0x9ffe
   817dc:	42a8      	cmp	r0, r5
   817de:	d831      	bhi.n	81844 <pvPortMalloc+0xe8>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   817e0:	f64a 11a4 	movw	r1, #43428	; 0xa9a4
   817e4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   817e8:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   817ea:	e001      	b.n	817f0 <pvPortMalloc+0x94>
   817ec:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   817ee:	4604      	mov	r4, r0
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   817f0:	6863      	ldr	r3, [r4, #4]
   817f2:	429a      	cmp	r2, r3
   817f4:	d902      	bls.n	817fc <pvPortMalloc+0xa0>
   817f6:	6820      	ldr	r0, [r4, #0]
   817f8:	2800      	cmp	r0, #0
   817fa:	d1f7      	bne.n	817ec <pvPortMalloc+0x90>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   817fc:	f64a 15a0 	movw	r5, #43424	; 0xa9a0
   81800:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81804:	682b      	ldr	r3, [r5, #0]
   81806:	429c      	cmp	r4, r3
   81808:	d01f      	beq.n	8184a <pvPortMalloc+0xee>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8180a:	680d      	ldr	r5, [r1, #0]
   8180c:	f105 0510 	add.w	r5, r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81810:	6820      	ldr	r0, [r4, #0]
   81812:	6008      	str	r0, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81814:	6861      	ldr	r1, [r4, #4]
   81816:	1a8b      	subs	r3, r1, r2
   81818:	2b20      	cmp	r3, #32
   8181a:	d907      	bls.n	8182c <pvPortMalloc+0xd0>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   8181c:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8181e:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81820:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81822:	f241 7201 	movw	r2, #5889	; 0x1701
   81826:	f2c0 0208 	movt	r2, #8
   8182a:	4790      	blx	r2
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8182c:	f240 0014 	movw	r0, #20
   81830:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81834:	6803      	ldr	r3, [r0, #0]
   81836:	6861      	ldr	r1, [r4, #4]
   81838:	1a5a      	subs	r2, r3, r1
   8183a:	6002      	str	r2, [r0, #0]
   8183c:	e007      	b.n	8184e <pvPortMalloc+0xf2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   8183e:	f04f 0500 	mov.w	r5, #0
   81842:	e004      	b.n	8184e <pvPortMalloc+0xf2>
   81844:	f04f 0500 	mov.w	r5, #0
   81848:	e001      	b.n	8184e <pvPortMalloc+0xf2>
   8184a:	f04f 0500 	mov.w	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   8184e:	f242 4099 	movw	r0, #9369	; 0x2499
   81852:	f2c0 0008 	movt	r0, #8
   81856:	4780      	blx	r0
		}
	}
	#endif

	return pvReturn;
}
   81858:	4628      	mov	r0, r5
   8185a:	bd38      	pop	{r3, r4, r5, pc}

0008185c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   8185c:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   8185e:	4604      	mov	r4, r0
   81860:	b1c8      	cbz	r0, 81896 <vPortFree+0x3a>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   81862:	f242 23d1 	movw	r3, #8913	; 0x22d1
   81866:	f2c0 0308 	movt	r3, #8
   8186a:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8186c:	f240 0014 	movw	r0, #20
   81870:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81874:	6801      	ldr	r1, [r0, #0]
   81876:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   8187a:	188b      	adds	r3, r1, r2
   8187c:	6003      	str	r3, [r0, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8187e:	f1a4 0010 	sub.w	r0, r4, #16
   81882:	f241 7101 	movw	r1, #5889	; 0x1701
   81886:	f2c0 0108 	movt	r1, #8
   8188a:	4788      	blx	r1
		}
		xTaskResumeAll();
   8188c:	f242 4099 	movw	r0, #9369	; 0x2499
   81890:	f2c0 0008 	movt	r0, #8
   81894:	4780      	blx	r0
   81896:	bd10      	pop	{r4, pc}

00081898 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8189a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   8189c:	f241 53e1 	movw	r3, #5601	; 0x15e1
   818a0:	f2c0 0308 	movt	r3, #8
   818a4:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   818a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   818a8:	2800      	cmp	r0, #0
   818aa:	dd1a      	ble.n	818e2 <prvUnlockQueue+0x4a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   818ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
   818ae:	b919      	cbnz	r1, 818b8 <prvUnlockQueue+0x20>
   818b0:	e017      	b.n	818e2 <prvUnlockQueue+0x4a>
   818b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   818b4:	b951      	cbnz	r1, 818cc <prvUnlockQueue+0x34>
   818b6:	e014      	b.n	818e2 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   818b8:	f104 0624 	add.w	r6, r4, #36	; 0x24
   818bc:	f642 05c1 	movw	r5, #10433	; 0x28c1
   818c0:	f2c0 0508 	movt	r5, #8
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   818c4:	f642 2745 	movw	r7, #10821	; 0x2a45
   818c8:	f2c0 0708 	movt	r7, #8
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   818cc:	4630      	mov	r0, r6
   818ce:	47a8      	blx	r5
   818d0:	b100      	cbz	r0, 818d4 <prvUnlockQueue+0x3c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   818d2:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   818d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   818d6:	f102 33ff 	add.w	r3, r2, #4294967295
   818da:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   818dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   818de:	2800      	cmp	r0, #0
   818e0:	dce7      	bgt.n	818b2 <prvUnlockQueue+0x1a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   818e2:	f04f 32ff 	mov.w	r2, #4294967295
   818e6:	64a2      	str	r2, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   818e8:	f241 6309 	movw	r3, #5641	; 0x1609
   818ec:	f2c0 0308 	movt	r3, #8
   818f0:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   818f2:	f241 50e1 	movw	r0, #5601	; 0x15e1
   818f6:	f2c0 0008 	movt	r0, #8
   818fa:	4780      	blx	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   818fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   818fe:	2900      	cmp	r1, #0
   81900:	dd1a      	ble.n	81938 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81902:	6922      	ldr	r2, [r4, #16]
   81904:	b91a      	cbnz	r2, 8190e <prvUnlockQueue+0x76>
   81906:	e017      	b.n	81938 <prvUnlockQueue+0xa0>
   81908:	6922      	ldr	r2, [r4, #16]
   8190a:	b952      	cbnz	r2, 81922 <prvUnlockQueue+0x8a>
   8190c:	e014      	b.n	81938 <prvUnlockQueue+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8190e:	f104 0610 	add.w	r6, r4, #16
   81912:	f642 05c1 	movw	r5, #10433	; 0x28c1
   81916:	f2c0 0508 	movt	r5, #8
				{
					vTaskMissedYield();
   8191a:	f642 2745 	movw	r7, #10821	; 0x2a45
   8191e:	f2c0 0708 	movt	r7, #8
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81922:	4630      	mov	r0, r6
   81924:	47a8      	blx	r5
   81926:	b100      	cbz	r0, 8192a <prvUnlockQueue+0x92>
				{
					vTaskMissedYield();
   81928:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8192a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8192c:	f103 30ff 	add.w	r0, r3, #4294967295
   81930:	6460      	str	r0, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81932:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81934:	2900      	cmp	r1, #0
   81936:	dce7      	bgt.n	81908 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81938:	f04f 33ff 	mov.w	r3, #4294967295
   8193c:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   8193e:	f241 6009 	movw	r0, #5641	; 0x1609
   81942:	f2c0 0008 	movt	r0, #8
   81946:	4780      	blx	r0
   81948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8194a:	bf00      	nop

0008194c <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   8194c:	b538      	push	{r3, r4, r5, lr}
   8194e:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81950:	6805      	ldr	r5, [r0, #0]
   81952:	b175      	cbz	r5, 81972 <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81954:	6c02      	ldr	r2, [r0, #64]	; 0x40
   81956:	68c4      	ldr	r4, [r0, #12]
   81958:	18a4      	adds	r4, r4, r2
   8195a:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   8195c:	6840      	ldr	r0, [r0, #4]
   8195e:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81960:	bf28      	it	cs
   81962:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81964:	4608      	mov	r0, r1
   81966:	68d9      	ldr	r1, [r3, #12]
   81968:	f643 3385 	movw	r3, #15237	; 0x3b85
   8196c:	f2c0 0308 	movt	r3, #8
   81970:	4798      	blx	r3
   81972:	bd38      	pop	{r3, r4, r5, pc}

00081974 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   81974:	b510      	push	{r4, lr}
   81976:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81978:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8197a:	b963      	cbnz	r3, 81996 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8197c:	6801      	ldr	r1, [r0, #0]
   8197e:	2900      	cmp	r1, #0
   81980:	d12e      	bne.n	819e0 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81982:	6840      	ldr	r0, [r0, #4]
   81984:	f642 3331 	movw	r3, #11057	; 0x2b31
   81988:	f2c0 0308 	movt	r3, #8
   8198c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8198e:	f04f 0000 	mov.w	r0, #0
   81992:	6060      	str	r0, [r4, #4]
   81994:	e024      	b.n	819e0 <prvCopyDataToQueue+0x6c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81996:	b982      	cbnz	r2, 819ba <prvCopyDataToQueue+0x46>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81998:	6880      	ldr	r0, [r0, #8]
   8199a:	461a      	mov	r2, r3
   8199c:	f643 3385 	movw	r3, #15237	; 0x3b85
   819a0:	f2c0 0308 	movt	r3, #8
   819a4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   819a6:	68a2      	ldr	r2, [r4, #8]
   819a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
   819aa:	1850      	adds	r0, r2, r1
   819ac:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   819ae:	6863      	ldr	r3, [r4, #4]
   819b0:	4298      	cmp	r0, r3
   819b2:	d315      	bcc.n	819e0 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   819b4:	6822      	ldr	r2, [r4, #0]
   819b6:	60a2      	str	r2, [r4, #8]
   819b8:	e012      	b.n	819e0 <prvCopyDataToQueue+0x6c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   819ba:	68c0      	ldr	r0, [r0, #12]
   819bc:	461a      	mov	r2, r3
   819be:	f643 3385 	movw	r3, #15237	; 0x3b85
   819c2:	f2c0 0308 	movt	r3, #8
   819c6:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   819c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   819ca:	f1c2 0000 	rsb	r0, r2, #0
   819ce:	68e1      	ldr	r1, [r4, #12]
   819d0:	180b      	adds	r3, r1, r0
   819d2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   819d4:	6822      	ldr	r2, [r4, #0]
   819d6:	4293      	cmp	r3, r2
   819d8:	d202      	bcs.n	819e0 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   819da:	6861      	ldr	r1, [r4, #4]
   819dc:	1808      	adds	r0, r1, r0
   819de:	60e0      	str	r0, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   819e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   819e2:	f102 0201 	add.w	r2, r2, #1
   819e6:	63a2      	str	r2, [r4, #56]	; 0x38
   819e8:	bd10      	pop	{r4, pc}
   819ea:	bf00      	nop

000819ec <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   819ec:	b538      	push	{r3, r4, r5, lr}
   819ee:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   819f0:	4604      	mov	r4, r0
   819f2:	b930      	cbnz	r0, 81a02 <xQueueGenericReset+0x16>
   819f4:	f241 54cd 	movw	r4, #5581	; 0x15cd
   819f8:	f2c0 0408 	movt	r4, #8
   819fc:	47a0      	blx	r4
   819fe:	bf00      	nop
   81a00:	e7fd      	b.n	819fe <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   81a02:	f241 53e1 	movw	r3, #5601	; 0x15e1
   81a06:	f2c0 0308 	movt	r3, #8
   81a0a:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81a0c:	6823      	ldr	r3, [r4, #0]
   81a0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81a10:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81a12:	fb00 3102 	mla	r1, r0, r2, r3
   81a16:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81a18:	f04f 0100 	mov.w	r1, #0
   81a1c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81a1e:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81a20:	f100 30ff 	add.w	r0, r0, #4294967295
   81a24:	fb02 3300 	mla	r3, r2, r0, r3
   81a28:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81a2a:	f04f 32ff 	mov.w	r2, #4294967295
   81a2e:	6462      	str	r2, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81a30:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81a32:	b985      	cbnz	r5, 81a56 <xQueueGenericReset+0x6a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81a34:	6921      	ldr	r1, [r4, #16]
   81a36:	b1c1      	cbz	r1, 81a6a <xQueueGenericReset+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81a38:	f104 0010 	add.w	r0, r4, #16
   81a3c:	f642 03c1 	movw	r3, #10433	; 0x28c1
   81a40:	f2c0 0308 	movt	r3, #8
   81a44:	4798      	blx	r3
   81a46:	2801      	cmp	r0, #1
   81a48:	d10f      	bne.n	81a6a <xQueueGenericReset+0x7e>
				{
					portYIELD_WITHIN_API();
   81a4a:	f241 50bd 	movw	r0, #5565	; 0x15bd
   81a4e:	f2c0 0008 	movt	r0, #8
   81a52:	4780      	blx	r0
   81a54:	e009      	b.n	81a6a <xQueueGenericReset+0x7e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81a56:	f104 0010 	add.w	r0, r4, #16
   81a5a:	f241 45c1 	movw	r5, #5313	; 0x14c1
   81a5e:	f2c0 0508 	movt	r5, #8
   81a62:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81a64:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81a68:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81a6a:	f241 6209 	movw	r2, #5641	; 0x1609
   81a6e:	f2c0 0208 	movt	r2, #8
   81a72:	4790      	blx	r2

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81a74:	f04f 0001 	mov.w	r0, #1
   81a78:	bd38      	pop	{r3, r4, r5, pc}
   81a7a:	bf00      	nop

00081a7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81a7e:	460d      	mov	r5, r1
   81a80:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81a82:	4606      	mov	r6, r0
   81a84:	b1e0      	cbz	r0, 81ac0 <xQueueGenericCreate+0x44>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81a86:	f04f 0050 	mov.w	r0, #80	; 0x50
   81a8a:	f241 735d 	movw	r3, #5981	; 0x175d
   81a8e:	f2c0 0308 	movt	r3, #8
   81a92:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81a94:	4604      	mov	r4, r0
   81a96:	b198      	cbz	r0, 81ac0 <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81a98:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81a9c:	f100 0001 	add.w	r0, r0, #1
   81aa0:	f241 715d 	movw	r1, #5981	; 0x175d
   81aa4:	f2c0 0108 	movt	r1, #8
   81aa8:	4788      	blx	r1
   81aaa:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81aac:	b970      	cbnz	r0, 81acc <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81aae:	4620      	mov	r0, r4
   81ab0:	f641 025d 	movw	r2, #6237	; 0x185d
   81ab4:	f2c0 0208 	movt	r2, #8
   81ab8:	4790      	blx	r2
   81aba:	e001      	b.n	81ac0 <xQueueGenericCreate+0x44>
			}
		}
	}

	configASSERT( xReturn );
   81abc:	bf00      	nop
   81abe:	e7fd      	b.n	81abc <xQueueGenericCreate+0x40>
   81ac0:	f241 50cd 	movw	r0, #5581	; 0x15cd
   81ac4:	f2c0 0008 	movt	r0, #8
   81ac8:	4780      	blx	r0
   81aca:	e7f7      	b.n	81abc <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81acc:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81ace:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81ad0:	4620      	mov	r0, r4
   81ad2:	f04f 0101 	mov.w	r1, #1
   81ad6:	f641 13ed 	movw	r3, #6637	; 0x19ed
   81ada:	f2c0 0308 	movt	r3, #8
   81ade:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81ae0:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81ae4:	4620      	mov	r0, r4
   81ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081ae8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81aec:	b085      	sub	sp, #20
   81aee:	468a      	mov	sl, r1
   81af0:	9201      	str	r2, [sp, #4]
   81af2:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81af4:	4604      	mov	r4, r0
   81af6:	b930      	cbnz	r0, 81b06 <xQueueGenericSend+0x1e>
   81af8:	f241 54cd 	movw	r4, #5581	; 0x15cd
   81afc:	f2c0 0408 	movt	r4, #8
   81b00:	47a0      	blx	r4
   81b02:	bf00      	nop
   81b04:	e7fd      	b.n	81b02 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81b06:	b941      	cbnz	r1, 81b1a <xQueueGenericSend+0x32>
   81b08:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81b0a:	b14b      	cbz	r3, 81b20 <xQueueGenericSend+0x38>
   81b0c:	f241 50cd 	movw	r0, #5581	; 0x15cd
   81b10:	f2c0 0008 	movt	r0, #8
   81b14:	4780      	blx	r0
   81b16:	bf00      	nop
   81b18:	e7fd      	b.n	81b16 <xQueueGenericSend+0x2e>
   81b1a:	f04f 0700 	mov.w	r7, #0
   81b1e:	e001      	b.n	81b24 <xQueueGenericSend+0x3c>
   81b20:	f04f 0700 	mov.w	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81b24:	f241 56e1 	movw	r6, #5601	; 0x15e1
   81b28:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81b2c:	f642 1b69 	movw	fp, #10601	; 0x2969
   81b30:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81b34:	f241 6509 	movw	r5, #5641	; 0x1609
   81b38:	f2c0 0508 	movt	r5, #8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81b3c:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81b3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81b40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   81b42:	428a      	cmp	r2, r1
   81b44:	d21f      	bcs.n	81b86 <xQueueGenericSend+0x9e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81b46:	4620      	mov	r0, r4
   81b48:	4651      	mov	r1, sl
   81b4a:	9a00      	ldr	r2, [sp, #0]
   81b4c:	f641 1375 	movw	r3, #6517	; 0x1975
   81b50:	f2c0 0308 	movt	r3, #8
   81b54:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81b56:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81b58:	b169      	cbz	r1, 81b76 <xQueueGenericSend+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81b5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81b5e:	f642 02c1 	movw	r2, #10433	; 0x28c1
   81b62:	f2c0 0208 	movt	r2, #8
   81b66:	4790      	blx	r2
   81b68:	2801      	cmp	r0, #1
   81b6a:	d104      	bne.n	81b76 <xQueueGenericSend+0x8e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81b6c:	f241 50bd 	movw	r0, #5565	; 0x15bd
   81b70:	f2c0 0008 	movt	r0, #8
   81b74:	4780      	blx	r0
					}
				}

				taskEXIT_CRITICAL();
   81b76:	f241 6309 	movw	r3, #5641	; 0x1609
   81b7a:	f2c0 0308 	movt	r3, #8
   81b7e:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81b80:	f04f 0001 	mov.w	r0, #1
   81b84:	e066      	b.n	81c54 <xQueueGenericSend+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81b86:	9b01      	ldr	r3, [sp, #4]
   81b88:	b93b      	cbnz	r3, 81b9a <xQueueGenericSend+0xb2>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81b8a:	f241 6209 	movw	r2, #5641	; 0x1609
   81b8e:	f2c0 0208 	movt	r2, #8
   81b92:	4790      	blx	r2

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81b94:	f04f 0000 	mov.w	r0, #0
   81b98:	e05c      	b.n	81c54 <xQueueGenericSend+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
   81b9a:	b91f      	cbnz	r7, 81ba4 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81b9c:	a802      	add	r0, sp, #8
   81b9e:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81ba0:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81ba4:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81ba6:	f242 20d1 	movw	r0, #8913	; 0x22d1
   81baa:	f2c0 0008 	movt	r0, #8
   81bae:	4780      	blx	r0
		prvLockQueue( pxQueue );
   81bb0:	47b0      	blx	r6
   81bb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   81bb4:	f1b2 3fff 	cmp.w	r2, #4294967295
   81bb8:	bf04      	itt	eq
   81bba:	2200      	moveq	r2, #0
   81bbc:	6462      	streq	r2, [r4, #68]	; 0x44
   81bbe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81bc0:	f1b1 3fff 	cmp.w	r1, #4294967295
   81bc4:	bf04      	itt	eq
   81bc6:	2100      	moveq	r1, #0
   81bc8:	64a1      	streq	r1, [r4, #72]	; 0x48
   81bca:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81bcc:	a802      	add	r0, sp, #8
   81bce:	a901      	add	r1, sp, #4
   81bd0:	f642 1399 	movw	r3, #10649	; 0x2999
   81bd4:	f2c0 0308 	movt	r3, #8
   81bd8:	4798      	blx	r3
   81bda:	bb70      	cbnz	r0, 81c3a <xQueueGenericSend+0x152>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81bdc:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81bde:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81be2:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81be6:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81be8:	45c1      	cmp	r9, r8
   81bea:	d11a      	bne.n	81c22 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81bec:	f104 0010 	add.w	r0, r4, #16
   81bf0:	9901      	ldr	r1, [sp, #4]
   81bf2:	f242 72f9 	movw	r2, #10233	; 0x27f9
   81bf6:	f2c0 0208 	movt	r2, #8
   81bfa:	4790      	blx	r2
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81bfc:	4620      	mov	r0, r4
   81bfe:	f641 0199 	movw	r1, #6297	; 0x1899
   81c02:	f2c0 0108 	movt	r1, #8
   81c06:	4788      	blx	r1
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81c08:	f242 4099 	movw	r0, #9369	; 0x2499
   81c0c:	f2c0 0008 	movt	r0, #8
   81c10:	4780      	blx	r0
   81c12:	2800      	cmp	r0, #0
   81c14:	d192      	bne.n	81b3c <xQueueGenericSend+0x54>
				{
					portYIELD_WITHIN_API();
   81c16:	f241 53bd 	movw	r3, #5565	; 0x15bd
   81c1a:	f2c0 0308 	movt	r3, #8
   81c1e:	4798      	blx	r3
   81c20:	e78c      	b.n	81b3c <xQueueGenericSend+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81c22:	4620      	mov	r0, r4
   81c24:	f641 0199 	movw	r1, #6297	; 0x1899
   81c28:	f2c0 0108 	movt	r1, #8
   81c2c:	4788      	blx	r1
				( void ) xTaskResumeAll();
   81c2e:	f242 4399 	movw	r3, #9369	; 0x2499
   81c32:	f2c0 0308 	movt	r3, #8
   81c36:	4798      	blx	r3
   81c38:	e780      	b.n	81b3c <xQueueGenericSend+0x54>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81c3a:	4620      	mov	r0, r4
   81c3c:	f641 0299 	movw	r2, #6297	; 0x1899
   81c40:	f2c0 0208 	movt	r2, #8
   81c44:	4790      	blx	r2
			( void ) xTaskResumeAll();
   81c46:	f242 4099 	movw	r0, #9369	; 0x2499
   81c4a:	f2c0 0008 	movt	r0, #8
   81c4e:	4780      	blx	r0

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81c50:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   81c54:	b005      	add	sp, #20
   81c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c5a:	bf00      	nop

00081c5c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c60:	460e      	mov	r6, r1
   81c62:	4615      	mov	r5, r2
   81c64:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81c66:	4604      	mov	r4, r0
   81c68:	b930      	cbnz	r0, 81c78 <xQueueGenericSendFromISR+0x1c>
   81c6a:	f241 55cd 	movw	r5, #5581	; 0x15cd
   81c6e:	f2c0 0508 	movt	r5, #8
   81c72:	47a8      	blx	r5
   81c74:	bf00      	nop
   81c76:	e7fd      	b.n	81c74 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81c78:	b941      	cbnz	r1, 81c8c <xQueueGenericSendFromISR+0x30>
   81c7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81c7c:	b133      	cbz	r3, 81c8c <xQueueGenericSendFromISR+0x30>
   81c7e:	f241 50cd 	movw	r0, #5581	; 0x15cd
   81c82:	f2c0 0008 	movt	r0, #8
   81c86:	4780      	blx	r0
   81c88:	bf00      	nop
   81c8a:	e7fd      	b.n	81c88 <xQueueGenericSendFromISR+0x2c>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81c8c:	f241 51cd 	movw	r1, #5581	; 0x15cd
   81c90:	f2c0 0108 	movt	r1, #8
   81c94:	4788      	blx	r1
   81c96:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81c98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81c9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81c9c:	429a      	cmp	r2, r3
   81c9e:	d221      	bcs.n	81ce4 <xQueueGenericSendFromISR+0x88>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81ca0:	4620      	mov	r0, r4
   81ca2:	4631      	mov	r1, r6
   81ca4:	4642      	mov	r2, r8
   81ca6:	f641 1375 	movw	r3, #6517	; 0x1975
   81caa:	f2c0 0308 	movt	r3, #8
   81cae:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81cb0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81cb2:	f1b0 3fff 	cmp.w	r0, #4294967295
   81cb6:	d10e      	bne.n	81cd6 <xQueueGenericSendFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81cb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   81cba:	b1b2      	cbz	r2, 81cea <xQueueGenericSendFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81cbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81cc0:	f642 04c1 	movw	r4, #10433	; 0x28c1
   81cc4:	f2c0 0408 	movt	r4, #8
   81cc8:	47a0      	blx	r4
   81cca:	b188      	cbz	r0, 81cf0 <xQueueGenericSendFromISR+0x94>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81ccc:	b19d      	cbz	r5, 81cf6 <xQueueGenericSendFromISR+0x9a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81cce:	f04f 0401 	mov.w	r4, #1
   81cd2:	602c      	str	r4, [r5, #0]
   81cd4:	e011      	b.n	81cfa <xQueueGenericSendFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81cd6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81cd8:	f101 0101 	add.w	r1, r1, #1
   81cdc:	64a1      	str	r1, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81cde:	f04f 0401 	mov.w	r4, #1
   81ce2:	e00a      	b.n	81cfa <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81ce4:	f04f 0400 	mov.w	r4, #0
   81ce8:	e007      	b.n	81cfa <xQueueGenericSendFromISR+0x9e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81cea:	f04f 0401 	mov.w	r4, #1
   81cee:	e004      	b.n	81cfa <xQueueGenericSendFromISR+0x9e>
   81cf0:	f04f 0401 	mov.w	r4, #1
   81cf4:	e001      	b.n	81cfa <xQueueGenericSendFromISR+0x9e>
   81cf6:	f04f 0401 	mov.w	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81cfa:	4638      	mov	r0, r7
   81cfc:	f241 6301 	movw	r3, #5633	; 0x1601
   81d00:	f2c0 0308 	movt	r3, #8
   81d04:	4798      	blx	r3

	return xReturn;
}
   81d06:	4620      	mov	r0, r4
   81d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081d0c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81d10:	b085      	sub	sp, #20
   81d12:	4689      	mov	r9, r1
   81d14:	9201      	str	r2, [sp, #4]
   81d16:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81d18:	4604      	mov	r4, r0
   81d1a:	b930      	cbnz	r0, 81d2a <xQueueGenericReceive+0x1e>
   81d1c:	f241 54cd 	movw	r4, #5581	; 0x15cd
   81d20:	f2c0 0408 	movt	r4, #8
   81d24:	47a0      	blx	r4
   81d26:	bf00      	nop
   81d28:	e7fd      	b.n	81d26 <xQueueGenericReceive+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81d2a:	b941      	cbnz	r1, 81d3e <xQueueGenericReceive+0x32>
   81d2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81d2e:	b14b      	cbz	r3, 81d44 <xQueueGenericReceive+0x38>
   81d30:	f241 50cd 	movw	r0, #5581	; 0x15cd
   81d34:	f2c0 0008 	movt	r0, #8
   81d38:	4780      	blx	r0
   81d3a:	bf00      	nop
   81d3c:	e7fd      	b.n	81d3a <xQueueGenericReceive+0x2e>
   81d3e:	f04f 0700 	mov.w	r7, #0
   81d42:	e001      	b.n	81d48 <xQueueGenericReceive+0x3c>
   81d44:	f04f 0700 	mov.w	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81d48:	f241 56e1 	movw	r6, #5601	; 0x15e1
   81d4c:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81d50:	f642 1b69 	movw	fp, #10601	; 0x2969
   81d54:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81d58:	f241 6509 	movw	r5, #5641	; 0x1609
   81d5c:	f2c0 0508 	movt	r5, #8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81d60:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81d62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   81d64:	2900      	cmp	r1, #0
   81d66:	d03f      	beq.n	81de8 <xQueueGenericReceive+0xdc>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81d68:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81d6a:	4620      	mov	r0, r4
   81d6c:	4649      	mov	r1, r9
   81d6e:	f641 134d 	movw	r3, #6477	; 0x194d
   81d72:	f2c0 0308 	movt	r3, #8
   81d76:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81d78:	f1ba 0f00 	cmp.w	sl, #0
   81d7c:	d11c      	bne.n	81db8 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81d80:	f103 30ff 	add.w	r0, r3, #4294967295
   81d84:	63a0      	str	r0, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81d86:	6821      	ldr	r1, [r4, #0]
   81d88:	b929      	cbnz	r1, 81d96 <xQueueGenericReceive+0x8a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81d8a:	f642 2255 	movw	r2, #10837	; 0x2a55
   81d8e:	f2c0 0208 	movt	r2, #8
   81d92:	4790      	blx	r2
   81d94:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81d96:	6923      	ldr	r3, [r4, #16]
   81d98:	b1f3      	cbz	r3, 81dd8 <xQueueGenericReceive+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81d9a:	f104 0010 	add.w	r0, r4, #16
   81d9e:	f642 01c1 	movw	r1, #10433	; 0x28c1
   81da2:	f2c0 0108 	movt	r1, #8
   81da6:	4788      	blx	r1
   81da8:	2801      	cmp	r0, #1
   81daa:	d115      	bne.n	81dd8 <xQueueGenericReceive+0xcc>
						{
							portYIELD_WITHIN_API();
   81dac:	f241 50bd 	movw	r0, #5565	; 0x15bd
   81db0:	f2c0 0008 	movt	r0, #8
   81db4:	4780      	blx	r0
   81db6:	e00f      	b.n	81dd8 <xQueueGenericReceive+0xcc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81db8:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   81dbc:	b160      	cbz	r0, 81dd8 <xQueueGenericReceive+0xcc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81dbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81dc2:	f642 01c1 	movw	r1, #10433	; 0x28c1
   81dc6:	f2c0 0108 	movt	r1, #8
   81dca:	4788      	blx	r1
   81dcc:	b120      	cbz	r0, 81dd8 <xQueueGenericReceive+0xcc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81dce:	f241 52bd 	movw	r2, #5565	; 0x15bd
   81dd2:	f2c0 0208 	movt	r2, #8
   81dd6:	4790      	blx	r2
						}
					}
				}

				taskEXIT_CRITICAL();
   81dd8:	f241 6209 	movw	r2, #5641	; 0x1609
   81ddc:	f2c0 0208 	movt	r2, #8
   81de0:	4790      	blx	r2
				return pdPASS;
   81de2:	f04f 0001 	mov.w	r0, #1
   81de6:	e071      	b.n	81ecc <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81de8:	9a01      	ldr	r2, [sp, #4]
   81dea:	b93a      	cbnz	r2, 81dfc <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81dec:	f241 6209 	movw	r2, #5641	; 0x1609
   81df0:	f2c0 0208 	movt	r2, #8
   81df4:	4790      	blx	r2
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81df6:	f04f 0000 	mov.w	r0, #0
   81dfa:	e067      	b.n	81ecc <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
   81dfc:	b91f      	cbnz	r7, 81e06 <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81dfe:	a802      	add	r0, sp, #8
   81e00:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81e02:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81e06:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81e08:	f242 23d1 	movw	r3, #8913	; 0x22d1
   81e0c:	f2c0 0308 	movt	r3, #8
   81e10:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81e12:	47b0      	blx	r6
   81e14:	6c60      	ldr	r0, [r4, #68]	; 0x44
   81e16:	f1b0 3fff 	cmp.w	r0, #4294967295
   81e1a:	bf04      	itt	eq
   81e1c:	2000      	moveq	r0, #0
   81e1e:	6460      	streq	r0, [r4, #68]	; 0x44
   81e20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81e22:	f1b1 3fff 	cmp.w	r1, #4294967295
   81e26:	bf04      	itt	eq
   81e28:	2100      	moveq	r1, #0
   81e2a:	64a1      	streq	r1, [r4, #72]	; 0x48
   81e2c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81e2e:	a802      	add	r0, sp, #8
   81e30:	a901      	add	r1, sp, #4
   81e32:	f642 1299 	movw	r2, #10649	; 0x2999
   81e36:	f2c0 0208 	movt	r2, #8
   81e3a:	4790      	blx	r2
   81e3c:	2800      	cmp	r0, #0
   81e3e:	d138      	bne.n	81eb2 <xQueueGenericReceive+0x1a6>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81e40:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81e42:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81e46:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81e48:	f1b8 0f00 	cmp.w	r8, #0
   81e4c:	d125      	bne.n	81e9a <xQueueGenericReceive+0x18e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81e4e:	6823      	ldr	r3, [r4, #0]
   81e50:	b93b      	cbnz	r3, 81e62 <xQueueGenericReceive+0x156>
					{
						portENTER_CRITICAL();
   81e52:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81e54:	6860      	ldr	r0, [r4, #4]
   81e56:	f642 2189 	movw	r1, #10889	; 0x2a89
   81e5a:	f2c0 0108 	movt	r1, #8
   81e5e:	4788      	blx	r1
						}
						portEXIT_CRITICAL();
   81e60:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81e62:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81e66:	9901      	ldr	r1, [sp, #4]
   81e68:	f242 72f9 	movw	r2, #10233	; 0x27f9
   81e6c:	f2c0 0208 	movt	r2, #8
   81e70:	4790      	blx	r2
				prvUnlockQueue( pxQueue );
   81e72:	4620      	mov	r0, r4
   81e74:	f641 0399 	movw	r3, #6297	; 0x1899
   81e78:	f2c0 0308 	movt	r3, #8
   81e7c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81e7e:	f242 4099 	movw	r0, #9369	; 0x2499
   81e82:	f2c0 0008 	movt	r0, #8
   81e86:	4780      	blx	r0
   81e88:	2800      	cmp	r0, #0
   81e8a:	f47f af69 	bne.w	81d60 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
   81e8e:	f241 51bd 	movw	r1, #5565	; 0x15bd
   81e92:	f2c0 0108 	movt	r1, #8
   81e96:	4788      	blx	r1
   81e98:	e762      	b.n	81d60 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81e9a:	4620      	mov	r0, r4
   81e9c:	f641 0199 	movw	r1, #6297	; 0x1899
   81ea0:	f2c0 0108 	movt	r1, #8
   81ea4:	4788      	blx	r1
				( void ) xTaskResumeAll();
   81ea6:	f242 4299 	movw	r2, #9369	; 0x2499
   81eaa:	f2c0 0208 	movt	r2, #8
   81eae:	4790      	blx	r2
   81eb0:	e756      	b.n	81d60 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81eb2:	4620      	mov	r0, r4
   81eb4:	f641 0399 	movw	r3, #6297	; 0x1899
   81eb8:	f2c0 0308 	movt	r3, #8
   81ebc:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81ebe:	f242 4099 	movw	r0, #9369	; 0x2499
   81ec2:	f2c0 0008 	movt	r0, #8
   81ec6:	4780      	blx	r0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81ec8:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   81ecc:	b005      	add	sp, #20
   81ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ed2:	bf00      	nop

00081ed4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81ed4:	b538      	push	{r3, r4, r5, lr}
   81ed6:	4604      	mov	r4, r0
   81ed8:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81eda:	f241 53e1 	movw	r3, #5601	; 0x15e1
   81ede:	f2c0 0308 	movt	r3, #8
   81ee2:	4798      	blx	r3
   81ee4:	6c60      	ldr	r0, [r4, #68]	; 0x44
   81ee6:	f1b0 3fff 	cmp.w	r0, #4294967295
   81eea:	bf04      	itt	eq
   81eec:	2000      	moveq	r0, #0
   81eee:	6460      	streq	r0, [r4, #68]	; 0x44
   81ef0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81ef2:	f1b1 3fff 	cmp.w	r1, #4294967295
   81ef6:	bf04      	itt	eq
   81ef8:	2100      	moveq	r1, #0
   81efa:	64a1      	streq	r1, [r4, #72]	; 0x48
   81efc:	f241 6209 	movw	r2, #5641	; 0x1609
   81f00:	f2c0 0208 	movt	r2, #8
   81f04:	4790      	blx	r2
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81f06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81f08:	b93b      	cbnz	r3, 81f1a <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81f0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81f0e:	4629      	mov	r1, r5
   81f10:	f642 026d 	movw	r2, #10349	; 0x286d
   81f14:	f2c0 0208 	movt	r2, #8
   81f18:	4790      	blx	r2
		}
		prvUnlockQueue( pxQueue );
   81f1a:	4620      	mov	r0, r4
   81f1c:	f641 0199 	movw	r1, #6297	; 0x1899
   81f20:	f2c0 0108 	movt	r1, #8
   81f24:	4788      	blx	r1
   81f26:	bd38      	pop	{r3, r4, r5, pc}

00081f28 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81f28:	b510      	push	{r4, lr}
   81f2a:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81f2c:	f64a 2364 	movw	r3, #43620	; 0xaa64
   81f30:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f34:	6818      	ldr	r0, [r3, #0]
   81f36:	6044      	str	r4, [r0, #4]

	if( xTimeToWake < xTickCount )
   81f38:	f64a 2180 	movw	r1, #43648	; 0xaa80
   81f3c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81f40:	680a      	ldr	r2, [r1, #0]
   81f42:	4294      	cmp	r4, r2
   81f44:	d211      	bcs.n	81f6a <prvAddCurrentTaskToDelayedList+0x42>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81f46:	f64a 2284 	movw	r2, #43652	; 0xaa84
   81f4a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81f4e:	6810      	ldr	r0, [r2, #0]
   81f50:	f64a 2364 	movw	r3, #43620	; 0xaa64
   81f54:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f58:	6819      	ldr	r1, [r3, #0]
   81f5a:	f101 0104 	add.w	r1, r1, #4
   81f5e:	f241 5201 	movw	r2, #5377	; 0x1501
   81f62:	f2c0 0208 	movt	r2, #8
   81f66:	4790      	blx	r2
   81f68:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81f6a:	f64a 13c4 	movw	r3, #43460	; 0xa9c4
   81f6e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f72:	6818      	ldr	r0, [r3, #0]
   81f74:	f64a 2164 	movw	r1, #43620	; 0xaa64
   81f78:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81f7c:	6809      	ldr	r1, [r1, #0]
   81f7e:	f101 0104 	add.w	r1, r1, #4
   81f82:	f241 5201 	movw	r2, #5377	; 0x1501
   81f86:	f2c0 0208 	movt	r2, #8
   81f8a:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81f8c:	f240 0018 	movw	r0, #24
   81f90:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81f94:	6803      	ldr	r3, [r0, #0]
   81f96:	429c      	cmp	r4, r3
   81f98:	d204      	bcs.n	81fa4 <prvAddCurrentTaskToDelayedList+0x7c>
		{
			xNextTaskUnblockTime = xTimeToWake;
   81f9a:	f240 0118 	movw	r1, #24
   81f9e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81fa2:	600c      	str	r4, [r1, #0]
   81fa4:	bd10      	pop	{r4, pc}
   81fa6:	bf00      	nop

00081fa8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fac:	460f      	mov	r7, r1
   81fae:	4690      	mov	r8, r2
   81fb0:	469a      	mov	sl, r3
   81fb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81fb4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81fb6:	4681      	mov	r9, r0
   81fb8:	b930      	cbnz	r0, 81fc8 <xTaskGenericCreate+0x20>
   81fba:	f241 57cd 	movw	r7, #5581	; 0x15cd
   81fbe:	f2c0 0708 	movt	r7, #8
   81fc2:	47b8      	blx	r7
   81fc4:	bf00      	nop
   81fc6:	e7fd      	b.n	81fc4 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81fc8:	2d04      	cmp	r5, #4
   81fca:	d906      	bls.n	81fda <xTaskGenericCreate+0x32>
   81fcc:	f241 55cd 	movw	r5, #5581	; 0x15cd
   81fd0:	f2c0 0508 	movt	r5, #8
   81fd4:	47a8      	blx	r5
   81fd6:	bf00      	nop
   81fd8:	e7fd      	b.n	81fd6 <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81fda:	f04f 004c 	mov.w	r0, #76	; 0x4c
   81fde:	f241 735d 	movw	r3, #5981	; 0x175d
   81fe2:	f2c0 0308 	movt	r3, #8
   81fe6:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81fe8:	4604      	mov	r4, r0
   81fea:	2800      	cmp	r0, #0
   81fec:	f000 8127 	beq.w	8223e <xTaskGenericCreate+0x296>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81ff0:	2e00      	cmp	r6, #0
   81ff2:	f040 8122 	bne.w	8223a <xTaskGenericCreate+0x292>
   81ff6:	ea4f 0088 	mov.w	r0, r8, lsl #2
   81ffa:	f241 715d 	movw	r1, #5981	; 0x175d
   81ffe:	f2c0 0108 	movt	r1, #8
   82002:	4788      	blx	r1
   82004:	4606      	mov	r6, r0
   82006:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   82008:	b930      	cbnz	r0, 82018 <xTaskGenericCreate+0x70>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   8200a:	4620      	mov	r0, r4
   8200c:	f641 025d 	movw	r2, #6237	; 0x185d
   82010:	f2c0 0208 	movt	r2, #8
   82014:	4790      	blx	r2
   82016:	e112      	b.n	8223e <xTaskGenericCreate+0x296>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   82018:	4630      	mov	r0, r6
   8201a:	f04f 01a5 	mov.w	r1, #165	; 0xa5
   8201e:	ea4f 0288 	mov.w	r2, r8, lsl #2
   82022:	f643 3697 	movw	r6, #15255	; 0x3b97
   82026:	f2c0 0608 	movt	r6, #8
   8202a:	47b0      	blx	r6
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   8202c:	f108 38ff 	add.w	r8, r8, #4294967295
   82030:	6b20      	ldr	r0, [r4, #48]	; 0x30
   82032:	eb00 0288 	add.w	r2, r0, r8, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   82036:	f022 0b07 	bic.w	fp, r2, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   8203a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   8203e:	4639      	mov	r1, r7
   82040:	f04f 020a 	mov.w	r2, #10
   82044:	f643 47b5 	movw	r7, #15541	; 0x3cb5
   82048:	f2c0 0708 	movt	r7, #8
   8204c:	47b8      	blx	r7
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   8204e:	f04f 0300 	mov.w	r3, #0
   82052:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   82056:	2d04      	cmp	r5, #4
   82058:	bf34      	ite	cc
   8205a:	462e      	movcc	r6, r5
   8205c:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   8205e:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   82060:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   82062:	f104 0704 	add.w	r7, r4, #4
   82066:	4638      	mov	r0, r7
   82068:	f241 48d9 	movw	r8, #5337	; 0x14d9
   8206c:	f2c0 0808 	movt	r8, #8
   82070:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   82072:	f104 0018 	add.w	r0, r4, #24
   82076:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   82078:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   8207a:	f1c6 0605 	rsb	r6, r6, #5
   8207e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   82080:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   82082:	4658      	mov	r0, fp
   82084:	4649      	mov	r1, r9
   82086:	4652      	mov	r2, sl
   82088:	f241 537d 	movw	r3, #5501	; 0x157d
   8208c:	f2c0 0308 	movt	r3, #8
   82090:	4798      	blx	r3
   82092:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82094:	f010 0f07 	tst.w	r0, #7
   82098:	d006      	beq.n	820a8 <xTaskGenericCreate+0x100>
   8209a:	f241 54cd 	movw	r4, #5581	; 0x15cd
   8209e:	f2c0 0408 	movt	r4, #8
   820a2:	47a0      	blx	r4
   820a4:	bf00      	nop
   820a6:	e7fd      	b.n	820a4 <xTaskGenericCreate+0xfc>

		if( ( void * ) pxCreatedTask != NULL )
   820a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   820aa:	b101      	cbz	r1, 820ae <xTaskGenericCreate+0x106>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   820ac:	600c      	str	r4, [r1, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   820ae:	f241 50e1 	movw	r0, #5601	; 0x15e1
   820b2:	f2c0 0008 	movt	r0, #8
   820b6:	4780      	blx	r0
		{
			uxCurrentNumberOfTasks++;
   820b8:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   820bc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   820c0:	681a      	ldr	r2, [r3, #0]
   820c2:	f102 0201 	add.w	r2, r2, #1
   820c6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   820c8:	f64a 2164 	movw	r1, #43620	; 0xaa64
   820cc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   820d0:	6808      	ldr	r0, [r1, #0]
   820d2:	2800      	cmp	r0, #0
   820d4:	d149      	bne.n	8216a <xTaskGenericCreate+0x1c2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   820d6:	f64a 2164 	movw	r1, #43620	; 0xaa64
   820da:	f2c2 0107 	movt	r1, #8199	; 0x2007
   820de:	600c      	str	r4, [r1, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   820e0:	f64a 20a4 	movw	r0, #43684	; 0xaaa4
   820e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820e8:	6803      	ldr	r3, [r0, #0]
   820ea:	2b01      	cmp	r3, #1
   820ec:	d150      	bne.n	82190 <xTaskGenericCreate+0x1e8>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   820ee:	f64a 19fc 	movw	r9, #43516	; 0xa9fc
   820f2:	f2c2 0907 	movt	r9, #8199	; 0x2007
   820f6:	4648      	mov	r0, r9
   820f8:	f241 46c1 	movw	r6, #5313	; 0x14c1
   820fc:	f2c0 0608 	movt	r6, #8
   82100:	47b0      	blx	r6
   82102:	f109 0014 	add.w	r0, r9, #20
   82106:	47b0      	blx	r6
   82108:	f109 0028 	add.w	r0, r9, #40	; 0x28
   8210c:	47b0      	blx	r6
   8210e:	f109 003c 	add.w	r0, r9, #60	; 0x3c
   82112:	47b0      	blx	r6
   82114:	f109 0050 	add.w	r0, r9, #80	; 0x50
   82118:	47b0      	blx	r6
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8211a:	f64a 298c 	movw	r9, #43660	; 0xaa8c
   8211e:	f2c2 0907 	movt	r9, #8199	; 0x2007
   82122:	4648      	mov	r0, r9
   82124:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   82126:	f64a 18e4 	movw	r8, #43492	; 0xa9e4
   8212a:	f2c2 0807 	movt	r8, #8199	; 0x2007
   8212e:	4640      	mov	r0, r8
   82130:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   82132:	f64a 2068 	movw	r0, #43624	; 0xaa68
   82136:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8213a:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   8213c:	f64a 10d0 	movw	r0, #43472	; 0xa9d0
   82140:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82144:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   82146:	f64a 10b0 	movw	r0, #43440	; 0xa9b0
   8214a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8214e:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   82150:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   82154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82158:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8215c:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82160:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82164:	f8c1 8000 	str.w	r8, [r1]
   82168:	e012      	b.n	82190 <xTaskGenericCreate+0x1e8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8216a:	f64a 13c8 	movw	r3, #43464	; 0xa9c8
   8216e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82172:	681a      	ldr	r2, [r3, #0]
   82174:	b962      	cbnz	r2, 82190 <xTaskGenericCreate+0x1e8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   82176:	f64a 2164 	movw	r1, #43620	; 0xaa64
   8217a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8217e:	6808      	ldr	r0, [r1, #0]
   82180:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82182:	429d      	cmp	r5, r3
   82184:	d304      	bcc.n	82190 <xTaskGenericCreate+0x1e8>
					{
						pxCurrentTCB = pxNewTCB;
   82186:	f64a 2264 	movw	r2, #43620	; 0xaa64
   8218a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8218e:	6014      	str	r4, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   82190:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82192:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   82196:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8219a:	681a      	ldr	r2, [r3, #0]
   8219c:	4290      	cmp	r0, r2
   8219e:	d904      	bls.n	821aa <xTaskGenericCreate+0x202>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   821a0:	f64a 21a8 	movw	r1, #43688	; 0xaaa8
   821a4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   821a8:	6008      	str	r0, [r1, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   821aa:	f64a 2388 	movw	r3, #43656	; 0xaa88
   821ae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   821b2:	681a      	ldr	r2, [r3, #0]
   821b4:	6422      	str	r2, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   821b6:	f102 0201 	add.w	r2, r2, #1
   821ba:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   821bc:	f64a 11f8 	movw	r1, #43512	; 0xa9f8
   821c0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   821c4:	680b      	ldr	r3, [r1, #0]
   821c6:	4298      	cmp	r0, r3
   821c8:	d904      	bls.n	821d4 <xTaskGenericCreate+0x22c>
   821ca:	f64a 12f8 	movw	r2, #43512	; 0xa9f8
   821ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   821d2:	6010      	str	r0, [r2, #0]
   821d4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   821d8:	f64a 10fc 	movw	r0, #43516	; 0xa9fc
   821dc:	4603      	mov	r3, r0
   821de:	f2c2 0307 	movt	r3, #8199	; 0x2007
   821e2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   821e6:	4639      	mov	r1, r7
   821e8:	f241 42e1 	movw	r2, #5345	; 0x14e1
   821ec:	f2c0 0208 	movt	r2, #8
   821f0:	4790      	blx	r2

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   821f2:	f241 6109 	movw	r1, #5641	; 0x1609
   821f6:	f2c0 0108 	movt	r1, #8
   821fa:	4788      	blx	r1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   821fc:	f64a 10c8 	movw	r0, #43464	; 0xa9c8
   82200:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82204:	6803      	ldr	r3, [r0, #0]
   82206:	b183      	cbz	r3, 8222a <xTaskGenericCreate+0x282>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82208:	f64a 2264 	movw	r2, #43620	; 0xaa64
   8220c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82210:	6811      	ldr	r1, [r2, #0]
   82212:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   82214:	4285      	cmp	r5, r0
   82216:	d90c      	bls.n	82232 <xTaskGenericCreate+0x28a>
			{
				portYIELD_WITHIN_API();
   82218:	f241 53bd 	movw	r3, #5565	; 0x15bd
   8221c:	f2c0 0308 	movt	r3, #8
   82220:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   82222:	f04f 0001 	mov.w	r0, #1
   82226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8222a:	f04f 0001 	mov.w	r0, #1
   8222e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82232:	f04f 0001 	mov.w	r0, #1
   82236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8223a:	6306      	str	r6, [r0, #48]	; 0x30
   8223c:	e6ec      	b.n	82018 <xTaskGenericCreate+0x70>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   8223e:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   82242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82246:	bf00      	nop

00082248 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   82248:	b510      	push	{r4, lr}
   8224a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   8224c:	f04f 0300 	mov.w	r3, #0
   82250:	9300      	str	r3, [sp, #0]
   82252:	9301      	str	r3, [sp, #4]
   82254:	9302      	str	r3, [sp, #8]
   82256:	9303      	str	r3, [sp, #12]
   82258:	f242 50e5 	movw	r0, #9701	; 0x25e5
   8225c:	f2c0 0008 	movt	r0, #8
   82260:	f246 21f4 	movw	r1, #25332	; 0x62f4
   82264:	f2c0 0108 	movt	r1, #8
   82268:	f04f 0282 	mov.w	r2, #130	; 0x82
   8226c:	f641 74a9 	movw	r4, #8105	; 0x1fa9
   82270:	f2c0 0408 	movt	r4, #8
   82274:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   82276:	2801      	cmp	r0, #1
   82278:	d11f      	bne.n	822ba <vTaskStartScheduler+0x72>
		{
			xReturn = xTimerCreateTimerTask();
   8227a:	f642 436d 	movw	r3, #11373	; 0x2c6d
   8227e:	f2c0 0308 	movt	r3, #8
   82282:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   82284:	2801      	cmp	r0, #1
   82286:	d118      	bne.n	822ba <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   82288:	f241 51cd 	movw	r1, #5581	; 0x15cd
   8228c:	f2c0 0108 	movt	r1, #8
   82290:	4788      	blx	r1

		xSchedulerRunning = pdTRUE;
   82292:	f64a 13c8 	movw	r3, #43464	; 0xa9c8
   82296:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8229a:	f04f 0201 	mov.w	r2, #1
   8229e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   822a0:	f64a 2080 	movw	r0, #43648	; 0xaa80
   822a4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   822a8:	f04f 0100 	mov.w	r1, #0
   822ac:	6001      	str	r1, [r0, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   822ae:	f241 63c1 	movw	r3, #5825	; 0x16c1
   822b2:	f2c0 0308 	movt	r3, #8
   822b6:	4798      	blx	r3
   822b8:	e007      	b.n	822ca <vTaskStartScheduler+0x82>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   822ba:	b930      	cbnz	r0, 822ca <vTaskStartScheduler+0x82>
   822bc:	f241 50cd 	movw	r0, #5581	; 0x15cd
   822c0:	f2c0 0008 	movt	r0, #8
   822c4:	4780      	blx	r0
   822c6:	bf00      	nop
   822c8:	e7fd      	b.n	822c6 <vTaskStartScheduler+0x7e>
}
   822ca:	b004      	add	sp, #16
   822cc:	bd10      	pop	{r4, pc}
   822ce:	bf00      	nop

000822d0 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   822d0:	f64a 2360 	movw	r3, #43616	; 0xaa60
   822d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822d8:	681a      	ldr	r2, [r3, #0]
   822da:	f102 0201 	add.w	r2, r2, #1
   822de:	601a      	str	r2, [r3, #0]
   822e0:	4770      	bx	lr
   822e2:	bf00      	nop

000822e4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   822e4:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   822e6:	f241 53e1 	movw	r3, #5601	; 0x15e1
   822ea:	f2c0 0308 	movt	r3, #8
   822ee:	4798      	blx	r3
	{
		xTicks = xTickCount;
   822f0:	f64a 2080 	movw	r0, #43648	; 0xaa80
   822f4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   822f8:	6804      	ldr	r4, [r0, #0]
	}
	taskEXIT_CRITICAL();
   822fa:	f241 6109 	movw	r1, #5641	; 0x1609
   822fe:	f2c0 0108 	movt	r1, #8
   82302:	4788      	blx	r1

	return xTicks;
}
   82304:	4620      	mov	r0, r4
   82306:	bd10      	pop	{r4, pc}

00082308 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   82308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8230c:	f64a 2360 	movw	r3, #43616	; 0xaa60
   82310:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82314:	6818      	ldr	r0, [r3, #0]
   82316:	2800      	cmp	r0, #0
   82318:	f040 80b3 	bne.w	82482 <vTaskIncrementTick+0x17a>
	{
		++xTickCount;
   8231c:	f64a 2380 	movw	r3, #43648	; 0xaa80
   82320:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82324:	6818      	ldr	r0, [r3, #0]
   82326:	f100 0001 	add.w	r0, r0, #1
   8232a:	6018      	str	r0, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8232c:	6819      	ldr	r1, [r3, #0]
   8232e:	2900      	cmp	r1, #0
   82330:	d139      	bne.n	823a6 <vTaskIncrementTick+0x9e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   82332:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   82336:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8233a:	6813      	ldr	r3, [r2, #0]
   8233c:	6818      	ldr	r0, [r3, #0]
   8233e:	b130      	cbz	r0, 8234e <vTaskIncrementTick+0x46>
   82340:	f241 55cd 	movw	r5, #5581	; 0x15cd
   82344:	f2c0 0508 	movt	r5, #8
   82348:	47a8      	blx	r5
   8234a:	bf00      	nop
   8234c:	e7fd      	b.n	8234a <vTaskIncrementTick+0x42>

			pxTemp = pxDelayedTaskList;
   8234e:	f64a 13c4 	movw	r3, #43460	; 0xa9c4
   82352:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82356:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   82358:	f64a 2284 	movw	r2, #43652	; 0xaa84
   8235c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82360:	6810      	ldr	r0, [r2, #0]
   82362:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   82364:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   82366:	f64a 227c 	movw	r2, #43644	; 0xaa7c
   8236a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8236e:	6811      	ldr	r1, [r2, #0]
   82370:	f101 0101 	add.w	r1, r1, #1
   82374:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82376:	681b      	ldr	r3, [r3, #0]
   82378:	6818      	ldr	r0, [r3, #0]
   8237a:	b938      	cbnz	r0, 8238c <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8237c:	f240 0318 	movw	r3, #24
   82380:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82384:	f04f 30ff 	mov.w	r0, #4294967295
   82388:	6018      	str	r0, [r3, #0]
   8238a:	e00c      	b.n	823a6 <vTaskIncrementTick+0x9e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8238c:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   82390:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82394:	6811      	ldr	r1, [r2, #0]
   82396:	68cb      	ldr	r3, [r1, #12]
   82398:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8239a:	6842      	ldr	r2, [r0, #4]
   8239c:	f240 0118 	movw	r1, #24
   823a0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   823a4:	600a      	str	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   823a6:	f64a 2280 	movw	r2, #43648	; 0xaa80
   823aa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   823ae:	6811      	ldr	r1, [r2, #0]
   823b0:	f240 0318 	movw	r3, #24
   823b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   823b8:	6818      	ldr	r0, [r3, #0]
   823ba:	4281      	cmp	r1, r0
   823bc:	d369      	bcc.n	82492 <vTaskIncrementTick+0x18a>
   823be:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   823c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   823c6:	6811      	ldr	r1, [r2, #0]
   823c8:	680b      	ldr	r3, [r1, #0]
   823ca:	b17b      	cbz	r3, 823ec <vTaskIncrementTick+0xe4>
   823cc:	f64a 14c4 	movw	r4, #43460	; 0xa9c4
   823d0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   823d4:	6820      	ldr	r0, [r4, #0]
   823d6:	68c2      	ldr	r2, [r0, #12]
   823d8:	68d4      	ldr	r4, [r2, #12]
   823da:	6863      	ldr	r3, [r4, #4]
   823dc:	f64a 2180 	movw	r1, #43648	; 0xaa80
   823e0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   823e4:	6808      	ldr	r0, [r1, #0]
   823e6:	4283      	cmp	r3, r0
   823e8:	d91a      	bls.n	82420 <vTaskIncrementTick+0x118>
   823ea:	e012      	b.n	82412 <vTaskIncrementTick+0x10a>
   823ec:	f240 0318 	movw	r3, #24
   823f0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   823f4:	f04f 30ff 	mov.w	r0, #4294967295
   823f8:	6018      	str	r0, [r3, #0]
   823fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823fe:	6834      	ldr	r4, [r6, #0]
   82400:	68e2      	ldr	r2, [r4, #12]
   82402:	68d4      	ldr	r4, [r2, #12]
   82404:	6863      	ldr	r3, [r4, #4]
   82406:	4648      	mov	r0, r9
   82408:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8240c:	6801      	ldr	r1, [r0, #0]
   8240e:	428b      	cmp	r3, r1
   82410:	d91c      	bls.n	8244c <vTaskIncrementTick+0x144>
   82412:	f240 0218 	movw	r2, #24
   82416:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8241a:	6013      	str	r3, [r2, #0]
   8241c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82420:	f241 573d 	movw	r7, #5437	; 0x153d
   82424:	f2c0 0708 	movt	r7, #8
   82428:	f64a 18f8 	movw	r8, #43512	; 0xa9f8
   8242c:	f2c2 0807 	movt	r8, #8199	; 0x2007
   82430:	f64a 1bfc 	movw	fp, #43516	; 0xa9fc
   82434:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   82438:	f241 4ae1 	movw	sl, #5345	; 0x14e1
   8243c:	f2c0 0a08 	movt	sl, #8
   82440:	f64a 16c4 	movw	r6, #43460	; 0xa9c4
   82444:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82448:	f64a 2980 	movw	r9, #43648	; 0xaa80
   8244c:	f104 0504 	add.w	r5, r4, #4
   82450:	4628      	mov	r0, r5
   82452:	47b8      	blx	r7
   82454:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82456:	b113      	cbz	r3, 8245e <vTaskIncrementTick+0x156>
   82458:	f104 0018 	add.w	r0, r4, #24
   8245c:	47b8      	blx	r7
   8245e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   82460:	f8d8 2000 	ldr.w	r2, [r8]
   82464:	4291      	cmp	r1, r2
   82466:	bf88      	it	hi
   82468:	f8c8 1000 	strhi.w	r1, [r8]
   8246c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82470:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   82474:	4629      	mov	r1, r5
   82476:	47d0      	blx	sl
   82478:	6833      	ldr	r3, [r6, #0]
   8247a:	6819      	ldr	r1, [r3, #0]
   8247c:	2900      	cmp	r1, #0
   8247e:	d1be      	bne.n	823fe <vTaskIncrementTick+0xf6>
   82480:	e7b4      	b.n	823ec <vTaskIncrementTick+0xe4>
	}
	else
	{
		++uxMissedTicks;
   82482:	f64a 11ac 	movw	r1, #43436	; 0xa9ac
   82486:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8248a:	680a      	ldr	r2, [r1, #0]
   8248c:	f102 0201 	add.w	r2, r2, #1
   82490:	600a      	str	r2, [r1, #0]
   82492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82496:	bf00      	nop

00082498 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   82498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   8249c:	f64a 2360 	movw	r3, #43616	; 0xaa60
   824a0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824a4:	6818      	ldr	r0, [r3, #0]
   824a6:	b930      	cbnz	r0, 824b6 <xTaskResumeAll+0x1e>
   824a8:	f241 55cd 	movw	r5, #5581	; 0x15cd
   824ac:	f2c0 0508 	movt	r5, #8
   824b0:	47a8      	blx	r5
   824b2:	bf00      	nop
   824b4:	e7fd      	b.n	824b2 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   824b6:	f241 51e1 	movw	r1, #5601	; 0x15e1
   824ba:	f2c0 0108 	movt	r1, #8
   824be:	4788      	blx	r1
	{
		--uxSchedulerSuspended;
   824c0:	f64a 2460 	movw	r4, #43616	; 0xaa60
   824c4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   824c8:	6822      	ldr	r2, [r4, #0]
   824ca:	f102 33ff 	add.w	r3, r2, #4294967295
   824ce:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   824d0:	6820      	ldr	r0, [r4, #0]
   824d2:	2800      	cmp	r0, #0
   824d4:	d178      	bne.n	825c8 <xTaskResumeAll+0x130>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   824d6:	f64a 21a4 	movw	r1, #43684	; 0xaaa4
   824da:	f2c2 0107 	movt	r1, #8199	; 0x2007
   824de:	680c      	ldr	r4, [r1, #0]
   824e0:	bb4c      	cbnz	r4, 82536 <xTaskResumeAll+0x9e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   824e2:	f04f 0400 	mov.w	r4, #0
   824e6:	e074      	b.n	825d2 <xTaskResumeAll+0x13a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   824e8:	f8d8 200c 	ldr.w	r2, [r8, #12]
   824ec:	68d4      	ldr	r4, [r2, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   824ee:	f104 0018 	add.w	r0, r4, #24
   824f2:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   824f4:	f104 0904 	add.w	r9, r4, #4
   824f8:	4648      	mov	r0, r9
   824fa:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   824fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   824fe:	6830      	ldr	r0, [r6, #0]
   82500:	4283      	cmp	r3, r0
   82502:	bf88      	it	hi
   82504:	6033      	strhi	r3, [r6, #0]
   82506:	4651      	mov	r1, sl
   82508:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8250c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   82510:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   82514:	4649      	mov	r1, r9
   82516:	f241 43e1 	movw	r3, #5345	; 0x14e1
   8251a:	f2c0 0308 	movt	r3, #8
   8251e:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82520:	f64a 2064 	movw	r0, #43620	; 0xaa64
   82524:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82528:	6801      	ldr	r1, [r0, #0]
   8252a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   8252c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   8252e:	4294      	cmp	r4, r2
   82530:	bf28      	it	cs
   82532:	2501      	movcs	r5, #1
   82534:	e00f      	b.n	82556 <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   82536:	f04f 0500 	mov.w	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8253a:	f64a 2868 	movw	r8, #43624	; 0xaa68
   8253e:	f2c2 0807 	movt	r8, #8199	; 0x2007
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   82542:	f241 573d 	movw	r7, #5437	; 0x153d
   82546:	f2c0 0708 	movt	r7, #8
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   8254a:	f64a 16f8 	movw	r6, #43512	; 0xa9f8
   8254e:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82552:	f64a 1afc 	movw	sl, #43516	; 0xa9fc
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82556:	f8d8 2000 	ldr.w	r2, [r8]
   8255a:	2a00      	cmp	r2, #0
   8255c:	d1c4      	bne.n	824e8 <xTaskResumeAll+0x50>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8255e:	f64a 13ac 	movw	r3, #43436	; 0xa9ac
   82562:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82566:	6818      	ldr	r0, [r3, #0]
   82568:	b1b0      	cbz	r0, 82598 <xTaskResumeAll+0x100>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8256a:	f64a 12ac 	movw	r2, #43436	; 0xa9ac
   8256e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82572:	6813      	ldr	r3, [r2, #0]
   82574:	b1cb      	cbz	r3, 825aa <xTaskResumeAll+0x112>
					{
						vTaskIncrementTick();
   82576:	f242 3509 	movw	r5, #8969	; 0x2309
   8257a:	f2c0 0508 	movt	r5, #8
						--uxMissedTicks;
   8257e:	f64a 14ac 	movw	r4, #43436	; 0xa9ac
   82582:	f2c2 0407 	movt	r4, #8199	; 0x2007
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   82586:	47a8      	blx	r5
						--uxMissedTicks;
   82588:	6820      	ldr	r0, [r4, #0]
   8258a:	f100 31ff 	add.w	r1, r0, #4294967295
   8258e:	6021      	str	r1, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82590:	6822      	ldr	r2, [r4, #0]
   82592:	2a00      	cmp	r2, #0
   82594:	d1f7      	bne.n	82586 <xTaskResumeAll+0xee>
   82596:	e008      	b.n	825aa <xTaskResumeAll+0x112>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   82598:	2d01      	cmp	r5, #1
   8259a:	d006      	beq.n	825aa <xTaskResumeAll+0x112>
   8259c:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   825a0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   825a4:	680c      	ldr	r4, [r1, #0]
   825a6:	2c01      	cmp	r4, #1
   825a8:	d111      	bne.n	825ce <xTaskResumeAll+0x136>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   825aa:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   825ae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   825b2:	f04f 0400 	mov.w	r4, #0
   825b6:	601c      	str	r4, [r3, #0]
					portYIELD_WITHIN_API();
   825b8:	f241 50bd 	movw	r0, #5565	; 0x15bd
   825bc:	f2c0 0008 	movt	r0, #8
   825c0:	4780      	blx	r0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   825c2:	f04f 0401 	mov.w	r4, #1
   825c6:	e004      	b.n	825d2 <xTaskResumeAll+0x13a>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   825c8:	f04f 0400 	mov.w	r4, #0
   825cc:	e001      	b.n	825d2 <xTaskResumeAll+0x13a>
   825ce:	f04f 0400 	mov.w	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   825d2:	f241 6109 	movw	r1, #5641	; 0x1609
   825d6:	f2c0 0108 	movt	r1, #8
   825da:	4788      	blx	r1

	return xAlreadyYielded;
}
   825dc:	4620      	mov	r0, r4
   825de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   825e2:	bf00      	nop

000825e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   825e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   825e8:	f64a 15cc 	movw	r5, #43468	; 0xa9cc
   825ec:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			vTaskSuspendAll();
   825f0:	f242 28d1 	movw	r8, #8913	; 0x22d1
   825f4:	f2c0 0808 	movt	r8, #8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   825f8:	f64a 16d0 	movw	r6, #43472	; 0xa9d0
   825fc:	f2c2 0607 	movt	r6, #8199	; 0x2007
			xTaskResumeAll();
   82600:	f242 4799 	movw	r7, #9369	; 0x2499
   82604:	e02d      	b.n	82662 <prvIdleTask+0x7e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   82606:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82608:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   8260a:	463b      	mov	r3, r7
   8260c:	f2c0 0308 	movt	r3, #8
   82610:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   82612:	b334      	cbz	r4, 82662 <prvIdleTask+0x7e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   82614:	f241 50e1 	movw	r0, #5601	; 0x15e1
   82618:	f2c0 0008 	movt	r0, #8
   8261c:	4780      	blx	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   8261e:	68f1      	ldr	r1, [r6, #12]
   82620:	68cc      	ldr	r4, [r1, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   82622:	f104 0004 	add.w	r0, r4, #4
   82626:	f241 523d 	movw	r2, #5437	; 0x153d
   8262a:	f2c0 0208 	movt	r2, #8
   8262e:	4790      	blx	r2
					--uxCurrentNumberOfTasks;
   82630:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   82634:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82638:	6818      	ldr	r0, [r3, #0]
   8263a:	f100 31ff 	add.w	r1, r0, #4294967295
   8263e:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
   82640:	682a      	ldr	r2, [r5, #0]
   82642:	f102 33ff 	add.w	r3, r2, #4294967295
   82646:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   82648:	f241 6009 	movw	r0, #5641	; 0x1609
   8264c:	f2c0 0008 	movt	r0, #8
   82650:	4780      	blx	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   82652:	6b20      	ldr	r0, [r4, #48]	; 0x30
   82654:	f641 095d 	movw	r9, #6237	; 0x185d
   82658:	f2c0 0908 	movt	r9, #8
   8265c:	47c8      	blx	r9
		vPortFree( pxTCB );
   8265e:	4620      	mov	r0, r4
   82660:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82662:	682b      	ldr	r3, [r5, #0]
   82664:	2b00      	cmp	r3, #0
   82666:	d1ce      	bne.n	82606 <prvIdleTask+0x22>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82668:	f64a 10fc 	movw	r0, #43516	; 0xa9fc
   8266c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82670:	6801      	ldr	r1, [r0, #0]
   82672:	2901      	cmp	r1, #1
   82674:	d9f5      	bls.n	82662 <prvIdleTask+0x7e>
			{
				taskYIELD();
   82676:	f241 52bd 	movw	r2, #5565	; 0x15bd
   8267a:	f2c0 0208 	movt	r2, #8
   8267e:	4790      	blx	r2
   82680:	e7ef      	b.n	82662 <prvIdleTask+0x7e>
   82682:	bf00      	nop

00082684 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   82684:	b538      	push	{r3, r4, r5, lr}
   82686:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   82688:	4605      	mov	r5, r0
   8268a:	b930      	cbnz	r0, 8269a <vTaskDelayUntil+0x16>
   8268c:	f241 54cd 	movw	r4, #5581	; 0x15cd
   82690:	f2c0 0408 	movt	r4, #8
   82694:	47a0      	blx	r4
   82696:	bf00      	nop
   82698:	e7fd      	b.n	82696 <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
   8269a:	b931      	cbnz	r1, 826aa <vTaskDelayUntil+0x26>
   8269c:	f241 55cd 	movw	r5, #5581	; 0x15cd
   826a0:	f2c0 0508 	movt	r5, #8
   826a4:	47a8      	blx	r5
   826a6:	bf00      	nop
   826a8:	e7fd      	b.n	826a6 <vTaskDelayUntil+0x22>

		vTaskSuspendAll();
   826aa:	f242 23d1 	movw	r3, #8913	; 0x22d1
   826ae:	f2c0 0308 	movt	r3, #8
   826b2:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   826b4:	6828      	ldr	r0, [r5, #0]
   826b6:	1904      	adds	r4, r0, r4

			if( xTickCount < *pxPreviousWakeTime )
   826b8:	f64a 2280 	movw	r2, #43648	; 0xaa80
   826bc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   826c0:	6811      	ldr	r1, [r2, #0]
   826c2:	4288      	cmp	r0, r1
   826c4:	d90a      	bls.n	826dc <vTaskDelayUntil+0x58>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   826c6:	42a0      	cmp	r0, r4
   826c8:	d932      	bls.n	82730 <vTaskDelayUntil+0xac>
   826ca:	f64a 2280 	movw	r2, #43648	; 0xaa80
   826ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   826d2:	6811      	ldr	r1, [r2, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   826d4:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   826d6:	428c      	cmp	r4, r1
   826d8:	d91c      	bls.n	82714 <vTaskDelayUntil+0x90>
   826da:	e009      	b.n	826f0 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   826dc:	42a0      	cmp	r0, r4
   826de:	d825      	bhi.n	8272c <vTaskDelayUntil+0xa8>
   826e0:	f64a 2380 	movw	r3, #43648	; 0xaa80
   826e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826e8:	6818      	ldr	r0, [r3, #0]
   826ea:	4284      	cmp	r4, r0
   826ec:	d81e      	bhi.n	8272c <vTaskDelayUntil+0xa8>
   826ee:	e01f      	b.n	82730 <vTaskDelayUntil+0xac>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   826f0:	f64a 2364 	movw	r3, #43620	; 0xaa64
   826f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826f8:	6818      	ldr	r0, [r3, #0]
   826fa:	f100 0004 	add.w	r0, r0, #4
   826fe:	f241 523d 	movw	r2, #5437	; 0x153d
   82702:	f2c0 0208 	movt	r2, #8
   82706:	4790      	blx	r2
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82708:	4620      	mov	r0, r4
   8270a:	f641 7129 	movw	r1, #7977	; 0x1f29
   8270e:	f2c0 0108 	movt	r1, #8
   82712:	4788      	blx	r1
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82714:	f242 4099 	movw	r0, #9369	; 0x2499
   82718:	f2c0 0008 	movt	r0, #8
   8271c:	4780      	blx	r0

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   8271e:	b948      	cbnz	r0, 82734 <vTaskDelayUntil+0xb0>
		{
			portYIELD_WITHIN_API();
   82720:	f241 53bd 	movw	r3, #5565	; 0x15bd
   82724:	f2c0 0308 	movt	r3, #8
   82728:	4798      	blx	r3
   8272a:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   8272c:	602c      	str	r4, [r5, #0]
   8272e:	e7df      	b.n	826f0 <vTaskDelayUntil+0x6c>
   82730:	602c      	str	r4, [r5, #0]
   82732:	e7ef      	b.n	82714 <vTaskDelayUntil+0x90>
   82734:	bd38      	pop	{r3, r4, r5, pc}
   82736:	bf00      	nop

00082738 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82738:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8273a:	f64a 2360 	movw	r3, #43616	; 0xaa60
   8273e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82742:	6818      	ldr	r0, [r3, #0]
   82744:	b9a8      	cbnz	r0, 82772 <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82746:	f64a 11f8 	movw	r1, #43512	; 0xa9f8
   8274a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8274e:	680a      	ldr	r2, [r1, #0]
   82750:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   82754:	ea4f 0083 	mov.w	r0, r3, lsl #2
   82758:	f64a 11fc 	movw	r1, #43516	; 0xa9fc
   8275c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82760:	580a      	ldr	r2, [r1, r0]
   82762:	bb52      	cbnz	r2, 827ba <vTaskSwitchContext+0x82>
   82764:	f64a 13f8 	movw	r3, #43512	; 0xa9f8
   82768:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8276c:	6818      	ldr	r0, [r3, #0]
   8276e:	b988      	cbnz	r0, 82794 <vTaskSwitchContext+0x5c>
   82770:	e009      	b.n	82786 <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   82772:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   82776:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8277a:	f04f 0001 	mov.w	r0, #1
   8277e:	6008      	str	r0, [r1, #0]
   82780:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82782:	681a      	ldr	r2, [r3, #0]
   82784:	b972      	cbnz	r2, 827a4 <vTaskSwitchContext+0x6c>
   82786:	f241 53cd 	movw	r3, #5581	; 0x15cd
   8278a:	f2c0 0308 	movt	r3, #8
   8278e:	4798      	blx	r3
   82790:	bf00      	nop
   82792:	e7fd      	b.n	82790 <vTaskSwitchContext+0x58>
   82794:	f64a 13f8 	movw	r3, #43512	; 0xa9f8
   82798:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8279c:	f64a 11fc 	movw	r1, #43516	; 0xa9fc
   827a0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   827a4:	681a      	ldr	r2, [r3, #0]
   827a6:	f102 30ff 	add.w	r0, r2, #4294967295
   827aa:	6018      	str	r0, [r3, #0]
   827ac:	681a      	ldr	r2, [r3, #0]
   827ae:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   827b2:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   827b6:	2a00      	cmp	r2, #0
   827b8:	d0e3      	beq.n	82782 <vTaskSwitchContext+0x4a>
   827ba:	f64a 13f8 	movw	r3, #43512	; 0xa9f8
   827be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827c2:	6819      	ldr	r1, [r3, #0]
   827c4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   827c8:	f64a 12fc 	movw	r2, #43516	; 0xa9fc
   827cc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   827d0:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   827d4:	6859      	ldr	r1, [r3, #4]
   827d6:	6848      	ldr	r0, [r1, #4]
   827d8:	6058      	str	r0, [r3, #4]
   827da:	f103 0208 	add.w	r2, r3, #8
   827de:	4290      	cmp	r0, r2
   827e0:	bf04      	itt	eq
   827e2:	6840      	ldreq	r0, [r0, #4]
   827e4:	6058      	streq	r0, [r3, #4]
   827e6:	685b      	ldr	r3, [r3, #4]
   827e8:	68d9      	ldr	r1, [r3, #12]
   827ea:	f64a 2064 	movw	r0, #43620	; 0xaa64
   827ee:	f2c2 0007 	movt	r0, #8199	; 0x2007
   827f2:	6001      	str	r1, [r0, #0]
   827f4:	bd08      	pop	{r3, pc}
   827f6:	bf00      	nop

000827f8 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   827f8:	b538      	push	{r3, r4, r5, lr}
   827fa:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   827fc:	b930      	cbnz	r0, 8280c <vTaskPlaceOnEventList+0x14>
   827fe:	f241 54cd 	movw	r4, #5581	; 0x15cd
   82802:	f2c0 0408 	movt	r4, #8
   82806:	47a0      	blx	r4
   82808:	bf00      	nop
   8280a:	e7fd      	b.n	82808 <vTaskPlaceOnEventList+0x10>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8280c:	f64a 2564 	movw	r5, #43620	; 0xaa64
   82810:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82814:	6829      	ldr	r1, [r5, #0]
   82816:	f101 0118 	add.w	r1, r1, #24
   8281a:	f241 5201 	movw	r2, #5377	; 0x1501
   8281e:	f2c0 0208 	movt	r2, #8
   82822:	4790      	blx	r2

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82824:	6828      	ldr	r0, [r5, #0]
   82826:	f100 0004 	add.w	r0, r0, #4
   8282a:	f241 513d 	movw	r1, #5437	; 0x153d
   8282e:	f2c0 0108 	movt	r1, #8
   82832:	4788      	blx	r1
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   82834:	f1b4 3fff 	cmp.w	r4, #4294967295
   82838:	d10c      	bne.n	82854 <vTaskPlaceOnEventList+0x5c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8283a:	6829      	ldr	r1, [r5, #0]
   8283c:	f64a 10b0 	movw	r0, #43440	; 0xa9b0
   82840:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82844:	f101 0104 	add.w	r1, r1, #4
   82848:	f241 43e1 	movw	r3, #5345	; 0x14e1
   8284c:	f2c0 0308 	movt	r3, #8
   82850:	4798      	blx	r3
   82852:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   82854:	f64a 2080 	movw	r0, #43648	; 0xaa80
   82858:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8285c:	6803      	ldr	r3, [r0, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8285e:	18e0      	adds	r0, r4, r3
   82860:	f641 7229 	movw	r2, #7977	; 0x1f29
   82864:	f2c0 0208 	movt	r2, #8
   82868:	4790      	blx	r2
   8286a:	bd38      	pop	{r3, r4, r5, pc}

0008286c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   8286c:	b538      	push	{r3, r4, r5, lr}
   8286e:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   82870:	b930      	cbnz	r0, 82880 <vTaskPlaceOnEventListRestricted+0x14>
   82872:	f241 54cd 	movw	r4, #5581	; 0x15cd
   82876:	f2c0 0408 	movt	r4, #8
   8287a:	47a0      	blx	r4
   8287c:	bf00      	nop
   8287e:	e7fd      	b.n	8287c <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82880:	f64a 2464 	movw	r4, #43620	; 0xaa64
   82884:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82888:	6821      	ldr	r1, [r4, #0]
   8288a:	f101 0118 	add.w	r1, r1, #24
   8288e:	f241 42e1 	movw	r2, #5345	; 0x14e1
   82892:	f2c0 0208 	movt	r2, #8
   82896:	4790      	blx	r2

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82898:	6820      	ldr	r0, [r4, #0]
   8289a:	f100 0004 	add.w	r0, r0, #4
   8289e:	f241 513d 	movw	r1, #5437	; 0x153d
   828a2:	f2c0 0108 	movt	r1, #8
   828a6:	4788      	blx	r1
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   828a8:	f64a 2080 	movw	r0, #43648	; 0xaa80
   828ac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   828b0:	6803      	ldr	r3, [r0, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   828b2:	18e8      	adds	r0, r5, r3
   828b4:	f641 7229 	movw	r2, #7977	; 0x1f29
   828b8:	f2c0 0208 	movt	r2, #8
   828bc:	4790      	blx	r2
   828be:	bd38      	pop	{r3, r4, r5, pc}

000828c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   828c0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   828c2:	68c3      	ldr	r3, [r0, #12]
   828c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   828c6:	b934      	cbnz	r4, 828d6 <xTaskRemoveFromEventList+0x16>
   828c8:	f241 54cd 	movw	r4, #5581	; 0x15cd
   828cc:	f2c0 0408 	movt	r4, #8
   828d0:	47a0      	blx	r4
   828d2:	bf00      	nop
   828d4:	e7fd      	b.n	828d2 <xTaskRemoveFromEventList+0x12>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   828d6:	f104 0518 	add.w	r5, r4, #24
   828da:	4628      	mov	r0, r5
   828dc:	f241 513d 	movw	r1, #5437	; 0x153d
   828e0:	f2c0 0108 	movt	r1, #8
   828e4:	4788      	blx	r1

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   828e6:	f64a 2060 	movw	r0, #43616	; 0xaa60
   828ea:	f2c2 0007 	movt	r0, #8199	; 0x2007
   828ee:	6802      	ldr	r2, [r0, #0]
   828f0:	bb22      	cbnz	r2, 8293c <xTaskRemoveFromEventList+0x7c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   828f2:	f104 0504 	add.w	r5, r4, #4
   828f6:	4628      	mov	r0, r5
   828f8:	f241 513d 	movw	r1, #5437	; 0x153d
   828fc:	f2c0 0108 	movt	r1, #8
   82900:	4788      	blx	r1
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   82902:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82904:	f64a 12f8 	movw	r2, #43512	; 0xa9f8
   82908:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8290c:	6813      	ldr	r3, [r2, #0]
   8290e:	4298      	cmp	r0, r3
   82910:	d904      	bls.n	8291c <xTaskRemoveFromEventList+0x5c>
   82912:	f64a 11f8 	movw	r1, #43512	; 0xa9f8
   82916:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8291a:	6008      	str	r0, [r1, #0]
   8291c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82920:	f64a 10fc 	movw	r0, #43516	; 0xa9fc
   82924:	4602      	mov	r2, r0
   82926:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8292a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   8292e:	4629      	mov	r1, r5
   82930:	f241 43e1 	movw	r3, #5345	; 0x14e1
   82934:	f2c0 0308 	movt	r3, #8
   82938:	4798      	blx	r3
   8293a:	e009      	b.n	82950 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8293c:	f64a 2068 	movw	r0, #43624	; 0xaa68
   82940:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82944:	4629      	mov	r1, r5
   82946:	f241 43e1 	movw	r3, #5345	; 0x14e1
   8294a:	f2c0 0308 	movt	r3, #8
   8294e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82950:	f64a 2164 	movw	r1, #43620	; 0xaa64
   82954:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82958:	680a      	ldr	r2, [r1, #0]
   8295a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8295c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   8295e:	4298      	cmp	r0, r3
   82960:	bf34      	ite	cc
   82962:	2000      	movcc	r0, #0
   82964:	2001      	movcs	r0, #1
   82966:	bd38      	pop	{r3, r4, r5, pc}

00082968 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   82968:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8296a:	4603      	mov	r3, r0
   8296c:	b930      	cbnz	r0, 8297c <vTaskSetTimeOutState+0x14>
   8296e:	f241 53cd 	movw	r3, #5581	; 0x15cd
   82972:	f2c0 0308 	movt	r3, #8
   82976:	4798      	blx	r3
   82978:	bf00      	nop
   8297a:	e7fd      	b.n	82978 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   8297c:	f64a 227c 	movw	r2, #43644	; 0xaa7c
   82980:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82984:	6810      	ldr	r0, [r2, #0]
   82986:	6018      	str	r0, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   82988:	f64a 2180 	movw	r1, #43648	; 0xaa80
   8298c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82990:	680a      	ldr	r2, [r1, #0]
   82992:	605a      	str	r2, [r3, #4]
   82994:	bd08      	pop	{r3, pc}
   82996:	bf00      	nop

00082998 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82998:	b538      	push	{r3, r4, r5, lr}
   8299a:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   8299c:	4604      	mov	r4, r0
   8299e:	b930      	cbnz	r0, 829ae <xTaskCheckForTimeOut+0x16>
   829a0:	f241 52cd 	movw	r2, #5581	; 0x15cd
   829a4:	f2c0 0208 	movt	r2, #8
   829a8:	4790      	blx	r2
   829aa:	bf00      	nop
   829ac:	e7fd      	b.n	829aa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   829ae:	b931      	cbnz	r1, 829be <xTaskCheckForTimeOut+0x26>
   829b0:	f241 55cd 	movw	r5, #5581	; 0x15cd
   829b4:	f2c0 0508 	movt	r5, #8
   829b8:	47a8      	blx	r5
   829ba:	bf00      	nop
   829bc:	e7fd      	b.n	829ba <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
   829be:	f241 53e1 	movw	r3, #5601	; 0x15e1
   829c2:	f2c0 0308 	movt	r3, #8
   829c6:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   829c8:	6828      	ldr	r0, [r5, #0]
   829ca:	f1b0 3fff 	cmp.w	r0, #4294967295
   829ce:	d029      	beq.n	82a24 <xTaskCheckForTimeOut+0x8c>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   829d0:	f64a 227c 	movw	r2, #43644	; 0xaa7c
   829d4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   829d8:	6811      	ldr	r1, [r2, #0]
   829da:	6823      	ldr	r3, [r4, #0]
   829dc:	428b      	cmp	r3, r1
   829de:	d007      	beq.n	829f0 <xTaskCheckForTimeOut+0x58>
   829e0:	f64a 2280 	movw	r2, #43648	; 0xaa80
   829e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   829e8:	6811      	ldr	r1, [r2, #0]
   829ea:	6863      	ldr	r3, [r4, #4]
   829ec:	428b      	cmp	r3, r1
   829ee:	d91c      	bls.n	82a2a <xTaskCheckForTimeOut+0x92>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   829f0:	f64a 2280 	movw	r2, #43648	; 0xaa80
   829f4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   829f8:	6811      	ldr	r1, [r2, #0]
   829fa:	6863      	ldr	r3, [r4, #4]
   829fc:	1aca      	subs	r2, r1, r3
   829fe:	4290      	cmp	r0, r2
   82a00:	d916      	bls.n	82a30 <xTaskCheckForTimeOut+0x98>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   82a02:	f64a 2180 	movw	r1, #43648	; 0xaa80
   82a06:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82a0a:	680a      	ldr	r2, [r1, #0]
   82a0c:	1a9b      	subs	r3, r3, r2
   82a0e:	1818      	adds	r0, r3, r0
   82a10:	6028      	str	r0, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82a12:	4620      	mov	r0, r4
   82a14:	f642 1469 	movw	r4, #10601	; 0x2969
   82a18:	f2c0 0408 	movt	r4, #8
   82a1c:	47a0      	blx	r4
			xReturn = pdFALSE;
   82a1e:	f04f 0400 	mov.w	r4, #0
   82a22:	e007      	b.n	82a34 <xTaskCheckForTimeOut+0x9c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82a24:	f04f 0400 	mov.w	r4, #0
   82a28:	e004      	b.n	82a34 <xTaskCheckForTimeOut+0x9c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82a2a:	f04f 0401 	mov.w	r4, #1
   82a2e:	e001      	b.n	82a34 <xTaskCheckForTimeOut+0x9c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   82a30:	f04f 0401 	mov.w	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   82a34:	f241 6109 	movw	r1, #5641	; 0x1609
   82a38:	f2c0 0108 	movt	r1, #8
   82a3c:	4788      	blx	r1

	return xReturn;
}
   82a3e:	4620      	mov	r0, r4
   82a40:	bd38      	pop	{r3, r4, r5, pc}
   82a42:	bf00      	nop

00082a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   82a44:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   82a48:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a4c:	f04f 0201 	mov.w	r2, #1
   82a50:	601a      	str	r2, [r3, #0]
   82a52:	4770      	bx	lr

00082a54 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82a54:	f64a 2364 	movw	r3, #43620	; 0xaa64
   82a58:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a5c:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   82a5e:	4770      	bx	lr

00082a60 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   82a60:	f64a 13c8 	movw	r3, #43464	; 0xa9c8
   82a64:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a68:	6818      	ldr	r0, [r3, #0]
   82a6a:	b148      	cbz	r0, 82a80 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82a6c:	f64a 2160 	movw	r1, #43616	; 0xaa60
   82a70:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82a74:	680a      	ldr	r2, [r1, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   82a76:	2a00      	cmp	r2, #0
   82a78:	bf14      	ite	ne
   82a7a:	2002      	movne	r0, #2
   82a7c:	2001      	moveq	r0, #1
   82a7e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82a80:	f04f 0000 	mov.w	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   82a84:	4770      	bx	lr
   82a86:	bf00      	nop

00082a88 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   82a88:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   82a8a:	4604      	mov	r4, r0
   82a8c:	2800      	cmp	r0, #0
   82a8e:	d04e      	beq.n	82b2e <vTaskPriorityInherit+0xa6>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   82a90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82a92:	f64a 2264 	movw	r2, #43620	; 0xaa64
   82a96:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a9a:	6810      	ldr	r0, [r2, #0]
   82a9c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82a9e:	428b      	cmp	r3, r1
   82aa0:	d245      	bcs.n	82b2e <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   82aa2:	f64a 2264 	movw	r2, #43620	; 0xaa64
   82aa6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82aaa:	6810      	ldr	r0, [r2, #0]
   82aac:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82aae:	f1c1 0205 	rsb	r2, r1, #5
   82ab2:	61a2      	str	r2, [r4, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82ab4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82ab8:	f64a 10fc 	movw	r0, #43516	; 0xa9fc
   82abc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ac0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   82ac4:	6962      	ldr	r2, [r4, #20]
   82ac6:	428a      	cmp	r2, r1
   82ac8:	d12a      	bne.n	82b20 <vTaskPriorityInherit+0x98>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82aca:	f104 0504 	add.w	r5, r4, #4
   82ace:	4628      	mov	r0, r5
   82ad0:	f241 523d 	movw	r2, #5437	; 0x153d
   82ad4:	f2c0 0208 	movt	r2, #8
   82ad8:	4790      	blx	r2
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82ada:	f64a 2364 	movw	r3, #43620	; 0xaa64
   82ade:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ae2:	6818      	ldr	r0, [r3, #0]
   82ae4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82ae6:	62e1      	str	r1, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82ae8:	f64a 12f8 	movw	r2, #43512	; 0xa9f8
   82aec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82af0:	6813      	ldr	r3, [r2, #0]
   82af2:	4299      	cmp	r1, r3
   82af4:	d904      	bls.n	82b00 <vTaskPriorityInherit+0x78>
   82af6:	f64a 10f8 	movw	r0, #43512	; 0xa9f8
   82afa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82afe:	6001      	str	r1, [r0, #0]
   82b00:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82b04:	f64a 12fc 	movw	r2, #43516	; 0xa9fc
   82b08:	4613      	mov	r3, r2
   82b0a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b0e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   82b12:	4629      	mov	r1, r5
   82b14:	f241 42e1 	movw	r2, #5345	; 0x14e1
   82b18:	f2c0 0208 	movt	r2, #8
   82b1c:	4790      	blx	r2
   82b1e:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82b20:	f64a 2364 	movw	r3, #43620	; 0xaa64
   82b24:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b28:	6818      	ldr	r0, [r3, #0]
   82b2a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82b2c:	62e1      	str	r1, [r4, #44]	; 0x2c
   82b2e:	bd38      	pop	{r3, r4, r5, pc}

00082b30 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82b30:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82b32:	4604      	mov	r4, r0
   82b34:	b350      	cbz	r0, 82b8c <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82b36:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82b38:	6c83      	ldr	r3, [r0, #72]	; 0x48
   82b3a:	429a      	cmp	r2, r3
   82b3c:	d026      	beq.n	82b8c <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82b3e:	f100 0504 	add.w	r5, r0, #4
   82b42:	4628      	mov	r0, r5
   82b44:	f241 513d 	movw	r1, #5437	; 0x153d
   82b48:	f2c0 0108 	movt	r1, #8
   82b4c:	4788      	blx	r1
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   82b4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82b50:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82b52:	f1c0 0205 	rsb	r2, r0, #5
   82b56:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82b58:	f64a 13f8 	movw	r3, #43512	; 0xa9f8
   82b5c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b60:	6819      	ldr	r1, [r3, #0]
   82b62:	4288      	cmp	r0, r1
   82b64:	d904      	bls.n	82b70 <vTaskPriorityDisinherit+0x40>
   82b66:	f64a 12f8 	movw	r2, #43512	; 0xa9f8
   82b6a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b6e:	6010      	str	r0, [r2, #0]
   82b70:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82b74:	f64a 10fc 	movw	r0, #43516	; 0xa9fc
   82b78:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82b7c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82b80:	4629      	mov	r1, r5
   82b82:	f241 42e1 	movw	r2, #5345	; 0x14e1
   82b86:	f2c0 0208 	movt	r2, #8
   82b8a:	4790      	blx	r2
   82b8c:	bd38      	pop	{r3, r4, r5, pc}
   82b8e:	bf00      	nop

00082b90 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82b90:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82b92:	f241 53e1 	movw	r3, #5601	; 0x15e1
   82b96:	f2c0 0308 	movt	r3, #8
   82b9a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   82b9c:	f64a 20dc 	movw	r0, #43740	; 0xaadc
   82ba0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ba4:	6801      	ldr	r1, [r0, #0]
   82ba6:	bb49      	cbnz	r1, 82bfc <prvCheckForValidListAndQueue+0x6c>
		{
			vListInitialise( &xActiveTimerList1 );
   82ba8:	f64a 25b0 	movw	r5, #43696	; 0xaab0
   82bac:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82bb0:	4628      	mov	r0, r5
   82bb2:	f241 46c1 	movw	r6, #5313	; 0x14c1
   82bb6:	f2c0 0608 	movt	r6, #8
   82bba:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82bbc:	f64a 24c4 	movw	r4, #43716	; 0xaac4
   82bc0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82bc4:	4620      	mov	r0, r4
   82bc6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   82bc8:	f64a 22ac 	movw	r2, #43692	; 0xaaac
   82bcc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82bd0:	6015      	str	r5, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82bd2:	f64a 23e0 	movw	r3, #43744	; 0xaae0
   82bd6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82bda:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82bdc:	f04f 0005 	mov.w	r0, #5
   82be0:	f04f 010c 	mov.w	r1, #12
   82be4:	f04f 0200 	mov.w	r2, #0
   82be8:	f641 237d 	movw	r3, #6781	; 0x1a7d
   82bec:	f2c0 0308 	movt	r3, #8
   82bf0:	4798      	blx	r3
   82bf2:	f64a 21dc 	movw	r1, #43740	; 0xaadc
   82bf6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82bfa:	6008      	str	r0, [r1, #0]
		}
	}
	taskEXIT_CRITICAL();
   82bfc:	f241 6009 	movw	r0, #5641	; 0x1609
   82c00:	f2c0 0008 	movt	r0, #8
   82c04:	4780      	blx	r0
   82c06:	bd70      	pop	{r4, r5, r6, pc}

00082c08 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82c08:	b510      	push	{r4, lr}
   82c0a:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   82c0c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82c0e:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   82c10:	4291      	cmp	r1, r2
   82c12:	d812      	bhi.n	82c3a <prvInsertTimerInActiveList+0x32>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   82c14:	1ad0      	subs	r0, r2, r3
   82c16:	69a1      	ldr	r1, [r4, #24]
   82c18:	4288      	cmp	r0, r1
   82c1a:	d221      	bcs.n	82c60 <prvInsertTimerInActiveList+0x58>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   82c1c:	f64a 23e0 	movw	r3, #43744	; 0xaae0
   82c20:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82c24:	6818      	ldr	r0, [r3, #0]
   82c26:	f104 0104 	add.w	r1, r4, #4
   82c2a:	f241 5201 	movw	r2, #5377	; 0x1501
   82c2e:	f2c0 0208 	movt	r2, #8
   82c32:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82c34:	f04f 0000 	mov.w	r0, #0
   82c38:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   82c3a:	429a      	cmp	r2, r3
   82c3c:	d201      	bcs.n	82c42 <prvInsertTimerInActiveList+0x3a>
   82c3e:	4299      	cmp	r1, r3
   82c40:	d211      	bcs.n	82c66 <prvInsertTimerInActiveList+0x5e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82c42:	f64a 23ac 	movw	r3, #43692	; 0xaaac
   82c46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82c4a:	6818      	ldr	r0, [r3, #0]
   82c4c:	f104 0104 	add.w	r1, r4, #4
   82c50:	f241 5201 	movw	r2, #5377	; 0x1501
   82c54:	f2c0 0208 	movt	r2, #8
   82c58:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82c5a:	f04f 0000 	mov.w	r0, #0
   82c5e:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   82c60:	f04f 0001 	mov.w	r0, #1
   82c64:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   82c66:	f04f 0001 	mov.w	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   82c6a:	bd10      	pop	{r4, pc}

00082c6c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82c6c:	b510      	push	{r4, lr}
   82c6e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82c70:	f642 3391 	movw	r3, #11153	; 0x2b91
   82c74:	f2c0 0308 	movt	r3, #8
   82c78:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82c7a:	f64a 20dc 	movw	r0, #43740	; 0xaadc
   82c7e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c82:	6801      	ldr	r1, [r0, #0]
   82c84:	b1b9      	cbz	r1, 82cb6 <xTimerCreateTimerTask+0x4a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   82c86:	f04f 0204 	mov.w	r2, #4
   82c8a:	9200      	str	r2, [sp, #0]
   82c8c:	f04f 0300 	mov.w	r3, #0
   82c90:	9301      	str	r3, [sp, #4]
   82c92:	9302      	str	r3, [sp, #8]
   82c94:	9303      	str	r3, [sp, #12]
   82c96:	f642 600d 	movw	r0, #11789	; 0x2e0d
   82c9a:	f2c0 0008 	movt	r0, #8
   82c9e:	f246 3100 	movw	r1, #25344	; 0x6300
   82ca2:	f2c0 0108 	movt	r1, #8
   82ca6:	f44f 7282 	mov.w	r2, #260	; 0x104
   82caa:	f641 74a9 	movw	r4, #8105	; 0x1fa9
   82cae:	f2c0 0408 	movt	r4, #8
   82cb2:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82cb4:	b930      	cbnz	r0, 82cc4 <xTimerCreateTimerTask+0x58>
   82cb6:	f241 54cd 	movw	r4, #5581	; 0x15cd
   82cba:	f2c0 0408 	movt	r4, #8
   82cbe:	47a0      	blx	r4
   82cc0:	bf00      	nop
   82cc2:	e7fd      	b.n	82cc0 <xTimerCreateTimerTask+0x54>
	return xReturn;
}
   82cc4:	b004      	add	sp, #16
   82cc6:	bd10      	pop	{r4, pc}

00082cc8 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   82cc8:	b510      	push	{r4, lr}
   82cca:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   82ccc:	f64a 24dc 	movw	r4, #43740	; 0xaadc
   82cd0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82cd4:	6824      	ldr	r4, [r4, #0]
   82cd6:	b32c      	cbz	r4, 82d24 <xTimerGenericCommand+0x5c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   82cd8:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82cda:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   82cdc:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   82cde:	b9b3      	cbnz	r3, 82d0e <xTimerGenericCommand+0x46>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   82ce0:	f642 2361 	movw	r3, #10849	; 0x2a61
   82ce4:	f2c0 0308 	movt	r3, #8
   82ce8:	4798      	blx	r3
   82cea:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   82cec:	f64a 23dc 	movw	r3, #43740	; 0xaadc
   82cf0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82cf4:	6818      	ldr	r0, [r3, #0]
   82cf6:	a901      	add	r1, sp, #4
   82cf8:	bf07      	ittee	eq
   82cfa:	9a06      	ldreq	r2, [sp, #24]
   82cfc:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   82cfe:	2200      	movne	r2, #0
   82d00:	4613      	movne	r3, r2
   82d02:	f641 24e9 	movw	r4, #6889	; 0x1ae9
   82d06:	f2c0 0408 	movt	r4, #8
   82d0a:	47a0      	blx	r4
   82d0c:	e00c      	b.n	82d28 <xTimerGenericCommand+0x60>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   82d0e:	4620      	mov	r0, r4
   82d10:	a901      	add	r1, sp, #4
   82d12:	461a      	mov	r2, r3
   82d14:	f04f 0300 	mov.w	r3, #0
   82d18:	f641 445d 	movw	r4, #7261	; 0x1c5d
   82d1c:	f2c0 0408 	movt	r4, #8
   82d20:	47a0      	blx	r4
   82d22:	e001      	b.n	82d28 <xTimerGenericCommand+0x60>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   82d24:	f04f 0000 	mov.w	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   82d28:	b004      	add	sp, #16
   82d2a:	bd10      	pop	{r4, pc}

00082d2c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   82d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82d30:	b085      	sub	sp, #20
   82d32:	4682      	mov	sl, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   82d34:	f242 23e5 	movw	r3, #8933	; 0x22e5
   82d38:	f2c0 0308 	movt	r3, #8
   82d3c:	4798      	blx	r3
   82d3e:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
   82d40:	f64a 20d8 	movw	r0, #43736	; 0xaad8
   82d44:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82d48:	6801      	ldr	r1, [r0, #0]
   82d4a:	4589      	cmp	r9, r1
   82d4c:	d24f      	bcs.n	82dee <prvSampleTimeNow+0xc2>
   82d4e:	e02b      	b.n	82da8 <prvSampleTimeNow+0x7c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82d50:	68dc      	ldr	r4, [r3, #12]
   82d52:	6826      	ldr	r6, [r4, #0]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82d54:	68dd      	ldr	r5, [r3, #12]
   82d56:	68ec      	ldr	r4, [r5, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82d58:	f104 0504 	add.w	r5, r4, #4
   82d5c:	4628      	mov	r0, r5
   82d5e:	47c0      	blx	r8

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82d60:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82d62:	4620      	mov	r0, r4
   82d64:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82d66:	69e0      	ldr	r0, [r4, #28]
   82d68:	2801      	cmp	r0, #1
   82d6a:	d12c      	bne.n	82dc6 <prvSampleTimeNow+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82d6c:	69a3      	ldr	r3, [r4, #24]
   82d6e:	18f2      	adds	r2, r6, r3
			if( xReloadTime > xNextExpireTime )
   82d70:	42b2      	cmp	r2, r6
   82d72:	d909      	bls.n	82d88 <prvSampleTimeNow+0x5c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82d74:	6062      	str	r2, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82d76:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82d78:	6838      	ldr	r0, [r7, #0]
   82d7a:	4629      	mov	r1, r5
   82d7c:	f241 5301 	movw	r3, #5377	; 0x1501
   82d80:	f2c0 0308 	movt	r3, #8
   82d84:	4798      	blx	r3
   82d86:	e01e      	b.n	82dc6 <prvSampleTimeNow+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82d88:	f8cd b000 	str.w	fp, [sp]
   82d8c:	4620      	mov	r0, r4
   82d8e:	4659      	mov	r1, fp
   82d90:	4632      	mov	r2, r6
   82d92:	465b      	mov	r3, fp
   82d94:	9c03      	ldr	r4, [sp, #12]
   82d96:	47a0      	blx	r4
				configASSERT( xResult );
   82d98:	b9a8      	cbnz	r0, 82dc6 <prvSampleTimeNow+0x9a>
   82d9a:	f241 56cd 	movw	r6, #5581	; 0x15cd
   82d9e:	f2c0 0608 	movt	r6, #8
   82da2:	47b0      	blx	r6
   82da4:	bf00      	nop
   82da6:	e7fd      	b.n	82da4 <prvSampleTimeNow+0x78>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82da8:	f64a 27ac 	movw	r7, #43692	; 0xaaac
   82dac:	f2c2 0707 	movt	r7, #8199	; 0x2007
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82db0:	f241 583d 	movw	r8, #5437	; 0x153d
   82db4:	f2c0 0808 	movt	r8, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82db8:	f04f 0b00 	mov.w	fp, #0
   82dbc:	f642 43c9 	movw	r3, #11465	; 0x2cc9
   82dc0:	f2c0 0308 	movt	r3, #8
   82dc4:	9303      	str	r3, [sp, #12]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82dc6:	683b      	ldr	r3, [r7, #0]
   82dc8:	6818      	ldr	r0, [r3, #0]
   82dca:	2800      	cmp	r0, #0
   82dcc:	d1c0      	bne.n	82d50 <prvSampleTimeNow+0x24>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82dce:	f64a 22e0 	movw	r2, #43744	; 0xaae0
   82dd2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82dd6:	6811      	ldr	r1, [r2, #0]
   82dd8:	f64a 20ac 	movw	r0, #43692	; 0xaaac
   82ddc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82de0:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82de2:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82de4:	f04f 0301 	mov.w	r3, #1
   82de8:	f8ca 3000 	str.w	r3, [sl]
   82dec:	e003      	b.n	82df6 <prvSampleTimeNow+0xca>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82dee:	f04f 0200 	mov.w	r2, #0
   82df2:	f8ca 2000 	str.w	r2, [sl]
	}

	xLastTime = xTimeNow;
   82df6:	f64a 22d8 	movw	r2, #43736	; 0xaad8
   82dfa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82dfe:	f8c2 9000 	str.w	r9, [r2]

	return xTimeNow;
}
   82e02:	4648      	mov	r0, r9
   82e04:	b005      	add	sp, #20
   82e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e0a:	bf00      	nop

00082e0c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e10:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82e12:	f64a 2bac 	movw	fp, #43692	; 0xaaac
   82e16:	f2c2 0b07 	movt	fp, #8199	; 0x2007
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82e1a:	f242 23d1 	movw	r3, #8913	; 0x22d1
   82e1e:	f2c0 0308 	movt	r3, #8
   82e22:	9303      	str	r3, [sp, #12]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82e24:	f642 5a2d 	movw	sl, #11565	; 0x2d2d
   82e28:	f2c0 0a08 	movt	sl, #8
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82e2c:	f8db 0000 	ldr.w	r0, [fp]
   82e30:	6802      	ldr	r2, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
   82e32:	2a00      	cmp	r2, #0
   82e34:	f000 80c4 	beq.w	82fc0 <prvTimerTask+0x1b4>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82e38:	68c7      	ldr	r7, [r0, #12]
   82e3a:	683d      	ldr	r5, [r7, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82e3c:	9b03      	ldr	r3, [sp, #12]
   82e3e:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82e40:	a804      	add	r0, sp, #16
   82e42:	47d0      	blx	sl
   82e44:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82e46:	9804      	ldr	r0, [sp, #16]
   82e48:	2800      	cmp	r0, #0
   82e4a:	d150      	bne.n	82eee <prvTimerTask+0xe2>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82e4c:	42b5      	cmp	r5, r6
   82e4e:	d837      	bhi.n	82ec0 <prvTimerTask+0xb4>
			{
				xTaskResumeAll();
   82e50:	f242 4799 	movw	r7, #9369	; 0x2499
   82e54:	f2c0 0708 	movt	r7, #8
   82e58:	47b8      	blx	r7
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82e5a:	f8db 3000 	ldr.w	r3, [fp]
   82e5e:	68d8      	ldr	r0, [r3, #12]
   82e60:	68c4      	ldr	r4, [r0, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82e62:	f104 0004 	add.w	r0, r4, #4
   82e66:	f241 523d 	movw	r2, #5437	; 0x153d
   82e6a:	f2c0 0208 	movt	r2, #8
   82e6e:	4790      	blx	r2
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82e70:	69e1      	ldr	r1, [r4, #28]
   82e72:	2901      	cmp	r1, #1
   82e74:	d11e      	bne.n	82eb4 <prvTimerTask+0xa8>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82e76:	69a7      	ldr	r7, [r4, #24]
   82e78:	4620      	mov	r0, r4
   82e7a:	19e9      	adds	r1, r5, r7
   82e7c:	4632      	mov	r2, r6
   82e7e:	462b      	mov	r3, r5
   82e80:	f642 4609 	movw	r6, #11273	; 0x2c09
   82e84:	f2c0 0608 	movt	r6, #8
   82e88:	47b0      	blx	r6
   82e8a:	2801      	cmp	r0, #1
   82e8c:	d112      	bne.n	82eb4 <prvTimerTask+0xa8>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82e8e:	f04f 0300 	mov.w	r3, #0
   82e92:	9300      	str	r3, [sp, #0]
   82e94:	4620      	mov	r0, r4
   82e96:	4619      	mov	r1, r3
   82e98:	462a      	mov	r2, r5
   82e9a:	f642 45c9 	movw	r5, #11465	; 0x2cc9
   82e9e:	f2c0 0508 	movt	r5, #8
   82ea2:	47a8      	blx	r5
			configASSERT( xResult );
   82ea4:	b930      	cbnz	r0, 82eb4 <prvTimerTask+0xa8>
   82ea6:	f241 57cd 	movw	r7, #5581	; 0x15cd
   82eaa:	f2c0 0708 	movt	r7, #8
   82eae:	47b8      	blx	r7
   82eb0:	bf00      	nop
   82eb2:	e7fd      	b.n	82eb0 <prvTimerTask+0xa4>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82eb6:	4620      	mov	r0, r4
   82eb8:	4798      	blx	r3
   82eba:	e01d      	b.n	82ef8 <prvTimerTask+0xec>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   82ebc:	f04f 0500 	mov.w	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82ec0:	f64a 21dc 	movw	r1, #43740	; 0xaadc
   82ec4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82ec8:	6808      	ldr	r0, [r1, #0]
   82eca:	1ba9      	subs	r1, r5, r6
   82ecc:	f641 66d5 	movw	r6, #7893	; 0x1ed5
   82ed0:	f2c0 0608 	movt	r6, #8
   82ed4:	47b0      	blx	r6

				if( xTaskResumeAll() == pdFALSE )
   82ed6:	f242 4499 	movw	r4, #9369	; 0x2499
   82eda:	f2c0 0408 	movt	r4, #8
   82ede:	47a0      	blx	r4
   82ee0:	b950      	cbnz	r0, 82ef8 <prvTimerTask+0xec>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82ee2:	f241 55bd 	movw	r5, #5565	; 0x15bd
   82ee6:	f2c0 0508 	movt	r5, #8
   82eea:	47a8      	blx	r5
   82eec:	e004      	b.n	82ef8 <prvTimerTask+0xec>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   82eee:	f242 4299 	movw	r2, #9369	; 0x2499
   82ef2:	f2c0 0208 	movt	r2, #8
   82ef6:	4790      	blx	r2
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82ef8:	a804      	add	r0, sp, #16
   82efa:	47d0      	blx	sl
   82efc:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82efe:	f64a 26dc 	movw	r6, #43740	; 0xaadc
   82f02:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82f06:	f641 550d 	movw	r5, #7437	; 0x1d0d
   82f0a:	f2c0 0508 	movt	r5, #8
		if( pxTimer != NULL )
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82f0e:	f241 583d 	movw	r8, #5437	; 0x153d
   82f12:	f2c0 0808 	movt	r8, #8
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82f16:	f642 4909 	movw	r9, #11273	; 0x2c09
   82f1a:	f2c0 0908 	movt	r9, #8
   82f1e:	e046      	b.n	82fae <prvTimerTask+0x1a2>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82f20:	9c07      	ldr	r4, [sp, #28]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82f22:	b124      	cbz	r4, 82f2e <prvTimerTask+0x122>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82f24:	6960      	ldr	r0, [r4, #20]
   82f26:	b110      	cbz	r0, 82f2e <prvTimerTask+0x122>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82f28:	f104 0004 	add.w	r0, r4, #4
   82f2c:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82f2e:	9a05      	ldr	r2, [sp, #20]
   82f30:	2a02      	cmp	r2, #2
   82f32:	d026      	beq.n	82f82 <prvTimerTask+0x176>
   82f34:	2a03      	cmp	r2, #3
   82f36:	d034      	beq.n	82fa2 <prvTimerTask+0x196>
   82f38:	2a00      	cmp	r2, #0
   82f3a:	d138      	bne.n	82fae <prvTimerTask+0x1a2>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82f3c:	9b06      	ldr	r3, [sp, #24]
   82f3e:	69a1      	ldr	r1, [r4, #24]
   82f40:	4620      	mov	r0, r4
   82f42:	1859      	adds	r1, r3, r1
   82f44:	463a      	mov	r2, r7
   82f46:	47c8      	blx	r9
   82f48:	2801      	cmp	r0, #1
   82f4a:	d130      	bne.n	82fae <prvTimerTask+0x1a2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82f4e:	4620      	mov	r0, r4
   82f50:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82f52:	69e0      	ldr	r0, [r4, #28]
   82f54:	2801      	cmp	r0, #1
   82f56:	d12a      	bne.n	82fae <prvTimerTask+0x1a2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82f58:	69a2      	ldr	r2, [r4, #24]
   82f5a:	f04f 0300 	mov.w	r3, #0
   82f5e:	9300      	str	r3, [sp, #0]
   82f60:	4620      	mov	r0, r4
   82f62:	4619      	mov	r1, r3
   82f64:	9c06      	ldr	r4, [sp, #24]
   82f66:	1912      	adds	r2, r2, r4
   82f68:	f642 44c9 	movw	r4, #11465	; 0x2cc9
   82f6c:	f2c0 0408 	movt	r4, #8
   82f70:	47a0      	blx	r4
						configASSERT( xResult );
   82f72:	b9e0      	cbnz	r0, 82fae <prvTimerTask+0x1a2>
   82f74:	f241 55cd 	movw	r5, #5581	; 0x15cd
   82f78:	f2c0 0508 	movt	r5, #8
   82f7c:	47a8      	blx	r5
   82f7e:	bf00      	nop
   82f80:	e7fd      	b.n	82f7e <prvTimerTask+0x172>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82f82:	9b06      	ldr	r3, [sp, #24]
   82f84:	61a3      	str	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82f86:	b933      	cbnz	r3, 82f96 <prvTimerTask+0x18a>
   82f88:	f241 56cd 	movw	r6, #5581	; 0x15cd
   82f8c:	f2c0 0608 	movt	r6, #8
   82f90:	47b0      	blx	r6
   82f92:	bf00      	nop
   82f94:	e7fd      	b.n	82f92 <prvTimerTask+0x186>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82f96:	4620      	mov	r0, r4
   82f98:	18f9      	adds	r1, r7, r3
   82f9a:	463a      	mov	r2, r7
   82f9c:	463b      	mov	r3, r7
   82f9e:	47c8      	blx	r9
   82fa0:	e005      	b.n	82fae <prvTimerTask+0x1a2>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   82fa2:	4620      	mov	r0, r4
   82fa4:	f641 015d 	movw	r1, #6237	; 0x185d
   82fa8:	f2c0 0108 	movt	r1, #8
   82fac:	4788      	blx	r1

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82fae:	6830      	ldr	r0, [r6, #0]
   82fb0:	a905      	add	r1, sp, #20
   82fb2:	f04f 0200 	mov.w	r2, #0
   82fb6:	4613      	mov	r3, r2
   82fb8:	47a8      	blx	r5
   82fba:	2800      	cmp	r0, #0
   82fbc:	d1b0      	bne.n	82f20 <prvTimerTask+0x114>
   82fbe:	e735      	b.n	82e2c <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82fc0:	9903      	ldr	r1, [sp, #12]
   82fc2:	4788      	blx	r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82fc4:	a804      	add	r0, sp, #16
   82fc6:	47d0      	blx	sl
   82fc8:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82fca:	9c04      	ldr	r4, [sp, #16]
   82fcc:	2c00      	cmp	r4, #0
   82fce:	f43f af75 	beq.w	82ebc <prvTimerTask+0xb0>
   82fd2:	e78c      	b.n	82eee <prvTimerTask+0xe2>

00082fd4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   82fd6:	b083      	sub	sp, #12
   82fd8:	4604      	mov	r4, r0
   82fda:	460d      	mov	r5, r1
	uint32_t val = 0;
   82fdc:	f04f 0300 	mov.w	r3, #0
   82fe0:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82fe2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82fe6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82fea:	4284      	cmp	r4, r0
   82fec:	d10d      	bne.n	8300a <usart_serial_getchar+0x36>
		while (uart_read((Uart*)p_usart, data));
   82fee:	f44f 6600 	mov.w	r6, #2048	; 0x800
   82ff2:	f2c4 060e 	movt	r6, #16398	; 0x400e
   82ff6:	f241 0775 	movw	r7, #4213	; 0x1075
   82ffa:	f2c0 0708 	movt	r7, #8
   82ffe:	4630      	mov	r0, r6
   83000:	4629      	mov	r1, r5
   83002:	47b8      	blx	r7
   83004:	2800      	cmp	r0, #0
   83006:	d1fa      	bne.n	82ffe <usart_serial_getchar+0x2a>
   83008:	e02b      	b.n	83062 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8300a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8300e:	f2c4 0109 	movt	r1, #16393	; 0x4009
   83012:	428c      	cmp	r4, r1
   83014:	d10f      	bne.n	83036 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
   83016:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   8301a:	f2c4 0609 	movt	r6, #16393	; 0x4009
   8301e:	f241 07ad 	movw	r7, #4269	; 0x10ad
   83022:	f2c0 0708 	movt	r7, #8
   83026:	4630      	mov	r0, r6
   83028:	a901      	add	r1, sp, #4
   8302a:	47b8      	blx	r7
   8302c:	2800      	cmp	r0, #0
   8302e:	d1fa      	bne.n	83026 <usart_serial_getchar+0x52>
		*data = (uint8_t)(val & 0xFF);
   83030:	9801      	ldr	r0, [sp, #4]
   83032:	7028      	strb	r0, [r5, #0]
   83034:	e02b      	b.n	8308e <usart_serial_getchar+0xba>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   83036:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8303a:	f2c4 0209 	movt	r2, #16393	; 0x4009
   8303e:	4294      	cmp	r4, r2
   83040:	d10f      	bne.n	83062 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
   83042:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   83046:	f2c4 0409 	movt	r4, #16393	; 0x4009
   8304a:	f241 06ad 	movw	r6, #4269	; 0x10ad
   8304e:	f2c0 0608 	movt	r6, #8
   83052:	4620      	mov	r0, r4
   83054:	a901      	add	r1, sp, #4
   83056:	47b0      	blx	r6
   83058:	2800      	cmp	r0, #0
   8305a:	d1fa      	bne.n	83052 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   8305c:	9b01      	ldr	r3, [sp, #4]
   8305e:	702b      	strb	r3, [r5, #0]
   83060:	e02a      	b.n	830b8 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   83062:	f04f 0100 	mov.w	r1, #0
   83066:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8306a:	428c      	cmp	r4, r1
   8306c:	d10f      	bne.n	8308e <usart_serial_getchar+0xba>
		while (usart_read(p_usart, &val));
   8306e:	f04f 0400 	mov.w	r4, #0
   83072:	f2c4 040a 	movt	r4, #16394	; 0x400a
   83076:	f241 06ad 	movw	r6, #4269	; 0x10ad
   8307a:	f2c0 0608 	movt	r6, #8
   8307e:	4620      	mov	r0, r4
   83080:	a901      	add	r1, sp, #4
   83082:	47b0      	blx	r6
   83084:	2800      	cmp	r0, #0
   83086:	d1fa      	bne.n	8307e <usart_serial_getchar+0xaa>
		*data = (uint8_t)(val & 0xFF);
   83088:	9801      	ldr	r0, [sp, #4]
   8308a:	7028      	strb	r0, [r5, #0]
   8308c:	e014      	b.n	830b8 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8308e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83092:	f2c4 020a 	movt	r2, #16394	; 0x400a
   83096:	4294      	cmp	r4, r2
   83098:	d10e      	bne.n	830b8 <usart_serial_getchar+0xe4>
		while (usart_read(p_usart, &val));
   8309a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   8309e:	f2c4 040a 	movt	r4, #16394	; 0x400a
   830a2:	f241 06ad 	movw	r6, #4269	; 0x10ad
   830a6:	f2c0 0608 	movt	r6, #8
   830aa:	4620      	mov	r0, r4
   830ac:	a901      	add	r1, sp, #4
   830ae:	47b0      	blx	r6
   830b0:	2800      	cmp	r0, #0
   830b2:	d1fa      	bne.n	830aa <usart_serial_getchar+0xd6>
		*data = (uint8_t)(val & 0xFF);
   830b4:	9b01      	ldr	r3, [sp, #4]
   830b6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   830b8:	b003      	add	sp, #12
   830ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000830bc <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   830bc:	b570      	push	{r4, r5, r6, lr}
   830be:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   830c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   830c4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   830c8:	4298      	cmp	r0, r3
   830ca:	d10f      	bne.n	830ec <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   830cc:	f44f 6500 	mov.w	r5, #2048	; 0x800
   830d0:	f2c4 050e 	movt	r5, #16398	; 0x400e
   830d4:	f241 065d 	movw	r6, #4189	; 0x105d
   830d8:	f2c0 0608 	movt	r6, #8
   830dc:	4628      	mov	r0, r5
   830de:	4621      	mov	r1, r4
   830e0:	47b0      	blx	r6
   830e2:	2800      	cmp	r0, #0
   830e4:	d1fa      	bne.n	830dc <usart_serial_putchar+0x20>
		return 1;
   830e6:	f04f 0001 	mov.w	r0, #1
   830ea:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   830ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   830f0:	f2c4 0109 	movt	r1, #16393	; 0x4009
   830f4:	4288      	cmp	r0, r1
   830f6:	d10f      	bne.n	83118 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   830f8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   830fc:	f2c4 0509 	movt	r5, #16393	; 0x4009
   83100:	f241 068d 	movw	r6, #4237	; 0x108d
   83104:	f2c0 0608 	movt	r6, #8
   83108:	4628      	mov	r0, r5
   8310a:	4621      	mov	r1, r4
   8310c:	47b0      	blx	r6
   8310e:	2800      	cmp	r0, #0
   83110:	d1fa      	bne.n	83108 <usart_serial_putchar+0x4c>
		return 1;
   83112:	f04f 0001 	mov.w	r0, #1
   83116:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   83118:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8311c:	f2c4 0209 	movt	r2, #16393	; 0x4009
   83120:	4290      	cmp	r0, r2
   83122:	d10f      	bne.n	83144 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   83124:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   83128:	f2c4 0509 	movt	r5, #16393	; 0x4009
   8312c:	f241 068d 	movw	r6, #4237	; 0x108d
   83130:	f2c0 0608 	movt	r6, #8
   83134:	4628      	mov	r0, r5
   83136:	4621      	mov	r1, r4
   83138:	47b0      	blx	r6
   8313a:	2800      	cmp	r0, #0
   8313c:	d1fa      	bne.n	83134 <usart_serial_putchar+0x78>
		return 1;
   8313e:	f04f 0001 	mov.w	r0, #1
   83142:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   83144:	f04f 0300 	mov.w	r3, #0
   83148:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8314c:	4298      	cmp	r0, r3
   8314e:	d10f      	bne.n	83170 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   83150:	f04f 0500 	mov.w	r5, #0
   83154:	f2c4 050a 	movt	r5, #16394	; 0x400a
   83158:	f241 068d 	movw	r6, #4237	; 0x108d
   8315c:	f2c0 0608 	movt	r6, #8
   83160:	4628      	mov	r0, r5
   83162:	4621      	mov	r1, r4
   83164:	47b0      	blx	r6
   83166:	2800      	cmp	r0, #0
   83168:	d1fa      	bne.n	83160 <usart_serial_putchar+0xa4>
		return 1;
   8316a:	f04f 0001 	mov.w	r0, #1
   8316e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83170:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   83174:	f2c4 010a 	movt	r1, #16394	; 0x400a
   83178:	4288      	cmp	r0, r1
   8317a:	d10f      	bne.n	8319c <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   8317c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83180:	f2c4 050a 	movt	r5, #16394	; 0x400a
   83184:	f241 068d 	movw	r6, #4237	; 0x108d
   83188:	f2c0 0608 	movt	r6, #8
   8318c:	4628      	mov	r0, r5
   8318e:	4621      	mov	r1, r4
   83190:	47b0      	blx	r6
   83192:	2800      	cmp	r0, #0
   83194:	d1fa      	bne.n	8318c <usart_serial_putchar+0xd0>
		return 1;
   83196:	f04f 0001 	mov.w	r0, #1
   8319a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8319c:	f04f 0000 	mov.w	r0, #0
}
   831a0:	bd70      	pop	{r4, r5, r6, pc}
   831a2:	bf00      	nop

000831a4 <configure_console>:


void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio.
*  Note that the baudrate, parity and other parameters must be set in */
{
   831a4:	b530      	push	{r4, r5, lr}
   831a6:	b085      	sub	sp, #20
   831a8:	f04f 0008 	mov.w	r0, #8
   831ac:	f640 458d 	movw	r5, #3213	; 0xc8d
   831b0:	f2c0 0508 	movt	r5, #8
   831b4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   831b6:	f44f 6400 	mov.w	r4, #2048	; 0x800
   831ba:	f2c4 040e 	movt	r4, #16398	; 0x400e
   831be:	f64a 3350 	movw	r3, #43856	; 0xab50
   831c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   831c6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   831c8:	f64a 304c 	movw	r0, #43852	; 0xab4c
   831cc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   831d0:	f243 02bd 	movw	r2, #12477	; 0x30bd
   831d4:	f2c0 0208 	movt	r2, #8
   831d8:	6002      	str	r2, [r0, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   831da:	f64a 3148 	movw	r1, #43848	; 0xab48
   831de:	f2c2 0107 	movt	r1, #8199	; 0x2007
   831e2:	f642 73d5 	movw	r3, #12245	; 0x2fd5
   831e6:	f2c0 0308 	movt	r3, #8
   831ea:	600b      	str	r3, [r1, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   831ec:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   831f0:	f2c0 5001 	movt	r0, #1281	; 0x501
   831f4:	9000      	str	r0, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   831f6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   831fa:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   831fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
   83200:	9102      	str	r1, [sp, #8]
   83202:	f04f 0008 	mov.w	r0, #8
   83206:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   83208:	4620      	mov	r0, r4
   8320a:	4669      	mov	r1, sp
   8320c:	f241 0519 	movw	r5, #4121	; 0x1019
   83210:	f2c0 0508 	movt	r5, #8
   83214:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   83216:	f240 0520 	movw	r5, #32
   8321a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8321e:	682c      	ldr	r4, [r5, #0]
   83220:	68a0      	ldr	r0, [r4, #8]
   83222:	f04f 0100 	mov.w	r1, #0
   83226:	f643 34a7 	movw	r4, #15271	; 0x3ba7
   8322a:	f2c0 0408 	movt	r4, #8
   8322e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   83230:	682b      	ldr	r3, [r5, #0]
   83232:	6858      	ldr	r0, [r3, #4]
   83234:	f04f 0100 	mov.w	r1, #0
   83238:	47a0      	blx	r4
	};
	
	/* Configure console UART */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   8323a:	b005      	add	sp, #20
   8323c:	bd30      	pop	{r4, r5, pc}
   8323e:	bf00      	nop

00083240 <main>:




int main (void)
{
   83240:	b510      	push	{r4, lr}
   83242:	b084      	sub	sp, #16
	sysclk_init();			// Initialize system clock
   83244:	f240 13a5 	movw	r3, #421	; 0x1a5
   83248:	f2c0 0308 	movt	r3, #8
   8324c:	4798      	blx	r3
	board_init();			// Initialize Arduino Due board
   8324e:	f240 6089 	movw	r0, #1673	; 0x689
   83252:	f2c0 0008 	movt	r0, #8
   83256:	4780      	blx	r0
	configure_console();	// Initialize terminal window
   83258:	f243 11a5 	movw	r1, #12709	; 0x31a5
   8325c:	f2c0 0108 	movt	r1, #8
   83260:	4788      	blx	r1
	adc_setup();			// Initialize ADC
   83262:	f240 4255 	movw	r2, #1109	; 0x455
   83266:	f2c0 0208 	movt	r2, #8
   8326a:	4790      	blx	r2
	pwm_setup();			// Initialize PWM
   8326c:	f240 348d 	movw	r4, #909	; 0x38d
   83270:	f2c0 0408 	movt	r4, #8
   83274:	47a0      	blx	r4
	motorshield_setup();	// Initialize motor shield
   83276:	f240 236d 	movw	r3, #621	; 0x26d
   8327a:	f2c0 0308 	movt	r3, #8
   8327e:	4798      	blx	r3
	delay_init();			// Initialize delay
   83280:	f240 201d 	movw	r0, #541	; 0x21d
   83284:	f2c0 0008 	movt	r0, #8
   83288:	4780      	blx	r0
	//pid_control();
	


	/* Create the first task for monitoring the procesor activity */
	if (xTaskCreate(pid_control, (const signed char * const) "PID Control", 1024, NULL, 1, NULL) != pdPASS)
   8328a:	f04f 0101 	mov.w	r1, #1
   8328e:	9100      	str	r1, [sp, #0]
   83290:	f04f 0300 	mov.w	r3, #0
   83294:	9301      	str	r3, [sp, #4]
   83296:	9302      	str	r3, [sp, #8]
   83298:	9303      	str	r3, [sp, #12]
   8329a:	f240 2099 	movw	r0, #665	; 0x299
   8329e:	f2c0 0008 	movt	r0, #8
   832a2:	f246 3108 	movw	r1, #25352	; 0x6308
   832a6:	f2c0 0108 	movt	r1, #8
   832aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   832ae:	f641 74a9 	movw	r4, #8105	; 0x1fa9
   832b2:	f2c0 0408 	movt	r4, #8
   832b6:	47a0      	blx	r4
   832b8:	2801      	cmp	r0, #1
   832ba:	d002      	beq.n	832c2 <main+0x82>
	{
		printf("Failed to create PID Control task\r\n");
   832bc:	4805      	ldr	r0, [pc, #20]	; (832d4 <main+0x94>)
   832be:	4a06      	ldr	r2, [pc, #24]	; (832d8 <main+0x98>)
   832c0:	4790      	blx	r2
	}
		
	
	/* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   832c2:	f242 2349 	movw	r3, #8777	; 0x2249
   832c6:	f2c0 0308 	movt	r3, #8
   832ca:	4798      	blx	r3
}
   832cc:	f04f 0000 	mov.w	r0, #0
   832d0:	b004      	add	sp, #16
   832d2:	bd10      	pop	{r4, pc}
   832d4:	00086314 	.word	0x00086314
   832d8:	00083b45 	.word	0x00083b45

000832dc <__aeabi_drsub>:
   832dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   832e0:	e002      	b.n	832e8 <__adddf3>
   832e2:	bf00      	nop

000832e4 <__aeabi_dsub>:
   832e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000832e8 <__adddf3>:
   832e8:	b530      	push	{r4, r5, lr}
   832ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   832ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   832f2:	ea94 0f05 	teq	r4, r5
   832f6:	bf08      	it	eq
   832f8:	ea90 0f02 	teqeq	r0, r2
   832fc:	bf1f      	itttt	ne
   832fe:	ea54 0c00 	orrsne.w	ip, r4, r0
   83302:	ea55 0c02 	orrsne.w	ip, r5, r2
   83306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8330a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8330e:	f000 80e2 	beq.w	834d6 <__adddf3+0x1ee>
   83312:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8331a:	bfb8      	it	lt
   8331c:	426d      	neglt	r5, r5
   8331e:	dd0c      	ble.n	8333a <__adddf3+0x52>
   83320:	442c      	add	r4, r5
   83322:	ea80 0202 	eor.w	r2, r0, r2
   83326:	ea81 0303 	eor.w	r3, r1, r3
   8332a:	ea82 0000 	eor.w	r0, r2, r0
   8332e:	ea83 0101 	eor.w	r1, r3, r1
   83332:	ea80 0202 	eor.w	r2, r0, r2
   83336:	ea81 0303 	eor.w	r3, r1, r3
   8333a:	2d36      	cmp	r5, #54	; 0x36
   8333c:	bf88      	it	hi
   8333e:	bd30      	pophi	{r4, r5, pc}
   83340:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83344:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83348:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8334c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83350:	d002      	beq.n	83358 <__adddf3+0x70>
   83352:	4240      	negs	r0, r0
   83354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83358:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8335c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83364:	d002      	beq.n	8336c <__adddf3+0x84>
   83366:	4252      	negs	r2, r2
   83368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8336c:	ea94 0f05 	teq	r4, r5
   83370:	f000 80a7 	beq.w	834c2 <__adddf3+0x1da>
   83374:	f1a4 0401 	sub.w	r4, r4, #1
   83378:	f1d5 0e20 	rsbs	lr, r5, #32
   8337c:	db0d      	blt.n	8339a <__adddf3+0xb2>
   8337e:	fa02 fc0e 	lsl.w	ip, r2, lr
   83382:	fa22 f205 	lsr.w	r2, r2, r5
   83386:	1880      	adds	r0, r0, r2
   83388:	f141 0100 	adc.w	r1, r1, #0
   8338c:	fa03 f20e 	lsl.w	r2, r3, lr
   83390:	1880      	adds	r0, r0, r2
   83392:	fa43 f305 	asr.w	r3, r3, r5
   83396:	4159      	adcs	r1, r3
   83398:	e00e      	b.n	833b8 <__adddf3+0xd0>
   8339a:	f1a5 0520 	sub.w	r5, r5, #32
   8339e:	f10e 0e20 	add.w	lr, lr, #32
   833a2:	2a01      	cmp	r2, #1
   833a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   833a8:	bf28      	it	cs
   833aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   833ae:	fa43 f305 	asr.w	r3, r3, r5
   833b2:	18c0      	adds	r0, r0, r3
   833b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   833b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   833bc:	d507      	bpl.n	833ce <__adddf3+0xe6>
   833be:	f04f 0e00 	mov.w	lr, #0
   833c2:	f1dc 0c00 	rsbs	ip, ip, #0
   833c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   833ca:	eb6e 0101 	sbc.w	r1, lr, r1
   833ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   833d2:	d31b      	bcc.n	8340c <__adddf3+0x124>
   833d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   833d8:	d30c      	bcc.n	833f4 <__adddf3+0x10c>
   833da:	0849      	lsrs	r1, r1, #1
   833dc:	ea5f 0030 	movs.w	r0, r0, rrx
   833e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   833e4:	f104 0401 	add.w	r4, r4, #1
   833e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   833ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   833f0:	f080 809a 	bcs.w	83528 <__adddf3+0x240>
   833f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   833f8:	bf08      	it	eq
   833fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   833fe:	f150 0000 	adcs.w	r0, r0, #0
   83402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83406:	ea41 0105 	orr.w	r1, r1, r5
   8340a:	bd30      	pop	{r4, r5, pc}
   8340c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83410:	4140      	adcs	r0, r0
   83412:	eb41 0101 	adc.w	r1, r1, r1
   83416:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8341a:	f1a4 0401 	sub.w	r4, r4, #1
   8341e:	d1e9      	bne.n	833f4 <__adddf3+0x10c>
   83420:	f091 0f00 	teq	r1, #0
   83424:	bf04      	itt	eq
   83426:	4601      	moveq	r1, r0
   83428:	2000      	moveq	r0, #0
   8342a:	fab1 f381 	clz	r3, r1
   8342e:	bf08      	it	eq
   83430:	3320      	addeq	r3, #32
   83432:	f1a3 030b 	sub.w	r3, r3, #11
   83436:	f1b3 0220 	subs.w	r2, r3, #32
   8343a:	da0c      	bge.n	83456 <__adddf3+0x16e>
   8343c:	320c      	adds	r2, #12
   8343e:	dd08      	ble.n	83452 <__adddf3+0x16a>
   83440:	f102 0c14 	add.w	ip, r2, #20
   83444:	f1c2 020c 	rsb	r2, r2, #12
   83448:	fa01 f00c 	lsl.w	r0, r1, ip
   8344c:	fa21 f102 	lsr.w	r1, r1, r2
   83450:	e00c      	b.n	8346c <__adddf3+0x184>
   83452:	f102 0214 	add.w	r2, r2, #20
   83456:	bfd8      	it	le
   83458:	f1c2 0c20 	rsble	ip, r2, #32
   8345c:	fa01 f102 	lsl.w	r1, r1, r2
   83460:	fa20 fc0c 	lsr.w	ip, r0, ip
   83464:	bfdc      	itt	le
   83466:	ea41 010c 	orrle.w	r1, r1, ip
   8346a:	4090      	lslle	r0, r2
   8346c:	1ae4      	subs	r4, r4, r3
   8346e:	bfa2      	ittt	ge
   83470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83474:	4329      	orrge	r1, r5
   83476:	bd30      	popge	{r4, r5, pc}
   83478:	ea6f 0404 	mvn.w	r4, r4
   8347c:	3c1f      	subs	r4, #31
   8347e:	da1c      	bge.n	834ba <__adddf3+0x1d2>
   83480:	340c      	adds	r4, #12
   83482:	dc0e      	bgt.n	834a2 <__adddf3+0x1ba>
   83484:	f104 0414 	add.w	r4, r4, #20
   83488:	f1c4 0220 	rsb	r2, r4, #32
   8348c:	fa20 f004 	lsr.w	r0, r0, r4
   83490:	fa01 f302 	lsl.w	r3, r1, r2
   83494:	ea40 0003 	orr.w	r0, r0, r3
   83498:	fa21 f304 	lsr.w	r3, r1, r4
   8349c:	ea45 0103 	orr.w	r1, r5, r3
   834a0:	bd30      	pop	{r4, r5, pc}
   834a2:	f1c4 040c 	rsb	r4, r4, #12
   834a6:	f1c4 0220 	rsb	r2, r4, #32
   834aa:	fa20 f002 	lsr.w	r0, r0, r2
   834ae:	fa01 f304 	lsl.w	r3, r1, r4
   834b2:	ea40 0003 	orr.w	r0, r0, r3
   834b6:	4629      	mov	r1, r5
   834b8:	bd30      	pop	{r4, r5, pc}
   834ba:	fa21 f004 	lsr.w	r0, r1, r4
   834be:	4629      	mov	r1, r5
   834c0:	bd30      	pop	{r4, r5, pc}
   834c2:	f094 0f00 	teq	r4, #0
   834c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   834ca:	bf06      	itte	eq
   834cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   834d0:	3401      	addeq	r4, #1
   834d2:	3d01      	subne	r5, #1
   834d4:	e74e      	b.n	83374 <__adddf3+0x8c>
   834d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   834da:	bf18      	it	ne
   834dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   834e0:	d029      	beq.n	83536 <__adddf3+0x24e>
   834e2:	ea94 0f05 	teq	r4, r5
   834e6:	bf08      	it	eq
   834e8:	ea90 0f02 	teqeq	r0, r2
   834ec:	d005      	beq.n	834fa <__adddf3+0x212>
   834ee:	ea54 0c00 	orrs.w	ip, r4, r0
   834f2:	bf04      	itt	eq
   834f4:	4619      	moveq	r1, r3
   834f6:	4610      	moveq	r0, r2
   834f8:	bd30      	pop	{r4, r5, pc}
   834fa:	ea91 0f03 	teq	r1, r3
   834fe:	bf1e      	ittt	ne
   83500:	2100      	movne	r1, #0
   83502:	2000      	movne	r0, #0
   83504:	bd30      	popne	{r4, r5, pc}
   83506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8350a:	d105      	bne.n	83518 <__adddf3+0x230>
   8350c:	0040      	lsls	r0, r0, #1
   8350e:	4149      	adcs	r1, r1
   83510:	bf28      	it	cs
   83512:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83516:	bd30      	pop	{r4, r5, pc}
   83518:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8351c:	bf3c      	itt	cc
   8351e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83522:	bd30      	popcc	{r4, r5, pc}
   83524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83528:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8352c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83530:	f04f 0000 	mov.w	r0, #0
   83534:	bd30      	pop	{r4, r5, pc}
   83536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8353a:	bf1a      	itte	ne
   8353c:	4619      	movne	r1, r3
   8353e:	4610      	movne	r0, r2
   83540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83544:	bf1c      	itt	ne
   83546:	460b      	movne	r3, r1
   83548:	4602      	movne	r2, r0
   8354a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8354e:	bf06      	itte	eq
   83550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83554:	ea91 0f03 	teqeq	r1, r3
   83558:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8355c:	bd30      	pop	{r4, r5, pc}
   8355e:	bf00      	nop

00083560 <__aeabi_ui2d>:
   83560:	f090 0f00 	teq	r0, #0
   83564:	bf04      	itt	eq
   83566:	2100      	moveq	r1, #0
   83568:	4770      	bxeq	lr
   8356a:	b530      	push	{r4, r5, lr}
   8356c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83570:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83574:	f04f 0500 	mov.w	r5, #0
   83578:	f04f 0100 	mov.w	r1, #0
   8357c:	e750      	b.n	83420 <__adddf3+0x138>
   8357e:	bf00      	nop

00083580 <__aeabi_i2d>:
   83580:	f090 0f00 	teq	r0, #0
   83584:	bf04      	itt	eq
   83586:	2100      	moveq	r1, #0
   83588:	4770      	bxeq	lr
   8358a:	b530      	push	{r4, r5, lr}
   8358c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83590:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83594:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83598:	bf48      	it	mi
   8359a:	4240      	negmi	r0, r0
   8359c:	f04f 0100 	mov.w	r1, #0
   835a0:	e73e      	b.n	83420 <__adddf3+0x138>
   835a2:	bf00      	nop

000835a4 <__aeabi_f2d>:
   835a4:	0042      	lsls	r2, r0, #1
   835a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   835aa:	ea4f 0131 	mov.w	r1, r1, rrx
   835ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   835b2:	bf1f      	itttt	ne
   835b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   835b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   835bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   835c0:	4770      	bxne	lr
   835c2:	f092 0f00 	teq	r2, #0
   835c6:	bf14      	ite	ne
   835c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   835cc:	4770      	bxeq	lr
   835ce:	b530      	push	{r4, r5, lr}
   835d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   835d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   835d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   835dc:	e720      	b.n	83420 <__adddf3+0x138>
   835de:	bf00      	nop

000835e0 <__aeabi_ul2d>:
   835e0:	ea50 0201 	orrs.w	r2, r0, r1
   835e4:	bf08      	it	eq
   835e6:	4770      	bxeq	lr
   835e8:	b530      	push	{r4, r5, lr}
   835ea:	f04f 0500 	mov.w	r5, #0
   835ee:	e00a      	b.n	83606 <__aeabi_l2d+0x16>

000835f0 <__aeabi_l2d>:
   835f0:	ea50 0201 	orrs.w	r2, r0, r1
   835f4:	bf08      	it	eq
   835f6:	4770      	bxeq	lr
   835f8:	b530      	push	{r4, r5, lr}
   835fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   835fe:	d502      	bpl.n	83606 <__aeabi_l2d+0x16>
   83600:	4240      	negs	r0, r0
   83602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83606:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8360a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8360e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83612:	f43f aedc 	beq.w	833ce <__adddf3+0xe6>
   83616:	f04f 0203 	mov.w	r2, #3
   8361a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8361e:	bf18      	it	ne
   83620:	3203      	addne	r2, #3
   83622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83626:	bf18      	it	ne
   83628:	3203      	addne	r2, #3
   8362a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8362e:	f1c2 0320 	rsb	r3, r2, #32
   83632:	fa00 fc03 	lsl.w	ip, r0, r3
   83636:	fa20 f002 	lsr.w	r0, r0, r2
   8363a:	fa01 fe03 	lsl.w	lr, r1, r3
   8363e:	ea40 000e 	orr.w	r0, r0, lr
   83642:	fa21 f102 	lsr.w	r1, r1, r2
   83646:	4414      	add	r4, r2
   83648:	e6c1      	b.n	833ce <__adddf3+0xe6>
   8364a:	bf00      	nop

0008364c <__aeabi_dmul>:
   8364c:	b570      	push	{r4, r5, r6, lr}
   8364e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8365a:	bf1d      	ittte	ne
   8365c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83660:	ea94 0f0c 	teqne	r4, ip
   83664:	ea95 0f0c 	teqne	r5, ip
   83668:	f000 f8de 	bleq	83828 <__aeabi_dmul+0x1dc>
   8366c:	442c      	add	r4, r5
   8366e:	ea81 0603 	eor.w	r6, r1, r3
   83672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8367a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8367e:	bf18      	it	ne
   83680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8368c:	d038      	beq.n	83700 <__aeabi_dmul+0xb4>
   8368e:	fba0 ce02 	umull	ip, lr, r0, r2
   83692:	f04f 0500 	mov.w	r5, #0
   83696:	fbe1 e502 	umlal	lr, r5, r1, r2
   8369a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8369e:	fbe0 e503 	umlal	lr, r5, r0, r3
   836a2:	f04f 0600 	mov.w	r6, #0
   836a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   836aa:	f09c 0f00 	teq	ip, #0
   836ae:	bf18      	it	ne
   836b0:	f04e 0e01 	orrne.w	lr, lr, #1
   836b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   836b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   836bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   836c0:	d204      	bcs.n	836cc <__aeabi_dmul+0x80>
   836c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   836c6:	416d      	adcs	r5, r5
   836c8:	eb46 0606 	adc.w	r6, r6, r6
   836cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   836d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   836d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   836d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   836dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   836e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   836e4:	bf88      	it	hi
   836e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   836ea:	d81e      	bhi.n	8372a <__aeabi_dmul+0xde>
   836ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   836f0:	bf08      	it	eq
   836f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   836f6:	f150 0000 	adcs.w	r0, r0, #0
   836fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   836fe:	bd70      	pop	{r4, r5, r6, pc}
   83700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83704:	ea46 0101 	orr.w	r1, r6, r1
   83708:	ea40 0002 	orr.w	r0, r0, r2
   8370c:	ea81 0103 	eor.w	r1, r1, r3
   83710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83714:	bfc2      	ittt	gt
   83716:	ebd4 050c 	rsbsgt	r5, r4, ip
   8371a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8371e:	bd70      	popgt	{r4, r5, r6, pc}
   83720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83724:	f04f 0e00 	mov.w	lr, #0
   83728:	3c01      	subs	r4, #1
   8372a:	f300 80ab 	bgt.w	83884 <__aeabi_dmul+0x238>
   8372e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83732:	bfde      	ittt	le
   83734:	2000      	movle	r0, #0
   83736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8373a:	bd70      	pople	{r4, r5, r6, pc}
   8373c:	f1c4 0400 	rsb	r4, r4, #0
   83740:	3c20      	subs	r4, #32
   83742:	da35      	bge.n	837b0 <__aeabi_dmul+0x164>
   83744:	340c      	adds	r4, #12
   83746:	dc1b      	bgt.n	83780 <__aeabi_dmul+0x134>
   83748:	f104 0414 	add.w	r4, r4, #20
   8374c:	f1c4 0520 	rsb	r5, r4, #32
   83750:	fa00 f305 	lsl.w	r3, r0, r5
   83754:	fa20 f004 	lsr.w	r0, r0, r4
   83758:	fa01 f205 	lsl.w	r2, r1, r5
   8375c:	ea40 0002 	orr.w	r0, r0, r2
   83760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8376c:	fa21 f604 	lsr.w	r6, r1, r4
   83770:	eb42 0106 	adc.w	r1, r2, r6
   83774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83778:	bf08      	it	eq
   8377a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8377e:	bd70      	pop	{r4, r5, r6, pc}
   83780:	f1c4 040c 	rsb	r4, r4, #12
   83784:	f1c4 0520 	rsb	r5, r4, #32
   83788:	fa00 f304 	lsl.w	r3, r0, r4
   8378c:	fa20 f005 	lsr.w	r0, r0, r5
   83790:	fa01 f204 	lsl.w	r2, r1, r4
   83794:	ea40 0002 	orr.w	r0, r0, r2
   83798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8379c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   837a0:	f141 0100 	adc.w	r1, r1, #0
   837a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   837a8:	bf08      	it	eq
   837aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   837ae:	bd70      	pop	{r4, r5, r6, pc}
   837b0:	f1c4 0520 	rsb	r5, r4, #32
   837b4:	fa00 f205 	lsl.w	r2, r0, r5
   837b8:	ea4e 0e02 	orr.w	lr, lr, r2
   837bc:	fa20 f304 	lsr.w	r3, r0, r4
   837c0:	fa01 f205 	lsl.w	r2, r1, r5
   837c4:	ea43 0302 	orr.w	r3, r3, r2
   837c8:	fa21 f004 	lsr.w	r0, r1, r4
   837cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   837d0:	fa21 f204 	lsr.w	r2, r1, r4
   837d4:	ea20 0002 	bic.w	r0, r0, r2
   837d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   837dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   837e0:	bf08      	it	eq
   837e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   837e6:	bd70      	pop	{r4, r5, r6, pc}
   837e8:	f094 0f00 	teq	r4, #0
   837ec:	d10f      	bne.n	8380e <__aeabi_dmul+0x1c2>
   837ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   837f2:	0040      	lsls	r0, r0, #1
   837f4:	eb41 0101 	adc.w	r1, r1, r1
   837f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   837fc:	bf08      	it	eq
   837fe:	3c01      	subeq	r4, #1
   83800:	d0f7      	beq.n	837f2 <__aeabi_dmul+0x1a6>
   83802:	ea41 0106 	orr.w	r1, r1, r6
   83806:	f095 0f00 	teq	r5, #0
   8380a:	bf18      	it	ne
   8380c:	4770      	bxne	lr
   8380e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83812:	0052      	lsls	r2, r2, #1
   83814:	eb43 0303 	adc.w	r3, r3, r3
   83818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8381c:	bf08      	it	eq
   8381e:	3d01      	subeq	r5, #1
   83820:	d0f7      	beq.n	83812 <__aeabi_dmul+0x1c6>
   83822:	ea43 0306 	orr.w	r3, r3, r6
   83826:	4770      	bx	lr
   83828:	ea94 0f0c 	teq	r4, ip
   8382c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83830:	bf18      	it	ne
   83832:	ea95 0f0c 	teqne	r5, ip
   83836:	d00c      	beq.n	83852 <__aeabi_dmul+0x206>
   83838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8383c:	bf18      	it	ne
   8383e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83842:	d1d1      	bne.n	837e8 <__aeabi_dmul+0x19c>
   83844:	ea81 0103 	eor.w	r1, r1, r3
   83848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8384c:	f04f 0000 	mov.w	r0, #0
   83850:	bd70      	pop	{r4, r5, r6, pc}
   83852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83856:	bf06      	itte	eq
   83858:	4610      	moveq	r0, r2
   8385a:	4619      	moveq	r1, r3
   8385c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83860:	d019      	beq.n	83896 <__aeabi_dmul+0x24a>
   83862:	ea94 0f0c 	teq	r4, ip
   83866:	d102      	bne.n	8386e <__aeabi_dmul+0x222>
   83868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8386c:	d113      	bne.n	83896 <__aeabi_dmul+0x24a>
   8386e:	ea95 0f0c 	teq	r5, ip
   83872:	d105      	bne.n	83880 <__aeabi_dmul+0x234>
   83874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83878:	bf1c      	itt	ne
   8387a:	4610      	movne	r0, r2
   8387c:	4619      	movne	r1, r3
   8387e:	d10a      	bne.n	83896 <__aeabi_dmul+0x24a>
   83880:	ea81 0103 	eor.w	r1, r1, r3
   83884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8388c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83890:	f04f 0000 	mov.w	r0, #0
   83894:	bd70      	pop	{r4, r5, r6, pc}
   83896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8389a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8389e:	bd70      	pop	{r4, r5, r6, pc}

000838a0 <__aeabi_ddiv>:
   838a0:	b570      	push	{r4, r5, r6, lr}
   838a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   838a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   838aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   838ae:	bf1d      	ittte	ne
   838b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   838b4:	ea94 0f0c 	teqne	r4, ip
   838b8:	ea95 0f0c 	teqne	r5, ip
   838bc:	f000 f8a7 	bleq	83a0e <__aeabi_ddiv+0x16e>
   838c0:	eba4 0405 	sub.w	r4, r4, r5
   838c4:	ea81 0e03 	eor.w	lr, r1, r3
   838c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   838cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   838d0:	f000 8088 	beq.w	839e4 <__aeabi_ddiv+0x144>
   838d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   838d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   838dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   838e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   838e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   838e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   838ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   838f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   838f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   838f8:	429d      	cmp	r5, r3
   838fa:	bf08      	it	eq
   838fc:	4296      	cmpeq	r6, r2
   838fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83902:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83906:	d202      	bcs.n	8390e <__aeabi_ddiv+0x6e>
   83908:	085b      	lsrs	r3, r3, #1
   8390a:	ea4f 0232 	mov.w	r2, r2, rrx
   8390e:	1ab6      	subs	r6, r6, r2
   83910:	eb65 0503 	sbc.w	r5, r5, r3
   83914:	085b      	lsrs	r3, r3, #1
   83916:	ea4f 0232 	mov.w	r2, r2, rrx
   8391a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8391e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83922:	ebb6 0e02 	subs.w	lr, r6, r2
   83926:	eb75 0e03 	sbcs.w	lr, r5, r3
   8392a:	bf22      	ittt	cs
   8392c:	1ab6      	subcs	r6, r6, r2
   8392e:	4675      	movcs	r5, lr
   83930:	ea40 000c 	orrcs.w	r0, r0, ip
   83934:	085b      	lsrs	r3, r3, #1
   83936:	ea4f 0232 	mov.w	r2, r2, rrx
   8393a:	ebb6 0e02 	subs.w	lr, r6, r2
   8393e:	eb75 0e03 	sbcs.w	lr, r5, r3
   83942:	bf22      	ittt	cs
   83944:	1ab6      	subcs	r6, r6, r2
   83946:	4675      	movcs	r5, lr
   83948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8394c:	085b      	lsrs	r3, r3, #1
   8394e:	ea4f 0232 	mov.w	r2, r2, rrx
   83952:	ebb6 0e02 	subs.w	lr, r6, r2
   83956:	eb75 0e03 	sbcs.w	lr, r5, r3
   8395a:	bf22      	ittt	cs
   8395c:	1ab6      	subcs	r6, r6, r2
   8395e:	4675      	movcs	r5, lr
   83960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83964:	085b      	lsrs	r3, r3, #1
   83966:	ea4f 0232 	mov.w	r2, r2, rrx
   8396a:	ebb6 0e02 	subs.w	lr, r6, r2
   8396e:	eb75 0e03 	sbcs.w	lr, r5, r3
   83972:	bf22      	ittt	cs
   83974:	1ab6      	subcs	r6, r6, r2
   83976:	4675      	movcs	r5, lr
   83978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8397c:	ea55 0e06 	orrs.w	lr, r5, r6
   83980:	d018      	beq.n	839b4 <__aeabi_ddiv+0x114>
   83982:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8398a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8398e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8399a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8399e:	d1c0      	bne.n	83922 <__aeabi_ddiv+0x82>
   839a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   839a4:	d10b      	bne.n	839be <__aeabi_ddiv+0x11e>
   839a6:	ea41 0100 	orr.w	r1, r1, r0
   839aa:	f04f 0000 	mov.w	r0, #0
   839ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   839b2:	e7b6      	b.n	83922 <__aeabi_ddiv+0x82>
   839b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   839b8:	bf04      	itt	eq
   839ba:	4301      	orreq	r1, r0
   839bc:	2000      	moveq	r0, #0
   839be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   839c2:	bf88      	it	hi
   839c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   839c8:	f63f aeaf 	bhi.w	8372a <__aeabi_dmul+0xde>
   839cc:	ebb5 0c03 	subs.w	ip, r5, r3
   839d0:	bf04      	itt	eq
   839d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   839d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   839da:	f150 0000 	adcs.w	r0, r0, #0
   839de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   839e2:	bd70      	pop	{r4, r5, r6, pc}
   839e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   839e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   839ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   839f0:	bfc2      	ittt	gt
   839f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   839f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   839fa:	bd70      	popgt	{r4, r5, r6, pc}
   839fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83a00:	f04f 0e00 	mov.w	lr, #0
   83a04:	3c01      	subs	r4, #1
   83a06:	e690      	b.n	8372a <__aeabi_dmul+0xde>
   83a08:	ea45 0e06 	orr.w	lr, r5, r6
   83a0c:	e68d      	b.n	8372a <__aeabi_dmul+0xde>
   83a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83a12:	ea94 0f0c 	teq	r4, ip
   83a16:	bf08      	it	eq
   83a18:	ea95 0f0c 	teqeq	r5, ip
   83a1c:	f43f af3b 	beq.w	83896 <__aeabi_dmul+0x24a>
   83a20:	ea94 0f0c 	teq	r4, ip
   83a24:	d10a      	bne.n	83a3c <__aeabi_ddiv+0x19c>
   83a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83a2a:	f47f af34 	bne.w	83896 <__aeabi_dmul+0x24a>
   83a2e:	ea95 0f0c 	teq	r5, ip
   83a32:	f47f af25 	bne.w	83880 <__aeabi_dmul+0x234>
   83a36:	4610      	mov	r0, r2
   83a38:	4619      	mov	r1, r3
   83a3a:	e72c      	b.n	83896 <__aeabi_dmul+0x24a>
   83a3c:	ea95 0f0c 	teq	r5, ip
   83a40:	d106      	bne.n	83a50 <__aeabi_ddiv+0x1b0>
   83a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83a46:	f43f aefd 	beq.w	83844 <__aeabi_dmul+0x1f8>
   83a4a:	4610      	mov	r0, r2
   83a4c:	4619      	mov	r1, r3
   83a4e:	e722      	b.n	83896 <__aeabi_dmul+0x24a>
   83a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83a54:	bf18      	it	ne
   83a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83a5a:	f47f aec5 	bne.w	837e8 <__aeabi_dmul+0x19c>
   83a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83a62:	f47f af0d 	bne.w	83880 <__aeabi_dmul+0x234>
   83a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   83a6a:	f47f aeeb 	bne.w	83844 <__aeabi_dmul+0x1f8>
   83a6e:	e712      	b.n	83896 <__aeabi_dmul+0x24a>

00083a70 <__aeabi_d2iz>:
   83a70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83a78:	d215      	bcs.n	83aa6 <__aeabi_d2iz+0x36>
   83a7a:	d511      	bpl.n	83aa0 <__aeabi_d2iz+0x30>
   83a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83a84:	d912      	bls.n	83aac <__aeabi_d2iz+0x3c>
   83a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83a92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83a96:	fa23 f002 	lsr.w	r0, r3, r2
   83a9a:	bf18      	it	ne
   83a9c:	4240      	negne	r0, r0
   83a9e:	4770      	bx	lr
   83aa0:	f04f 0000 	mov.w	r0, #0
   83aa4:	4770      	bx	lr
   83aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83aaa:	d105      	bne.n	83ab8 <__aeabi_d2iz+0x48>
   83aac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   83ab0:	bf08      	it	eq
   83ab2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83ab6:	4770      	bx	lr
   83ab8:	f04f 0000 	mov.w	r0, #0
   83abc:	4770      	bx	lr
   83abe:	bf00      	nop

00083ac0 <atexit>:
   83ac0:	4601      	mov	r1, r0
   83ac2:	2000      	movs	r0, #0
   83ac4:	4602      	mov	r2, r0
   83ac6:	4603      	mov	r3, r0
   83ac8:	f000 bdfc 	b.w	846c4 <__register_exitproc>

00083acc <__libc_fini_array>:
   83acc:	b570      	push	{r4, r5, r6, lr}
   83ace:	4b08      	ldr	r3, [pc, #32]	; (83af0 <__libc_fini_array+0x24>)
   83ad0:	4c08      	ldr	r4, [pc, #32]	; (83af4 <__libc_fini_array+0x28>)
   83ad2:	2500      	movs	r5, #0
   83ad4:	1ae0      	subs	r0, r4, r3
   83ad6:	1084      	asrs	r4, r0, #2
   83ad8:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   83adc:	3d04      	subs	r5, #4
   83ade:	b11c      	cbz	r4, 83ae8 <__libc_fini_array+0x1c>
   83ae0:	5972      	ldr	r2, [r6, r5]
   83ae2:	4790      	blx	r2
   83ae4:	3c01      	subs	r4, #1
   83ae6:	e7f9      	b.n	83adc <__libc_fini_array+0x10>
   83ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   83aec:	f002 bc56 	b.w	8639c <_fini>
   83af0:	000863a8 	.word	0x000863a8
   83af4:	000863ac 	.word	0x000863ac

00083af8 <__libc_init_array>:
   83af8:	b538      	push	{r3, r4, r5, lr}
   83afa:	4d0e      	ldr	r5, [pc, #56]	; (83b34 <__libc_init_array+0x3c>)
   83afc:	4b0e      	ldr	r3, [pc, #56]	; (83b38 <__libc_init_array+0x40>)
   83afe:	2400      	movs	r4, #0
   83b00:	1ae8      	subs	r0, r5, r3
   83b02:	1085      	asrs	r5, r0, #2
   83b04:	42ac      	cmp	r4, r5
   83b06:	d005      	beq.n	83b14 <__libc_init_array+0x1c>
   83b08:	490b      	ldr	r1, [pc, #44]	; (83b38 <__libc_init_array+0x40>)
   83b0a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   83b0e:	4790      	blx	r2
   83b10:	3401      	adds	r4, #1
   83b12:	e7f7      	b.n	83b04 <__libc_init_array+0xc>
   83b14:	f002 fc38 	bl	86388 <_init>
   83b18:	4908      	ldr	r1, [pc, #32]	; (83b3c <__libc_init_array+0x44>)
   83b1a:	4a09      	ldr	r2, [pc, #36]	; (83b40 <__libc_init_array+0x48>)
   83b1c:	1a54      	subs	r4, r2, r1
   83b1e:	10a5      	asrs	r5, r4, #2
   83b20:	2400      	movs	r4, #0
   83b22:	42ac      	cmp	r4, r5
   83b24:	d005      	beq.n	83b32 <__libc_init_array+0x3a>
   83b26:	4b05      	ldr	r3, [pc, #20]	; (83b3c <__libc_init_array+0x44>)
   83b28:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   83b2c:	4780      	blx	r0
   83b2e:	3401      	adds	r4, #1
   83b30:	e7f7      	b.n	83b22 <__libc_init_array+0x2a>
   83b32:	bd38      	pop	{r3, r4, r5, pc}
   83b34:	00086394 	.word	0x00086394
   83b38:	00086394 	.word	0x00086394
   83b3c:	00086394 	.word	0x00086394
   83b40:	0008639c 	.word	0x0008639c

00083b44 <iprintf>:
   83b44:	b40f      	push	{r0, r1, r2, r3}
   83b46:	b507      	push	{r0, r1, r2, lr}
   83b48:	4906      	ldr	r1, [pc, #24]	; (83b64 <iprintf+0x20>)
   83b4a:	ab04      	add	r3, sp, #16
   83b4c:	6808      	ldr	r0, [r1, #0]
   83b4e:	f853 2b04 	ldr.w	r2, [r3], #4
   83b52:	6881      	ldr	r1, [r0, #8]
   83b54:	9301      	str	r3, [sp, #4]
   83b56:	f000 f8f7 	bl	83d48 <_vfiprintf_r>
   83b5a:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   83b5e:	b004      	add	sp, #16
   83b60:	4770      	bx	lr
   83b62:	bf00      	nop
   83b64:	20070020 	.word	0x20070020

00083b68 <_iprintf_r>:
   83b68:	b40e      	push	{r1, r2, r3}
   83b6a:	b503      	push	{r0, r1, lr}
   83b6c:	ab03      	add	r3, sp, #12
   83b6e:	f853 2b04 	ldr.w	r2, [r3], #4
   83b72:	6881      	ldr	r1, [r0, #8]
   83b74:	9301      	str	r3, [sp, #4]
   83b76:	f000 f8e7 	bl	83d48 <_vfiprintf_r>
   83b7a:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   83b7e:	b003      	add	sp, #12
   83b80:	4770      	bx	lr
   83b82:	bf00      	nop

00083b84 <memcpy>:
   83b84:	b510      	push	{r4, lr}
   83b86:	2300      	movs	r3, #0
   83b88:	4293      	cmp	r3, r2
   83b8a:	d003      	beq.n	83b94 <memcpy+0x10>
   83b8c:	5ccc      	ldrb	r4, [r1, r3]
   83b8e:	54c4      	strb	r4, [r0, r3]
   83b90:	3301      	adds	r3, #1
   83b92:	e7f9      	b.n	83b88 <memcpy+0x4>
   83b94:	bd10      	pop	{r4, pc}

00083b96 <memset>:
   83b96:	1882      	adds	r2, r0, r2
   83b98:	4603      	mov	r3, r0
   83b9a:	4293      	cmp	r3, r2
   83b9c:	d002      	beq.n	83ba4 <memset+0xe>
   83b9e:	f803 1b01 	strb.w	r1, [r3], #1
   83ba2:	e7fa      	b.n	83b9a <memset+0x4>
   83ba4:	4770      	bx	lr

00083ba6 <setbuf>:
   83ba6:	2900      	cmp	r1, #0
   83ba8:	bf0c      	ite	eq
   83baa:	2202      	moveq	r2, #2
   83bac:	2200      	movne	r2, #0
   83bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83bb2:	f000 b801 	b.w	83bb8 <setvbuf>
	...

00083bb8 <setvbuf>:
   83bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83bbc:	461d      	mov	r5, r3
   83bbe:	4b37      	ldr	r3, [pc, #220]	; (83c9c <setvbuf+0xe4>)
   83bc0:	4604      	mov	r4, r0
   83bc2:	6818      	ldr	r0, [r3, #0]
   83bc4:	460e      	mov	r6, r1
   83bc6:	4617      	mov	r7, r2
   83bc8:	4698      	mov	r8, r3
   83bca:	b118      	cbz	r0, 83bd4 <setvbuf+0x1c>
   83bcc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   83bce:	b90a      	cbnz	r2, 83bd4 <setvbuf+0x1c>
   83bd0:	f000 fec2 	bl	84958 <__sinit>
   83bd4:	2f02      	cmp	r7, #2
   83bd6:	d85d      	bhi.n	83c94 <setvbuf+0xdc>
   83bd8:	2d00      	cmp	r5, #0
   83bda:	db5b      	blt.n	83c94 <setvbuf+0xdc>
   83bdc:	4621      	mov	r1, r4
   83bde:	f8d8 0000 	ldr.w	r0, [r8]
   83be2:	f000 fdc7 	bl	84774 <_fflush_r>
   83be6:	89a1      	ldrh	r1, [r4, #12]
   83be8:	2000      	movs	r0, #0
   83bea:	f001 0380 	and.w	r3, r1, #128	; 0x80
   83bee:	b21a      	sxth	r2, r3
   83bf0:	6060      	str	r0, [r4, #4]
   83bf2:	61a0      	str	r0, [r4, #24]
   83bf4:	b122      	cbz	r2, 83c00 <setvbuf+0x48>
   83bf6:	4829      	ldr	r0, [pc, #164]	; (83c9c <setvbuf+0xe4>)
   83bf8:	6921      	ldr	r1, [r4, #16]
   83bfa:	6800      	ldr	r0, [r0, #0]
   83bfc:	f000 ffea 	bl	84bd4 <_free_r>
   83c00:	89a1      	ldrh	r1, [r4, #12]
   83c02:	2f02      	cmp	r7, #2
   83c04:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   83c08:	81a3      	strh	r3, [r4, #12]
   83c0a:	d012      	beq.n	83c32 <setvbuf+0x7a>
   83c0c:	bb36      	cbnz	r6, 83c5c <setvbuf+0xa4>
   83c0e:	2d00      	cmp	r5, #0
   83c10:	bf08      	it	eq
   83c12:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   83c16:	4628      	mov	r0, r5
   83c18:	f001 fae0 	bl	851dc <malloc>
   83c1c:	4606      	mov	r6, r0
   83c1e:	b9c8      	cbnz	r0, 83c54 <setvbuf+0x9c>
   83c20:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83c24:	f001 fada 	bl	851dc <malloc>
   83c28:	4606      	mov	r6, r0
   83c2a:	b988      	cbnz	r0, 83c50 <setvbuf+0x98>
   83c2c:	f04f 30ff 	mov.w	r0, #4294967295
   83c30:	e000      	b.n	83c34 <setvbuf+0x7c>
   83c32:	2000      	movs	r0, #0
   83c34:	89a1      	ldrh	r1, [r4, #12]
   83c36:	2200      	movs	r2, #0
   83c38:	f041 0302 	orr.w	r3, r1, #2
   83c3c:	81a3      	strh	r3, [r4, #12]
   83c3e:	f104 0143 	add.w	r1, r4, #67	; 0x43
   83c42:	2301      	movs	r3, #1
   83c44:	60a2      	str	r2, [r4, #8]
   83c46:	6021      	str	r1, [r4, #0]
   83c48:	6121      	str	r1, [r4, #16]
   83c4a:	6163      	str	r3, [r4, #20]
   83c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c50:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83c54:	89a2      	ldrh	r2, [r4, #12]
   83c56:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   83c5a:	81a0      	strh	r0, [r4, #12]
   83c5c:	2f01      	cmp	r7, #1
   83c5e:	d105      	bne.n	83c6c <setvbuf+0xb4>
   83c60:	89a1      	ldrh	r1, [r4, #12]
   83c62:	426a      	negs	r2, r5
   83c64:	f041 0301 	orr.w	r3, r1, #1
   83c68:	81a3      	strh	r3, [r4, #12]
   83c6a:	61a2      	str	r2, [r4, #24]
   83c6c:	480b      	ldr	r0, [pc, #44]	; (83c9c <setvbuf+0xe4>)
   83c6e:	89a2      	ldrh	r2, [r4, #12]
   83c70:	6801      	ldr	r1, [r0, #0]
   83c72:	4b0b      	ldr	r3, [pc, #44]	; (83ca0 <setvbuf+0xe8>)
   83c74:	f002 0008 	and.w	r0, r2, #8
   83c78:	b200      	sxth	r0, r0
   83c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
   83c7c:	6026      	str	r6, [r4, #0]
   83c7e:	6126      	str	r6, [r4, #16]
   83c80:	6165      	str	r5, [r4, #20]
   83c82:	b148      	cbz	r0, 83c98 <setvbuf+0xe0>
   83c84:	f012 0f03 	tst.w	r2, #3
   83c88:	bf18      	it	ne
   83c8a:	2500      	movne	r5, #0
   83c8c:	60a5      	str	r5, [r4, #8]
   83c8e:	2000      	movs	r0, #0
   83c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c94:	f04f 30ff 	mov.w	r0, #4294967295
   83c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c9c:	20070020 	.word	0x20070020
   83ca0:	000848cd 	.word	0x000848cd

00083ca4 <strlen>:
   83ca4:	4603      	mov	r3, r0
   83ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
   83caa:	2a00      	cmp	r2, #0
   83cac:	d1fb      	bne.n	83ca6 <strlen+0x2>
   83cae:	1a18      	subs	r0, r3, r0
   83cb0:	3801      	subs	r0, #1
   83cb2:	4770      	bx	lr

00083cb4 <strncpy>:
   83cb4:	b530      	push	{r4, r5, lr}
   83cb6:	3901      	subs	r1, #1
   83cb8:	4603      	mov	r3, r0
   83cba:	461c      	mov	r4, r3
   83cbc:	b13a      	cbz	r2, 83cce <strncpy+0x1a>
   83cbe:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   83cc2:	3a01      	subs	r2, #1
   83cc4:	f803 5b01 	strb.w	r5, [r3], #1
   83cc8:	461c      	mov	r4, r3
   83cca:	2d00      	cmp	r5, #0
   83ccc:	d1f5      	bne.n	83cba <strncpy+0x6>
   83cce:	1899      	adds	r1, r3, r2
   83cd0:	428c      	cmp	r4, r1
   83cd2:	d003      	beq.n	83cdc <strncpy+0x28>
   83cd4:	2200      	movs	r2, #0
   83cd6:	f804 2b01 	strb.w	r2, [r4], #1
   83cda:	e7f9      	b.n	83cd0 <strncpy+0x1c>
   83cdc:	bd30      	pop	{r4, r5, pc}
	...

00083ce0 <__sprint_r>:
   83ce0:	6893      	ldr	r3, [r2, #8]
   83ce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83ce6:	4681      	mov	r9, r0
   83ce8:	460f      	mov	r7, r1
   83cea:	4614      	mov	r4, r2
   83cec:	b91b      	cbnz	r3, 83cf6 <__sprint_r+0x16>
   83cee:	6053      	str	r3, [r2, #4]
   83cf0:	4618      	mov	r0, r3
   83cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83cf6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83cf8:	049b      	lsls	r3, r3, #18
   83cfa:	d51e      	bpl.n	83d3a <__sprint_r+0x5a>
   83cfc:	6815      	ldr	r5, [r2, #0]
   83cfe:	68a0      	ldr	r0, [r4, #8]
   83d00:	3508      	adds	r5, #8
   83d02:	b1c8      	cbz	r0, 83d38 <__sprint_r+0x58>
   83d04:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83d08:	f855 ac08 	ldr.w	sl, [r5, #-8]
   83d0c:	ea4f 0891 	mov.w	r8, r1, lsr #2
   83d10:	2600      	movs	r6, #0
   83d12:	4546      	cmp	r6, r8
   83d14:	da09      	bge.n	83d2a <__sprint_r+0x4a>
   83d16:	4648      	mov	r0, r9
   83d18:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   83d1c:	463a      	mov	r2, r7
   83d1e:	f000 fe97 	bl	84a50 <_fputwc_r>
   83d22:	1c43      	adds	r3, r0, #1
   83d24:	d00b      	beq.n	83d3e <__sprint_r+0x5e>
   83d26:	3601      	adds	r6, #1
   83d28:	e7f3      	b.n	83d12 <__sprint_r+0x32>
   83d2a:	68a2      	ldr	r2, [r4, #8]
   83d2c:	ea4f 0888 	mov.w	r8, r8, lsl #2
   83d30:	ebc8 0302 	rsb	r3, r8, r2
   83d34:	60a3      	str	r3, [r4, #8]
   83d36:	e7e2      	b.n	83cfe <__sprint_r+0x1e>
   83d38:	e001      	b.n	83d3e <__sprint_r+0x5e>
   83d3a:	f001 f801 	bl	84d40 <__sfvwrite_r>
   83d3e:	2100      	movs	r1, #0
   83d40:	60a1      	str	r1, [r4, #8]
   83d42:	6061      	str	r1, [r4, #4]
   83d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083d48 <_vfiprintf_r>:
   83d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d4c:	4689      	mov	r9, r1
   83d4e:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
   83d52:	4614      	mov	r4, r2
   83d54:	461e      	mov	r6, r3
   83d56:	4683      	mov	fp, r0
   83d58:	b118      	cbz	r0, 83d62 <_vfiprintf_r+0x1a>
   83d5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83d5c:	b90b      	cbnz	r3, 83d62 <_vfiprintf_r+0x1a>
   83d5e:	f000 fdfb 	bl	84958 <__sinit>
   83d62:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   83d66:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   83d6a:	b211      	sxth	r1, r2
   83d6c:	b949      	cbnz	r1, 83d82 <_vfiprintf_r+0x3a>
   83d6e:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   83d72:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   83d76:	f8a9 300c 	strh.w	r3, [r9, #12]
   83d7a:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   83d7e:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   83d82:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   83d86:	f001 0308 	and.w	r3, r1, #8
   83d8a:	b218      	sxth	r0, r3
   83d8c:	b148      	cbz	r0, 83da2 <_vfiprintf_r+0x5a>
   83d8e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   83d92:	b132      	cbz	r2, 83da2 <_vfiprintf_r+0x5a>
   83d94:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   83d98:	f000 011a 	and.w	r1, r0, #26
   83d9c:	290a      	cmp	r1, #10
   83d9e:	d149      	bne.n	83e34 <_vfiprintf_r+0xec>
   83da0:	e00a      	b.n	83db8 <_vfiprintf_r+0x70>
   83da2:	4658      	mov	r0, fp
   83da4:	4649      	mov	r1, r9
   83da6:	f000 fc31 	bl	8460c <__swsetup_r>
   83daa:	2800      	cmp	r0, #0
   83dac:	d0f2      	beq.n	83d94 <_vfiprintf_r+0x4c>
   83dae:	f04f 31ff 	mov.w	r1, #4294967295
   83db2:	9102      	str	r1, [sp, #8]
   83db4:	f000 bc15 	b.w	845e2 <_vfiprintf_r+0x89a>
   83db8:	f8b9 300e 	ldrh.w	r3, [r9, #14]
   83dbc:	0419      	lsls	r1, r3, #16
   83dbe:	d439      	bmi.n	83e34 <_vfiprintf_r+0xec>
   83dc0:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
   83dc4:	f8d9 201c 	ldr.w	r2, [r9, #28]
   83dc8:	f020 0002 	bic.w	r0, r0, #2
   83dcc:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
   83dd0:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   83dd4:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
   83dd8:	9131      	str	r1, [sp, #196]	; 0xc4
   83dda:	a832      	add	r0, sp, #200	; 0xc8
   83ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83de0:	921f      	str	r2, [sp, #124]	; 0x7c
   83de2:	2200      	movs	r2, #0
   83de4:	9321      	str	r3, [sp, #132]	; 0x84
   83de6:	9018      	str	r0, [sp, #96]	; 0x60
   83de8:	901c      	str	r0, [sp, #112]	; 0x70
   83dea:	911a      	str	r1, [sp, #104]	; 0x68
   83dec:	911d      	str	r1, [sp, #116]	; 0x74
   83dee:	921e      	str	r2, [sp, #120]	; 0x78
   83df0:	4658      	mov	r0, fp
   83df2:	a918      	add	r1, sp, #96	; 0x60
   83df4:	4622      	mov	r2, r4
   83df6:	4633      	mov	r3, r6
   83df8:	f7ff ffa6 	bl	83d48 <_vfiprintf_r>
   83dfc:	2800      	cmp	r0, #0
   83dfe:	9002      	str	r0, [sp, #8]
   83e00:	db09      	blt.n	83e16 <_vfiprintf_r+0xce>
   83e02:	4658      	mov	r0, fp
   83e04:	a918      	add	r1, sp, #96	; 0x60
   83e06:	f000 fcb5 	bl	84774 <_fflush_r>
   83e0a:	9b02      	ldr	r3, [sp, #8]
   83e0c:	2800      	cmp	r0, #0
   83e0e:	bf18      	it	ne
   83e10:	f04f 33ff 	movne.w	r3, #4294967295
   83e14:	9302      	str	r3, [sp, #8]
   83e16:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
   83e1a:	f000 0140 	and.w	r1, r0, #64	; 0x40
   83e1e:	b20a      	sxth	r2, r1
   83e20:	2a00      	cmp	r2, #0
   83e22:	f000 83de 	beq.w	845e2 <_vfiprintf_r+0x89a>
   83e26:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   83e2a:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   83e2e:	f8a9 000c 	strh.w	r0, [r9, #12]
   83e32:	e3d6      	b.n	845e2 <_vfiprintf_r+0x89a>
   83e34:	2200      	movs	r2, #0
   83e36:	ad32      	add	r5, sp, #200	; 0xc8
   83e38:	950b      	str	r5, [sp, #44]	; 0x2c
   83e3a:	920d      	str	r2, [sp, #52]	; 0x34
   83e3c:	920c      	str	r2, [sp, #48]	; 0x30
   83e3e:	9401      	str	r4, [sp, #4]
   83e40:	9205      	str	r2, [sp, #20]
   83e42:	9202      	str	r2, [sp, #8]
   83e44:	46a8      	mov	r8, r5
   83e46:	9801      	ldr	r0, [sp, #4]
   83e48:	4604      	mov	r4, r0
   83e4a:	f810 1b01 	ldrb.w	r1, [r0], #1
   83e4e:	b919      	cbnz	r1, 83e58 <_vfiprintf_r+0x110>
   83e50:	9b01      	ldr	r3, [sp, #4]
   83e52:	1ae5      	subs	r5, r4, r3
   83e54:	d103      	bne.n	83e5e <_vfiprintf_r+0x116>
   83e56:	e01d      	b.n	83e94 <_vfiprintf_r+0x14c>
   83e58:	2925      	cmp	r1, #37	; 0x25
   83e5a:	d1f5      	bne.n	83e48 <_vfiprintf_r+0x100>
   83e5c:	e7f8      	b.n	83e50 <_vfiprintf_r+0x108>
   83e5e:	9901      	ldr	r1, [sp, #4]
   83e60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   83e62:	e888 0022 	stmia.w	r8, {r1, r5}
   83e66:	990c      	ldr	r1, [sp, #48]	; 0x30
   83e68:	1950      	adds	r0, r2, r5
   83e6a:	1c4b      	adds	r3, r1, #1
   83e6c:	2b07      	cmp	r3, #7
   83e6e:	900d      	str	r0, [sp, #52]	; 0x34
   83e70:	930c      	str	r3, [sp, #48]	; 0x30
   83e72:	dc02      	bgt.n	83e7a <_vfiprintf_r+0x132>
   83e74:	f108 0808 	add.w	r8, r8, #8
   83e78:	e009      	b.n	83e8e <_vfiprintf_r+0x146>
   83e7a:	4658      	mov	r0, fp
   83e7c:	4649      	mov	r1, r9
   83e7e:	aa0b      	add	r2, sp, #44	; 0x2c
   83e80:	f7ff ff2e 	bl	83ce0 <__sprint_r>
   83e84:	2800      	cmp	r0, #0
   83e86:	f040 83a4 	bne.w	845d2 <_vfiprintf_r+0x88a>
   83e8a:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   83e8e:	9a02      	ldr	r2, [sp, #8]
   83e90:	1950      	adds	r0, r2, r5
   83e92:	9002      	str	r0, [sp, #8]
   83e94:	7821      	ldrb	r1, [r4, #0]
   83e96:	2900      	cmp	r1, #0
   83e98:	f000 8394 	beq.w	845c4 <_vfiprintf_r+0x87c>
   83e9c:	2200      	movs	r2, #0
   83e9e:	3401      	adds	r4, #1
   83ea0:	9401      	str	r4, [sp, #4]
   83ea2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83ea6:	f04f 3cff 	mov.w	ip, #4294967295
   83eaa:	9204      	str	r2, [sp, #16]
   83eac:	4617      	mov	r7, r2
   83eae:	9801      	ldr	r0, [sp, #4]
   83eb0:	f810 3b01 	ldrb.w	r3, [r0], #1
   83eb4:	9001      	str	r0, [sp, #4]
   83eb6:	2b63      	cmp	r3, #99	; 0x63
   83eb8:	f000 80b3 	beq.w	84022 <_vfiprintf_r+0x2da>
   83ebc:	dc33      	bgt.n	83f26 <_vfiprintf_r+0x1de>
   83ebe:	2b39      	cmp	r3, #57	; 0x39
   83ec0:	dc1a      	bgt.n	83ef8 <_vfiprintf_r+0x1b0>
   83ec2:	2b31      	cmp	r3, #49	; 0x31
   83ec4:	f280 8091 	bge.w	83fea <_vfiprintf_r+0x2a2>
   83ec8:	2b2b      	cmp	r3, #43	; 0x2b
   83eca:	d101      	bne.n	83ed0 <_vfiprintf_r+0x188>
   83ecc:	461a      	mov	r2, r3
   83ece:	e7ee      	b.n	83eae <_vfiprintf_r+0x166>
   83ed0:	dc0a      	bgt.n	83ee8 <_vfiprintf_r+0x1a0>
   83ed2:	2b23      	cmp	r3, #35	; 0x23
   83ed4:	d055      	beq.n	83f82 <_vfiprintf_r+0x23a>
   83ed6:	2b2a      	cmp	r3, #42	; 0x2a
   83ed8:	d056      	beq.n	83f88 <_vfiprintf_r+0x240>
   83eda:	2b20      	cmp	r3, #32
   83edc:	f040 81f7 	bne.w	842ce <_vfiprintf_r+0x586>
   83ee0:	2a00      	cmp	r2, #0
   83ee2:	bf08      	it	eq
   83ee4:	2220      	moveq	r2, #32
   83ee6:	e7e2      	b.n	83eae <_vfiprintf_r+0x166>
   83ee8:	2b2e      	cmp	r3, #46	; 0x2e
   83eea:	d058      	beq.n	83f9e <_vfiprintf_r+0x256>
   83eec:	2b30      	cmp	r3, #48	; 0x30
   83eee:	d079      	beq.n	83fe4 <_vfiprintf_r+0x29c>
   83ef0:	2b2d      	cmp	r3, #45	; 0x2d
   83ef2:	f040 81ec 	bne.w	842ce <_vfiprintf_r+0x586>
   83ef6:	e04f      	b.n	83f98 <_vfiprintf_r+0x250>
   83ef8:	2b4f      	cmp	r3, #79	; 0x4f
   83efa:	f000 80de 	beq.w	840ba <_vfiprintf_r+0x372>
   83efe:	dc07      	bgt.n	83f10 <_vfiprintf_r+0x1c8>
   83f00:	2b44      	cmp	r3, #68	; 0x44
   83f02:	f040 81e4 	bne.w	842ce <_vfiprintf_r+0x586>
   83f06:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83f0a:	f047 0710 	orr.w	r7, r7, #16
   83f0e:	e090      	b.n	84032 <_vfiprintf_r+0x2ea>
   83f10:	2b55      	cmp	r3, #85	; 0x55
   83f12:	f000 811f 	beq.w	84154 <_vfiprintf_r+0x40c>
   83f16:	2b58      	cmp	r3, #88	; 0x58
   83f18:	f040 81d9 	bne.w	842ce <_vfiprintf_r+0x586>
   83f1c:	4dae      	ldr	r5, [pc, #696]	; (841d8 <_vfiprintf_r+0x490>)
   83f1e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83f22:	9505      	str	r5, [sp, #20]
   83f24:	e130      	b.n	84188 <_vfiprintf_r+0x440>
   83f26:	2b6f      	cmp	r3, #111	; 0x6f
   83f28:	f000 80c9 	beq.w	840be <_vfiprintf_r+0x376>
   83f2c:	dc10      	bgt.n	83f50 <_vfiprintf_r+0x208>
   83f2e:	2b69      	cmp	r3, #105	; 0x69
   83f30:	d024      	beq.n	83f7c <_vfiprintf_r+0x234>
   83f32:	dc07      	bgt.n	83f44 <_vfiprintf_r+0x1fc>
   83f34:	2b64      	cmp	r3, #100	; 0x64
   83f36:	d021      	beq.n	83f7c <_vfiprintf_r+0x234>
   83f38:	2b68      	cmp	r3, #104	; 0x68
   83f3a:	f040 81c8 	bne.w	842ce <_vfiprintf_r+0x586>
   83f3e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   83f42:	e7b4      	b.n	83eae <_vfiprintf_r+0x166>
   83f44:	2b6c      	cmp	r3, #108	; 0x6c
   83f46:	d05f      	beq.n	84008 <_vfiprintf_r+0x2c0>
   83f48:	2b6e      	cmp	r3, #110	; 0x6e
   83f4a:	f040 81c0 	bne.w	842ce <_vfiprintf_r+0x586>
   83f4e:	e096      	b.n	8407e <_vfiprintf_r+0x336>
   83f50:	2b73      	cmp	r3, #115	; 0x73
   83f52:	f000 80df 	beq.w	84114 <_vfiprintf_r+0x3cc>
   83f56:	dc06      	bgt.n	83f66 <_vfiprintf_r+0x21e>
   83f58:	2b70      	cmp	r3, #112	; 0x70
   83f5a:	f000 80cd 	beq.w	840f8 <_vfiprintf_r+0x3b0>
   83f5e:	2b71      	cmp	r3, #113	; 0x71
   83f60:	f040 81b5 	bne.w	842ce <_vfiprintf_r+0x586>
   83f64:	e05a      	b.n	8401c <_vfiprintf_r+0x2d4>
   83f66:	2b75      	cmp	r3, #117	; 0x75
   83f68:	f000 80f6 	beq.w	84158 <_vfiprintf_r+0x410>
   83f6c:	2b78      	cmp	r3, #120	; 0x78
   83f6e:	f040 81ae 	bne.w	842ce <_vfiprintf_r+0x586>
   83f72:	4d9a      	ldr	r5, [pc, #616]	; (841dc <_vfiprintf_r+0x494>)
   83f74:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83f78:	9505      	str	r5, [sp, #20]
   83f7a:	e105      	b.n	84188 <_vfiprintf_r+0x440>
   83f7c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83f80:	e057      	b.n	84032 <_vfiprintf_r+0x2ea>
   83f82:	f047 0701 	orr.w	r7, r7, #1
   83f86:	e792      	b.n	83eae <_vfiprintf_r+0x166>
   83f88:	1d33      	adds	r3, r6, #4
   83f8a:	6836      	ldr	r6, [r6, #0]
   83f8c:	2e00      	cmp	r6, #0
   83f8e:	9604      	str	r6, [sp, #16]
   83f90:	da15      	bge.n	83fbe <_vfiprintf_r+0x276>
   83f92:	4270      	negs	r0, r6
   83f94:	9004      	str	r0, [sp, #16]
   83f96:	461e      	mov	r6, r3
   83f98:	f047 0704 	orr.w	r7, r7, #4
   83f9c:	e787      	b.n	83eae <_vfiprintf_r+0x166>
   83f9e:	9901      	ldr	r1, [sp, #4]
   83fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
   83fa4:	2b2a      	cmp	r3, #42	; 0x2a
   83fa6:	9101      	str	r1, [sp, #4]
   83fa8:	d10b      	bne.n	83fc2 <_vfiprintf_r+0x27a>
   83faa:	f8d6 c000 	ldr.w	ip, [r6]
   83fae:	1d33      	adds	r3, r6, #4
   83fb0:	f1bc 0f00 	cmp.w	ip, #0
   83fb4:	da03      	bge.n	83fbe <_vfiprintf_r+0x276>
   83fb6:	461e      	mov	r6, r3
   83fb8:	f04f 3cff 	mov.w	ip, #4294967295
   83fbc:	e777      	b.n	83eae <_vfiprintf_r+0x166>
   83fbe:	461e      	mov	r6, r3
   83fc0:	e775      	b.n	83eae <_vfiprintf_r+0x166>
   83fc2:	f04f 0c00 	mov.w	ip, #0
   83fc6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83fca:	2809      	cmp	r0, #9
   83fcc:	d807      	bhi.n	83fde <_vfiprintf_r+0x296>
   83fce:	9901      	ldr	r1, [sp, #4]
   83fd0:	230a      	movs	r3, #10
   83fd2:	fb03 0c0c 	mla	ip, r3, ip, r0
   83fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
   83fda:	9101      	str	r1, [sp, #4]
   83fdc:	e7f3      	b.n	83fc6 <_vfiprintf_r+0x27e>
   83fde:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   83fe2:	e768      	b.n	83eb6 <_vfiprintf_r+0x16e>
   83fe4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   83fe8:	e761      	b.n	83eae <_vfiprintf_r+0x166>
   83fea:	9801      	ldr	r0, [sp, #4]
   83fec:	2100      	movs	r1, #0
   83fee:	3b30      	subs	r3, #48	; 0x30
   83ff0:	240a      	movs	r4, #10
   83ff2:	fb04 3101 	mla	r1, r4, r1, r3
   83ff6:	f810 3b01 	ldrb.w	r3, [r0], #1
   83ffa:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   83ffe:	2c09      	cmp	r4, #9
   84000:	9001      	str	r0, [sp, #4]
   84002:	d9f4      	bls.n	83fee <_vfiprintf_r+0x2a6>
   84004:	9104      	str	r1, [sp, #16]
   84006:	e756      	b.n	83eb6 <_vfiprintf_r+0x16e>
   84008:	9901      	ldr	r1, [sp, #4]
   8400a:	780b      	ldrb	r3, [r1, #0]
   8400c:	2b6c      	cmp	r3, #108	; 0x6c
   8400e:	d102      	bne.n	84016 <_vfiprintf_r+0x2ce>
   84010:	1c48      	adds	r0, r1, #1
   84012:	9001      	str	r0, [sp, #4]
   84014:	e002      	b.n	8401c <_vfiprintf_r+0x2d4>
   84016:	f047 0710 	orr.w	r7, r7, #16
   8401a:	e748      	b.n	83eae <_vfiprintf_r+0x166>
   8401c:	f047 0720 	orr.w	r7, r7, #32
   84020:	e745      	b.n	83eae <_vfiprintf_r+0x166>
   84022:	6832      	ldr	r2, [r6, #0]
   84024:	2500      	movs	r5, #0
   84026:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8402a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8402e:	3604      	adds	r6, #4
   84030:	e157      	b.n	842e2 <_vfiprintf_r+0x59a>
   84032:	06ba      	lsls	r2, r7, #26
   84034:	d507      	bpl.n	84046 <_vfiprintf_r+0x2fe>
   84036:	3607      	adds	r6, #7
   84038:	f026 0507 	bic.w	r5, r6, #7
   8403c:	f105 0608 	add.w	r6, r5, #8
   84040:	e9d5 4500 	ldrd	r4, r5, [r5]
   84044:	e00f      	b.n	84066 <_vfiprintf_r+0x31e>
   84046:	f017 0f10 	tst.w	r7, #16
   8404a:	f106 0104 	add.w	r1, r6, #4
   8404e:	d001      	beq.n	84054 <_vfiprintf_r+0x30c>
   84050:	6832      	ldr	r2, [r6, #0]
   84052:	e005      	b.n	84060 <_vfiprintf_r+0x318>
   84054:	f017 0f40 	tst.w	r7, #64	; 0x40
   84058:	6832      	ldr	r2, [r6, #0]
   8405a:	d001      	beq.n	84060 <_vfiprintf_r+0x318>
   8405c:	b214      	sxth	r4, r2
   8405e:	e000      	b.n	84062 <_vfiprintf_r+0x31a>
   84060:	4614      	mov	r4, r2
   84062:	17e5      	asrs	r5, r4, #31
   84064:	460e      	mov	r6, r1
   84066:	2c00      	cmp	r4, #0
   84068:	f175 0200 	sbcs.w	r2, r5, #0
   8406c:	f280 80b8 	bge.w	841e0 <_vfiprintf_r+0x498>
   84070:	232d      	movs	r3, #45	; 0x2d
   84072:	4264      	negs	r4, r4
   84074:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84078:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8407c:	e0b0      	b.n	841e0 <_vfiprintf_r+0x498>
   8407e:	f017 0f20 	tst.w	r7, #32
   84082:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84086:	f106 0204 	add.w	r2, r6, #4
   8408a:	d005      	beq.n	84098 <_vfiprintf_r+0x350>
   8408c:	9c02      	ldr	r4, [sp, #8]
   8408e:	6835      	ldr	r5, [r6, #0]
   84090:	17e0      	asrs	r0, r4, #31
   84092:	602c      	str	r4, [r5, #0]
   84094:	6068      	str	r0, [r5, #4]
   84096:	e004      	b.n	840a2 <_vfiprintf_r+0x35a>
   84098:	06fb      	lsls	r3, r7, #27
   8409a:	d504      	bpl.n	840a6 <_vfiprintf_r+0x35e>
   8409c:	6833      	ldr	r3, [r6, #0]
   8409e:	9902      	ldr	r1, [sp, #8]
   840a0:	6019      	str	r1, [r3, #0]
   840a2:	4616      	mov	r6, r2
   840a4:	e6cf      	b.n	83e46 <_vfiprintf_r+0xfe>
   840a6:	6830      	ldr	r0, [r6, #0]
   840a8:	9c02      	ldr	r4, [sp, #8]
   840aa:	f017 0f40 	tst.w	r7, #64	; 0x40
   840ae:	f106 0604 	add.w	r6, r6, #4
   840b2:	bf14      	ite	ne
   840b4:	8004      	strhne	r4, [r0, #0]
   840b6:	6004      	streq	r4, [r0, #0]
   840b8:	e6c5      	b.n	83e46 <_vfiprintf_r+0xfe>
   840ba:	f047 0710 	orr.w	r7, r7, #16
   840be:	f017 0020 	ands.w	r0, r7, #32
   840c2:	d008      	beq.n	840d6 <_vfiprintf_r+0x38e>
   840c4:	1df3      	adds	r3, r6, #7
   840c6:	f023 0507 	bic.w	r5, r3, #7
   840ca:	f105 0608 	add.w	r6, r5, #8
   840ce:	e9d5 4500 	ldrd	r4, r5, [r5]
   840d2:	2000      	movs	r0, #0
   840d4:	e07c      	b.n	841d0 <_vfiprintf_r+0x488>
   840d6:	f017 0110 	ands.w	r1, r7, #16
   840da:	f106 0204 	add.w	r2, r6, #4
   840de:	d106      	bne.n	840ee <_vfiprintf_r+0x3a6>
   840e0:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   840e4:	d003      	beq.n	840ee <_vfiprintf_r+0x3a6>
   840e6:	8834      	ldrh	r4, [r6, #0]
   840e8:	2500      	movs	r5, #0
   840ea:	4616      	mov	r6, r2
   840ec:	e7f1      	b.n	840d2 <_vfiprintf_r+0x38a>
   840ee:	6836      	ldr	r6, [r6, #0]
   840f0:	2500      	movs	r5, #0
   840f2:	4634      	mov	r4, r6
   840f4:	4616      	mov	r6, r2
   840f6:	e06b      	b.n	841d0 <_vfiprintf_r+0x488>
   840f8:	4b38      	ldr	r3, [pc, #224]	; (841dc <_vfiprintf_r+0x494>)
   840fa:	2130      	movs	r1, #48	; 0x30
   840fc:	2278      	movs	r2, #120	; 0x78
   840fe:	6834      	ldr	r4, [r6, #0]
   84100:	2500      	movs	r5, #0
   84102:	f047 0702 	orr.w	r7, r7, #2
   84106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8410a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8410e:	3604      	adds	r6, #4
   84110:	9305      	str	r3, [sp, #20]
   84112:	e05c      	b.n	841ce <_vfiprintf_r+0x486>
   84114:	4631      	mov	r1, r6
   84116:	2500      	movs	r5, #0
   84118:	f8d1 a000 	ldr.w	sl, [r1]
   8411c:	3604      	adds	r6, #4
   8411e:	45ac      	cmp	ip, r5
   84120:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84124:	4650      	mov	r0, sl
   84126:	db11      	blt.n	8414c <_vfiprintf_r+0x404>
   84128:	4662      	mov	r2, ip
   8412a:	4629      	mov	r1, r5
   8412c:	f8cd c000 	str.w	ip, [sp]
   84130:	f001 fa66 	bl	85600 <memchr>
   84134:	f8dd c000 	ldr.w	ip, [sp]
   84138:	2800      	cmp	r0, #0
   8413a:	f000 80d6 	beq.w	842ea <_vfiprintf_r+0x5a2>
   8413e:	ebca 0400 	rsb	r4, sl, r0
   84142:	4564      	cmp	r4, ip
   84144:	f340 80d3 	ble.w	842ee <_vfiprintf_r+0x5a6>
   84148:	4664      	mov	r4, ip
   8414a:	e0d0      	b.n	842ee <_vfiprintf_r+0x5a6>
   8414c:	f7ff fdaa 	bl	83ca4 <strlen>
   84150:	4604      	mov	r4, r0
   84152:	e0cc      	b.n	842ee <_vfiprintf_r+0x5a6>
   84154:	f047 0710 	orr.w	r7, r7, #16
   84158:	06bd      	lsls	r5, r7, #26
   8415a:	d506      	bpl.n	8416a <_vfiprintf_r+0x422>
   8415c:	1df0      	adds	r0, r6, #7
   8415e:	f020 0407 	bic.w	r4, r0, #7
   84162:	f104 0608 	add.w	r6, r4, #8
   84166:	cc30      	ldmia	r4, {r4, r5}
   84168:	e00c      	b.n	84184 <_vfiprintf_r+0x43c>
   8416a:	f017 0f10 	tst.w	r7, #16
   8416e:	f106 0304 	add.w	r3, r6, #4
   84172:	d103      	bne.n	8417c <_vfiprintf_r+0x434>
   84174:	067c      	lsls	r4, r7, #25
   84176:	d501      	bpl.n	8417c <_vfiprintf_r+0x434>
   84178:	8834      	ldrh	r4, [r6, #0]
   8417a:	e001      	b.n	84180 <_vfiprintf_r+0x438>
   8417c:	6835      	ldr	r5, [r6, #0]
   8417e:	462c      	mov	r4, r5
   84180:	2500      	movs	r5, #0
   84182:	461e      	mov	r6, r3
   84184:	2001      	movs	r0, #1
   84186:	e023      	b.n	841d0 <_vfiprintf_r+0x488>
   84188:	06b8      	lsls	r0, r7, #26
   8418a:	d507      	bpl.n	8419c <_vfiprintf_r+0x454>
   8418c:	1df4      	adds	r4, r6, #7
   8418e:	f024 0107 	bic.w	r1, r4, #7
   84192:	f101 0608 	add.w	r6, r1, #8
   84196:	e9d1 4500 	ldrd	r4, r5, [r1]
   8419a:	e00c      	b.n	841b6 <_vfiprintf_r+0x46e>
   8419c:	f017 0f10 	tst.w	r7, #16
   841a0:	f106 0004 	add.w	r0, r6, #4
   841a4:	d103      	bne.n	841ae <_vfiprintf_r+0x466>
   841a6:	0679      	lsls	r1, r7, #25
   841a8:	d501      	bpl.n	841ae <_vfiprintf_r+0x466>
   841aa:	8834      	ldrh	r4, [r6, #0]
   841ac:	e001      	b.n	841b2 <_vfiprintf_r+0x46a>
   841ae:	6836      	ldr	r6, [r6, #0]
   841b0:	4634      	mov	r4, r6
   841b2:	2500      	movs	r5, #0
   841b4:	4606      	mov	r6, r0
   841b6:	07fa      	lsls	r2, r7, #31
   841b8:	d509      	bpl.n	841ce <_vfiprintf_r+0x486>
   841ba:	ea54 0205 	orrs.w	r2, r4, r5
   841be:	d006      	beq.n	841ce <_vfiprintf_r+0x486>
   841c0:	2230      	movs	r2, #48	; 0x30
   841c2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   841c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   841ca:	f047 0702 	orr.w	r7, r7, #2
   841ce:	2002      	movs	r0, #2
   841d0:	2100      	movs	r1, #0
   841d2:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   841d6:	e004      	b.n	841e2 <_vfiprintf_r+0x49a>
   841d8:	0008635e 	.word	0x0008635e
   841dc:	0008636f 	.word	0x0008636f
   841e0:	2001      	movs	r0, #1
   841e2:	f1bc 0f00 	cmp.w	ip, #0
   841e6:	bfa8      	it	ge
   841e8:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   841ec:	ea54 0105 	orrs.w	r1, r4, r5
   841f0:	d102      	bne.n	841f8 <_vfiprintf_r+0x4b0>
   841f2:	f1bc 0f00 	cmp.w	ip, #0
   841f6:	d05a      	beq.n	842ae <_vfiprintf_r+0x566>
   841f8:	2801      	cmp	r0, #1
   841fa:	d01d      	beq.n	84238 <_vfiprintf_r+0x4f0>
   841fc:	2802      	cmp	r0, #2
   841fe:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84202:	d043      	beq.n	8428c <_vfiprintf_r+0x544>
   84204:	f004 0207 	and.w	r2, r4, #7
   84208:	08e4      	lsrs	r4, r4, #3
   8420a:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8420e:	08e9      	lsrs	r1, r5, #3
   84210:	4604      	mov	r4, r0
   84212:	460d      	mov	r5, r1
   84214:	3230      	adds	r2, #48	; 0x30
   84216:	ea54 0105 	orrs.w	r1, r4, r5
   8421a:	469a      	mov	sl, r3
   8421c:	701a      	strb	r2, [r3, #0]
   8421e:	f103 33ff 	add.w	r3, r3, #4294967295
   84222:	d1ef      	bne.n	84204 <_vfiprintf_r+0x4bc>
   84224:	07f8      	lsls	r0, r7, #31
   84226:	4655      	mov	r5, sl
   84228:	d54c      	bpl.n	842c4 <_vfiprintf_r+0x57c>
   8422a:	2a30      	cmp	r2, #48	; 0x30
   8422c:	d04a      	beq.n	842c4 <_vfiprintf_r+0x57c>
   8422e:	2230      	movs	r2, #48	; 0x30
   84230:	469a      	mov	sl, r3
   84232:	f805 2c01 	strb.w	r2, [r5, #-1]
   84236:	e045      	b.n	842c4 <_vfiprintf_r+0x57c>
   84238:	2d00      	cmp	r5, #0
   8423a:	bf08      	it	eq
   8423c:	2c0a      	cmpeq	r4, #10
   8423e:	d205      	bcs.n	8424c <_vfiprintf_r+0x504>
   84240:	3430      	adds	r4, #48	; 0x30
   84242:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   84246:	f80a 4f27 	strb.w	r4, [sl, #39]!
   8424a:	e03b      	b.n	842c4 <_vfiprintf_r+0x57c>
   8424c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84250:	9303      	str	r3, [sp, #12]
   84252:	4620      	mov	r0, r4
   84254:	4629      	mov	r1, r5
   84256:	220a      	movs	r2, #10
   84258:	2300      	movs	r3, #0
   8425a:	f8cd c000 	str.w	ip, [sp]
   8425e:	f001 fd2b 	bl	85cb8 <__aeabi_uldivmod>
   84262:	9803      	ldr	r0, [sp, #12]
   84264:	3230      	adds	r2, #48	; 0x30
   84266:	f800 2901 	strb.w	r2, [r0], #-1
   8426a:	4629      	mov	r1, r5
   8426c:	220a      	movs	r2, #10
   8426e:	2300      	movs	r3, #0
   84270:	f8dd a00c 	ldr.w	sl, [sp, #12]
   84274:	9003      	str	r0, [sp, #12]
   84276:	4620      	mov	r0, r4
   84278:	f001 fd1e 	bl	85cb8 <__aeabi_uldivmod>
   8427c:	4604      	mov	r4, r0
   8427e:	460d      	mov	r5, r1
   84280:	ea54 0105 	orrs.w	r1, r4, r5
   84284:	f8dd c000 	ldr.w	ip, [sp]
   84288:	d1e3      	bne.n	84252 <_vfiprintf_r+0x50a>
   8428a:	e01b      	b.n	842c4 <_vfiprintf_r+0x57c>
   8428c:	9905      	ldr	r1, [sp, #20]
   8428e:	f004 000f 	and.w	r0, r4, #15
   84292:	0924      	lsrs	r4, r4, #4
   84294:	5c0a      	ldrb	r2, [r1, r0]
   84296:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8429a:	0929      	lsrs	r1, r5, #4
   8429c:	4604      	mov	r4, r0
   8429e:	460d      	mov	r5, r1
   842a0:	469a      	mov	sl, r3
   842a2:	f803 2901 	strb.w	r2, [r3], #-1
   842a6:	ea54 0205 	orrs.w	r2, r4, r5
   842aa:	d1ef      	bne.n	8428c <_vfiprintf_r+0x544>
   842ac:	e00a      	b.n	842c4 <_vfiprintf_r+0x57c>
   842ae:	b938      	cbnz	r0, 842c0 <_vfiprintf_r+0x578>
   842b0:	07f9      	lsls	r1, r7, #31
   842b2:	d505      	bpl.n	842c0 <_vfiprintf_r+0x578>
   842b4:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   842b8:	2030      	movs	r0, #48	; 0x30
   842ba:	f80a 0f27 	strb.w	r0, [sl, #39]!
   842be:	e001      	b.n	842c4 <_vfiprintf_r+0x57c>
   842c0:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   842c4:	ad18      	add	r5, sp, #96	; 0x60
   842c6:	ebca 0405 	rsb	r4, sl, r5
   842ca:	4665      	mov	r5, ip
   842cc:	e00f      	b.n	842ee <_vfiprintf_r+0x5a6>
   842ce:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   842d2:	2b00      	cmp	r3, #0
   842d4:	f000 8176 	beq.w	845c4 <_vfiprintf_r+0x87c>
   842d8:	2500      	movs	r5, #0
   842da:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   842de:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   842e2:	2401      	movs	r4, #1
   842e4:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   842e8:	e001      	b.n	842ee <_vfiprintf_r+0x5a6>
   842ea:	4664      	mov	r4, ip
   842ec:	4605      	mov	r5, r0
   842ee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   842f2:	42ac      	cmp	r4, r5
   842f4:	bfac      	ite	ge
   842f6:	4621      	movge	r1, r4
   842f8:	4629      	movlt	r1, r5
   842fa:	9103      	str	r1, [sp, #12]
   842fc:	b113      	cbz	r3, 84304 <_vfiprintf_r+0x5bc>
   842fe:	9803      	ldr	r0, [sp, #12]
   84300:	1c42      	adds	r2, r0, #1
   84302:	9203      	str	r2, [sp, #12]
   84304:	f017 0102 	ands.w	r1, r7, #2
   84308:	9106      	str	r1, [sp, #24]
   8430a:	d002      	beq.n	84312 <_vfiprintf_r+0x5ca>
   8430c:	9b03      	ldr	r3, [sp, #12]
   8430e:	1c98      	adds	r0, r3, #2
   84310:	9003      	str	r0, [sp, #12]
   84312:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   84316:	9207      	str	r2, [sp, #28]
   84318:	d13c      	bne.n	84394 <_vfiprintf_r+0x64c>
   8431a:	9904      	ldr	r1, [sp, #16]
   8431c:	9b03      	ldr	r3, [sp, #12]
   8431e:	1acb      	subs	r3, r1, r3
   84320:	2b00      	cmp	r3, #0
   84322:	dd37      	ble.n	84394 <_vfiprintf_r+0x64c>
   84324:	48a5      	ldr	r0, [pc, #660]	; (845bc <_vfiprintf_r+0x874>)
   84326:	2b10      	cmp	r3, #16
   84328:	f8c8 0000 	str.w	r0, [r8]
   8432c:	dd1b      	ble.n	84366 <_vfiprintf_r+0x61e>
   8432e:	990c      	ldr	r1, [sp, #48]	; 0x30
   84330:	2210      	movs	r2, #16
   84332:	980d      	ldr	r0, [sp, #52]	; 0x34
   84334:	f8c8 2004 	str.w	r2, [r8, #4]
   84338:	1c4a      	adds	r2, r1, #1
   8433a:	3010      	adds	r0, #16
   8433c:	2a07      	cmp	r2, #7
   8433e:	900d      	str	r0, [sp, #52]	; 0x34
   84340:	920c      	str	r2, [sp, #48]	; 0x30
   84342:	dc02      	bgt.n	8434a <_vfiprintf_r+0x602>
   84344:	f108 0808 	add.w	r8, r8, #8
   84348:	e00b      	b.n	84362 <_vfiprintf_r+0x61a>
   8434a:	4658      	mov	r0, fp
   8434c:	4649      	mov	r1, r9
   8434e:	aa0b      	add	r2, sp, #44	; 0x2c
   84350:	9300      	str	r3, [sp, #0]
   84352:	f7ff fcc5 	bl	83ce0 <__sprint_r>
   84356:	9b00      	ldr	r3, [sp, #0]
   84358:	2800      	cmp	r0, #0
   8435a:	f040 813a 	bne.w	845d2 <_vfiprintf_r+0x88a>
   8435e:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84362:	3b10      	subs	r3, #16
   84364:	e7de      	b.n	84324 <_vfiprintf_r+0x5dc>
   84366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84368:	f8c8 3004 	str.w	r3, [r8, #4]
   8436c:	18d1      	adds	r1, r2, r3
   8436e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84370:	910d      	str	r1, [sp, #52]	; 0x34
   84372:	1c58      	adds	r0, r3, #1
   84374:	2807      	cmp	r0, #7
   84376:	900c      	str	r0, [sp, #48]	; 0x30
   84378:	dc02      	bgt.n	84380 <_vfiprintf_r+0x638>
   8437a:	f108 0808 	add.w	r8, r8, #8
   8437e:	e009      	b.n	84394 <_vfiprintf_r+0x64c>
   84380:	4658      	mov	r0, fp
   84382:	4649      	mov	r1, r9
   84384:	aa0b      	add	r2, sp, #44	; 0x2c
   84386:	f7ff fcab 	bl	83ce0 <__sprint_r>
   8438a:	2800      	cmp	r0, #0
   8438c:	f040 8121 	bne.w	845d2 <_vfiprintf_r+0x88a>
   84390:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   84394:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   84398:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8439c:	b1ca      	cbz	r2, 843d2 <_vfiprintf_r+0x68a>
   8439e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   843a0:	2301      	movs	r3, #1
   843a2:	980d      	ldr	r0, [sp, #52]	; 0x34
   843a4:	f8c8 3004 	str.w	r3, [r8, #4]
   843a8:	1c53      	adds	r3, r2, #1
   843aa:	f8c8 1000 	str.w	r1, [r8]
   843ae:	1c41      	adds	r1, r0, #1
   843b0:	2b07      	cmp	r3, #7
   843b2:	910d      	str	r1, [sp, #52]	; 0x34
   843b4:	930c      	str	r3, [sp, #48]	; 0x30
   843b6:	dc02      	bgt.n	843be <_vfiprintf_r+0x676>
   843b8:	f108 0808 	add.w	r8, r8, #8
   843bc:	e009      	b.n	843d2 <_vfiprintf_r+0x68a>
   843be:	4658      	mov	r0, fp
   843c0:	4649      	mov	r1, r9
   843c2:	aa0b      	add	r2, sp, #44	; 0x2c
   843c4:	f7ff fc8c 	bl	83ce0 <__sprint_r>
   843c8:	2800      	cmp	r0, #0
   843ca:	f040 8102 	bne.w	845d2 <_vfiprintf_r+0x88a>
   843ce:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   843d2:	9806      	ldr	r0, [sp, #24]
   843d4:	b1d0      	cbz	r0, 8440c <_vfiprintf_r+0x6c4>
   843d6:	a90a      	add	r1, sp, #40	; 0x28
   843d8:	f8c8 1000 	str.w	r1, [r8]
   843dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   843de:	2202      	movs	r2, #2
   843e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   843e2:	f8c8 2004 	str.w	r2, [r8, #4]
   843e6:	1c4a      	adds	r2, r1, #1
   843e8:	1c98      	adds	r0, r3, #2
   843ea:	2a07      	cmp	r2, #7
   843ec:	900d      	str	r0, [sp, #52]	; 0x34
   843ee:	920c      	str	r2, [sp, #48]	; 0x30
   843f0:	dc02      	bgt.n	843f8 <_vfiprintf_r+0x6b0>
   843f2:	f108 0808 	add.w	r8, r8, #8
   843f6:	e009      	b.n	8440c <_vfiprintf_r+0x6c4>
   843f8:	4658      	mov	r0, fp
   843fa:	4649      	mov	r1, r9
   843fc:	aa0b      	add	r2, sp, #44	; 0x2c
   843fe:	f7ff fc6f 	bl	83ce0 <__sprint_r>
   84402:	2800      	cmp	r0, #0
   84404:	f040 80e5 	bne.w	845d2 <_vfiprintf_r+0x88a>
   84408:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   8440c:	9b07      	ldr	r3, [sp, #28]
   8440e:	2b80      	cmp	r3, #128	; 0x80
   84410:	d13c      	bne.n	8448c <_vfiprintf_r+0x744>
   84412:	9804      	ldr	r0, [sp, #16]
   84414:	9903      	ldr	r1, [sp, #12]
   84416:	1a43      	subs	r3, r0, r1
   84418:	2b00      	cmp	r3, #0
   8441a:	dd37      	ble.n	8448c <_vfiprintf_r+0x744>
   8441c:	4a68      	ldr	r2, [pc, #416]	; (845c0 <_vfiprintf_r+0x878>)
   8441e:	2b10      	cmp	r3, #16
   84420:	f8c8 2000 	str.w	r2, [r8]
   84424:	dd1b      	ble.n	8445e <_vfiprintf_r+0x716>
   84426:	980c      	ldr	r0, [sp, #48]	; 0x30
   84428:	2110      	movs	r1, #16
   8442a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8442c:	f8c8 1004 	str.w	r1, [r8, #4]
   84430:	1c41      	adds	r1, r0, #1
   84432:	3210      	adds	r2, #16
   84434:	2907      	cmp	r1, #7
   84436:	920d      	str	r2, [sp, #52]	; 0x34
   84438:	910c      	str	r1, [sp, #48]	; 0x30
   8443a:	dc02      	bgt.n	84442 <_vfiprintf_r+0x6fa>
   8443c:	f108 0808 	add.w	r8, r8, #8
   84440:	e00b      	b.n	8445a <_vfiprintf_r+0x712>
   84442:	4658      	mov	r0, fp
   84444:	4649      	mov	r1, r9
   84446:	aa0b      	add	r2, sp, #44	; 0x2c
   84448:	9300      	str	r3, [sp, #0]
   8444a:	f7ff fc49 	bl	83ce0 <__sprint_r>
   8444e:	9b00      	ldr	r3, [sp, #0]
   84450:	2800      	cmp	r0, #0
   84452:	f040 80be 	bne.w	845d2 <_vfiprintf_r+0x88a>
   84456:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   8445a:	3b10      	subs	r3, #16
   8445c:	e7de      	b.n	8441c <_vfiprintf_r+0x6d4>
   8445e:	990c      	ldr	r1, [sp, #48]	; 0x30
   84460:	980d      	ldr	r0, [sp, #52]	; 0x34
   84462:	1c4a      	adds	r2, r1, #1
   84464:	f8c8 3004 	str.w	r3, [r8, #4]
   84468:	2a07      	cmp	r2, #7
   8446a:	4403      	add	r3, r0
   8446c:	930d      	str	r3, [sp, #52]	; 0x34
   8446e:	920c      	str	r2, [sp, #48]	; 0x30
   84470:	dc02      	bgt.n	84478 <_vfiprintf_r+0x730>
   84472:	f108 0808 	add.w	r8, r8, #8
   84476:	e009      	b.n	8448c <_vfiprintf_r+0x744>
   84478:	4658      	mov	r0, fp
   8447a:	4649      	mov	r1, r9
   8447c:	aa0b      	add	r2, sp, #44	; 0x2c
   8447e:	f7ff fc2f 	bl	83ce0 <__sprint_r>
   84482:	2800      	cmp	r0, #0
   84484:	f040 80a5 	bne.w	845d2 <_vfiprintf_r+0x88a>
   84488:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   8448c:	1b2d      	subs	r5, r5, r4
   8448e:	2d00      	cmp	r5, #0
   84490:	dd34      	ble.n	844fc <_vfiprintf_r+0x7b4>
   84492:	484b      	ldr	r0, [pc, #300]	; (845c0 <_vfiprintf_r+0x878>)
   84494:	2d10      	cmp	r5, #16
   84496:	f8c8 0000 	str.w	r0, [r8]
   8449a:	dd19      	ble.n	844d0 <_vfiprintf_r+0x788>
   8449c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8449e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   844a0:	1c43      	adds	r3, r0, #1
   844a2:	2110      	movs	r1, #16
   844a4:	3210      	adds	r2, #16
   844a6:	2b07      	cmp	r3, #7
   844a8:	f8c8 1004 	str.w	r1, [r8, #4]
   844ac:	920d      	str	r2, [sp, #52]	; 0x34
   844ae:	930c      	str	r3, [sp, #48]	; 0x30
   844b0:	dc02      	bgt.n	844b8 <_vfiprintf_r+0x770>
   844b2:	f108 0808 	add.w	r8, r8, #8
   844b6:	e009      	b.n	844cc <_vfiprintf_r+0x784>
   844b8:	4658      	mov	r0, fp
   844ba:	4649      	mov	r1, r9
   844bc:	aa0b      	add	r2, sp, #44	; 0x2c
   844be:	f7ff fc0f 	bl	83ce0 <__sprint_r>
   844c2:	2800      	cmp	r0, #0
   844c4:	f040 8085 	bne.w	845d2 <_vfiprintf_r+0x88a>
   844c8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   844cc:	3d10      	subs	r5, #16
   844ce:	e7e0      	b.n	84492 <_vfiprintf_r+0x74a>
   844d0:	990c      	ldr	r1, [sp, #48]	; 0x30
   844d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   844d4:	1c4a      	adds	r2, r1, #1
   844d6:	f8c8 5004 	str.w	r5, [r8, #4]
   844da:	2a07      	cmp	r2, #7
   844dc:	441d      	add	r5, r3
   844de:	950d      	str	r5, [sp, #52]	; 0x34
   844e0:	920c      	str	r2, [sp, #48]	; 0x30
   844e2:	dc02      	bgt.n	844ea <_vfiprintf_r+0x7a2>
   844e4:	f108 0808 	add.w	r8, r8, #8
   844e8:	e008      	b.n	844fc <_vfiprintf_r+0x7b4>
   844ea:	4658      	mov	r0, fp
   844ec:	4649      	mov	r1, r9
   844ee:	aa0b      	add	r2, sp, #44	; 0x2c
   844f0:	f7ff fbf6 	bl	83ce0 <__sprint_r>
   844f4:	2800      	cmp	r0, #0
   844f6:	d16c      	bne.n	845d2 <_vfiprintf_r+0x88a>
   844f8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   844fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   844fe:	980d      	ldr	r0, [sp, #52]	; 0x34
   84500:	1c59      	adds	r1, r3, #1
   84502:	f8c8 4004 	str.w	r4, [r8, #4]
   84506:	2907      	cmp	r1, #7
   84508:	4404      	add	r4, r0
   8450a:	f8c8 a000 	str.w	sl, [r8]
   8450e:	940d      	str	r4, [sp, #52]	; 0x34
   84510:	910c      	str	r1, [sp, #48]	; 0x30
   84512:	dc02      	bgt.n	8451a <_vfiprintf_r+0x7d2>
   84514:	f108 0308 	add.w	r3, r8, #8
   84518:	e007      	b.n	8452a <_vfiprintf_r+0x7e2>
   8451a:	4658      	mov	r0, fp
   8451c:	4649      	mov	r1, r9
   8451e:	aa0b      	add	r2, sp, #44	; 0x2c
   84520:	f7ff fbde 	bl	83ce0 <__sprint_r>
   84524:	2800      	cmp	r0, #0
   84526:	d154      	bne.n	845d2 <_vfiprintf_r+0x88a>
   84528:	ab32      	add	r3, sp, #200	; 0xc8
   8452a:	077a      	lsls	r2, r7, #29
   8452c:	d40b      	bmi.n	84546 <_vfiprintf_r+0x7fe>
   8452e:	9802      	ldr	r0, [sp, #8]
   84530:	9b03      	ldr	r3, [sp, #12]
   84532:	9904      	ldr	r1, [sp, #16]
   84534:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84536:	428b      	cmp	r3, r1
   84538:	bfac      	ite	ge
   8453a:	18c0      	addge	r0, r0, r3
   8453c:	1840      	addlt	r0, r0, r1
   8453e:	9002      	str	r0, [sp, #8]
   84540:	2a00      	cmp	r2, #0
   84542:	d036      	beq.n	845b2 <_vfiprintf_r+0x86a>
   84544:	e02f      	b.n	845a6 <_vfiprintf_r+0x85e>
   84546:	9c04      	ldr	r4, [sp, #16]
   84548:	9a03      	ldr	r2, [sp, #12]
   8454a:	1aa4      	subs	r4, r4, r2
   8454c:	2c00      	cmp	r4, #0
   8454e:	ddee      	ble.n	8452e <_vfiprintf_r+0x7e6>
   84550:	481a      	ldr	r0, [pc, #104]	; (845bc <_vfiprintf_r+0x874>)
   84552:	2c10      	cmp	r4, #16
   84554:	6018      	str	r0, [r3, #0]
   84556:	dd15      	ble.n	84584 <_vfiprintf_r+0x83c>
   84558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8455a:	2010      	movs	r0, #16
   8455c:	990d      	ldr	r1, [sp, #52]	; 0x34
   8455e:	6058      	str	r0, [r3, #4]
   84560:	1c50      	adds	r0, r2, #1
   84562:	3110      	adds	r1, #16
   84564:	2807      	cmp	r0, #7
   84566:	910d      	str	r1, [sp, #52]	; 0x34
   84568:	900c      	str	r0, [sp, #48]	; 0x30
   8456a:	dc01      	bgt.n	84570 <_vfiprintf_r+0x828>
   8456c:	3308      	adds	r3, #8
   8456e:	e007      	b.n	84580 <_vfiprintf_r+0x838>
   84570:	4658      	mov	r0, fp
   84572:	4649      	mov	r1, r9
   84574:	aa0b      	add	r2, sp, #44	; 0x2c
   84576:	f7ff fbb3 	bl	83ce0 <__sprint_r>
   8457a:	2800      	cmp	r0, #0
   8457c:	d129      	bne.n	845d2 <_vfiprintf_r+0x88a>
   8457e:	ab32      	add	r3, sp, #200	; 0xc8
   84580:	3c10      	subs	r4, #16
   84582:	e7e5      	b.n	84550 <_vfiprintf_r+0x808>
   84584:	990c      	ldr	r1, [sp, #48]	; 0x30
   84586:	605c      	str	r4, [r3, #4]
   84588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8458a:	1c4a      	adds	r2, r1, #1
   8458c:	191c      	adds	r4, r3, r4
   8458e:	2a07      	cmp	r2, #7
   84590:	940d      	str	r4, [sp, #52]	; 0x34
   84592:	920c      	str	r2, [sp, #48]	; 0x30
   84594:	ddcb      	ble.n	8452e <_vfiprintf_r+0x7e6>
   84596:	4658      	mov	r0, fp
   84598:	4649      	mov	r1, r9
   8459a:	aa0b      	add	r2, sp, #44	; 0x2c
   8459c:	f7ff fba0 	bl	83ce0 <__sprint_r>
   845a0:	2800      	cmp	r0, #0
   845a2:	d0c4      	beq.n	8452e <_vfiprintf_r+0x7e6>
   845a4:	e015      	b.n	845d2 <_vfiprintf_r+0x88a>
   845a6:	4658      	mov	r0, fp
   845a8:	4649      	mov	r1, r9
   845aa:	aa0b      	add	r2, sp, #44	; 0x2c
   845ac:	f7ff fb98 	bl	83ce0 <__sprint_r>
   845b0:	b978      	cbnz	r0, 845d2 <_vfiprintf_r+0x88a>
   845b2:	2500      	movs	r5, #0
   845b4:	950c      	str	r5, [sp, #48]	; 0x30
   845b6:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   845ba:	e444      	b.n	83e46 <_vfiprintf_r+0xfe>
   845bc:	0008633e 	.word	0x0008633e
   845c0:	0008634e 	.word	0x0008634e
   845c4:	980d      	ldr	r0, [sp, #52]	; 0x34
   845c6:	b120      	cbz	r0, 845d2 <_vfiprintf_r+0x88a>
   845c8:	4658      	mov	r0, fp
   845ca:	4649      	mov	r1, r9
   845cc:	aa0b      	add	r2, sp, #44	; 0x2c
   845ce:	f7ff fb87 	bl	83ce0 <__sprint_r>
   845d2:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   845d6:	f001 0240 	and.w	r2, r1, #64	; 0x40
   845da:	b213      	sxth	r3, r2
   845dc:	2b00      	cmp	r3, #0
   845de:	f47f abe6 	bne.w	83dae <_vfiprintf_r+0x66>
   845e2:	9802      	ldr	r0, [sp, #8]
   845e4:	b033      	add	sp, #204	; 0xcc
   845e6:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   845ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000845ee <vfiprintf>:
   845ee:	b530      	push	{r4, r5, lr}
   845f0:	4613      	mov	r3, r2
   845f2:	4a05      	ldr	r2, [pc, #20]	; (84608 <vfiprintf+0x1a>)
   845f4:	4605      	mov	r5, r0
   845f6:	460c      	mov	r4, r1
   845f8:	6810      	ldr	r0, [r2, #0]
   845fa:	4629      	mov	r1, r5
   845fc:	4622      	mov	r2, r4
   845fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   84602:	f7ff bba1 	b.w	83d48 <_vfiprintf_r>
   84606:	bf00      	nop
   84608:	20070020 	.word	0x20070020

0008460c <__swsetup_r>:
   8460c:	b538      	push	{r3, r4, r5, lr}
   8460e:	4b2c      	ldr	r3, [pc, #176]	; (846c0 <__swsetup_r+0xb4>)
   84610:	4605      	mov	r5, r0
   84612:	6818      	ldr	r0, [r3, #0]
   84614:	460c      	mov	r4, r1
   84616:	b118      	cbz	r0, 84620 <__swsetup_r+0x14>
   84618:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8461a:	b90a      	cbnz	r2, 84620 <__swsetup_r+0x14>
   8461c:	f000 f99c 	bl	84958 <__sinit>
   84620:	89a0      	ldrh	r0, [r4, #12]
   84622:	f000 0108 	and.w	r1, r0, #8
   84626:	b20b      	sxth	r3, r1
   84628:	bb0b      	cbnz	r3, 8466e <__swsetup_r+0x62>
   8462a:	f000 0210 	and.w	r2, r0, #16
   8462e:	b211      	sxth	r1, r2
   84630:	b911      	cbnz	r1, 84638 <__swsetup_r+0x2c>
   84632:	f04f 30ff 	mov.w	r0, #4294967295
   84636:	bd38      	pop	{r3, r4, r5, pc}
   84638:	f000 0004 	and.w	r0, r0, #4
   8463c:	b203      	sxth	r3, r0
   8463e:	b193      	cbz	r3, 84666 <__swsetup_r+0x5a>
   84640:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84642:	b141      	cbz	r1, 84656 <__swsetup_r+0x4a>
   84644:	f104 0240 	add.w	r2, r4, #64	; 0x40
   84648:	4291      	cmp	r1, r2
   8464a:	d002      	beq.n	84652 <__swsetup_r+0x46>
   8464c:	4628      	mov	r0, r5
   8464e:	f000 fac1 	bl	84bd4 <_free_r>
   84652:	2100      	movs	r1, #0
   84654:	6321      	str	r1, [r4, #48]	; 0x30
   84656:	89a0      	ldrh	r0, [r4, #12]
   84658:	6921      	ldr	r1, [r4, #16]
   8465a:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   8465e:	2200      	movs	r2, #0
   84660:	81a3      	strh	r3, [r4, #12]
   84662:	6062      	str	r2, [r4, #4]
   84664:	6021      	str	r1, [r4, #0]
   84666:	89a0      	ldrh	r0, [r4, #12]
   84668:	f040 0308 	orr.w	r3, r0, #8
   8466c:	81a3      	strh	r3, [r4, #12]
   8466e:	6922      	ldr	r2, [r4, #16]
   84670:	b94a      	cbnz	r2, 84686 <__swsetup_r+0x7a>
   84672:	89a1      	ldrh	r1, [r4, #12]
   84674:	f401 7020 	and.w	r0, r1, #640	; 0x280
   84678:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8467c:	d003      	beq.n	84686 <__swsetup_r+0x7a>
   8467e:	4628      	mov	r0, r5
   84680:	4621      	mov	r1, r4
   84682:	f000 fd3f 	bl	85104 <__smakebuf_r>
   84686:	89a3      	ldrh	r3, [r4, #12]
   84688:	f013 0201 	ands.w	r2, r3, #1
   8468c:	d005      	beq.n	8469a <__swsetup_r+0x8e>
   8468e:	6961      	ldr	r1, [r4, #20]
   84690:	2200      	movs	r2, #0
   84692:	4248      	negs	r0, r1
   84694:	60a2      	str	r2, [r4, #8]
   84696:	61a0      	str	r0, [r4, #24]
   84698:	e007      	b.n	846aa <__swsetup_r+0x9e>
   8469a:	f003 0102 	and.w	r1, r3, #2
   8469e:	b208      	sxth	r0, r1
   846a0:	b908      	cbnz	r0, 846a6 <__swsetup_r+0x9a>
   846a2:	6963      	ldr	r3, [r4, #20]
   846a4:	e000      	b.n	846a8 <__swsetup_r+0x9c>
   846a6:	4613      	mov	r3, r2
   846a8:	60a3      	str	r3, [r4, #8]
   846aa:	6923      	ldr	r3, [r4, #16]
   846ac:	b933      	cbnz	r3, 846bc <__swsetup_r+0xb0>
   846ae:	89a2      	ldrh	r2, [r4, #12]
   846b0:	f002 0180 	and.w	r1, r2, #128	; 0x80
   846b4:	b208      	sxth	r0, r1
   846b6:	2800      	cmp	r0, #0
   846b8:	d1bb      	bne.n	84632 <__swsetup_r+0x26>
   846ba:	bd38      	pop	{r3, r4, r5, pc}
   846bc:	2000      	movs	r0, #0
   846be:	bd38      	pop	{r3, r4, r5, pc}
   846c0:	20070020 	.word	0x20070020

000846c4 <__register_exitproc>:
   846c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   846c8:	4698      	mov	r8, r3
   846ca:	4b23      	ldr	r3, [pc, #140]	; (84758 <__register_exitproc+0x94>)
   846cc:	4606      	mov	r6, r0
   846ce:	681c      	ldr	r4, [r3, #0]
   846d0:	460f      	mov	r7, r1
   846d2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   846d6:	4691      	mov	r9, r2
   846d8:	b918      	cbnz	r0, 846e2 <__register_exitproc+0x1e>
   846da:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   846de:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   846e2:	6841      	ldr	r1, [r0, #4]
   846e4:	291f      	cmp	r1, #31
   846e6:	dd16      	ble.n	84716 <__register_exitproc+0x52>
   846e8:	481c      	ldr	r0, [pc, #112]	; (8475c <__register_exitproc+0x98>)
   846ea:	b918      	cbnz	r0, 846f4 <__register_exitproc+0x30>
   846ec:	f04f 30ff 	mov.w	r0, #4294967295
   846f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   846f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   846f8:	f000 fd70 	bl	851dc <malloc>
   846fc:	2800      	cmp	r0, #0
   846fe:	d0f5      	beq.n	846ec <__register_exitproc+0x28>
   84700:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   84704:	2500      	movs	r5, #0
   84706:	6045      	str	r5, [r0, #4]
   84708:	6002      	str	r2, [r0, #0]
   8470a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8470e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   84712:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   84716:	b1b6      	cbz	r6, 84746 <__register_exitproc+0x82>
   84718:	6844      	ldr	r4, [r0, #4]
   8471a:	2201      	movs	r2, #1
   8471c:	fa02 f204 	lsl.w	r2, r2, r4
   84720:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   84724:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   84728:	4311      	orrs	r1, r2
   8472a:	2e02      	cmp	r6, #2
   8472c:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   84730:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   84734:	461c      	mov	r4, r3
   84736:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8473a:	d104      	bne.n	84746 <__register_exitproc+0x82>
   8473c:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   84740:	431a      	orrs	r2, r3
   84742:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   84746:	6841      	ldr	r1, [r0, #4]
   84748:	1c8b      	adds	r3, r1, #2
   8474a:	1c4a      	adds	r2, r1, #1
   8474c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   84750:	6042      	str	r2, [r0, #4]
   84752:	2000      	movs	r0, #0
   84754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84758:	00086338 	.word	0x00086338
   8475c:	000851dd 	.word	0x000851dd

00084760 <register_fini>:
   84760:	4b02      	ldr	r3, [pc, #8]	; (8476c <register_fini+0xc>)
   84762:	b113      	cbz	r3, 8476a <register_fini+0xa>
   84764:	4802      	ldr	r0, [pc, #8]	; (84770 <register_fini+0x10>)
   84766:	f7ff b9ab 	b.w	83ac0 <atexit>
   8476a:	4770      	bx	lr
   8476c:	00000000 	.word	0x00000000
   84770:	00083acd 	.word	0x00083acd

00084774 <_fflush_r>:
   84774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84778:	460c      	mov	r4, r1
   8477a:	4605      	mov	r5, r0
   8477c:	b118      	cbz	r0, 84786 <_fflush_r+0x12>
   8477e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84780:	b90b      	cbnz	r3, 84786 <_fflush_r+0x12>
   84782:	f000 f8e9 	bl	84958 <__sinit>
   84786:	89a2      	ldrh	r2, [r4, #12]
   84788:	b332      	cbz	r2, 847d8 <_fflush_r+0x64>
   8478a:	f002 0008 	and.w	r0, r2, #8
   8478e:	b201      	sxth	r1, r0
   84790:	2900      	cmp	r1, #0
   84792:	d162      	bne.n	8485a <_fflush_r+0xe6>
   84794:	6861      	ldr	r1, [r4, #4]
   84796:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   8479a:	2900      	cmp	r1, #0
   8479c:	81a0      	strh	r0, [r4, #12]
   8479e:	dc02      	bgt.n	847a6 <_fflush_r+0x32>
   847a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   847a2:	2b00      	cmp	r3, #0
   847a4:	dd18      	ble.n	847d8 <_fflush_r+0x64>
   847a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   847a8:	b1b6      	cbz	r6, 847d8 <_fflush_r+0x64>
   847aa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   847ae:	2000      	movs	r0, #0
   847b0:	b212      	sxth	r2, r2
   847b2:	682f      	ldr	r7, [r5, #0]
   847b4:	6028      	str	r0, [r5, #0]
   847b6:	b10a      	cbz	r2, 847bc <_fflush_r+0x48>
   847b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   847ba:	e010      	b.n	847de <_fflush_r+0x6a>
   847bc:	2301      	movs	r3, #1
   847be:	4628      	mov	r0, r5
   847c0:	69e1      	ldr	r1, [r4, #28]
   847c2:	47b0      	blx	r6
   847c4:	4602      	mov	r2, r0
   847c6:	3001      	adds	r0, #1
   847c8:	d109      	bne.n	847de <_fflush_r+0x6a>
   847ca:	6829      	ldr	r1, [r5, #0]
   847cc:	b139      	cbz	r1, 847de <_fflush_r+0x6a>
   847ce:	291d      	cmp	r1, #29
   847d0:	d001      	beq.n	847d6 <_fflush_r+0x62>
   847d2:	2916      	cmp	r1, #22
   847d4:	d14e      	bne.n	84874 <_fflush_r+0x100>
   847d6:	602f      	str	r7, [r5, #0]
   847d8:	2000      	movs	r0, #0
   847da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   847de:	89a6      	ldrh	r6, [r4, #12]
   847e0:	f006 0104 	and.w	r1, r6, #4
   847e4:	b20b      	sxth	r3, r1
   847e6:	b12b      	cbz	r3, 847f4 <_fflush_r+0x80>
   847e8:	6860      	ldr	r0, [r4, #4]
   847ea:	6b26      	ldr	r6, [r4, #48]	; 0x30
   847ec:	1a12      	subs	r2, r2, r0
   847ee:	b10e      	cbz	r6, 847f4 <_fflush_r+0x80>
   847f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   847f2:	1a52      	subs	r2, r2, r1
   847f4:	69e1      	ldr	r1, [r4, #28]
   847f6:	2300      	movs	r3, #0
   847f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   847fa:	4628      	mov	r0, r5
   847fc:	47b0      	blx	r6
   847fe:	1c41      	adds	r1, r0, #1
   84800:	d105      	bne.n	8480e <_fflush_r+0x9a>
   84802:	682a      	ldr	r2, [r5, #0]
   84804:	b11a      	cbz	r2, 8480e <_fflush_r+0x9a>
   84806:	2a1d      	cmp	r2, #29
   84808:	d001      	beq.n	8480e <_fflush_r+0x9a>
   8480a:	2a16      	cmp	r2, #22
   8480c:	d11f      	bne.n	8484e <_fflush_r+0xda>
   8480e:	89a3      	ldrh	r3, [r4, #12]
   84810:	2100      	movs	r1, #0
   84812:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   84816:	81a2      	strh	r2, [r4, #12]
   84818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   8481c:	6922      	ldr	r2, [r4, #16]
   8481e:	6061      	str	r1, [r4, #4]
   84820:	b219      	sxth	r1, r3
   84822:	6022      	str	r2, [r4, #0]
   84824:	b121      	cbz	r1, 84830 <_fflush_r+0xbc>
   84826:	1c42      	adds	r2, r0, #1
   84828:	d101      	bne.n	8482e <_fflush_r+0xba>
   8482a:	682a      	ldr	r2, [r5, #0]
   8482c:	b902      	cbnz	r2, 84830 <_fflush_r+0xbc>
   8482e:	6520      	str	r0, [r4, #80]	; 0x50
   84830:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84832:	602f      	str	r7, [r5, #0]
   84834:	2900      	cmp	r1, #0
   84836:	d0cf      	beq.n	847d8 <_fflush_r+0x64>
   84838:	f104 0040 	add.w	r0, r4, #64	; 0x40
   8483c:	4281      	cmp	r1, r0
   8483e:	d002      	beq.n	84846 <_fflush_r+0xd2>
   84840:	4628      	mov	r0, r5
   84842:	f000 f9c7 	bl	84bd4 <_free_r>
   84846:	2000      	movs	r0, #0
   84848:	6320      	str	r0, [r4, #48]	; 0x30
   8484a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8484e:	89a3      	ldrh	r3, [r4, #12]
   84850:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   84854:	81a1      	strh	r1, [r4, #12]
   84856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8485a:	6926      	ldr	r6, [r4, #16]
   8485c:	2e00      	cmp	r6, #0
   8485e:	d0bb      	beq.n	847d8 <_fflush_r+0x64>
   84860:	0792      	lsls	r2, r2, #30
   84862:	6823      	ldr	r3, [r4, #0]
   84864:	bf0c      	ite	eq
   84866:	6962      	ldreq	r2, [r4, #20]
   84868:	2200      	movne	r2, #0
   8486a:	ebc6 0803 	rsb	r8, r6, r3
   8486e:	6026      	str	r6, [r4, #0]
   84870:	60a2      	str	r2, [r4, #8]
   84872:	e012      	b.n	8489a <_fflush_r+0x126>
   84874:	89a3      	ldrh	r3, [r4, #12]
   84876:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   8487a:	81a0      	strh	r0, [r4, #12]
   8487c:	f04f 30ff 	mov.w	r0, #4294967295
   84880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84884:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84886:	4628      	mov	r0, r5
   84888:	69e1      	ldr	r1, [r4, #28]
   8488a:	4632      	mov	r2, r6
   8488c:	4643      	mov	r3, r8
   8488e:	47b8      	blx	r7
   84890:	2800      	cmp	r0, #0
   84892:	ddef      	ble.n	84874 <_fflush_r+0x100>
   84894:	1836      	adds	r6, r6, r0
   84896:	ebc0 0808 	rsb	r8, r0, r8
   8489a:	f1b8 0f00 	cmp.w	r8, #0
   8489e:	dcf1      	bgt.n	84884 <_fflush_r+0x110>
   848a0:	e79a      	b.n	847d8 <_fflush_r+0x64>

000848a2 <fflush>:
   848a2:	4601      	mov	r1, r0
   848a4:	b920      	cbnz	r0, 848b0 <fflush+0xe>
   848a6:	4804      	ldr	r0, [pc, #16]	; (848b8 <fflush+0x16>)
   848a8:	4904      	ldr	r1, [pc, #16]	; (848bc <fflush+0x1a>)
   848aa:	6800      	ldr	r0, [r0, #0]
   848ac:	f000 bbc4 	b.w	85038 <_fwalk_reent>
   848b0:	4b03      	ldr	r3, [pc, #12]	; (848c0 <fflush+0x1e>)
   848b2:	6818      	ldr	r0, [r3, #0]
   848b4:	f7ff bf5e 	b.w	84774 <_fflush_r>
   848b8:	00086338 	.word	0x00086338
   848bc:	00084775 	.word	0x00084775
   848c0:	20070020 	.word	0x20070020

000848c4 <__fp_lock>:
   848c4:	2000      	movs	r0, #0
   848c6:	4770      	bx	lr

000848c8 <__fp_unlock>:
   848c8:	2000      	movs	r0, #0
   848ca:	4770      	bx	lr

000848cc <_cleanup_r>:
   848cc:	4901      	ldr	r1, [pc, #4]	; (848d4 <_cleanup_r+0x8>)
   848ce:	f000 bb92 	b.w	84ff6 <_fwalk>
   848d2:	bf00      	nop
   848d4:	00085c1d 	.word	0x00085c1d

000848d8 <std.isra.0>:
   848d8:	2300      	movs	r3, #0
   848da:	b510      	push	{r4, lr}
   848dc:	4604      	mov	r4, r0
   848de:	6003      	str	r3, [r0, #0]
   848e0:	6043      	str	r3, [r0, #4]
   848e2:	6083      	str	r3, [r0, #8]
   848e4:	8181      	strh	r1, [r0, #12]
   848e6:	6643      	str	r3, [r0, #100]	; 0x64
   848e8:	81c2      	strh	r2, [r0, #14]
   848ea:	6103      	str	r3, [r0, #16]
   848ec:	6143      	str	r3, [r0, #20]
   848ee:	6183      	str	r3, [r0, #24]
   848f0:	4619      	mov	r1, r3
   848f2:	2208      	movs	r2, #8
   848f4:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   848f8:	f7ff f94d 	bl	83b96 <memset>
   848fc:	4804      	ldr	r0, [pc, #16]	; (84910 <std.isra.0+0x38>)
   848fe:	4905      	ldr	r1, [pc, #20]	; (84914 <std.isra.0+0x3c>)
   84900:	4a05      	ldr	r2, [pc, #20]	; (84918 <std.isra.0+0x40>)
   84902:	4b06      	ldr	r3, [pc, #24]	; (8491c <std.isra.0+0x44>)
   84904:	61e4      	str	r4, [r4, #28]
   84906:	6220      	str	r0, [r4, #32]
   84908:	6261      	str	r1, [r4, #36]	; 0x24
   8490a:	62a2      	str	r2, [r4, #40]	; 0x28
   8490c:	62e3      	str	r3, [r4, #44]	; 0x2c
   8490e:	bd10      	pop	{r4, pc}
   84910:	00085951 	.word	0x00085951
   84914:	00085977 	.word	0x00085977
   84918:	000859b3 	.word	0x000859b3
   8491c:	000859d7 	.word	0x000859d7

00084920 <__sfmoreglue>:
   84920:	b570      	push	{r4, r5, r6, lr}
   84922:	2568      	movs	r5, #104	; 0x68
   84924:	434d      	muls	r5, r1
   84926:	460e      	mov	r6, r1
   84928:	f105 010c 	add.w	r1, r5, #12
   8492c:	f000 fc66 	bl	851fc <_malloc_r>
   84930:	4604      	mov	r4, r0
   84932:	b140      	cbz	r0, 84946 <__sfmoreglue+0x26>
   84934:	f100 000c 	add.w	r0, r0, #12
   84938:	2100      	movs	r1, #0
   8493a:	e884 0042 	stmia.w	r4, {r1, r6}
   8493e:	60a0      	str	r0, [r4, #8]
   84940:	462a      	mov	r2, r5
   84942:	f7ff f928 	bl	83b96 <memset>
   84946:	4620      	mov	r0, r4
   84948:	bd70      	pop	{r4, r5, r6, pc}

0008494a <_cleanup>:
   8494a:	4b02      	ldr	r3, [pc, #8]	; (84954 <_cleanup+0xa>)
   8494c:	6818      	ldr	r0, [r3, #0]
   8494e:	f7ff bfbd 	b.w	848cc <_cleanup_r>
   84952:	bf00      	nop
   84954:	00086338 	.word	0x00086338

00084958 <__sinit>:
   84958:	b538      	push	{r3, r4, r5, lr}
   8495a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8495c:	4604      	mov	r4, r0
   8495e:	b9eb      	cbnz	r3, 8499c <__sinit+0x44>
   84960:	4a0f      	ldr	r2, [pc, #60]	; (849a0 <__sinit+0x48>)
   84962:	2501      	movs	r5, #1
   84964:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   84968:	63c2      	str	r2, [r0, #60]	; 0x3c
   8496a:	6385      	str	r5, [r0, #56]	; 0x38
   8496c:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   84970:	2003      	movs	r0, #3
   84972:	461a      	mov	r2, r3
   84974:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   84978:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   8497c:	6860      	ldr	r0, [r4, #4]
   8497e:	2104      	movs	r1, #4
   84980:	f7ff ffaa 	bl	848d8 <std.isra.0>
   84984:	68a0      	ldr	r0, [r4, #8]
   84986:	2109      	movs	r1, #9
   84988:	462a      	mov	r2, r5
   8498a:	f7ff ffa5 	bl	848d8 <std.isra.0>
   8498e:	68e0      	ldr	r0, [r4, #12]
   84990:	2112      	movs	r1, #18
   84992:	2202      	movs	r2, #2
   84994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84998:	f7ff bf9e 	b.w	848d8 <std.isra.0>
   8499c:	bd38      	pop	{r3, r4, r5, pc}
   8499e:	bf00      	nop
   849a0:	000848cd 	.word	0x000848cd

000849a4 <__sfp>:
   849a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   849a6:	4b1d      	ldr	r3, [pc, #116]	; (84a1c <__sfp+0x78>)
   849a8:	4607      	mov	r7, r0
   849aa:	681e      	ldr	r6, [r3, #0]
   849ac:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   849ae:	b910      	cbnz	r0, 849b6 <__sfp+0x12>
   849b0:	4630      	mov	r0, r6
   849b2:	f7ff ffd1 	bl	84958 <__sinit>
   849b6:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   849ba:	68b4      	ldr	r4, [r6, #8]
   849bc:	6871      	ldr	r1, [r6, #4]
   849be:	3901      	subs	r1, #1
   849c0:	d404      	bmi.n	849cc <__sfp+0x28>
   849c2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   849c6:	b185      	cbz	r5, 849ea <__sfp+0x46>
   849c8:	3468      	adds	r4, #104	; 0x68
   849ca:	e7f8      	b.n	849be <__sfp+0x1a>
   849cc:	6832      	ldr	r2, [r6, #0]
   849ce:	b10a      	cbz	r2, 849d4 <__sfp+0x30>
   849d0:	6836      	ldr	r6, [r6, #0]
   849d2:	e7f2      	b.n	849ba <__sfp+0x16>
   849d4:	4638      	mov	r0, r7
   849d6:	2104      	movs	r1, #4
   849d8:	f7ff ffa2 	bl	84920 <__sfmoreglue>
   849dc:	6030      	str	r0, [r6, #0]
   849de:	2800      	cmp	r0, #0
   849e0:	d1f6      	bne.n	849d0 <__sfp+0x2c>
   849e2:	240c      	movs	r4, #12
   849e4:	603c      	str	r4, [r7, #0]
   849e6:	4604      	mov	r4, r0
   849e8:	e015      	b.n	84a16 <__sfp+0x72>
   849ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   849ee:	2001      	movs	r0, #1
   849f0:	81a0      	strh	r0, [r4, #12]
   849f2:	81e3      	strh	r3, [r4, #14]
   849f4:	6665      	str	r5, [r4, #100]	; 0x64
   849f6:	6025      	str	r5, [r4, #0]
   849f8:	60a5      	str	r5, [r4, #8]
   849fa:	6065      	str	r5, [r4, #4]
   849fc:	6125      	str	r5, [r4, #16]
   849fe:	6165      	str	r5, [r4, #20]
   84a00:	61a5      	str	r5, [r4, #24]
   84a02:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   84a06:	4629      	mov	r1, r5
   84a08:	2208      	movs	r2, #8
   84a0a:	f7ff f8c4 	bl	83b96 <memset>
   84a0e:	6325      	str	r5, [r4, #48]	; 0x30
   84a10:	6365      	str	r5, [r4, #52]	; 0x34
   84a12:	6465      	str	r5, [r4, #68]	; 0x44
   84a14:	64a5      	str	r5, [r4, #72]	; 0x48
   84a16:	4620      	mov	r0, r4
   84a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84a1a:	bf00      	nop
   84a1c:	00086338 	.word	0x00086338

00084a20 <__sfp_lock_acquire>:
   84a20:	4770      	bx	lr

00084a22 <__sfp_lock_release>:
   84a22:	4770      	bx	lr

00084a24 <__sinit_lock_acquire>:
   84a24:	4770      	bx	lr

00084a26 <__sinit_lock_release>:
   84a26:	4770      	bx	lr

00084a28 <__fp_lock_all>:
   84a28:	4b02      	ldr	r3, [pc, #8]	; (84a34 <__fp_lock_all+0xc>)
   84a2a:	4903      	ldr	r1, [pc, #12]	; (84a38 <__fp_lock_all+0x10>)
   84a2c:	6818      	ldr	r0, [r3, #0]
   84a2e:	f000 bae2 	b.w	84ff6 <_fwalk>
   84a32:	bf00      	nop
   84a34:	20070020 	.word	0x20070020
   84a38:	000848c5 	.word	0x000848c5

00084a3c <__fp_unlock_all>:
   84a3c:	4b02      	ldr	r3, [pc, #8]	; (84a48 <__fp_unlock_all+0xc>)
   84a3e:	4903      	ldr	r1, [pc, #12]	; (84a4c <__fp_unlock_all+0x10>)
   84a40:	6818      	ldr	r0, [r3, #0]
   84a42:	f000 bad8 	b.w	84ff6 <_fwalk>
   84a46:	bf00      	nop
   84a48:	20070020 	.word	0x20070020
   84a4c:	000848c9 	.word	0x000848c9

00084a50 <_fputwc_r>:
   84a50:	8993      	ldrh	r3, [r2, #12]
   84a52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   84a56:	4614      	mov	r4, r2
   84a58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   84a5c:	4680      	mov	r8, r0
   84a5e:	b210      	sxth	r0, r2
   84a60:	460e      	mov	r6, r1
   84a62:	b930      	cbnz	r0, 84a72 <_fputwc_r+0x22>
   84a64:	6e67      	ldr	r7, [r4, #100]	; 0x64
   84a66:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   84a6a:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   84a6e:	81a1      	strh	r1, [r4, #12]
   84a70:	6663      	str	r3, [r4, #100]	; 0x64
   84a72:	f000 fb29 	bl	850c8 <__locale_mb_cur_max>
   84a76:	2801      	cmp	r0, #1
   84a78:	d106      	bne.n	84a88 <_fputwc_r+0x38>
   84a7a:	b12e      	cbz	r6, 84a88 <_fputwc_r+0x38>
   84a7c:	2eff      	cmp	r6, #255	; 0xff
   84a7e:	d803      	bhi.n	84a88 <_fputwc_r+0x38>
   84a80:	f88d 6004 	strb.w	r6, [sp, #4]
   84a84:	4607      	mov	r7, r0
   84a86:	e00f      	b.n	84aa8 <_fputwc_r+0x58>
   84a88:	4632      	mov	r2, r6
   84a8a:	4640      	mov	r0, r8
   84a8c:	a901      	add	r1, sp, #4
   84a8e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84a92:	f001 f809 	bl	85aa8 <_wcrtomb_r>
   84a96:	1c42      	adds	r2, r0, #1
   84a98:	4607      	mov	r7, r0
   84a9a:	d105      	bne.n	84aa8 <_fputwc_r+0x58>
   84a9c:	89a2      	ldrh	r2, [r4, #12]
   84a9e:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   84aa2:	81a0      	strh	r0, [r4, #12]
   84aa4:	4638      	mov	r0, r7
   84aa6:	e031      	b.n	84b0c <_fputwc_r+0xbc>
   84aa8:	2500      	movs	r5, #0
   84aaa:	42bd      	cmp	r5, r7
   84aac:	d02a      	beq.n	84b04 <_fputwc_r+0xb4>
   84aae:	68a1      	ldr	r1, [r4, #8]
   84ab0:	ab01      	add	r3, sp, #4
   84ab2:	1e4a      	subs	r2, r1, #1
   84ab4:	2a00      	cmp	r2, #0
   84ab6:	60a2      	str	r2, [r4, #8]
   84ab8:	da1a      	bge.n	84af0 <_fputwc_r+0xa0>
   84aba:	69a0      	ldr	r0, [r4, #24]
   84abc:	4282      	cmp	r2, r0
   84abe:	db0c      	blt.n	84ada <_fputwc_r+0x8a>
   84ac0:	6821      	ldr	r1, [r4, #0]
   84ac2:	5d5a      	ldrb	r2, [r3, r5]
   84ac4:	700a      	strb	r2, [r1, #0]
   84ac6:	6823      	ldr	r3, [r4, #0]
   84ac8:	7819      	ldrb	r1, [r3, #0]
   84aca:	290a      	cmp	r1, #10
   84acc:	d003      	beq.n	84ad6 <_fputwc_r+0x86>
   84ace:	3301      	adds	r3, #1
   84ad0:	2200      	movs	r2, #0
   84ad2:	6023      	str	r3, [r4, #0]
   84ad4:	e013      	b.n	84afe <_fputwc_r+0xae>
   84ad6:	4640      	mov	r0, r8
   84ad8:	e001      	b.n	84ade <_fputwc_r+0x8e>
   84ada:	5d59      	ldrb	r1, [r3, r5]
   84adc:	4640      	mov	r0, r8
   84ade:	4622      	mov	r2, r4
   84ae0:	f000 ff88 	bl	859f4 <__swbuf_r>
   84ae4:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   84ae8:	4248      	negs	r0, r1
   84aea:	eb50 0201 	adcs.w	r2, r0, r1
   84aee:	e006      	b.n	84afe <_fputwc_r+0xae>
   84af0:	6820      	ldr	r0, [r4, #0]
   84af2:	5d59      	ldrb	r1, [r3, r5]
   84af4:	7001      	strb	r1, [r0, #0]
   84af6:	6822      	ldr	r2, [r4, #0]
   84af8:	1c53      	adds	r3, r2, #1
   84afa:	6023      	str	r3, [r4, #0]
   84afc:	e000      	b.n	84b00 <_fputwc_r+0xb0>
   84afe:	b91a      	cbnz	r2, 84b08 <_fputwc_r+0xb8>
   84b00:	3501      	adds	r5, #1
   84b02:	e7d2      	b.n	84aaa <_fputwc_r+0x5a>
   84b04:	4630      	mov	r0, r6
   84b06:	e001      	b.n	84b0c <_fputwc_r+0xbc>
   84b08:	f04f 30ff 	mov.w	r0, #4294967295
   84b0c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00084b10 <fputwc>:
   84b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84b12:	4c08      	ldr	r4, [pc, #32]	; (84b34 <fputwc+0x24>)
   84b14:	4607      	mov	r7, r0
   84b16:	6820      	ldr	r0, [r4, #0]
   84b18:	460e      	mov	r6, r1
   84b1a:	b118      	cbz	r0, 84b24 <fputwc+0x14>
   84b1c:	6b85      	ldr	r5, [r0, #56]	; 0x38
   84b1e:	b90d      	cbnz	r5, 84b24 <fputwc+0x14>
   84b20:	f7ff ff1a 	bl	84958 <__sinit>
   84b24:	6820      	ldr	r0, [r4, #0]
   84b26:	4639      	mov	r1, r7
   84b28:	4632      	mov	r2, r6
   84b2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   84b2e:	f7ff bf8f 	b.w	84a50 <_fputwc_r>
   84b32:	bf00      	nop
   84b34:	20070020 	.word	0x20070020

00084b38 <_malloc_trim_r>:
   84b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84b3a:	4d23      	ldr	r5, [pc, #140]	; (84bc8 <_malloc_trim_r+0x90>)
   84b3c:	460e      	mov	r6, r1
   84b3e:	4604      	mov	r4, r0
   84b40:	f000 fd86 	bl	85650 <__malloc_lock>
   84b44:	68ab      	ldr	r3, [r5, #8]
   84b46:	685f      	ldr	r7, [r3, #4]
   84b48:	f027 0703 	bic.w	r7, r7, #3
   84b4c:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   84b50:	1b81      	subs	r1, r0, r6
   84b52:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   84b56:	f022 060f 	bic.w	r6, r2, #15
   84b5a:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   84b5e:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   84b62:	da04      	bge.n	84b6e <_malloc_trim_r+0x36>
   84b64:	4620      	mov	r0, r4
   84b66:	f000 fd74 	bl	85652 <__malloc_unlock>
   84b6a:	2000      	movs	r0, #0
   84b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84b6e:	2100      	movs	r1, #0
   84b70:	4620      	mov	r0, r4
   84b72:	f000 fedd 	bl	85930 <_sbrk_r>
   84b76:	68ab      	ldr	r3, [r5, #8]
   84b78:	19d9      	adds	r1, r3, r7
   84b7a:	4288      	cmp	r0, r1
   84b7c:	d1f2      	bne.n	84b64 <_malloc_trim_r+0x2c>
   84b7e:	4271      	negs	r1, r6
   84b80:	4620      	mov	r0, r4
   84b82:	f000 fed5 	bl	85930 <_sbrk_r>
   84b86:	3001      	adds	r0, #1
   84b88:	d110      	bne.n	84bac <_malloc_trim_r+0x74>
   84b8a:	2100      	movs	r1, #0
   84b8c:	4620      	mov	r0, r4
   84b8e:	f000 fecf 	bl	85930 <_sbrk_r>
   84b92:	68ab      	ldr	r3, [r5, #8]
   84b94:	1ac2      	subs	r2, r0, r3
   84b96:	2a0f      	cmp	r2, #15
   84b98:	dde4      	ble.n	84b64 <_malloc_trim_r+0x2c>
   84b9a:	490c      	ldr	r1, [pc, #48]	; (84bcc <_malloc_trim_r+0x94>)
   84b9c:	f042 0201 	orr.w	r2, r2, #1
   84ba0:	6809      	ldr	r1, [r1, #0]
   84ba2:	605a      	str	r2, [r3, #4]
   84ba4:	1a40      	subs	r0, r0, r1
   84ba6:	490a      	ldr	r1, [pc, #40]	; (84bd0 <_malloc_trim_r+0x98>)
   84ba8:	6008      	str	r0, [r1, #0]
   84baa:	e7db      	b.n	84b64 <_malloc_trim_r+0x2c>
   84bac:	4b08      	ldr	r3, [pc, #32]	; (84bd0 <_malloc_trim_r+0x98>)
   84bae:	68a8      	ldr	r0, [r5, #8]
   84bb0:	681a      	ldr	r2, [r3, #0]
   84bb2:	1bbf      	subs	r7, r7, r6
   84bb4:	f047 0701 	orr.w	r7, r7, #1
   84bb8:	6047      	str	r7, [r0, #4]
   84bba:	1b96      	subs	r6, r2, r6
   84bbc:	4620      	mov	r0, r4
   84bbe:	601e      	str	r6, [r3, #0]
   84bc0:	f000 fd47 	bl	85652 <__malloc_unlock>
   84bc4:	2001      	movs	r0, #1
   84bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bc8:	200704cc 	.word	0x200704cc
   84bcc:	200708d4 	.word	0x200708d4
   84bd0:	2007aae8 	.word	0x2007aae8

00084bd4 <_free_r>:
   84bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84bd6:	4606      	mov	r6, r0
   84bd8:	460d      	mov	r5, r1
   84bda:	2900      	cmp	r1, #0
   84bdc:	f000 80a6 	beq.w	84d2c <_free_r+0x158>
   84be0:	f000 fd36 	bl	85650 <__malloc_lock>
   84be4:	f855 cc04 	ldr.w	ip, [r5, #-4]
   84be8:	4f51      	ldr	r7, [pc, #324]	; (84d30 <_free_r+0x15c>)
   84bea:	f1a5 0308 	sub.w	r3, r5, #8
   84bee:	f02c 0201 	bic.w	r2, ip, #1
   84bf2:	189c      	adds	r4, r3, r2
   84bf4:	68b9      	ldr	r1, [r7, #8]
   84bf6:	6860      	ldr	r0, [r4, #4]
   84bf8:	428c      	cmp	r4, r1
   84bfa:	f020 0003 	bic.w	r0, r0, #3
   84bfe:	f00c 0101 	and.w	r1, ip, #1
   84c02:	d11c      	bne.n	84c3e <_free_r+0x6a>
   84c04:	1882      	adds	r2, r0, r2
   84c06:	b939      	cbnz	r1, 84c18 <_free_r+0x44>
   84c08:	f855 1c08 	ldr.w	r1, [r5, #-8]
   84c0c:	1a5b      	subs	r3, r3, r1
   84c0e:	6898      	ldr	r0, [r3, #8]
   84c10:	1852      	adds	r2, r2, r1
   84c12:	68d9      	ldr	r1, [r3, #12]
   84c14:	60c1      	str	r1, [r0, #12]
   84c16:	6088      	str	r0, [r1, #8]
   84c18:	4845      	ldr	r0, [pc, #276]	; (84d30 <_free_r+0x15c>)
   84c1a:	f042 0101 	orr.w	r1, r2, #1
   84c1e:	6059      	str	r1, [r3, #4]
   84c20:	6083      	str	r3, [r0, #8]
   84c22:	4b44      	ldr	r3, [pc, #272]	; (84d34 <_free_r+0x160>)
   84c24:	6819      	ldr	r1, [r3, #0]
   84c26:	428a      	cmp	r2, r1
   84c28:	d304      	bcc.n	84c34 <_free_r+0x60>
   84c2a:	4a43      	ldr	r2, [pc, #268]	; (84d38 <_free_r+0x164>)
   84c2c:	4630      	mov	r0, r6
   84c2e:	6811      	ldr	r1, [r2, #0]
   84c30:	f7ff ff82 	bl	84b38 <_malloc_trim_r>
   84c34:	4630      	mov	r0, r6
   84c36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   84c3a:	f000 bd0a 	b.w	85652 <__malloc_unlock>
   84c3e:	6060      	str	r0, [r4, #4]
   84c40:	b959      	cbnz	r1, 84c5a <_free_r+0x86>
   84c42:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84c46:	3708      	adds	r7, #8
   84c48:	1b5b      	subs	r3, r3, r5
   84c4a:	1952      	adds	r2, r2, r5
   84c4c:	689d      	ldr	r5, [r3, #8]
   84c4e:	42bd      	cmp	r5, r7
   84c50:	d005      	beq.n	84c5e <_free_r+0x8a>
   84c52:	68df      	ldr	r7, [r3, #12]
   84c54:	60ef      	str	r7, [r5, #12]
   84c56:	60bd      	str	r5, [r7, #8]
   84c58:	e002      	b.n	84c60 <_free_r+0x8c>
   84c5a:	2100      	movs	r1, #0
   84c5c:	e000      	b.n	84c60 <_free_r+0x8c>
   84c5e:	2101      	movs	r1, #1
   84c60:	1825      	adds	r5, r4, r0
   84c62:	686d      	ldr	r5, [r5, #4]
   84c64:	f015 0f01 	tst.w	r5, #1
   84c68:	d10f      	bne.n	84c8a <_free_r+0xb6>
   84c6a:	1812      	adds	r2, r2, r0
   84c6c:	b949      	cbnz	r1, 84c82 <_free_r+0xae>
   84c6e:	68a0      	ldr	r0, [r4, #8]
   84c70:	4d32      	ldr	r5, [pc, #200]	; (84d3c <_free_r+0x168>)
   84c72:	42a8      	cmp	r0, r5
   84c74:	d105      	bne.n	84c82 <_free_r+0xae>
   84c76:	60eb      	str	r3, [r5, #12]
   84c78:	60ab      	str	r3, [r5, #8]
   84c7a:	60d8      	str	r0, [r3, #12]
   84c7c:	6098      	str	r0, [r3, #8]
   84c7e:	2101      	movs	r1, #1
   84c80:	e003      	b.n	84c8a <_free_r+0xb6>
   84c82:	68e0      	ldr	r0, [r4, #12]
   84c84:	68a4      	ldr	r4, [r4, #8]
   84c86:	60e0      	str	r0, [r4, #12]
   84c88:	6084      	str	r4, [r0, #8]
   84c8a:	f042 0001 	orr.w	r0, r2, #1
   84c8e:	6058      	str	r0, [r3, #4]
   84c90:	509a      	str	r2, [r3, r2]
   84c92:	2900      	cmp	r1, #0
   84c94:	d1ce      	bne.n	84c34 <_free_r+0x60>
   84c96:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84c9a:	d20c      	bcs.n	84cb6 <_free_r+0xe2>
   84c9c:	08d2      	lsrs	r2, r2, #3
   84c9e:	1090      	asrs	r0, r2, #2
   84ca0:	2401      	movs	r4, #1
   84ca2:	fa04 f400 	lsl.w	r4, r4, r0
   84ca6:	4922      	ldr	r1, [pc, #136]	; (84d30 <_free_r+0x15c>)
   84ca8:	6848      	ldr	r0, [r1, #4]
   84caa:	4320      	orrs	r0, r4
   84cac:	6048      	str	r0, [r1, #4]
   84cae:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   84cb2:	6881      	ldr	r1, [r0, #8]
   84cb4:	e035      	b.n	84d22 <_free_r+0x14e>
   84cb6:	0a54      	lsrs	r4, r2, #9
   84cb8:	2c04      	cmp	r4, #4
   84cba:	d802      	bhi.n	84cc2 <_free_r+0xee>
   84cbc:	0994      	lsrs	r4, r2, #6
   84cbe:	3438      	adds	r4, #56	; 0x38
   84cc0:	e016      	b.n	84cf0 <_free_r+0x11c>
   84cc2:	2c14      	cmp	r4, #20
   84cc4:	d801      	bhi.n	84cca <_free_r+0xf6>
   84cc6:	345b      	adds	r4, #91	; 0x5b
   84cc8:	e012      	b.n	84cf0 <_free_r+0x11c>
   84cca:	2c54      	cmp	r4, #84	; 0x54
   84ccc:	d802      	bhi.n	84cd4 <_free_r+0x100>
   84cce:	0b14      	lsrs	r4, r2, #12
   84cd0:	346e      	adds	r4, #110	; 0x6e
   84cd2:	e00d      	b.n	84cf0 <_free_r+0x11c>
   84cd4:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   84cd8:	d802      	bhi.n	84ce0 <_free_r+0x10c>
   84cda:	0bd4      	lsrs	r4, r2, #15
   84cdc:	3477      	adds	r4, #119	; 0x77
   84cde:	e007      	b.n	84cf0 <_free_r+0x11c>
   84ce0:	f240 5554 	movw	r5, #1364	; 0x554
   84ce4:	42ac      	cmp	r4, r5
   84ce6:	d802      	bhi.n	84cee <_free_r+0x11a>
   84ce8:	0c94      	lsrs	r4, r2, #18
   84cea:	347c      	adds	r4, #124	; 0x7c
   84cec:	e000      	b.n	84cf0 <_free_r+0x11c>
   84cee:	247e      	movs	r4, #126	; 0x7e
   84cf0:	4d0f      	ldr	r5, [pc, #60]	; (84d30 <_free_r+0x15c>)
   84cf2:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   84cf6:	6881      	ldr	r1, [r0, #8]
   84cf8:	4281      	cmp	r1, r0
   84cfa:	d10c      	bne.n	84d16 <_free_r+0x142>
   84cfc:	2201      	movs	r2, #1
   84cfe:	10a4      	asrs	r4, r4, #2
   84d00:	fa02 f404 	lsl.w	r4, r2, r4
   84d04:	6868      	ldr	r0, [r5, #4]
   84d06:	ea44 0200 	orr.w	r2, r4, r0
   84d0a:	606a      	str	r2, [r5, #4]
   84d0c:	4608      	mov	r0, r1
   84d0e:	e008      	b.n	84d22 <_free_r+0x14e>
   84d10:	6889      	ldr	r1, [r1, #8]
   84d12:	4281      	cmp	r1, r0
   84d14:	d004      	beq.n	84d20 <_free_r+0x14c>
   84d16:	684c      	ldr	r4, [r1, #4]
   84d18:	f024 0403 	bic.w	r4, r4, #3
   84d1c:	42a2      	cmp	r2, r4
   84d1e:	d3f7      	bcc.n	84d10 <_free_r+0x13c>
   84d20:	68c8      	ldr	r0, [r1, #12]
   84d22:	60d8      	str	r0, [r3, #12]
   84d24:	6099      	str	r1, [r3, #8]
   84d26:	6083      	str	r3, [r0, #8]
   84d28:	60cb      	str	r3, [r1, #12]
   84d2a:	e783      	b.n	84c34 <_free_r+0x60>
   84d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84d2e:	bf00      	nop
   84d30:	200704cc 	.word	0x200704cc
   84d34:	200708d8 	.word	0x200708d8
   84d38:	2007aae4 	.word	0x2007aae4
   84d3c:	200704d4 	.word	0x200704d4

00084d40 <__sfvwrite_r>:
   84d40:	6893      	ldr	r3, [r2, #8]
   84d42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84d46:	4606      	mov	r6, r0
   84d48:	460c      	mov	r4, r1
   84d4a:	4691      	mov	r9, r2
   84d4c:	b90b      	cbnz	r3, 84d52 <__sfvwrite_r+0x12>
   84d4e:	2000      	movs	r0, #0
   84d50:	e14f      	b.n	84ff2 <__sfvwrite_r+0x2b2>
   84d52:	8988      	ldrh	r0, [r1, #12]
   84d54:	f000 0108 	and.w	r1, r0, #8
   84d58:	b20a      	sxth	r2, r1
   84d5a:	b10a      	cbz	r2, 84d60 <__sfvwrite_r+0x20>
   84d5c:	6923      	ldr	r3, [r4, #16]
   84d5e:	b95b      	cbnz	r3, 84d78 <__sfvwrite_r+0x38>
   84d60:	4630      	mov	r0, r6
   84d62:	4621      	mov	r1, r4
   84d64:	f7ff fc52 	bl	8460c <__swsetup_r>
   84d68:	b130      	cbz	r0, 84d78 <__sfvwrite_r+0x38>
   84d6a:	89a1      	ldrh	r1, [r4, #12]
   84d6c:	2209      	movs	r2, #9
   84d6e:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   84d72:	81a0      	strh	r0, [r4, #12]
   84d74:	6032      	str	r2, [r6, #0]
   84d76:	e13a      	b.n	84fee <__sfvwrite_r+0x2ae>
   84d78:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   84d7c:	f8d9 8000 	ldr.w	r8, [r9]
   84d80:	f00a 0c02 	and.w	ip, sl, #2
   84d84:	fa0f f58c 	sxth.w	r5, ip
   84d88:	b315      	cbz	r5, 84dd0 <__sfvwrite_r+0x90>
   84d8a:	f04f 0a00 	mov.w	sl, #0
   84d8e:	4657      	mov	r7, sl
   84d90:	b937      	cbnz	r7, 84da0 <__sfvwrite_r+0x60>
   84d92:	f8d8 a000 	ldr.w	sl, [r8]
   84d96:	f8d8 7004 	ldr.w	r7, [r8, #4]
   84d9a:	f108 0808 	add.w	r8, r8, #8
   84d9e:	e7f7      	b.n	84d90 <__sfvwrite_r+0x50>
   84da0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   84da4:	bf34      	ite	cc
   84da6:	463b      	movcc	r3, r7
   84da8:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   84dac:	4630      	mov	r0, r6
   84dae:	69e1      	ldr	r1, [r4, #28]
   84db0:	4652      	mov	r2, sl
   84db2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   84db4:	47a8      	blx	r5
   84db6:	2800      	cmp	r0, #0
   84db8:	f340 8115 	ble.w	84fe6 <__sfvwrite_r+0x2a6>
   84dbc:	f8d9 1008 	ldr.w	r1, [r9, #8]
   84dc0:	4482      	add	sl, r0
   84dc2:	1a3f      	subs	r7, r7, r0
   84dc4:	1a08      	subs	r0, r1, r0
   84dc6:	f8c9 0008 	str.w	r0, [r9, #8]
   84dca:	2800      	cmp	r0, #0
   84dcc:	d1e0      	bne.n	84d90 <__sfvwrite_r+0x50>
   84dce:	e7be      	b.n	84d4e <__sfvwrite_r+0xe>
   84dd0:	f01a 0a01 	ands.w	sl, sl, #1
   84dd4:	d004      	beq.n	84de0 <__sfvwrite_r+0xa0>
   84dd6:	46ab      	mov	fp, r5
   84dd8:	9501      	str	r5, [sp, #4]
   84dda:	462f      	mov	r7, r5
   84ddc:	46aa      	mov	sl, r5
   84dde:	e0c7      	b.n	84f70 <__sfvwrite_r+0x230>
   84de0:	4655      	mov	r5, sl
   84de2:	b935      	cbnz	r5, 84df2 <__sfvwrite_r+0xb2>
   84de4:	f8d8 a000 	ldr.w	sl, [r8]
   84de8:	f8d8 5004 	ldr.w	r5, [r8, #4]
   84dec:	f108 0808 	add.w	r8, r8, #8
   84df0:	e7f7      	b.n	84de2 <__sfvwrite_r+0xa2>
   84df2:	89a2      	ldrh	r2, [r4, #12]
   84df4:	f8d4 b008 	ldr.w	fp, [r4, #8]
   84df8:	f402 7000 	and.w	r0, r2, #512	; 0x200
   84dfc:	b203      	sxth	r3, r0
   84dfe:	2b00      	cmp	r3, #0
   84e00:	d052      	beq.n	84ea8 <__sfvwrite_r+0x168>
   84e02:	455d      	cmp	r5, fp
   84e04:	d340      	bcc.n	84e88 <__sfvwrite_r+0x148>
   84e06:	f412 6f90 	tst.w	r2, #1152	; 0x480
   84e0a:	d03b      	beq.n	84e84 <__sfvwrite_r+0x144>
   84e0c:	6963      	ldr	r3, [r4, #20]
   84e0e:	f04f 0b03 	mov.w	fp, #3
   84e12:	fb0b f303 	mul.w	r3, fp, r3
   84e16:	6921      	ldr	r1, [r4, #16]
   84e18:	6827      	ldr	r7, [r4, #0]
   84e1a:	2002      	movs	r0, #2
   84e1c:	1a7f      	subs	r7, r7, r1
   84e1e:	fb93 fcf0 	sdiv	ip, r3, r0
   84e22:	1c7b      	adds	r3, r7, #1
   84e24:	1958      	adds	r0, r3, r5
   84e26:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   84e2a:	4584      	cmp	ip, r0
   84e2c:	bf28      	it	cs
   84e2e:	4660      	movcs	r0, ip
   84e30:	b213      	sxth	r3, r2
   84e32:	9001      	str	r0, [sp, #4]
   84e34:	4630      	mov	r0, r6
   84e36:	b17b      	cbz	r3, 84e58 <__sfvwrite_r+0x118>
   84e38:	9901      	ldr	r1, [sp, #4]
   84e3a:	f000 f9df 	bl	851fc <_malloc_r>
   84e3e:	4683      	mov	fp, r0
   84e40:	b198      	cbz	r0, 84e6a <__sfvwrite_r+0x12a>
   84e42:	6921      	ldr	r1, [r4, #16]
   84e44:	463a      	mov	r2, r7
   84e46:	f7fe fe9d 	bl	83b84 <memcpy>
   84e4a:	89a1      	ldrh	r1, [r4, #12]
   84e4c:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   84e50:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   84e54:	81a2      	strh	r2, [r4, #12]
   84e56:	e00b      	b.n	84e70 <__sfvwrite_r+0x130>
   84e58:	9a01      	ldr	r2, [sp, #4]
   84e5a:	f000 fbfb 	bl	85654 <_realloc_r>
   84e5e:	4683      	mov	fp, r0
   84e60:	b930      	cbnz	r0, 84e70 <__sfvwrite_r+0x130>
   84e62:	4630      	mov	r0, r6
   84e64:	6921      	ldr	r1, [r4, #16]
   84e66:	f7ff feb5 	bl	84bd4 <_free_r>
   84e6a:	230c      	movs	r3, #12
   84e6c:	6033      	str	r3, [r6, #0]
   84e6e:	e0ba      	b.n	84fe6 <__sfvwrite_r+0x2a6>
   84e70:	9901      	ldr	r1, [sp, #4]
   84e72:	eb0b 0307 	add.w	r3, fp, r7
   84e76:	1bcf      	subs	r7, r1, r7
   84e78:	f8c4 b010 	str.w	fp, [r4, #16]
   84e7c:	6023      	str	r3, [r4, #0]
   84e7e:	6161      	str	r1, [r4, #20]
   84e80:	46ab      	mov	fp, r5
   84e82:	60a7      	str	r7, [r4, #8]
   84e84:	455d      	cmp	r5, fp
   84e86:	d200      	bcs.n	84e8a <__sfvwrite_r+0x14a>
   84e88:	46ab      	mov	fp, r5
   84e8a:	465a      	mov	r2, fp
   84e8c:	4651      	mov	r1, sl
   84e8e:	6820      	ldr	r0, [r4, #0]
   84e90:	f000 fbc4 	bl	8561c <memmove>
   84e94:	68a0      	ldr	r0, [r4, #8]
   84e96:	6823      	ldr	r3, [r4, #0]
   84e98:	ebcb 0200 	rsb	r2, fp, r0
   84e9c:	eb03 010b 	add.w	r1, r3, fp
   84ea0:	60a2      	str	r2, [r4, #8]
   84ea2:	6021      	str	r1, [r4, #0]
   84ea4:	46ab      	mov	fp, r5
   84ea6:	e02a      	b.n	84efe <__sfvwrite_r+0x1be>
   84ea8:	6820      	ldr	r0, [r4, #0]
   84eaa:	6921      	ldr	r1, [r4, #16]
   84eac:	4288      	cmp	r0, r1
   84eae:	d90f      	bls.n	84ed0 <__sfvwrite_r+0x190>
   84eb0:	455d      	cmp	r5, fp
   84eb2:	d90d      	bls.n	84ed0 <__sfvwrite_r+0x190>
   84eb4:	4651      	mov	r1, sl
   84eb6:	465a      	mov	r2, fp
   84eb8:	f000 fbb0 	bl	8561c <memmove>
   84ebc:	6822      	ldr	r2, [r4, #0]
   84ebe:	4621      	mov	r1, r4
   84ec0:	eb02 000b 	add.w	r0, r2, fp
   84ec4:	6020      	str	r0, [r4, #0]
   84ec6:	4630      	mov	r0, r6
   84ec8:	f7ff fc54 	bl	84774 <_fflush_r>
   84ecc:	b1b8      	cbz	r0, 84efe <__sfvwrite_r+0x1be>
   84ece:	e08a      	b.n	84fe6 <__sfvwrite_r+0x2a6>
   84ed0:	6963      	ldr	r3, [r4, #20]
   84ed2:	429d      	cmp	r5, r3
   84ed4:	d308      	bcc.n	84ee8 <__sfvwrite_r+0x1a8>
   84ed6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84ed8:	4630      	mov	r0, r6
   84eda:	69e1      	ldr	r1, [r4, #28]
   84edc:	4652      	mov	r2, sl
   84ede:	47b8      	blx	r7
   84ee0:	f1b0 0b00 	subs.w	fp, r0, #0
   84ee4:	dc0b      	bgt.n	84efe <__sfvwrite_r+0x1be>
   84ee6:	e07e      	b.n	84fe6 <__sfvwrite_r+0x2a6>
   84ee8:	4651      	mov	r1, sl
   84eea:	462a      	mov	r2, r5
   84eec:	f000 fb96 	bl	8561c <memmove>
   84ef0:	68a2      	ldr	r2, [r4, #8]
   84ef2:	6823      	ldr	r3, [r4, #0]
   84ef4:	1b50      	subs	r0, r2, r5
   84ef6:	1959      	adds	r1, r3, r5
   84ef8:	46ab      	mov	fp, r5
   84efa:	60a0      	str	r0, [r4, #8]
   84efc:	6021      	str	r1, [r4, #0]
   84efe:	f8d9 0008 	ldr.w	r0, [r9, #8]
   84f02:	44da      	add	sl, fp
   84f04:	ebcb 0200 	rsb	r2, fp, r0
   84f08:	ebcb 0505 	rsb	r5, fp, r5
   84f0c:	f8c9 2008 	str.w	r2, [r9, #8]
   84f10:	2a00      	cmp	r2, #0
   84f12:	f47f af66 	bne.w	84de2 <__sfvwrite_r+0xa2>
   84f16:	e71a      	b.n	84d4e <__sfvwrite_r+0xe>
   84f18:	9801      	ldr	r0, [sp, #4]
   84f1a:	2800      	cmp	r0, #0
   84f1c:	d032      	beq.n	84f84 <__sfvwrite_r+0x244>
   84f1e:	6820      	ldr	r0, [r4, #0]
   84f20:	6921      	ldr	r1, [r4, #16]
   84f22:	45d3      	cmp	fp, sl
   84f24:	bf34      	ite	cc
   84f26:	465b      	movcc	r3, fp
   84f28:	4653      	movcs	r3, sl
   84f2a:	4288      	cmp	r0, r1
   84f2c:	68a5      	ldr	r5, [r4, #8]
   84f2e:	f8d4 e014 	ldr.w	lr, [r4, #20]
   84f32:	d937      	bls.n	84fa4 <__sfvwrite_r+0x264>
   84f34:	4475      	add	r5, lr
   84f36:	42ab      	cmp	r3, r5
   84f38:	dd34      	ble.n	84fa4 <__sfvwrite_r+0x264>
   84f3a:	4639      	mov	r1, r7
   84f3c:	462a      	mov	r2, r5
   84f3e:	f000 fb6d 	bl	8561c <memmove>
   84f42:	6820      	ldr	r0, [r4, #0]
   84f44:	4621      	mov	r1, r4
   84f46:	1943      	adds	r3, r0, r5
   84f48:	6023      	str	r3, [r4, #0]
   84f4a:	4630      	mov	r0, r6
   84f4c:	f7ff fc12 	bl	84774 <_fflush_r>
   84f50:	2800      	cmp	r0, #0
   84f52:	d148      	bne.n	84fe6 <__sfvwrite_r+0x2a6>
   84f54:	ebbb 0b05 	subs.w	fp, fp, r5
   84f58:	d03d      	beq.n	84fd6 <__sfvwrite_r+0x296>
   84f5a:	f8d9 2008 	ldr.w	r2, [r9, #8]
   84f5e:	197f      	adds	r7, r7, r5
   84f60:	ebc5 0a0a 	rsb	sl, r5, sl
   84f64:	1b55      	subs	r5, r2, r5
   84f66:	f8c9 5008 	str.w	r5, [r9, #8]
   84f6a:	2d00      	cmp	r5, #0
   84f6c:	f43f aeef 	beq.w	84d4e <__sfvwrite_r+0xe>
   84f70:	f1ba 0f00 	cmp.w	sl, #0
   84f74:	d1d0      	bne.n	84f18 <__sfvwrite_r+0x1d8>
   84f76:	2100      	movs	r1, #0
   84f78:	e898 0480 	ldmia.w	r8, {r7, sl}
   84f7c:	9101      	str	r1, [sp, #4]
   84f7e:	f108 0808 	add.w	r8, r8, #8
   84f82:	e7f5      	b.n	84f70 <__sfvwrite_r+0x230>
   84f84:	4638      	mov	r0, r7
   84f86:	210a      	movs	r1, #10
   84f88:	4652      	mov	r2, sl
   84f8a:	f000 fb39 	bl	85600 <memchr>
   84f8e:	b120      	cbz	r0, 84f9a <__sfvwrite_r+0x25a>
   84f90:	f100 0101 	add.w	r1, r0, #1
   84f94:	ebc7 0b01 	rsb	fp, r7, r1
   84f98:	e001      	b.n	84f9e <__sfvwrite_r+0x25e>
   84f9a:	f10a 0b01 	add.w	fp, sl, #1
   84f9e:	2201      	movs	r2, #1
   84fa0:	9201      	str	r2, [sp, #4]
   84fa2:	e7bc      	b.n	84f1e <__sfvwrite_r+0x1de>
   84fa4:	4573      	cmp	r3, lr
   84fa6:	db08      	blt.n	84fba <__sfvwrite_r+0x27a>
   84fa8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   84faa:	4630      	mov	r0, r6
   84fac:	69e1      	ldr	r1, [r4, #28]
   84fae:	463a      	mov	r2, r7
   84fb0:	4673      	mov	r3, lr
   84fb2:	47a8      	blx	r5
   84fb4:	1e05      	subs	r5, r0, #0
   84fb6:	dccd      	bgt.n	84f54 <__sfvwrite_r+0x214>
   84fb8:	e015      	b.n	84fe6 <__sfvwrite_r+0x2a6>
   84fba:	461a      	mov	r2, r3
   84fbc:	4639      	mov	r1, r7
   84fbe:	9300      	str	r3, [sp, #0]
   84fc0:	f000 fb2c 	bl	8561c <memmove>
   84fc4:	9b00      	ldr	r3, [sp, #0]
   84fc6:	6825      	ldr	r5, [r4, #0]
   84fc8:	68a0      	ldr	r0, [r4, #8]
   84fca:	18e9      	adds	r1, r5, r3
   84fcc:	1ac2      	subs	r2, r0, r3
   84fce:	60a2      	str	r2, [r4, #8]
   84fd0:	6021      	str	r1, [r4, #0]
   84fd2:	461d      	mov	r5, r3
   84fd4:	e7be      	b.n	84f54 <__sfvwrite_r+0x214>
   84fd6:	4630      	mov	r0, r6
   84fd8:	4621      	mov	r1, r4
   84fda:	f7ff fbcb 	bl	84774 <_fflush_r>
   84fde:	b910      	cbnz	r0, 84fe6 <__sfvwrite_r+0x2a6>
   84fe0:	f8cd b004 	str.w	fp, [sp, #4]
   84fe4:	e7b9      	b.n	84f5a <__sfvwrite_r+0x21a>
   84fe6:	89a2      	ldrh	r2, [r4, #12]
   84fe8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   84fec:	81a3      	strh	r3, [r4, #12]
   84fee:	f04f 30ff 	mov.w	r0, #4294967295
   84ff2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00084ff6 <_fwalk>:
   84ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ffa:	4604      	mov	r4, r0
   84ffc:	4688      	mov	r8, r1
   84ffe:	f7ff fd0f 	bl	84a20 <__sfp_lock_acquire>
   85002:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   85006:	2600      	movs	r6, #0
   85008:	b18c      	cbz	r4, 8502e <_fwalk+0x38>
   8500a:	68a5      	ldr	r5, [r4, #8]
   8500c:	6867      	ldr	r7, [r4, #4]
   8500e:	3f01      	subs	r7, #1
   85010:	d40b      	bmi.n	8502a <_fwalk+0x34>
   85012:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85016:	b133      	cbz	r3, 85026 <_fwalk+0x30>
   85018:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   8501c:	1c43      	adds	r3, r0, #1
   8501e:	d002      	beq.n	85026 <_fwalk+0x30>
   85020:	4628      	mov	r0, r5
   85022:	47c0      	blx	r8
   85024:	4306      	orrs	r6, r0
   85026:	3568      	adds	r5, #104	; 0x68
   85028:	e7f1      	b.n	8500e <_fwalk+0x18>
   8502a:	6824      	ldr	r4, [r4, #0]
   8502c:	e7ec      	b.n	85008 <_fwalk+0x12>
   8502e:	f7ff fcf8 	bl	84a22 <__sfp_lock_release>
   85032:	4630      	mov	r0, r6
   85034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085038 <_fwalk_reent>:
   85038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8503c:	4680      	mov	r8, r0
   8503e:	4689      	mov	r9, r1
   85040:	f7ff fcee 	bl	84a20 <__sfp_lock_acquire>
   85044:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   85048:	2600      	movs	r6, #0
   8504a:	b194      	cbz	r4, 85072 <_fwalk_reent+0x3a>
   8504c:	68a5      	ldr	r5, [r4, #8]
   8504e:	6867      	ldr	r7, [r4, #4]
   85050:	3f01      	subs	r7, #1
   85052:	d40c      	bmi.n	8506e <_fwalk_reent+0x36>
   85054:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85058:	b13b      	cbz	r3, 8506a <_fwalk_reent+0x32>
   8505a:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   8505e:	1c43      	adds	r3, r0, #1
   85060:	d003      	beq.n	8506a <_fwalk_reent+0x32>
   85062:	4640      	mov	r0, r8
   85064:	4629      	mov	r1, r5
   85066:	47c8      	blx	r9
   85068:	4306      	orrs	r6, r0
   8506a:	3568      	adds	r5, #104	; 0x68
   8506c:	e7f0      	b.n	85050 <_fwalk_reent+0x18>
   8506e:	6824      	ldr	r4, [r4, #0]
   85070:	e7eb      	b.n	8504a <_fwalk_reent+0x12>
   85072:	f7ff fcd6 	bl	84a22 <__sfp_lock_release>
   85076:	4630      	mov	r0, r6
   85078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008507c <_setlocale_r>:
   8507c:	b510      	push	{r4, lr}
   8507e:	4614      	mov	r4, r2
   85080:	b90a      	cbnz	r2, 85086 <_setlocale_r+0xa>
   85082:	480c      	ldr	r0, [pc, #48]	; (850b4 <_setlocale_r+0x38>)
   85084:	bd10      	pop	{r4, pc}
   85086:	4610      	mov	r0, r2
   85088:	490b      	ldr	r1, [pc, #44]	; (850b8 <_setlocale_r+0x3c>)
   8508a:	f000 fca8 	bl	859de <strcmp>
   8508e:	2800      	cmp	r0, #0
   85090:	d0f7      	beq.n	85082 <_setlocale_r+0x6>
   85092:	4620      	mov	r0, r4
   85094:	4907      	ldr	r1, [pc, #28]	; (850b4 <_setlocale_r+0x38>)
   85096:	f000 fca2 	bl	859de <strcmp>
   8509a:	2800      	cmp	r0, #0
   8509c:	d0f1      	beq.n	85082 <_setlocale_r+0x6>
   8509e:	4620      	mov	r0, r4
   850a0:	4906      	ldr	r1, [pc, #24]	; (850bc <_setlocale_r+0x40>)
   850a2:	f000 fc9c 	bl	859de <strcmp>
   850a6:	4b03      	ldr	r3, [pc, #12]	; (850b4 <_setlocale_r+0x38>)
   850a8:	2800      	cmp	r0, #0
   850aa:	bf0c      	ite	eq
   850ac:	4618      	moveq	r0, r3
   850ae:	2000      	movne	r0, #0
   850b0:	bd10      	pop	{r4, pc}
   850b2:	bf00      	nop
   850b4:	0008633c 	.word	0x0008633c
   850b8:	00086380 	.word	0x00086380
   850bc:	00086387 	.word	0x00086387

000850c0 <__locale_charset>:
   850c0:	4800      	ldr	r0, [pc, #0]	; (850c4 <__locale_charset+0x4>)
   850c2:	4770      	bx	lr
   850c4:	20070450 	.word	0x20070450

000850c8 <__locale_mb_cur_max>:
   850c8:	4b01      	ldr	r3, [pc, #4]	; (850d0 <__locale_mb_cur_max+0x8>)
   850ca:	6a18      	ldr	r0, [r3, #32]
   850cc:	4770      	bx	lr
   850ce:	bf00      	nop
   850d0:	20070450 	.word	0x20070450

000850d4 <__locale_msgcharset>:
   850d4:	4800      	ldr	r0, [pc, #0]	; (850d8 <__locale_msgcharset+0x4>)
   850d6:	4770      	bx	lr
   850d8:	20070474 	.word	0x20070474

000850dc <__locale_cjk_lang>:
   850dc:	2000      	movs	r0, #0
   850de:	4770      	bx	lr

000850e0 <_localeconv_r>:
   850e0:	4800      	ldr	r0, [pc, #0]	; (850e4 <_localeconv_r+0x4>)
   850e2:	4770      	bx	lr
   850e4:	20070494 	.word	0x20070494

000850e8 <setlocale>:
   850e8:	460a      	mov	r2, r1
   850ea:	4903      	ldr	r1, [pc, #12]	; (850f8 <setlocale+0x10>)
   850ec:	4603      	mov	r3, r0
   850ee:	6808      	ldr	r0, [r1, #0]
   850f0:	4619      	mov	r1, r3
   850f2:	f7ff bfc3 	b.w	8507c <_setlocale_r>
   850f6:	bf00      	nop
   850f8:	20070020 	.word	0x20070020

000850fc <localeconv>:
   850fc:	4800      	ldr	r0, [pc, #0]	; (85100 <localeconv+0x4>)
   850fe:	4770      	bx	lr
   85100:	20070494 	.word	0x20070494

00085104 <__smakebuf_r>:
   85104:	b5f0      	push	{r4, r5, r6, r7, lr}
   85106:	898b      	ldrh	r3, [r1, #12]
   85108:	460c      	mov	r4, r1
   8510a:	f003 0102 	and.w	r1, r3, #2
   8510e:	b20a      	sxth	r2, r1
   85110:	b091      	sub	sp, #68	; 0x44
   85112:	4606      	mov	r6, r0
   85114:	2a00      	cmp	r2, #0
   85116:	d13f      	bne.n	85198 <__smakebuf_r+0x94>
   85118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8511c:	2900      	cmp	r1, #0
   8511e:	da0d      	bge.n	8513c <__smakebuf_r+0x38>
   85120:	89a7      	ldrh	r7, [r4, #12]
   85122:	f007 0280 	and.w	r2, r7, #128	; 0x80
   85126:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   8512a:	b210      	sxth	r0, r2
   8512c:	2800      	cmp	r0, #0
   8512e:	bf0c      	ite	eq
   85130:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   85134:	2540      	movne	r5, #64	; 0x40
   85136:	81a3      	strh	r3, [r4, #12]
   85138:	2700      	movs	r7, #0
   8513a:	e020      	b.n	8517e <__smakebuf_r+0x7a>
   8513c:	aa01      	add	r2, sp, #4
   8513e:	f000 fd75 	bl	85c2c <_fstat_r>
   85142:	2800      	cmp	r0, #0
   85144:	dbec      	blt.n	85120 <__smakebuf_r+0x1c>
   85146:	9802      	ldr	r0, [sp, #8]
   85148:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   8514c:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   85150:	425f      	negs	r7, r3
   85152:	415f      	adcs	r7, r3
   85154:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   85158:	d10b      	bne.n	85172 <__smakebuf_r+0x6e>
   8515a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   8515c:	4a1d      	ldr	r2, [pc, #116]	; (851d4 <__smakebuf_r+0xd0>)
   8515e:	4291      	cmp	r1, r2
   85160:	d107      	bne.n	85172 <__smakebuf_r+0x6e>
   85162:	89a3      	ldrh	r3, [r4, #12]
   85164:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85168:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   8516c:	81a1      	strh	r1, [r4, #12]
   8516e:	64e5      	str	r5, [r4, #76]	; 0x4c
   85170:	e005      	b.n	8517e <__smakebuf_r+0x7a>
   85172:	89a0      	ldrh	r0, [r4, #12]
   85174:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   85178:	81a5      	strh	r5, [r4, #12]
   8517a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8517e:	4630      	mov	r0, r6
   85180:	4629      	mov	r1, r5
   85182:	f000 f83b 	bl	851fc <_malloc_r>
   85186:	b970      	cbnz	r0, 851a6 <__smakebuf_r+0xa2>
   85188:	89a3      	ldrh	r3, [r4, #12]
   8518a:	f403 7200 	and.w	r2, r3, #512	; 0x200
   8518e:	b210      	sxth	r0, r2
   85190:	b9e8      	cbnz	r0, 851ce <__smakebuf_r+0xca>
   85192:	f043 0102 	orr.w	r1, r3, #2
   85196:	81a1      	strh	r1, [r4, #12]
   85198:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8519c:	2201      	movs	r2, #1
   8519e:	6023      	str	r3, [r4, #0]
   851a0:	6123      	str	r3, [r4, #16]
   851a2:	6162      	str	r2, [r4, #20]
   851a4:	e013      	b.n	851ce <__smakebuf_r+0xca>
   851a6:	89a2      	ldrh	r2, [r4, #12]
   851a8:	490b      	ldr	r1, [pc, #44]	; (851d8 <__smakebuf_r+0xd4>)
   851aa:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   851ae:	63f1      	str	r1, [r6, #60]	; 0x3c
   851b0:	81a3      	strh	r3, [r4, #12]
   851b2:	6020      	str	r0, [r4, #0]
   851b4:	6120      	str	r0, [r4, #16]
   851b6:	6165      	str	r5, [r4, #20]
   851b8:	b14f      	cbz	r7, 851ce <__smakebuf_r+0xca>
   851ba:	4630      	mov	r0, r6
   851bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   851c0:	f000 fd46 	bl	85c50 <_isatty_r>
   851c4:	b118      	cbz	r0, 851ce <__smakebuf_r+0xca>
   851c6:	89a0      	ldrh	r0, [r4, #12]
   851c8:	f040 0101 	orr.w	r1, r0, #1
   851cc:	81a1      	strh	r1, [r4, #12]
   851ce:	b011      	add	sp, #68	; 0x44
   851d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   851d2:	bf00      	nop
   851d4:	000859b3 	.word	0x000859b3
   851d8:	000848cd 	.word	0x000848cd

000851dc <malloc>:
   851dc:	4b02      	ldr	r3, [pc, #8]	; (851e8 <malloc+0xc>)
   851de:	4601      	mov	r1, r0
   851e0:	6818      	ldr	r0, [r3, #0]
   851e2:	f000 b80b 	b.w	851fc <_malloc_r>
   851e6:	bf00      	nop
   851e8:	20070020 	.word	0x20070020

000851ec <free>:
   851ec:	4b02      	ldr	r3, [pc, #8]	; (851f8 <free+0xc>)
   851ee:	4601      	mov	r1, r0
   851f0:	6818      	ldr	r0, [r3, #0]
   851f2:	f7ff bcef 	b.w	84bd4 <_free_r>
   851f6:	bf00      	nop
   851f8:	20070020 	.word	0x20070020

000851fc <_malloc_r>:
   851fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85200:	f101 040b 	add.w	r4, r1, #11
   85204:	2c16      	cmp	r4, #22
   85206:	4606      	mov	r6, r0
   85208:	d903      	bls.n	85212 <_malloc_r+0x16>
   8520a:	f034 0407 	bics.w	r4, r4, #7
   8520e:	d501      	bpl.n	85214 <_malloc_r+0x18>
   85210:	e002      	b.n	85218 <_malloc_r+0x1c>
   85212:	2410      	movs	r4, #16
   85214:	428c      	cmp	r4, r1
   85216:	d202      	bcs.n	8521e <_malloc_r+0x22>
   85218:	250c      	movs	r5, #12
   8521a:	6035      	str	r5, [r6, #0]
   8521c:	e1d9      	b.n	855d2 <_malloc_r+0x3d6>
   8521e:	4630      	mov	r0, r6
   85220:	f000 fa16 	bl	85650 <__malloc_lock>
   85224:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   85228:	d214      	bcs.n	85254 <_malloc_r+0x58>
   8522a:	4da0      	ldr	r5, [pc, #640]	; (854ac <_malloc_r+0x2b0>)
   8522c:	08e1      	lsrs	r1, r4, #3
   8522e:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   85232:	68c5      	ldr	r5, [r0, #12]
   85234:	4285      	cmp	r5, r0
   85236:	d105      	bne.n	85244 <_malloc_r+0x48>
   85238:	f105 0308 	add.w	r3, r5, #8
   8523c:	696d      	ldr	r5, [r5, #20]
   8523e:	1c8a      	adds	r2, r1, #2
   85240:	429d      	cmp	r5, r3
   85242:	d044      	beq.n	852ce <_malloc_r+0xd2>
   85244:	68e8      	ldr	r0, [r5, #12]
   85246:	68a9      	ldr	r1, [r5, #8]
   85248:	686a      	ldr	r2, [r5, #4]
   8524a:	60c8      	str	r0, [r1, #12]
   8524c:	f022 0303 	bic.w	r3, r2, #3
   85250:	6081      	str	r1, [r0, #8]
   85252:	e059      	b.n	85308 <_malloc_r+0x10c>
   85254:	0a62      	lsrs	r2, r4, #9
   85256:	d101      	bne.n	8525c <_malloc_r+0x60>
   85258:	08e2      	lsrs	r2, r4, #3
   8525a:	e01b      	b.n	85294 <_malloc_r+0x98>
   8525c:	2a04      	cmp	r2, #4
   8525e:	d802      	bhi.n	85266 <_malloc_r+0x6a>
   85260:	09a2      	lsrs	r2, r4, #6
   85262:	3238      	adds	r2, #56	; 0x38
   85264:	e016      	b.n	85294 <_malloc_r+0x98>
   85266:	2a14      	cmp	r2, #20
   85268:	d801      	bhi.n	8526e <_malloc_r+0x72>
   8526a:	325b      	adds	r2, #91	; 0x5b
   8526c:	e012      	b.n	85294 <_malloc_r+0x98>
   8526e:	2a54      	cmp	r2, #84	; 0x54
   85270:	d802      	bhi.n	85278 <_malloc_r+0x7c>
   85272:	0b22      	lsrs	r2, r4, #12
   85274:	326e      	adds	r2, #110	; 0x6e
   85276:	e00d      	b.n	85294 <_malloc_r+0x98>
   85278:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8527c:	d802      	bhi.n	85284 <_malloc_r+0x88>
   8527e:	0be2      	lsrs	r2, r4, #15
   85280:	3277      	adds	r2, #119	; 0x77
   85282:	e007      	b.n	85294 <_malloc_r+0x98>
   85284:	f240 5354 	movw	r3, #1364	; 0x554
   85288:	429a      	cmp	r2, r3
   8528a:	d802      	bhi.n	85292 <_malloc_r+0x96>
   8528c:	0ca2      	lsrs	r2, r4, #18
   8528e:	327c      	adds	r2, #124	; 0x7c
   85290:	e000      	b.n	85294 <_malloc_r+0x98>
   85292:	227e      	movs	r2, #126	; 0x7e
   85294:	4885      	ldr	r0, [pc, #532]	; (854ac <_malloc_r+0x2b0>)
   85296:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   8529a:	68dd      	ldr	r5, [r3, #12]
   8529c:	429d      	cmp	r5, r3
   8529e:	d015      	beq.n	852cc <_malloc_r+0xd0>
   852a0:	6869      	ldr	r1, [r5, #4]
   852a2:	f021 0103 	bic.w	r1, r1, #3
   852a6:	1b08      	subs	r0, r1, r4
   852a8:	280f      	cmp	r0, #15
   852aa:	dd01      	ble.n	852b0 <_malloc_r+0xb4>
   852ac:	3a01      	subs	r2, #1
   852ae:	e00d      	b.n	852cc <_malloc_r+0xd0>
   852b0:	2800      	cmp	r0, #0
   852b2:	db09      	blt.n	852c8 <_malloc_r+0xcc>
   852b4:	68eb      	ldr	r3, [r5, #12]
   852b6:	68aa      	ldr	r2, [r5, #8]
   852b8:	60d3      	str	r3, [r2, #12]
   852ba:	609a      	str	r2, [r3, #8]
   852bc:	186b      	adds	r3, r5, r1
   852be:	685a      	ldr	r2, [r3, #4]
   852c0:	f042 0001 	orr.w	r0, r2, #1
   852c4:	6058      	str	r0, [r3, #4]
   852c6:	e190      	b.n	855ea <_malloc_r+0x3ee>
   852c8:	68ed      	ldr	r5, [r5, #12]
   852ca:	e7e7      	b.n	8529c <_malloc_r+0xa0>
   852cc:	3201      	adds	r2, #1
   852ce:	4977      	ldr	r1, [pc, #476]	; (854ac <_malloc_r+0x2b0>)
   852d0:	690d      	ldr	r5, [r1, #16]
   852d2:	f101 0708 	add.w	r7, r1, #8
   852d6:	42bd      	cmp	r5, r7
   852d8:	d068      	beq.n	853ac <_malloc_r+0x1b0>
   852da:	6868      	ldr	r0, [r5, #4]
   852dc:	f020 0303 	bic.w	r3, r0, #3
   852e0:	1b18      	subs	r0, r3, r4
   852e2:	280f      	cmp	r0, #15
   852e4:	dd0c      	ble.n	85300 <_malloc_r+0x104>
   852e6:	192b      	adds	r3, r5, r4
   852e8:	614b      	str	r3, [r1, #20]
   852ea:	610b      	str	r3, [r1, #16]
   852ec:	f044 0401 	orr.w	r4, r4, #1
   852f0:	f040 0101 	orr.w	r1, r0, #1
   852f4:	606c      	str	r4, [r5, #4]
   852f6:	60df      	str	r7, [r3, #12]
   852f8:	609f      	str	r7, [r3, #8]
   852fa:	6059      	str	r1, [r3, #4]
   852fc:	5018      	str	r0, [r3, r0]
   852fe:	e174      	b.n	855ea <_malloc_r+0x3ee>
   85300:	2800      	cmp	r0, #0
   85302:	614f      	str	r7, [r1, #20]
   85304:	610f      	str	r7, [r1, #16]
   85306:	db01      	blt.n	8530c <_malloc_r+0x110>
   85308:	18eb      	adds	r3, r5, r3
   8530a:	e7d8      	b.n	852be <_malloc_r+0xc2>
   8530c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85310:	d20f      	bcs.n	85332 <_malloc_r+0x136>
   85312:	08db      	lsrs	r3, r3, #3
   85314:	1098      	asrs	r0, r3, #2
   85316:	2701      	movs	r7, #1
   85318:	fa07 f700 	lsl.w	r7, r7, r0
   8531c:	6848      	ldr	r0, [r1, #4]
   8531e:	4307      	orrs	r7, r0
   85320:	604f      	str	r7, [r1, #4]
   85322:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   85326:	688b      	ldr	r3, [r1, #8]
   85328:	60e9      	str	r1, [r5, #12]
   8532a:	60ab      	str	r3, [r5, #8]
   8532c:	60dd      	str	r5, [r3, #12]
   8532e:	608d      	str	r5, [r1, #8]
   85330:	e03c      	b.n	853ac <_malloc_r+0x1b0>
   85332:	0a58      	lsrs	r0, r3, #9
   85334:	2804      	cmp	r0, #4
   85336:	d802      	bhi.n	8533e <_malloc_r+0x142>
   85338:	0998      	lsrs	r0, r3, #6
   8533a:	3038      	adds	r0, #56	; 0x38
   8533c:	e016      	b.n	8536c <_malloc_r+0x170>
   8533e:	2814      	cmp	r0, #20
   85340:	d801      	bhi.n	85346 <_malloc_r+0x14a>
   85342:	305b      	adds	r0, #91	; 0x5b
   85344:	e012      	b.n	8536c <_malloc_r+0x170>
   85346:	2854      	cmp	r0, #84	; 0x54
   85348:	d802      	bhi.n	85350 <_malloc_r+0x154>
   8534a:	0b18      	lsrs	r0, r3, #12
   8534c:	306e      	adds	r0, #110	; 0x6e
   8534e:	e00d      	b.n	8536c <_malloc_r+0x170>
   85350:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85354:	d802      	bhi.n	8535c <_malloc_r+0x160>
   85356:	0bd8      	lsrs	r0, r3, #15
   85358:	3077      	adds	r0, #119	; 0x77
   8535a:	e007      	b.n	8536c <_malloc_r+0x170>
   8535c:	f240 5754 	movw	r7, #1364	; 0x554
   85360:	42b8      	cmp	r0, r7
   85362:	d802      	bhi.n	8536a <_malloc_r+0x16e>
   85364:	0c98      	lsrs	r0, r3, #18
   85366:	307c      	adds	r0, #124	; 0x7c
   85368:	e000      	b.n	8536c <_malloc_r+0x170>
   8536a:	207e      	movs	r0, #126	; 0x7e
   8536c:	f8df e13c 	ldr.w	lr, [pc, #316]	; 854ac <_malloc_r+0x2b0>
   85370:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   85374:	68b9      	ldr	r1, [r7, #8]
   85376:	42b9      	cmp	r1, r7
   85378:	d10e      	bne.n	85398 <_malloc_r+0x19c>
   8537a:	1087      	asrs	r7, r0, #2
   8537c:	2301      	movs	r3, #1
   8537e:	fa03 f007 	lsl.w	r0, r3, r7
   85382:	f8de 7004 	ldr.w	r7, [lr, #4]
   85386:	ea40 0307 	orr.w	r3, r0, r7
   8538a:	f8ce 3004 	str.w	r3, [lr, #4]
   8538e:	4608      	mov	r0, r1
   85390:	e008      	b.n	853a4 <_malloc_r+0x1a8>
   85392:	6889      	ldr	r1, [r1, #8]
   85394:	42b9      	cmp	r1, r7
   85396:	d004      	beq.n	853a2 <_malloc_r+0x1a6>
   85398:	6848      	ldr	r0, [r1, #4]
   8539a:	f020 0003 	bic.w	r0, r0, #3
   8539e:	4283      	cmp	r3, r0
   853a0:	d3f7      	bcc.n	85392 <_malloc_r+0x196>
   853a2:	68c8      	ldr	r0, [r1, #12]
   853a4:	60e8      	str	r0, [r5, #12]
   853a6:	60a9      	str	r1, [r5, #8]
   853a8:	60cd      	str	r5, [r1, #12]
   853aa:	6085      	str	r5, [r0, #8]
   853ac:	1095      	asrs	r5, r2, #2
   853ae:	2001      	movs	r0, #1
   853b0:	fa00 f305 	lsl.w	r3, r0, r5
   853b4:	4f3d      	ldr	r7, [pc, #244]	; (854ac <_malloc_r+0x2b0>)
   853b6:	6879      	ldr	r1, [r7, #4]
   853b8:	428b      	cmp	r3, r1
   853ba:	d85d      	bhi.n	85478 <_malloc_r+0x27c>
   853bc:	420b      	tst	r3, r1
   853be:	d105      	bne.n	853cc <_malloc_r+0x1d0>
   853c0:	f022 0203 	bic.w	r2, r2, #3
   853c4:	005b      	lsls	r3, r3, #1
   853c6:	3204      	adds	r2, #4
   853c8:	420b      	tst	r3, r1
   853ca:	d0fb      	beq.n	853c4 <_malloc_r+0x1c8>
   853cc:	4d37      	ldr	r5, [pc, #220]	; (854ac <_malloc_r+0x2b0>)
   853ce:	4610      	mov	r0, r2
   853d0:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   853d4:	4677      	mov	r7, lr
   853d6:	68fd      	ldr	r5, [r7, #12]
   853d8:	42bd      	cmp	r5, r7
   853da:	d02d      	beq.n	85438 <_malloc_r+0x23c>
   853dc:	6869      	ldr	r1, [r5, #4]
   853de:	f021 0c03 	bic.w	ip, r1, #3
   853e2:	ebc4 010c 	rsb	r1, r4, ip
   853e6:	290f      	cmp	r1, #15
   853e8:	dd13      	ble.n	85412 <_malloc_r+0x216>
   853ea:	192b      	adds	r3, r5, r4
   853ec:	f044 0401 	orr.w	r4, r4, #1
   853f0:	68ea      	ldr	r2, [r5, #12]
   853f2:	606c      	str	r4, [r5, #4]
   853f4:	f855 0f08 	ldr.w	r0, [r5, #8]!
   853f8:	5059      	str	r1, [r3, r1]
   853fa:	60c2      	str	r2, [r0, #12]
   853fc:	6090      	str	r0, [r2, #8]
   853fe:	4a2b      	ldr	r2, [pc, #172]	; (854ac <_malloc_r+0x2b0>)
   85400:	f041 0001 	orr.w	r0, r1, #1
   85404:	6153      	str	r3, [r2, #20]
   85406:	6113      	str	r3, [r2, #16]
   85408:	3208      	adds	r2, #8
   8540a:	60da      	str	r2, [r3, #12]
   8540c:	609a      	str	r2, [r3, #8]
   8540e:	6058      	str	r0, [r3, #4]
   85410:	e00c      	b.n	8542c <_malloc_r+0x230>
   85412:	2900      	cmp	r1, #0
   85414:	db0e      	blt.n	85434 <_malloc_r+0x238>
   85416:	eb05 000c 	add.w	r0, r5, ip
   8541a:	6842      	ldr	r2, [r0, #4]
   8541c:	68e9      	ldr	r1, [r5, #12]
   8541e:	f042 0301 	orr.w	r3, r2, #1
   85422:	6043      	str	r3, [r0, #4]
   85424:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85428:	60c1      	str	r1, [r0, #12]
   8542a:	6088      	str	r0, [r1, #8]
   8542c:	4630      	mov	r0, r6
   8542e:	f000 f910 	bl	85652 <__malloc_unlock>
   85432:	e0de      	b.n	855f2 <_malloc_r+0x3f6>
   85434:	68ed      	ldr	r5, [r5, #12]
   85436:	e7cf      	b.n	853d8 <_malloc_r+0x1dc>
   85438:	3001      	adds	r0, #1
   8543a:	0781      	lsls	r1, r0, #30
   8543c:	f105 0708 	add.w	r7, r5, #8
   85440:	d1c9      	bne.n	853d6 <_malloc_r+0x1da>
   85442:	4671      	mov	r1, lr
   85444:	0795      	lsls	r5, r2, #30
   85446:	d105      	bne.n	85454 <_malloc_r+0x258>
   85448:	4a18      	ldr	r2, [pc, #96]	; (854ac <_malloc_r+0x2b0>)
   8544a:	6855      	ldr	r5, [r2, #4]
   8544c:	ea25 0503 	bic.w	r5, r5, r3
   85450:	6055      	str	r5, [r2, #4]
   85452:	e005      	b.n	85460 <_malloc_r+0x264>
   85454:	f1a1 0708 	sub.w	r7, r1, #8
   85458:	6809      	ldr	r1, [r1, #0]
   8545a:	3a01      	subs	r2, #1
   8545c:	42b9      	cmp	r1, r7
   8545e:	d0f1      	beq.n	85444 <_malloc_r+0x248>
   85460:	4f12      	ldr	r7, [pc, #72]	; (854ac <_malloc_r+0x2b0>)
   85462:	005b      	lsls	r3, r3, #1
   85464:	687f      	ldr	r7, [r7, #4]
   85466:	42bb      	cmp	r3, r7
   85468:	d806      	bhi.n	85478 <_malloc_r+0x27c>
   8546a:	b12b      	cbz	r3, 85478 <_malloc_r+0x27c>
   8546c:	4602      	mov	r2, r0
   8546e:	423b      	tst	r3, r7
   85470:	d1ac      	bne.n	853cc <_malloc_r+0x1d0>
   85472:	3204      	adds	r2, #4
   85474:	005b      	lsls	r3, r3, #1
   85476:	e7fa      	b.n	8546e <_malloc_r+0x272>
   85478:	4b0c      	ldr	r3, [pc, #48]	; (854ac <_malloc_r+0x2b0>)
   8547a:	689f      	ldr	r7, [r3, #8]
   8547c:	4619      	mov	r1, r3
   8547e:	6878      	ldr	r0, [r7, #4]
   85480:	f020 0903 	bic.w	r9, r0, #3
   85484:	45a1      	cmp	r9, r4
   85486:	d304      	bcc.n	85492 <_malloc_r+0x296>
   85488:	ebc4 0009 	rsb	r0, r4, r9
   8548c:	280f      	cmp	r0, #15
   8548e:	f300 80a2 	bgt.w	855d6 <_malloc_r+0x3da>
   85492:	4a07      	ldr	r2, [pc, #28]	; (854b0 <_malloc_r+0x2b4>)
   85494:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   85498:	6815      	ldr	r5, [r2, #0]
   8549a:	3301      	adds	r3, #1
   8549c:	eb07 0a09 	add.w	sl, r7, r9
   854a0:	eb04 0805 	add.w	r8, r4, r5
   854a4:	d106      	bne.n	854b4 <_malloc_r+0x2b8>
   854a6:	f108 0810 	add.w	r8, r8, #16
   854aa:	e00b      	b.n	854c4 <_malloc_r+0x2c8>
   854ac:	200704cc 	.word	0x200704cc
   854b0:	2007aae4 	.word	0x2007aae4
   854b4:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   854b8:	f100 010f 	add.w	r1, r0, #15
   854bc:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   854c0:	f022 080f 	bic.w	r8, r2, #15
   854c4:	4630      	mov	r0, r6
   854c6:	4641      	mov	r1, r8
   854c8:	f000 fa32 	bl	85930 <_sbrk_r>
   854cc:	1c42      	adds	r2, r0, #1
   854ce:	4605      	mov	r5, r0
   854d0:	d071      	beq.n	855b6 <_malloc_r+0x3ba>
   854d2:	4550      	cmp	r0, sl
   854d4:	d202      	bcs.n	854dc <_malloc_r+0x2e0>
   854d6:	4b48      	ldr	r3, [pc, #288]	; (855f8 <_malloc_r+0x3fc>)
   854d8:	429f      	cmp	r7, r3
   854da:	d16c      	bne.n	855b6 <_malloc_r+0x3ba>
   854dc:	4847      	ldr	r0, [pc, #284]	; (855fc <_malloc_r+0x400>)
   854de:	4555      	cmp	r5, sl
   854e0:	6841      	ldr	r1, [r0, #4]
   854e2:	4a45      	ldr	r2, [pc, #276]	; (855f8 <_malloc_r+0x3fc>)
   854e4:	eb08 0301 	add.w	r3, r8, r1
   854e8:	6043      	str	r3, [r0, #4]
   854ea:	d107      	bne.n	854fc <_malloc_r+0x300>
   854ec:	0529      	lsls	r1, r5, #20
   854ee:	d105      	bne.n	854fc <_malloc_r+0x300>
   854f0:	6895      	ldr	r5, [r2, #8]
   854f2:	44c8      	add	r8, r9
   854f4:	f048 0001 	orr.w	r0, r8, #1
   854f8:	6068      	str	r0, [r5, #4]
   854fa:	e051      	b.n	855a0 <_malloc_r+0x3a4>
   854fc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   85500:	1c42      	adds	r2, r0, #1
   85502:	d103      	bne.n	8550c <_malloc_r+0x310>
   85504:	4a3c      	ldr	r2, [pc, #240]	; (855f8 <_malloc_r+0x3fc>)
   85506:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8550a:	e005      	b.n	85518 <_malloc_r+0x31c>
   8550c:	ebca 0a05 	rsb	sl, sl, r5
   85510:	eb03 010a 	add.w	r1, r3, sl
   85514:	4b39      	ldr	r3, [pc, #228]	; (855fc <_malloc_r+0x400>)
   85516:	6059      	str	r1, [r3, #4]
   85518:	f015 0007 	ands.w	r0, r5, #7
   8551c:	bf1c      	itt	ne
   8551e:	f1c0 0008 	rsbne	r0, r0, #8
   85522:	182d      	addne	r5, r5, r0
   85524:	eb05 0c08 	add.w	ip, r5, r8
   85528:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   8552c:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   85530:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   85534:	4641      	mov	r1, r8
   85536:	4630      	mov	r0, r6
   85538:	f000 f9fa 	bl	85930 <_sbrk_r>
   8553c:	4a2f      	ldr	r2, [pc, #188]	; (855fc <_malloc_r+0x400>)
   8553e:	1c43      	adds	r3, r0, #1
   85540:	6853      	ldr	r3, [r2, #4]
   85542:	bf08      	it	eq
   85544:	f04f 0800 	moveq.w	r8, #0
   85548:	eb08 0103 	add.w	r1, r8, r3
   8554c:	bf08      	it	eq
   8554e:	4628      	moveq	r0, r5
   85550:	6051      	str	r1, [r2, #4]
   85552:	1b40      	subs	r0, r0, r5
   85554:	4a28      	ldr	r2, [pc, #160]	; (855f8 <_malloc_r+0x3fc>)
   85556:	eb00 0308 	add.w	r3, r0, r8
   8555a:	f043 0101 	orr.w	r1, r3, #1
   8555e:	4297      	cmp	r7, r2
   85560:	6095      	str	r5, [r2, #8]
   85562:	6069      	str	r1, [r5, #4]
   85564:	d01c      	beq.n	855a0 <_malloc_r+0x3a4>
   85566:	f1b9 0f0f 	cmp.w	r9, #15
   8556a:	d802      	bhi.n	85572 <_malloc_r+0x376>
   8556c:	2201      	movs	r2, #1
   8556e:	606a      	str	r2, [r5, #4]
   85570:	e021      	b.n	855b6 <_malloc_r+0x3ba>
   85572:	687d      	ldr	r5, [r7, #4]
   85574:	f1a9 090c 	sub.w	r9, r9, #12
   85578:	f029 0907 	bic.w	r9, r9, #7
   8557c:	f005 0201 	and.w	r2, r5, #1
   85580:	2105      	movs	r1, #5
   85582:	eb07 0309 	add.w	r3, r7, r9
   85586:	ea49 0002 	orr.w	r0, r9, r2
   8558a:	f1b9 0f0f 	cmp.w	r9, #15
   8558e:	6078      	str	r0, [r7, #4]
   85590:	6059      	str	r1, [r3, #4]
   85592:	6099      	str	r1, [r3, #8]
   85594:	d904      	bls.n	855a0 <_malloc_r+0x3a4>
   85596:	4630      	mov	r0, r6
   85598:	f107 0108 	add.w	r1, r7, #8
   8559c:	f7ff fb1a 	bl	84bd4 <_free_r>
   855a0:	4a16      	ldr	r2, [pc, #88]	; (855fc <_malloc_r+0x400>)
   855a2:	6853      	ldr	r3, [r2, #4]
   855a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   855a6:	6b15      	ldr	r5, [r2, #48]	; 0x30
   855a8:	428b      	cmp	r3, r1
   855aa:	bf88      	it	hi
   855ac:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   855ae:	42ab      	cmp	r3, r5
   855b0:	bf84      	itt	hi
   855b2:	4d12      	ldrhi	r5, [pc, #72]	; (855fc <_malloc_r+0x400>)
   855b4:	632b      	strhi	r3, [r5, #48]	; 0x30
   855b6:	4810      	ldr	r0, [pc, #64]	; (855f8 <_malloc_r+0x3fc>)
   855b8:	6882      	ldr	r2, [r0, #8]
   855ba:	6853      	ldr	r3, [r2, #4]
   855bc:	f023 0103 	bic.w	r1, r3, #3
   855c0:	42a1      	cmp	r1, r4
   855c2:	ebc4 0001 	rsb	r0, r4, r1
   855c6:	d301      	bcc.n	855cc <_malloc_r+0x3d0>
   855c8:	280f      	cmp	r0, #15
   855ca:	dc04      	bgt.n	855d6 <_malloc_r+0x3da>
   855cc:	4630      	mov	r0, r6
   855ce:	f000 f840 	bl	85652 <__malloc_unlock>
   855d2:	2500      	movs	r5, #0
   855d4:	e00d      	b.n	855f2 <_malloc_r+0x3f6>
   855d6:	4a08      	ldr	r2, [pc, #32]	; (855f8 <_malloc_r+0x3fc>)
   855d8:	f044 0301 	orr.w	r3, r4, #1
   855dc:	6895      	ldr	r5, [r2, #8]
   855de:	f040 0101 	orr.w	r1, r0, #1
   855e2:	192c      	adds	r4, r5, r4
   855e4:	606b      	str	r3, [r5, #4]
   855e6:	6094      	str	r4, [r2, #8]
   855e8:	6061      	str	r1, [r4, #4]
   855ea:	4630      	mov	r0, r6
   855ec:	f000 f831 	bl	85652 <__malloc_unlock>
   855f0:	3508      	adds	r5, #8
   855f2:	4628      	mov	r0, r5
   855f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   855f8:	200704cc 	.word	0x200704cc
   855fc:	2007aae4 	.word	0x2007aae4

00085600 <memchr>:
   85600:	b510      	push	{r4, lr}
   85602:	b2c9      	uxtb	r1, r1
   85604:	4603      	mov	r3, r0
   85606:	1882      	adds	r2, r0, r2
   85608:	4293      	cmp	r3, r2
   8560a:	4618      	mov	r0, r3
   8560c:	d004      	beq.n	85618 <memchr+0x18>
   8560e:	7804      	ldrb	r4, [r0, #0]
   85610:	3301      	adds	r3, #1
   85612:	428c      	cmp	r4, r1
   85614:	d1f8      	bne.n	85608 <memchr+0x8>
   85616:	e000      	b.n	8561a <memchr+0x1a>
   85618:	2000      	movs	r0, #0
   8561a:	bd10      	pop	{r4, pc}

0008561c <memmove>:
   8561c:	4281      	cmp	r1, r0
   8561e:	b570      	push	{r4, r5, r6, lr}
   85620:	d20e      	bcs.n	85640 <memmove+0x24>
   85622:	188c      	adds	r4, r1, r2
   85624:	42a0      	cmp	r0, r4
   85626:	d20b      	bcs.n	85640 <memmove+0x24>
   85628:	1885      	adds	r5, r0, r2
   8562a:	4613      	mov	r3, r2
   8562c:	f113 33ff 	adds.w	r3, r3, #4294967295
   85630:	d305      	bcc.n	8563e <memmove+0x22>
   85632:	4251      	negs	r1, r2
   85634:	1866      	adds	r6, r4, r1
   85636:	5cf6      	ldrb	r6, [r6, r3]
   85638:	1869      	adds	r1, r5, r1
   8563a:	54ce      	strb	r6, [r1, r3]
   8563c:	e7f6      	b.n	8562c <memmove+0x10>
   8563e:	bd70      	pop	{r4, r5, r6, pc}
   85640:	2300      	movs	r3, #0
   85642:	4293      	cmp	r3, r2
   85644:	d003      	beq.n	8564e <memmove+0x32>
   85646:	5ccc      	ldrb	r4, [r1, r3]
   85648:	54c4      	strb	r4, [r0, r3]
   8564a:	3301      	adds	r3, #1
   8564c:	e7f9      	b.n	85642 <memmove+0x26>
   8564e:	bd70      	pop	{r4, r5, r6, pc}

00085650 <__malloc_lock>:
   85650:	4770      	bx	lr

00085652 <__malloc_unlock>:
   85652:	4770      	bx	lr

00085654 <_realloc_r>:
   85654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85658:	4681      	mov	r9, r0
   8565a:	4616      	mov	r6, r2
   8565c:	460c      	mov	r4, r1
   8565e:	b921      	cbnz	r1, 8566a <_realloc_r+0x16>
   85660:	4611      	mov	r1, r2
   85662:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85666:	f7ff bdc9 	b.w	851fc <_malloc_r>
   8566a:	f7ff fff1 	bl	85650 <__malloc_lock>
   8566e:	f106 070b 	add.w	r7, r6, #11
   85672:	f854 5c04 	ldr.w	r5, [r4, #-4]
   85676:	2f16      	cmp	r7, #22
   85678:	f1a4 0b08 	sub.w	fp, r4, #8
   8567c:	f025 0803 	bic.w	r8, r5, #3
   85680:	d903      	bls.n	8568a <_realloc_r+0x36>
   85682:	f037 0707 	bics.w	r7, r7, #7
   85686:	d501      	bpl.n	8568c <_realloc_r+0x38>
   85688:	e002      	b.n	85690 <_realloc_r+0x3c>
   8568a:	2710      	movs	r7, #16
   8568c:	42b7      	cmp	r7, r6
   8568e:	d204      	bcs.n	8569a <_realloc_r+0x46>
   85690:	200c      	movs	r0, #12
   85692:	f8c9 0000 	str.w	r0, [r9]
   85696:	2600      	movs	r6, #0
   85698:	e145      	b.n	85926 <_realloc_r+0x2d2>
   8569a:	45b8      	cmp	r8, r7
   8569c:	f280 811a 	bge.w	858d4 <_realloc_r+0x280>
   856a0:	4aa2      	ldr	r2, [pc, #648]	; (8592c <_realloc_r+0x2d8>)
   856a2:	eb0b 0308 	add.w	r3, fp, r8
   856a6:	6891      	ldr	r1, [r2, #8]
   856a8:	428b      	cmp	r3, r1
   856aa:	d006      	beq.n	856ba <_realloc_r+0x66>
   856ac:	6858      	ldr	r0, [r3, #4]
   856ae:	f020 0201 	bic.w	r2, r0, #1
   856b2:	1898      	adds	r0, r3, r2
   856b4:	6842      	ldr	r2, [r0, #4]
   856b6:	07d0      	lsls	r0, r2, #31
   856b8:	d426      	bmi.n	85708 <_realloc_r+0xb4>
   856ba:	685a      	ldr	r2, [r3, #4]
   856bc:	428b      	cmp	r3, r1
   856be:	f022 0003 	bic.w	r0, r2, #3
   856c2:	eb00 0a08 	add.w	sl, r0, r8
   856c6:	d118      	bne.n	856fa <_realloc_r+0xa6>
   856c8:	f107 0210 	add.w	r2, r7, #16
   856cc:	4592      	cmp	sl, r2
   856ce:	db1d      	blt.n	8570c <_realloc_r+0xb8>
   856d0:	ebc7 0a0a 	rsb	sl, r7, sl
   856d4:	eb0b 0507 	add.w	r5, fp, r7
   856d8:	f04a 0101 	orr.w	r1, sl, #1
   856dc:	6069      	str	r1, [r5, #4]
   856de:	f854 2c04 	ldr.w	r2, [r4, #-4]
   856e2:	4e92      	ldr	r6, [pc, #584]	; (8592c <_realloc_r+0x2d8>)
   856e4:	f002 0301 	and.w	r3, r2, #1
   856e8:	431f      	orrs	r7, r3
   856ea:	60b5      	str	r5, [r6, #8]
   856ec:	f844 7c04 	str.w	r7, [r4, #-4]
   856f0:	4648      	mov	r0, r9
   856f2:	f7ff ffae 	bl	85652 <__malloc_unlock>
   856f6:	4626      	mov	r6, r4
   856f8:	e115      	b.n	85926 <_realloc_r+0x2d2>
   856fa:	45ba      	cmp	sl, r7
   856fc:	db06      	blt.n	8570c <_realloc_r+0xb8>
   856fe:	68dd      	ldr	r5, [r3, #12]
   85700:	689e      	ldr	r6, [r3, #8]
   85702:	60f5      	str	r5, [r6, #12]
   85704:	60ae      	str	r6, [r5, #8]
   85706:	e0e6      	b.n	858d6 <_realloc_r+0x282>
   85708:	2000      	movs	r0, #0
   8570a:	4603      	mov	r3, r0
   8570c:	07ea      	lsls	r2, r5, #31
   8570e:	f100 8091 	bmi.w	85834 <_realloc_r+0x1e0>
   85712:	f854 5c08 	ldr.w	r5, [r4, #-8]
   85716:	ebc5 050b 	rsb	r5, r5, fp
   8571a:	686a      	ldr	r2, [r5, #4]
   8571c:	f022 0203 	bic.w	r2, r2, #3
   85720:	2b00      	cmp	r3, #0
   85722:	d051      	beq.n	857c8 <_realloc_r+0x174>
   85724:	eb02 0a08 	add.w	sl, r2, r8
   85728:	428b      	cmp	r3, r1
   8572a:	4482      	add	sl, r0
   8572c:	d145      	bne.n	857ba <_realloc_r+0x166>
   8572e:	f107 0310 	add.w	r3, r7, #16
   85732:	459a      	cmp	sl, r3
   85734:	db48      	blt.n	857c8 <_realloc_r+0x174>
   85736:	462e      	mov	r6, r5
   85738:	68e9      	ldr	r1, [r5, #12]
   8573a:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8573e:	f1a8 0204 	sub.w	r2, r8, #4
   85742:	2a24      	cmp	r2, #36	; 0x24
   85744:	60d9      	str	r1, [r3, #12]
   85746:	608b      	str	r3, [r1, #8]
   85748:	d825      	bhi.n	85796 <_realloc_r+0x142>
   8574a:	2a13      	cmp	r2, #19
   8574c:	d91b      	bls.n	85786 <_realloc_r+0x132>
   8574e:	6821      	ldr	r1, [r4, #0]
   85750:	2a1b      	cmp	r2, #27
   85752:	60a9      	str	r1, [r5, #8]
   85754:	6863      	ldr	r3, [r4, #4]
   85756:	60eb      	str	r3, [r5, #12]
   85758:	d803      	bhi.n	85762 <_realloc_r+0x10e>
   8575a:	f105 0010 	add.w	r0, r5, #16
   8575e:	3408      	adds	r4, #8
   85760:	e012      	b.n	85788 <_realloc_r+0x134>
   85762:	68a0      	ldr	r0, [r4, #8]
   85764:	2a24      	cmp	r2, #36	; 0x24
   85766:	6128      	str	r0, [r5, #16]
   85768:	68e1      	ldr	r1, [r4, #12]
   8576a:	6169      	str	r1, [r5, #20]
   8576c:	d003      	beq.n	85776 <_realloc_r+0x122>
   8576e:	f105 0018 	add.w	r0, r5, #24
   85772:	3410      	adds	r4, #16
   85774:	e008      	b.n	85788 <_realloc_r+0x134>
   85776:	6922      	ldr	r2, [r4, #16]
   85778:	f105 0020 	add.w	r0, r5, #32
   8577c:	61aa      	str	r2, [r5, #24]
   8577e:	6963      	ldr	r3, [r4, #20]
   85780:	3418      	adds	r4, #24
   85782:	61eb      	str	r3, [r5, #28]
   85784:	e000      	b.n	85788 <_realloc_r+0x134>
   85786:	4630      	mov	r0, r6
   85788:	6821      	ldr	r1, [r4, #0]
   8578a:	6001      	str	r1, [r0, #0]
   8578c:	6862      	ldr	r2, [r4, #4]
   8578e:	6042      	str	r2, [r0, #4]
   85790:	68a3      	ldr	r3, [r4, #8]
   85792:	6083      	str	r3, [r0, #8]
   85794:	e003      	b.n	8579e <_realloc_r+0x14a>
   85796:	4630      	mov	r0, r6
   85798:	4621      	mov	r1, r4
   8579a:	f7ff ff3f 	bl	8561c <memmove>
   8579e:	ebc7 0a0a 	rsb	sl, r7, sl
   857a2:	19e8      	adds	r0, r5, r7
   857a4:	f04a 0201 	orr.w	r2, sl, #1
   857a8:	6042      	str	r2, [r0, #4]
   857aa:	686b      	ldr	r3, [r5, #4]
   857ac:	495f      	ldr	r1, [pc, #380]	; (8592c <_realloc_r+0x2d8>)
   857ae:	6088      	str	r0, [r1, #8]
   857b0:	f003 0001 	and.w	r0, r3, #1
   857b4:	4307      	orrs	r7, r0
   857b6:	606f      	str	r7, [r5, #4]
   857b8:	e088      	b.n	858cc <_realloc_r+0x278>
   857ba:	45ba      	cmp	sl, r7
   857bc:	db04      	blt.n	857c8 <_realloc_r+0x174>
   857be:	68d9      	ldr	r1, [r3, #12]
   857c0:	6898      	ldr	r0, [r3, #8]
   857c2:	60c1      	str	r1, [r0, #12]
   857c4:	6088      	str	r0, [r1, #8]
   857c6:	e003      	b.n	857d0 <_realloc_r+0x17c>
   857c8:	eb02 0a08 	add.w	sl, r2, r8
   857cc:	45ba      	cmp	sl, r7
   857ce:	db31      	blt.n	85834 <_realloc_r+0x1e0>
   857d0:	4628      	mov	r0, r5
   857d2:	68eb      	ldr	r3, [r5, #12]
   857d4:	f850 1f08 	ldr.w	r1, [r0, #8]!
   857d8:	f1a8 0204 	sub.w	r2, r8, #4
   857dc:	2a24      	cmp	r2, #36	; 0x24
   857de:	60cb      	str	r3, [r1, #12]
   857e0:	6099      	str	r1, [r3, #8]
   857e2:	d823      	bhi.n	8582c <_realloc_r+0x1d8>
   857e4:	2a13      	cmp	r2, #19
   857e6:	d91a      	bls.n	8581e <_realloc_r+0x1ca>
   857e8:	6820      	ldr	r0, [r4, #0]
   857ea:	2a1b      	cmp	r2, #27
   857ec:	60a8      	str	r0, [r5, #8]
   857ee:	6866      	ldr	r6, [r4, #4]
   857f0:	60ee      	str	r6, [r5, #12]
   857f2:	d803      	bhi.n	857fc <_realloc_r+0x1a8>
   857f4:	f105 0010 	add.w	r0, r5, #16
   857f8:	3408      	adds	r4, #8
   857fa:	e010      	b.n	8581e <_realloc_r+0x1ca>
   857fc:	68a3      	ldr	r3, [r4, #8]
   857fe:	2a24      	cmp	r2, #36	; 0x24
   85800:	612b      	str	r3, [r5, #16]
   85802:	68e1      	ldr	r1, [r4, #12]
   85804:	6169      	str	r1, [r5, #20]
   85806:	d003      	beq.n	85810 <_realloc_r+0x1bc>
   85808:	f105 0018 	add.w	r0, r5, #24
   8580c:	3410      	adds	r4, #16
   8580e:	e006      	b.n	8581e <_realloc_r+0x1ca>
   85810:	6922      	ldr	r2, [r4, #16]
   85812:	61aa      	str	r2, [r5, #24]
   85814:	6960      	ldr	r0, [r4, #20]
   85816:	3418      	adds	r4, #24
   85818:	61e8      	str	r0, [r5, #28]
   8581a:	f105 0020 	add.w	r0, r5, #32
   8581e:	6826      	ldr	r6, [r4, #0]
   85820:	6006      	str	r6, [r0, #0]
   85822:	6863      	ldr	r3, [r4, #4]
   85824:	6043      	str	r3, [r0, #4]
   85826:	68a1      	ldr	r1, [r4, #8]
   85828:	6081      	str	r1, [r0, #8]
   8582a:	e055      	b.n	858d8 <_realloc_r+0x284>
   8582c:	4621      	mov	r1, r4
   8582e:	f7ff fef5 	bl	8561c <memmove>
   85832:	e051      	b.n	858d8 <_realloc_r+0x284>
   85834:	4631      	mov	r1, r6
   85836:	4648      	mov	r0, r9
   85838:	f7ff fce0 	bl	851fc <_malloc_r>
   8583c:	4606      	mov	r6, r0
   8583e:	2800      	cmp	r0, #0
   85840:	d044      	beq.n	858cc <_realloc_r+0x278>
   85842:	f854 1c04 	ldr.w	r1, [r4, #-4]
   85846:	f1a0 0208 	sub.w	r2, r0, #8
   8584a:	f021 0301 	bic.w	r3, r1, #1
   8584e:	eb0b 0103 	add.w	r1, fp, r3
   85852:	428a      	cmp	r2, r1
   85854:	d106      	bne.n	85864 <_realloc_r+0x210>
   85856:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8585a:	f026 0503 	bic.w	r5, r6, #3
   8585e:	eb05 0a08 	add.w	sl, r5, r8
   85862:	e038      	b.n	858d6 <_realloc_r+0x282>
   85864:	f1a8 0204 	sub.w	r2, r8, #4
   85868:	2a24      	cmp	r2, #36	; 0x24
   8586a:	d828      	bhi.n	858be <_realloc_r+0x26a>
   8586c:	2a13      	cmp	r2, #19
   8586e:	d91e      	bls.n	858ae <_realloc_r+0x25a>
   85870:	6823      	ldr	r3, [r4, #0]
   85872:	2a1b      	cmp	r2, #27
   85874:	6003      	str	r3, [r0, #0]
   85876:	6861      	ldr	r1, [r4, #4]
   85878:	6041      	str	r1, [r0, #4]
   8587a:	d804      	bhi.n	85886 <_realloc_r+0x232>
   8587c:	f100 0008 	add.w	r0, r0, #8
   85880:	f104 0208 	add.w	r2, r4, #8
   85884:	e014      	b.n	858b0 <_realloc_r+0x25c>
   85886:	68a0      	ldr	r0, [r4, #8]
   85888:	2a24      	cmp	r2, #36	; 0x24
   8588a:	60b0      	str	r0, [r6, #8]
   8588c:	68e3      	ldr	r3, [r4, #12]
   8588e:	60f3      	str	r3, [r6, #12]
   85890:	d004      	beq.n	8589c <_realloc_r+0x248>
   85892:	f106 0010 	add.w	r0, r6, #16
   85896:	f104 0210 	add.w	r2, r4, #16
   8589a:	e009      	b.n	858b0 <_realloc_r+0x25c>
   8589c:	6922      	ldr	r2, [r4, #16]
   8589e:	f106 0018 	add.w	r0, r6, #24
   858a2:	6132      	str	r2, [r6, #16]
   858a4:	6961      	ldr	r1, [r4, #20]
   858a6:	f104 0218 	add.w	r2, r4, #24
   858aa:	6171      	str	r1, [r6, #20]
   858ac:	e000      	b.n	858b0 <_realloc_r+0x25c>
   858ae:	4622      	mov	r2, r4
   858b0:	6813      	ldr	r3, [r2, #0]
   858b2:	6003      	str	r3, [r0, #0]
   858b4:	6851      	ldr	r1, [r2, #4]
   858b6:	6041      	str	r1, [r0, #4]
   858b8:	6892      	ldr	r2, [r2, #8]
   858ba:	6082      	str	r2, [r0, #8]
   858bc:	e002      	b.n	858c4 <_realloc_r+0x270>
   858be:	4621      	mov	r1, r4
   858c0:	f7ff feac 	bl	8561c <memmove>
   858c4:	4648      	mov	r0, r9
   858c6:	4621      	mov	r1, r4
   858c8:	f7ff f984 	bl	84bd4 <_free_r>
   858cc:	4648      	mov	r0, r9
   858ce:	f7ff fec0 	bl	85652 <__malloc_unlock>
   858d2:	e028      	b.n	85926 <_realloc_r+0x2d2>
   858d4:	46c2      	mov	sl, r8
   858d6:	465d      	mov	r5, fp
   858d8:	ebc7 000a 	rsb	r0, r7, sl
   858dc:	280f      	cmp	r0, #15
   858de:	686a      	ldr	r2, [r5, #4]
   858e0:	d911      	bls.n	85906 <_realloc_r+0x2b2>
   858e2:	f002 0601 	and.w	r6, r2, #1
   858e6:	19e9      	adds	r1, r5, r7
   858e8:	f040 0301 	orr.w	r3, r0, #1
   858ec:	4337      	orrs	r7, r6
   858ee:	606f      	str	r7, [r5, #4]
   858f0:	1808      	adds	r0, r1, r0
   858f2:	604b      	str	r3, [r1, #4]
   858f4:	6842      	ldr	r2, [r0, #4]
   858f6:	3108      	adds	r1, #8
   858f8:	f042 0601 	orr.w	r6, r2, #1
   858fc:	6046      	str	r6, [r0, #4]
   858fe:	4648      	mov	r0, r9
   85900:	f7ff f968 	bl	84bd4 <_free_r>
   85904:	e00a      	b.n	8591c <_realloc_r+0x2c8>
   85906:	f002 0601 	and.w	r6, r2, #1
   8590a:	ea4a 0306 	orr.w	r3, sl, r6
   8590e:	606b      	str	r3, [r5, #4]
   85910:	eb05 010a 	add.w	r1, r5, sl
   85914:	6848      	ldr	r0, [r1, #4]
   85916:	f040 0201 	orr.w	r2, r0, #1
   8591a:	604a      	str	r2, [r1, #4]
   8591c:	4648      	mov	r0, r9
   8591e:	f7ff fe98 	bl	85652 <__malloc_unlock>
   85922:	f105 0608 	add.w	r6, r5, #8
   85926:	4630      	mov	r0, r6
   85928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8592c:	200704cc 	.word	0x200704cc

00085930 <_sbrk_r>:
   85930:	b538      	push	{r3, r4, r5, lr}
   85932:	4c06      	ldr	r4, [pc, #24]	; (8594c <_sbrk_r+0x1c>)
   85934:	2300      	movs	r3, #0
   85936:	4605      	mov	r5, r0
   85938:	4608      	mov	r0, r1
   8593a:	6023      	str	r3, [r4, #0]
   8593c:	f7fb fd96 	bl	8146c <_sbrk>
   85940:	1c43      	adds	r3, r0, #1
   85942:	d102      	bne.n	8594a <_sbrk_r+0x1a>
   85944:	6821      	ldr	r1, [r4, #0]
   85946:	b101      	cbz	r1, 8594a <_sbrk_r+0x1a>
   85948:	6029      	str	r1, [r5, #0]
   8594a:	bd38      	pop	{r3, r4, r5, pc}
   8594c:	2007ab54 	.word	0x2007ab54

00085950 <__sread>:
   85950:	b510      	push	{r4, lr}
   85952:	460c      	mov	r4, r1
   85954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85958:	f000 f99c 	bl	85c94 <_read_r>
   8595c:	2800      	cmp	r0, #0
   8595e:	db03      	blt.n	85968 <__sread+0x18>
   85960:	6d22      	ldr	r2, [r4, #80]	; 0x50
   85962:	1813      	adds	r3, r2, r0
   85964:	6523      	str	r3, [r4, #80]	; 0x50
   85966:	bd10      	pop	{r4, pc}
   85968:	89a3      	ldrh	r3, [r4, #12]
   8596a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   8596e:	81a1      	strh	r1, [r4, #12]
   85970:	bd10      	pop	{r4, pc}

00085972 <__seofread>:
   85972:	2000      	movs	r0, #0
   85974:	4770      	bx	lr

00085976 <__swrite>:
   85976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8597a:	461d      	mov	r5, r3
   8597c:	898b      	ldrh	r3, [r1, #12]
   8597e:	460c      	mov	r4, r1
   85980:	f403 7180 	and.w	r1, r3, #256	; 0x100
   85984:	4616      	mov	r6, r2
   85986:	b20a      	sxth	r2, r1
   85988:	4607      	mov	r7, r0
   8598a:	b12a      	cbz	r2, 85998 <__swrite+0x22>
   8598c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85990:	2200      	movs	r2, #0
   85992:	2302      	movs	r3, #2
   85994:	f000 f96c 	bl	85c70 <_lseek_r>
   85998:	89a0      	ldrh	r0, [r4, #12]
   8599a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8599e:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   859a2:	81a3      	strh	r3, [r4, #12]
   859a4:	4638      	mov	r0, r7
   859a6:	4632      	mov	r2, r6
   859a8:	462b      	mov	r3, r5
   859aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   859ae:	f000 b8d1 	b.w	85b54 <_write_r>

000859b2 <__sseek>:
   859b2:	b510      	push	{r4, lr}
   859b4:	460c      	mov	r4, r1
   859b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   859ba:	f000 f959 	bl	85c70 <_lseek_r>
   859be:	1c43      	adds	r3, r0, #1
   859c0:	89a3      	ldrh	r3, [r4, #12]
   859c2:	d103      	bne.n	859cc <__sseek+0x1a>
   859c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   859c8:	81a2      	strh	r2, [r4, #12]
   859ca:	bd10      	pop	{r4, pc}
   859cc:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   859d0:	81a1      	strh	r1, [r4, #12]
   859d2:	6520      	str	r0, [r4, #80]	; 0x50
   859d4:	bd10      	pop	{r4, pc}

000859d6 <__sclose>:
   859d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   859da:	f000 b8cd 	b.w	85b78 <_close_r>

000859de <strcmp>:
   859de:	f810 2b01 	ldrb.w	r2, [r0], #1
   859e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   859e6:	2a01      	cmp	r2, #1
   859e8:	bf28      	it	cs
   859ea:	429a      	cmpcs	r2, r3
   859ec:	d0f7      	beq.n	859de <strcmp>
   859ee:	eba2 0003 	sub.w	r0, r2, r3
   859f2:	4770      	bx	lr

000859f4 <__swbuf_r>:
   859f4:	b570      	push	{r4, r5, r6, lr}
   859f6:	460d      	mov	r5, r1
   859f8:	4614      	mov	r4, r2
   859fa:	4606      	mov	r6, r0
   859fc:	b118      	cbz	r0, 85a06 <__swbuf_r+0x12>
   859fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85a00:	b90b      	cbnz	r3, 85a06 <__swbuf_r+0x12>
   85a02:	f7fe ffa9 	bl	84958 <__sinit>
   85a06:	89a1      	ldrh	r1, [r4, #12]
   85a08:	69a0      	ldr	r0, [r4, #24]
   85a0a:	f001 0208 	and.w	r2, r1, #8
   85a0e:	b213      	sxth	r3, r2
   85a10:	60a0      	str	r0, [r4, #8]
   85a12:	b10b      	cbz	r3, 85a18 <__swbuf_r+0x24>
   85a14:	6920      	ldr	r0, [r4, #16]
   85a16:	b958      	cbnz	r0, 85a30 <__swbuf_r+0x3c>
   85a18:	4630      	mov	r0, r6
   85a1a:	4621      	mov	r1, r4
   85a1c:	f7fe fdf6 	bl	8460c <__swsetup_r>
   85a20:	b130      	cbz	r0, 85a30 <__swbuf_r+0x3c>
   85a22:	89a5      	ldrh	r5, [r4, #12]
   85a24:	2009      	movs	r0, #9
   85a26:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   85a2a:	81a1      	strh	r1, [r4, #12]
   85a2c:	6030      	str	r0, [r6, #0]
   85a2e:	e017      	b.n	85a60 <__swbuf_r+0x6c>
   85a30:	89a1      	ldrh	r1, [r4, #12]
   85a32:	b2ed      	uxtb	r5, r5
   85a34:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   85a38:	b213      	sxth	r3, r2
   85a3a:	b933      	cbnz	r3, 85a4a <__swbuf_r+0x56>
   85a3c:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   85a40:	6e61      	ldr	r1, [r4, #100]	; 0x64
   85a42:	81a0      	strh	r0, [r4, #12]
   85a44:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   85a48:	6662      	str	r2, [r4, #100]	; 0x64
   85a4a:	6820      	ldr	r0, [r4, #0]
   85a4c:	6923      	ldr	r3, [r4, #16]
   85a4e:	6961      	ldr	r1, [r4, #20]
   85a50:	1ac0      	subs	r0, r0, r3
   85a52:	4288      	cmp	r0, r1
   85a54:	db07      	blt.n	85a66 <__swbuf_r+0x72>
   85a56:	4630      	mov	r0, r6
   85a58:	4621      	mov	r1, r4
   85a5a:	f7fe fe8b 	bl	84774 <_fflush_r>
   85a5e:	b110      	cbz	r0, 85a66 <__swbuf_r+0x72>
   85a60:	f04f 35ff 	mov.w	r5, #4294967295
   85a64:	e015      	b.n	85a92 <__swbuf_r+0x9e>
   85a66:	68a2      	ldr	r2, [r4, #8]
   85a68:	6821      	ldr	r1, [r4, #0]
   85a6a:	1e53      	subs	r3, r2, #1
   85a6c:	60a3      	str	r3, [r4, #8]
   85a6e:	f801 5b01 	strb.w	r5, [r1], #1
   85a72:	6962      	ldr	r2, [r4, #20]
   85a74:	3001      	adds	r0, #1
   85a76:	4290      	cmp	r0, r2
   85a78:	6021      	str	r1, [r4, #0]
   85a7a:	d004      	beq.n	85a86 <__swbuf_r+0x92>
   85a7c:	89a3      	ldrh	r3, [r4, #12]
   85a7e:	07db      	lsls	r3, r3, #31
   85a80:	d507      	bpl.n	85a92 <__swbuf_r+0x9e>
   85a82:	2d0a      	cmp	r5, #10
   85a84:	d105      	bne.n	85a92 <__swbuf_r+0x9e>
   85a86:	4630      	mov	r0, r6
   85a88:	4621      	mov	r1, r4
   85a8a:	f7fe fe73 	bl	84774 <_fflush_r>
   85a8e:	2800      	cmp	r0, #0
   85a90:	d1e6      	bne.n	85a60 <__swbuf_r+0x6c>
   85a92:	4628      	mov	r0, r5
   85a94:	bd70      	pop	{r4, r5, r6, pc}

00085a96 <__swbuf>:
   85a96:	460a      	mov	r2, r1
   85a98:	4902      	ldr	r1, [pc, #8]	; (85aa4 <__swbuf+0xe>)
   85a9a:	4603      	mov	r3, r0
   85a9c:	6808      	ldr	r0, [r1, #0]
   85a9e:	4619      	mov	r1, r3
   85aa0:	f7ff bfa8 	b.w	859f4 <__swbuf_r>
   85aa4:	20070020 	.word	0x20070020

00085aa8 <_wcrtomb_r>:
   85aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85aac:	461d      	mov	r5, r3
   85aae:	4b10      	ldr	r3, [pc, #64]	; (85af0 <_wcrtomb_r+0x48>)
   85ab0:	b086      	sub	sp, #24
   85ab2:	4604      	mov	r4, r0
   85ab4:	4690      	mov	r8, r2
   85ab6:	460e      	mov	r6, r1
   85ab8:	681f      	ldr	r7, [r3, #0]
   85aba:	b939      	cbnz	r1, 85acc <_wcrtomb_r+0x24>
   85abc:	f7ff fb00 	bl	850c0 <__locale_charset>
   85ac0:	9500      	str	r5, [sp, #0]
   85ac2:	4603      	mov	r3, r0
   85ac4:	a903      	add	r1, sp, #12
   85ac6:	4620      	mov	r0, r4
   85ac8:	4632      	mov	r2, r6
   85aca:	e006      	b.n	85ada <_wcrtomb_r+0x32>
   85acc:	f7ff faf8 	bl	850c0 <__locale_charset>
   85ad0:	9500      	str	r5, [sp, #0]
   85ad2:	4603      	mov	r3, r0
   85ad4:	4631      	mov	r1, r6
   85ad6:	4620      	mov	r0, r4
   85ad8:	4642      	mov	r2, r8
   85ada:	47b8      	blx	r7
   85adc:	1c43      	adds	r3, r0, #1
   85ade:	d103      	bne.n	85ae8 <_wcrtomb_r+0x40>
   85ae0:	2100      	movs	r1, #0
   85ae2:	228a      	movs	r2, #138	; 0x8a
   85ae4:	6029      	str	r1, [r5, #0]
   85ae6:	6022      	str	r2, [r4, #0]
   85ae8:	b006      	add	sp, #24
   85aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85aee:	bf00      	nop
   85af0:	200708dc 	.word	0x200708dc

00085af4 <wcrtomb>:
   85af4:	b530      	push	{r4, r5, lr}
   85af6:	4613      	mov	r3, r2
   85af8:	4a04      	ldr	r2, [pc, #16]	; (85b0c <wcrtomb+0x18>)
   85afa:	4605      	mov	r5, r0
   85afc:	460c      	mov	r4, r1
   85afe:	6810      	ldr	r0, [r2, #0]
   85b00:	4629      	mov	r1, r5
   85b02:	4622      	mov	r2, r4
   85b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85b08:	f7ff bfce 	b.w	85aa8 <_wcrtomb_r>
   85b0c:	20070020 	.word	0x20070020

00085b10 <__ascii_wctomb>:
   85b10:	b149      	cbz	r1, 85b26 <__ascii_wctomb+0x16>
   85b12:	2aff      	cmp	r2, #255	; 0xff
   85b14:	d904      	bls.n	85b20 <__ascii_wctomb+0x10>
   85b16:	238a      	movs	r3, #138	; 0x8a
   85b18:	6003      	str	r3, [r0, #0]
   85b1a:	f04f 30ff 	mov.w	r0, #4294967295
   85b1e:	4770      	bx	lr
   85b20:	700a      	strb	r2, [r1, #0]
   85b22:	2001      	movs	r0, #1
   85b24:	4770      	bx	lr
   85b26:	4608      	mov	r0, r1
   85b28:	4770      	bx	lr

00085b2a <_wctomb_r>:
   85b2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   85b2e:	4698      	mov	r8, r3
   85b30:	4b07      	ldr	r3, [pc, #28]	; (85b50 <_wctomb_r+0x26>)
   85b32:	4605      	mov	r5, r0
   85b34:	460f      	mov	r7, r1
   85b36:	4616      	mov	r6, r2
   85b38:	681c      	ldr	r4, [r3, #0]
   85b3a:	f7ff fac1 	bl	850c0 <__locale_charset>
   85b3e:	f8cd 8000 	str.w	r8, [sp]
   85b42:	4603      	mov	r3, r0
   85b44:	4639      	mov	r1, r7
   85b46:	4628      	mov	r0, r5
   85b48:	4632      	mov	r2, r6
   85b4a:	47a0      	blx	r4
   85b4c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   85b50:	200708dc 	.word	0x200708dc

00085b54 <_write_r>:
   85b54:	b538      	push	{r3, r4, r5, lr}
   85b56:	4c07      	ldr	r4, [pc, #28]	; (85b74 <_write_r+0x20>)
   85b58:	4605      	mov	r5, r0
   85b5a:	2000      	movs	r0, #0
   85b5c:	6020      	str	r0, [r4, #0]
   85b5e:	4608      	mov	r0, r1
   85b60:	4611      	mov	r1, r2
   85b62:	461a      	mov	r2, r3
   85b64:	f7fa fd40 	bl	805e8 <_write>
   85b68:	1c43      	adds	r3, r0, #1
   85b6a:	d102      	bne.n	85b72 <_write_r+0x1e>
   85b6c:	6823      	ldr	r3, [r4, #0]
   85b6e:	b103      	cbz	r3, 85b72 <_write_r+0x1e>
   85b70:	602b      	str	r3, [r5, #0]
   85b72:	bd38      	pop	{r3, r4, r5, pc}
   85b74:	2007ab54 	.word	0x2007ab54

00085b78 <_close_r>:
   85b78:	b538      	push	{r3, r4, r5, lr}
   85b7a:	4c06      	ldr	r4, [pc, #24]	; (85b94 <_close_r+0x1c>)
   85b7c:	2300      	movs	r3, #0
   85b7e:	4605      	mov	r5, r0
   85b80:	4608      	mov	r0, r1
   85b82:	6023      	str	r3, [r4, #0]
   85b84:	f7fb fc8a 	bl	8149c <_close>
   85b88:	1c43      	adds	r3, r0, #1
   85b8a:	d102      	bne.n	85b92 <_close_r+0x1a>
   85b8c:	6821      	ldr	r1, [r4, #0]
   85b8e:	b101      	cbz	r1, 85b92 <_close_r+0x1a>
   85b90:	6029      	str	r1, [r5, #0]
   85b92:	bd38      	pop	{r3, r4, r5, pc}
   85b94:	2007ab54 	.word	0x2007ab54

00085b98 <_fclose_r>:
   85b98:	b570      	push	{r4, r5, r6, lr}
   85b9a:	4605      	mov	r5, r0
   85b9c:	460c      	mov	r4, r1
   85b9e:	2900      	cmp	r1, #0
   85ba0:	d039      	beq.n	85c16 <_fclose_r+0x7e>
   85ba2:	f7fe ff3d 	bl	84a20 <__sfp_lock_acquire>
   85ba6:	b125      	cbz	r5, 85bb2 <_fclose_r+0x1a>
   85ba8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   85baa:	b913      	cbnz	r3, 85bb2 <_fclose_r+0x1a>
   85bac:	4628      	mov	r0, r5
   85bae:	f7fe fed3 	bl	84958 <__sinit>
   85bb2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   85bb6:	b35e      	cbz	r6, 85c10 <_fclose_r+0x78>
   85bb8:	4628      	mov	r0, r5
   85bba:	4621      	mov	r1, r4
   85bbc:	f7fe fdda 	bl	84774 <_fflush_r>
   85bc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   85bc2:	4606      	mov	r6, r0
   85bc4:	b13a      	cbz	r2, 85bd6 <_fclose_r+0x3e>
   85bc6:	4628      	mov	r0, r5
   85bc8:	69e1      	ldr	r1, [r4, #28]
   85bca:	4790      	blx	r2
   85bcc:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   85bd0:	bf28      	it	cs
   85bd2:	f04f 36ff 	movcs.w	r6, #4294967295
   85bd6:	89a0      	ldrh	r0, [r4, #12]
   85bd8:	f000 0180 	and.w	r1, r0, #128	; 0x80
   85bdc:	b20b      	sxth	r3, r1
   85bde:	b11b      	cbz	r3, 85be8 <_fclose_r+0x50>
   85be0:	4628      	mov	r0, r5
   85be2:	6921      	ldr	r1, [r4, #16]
   85be4:	f7fe fff6 	bl	84bd4 <_free_r>
   85be8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85bea:	b141      	cbz	r1, 85bfe <_fclose_r+0x66>
   85bec:	f104 0240 	add.w	r2, r4, #64	; 0x40
   85bf0:	4291      	cmp	r1, r2
   85bf2:	d002      	beq.n	85bfa <_fclose_r+0x62>
   85bf4:	4628      	mov	r0, r5
   85bf6:	f7fe ffed 	bl	84bd4 <_free_r>
   85bfa:	2000      	movs	r0, #0
   85bfc:	6320      	str	r0, [r4, #48]	; 0x30
   85bfe:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85c00:	b121      	cbz	r1, 85c0c <_fclose_r+0x74>
   85c02:	4628      	mov	r0, r5
   85c04:	f7fe ffe6 	bl	84bd4 <_free_r>
   85c08:	2100      	movs	r1, #0
   85c0a:	6461      	str	r1, [r4, #68]	; 0x44
   85c0c:	2300      	movs	r3, #0
   85c0e:	81a3      	strh	r3, [r4, #12]
   85c10:	f7fe ff07 	bl	84a22 <__sfp_lock_release>
   85c14:	e000      	b.n	85c18 <_fclose_r+0x80>
   85c16:	460e      	mov	r6, r1
   85c18:	4630      	mov	r0, r6
   85c1a:	bd70      	pop	{r4, r5, r6, pc}

00085c1c <fclose>:
   85c1c:	4b02      	ldr	r3, [pc, #8]	; (85c28 <fclose+0xc>)
   85c1e:	4601      	mov	r1, r0
   85c20:	6818      	ldr	r0, [r3, #0]
   85c22:	f7ff bfb9 	b.w	85b98 <_fclose_r>
   85c26:	bf00      	nop
   85c28:	20070020 	.word	0x20070020

00085c2c <_fstat_r>:
   85c2c:	b538      	push	{r3, r4, r5, lr}
   85c2e:	4c07      	ldr	r4, [pc, #28]	; (85c4c <_fstat_r+0x20>)
   85c30:	2300      	movs	r3, #0
   85c32:	4605      	mov	r5, r0
   85c34:	4608      	mov	r0, r1
   85c36:	4611      	mov	r1, r2
   85c38:	6023      	str	r3, [r4, #0]
   85c3a:	f7fb fc33 	bl	814a4 <_fstat>
   85c3e:	1c43      	adds	r3, r0, #1
   85c40:	d102      	bne.n	85c48 <_fstat_r+0x1c>
   85c42:	6821      	ldr	r1, [r4, #0]
   85c44:	b101      	cbz	r1, 85c48 <_fstat_r+0x1c>
   85c46:	6029      	str	r1, [r5, #0]
   85c48:	bd38      	pop	{r3, r4, r5, pc}
   85c4a:	bf00      	nop
   85c4c:	2007ab54 	.word	0x2007ab54

00085c50 <_isatty_r>:
   85c50:	b538      	push	{r3, r4, r5, lr}
   85c52:	4c06      	ldr	r4, [pc, #24]	; (85c6c <_isatty_r+0x1c>)
   85c54:	2300      	movs	r3, #0
   85c56:	4605      	mov	r5, r0
   85c58:	4608      	mov	r0, r1
   85c5a:	6023      	str	r3, [r4, #0]
   85c5c:	f7fb fc28 	bl	814b0 <_isatty>
   85c60:	1c43      	adds	r3, r0, #1
   85c62:	d102      	bne.n	85c6a <_isatty_r+0x1a>
   85c64:	6821      	ldr	r1, [r4, #0]
   85c66:	b101      	cbz	r1, 85c6a <_isatty_r+0x1a>
   85c68:	6029      	str	r1, [r5, #0]
   85c6a:	bd38      	pop	{r3, r4, r5, pc}
   85c6c:	2007ab54 	.word	0x2007ab54

00085c70 <_lseek_r>:
   85c70:	b538      	push	{r3, r4, r5, lr}
   85c72:	4c07      	ldr	r4, [pc, #28]	; (85c90 <_lseek_r+0x20>)
   85c74:	4605      	mov	r5, r0
   85c76:	2000      	movs	r0, #0
   85c78:	6020      	str	r0, [r4, #0]
   85c7a:	4608      	mov	r0, r1
   85c7c:	4611      	mov	r1, r2
   85c7e:	461a      	mov	r2, r3
   85c80:	f7fb fc1a 	bl	814b8 <_lseek>
   85c84:	1c43      	adds	r3, r0, #1
   85c86:	d102      	bne.n	85c8e <_lseek_r+0x1e>
   85c88:	6823      	ldr	r3, [r4, #0]
   85c8a:	b103      	cbz	r3, 85c8e <_lseek_r+0x1e>
   85c8c:	602b      	str	r3, [r5, #0]
   85c8e:	bd38      	pop	{r3, r4, r5, pc}
   85c90:	2007ab54 	.word	0x2007ab54

00085c94 <_read_r>:
   85c94:	b538      	push	{r3, r4, r5, lr}
   85c96:	4c07      	ldr	r4, [pc, #28]	; (85cb4 <_read_r+0x20>)
   85c98:	4605      	mov	r5, r0
   85c9a:	2000      	movs	r0, #0
   85c9c:	6020      	str	r0, [r4, #0]
   85c9e:	4608      	mov	r0, r1
   85ca0:	4611      	mov	r1, r2
   85ca2:	461a      	mov	r2, r3
   85ca4:	f7fa fc5c 	bl	80560 <_read>
   85ca8:	1c43      	adds	r3, r0, #1
   85caa:	d102      	bne.n	85cb2 <_read_r+0x1e>
   85cac:	6823      	ldr	r3, [r4, #0]
   85cae:	b103      	cbz	r3, 85cb2 <_read_r+0x1e>
   85cb0:	602b      	str	r3, [r5, #0]
   85cb2:	bd38      	pop	{r3, r4, r5, pc}
   85cb4:	2007ab54 	.word	0x2007ab54

00085cb8 <__aeabi_uldivmod>:
   85cb8:	b94b      	cbnz	r3, 85cce <__aeabi_uldivmod+0x16>
   85cba:	b942      	cbnz	r2, 85cce <__aeabi_uldivmod+0x16>
   85cbc:	2900      	cmp	r1, #0
   85cbe:	bf08      	it	eq
   85cc0:	2800      	cmpeq	r0, #0
   85cc2:	d002      	beq.n	85cca <__aeabi_uldivmod+0x12>
   85cc4:	f04f 31ff 	mov.w	r1, #4294967295
   85cc8:	4608      	mov	r0, r1
   85cca:	f000 b83b 	b.w	85d44 <__aeabi_idiv0>
   85cce:	b082      	sub	sp, #8
   85cd0:	46ec      	mov	ip, sp
   85cd2:	e92d 5000 	stmdb	sp!, {ip, lr}
   85cd6:	f000 f81d 	bl	85d14 <__gnu_uldivmod_helper>
   85cda:	f8dd e004 	ldr.w	lr, [sp, #4]
   85cde:	b002      	add	sp, #8
   85ce0:	bc0c      	pop	{r2, r3}
   85ce2:	4770      	bx	lr

00085ce4 <__gnu_ldivmod_helper>:
   85ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85ce8:	4616      	mov	r6, r2
   85cea:	4698      	mov	r8, r3
   85cec:	4604      	mov	r4, r0
   85cee:	460d      	mov	r5, r1
   85cf0:	f000 f82a 	bl	85d48 <__divdi3>
   85cf4:	fb06 fc01 	mul.w	ip, r6, r1
   85cf8:	fba6 2300 	umull	r2, r3, r6, r0
   85cfc:	fb00 c708 	mla	r7, r0, r8, ip
   85d00:	18fb      	adds	r3, r7, r3
   85d02:	1aa2      	subs	r2, r4, r2
   85d04:	eb65 0303 	sbc.w	r3, r5, r3
   85d08:	9c06      	ldr	r4, [sp, #24]
   85d0a:	e9c4 2300 	strd	r2, r3, [r4]
   85d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85d12:	bf00      	nop

00085d14 <__gnu_uldivmod_helper>:
   85d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85d18:	4690      	mov	r8, r2
   85d1a:	4606      	mov	r6, r0
   85d1c:	460f      	mov	r7, r1
   85d1e:	461d      	mov	r5, r3
   85d20:	f000 f970 	bl	86004 <__udivdi3>
   85d24:	fb00 f305 	mul.w	r3, r0, r5
   85d28:	fba0 4508 	umull	r4, r5, r0, r8
   85d2c:	fb08 3801 	mla	r8, r8, r1, r3
   85d30:	9b06      	ldr	r3, [sp, #24]
   85d32:	4445      	add	r5, r8
   85d34:	1b34      	subs	r4, r6, r4
   85d36:	eb67 0505 	sbc.w	r5, r7, r5
   85d3a:	e9c3 4500 	strd	r4, r5, [r3]
   85d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85d42:	bf00      	nop

00085d44 <__aeabi_idiv0>:
   85d44:	4770      	bx	lr
   85d46:	bf00      	nop

00085d48 <__divdi3>:
   85d48:	2900      	cmp	r1, #0
   85d4a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85d4e:	461d      	mov	r5, r3
   85d50:	f2c0 809d 	blt.w	85e8e <__divdi3+0x146>
   85d54:	2400      	movs	r4, #0
   85d56:	2d00      	cmp	r5, #0
   85d58:	f2c0 8094 	blt.w	85e84 <__divdi3+0x13c>
   85d5c:	4680      	mov	r8, r0
   85d5e:	460f      	mov	r7, r1
   85d60:	4694      	mov	ip, r2
   85d62:	461e      	mov	r6, r3
   85d64:	bbe3      	cbnz	r3, 85de0 <__divdi3+0x98>
   85d66:	428a      	cmp	r2, r1
   85d68:	d955      	bls.n	85e16 <__divdi3+0xce>
   85d6a:	fab2 f782 	clz	r7, r2
   85d6e:	b147      	cbz	r7, 85d82 <__divdi3+0x3a>
   85d70:	f1c7 0520 	rsb	r5, r7, #32
   85d74:	fa20 f605 	lsr.w	r6, r0, r5
   85d78:	fa01 f107 	lsl.w	r1, r1, r7
   85d7c:	40ba      	lsls	r2, r7
   85d7e:	40b8      	lsls	r0, r7
   85d80:	4331      	orrs	r1, r6
   85d82:	0c17      	lsrs	r7, r2, #16
   85d84:	fbb1 f6f7 	udiv	r6, r1, r7
   85d88:	fa1f fc82 	uxth.w	ip, r2
   85d8c:	fb07 1116 	mls	r1, r7, r6, r1
   85d90:	fb0c f506 	mul.w	r5, ip, r6
   85d94:	0c03      	lsrs	r3, r0, #16
   85d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   85d9a:	429d      	cmp	r5, r3
   85d9c:	d908      	bls.n	85db0 <__divdi3+0x68>
   85d9e:	1e71      	subs	r1, r6, #1
   85da0:	189b      	adds	r3, r3, r2
   85da2:	f080 8113 	bcs.w	85fcc <__divdi3+0x284>
   85da6:	429d      	cmp	r5, r3
   85da8:	f240 8110 	bls.w	85fcc <__divdi3+0x284>
   85dac:	3e02      	subs	r6, #2
   85dae:	189b      	adds	r3, r3, r2
   85db0:	1b59      	subs	r1, r3, r5
   85db2:	fbb1 f5f7 	udiv	r5, r1, r7
   85db6:	fb07 1315 	mls	r3, r7, r5, r1
   85dba:	fb0c fc05 	mul.w	ip, ip, r5
   85dbe:	b280      	uxth	r0, r0
   85dc0:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   85dc4:	458c      	cmp	ip, r1
   85dc6:	d907      	bls.n	85dd8 <__divdi3+0x90>
   85dc8:	1e6b      	subs	r3, r5, #1
   85dca:	188a      	adds	r2, r1, r2
   85dcc:	f080 8100 	bcs.w	85fd0 <__divdi3+0x288>
   85dd0:	4594      	cmp	ip, r2
   85dd2:	f240 80fd 	bls.w	85fd0 <__divdi3+0x288>
   85dd6:	3d02      	subs	r5, #2
   85dd8:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   85ddc:	2500      	movs	r5, #0
   85dde:	e003      	b.n	85de8 <__divdi3+0xa0>
   85de0:	428b      	cmp	r3, r1
   85de2:	d90c      	bls.n	85dfe <__divdi3+0xb6>
   85de4:	2500      	movs	r5, #0
   85de6:	4629      	mov	r1, r5
   85de8:	460a      	mov	r2, r1
   85dea:	462b      	mov	r3, r5
   85dec:	b114      	cbz	r4, 85df4 <__divdi3+0xac>
   85dee:	4252      	negs	r2, r2
   85df0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85df4:	4610      	mov	r0, r2
   85df6:	4619      	mov	r1, r3
   85df8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85dfc:	4770      	bx	lr
   85dfe:	fab3 f583 	clz	r5, r3
   85e02:	2d00      	cmp	r5, #0
   85e04:	f040 8087 	bne.w	85f16 <__divdi3+0x1ce>
   85e08:	428b      	cmp	r3, r1
   85e0a:	d301      	bcc.n	85e10 <__divdi3+0xc8>
   85e0c:	4282      	cmp	r2, r0
   85e0e:	d8ea      	bhi.n	85de6 <__divdi3+0x9e>
   85e10:	2500      	movs	r5, #0
   85e12:	2101      	movs	r1, #1
   85e14:	e7e8      	b.n	85de8 <__divdi3+0xa0>
   85e16:	b912      	cbnz	r2, 85e1e <__divdi3+0xd6>
   85e18:	2601      	movs	r6, #1
   85e1a:	fbb6 f2f2 	udiv	r2, r6, r2
   85e1e:	fab2 f682 	clz	r6, r2
   85e22:	2e00      	cmp	r6, #0
   85e24:	d139      	bne.n	85e9a <__divdi3+0x152>
   85e26:	1a8e      	subs	r6, r1, r2
   85e28:	0c13      	lsrs	r3, r2, #16
   85e2a:	fa1f fc82 	uxth.w	ip, r2
   85e2e:	2501      	movs	r5, #1
   85e30:	fbb6 f7f3 	udiv	r7, r6, r3
   85e34:	fb03 6117 	mls	r1, r3, r7, r6
   85e38:	fb0c f807 	mul.w	r8, ip, r7
   85e3c:	ea4f 4910 	mov.w	r9, r0, lsr #16
   85e40:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   85e44:	45b0      	cmp	r8, r6
   85e46:	d906      	bls.n	85e56 <__divdi3+0x10e>
   85e48:	1e79      	subs	r1, r7, #1
   85e4a:	18b6      	adds	r6, r6, r2
   85e4c:	d202      	bcs.n	85e54 <__divdi3+0x10c>
   85e4e:	45b0      	cmp	r8, r6
   85e50:	f200 80d3 	bhi.w	85ffa <__divdi3+0x2b2>
   85e54:	460f      	mov	r7, r1
   85e56:	ebc8 0606 	rsb	r6, r8, r6
   85e5a:	fbb6 f1f3 	udiv	r1, r6, r3
   85e5e:	fb03 6311 	mls	r3, r3, r1, r6
   85e62:	fb0c fc01 	mul.w	ip, ip, r1
   85e66:	b280      	uxth	r0, r0
   85e68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   85e6c:	459c      	cmp	ip, r3
   85e6e:	d906      	bls.n	85e7e <__divdi3+0x136>
   85e70:	1e4e      	subs	r6, r1, #1
   85e72:	189a      	adds	r2, r3, r2
   85e74:	d202      	bcs.n	85e7c <__divdi3+0x134>
   85e76:	4594      	cmp	ip, r2
   85e78:	f200 80c2 	bhi.w	86000 <__divdi3+0x2b8>
   85e7c:	4631      	mov	r1, r6
   85e7e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   85e82:	e7b1      	b.n	85de8 <__divdi3+0xa0>
   85e84:	43e4      	mvns	r4, r4
   85e86:	4252      	negs	r2, r2
   85e88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85e8c:	e766      	b.n	85d5c <__divdi3+0x14>
   85e8e:	4240      	negs	r0, r0
   85e90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85e94:	f04f 34ff 	mov.w	r4, #4294967295
   85e98:	e75d      	b.n	85d56 <__divdi3+0xe>
   85e9a:	40b2      	lsls	r2, r6
   85e9c:	f1c6 0920 	rsb	r9, r6, #32
   85ea0:	fa21 f709 	lsr.w	r7, r1, r9
   85ea4:	fa20 f909 	lsr.w	r9, r0, r9
   85ea8:	fa01 f106 	lsl.w	r1, r1, r6
   85eac:	0c13      	lsrs	r3, r2, #16
   85eae:	fbb7 f8f3 	udiv	r8, r7, r3
   85eb2:	fa1f fc82 	uxth.w	ip, r2
   85eb6:	fb03 7718 	mls	r7, r3, r8, r7
   85eba:	fb0c f508 	mul.w	r5, ip, r8
   85ebe:	ea49 0901 	orr.w	r9, r9, r1
   85ec2:	ea4f 4119 	mov.w	r1, r9, lsr #16
   85ec6:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   85eca:	40b0      	lsls	r0, r6
   85ecc:	42bd      	cmp	r5, r7
   85ece:	d90a      	bls.n	85ee6 <__divdi3+0x19e>
   85ed0:	18bf      	adds	r7, r7, r2
   85ed2:	f108 36ff 	add.w	r6, r8, #4294967295
   85ed6:	f080 808e 	bcs.w	85ff6 <__divdi3+0x2ae>
   85eda:	42bd      	cmp	r5, r7
   85edc:	f240 808b 	bls.w	85ff6 <__divdi3+0x2ae>
   85ee0:	f1a8 0802 	sub.w	r8, r8, #2
   85ee4:	18bf      	adds	r7, r7, r2
   85ee6:	1b79      	subs	r1, r7, r5
   85ee8:	fbb1 f5f3 	udiv	r5, r1, r3
   85eec:	fb03 1715 	mls	r7, r3, r5, r1
   85ef0:	fb0c f605 	mul.w	r6, ip, r5
   85ef4:	fa1f f989 	uxth.w	r9, r9
   85ef8:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   85efc:	428e      	cmp	r6, r1
   85efe:	d906      	bls.n	85f0e <__divdi3+0x1c6>
   85f00:	1e6f      	subs	r7, r5, #1
   85f02:	1889      	adds	r1, r1, r2
   85f04:	d271      	bcs.n	85fea <__divdi3+0x2a2>
   85f06:	428e      	cmp	r6, r1
   85f08:	d96f      	bls.n	85fea <__divdi3+0x2a2>
   85f0a:	3d02      	subs	r5, #2
   85f0c:	1889      	adds	r1, r1, r2
   85f0e:	1b8e      	subs	r6, r1, r6
   85f10:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   85f14:	e78c      	b.n	85e30 <__divdi3+0xe8>
   85f16:	f1c5 0120 	rsb	r1, r5, #32
   85f1a:	fa22 f301 	lsr.w	r3, r2, r1
   85f1e:	fa06 f605 	lsl.w	r6, r6, r5
   85f22:	fa27 f201 	lsr.w	r2, r7, r1
   85f26:	fa07 f705 	lsl.w	r7, r7, r5
   85f2a:	fa20 f101 	lsr.w	r1, r0, r1
   85f2e:	431e      	orrs	r6, r3
   85f30:	ea4f 4916 	mov.w	r9, r6, lsr #16
   85f34:	fbb2 f8f9 	udiv	r8, r2, r9
   85f38:	fa1f fa86 	uxth.w	sl, r6
   85f3c:	fb09 2218 	mls	r2, r9, r8, r2
   85f40:	fb0a fb08 	mul.w	fp, sl, r8
   85f44:	430f      	orrs	r7, r1
   85f46:	0c3b      	lsrs	r3, r7, #16
   85f48:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85f4c:	4593      	cmp	fp, r2
   85f4e:	fa0c fc05 	lsl.w	ip, ip, r5
   85f52:	d908      	bls.n	85f66 <__divdi3+0x21e>
   85f54:	1992      	adds	r2, r2, r6
   85f56:	f108 31ff 	add.w	r1, r8, #4294967295
   85f5a:	d24a      	bcs.n	85ff2 <__divdi3+0x2aa>
   85f5c:	4593      	cmp	fp, r2
   85f5e:	d948      	bls.n	85ff2 <__divdi3+0x2aa>
   85f60:	f1a8 0802 	sub.w	r8, r8, #2
   85f64:	1992      	adds	r2, r2, r6
   85f66:	ebcb 0302 	rsb	r3, fp, r2
   85f6a:	fbb3 f1f9 	udiv	r1, r3, r9
   85f6e:	fb09 3211 	mls	r2, r9, r1, r3
   85f72:	fb0a fa01 	mul.w	sl, sl, r1
   85f76:	b2bf      	uxth	r7, r7
   85f78:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   85f7c:	459a      	cmp	sl, r3
   85f7e:	d906      	bls.n	85f8e <__divdi3+0x246>
   85f80:	1e4a      	subs	r2, r1, #1
   85f82:	199b      	adds	r3, r3, r6
   85f84:	d233      	bcs.n	85fee <__divdi3+0x2a6>
   85f86:	459a      	cmp	sl, r3
   85f88:	d931      	bls.n	85fee <__divdi3+0x2a6>
   85f8a:	3902      	subs	r1, #2
   85f8c:	199b      	adds	r3, r3, r6
   85f8e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   85f92:	0c0f      	lsrs	r7, r1, #16
   85f94:	fa1f f88c 	uxth.w	r8, ip
   85f98:	fb08 f607 	mul.w	r6, r8, r7
   85f9c:	b28a      	uxth	r2, r1
   85f9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   85fa2:	fb08 f802 	mul.w	r8, r8, r2
   85fa6:	fb0c 6202 	mla	r2, ip, r2, r6
   85faa:	fb0c fc07 	mul.w	ip, ip, r7
   85fae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   85fb2:	4296      	cmp	r6, r2
   85fb4:	bf88      	it	hi
   85fb6:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   85fba:	ebca 0303 	rsb	r3, sl, r3
   85fbe:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   85fc2:	4563      	cmp	r3, ip
   85fc4:	d30e      	bcc.n	85fe4 <__divdi3+0x29c>
   85fc6:	d005      	beq.n	85fd4 <__divdi3+0x28c>
   85fc8:	2500      	movs	r5, #0
   85fca:	e70d      	b.n	85de8 <__divdi3+0xa0>
   85fcc:	460e      	mov	r6, r1
   85fce:	e6ef      	b.n	85db0 <__divdi3+0x68>
   85fd0:	461d      	mov	r5, r3
   85fd2:	e701      	b.n	85dd8 <__divdi3+0x90>
   85fd4:	fa00 f005 	lsl.w	r0, r0, r5
   85fd8:	fa1f f888 	uxth.w	r8, r8
   85fdc:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   85fe0:	42a8      	cmp	r0, r5
   85fe2:	d2f1      	bcs.n	85fc8 <__divdi3+0x280>
   85fe4:	3901      	subs	r1, #1
   85fe6:	2500      	movs	r5, #0
   85fe8:	e6fe      	b.n	85de8 <__divdi3+0xa0>
   85fea:	463d      	mov	r5, r7
   85fec:	e78f      	b.n	85f0e <__divdi3+0x1c6>
   85fee:	4611      	mov	r1, r2
   85ff0:	e7cd      	b.n	85f8e <__divdi3+0x246>
   85ff2:	4688      	mov	r8, r1
   85ff4:	e7b7      	b.n	85f66 <__divdi3+0x21e>
   85ff6:	46b0      	mov	r8, r6
   85ff8:	e775      	b.n	85ee6 <__divdi3+0x19e>
   85ffa:	3f02      	subs	r7, #2
   85ffc:	18b6      	adds	r6, r6, r2
   85ffe:	e72a      	b.n	85e56 <__divdi3+0x10e>
   86000:	3902      	subs	r1, #2
   86002:	e73c      	b.n	85e7e <__divdi3+0x136>

00086004 <__udivdi3>:
   86004:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   86008:	4614      	mov	r4, r2
   8600a:	4605      	mov	r5, r0
   8600c:	460e      	mov	r6, r1
   8600e:	2b00      	cmp	r3, #0
   86010:	d13d      	bne.n	8608e <__udivdi3+0x8a>
   86012:	428a      	cmp	r2, r1
   86014:	d949      	bls.n	860aa <__udivdi3+0xa6>
   86016:	fab2 f782 	clz	r7, r2
   8601a:	b147      	cbz	r7, 8602e <__udivdi3+0x2a>
   8601c:	f1c7 0120 	rsb	r1, r7, #32
   86020:	fa20 f201 	lsr.w	r2, r0, r1
   86024:	fa06 f607 	lsl.w	r6, r6, r7
   86028:	40bc      	lsls	r4, r7
   8602a:	40bd      	lsls	r5, r7
   8602c:	4316      	orrs	r6, r2
   8602e:	0c22      	lsrs	r2, r4, #16
   86030:	fbb6 f0f2 	udiv	r0, r6, r2
   86034:	b2a1      	uxth	r1, r4
   86036:	fb02 6610 	mls	r6, r2, r0, r6
   8603a:	fb01 f300 	mul.w	r3, r1, r0
   8603e:	0c2f      	lsrs	r7, r5, #16
   86040:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   86044:	42b3      	cmp	r3, r6
   86046:	d908      	bls.n	8605a <__udivdi3+0x56>
   86048:	1e47      	subs	r7, r0, #1
   8604a:	1936      	adds	r6, r6, r4
   8604c:	f080 80fa 	bcs.w	86244 <__udivdi3+0x240>
   86050:	42b3      	cmp	r3, r6
   86052:	f240 80f7 	bls.w	86244 <__udivdi3+0x240>
   86056:	3802      	subs	r0, #2
   86058:	1936      	adds	r6, r6, r4
   8605a:	1af6      	subs	r6, r6, r3
   8605c:	fbb6 f3f2 	udiv	r3, r6, r2
   86060:	fb02 6213 	mls	r2, r2, r3, r6
   86064:	fb01 f103 	mul.w	r1, r1, r3
   86068:	b2ad      	uxth	r5, r5
   8606a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8606e:	4291      	cmp	r1, r2
   86070:	d907      	bls.n	86082 <__udivdi3+0x7e>
   86072:	1e5e      	subs	r6, r3, #1
   86074:	1912      	adds	r2, r2, r4
   86076:	f080 80e7 	bcs.w	86248 <__udivdi3+0x244>
   8607a:	4291      	cmp	r1, r2
   8607c:	f240 80e4 	bls.w	86248 <__udivdi3+0x244>
   86080:	3b02      	subs	r3, #2
   86082:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86086:	2100      	movs	r1, #0
   86088:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8608c:	4770      	bx	lr
   8608e:	428b      	cmp	r3, r1
   86090:	d843      	bhi.n	8611a <__udivdi3+0x116>
   86092:	fab3 f483 	clz	r4, r3
   86096:	2c00      	cmp	r4, #0
   86098:	d142      	bne.n	86120 <__udivdi3+0x11c>
   8609a:	428b      	cmp	r3, r1
   8609c:	d302      	bcc.n	860a4 <__udivdi3+0xa0>
   8609e:	4282      	cmp	r2, r0
   860a0:	f200 80e1 	bhi.w	86266 <__udivdi3+0x262>
   860a4:	2100      	movs	r1, #0
   860a6:	2001      	movs	r0, #1
   860a8:	e7ee      	b.n	86088 <__udivdi3+0x84>
   860aa:	b912      	cbnz	r2, 860b2 <__udivdi3+0xae>
   860ac:	2701      	movs	r7, #1
   860ae:	fbb7 f4f2 	udiv	r4, r7, r2
   860b2:	fab4 f284 	clz	r2, r4
   860b6:	2a00      	cmp	r2, #0
   860b8:	f040 8089 	bne.w	861ce <__udivdi3+0x1ca>
   860bc:	1b0a      	subs	r2, r1, r4
   860be:	0c23      	lsrs	r3, r4, #16
   860c0:	b2a7      	uxth	r7, r4
   860c2:	2101      	movs	r1, #1
   860c4:	fbb2 f6f3 	udiv	r6, r2, r3
   860c8:	fb03 2216 	mls	r2, r3, r6, r2
   860cc:	fb07 f006 	mul.w	r0, r7, r6
   860d0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   860d4:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   860d8:	4290      	cmp	r0, r2
   860da:	d907      	bls.n	860ec <__udivdi3+0xe8>
   860dc:	1912      	adds	r2, r2, r4
   860de:	f106 3cff 	add.w	ip, r6, #4294967295
   860e2:	d202      	bcs.n	860ea <__udivdi3+0xe6>
   860e4:	4290      	cmp	r0, r2
   860e6:	f200 80d0 	bhi.w	8628a <__udivdi3+0x286>
   860ea:	4666      	mov	r6, ip
   860ec:	1a12      	subs	r2, r2, r0
   860ee:	fbb2 f0f3 	udiv	r0, r2, r3
   860f2:	fb03 2310 	mls	r3, r3, r0, r2
   860f6:	fb07 f700 	mul.w	r7, r7, r0
   860fa:	b2ad      	uxth	r5, r5
   860fc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   86100:	429f      	cmp	r7, r3
   86102:	d907      	bls.n	86114 <__udivdi3+0x110>
   86104:	1e42      	subs	r2, r0, #1
   86106:	191b      	adds	r3, r3, r4
   86108:	f080 80a0 	bcs.w	8624c <__udivdi3+0x248>
   8610c:	429f      	cmp	r7, r3
   8610e:	f240 809d 	bls.w	8624c <__udivdi3+0x248>
   86112:	3802      	subs	r0, #2
   86114:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   86118:	e7b6      	b.n	86088 <__udivdi3+0x84>
   8611a:	2100      	movs	r1, #0
   8611c:	4608      	mov	r0, r1
   8611e:	e7b3      	b.n	86088 <__udivdi3+0x84>
   86120:	f1c4 0620 	rsb	r6, r4, #32
   86124:	fa22 f706 	lsr.w	r7, r2, r6
   86128:	fa03 f304 	lsl.w	r3, r3, r4
   8612c:	fa21 f506 	lsr.w	r5, r1, r6
   86130:	fa01 f104 	lsl.w	r1, r1, r4
   86134:	fa20 f606 	lsr.w	r6, r0, r6
   86138:	433b      	orrs	r3, r7
   8613a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8613e:	fbb5 f7fc 	udiv	r7, r5, ip
   86142:	fa1f f883 	uxth.w	r8, r3
   86146:	fb0c 5517 	mls	r5, ip, r7, r5
   8614a:	fb08 f907 	mul.w	r9, r8, r7
   8614e:	ea46 0a01 	orr.w	sl, r6, r1
   86152:	ea4f 411a 	mov.w	r1, sl, lsr #16
   86156:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8615a:	45a9      	cmp	r9, r5
   8615c:	fa02 f204 	lsl.w	r2, r2, r4
   86160:	d904      	bls.n	8616c <__udivdi3+0x168>
   86162:	1e7e      	subs	r6, r7, #1
   86164:	18ed      	adds	r5, r5, r3
   86166:	f0c0 8081 	bcc.w	8626c <__udivdi3+0x268>
   8616a:	4637      	mov	r7, r6
   8616c:	ebc9 0105 	rsb	r1, r9, r5
   86170:	fbb1 f6fc 	udiv	r6, r1, ip
   86174:	fb0c 1516 	mls	r5, ip, r6, r1
   86178:	fb08 f806 	mul.w	r8, r8, r6
   8617c:	fa1f fa8a 	uxth.w	sl, sl
   86180:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   86184:	4588      	cmp	r8, r1
   86186:	d903      	bls.n	86190 <__udivdi3+0x18c>
   86188:	1e75      	subs	r5, r6, #1
   8618a:	18c9      	adds	r1, r1, r3
   8618c:	d374      	bcc.n	86278 <__udivdi3+0x274>
   8618e:	462e      	mov	r6, r5
   86190:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   86194:	0c37      	lsrs	r7, r6, #16
   86196:	fa1f fc82 	uxth.w	ip, r2
   8619a:	fb0c f507 	mul.w	r5, ip, r7
   8619e:	0c12      	lsrs	r2, r2, #16
   861a0:	b2b3      	uxth	r3, r6
   861a2:	fb0c fc03 	mul.w	ip, ip, r3
   861a6:	fb02 5303 	mla	r3, r2, r3, r5
   861aa:	fb02 f207 	mul.w	r2, r2, r7
   861ae:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   861b2:	429d      	cmp	r5, r3
   861b4:	bf88      	it	hi
   861b6:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   861ba:	ebc8 0101 	rsb	r1, r8, r1
   861be:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   861c2:	4291      	cmp	r1, r2
   861c4:	d34c      	bcc.n	86260 <__udivdi3+0x25c>
   861c6:	d043      	beq.n	86250 <__udivdi3+0x24c>
   861c8:	4630      	mov	r0, r6
   861ca:	2100      	movs	r1, #0
   861cc:	e75c      	b.n	86088 <__udivdi3+0x84>
   861ce:	4094      	lsls	r4, r2
   861d0:	f1c2 0520 	rsb	r5, r2, #32
   861d4:	fa21 f605 	lsr.w	r6, r1, r5
   861d8:	fa20 f505 	lsr.w	r5, r0, r5
   861dc:	fa01 f102 	lsl.w	r1, r1, r2
   861e0:	0c23      	lsrs	r3, r4, #16
   861e2:	fbb6 fcf3 	udiv	ip, r6, r3
   861e6:	b2a7      	uxth	r7, r4
   861e8:	fb03 661c 	mls	r6, r3, ip, r6
   861ec:	fb07 f80c 	mul.w	r8, r7, ip
   861f0:	4329      	orrs	r1, r5
   861f2:	0c0d      	lsrs	r5, r1, #16
   861f4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   861f8:	45b0      	cmp	r8, r6
   861fa:	fa00 f502 	lsl.w	r5, r0, r2
   861fe:	d908      	bls.n	86212 <__udivdi3+0x20e>
   86200:	1936      	adds	r6, r6, r4
   86202:	f10c 30ff 	add.w	r0, ip, #4294967295
   86206:	d23e      	bcs.n	86286 <__udivdi3+0x282>
   86208:	45b0      	cmp	r8, r6
   8620a:	d93c      	bls.n	86286 <__udivdi3+0x282>
   8620c:	f1ac 0c02 	sub.w	ip, ip, #2
   86210:	1936      	adds	r6, r6, r4
   86212:	ebc8 0206 	rsb	r2, r8, r6
   86216:	fbb2 f0f3 	udiv	r0, r2, r3
   8621a:	fb03 2610 	mls	r6, r3, r0, r2
   8621e:	fb07 f800 	mul.w	r8, r7, r0
   86222:	b289      	uxth	r1, r1
   86224:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   86228:	4590      	cmp	r8, r2
   8622a:	d906      	bls.n	8623a <__udivdi3+0x236>
   8622c:	1e46      	subs	r6, r0, #1
   8622e:	1912      	adds	r2, r2, r4
   86230:	d227      	bcs.n	86282 <__udivdi3+0x27e>
   86232:	4590      	cmp	r8, r2
   86234:	d925      	bls.n	86282 <__udivdi3+0x27e>
   86236:	3802      	subs	r0, #2
   86238:	1912      	adds	r2, r2, r4
   8623a:	ebc8 0202 	rsb	r2, r8, r2
   8623e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   86242:	e73f      	b.n	860c4 <__udivdi3+0xc0>
   86244:	4638      	mov	r0, r7
   86246:	e708      	b.n	8605a <__udivdi3+0x56>
   86248:	4633      	mov	r3, r6
   8624a:	e71a      	b.n	86082 <__udivdi3+0x7e>
   8624c:	4610      	mov	r0, r2
   8624e:	e761      	b.n	86114 <__udivdi3+0x110>
   86250:	fa00 f004 	lsl.w	r0, r0, r4
   86254:	fa1f fc8c 	uxth.w	ip, ip
   86258:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8625c:	4298      	cmp	r0, r3
   8625e:	d2b3      	bcs.n	861c8 <__udivdi3+0x1c4>
   86260:	1e70      	subs	r0, r6, #1
   86262:	2100      	movs	r1, #0
   86264:	e710      	b.n	86088 <__udivdi3+0x84>
   86266:	4621      	mov	r1, r4
   86268:	4620      	mov	r0, r4
   8626a:	e70d      	b.n	86088 <__udivdi3+0x84>
   8626c:	45a9      	cmp	r9, r5
   8626e:	f67f af7c 	bls.w	8616a <__udivdi3+0x166>
   86272:	3f02      	subs	r7, #2
   86274:	18ed      	adds	r5, r5, r3
   86276:	e779      	b.n	8616c <__udivdi3+0x168>
   86278:	4588      	cmp	r8, r1
   8627a:	d988      	bls.n	8618e <__udivdi3+0x18a>
   8627c:	3e02      	subs	r6, #2
   8627e:	18c9      	adds	r1, r1, r3
   86280:	e786      	b.n	86190 <__udivdi3+0x18c>
   86282:	4630      	mov	r0, r6
   86284:	e7d9      	b.n	8623a <__udivdi3+0x236>
   86286:	4684      	mov	ip, r0
   86288:	e7c3      	b.n	86212 <__udivdi3+0x20e>
   8628a:	3e02      	subs	r6, #2
   8628c:	1912      	adds	r2, r2, r4
   8628e:	e72d      	b.n	860ec <__udivdi3+0xe8>
   86290:	25203a43 	.word	0x25203a43
   86294:	45202c64 	.word	0x45202c64
   86298:	6425203a 	.word	0x6425203a
   8629c:	3a50202c 	.word	0x3a50202c
   862a0:	0a642520 	.word	0x0a642520
   862a4:	00000000 	.word	0x00000000
   862a8:	736e6573 	.word	0x736e6573
   862ac:	203a726f 	.word	0x203a726f
   862b0:	000a6425 	.word	0x000a6425
   862b4:	00000001 	.word	0x00000001
   862b8:	00000002 	.word	0x00000002
   862bc:	00000004 	.word	0x00000004
   862c0:	00000008 	.word	0x00000008
   862c4:	00000010 	.word	0x00000010
   862c8:	00000020 	.word	0x00000020
   862cc:	00000040 	.word	0x00000040
   862d0:	00000080 	.word	0x00000080
   862d4:	00000100 	.word	0x00000100
   862d8:	00000200 	.word	0x00000200
   862dc:	00000400 	.word	0x00000400
   862e0:	09097325 	.word	0x09097325
   862e4:	25096325 	.word	0x25096325
   862e8:	75250975 	.word	0x75250975
   862ec:	0d752509 	.word	0x0d752509
   862f0:	0000000a 	.word	0x0000000a
   862f4:	454c4449 	.word	0x454c4449
   862f8:	00000000 	.word	0x00000000
   862fc:	00000a0d 	.word	0x00000a0d
   86300:	20726d54 	.word	0x20726d54
   86304:	00637653 	.word	0x00637653
   86308:	20444950 	.word	0x20444950
   8630c:	746e6f43 	.word	0x746e6f43
   86310:	006c6f72 	.word	0x006c6f72
   86314:	6c696146 	.word	0x6c696146
   86318:	74206465 	.word	0x74206465
   8631c:	7263206f 	.word	0x7263206f
   86320:	65746165 	.word	0x65746165
   86324:	44495020 	.word	0x44495020
   86328:	6e6f4320 	.word	0x6e6f4320
   8632c:	6c6f7274 	.word	0x6c6f7274
   86330:	73617420 	.word	0x73617420
   86334:	000a0d6b 	.word	0x000a0d6b

00086338 <_global_impure_ptr>:
   86338:	20070028 20200043                                (.. C.

0008633e <blanks.6678>:
   8633e:	20202020 20202020 20202020 20202020                     

0008634e <zeroes.6679>:
   8634e:	30303030 30303030 30303030 30303030     0000000000000000
   8635e:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8636e:	32313000 36353433 61393837 65646362     .0123456789abcde
   8637e:	4f500066 00584953 b5f8002e                       f.POSIX...

00086388 <_init>:
   86388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8638a:	bf00      	nop
   8638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8638e:	bc08      	pop	{r3}
   86390:	469e      	mov	lr, r3
   86392:	4770      	bx	lr

00086394 <__init_array_start>:
   86394:	00084761 	.word	0x00084761

00086398 <__frame_dummy_init_array_entry>:
   86398:	0008016d                                m...

0008639c <_fini>:
   8639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8639e:	bf00      	nop
   863a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   863a2:	bc08      	pop	{r3}
   863a4:	469e      	mov	lr, r3
   863a6:	4770      	bx	lr

000863a8 <__fini_array_start>:
   863a8:	00080145 	.word	0x00080145
