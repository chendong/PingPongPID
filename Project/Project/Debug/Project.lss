
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aaac  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008aaac  0008aaac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000900  20070000  0008aab4  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000a37c  20070900  0008b3b8  00018900  2**3
                  ALLOC
  4 .stack        00002004  2007ac7c  00095734  00018900  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018900  2**0
                  CONTENTS, READONLY
  6 .comment      00000070  00000000  00000000  00018929  2**0
                  CONTENTS, READONLY
  7 .debug_info   00040c9e  00000000  00000000  00018999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000be31  00000000  00000000  00059637  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017039  00000000  00000000  00065468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001af0  00000000  00000000  0007c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014c8  00000000  00000000  0007df98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bb2a  00000000  00000000  0007f460  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000233df  00000000  00000000  0009af8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00069a51  00000000  00000000  000be369  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003910  00000000  00000000  00127dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cc80 	.word	0x2007cc80
   80004:	00081499 	.word	0x00081499
   80008:	00081495 	.word	0x00081495
   8000c:	00081495 	.word	0x00081495
   80010:	00081495 	.word	0x00081495
   80014:	00081495 	.word	0x00081495
   80018:	00081495 	.word	0x00081495
	...
   8002c:	00081965 	.word	0x00081965
   80030:	00081495 	.word	0x00081495
   80034:	00000000 	.word	0x00000000
   80038:	000819f5 	.word	0x000819f5
   8003c:	00081a31 	.word	0x00081a31
   80040:	00081495 	.word	0x00081495
   80044:	00081495 	.word	0x00081495
   80048:	00081495 	.word	0x00081495
   8004c:	00081495 	.word	0x00081495
   80050:	00081495 	.word	0x00081495
   80054:	00081495 	.word	0x00081495
   80058:	00081495 	.word	0x00081495
   8005c:	00081495 	.word	0x00081495
   80060:	00081495 	.word	0x00081495
   80064:	00081495 	.word	0x00081495
   80068:	00000000 	.word	0x00000000
   8006c:	00080ea5 	.word	0x00080ea5
   80070:	00080ec1 	.word	0x00080ec1
   80074:	00080edd 	.word	0x00080edd
   80078:	00080ef9 	.word	0x00080ef9
	...
   80084:	00081495 	.word	0x00081495
   80088:	00081495 	.word	0x00081495
   8008c:	00081495 	.word	0x00081495
   80090:	00081495 	.word	0x00081495
   80094:	00081495 	.word	0x00081495
   80098:	00081495 	.word	0x00081495
   8009c:	00081495 	.word	0x00081495
   800a0:	00081495 	.word	0x00081495
   800a4:	00000000 	.word	0x00000000
   800a8:	00081495 	.word	0x00081495
   800ac:	00081495 	.word	0x00081495
   800b0:	00081495 	.word	0x00081495
   800b4:	00081495 	.word	0x00081495
   800b8:	00081495 	.word	0x00081495
   800bc:	00081495 	.word	0x00081495
   800c0:	00081495 	.word	0x00081495
   800c4:	00081495 	.word	0x00081495
   800c8:	00081495 	.word	0x00081495
   800cc:	00081495 	.word	0x00081495
   800d0:	00081495 	.word	0x00081495
   800d4:	00081495 	.word	0x00081495
   800d8:	00081495 	.word	0x00081495
   800dc:	00081495 	.word	0x00081495
   800e0:	00081495 	.word	0x00081495
   800e4:	00081495 	.word	0x00081495
   800e8:	00081495 	.word	0x00081495
   800ec:	00081495 	.word	0x00081495
   800f0:	00081495 	.word	0x00081495

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008aab4 	.word	0x0008aab4
   80110:	0008aab7 	.word	0x0008aab7
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008aab4 	.word	0x0008aab4
   8013c:	0008aab4 	.word	0x0008aab4
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070900 	.word	0x20070900
   80164:	00000000 	.word	0x00000000
   80168:	0008aab4 	.word	0x0008aab4

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008aab4 	.word	0x0008aab4
   80198:	20070904 	.word	0x20070904
   8019c:	0008aab4 	.word	0x0008aab4
   801a0:	00000000 	.word	0x00000000

000801a4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   801a4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   801a6:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   801aa:	f2c0 5001 	movt	r0, #1281	; 0x501
   801ae:	f241 7399 	movw	r3, #6041	; 0x1799
   801b2:	f2c0 0308 	movt	r3, #8
   801b6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801b8:	f04f 0000 	mov.w	r0, #0
   801bc:	f04f 013e 	mov.w	r1, #62	; 0x3e
   801c0:	f640 72b5 	movw	r2, #4021	; 0xfb5
   801c4:	f2c0 0208 	movt	r2, #8
   801c8:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   801ca:	f241 0425 	movw	r4, #4133	; 0x1025
   801ce:	f2c0 0408 	movt	r4, #8
   801d2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   801d4:	2800      	cmp	r0, #0
   801d6:	d0fc      	beq.n	801d2 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   801d8:	f241 0035 	movw	r0, #4149	; 0x1035
   801dc:	f2c0 0008 	movt	r0, #8
   801e0:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   801e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   801e6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   801ea:	f643 7301 	movw	r3, #16129	; 0x3f01
   801ee:	f2c2 030d 	movt	r3, #8205	; 0x200d
   801f2:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   801f4:	f241 0445 	movw	r4, #4165	; 0x1045
   801f8:	f2c0 0408 	movt	r4, #8
   801fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   801fe:	2800      	cmp	r0, #0
   80200:	d0fc      	beq.n	801fc <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80202:	f04f 0010 	mov.w	r0, #16
   80206:	f640 7215 	movw	r2, #3861	; 0xf15
   8020a:	f2c0 0208 	movt	r2, #8
   8020e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80210:	f241 50d1 	movw	r0, #5585	; 0x15d1
   80214:	f2c0 0008 	movt	r0, #8
   80218:	4780      	blx	r0
   8021a:	bd10      	pop	{r4, pc}

0008021c <delay_init>:
#include "asf.h"
#include "DelayFunctions.h"


int delay_init(void)
{
   8021c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   8021e:	f04f 001b 	mov.w	r0, #27
   80222:	f241 0355 	movw	r3, #4181	; 0x1055
   80226:	f2c0 0308 	movt	r3, #8
   8022a:	4798      	blx	r3
	tc_init(TC0,0,0);
   8022c:	f04f 0400 	mov.w	r4, #0
   80230:	f2c4 0408 	movt	r4, #16392	; 0x4008
   80234:	4620      	mov	r0, r4
   80236:	f04f 0100 	mov.w	r1, #0
   8023a:	460a      	mov	r2, r1
   8023c:	f241 33b1 	movw	r3, #5041	; 0x13b1
   80240:	f2c0 0308 	movt	r3, #8
   80244:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80246:	4620      	mov	r0, r4
   80248:	f04f 0100 	mov.w	r1, #0
   8024c:	f241 32cd 	movw	r2, #5069	; 0x13cd
   80250:	f2c0 0208 	movt	r2, #8
   80254:	4790      	blx	r2
	tc_stop(TC0,0);
   80256:	4620      	mov	r0, r4
   80258:	f04f 0100 	mov.w	r1, #0
   8025c:	f241 33d5 	movw	r3, #5077	; 0x13d5
   80260:	f2c0 0308 	movt	r3, #8
   80264:	4798      	blx	r3
	return 0;
}
   80266:	f04f 0000 	mov.w	r0, #0
   8026a:	bd10      	pop	{r4, pc}

0008026c <uart_setup>:

/* UART Status Register (pointer) */
reg_address_t *const p_UART_SR = (reg_address_t *) 0x400E0814U;

void uart_setup(void)
{
   8026c:	b530      	push	{r4, r5, lr}
   8026e:	b085      	sub	sp, #20
	pio_configure(PINS_UART_PIO, PINS_UART_TYPE, PINS_UART_MASK, PIO_DEFAULT);
   80270:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   80274:	f2c4 040e 	movt	r4, #16398	; 0x400e
   80278:	4620      	mov	r0, r4
   8027a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8027e:	f44f 7240 	mov.w	r2, #768	; 0x300
   80282:	f04f 0300 	mov.w	r3, #0
   80286:	f640 35e5 	movw	r5, #3045	; 0xbe5
   8028a:	f2c0 0508 	movt	r5, #8
   8028e:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_UART);
   80290:	f04f 0008 	mov.w	r0, #8
   80294:	f241 0355 	movw	r3, #4181	; 0x1055
   80298:	f2c0 0308 	movt	r3, #8
   8029c:	4798      	blx	r3
	const sam_uart_opt_t uart0_settings = {sysclk_get_cpu_hz(), CONF_UART_BAUDRATE, UART_MR_PAR_NO};
   8029e:	f04f 0000 	mov.w	r0, #0
   802a2:	9003      	str	r0, [sp, #12]
   802a4:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   802a8:	f2c0 5101 	movt	r1, #1281	; 0x501
   802ac:	9100      	str	r1, [sp, #0]
   802ae:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   802b2:	9201      	str	r2, [sp, #4]
   802b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802b8:	9302      	str	r3, [sp, #8]
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   802ba:	f44f 7080 	mov.w	r0, #256	; 0x100
   802be:	6660      	str	r0, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   802c0:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   802c2:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   802c4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   802c8:	6f21      	ldr	r1, [r4, #112]	; 0x70
   802ca:	f421 7280 	bic.w	r2, r1, #256	; 0x100
   802ce:	6722      	str	r2, [r4, #112]	; 0x70
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
	uart_init(UART, &uart0_settings);
   802d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
   802d4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   802d8:	4669      	mov	r1, sp
   802da:	f241 33e1 	movw	r3, #5089	; 0x13e1
   802de:	f2c0 0308 	movt	r3, #8
   802e2:	4798      	blx	r3
}
   802e4:	b005      	add	sp, #20
   802e6:	bd30      	pop	{r4, r5, pc}

000802e8 <uart_receiver_ready>:
 * Return 1 if "Receiver Ready" flag is set, otherwise 0
 */
/* If receiver is ready, return 1. Returns 1 if "fwrite(s, uint8(1))" is executed in MATLAB */
int uart_receiver_ready(void)
{
	return (UART_SR & UART_SR_RXRDY);
   802e8:	f640 0314 	movw	r3, #2068	; 0x814
   802ec:	f2c4 030e 	movt	r3, #16398	; 0x400e
   802f0:	6818      	ldr	r0, [r3, #0]
}
   802f2:	f000 0001 	and.w	r0, r0, #1
   802f6:	4770      	bx	lr

000802f8 <read_double>:

/* Read a string and converts to double */
double read_double(void)
{
   802f8:	b500      	push	{lr}
   802fa:	b085      	sub	sp, #20
	double result;
	char str[10] = {0};
   802fc:	f04f 0300 	mov.w	r3, #0
   80300:	9301      	str	r3, [sp, #4]
   80302:	9302      	str	r3, [sp, #8]
   80304:	f8ad 300c 	strh.w	r3, [sp, #12]
	scanf("%s", str);
   80308:	f24a 60c8 	movw	r0, #42696	; 0xa6c8
   8030c:	f2c0 0008 	movt	r0, #8
   80310:	a901      	add	r1, sp, #4
   80312:	f643 72b5 	movw	r2, #16309	; 0x3fb5
   80316:	f2c0 0208 	movt	r2, #8
   8031a:	4790      	blx	r2
	result = atof(str);
   8031c:	a801      	add	r0, sp, #4
   8031e:	f643 61d1 	movw	r1, #16081	; 0x3ed1
   80322:	f2c0 0108 	movt	r1, #8
   80326:	4788      	blx	r1
	
	return result;
}
   80328:	b005      	add	sp, #20
   8032a:	bd00      	pop	{pc}

0008032c <read_int>:

/* Read a string and converts to int */
uint8_t read_int(void)
{
   8032c:	b500      	push	{lr}
   8032e:	b085      	sub	sp, #20
	uint8_t result;
	char str[10] = {0};
   80330:	f04f 0300 	mov.w	r3, #0
   80334:	9301      	str	r3, [sp, #4]
   80336:	9302      	str	r3, [sp, #8]
   80338:	f8ad 300c 	strh.w	r3, [sp, #12]
	scanf("%s", str);
   8033c:	f24a 60c8 	movw	r0, #42696	; 0xa6c8
   80340:	f2c0 0008 	movt	r0, #8
   80344:	a901      	add	r1, sp, #4
   80346:	f643 72b5 	movw	r2, #16309	; 0x3fb5
   8034a:	f2c0 0208 	movt	r2, #8
   8034e:	4790      	blx	r2
	result = atof(str);
   80350:	a801      	add	r0, sp, #4
   80352:	f643 61d1 	movw	r1, #16081	; 0x3ed1
   80356:	f2c0 0108 	movt	r1, #8
   8035a:	4788      	blx	r1
   8035c:	f643 6385 	movw	r3, #16005	; 0x3e85
   80360:	f2c0 0308 	movt	r3, #8
   80364:	4798      	blx	r3
	
	return result;
}
   80366:	b2c0      	uxtb	r0, r0
   80368:	b005      	add	sp, #20
   8036a:	bd00      	pop	{pc}

0008036c <read_uart>:

/* Get and return a binary value. Used with "fwrite(s, uint8(1))" from MATLAB */
uint8_t read_uart(void)
{
   8036c:	b500      	push	{lr}
   8036e:	b083      	sub	sp, #12
	uint8_t result;
	uart_read(CONF_UART, &result);
   80370:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80374:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80378:	f10d 0107 	add.w	r1, sp, #7
   8037c:	f241 433d 	movw	r3, #5181	; 0x143d
   80380:	f2c0 0308 	movt	r3, #8
   80384:	4798      	blx	r3
	
	return result;
   80386:	f89d 0007 	ldrb.w	r0, [sp, #7]
   8038a:	b003      	add	sp, #12
   8038c:	bd00      	pop	{pc}
   8038e:	bf00      	nop

00080390 <plot_values>:
/* Task 2 (low priority)
* Used to set the values for parameters setpoint, Kp, Ti, Td and dT from MATLAB.
* If the values are set this task starts sending values to MATLAB for plotting
*/
void plot_values(void *p)
{
   80390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80394:	b084      	sub	sp, #16
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = 100;	//ms
	xLastWakeTime = xTaskGetTickCount();
   80396:	f242 63ad 	movw	r3, #9901	; 0x26ad
   8039a:	f2c0 0308 	movt	r3, #8
   8039e:	4798      	blx	r3
   803a0:	9003      	str	r0, [sp, #12]
	uart_setup();
   803a2:	f240 206d 	movw	r0, #621	; 0x26d
   803a6:	f2c0 0008 	movt	r0, #8
   803aa:	4780      	blx	r0

	while(1)
	{
		if(uart_receiver_ready())
   803ac:	f240 24e9 	movw	r4, #745	; 0x2e9
   803b0:	f2c0 0408 	movt	r4, #8
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   803b4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   803b8:	f2c4 050e 	movt	r5, #16398	; 0x400e
		{
			/* Creates an empty string with 10 characters */
			char matlabStr[10];
			
			/* Converts the value from PID, error and current_value from int to string and assigns it to matlabStr */
			sprintf(matlabStr, "%d", PID);
   803bc:	f24a 67cc 	movw	r7, #42700	; 0xa6cc
   803c0:	f2c0 0708 	movt	r7, #8
   803c4:	f64a 3862 	movw	r8, #43874	; 0xab62
   803c8:	f2c2 0807 	movt	r8, #8199	; 0x2007
	xLastWakeTime = xTaskGetTickCount();
	uart_setup();

	while(1)
	{
		if(uart_receiver_ready())
   803cc:	47a0      	blx	r4
   803ce:	2800      	cmp	r0, #0
   803d0:	d03b      	beq.n	8044a <plot_values+0xba>
		{
			if(read_uart() == 1)
   803d2:	f240 306d 	movw	r0, #877	; 0x36d
   803d6:	f2c0 0008 	movt	r0, #8
   803da:	4780      	blx	r0
   803dc:	2801      	cmp	r0, #1
   803de:	d163      	bne.n	804a8 <plot_values+0x118>
   803e0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			{
				/* Set parameters if flag ('L' lamp) is 0 */
				if(ioport_get_pin_level(PIO_PB27_IDX)==0)
   803e2:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   803e6:	d15f      	bne.n	804a8 <plot_values+0x118>
				{ 
					setpoint = read_int();
   803e8:	f240 362d 	movw	r6, #813	; 0x32d
   803ec:	f2c0 0608 	movt	r6, #8
   803f0:	47b0      	blx	r6
   803f2:	f64a 3240 	movw	r2, #43840	; 0xab40
   803f6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   803fa:	8010      	strh	r0, [r2, #0]
					Kp = read_double();
   803fc:	f240 26f9 	movw	r6, #761	; 0x2f9
   80400:	f2c0 0608 	movt	r6, #8
   80404:	47b0      	blx	r6
   80406:	f64a 3350 	movw	r3, #43856	; 0xab50
   8040a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8040e:	e9c3 0100 	strd	r0, r1, [r3]
					Ti = read_double();
   80412:	47b0      	blx	r6
   80414:	f64a 3248 	movw	r2, #43848	; 0xab48
   80418:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8041c:	e9c2 0100 	strd	r0, r1, [r2]
					Td = read_double();
   80420:	47b0      	blx	r6
   80422:	f64a 3358 	movw	r3, #43864	; 0xab58
   80426:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8042a:	e9c3 0100 	strd	r0, r1, [r3]
					dT = read_double();
   8042e:	47b0      	blx	r6
   80430:	f64a 3638 	movw	r6, #43832	; 0xab38
   80434:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80438:	e9c6 0100 	strd	r0, r1, [r6]
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8043c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   80440:	6128      	str	r0, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80442:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80446:	6328      	str	r0, [r5, #48]	; 0x30
   80448:	e02e      	b.n	804a8 <plot_values+0x118>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8044a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				}
			}
		}
		
		/* Plot values in realtime */
		else if(ioport_get_pin_level(PIO_PB27_IDX)==1)
   8044c:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   80450:	d02a      	beq.n	804a8 <plot_values+0x118>
		{
			/* Creates an empty string with 10 characters */
			char matlabStr[10];
			
			/* Converts the value from PID, error and current_value from int to string and assigns it to matlabStr */
			sprintf(matlabStr, "%d", PID);
   80452:	4668      	mov	r0, sp
   80454:	4639      	mov	r1, r7
   80456:	f9b8 2000 	ldrsh.w	r2, [r8]
   8045a:	f244 1a31 	movw	sl, #16689	; 0x4131
   8045e:	f2c0 0a08 	movt	sl, #8
   80462:	47d0      	blx	sl
			printf("%s\n",matlabStr);
   80464:	f24a 69d0 	movw	r9, #42704	; 0xa6d0
   80468:	f2c0 0908 	movt	r9, #8
   8046c:	4648      	mov	r0, r9
   8046e:	4669      	mov	r1, sp
   80470:	f643 7651 	movw	r6, #16209	; 0x3f51
   80474:	f2c0 0608 	movt	r6, #8
   80478:	47b0      	blx	r6
			sprintf(matlabStr, "%d", error);
   8047a:	4668      	mov	r0, sp
   8047c:	4639      	mov	r1, r7
   8047e:	f64a 3268 	movw	r2, #43880	; 0xab68
   80482:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80486:	f9b2 2000 	ldrsh.w	r2, [r2]
   8048a:	47d0      	blx	sl
			printf("%s\n",matlabStr);
   8048c:	4648      	mov	r0, r9
   8048e:	4669      	mov	r1, sp
   80490:	47b0      	blx	r6
			sprintf(matlabStr, "%d", current_value);
   80492:	4668      	mov	r0, sp
   80494:	4639      	mov	r1, r7
   80496:	f64a 3360 	movw	r3, #43872	; 0xab60
   8049a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8049e:	881a      	ldrh	r2, [r3, #0]
   804a0:	47d0      	blx	sl
			printf("%s\n",matlabStr);
   804a2:	4648      	mov	r0, r9
   804a4:	4669      	mov	r1, sp
   804a6:	47b0      	blx	r6
		}
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   804a8:	a803      	add	r0, sp, #12
   804aa:	f04f 0164 	mov.w	r1, #100	; 0x64
   804ae:	f642 224d 	movw	r2, #10829	; 0x2a4d
   804b2:	f2c0 0208 	movt	r2, #8
   804b6:	4790      	blx	r2
	}
   804b8:	e788      	b.n	803cc <plot_values+0x3c>
   804ba:	bf00      	nop

000804bc <motorshield_setup>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   804c0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   804c4:	f44f 7280 	mov.w	r2, #256	; 0x100
   804c8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804ce:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804d0:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   804d4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   804d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   804dc:	6101      	str	r1, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804de:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804e2:	6341      	str	r1, [r0, #52]	; 0x34
   804e4:	4770      	bx	lr
   804e6:	bf00      	nop

000804e8 <pid_control>:

/* Task 1 (high priority)
* PID regulator
*/
void pid_control(void *p)
{	
   804e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804ec:	b08d      	sub	sp, #52	; 0x34
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = 100;	//ms
	xLastWakeTime = xTaskGetTickCount();
   804ee:	f242 63ad 	movw	r3, #9901	; 0x26ad
   804f2:	f2c0 0308 	movt	r3, #8
   804f6:	4798      	blx	r3
   804f8:	900b      	str	r0, [sp, #44]	; 0x2c
	
	while(1)
	{
		vTaskDelayUntil( &xLastWakeTime, xTimeIncrement);
   804fa:	f642 204d 	movw	r0, #10829	; 0x2a4d
   804fe:	4605      	mov	r5, r0
   80500:	f2c0 0508 	movt	r5, #8
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80504:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   80508:	f2c4 040e 	movt	r4, #16398	; 0x400e
		
		/* Start PID regulator if flag ('L' lamp) is 1 (parameters set) */
		if(ioport_get_pin_level(PIO_PB27_IDX)==1)
		{
			current_value = sensor_read();
   8050c:	f240 71f5 	movw	r1, #2037	; 0x7f5
   80510:	f2c0 0108 	movt	r1, #8
   80514:	9108      	str	r1, [sp, #32]
   80516:	f64a 3260 	movw	r2, #43872	; 0xab60
   8051a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8051e:	9209      	str	r2, [sp, #36]	; 0x24
	portTickType xTimeIncrement = 100;	//ms
	xLastWakeTime = xTaskGetTickCount();
	
	while(1)
	{
		vTaskDelayUntil( &xLastWakeTime, xTimeIncrement);
   80520:	a80b      	add	r0, sp, #44	; 0x2c
   80522:	f04f 0164 	mov.w	r1, #100	; 0x64
   80526:	47a8      	blx	r5
   80528:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		
		/* Start PID regulator if flag ('L' lamp) is 1 (parameters set) */
		if(ioport_get_pin_level(PIO_PB27_IDX)==1)
   8052a:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
   8052e:	d0f7      	beq.n	80520 <pid_control+0x38>
		{
			current_value = sensor_read();
   80530:	9f08      	ldr	r7, [sp, #32]
   80532:	47b8      	blx	r7
   80534:	9b09      	ldr	r3, [sp, #36]	; 0x24
   80536:	8018      	strh	r0, [r3, #0]
			error = setpoint - current_value;
   80538:	f64a 3140 	movw	r1, #43840	; 0xab40
   8053c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80540:	880a      	ldrh	r2, [r1, #0]
   80542:	1a10      	subs	r0, r2, r0
   80544:	b287      	uxth	r7, r0
   80546:	f64a 3668 	movw	r6, #43880	; 0xab68
   8054a:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8054e:	8037      	strh	r7, [r6, #0]
			
			/* Sum of P */
			proportional = Kp * error;
   80550:	f64a 3350 	movw	r3, #43856	; 0xab50
   80554:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80558:	e9d3 2300 	ldrd	r2, r3, [r3]
   8055c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   80560:	b239      	sxth	r1, r7
   80562:	9105      	str	r1, [sp, #20]
   80564:	f643 1a95 	movw	sl, #14741	; 0x3995
   80568:	f2c0 0a08 	movt	sl, #8
   8056c:	4608      	mov	r0, r1
   8056e:	47d0      	blx	sl
   80570:	f643 2861 	movw	r8, #14945	; 0x3a61
   80574:	f2c0 0808 	movt	r8, #8
   80578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8057c:	47c0      	blx	r8
   8057e:	f643 6985 	movw	r9, #16005	; 0x3e85
   80582:	f2c0 0908 	movt	r9, #8
   80586:	47c8      	blx	r9
   80588:	b286      	uxth	r6, r0
   8058a:	9606      	str	r6, [sp, #24]
   8058c:	f640 1320 	movw	r3, #2336	; 0x920
   80590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80594:	8018      	strh	r0, [r3, #0]
			
			/* Sum of I */
			sum = (sum + prev_error);
   80596:	f640 1022 	movw	r0, #2338	; 0x922
   8059a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8059e:	f9b0 b000 	ldrsh.w	fp, [r0]
   805a2:	f64a 3264 	movw	r2, #43876	; 0xab64
   805a6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   805aa:	6811      	ldr	r1, [r2, #0]
   805ac:	eb0b 0001 	add.w	r0, fp, r1
   805b0:	6010      	str	r0, [r2, #0]
			integral = Kp * ((sum*dT)/Ti);
   805b2:	f64a 3638 	movw	r6, #43832	; 0xab38
   805b6:	4633      	mov	r3, r6
   805b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   805bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   805c0:	e9cd 2300 	strd	r2, r3, [sp]
   805c4:	47d0      	blx	sl
   805c6:	e9dd 2300 	ldrd	r2, r3, [sp]
   805ca:	47c0      	blx	r8
   805cc:	f643 46b5 	movw	r6, #15541	; 0x3cb5
   805d0:	f2c0 0608 	movt	r6, #8
   805d4:	f64a 3348 	movw	r3, #43848	; 0xab48
   805d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   805dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   805e0:	47b0      	blx	r6
   805e2:	4602      	mov	r2, r0
   805e4:	460b      	mov	r3, r1
   805e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   805ea:	47c0      	blx	r8
   805ec:	47c8      	blx	r9
   805ee:	b281      	uxth	r1, r0
   805f0:	9107      	str	r1, [sp, #28]
   805f2:	f640 121c 	movw	r2, #2332	; 0x91c
   805f6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   805fa:	8010      	strh	r0, [r2, #0]
						
			/* Sum of D */
			derivative = Kp * ((Td/dT) * (error - prev_error));
   805fc:	f64a 3058 	movw	r0, #43864	; 0xab58
   80600:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80604:	c803      	ldmia	r0, {r0, r1}
   80606:	e9dd 2300 	ldrd	r2, r3, [sp]
   8060a:	47b0      	blx	r6
   8060c:	e9cd 0100 	strd	r0, r1, [sp]
   80610:	9e05      	ldr	r6, [sp, #20]
   80612:	ebcb 0006 	rsb	r0, fp, r6
   80616:	47d0      	blx	sl
   80618:	4602      	mov	r2, r0
   8061a:	460b      	mov	r3, r1
   8061c:	e9dd 0100 	ldrd	r0, r1, [sp]
   80620:	47c0      	blx	r8
   80622:	4602      	mov	r2, r0
   80624:	460b      	mov	r3, r1
   80626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8062a:	47c0      	blx	r8
   8062c:	47c8      	blx	r9
   8062e:	f640 131e 	movw	r3, #2334	; 0x91e
   80632:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80636:	8018      	strh	r0, [r3, #0]
			
			/* Control signal of PID */
			PID = proportional + integral + derivative;
   80638:	9906      	ldr	r1, [sp, #24]
   8063a:	9a07      	ldr	r2, [sp, #28]
   8063c:	eb01 0c02 	add.w	ip, r1, r2
   80640:	eb0c 0a00 	add.w	sl, ip, r0
   80644:	fa1f f88a 	uxth.w	r8, sl
   80648:	f64a 3062 	movw	r0, #43874	; 0xab62
   8064c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80650:	f8a0 8000 	strh.w	r8, [r0]
			
			prev_error = error;
   80654:	f640 1622 	movw	r6, #2338	; 0x922
   80658:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8065c:	8037      	strh	r7, [r6, #0]
			//printf("C: %d, E: %d, P: %d\n", current_value, error, PID);	// Used for testing and debugging
			
			/* Anti-windup */
			if(PID > 100)
   8065e:	fa0f f788 	sxth.w	r7, r8
   80662:	2f64      	cmp	r7, #100	; 0x64
   80664:	dd07      	ble.n	80676 <pid_control+0x18e>
			{
				PID = 100;	
   80666:	f64a 3662 	movw	r6, #43874	; 0xab62
   8066a:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8066e:	f04f 0764 	mov.w	r7, #100	; 0x64
   80672:	8037      	strh	r7, [r6, #0]
   80674:	e00e      	b.n	80694 <pid_control+0x1ac>
			}
			if(PID < 0)
   80676:	f64a 3362 	movw	r3, #43874	; 0xab62
   8067a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8067e:	f9b3 1000 	ldrsh.w	r1, [r3]
   80682:	2900      	cmp	r1, #0
   80684:	da06      	bge.n	80694 <pid_control+0x1ac>
			{
				PID = 0;
   80686:	f64a 3062 	movw	r0, #43874	; 0xab62
   8068a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8068e:	f04f 0200 	mov.w	r2, #0
   80692:	8002      	strh	r2, [r0, #0]
			}
			pwm_update(PID);
   80694:	f64a 3362 	movw	r3, #43874	; 0xab62
   80698:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8069c:	f9b3 0000 	ldrsh.w	r0, [r3]
   806a0:	f240 7151 	movw	r1, #1873	; 0x751
   806a4:	f2c0 0108 	movt	r1, #8
   806a8:	4788      	blx	r1
   806aa:	e739      	b.n	80520 <pid_control+0x38>

000806ac <pwm_setup>:

static pwm_channel_t pwm_channel_instance;			// Define the PWM channel instance in order to configure channel

/* Initialize PWM for pin DAC1 */
void pwm_setup(void)
{
   806ac:	b530      	push	{r4, r5, lr}
   806ae:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);					// Enable the module clock for PWM peripheral
   806b0:	f04f 0024 	mov.w	r0, #36	; 0x24
   806b4:	f241 0355 	movw	r3, #4181	; 0x1055
   806b8:	f2c0 0308 	movt	r3, #8
   806bc:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);			// Disable channel 0	
   806be:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   806c2:	f2c4 0409 	movt	r4, #16393	; 0x4009
   806c6:	4620      	mov	r0, r4
   806c8:	f04f 0100 	mov.w	r1, #0
   806cc:	f241 32a5 	movw	r2, #5029	; 0x13a5
   806d0:	f2c0 0208 	movt	r2, #8
   806d4:	4790      	blx	r2
	pwm_clock_t clock_setting = {					// Setup clock for PWM module
   806d6:	f248 60a0 	movw	r0, #34464	; 0x86a0
   806da:	f2c0 0001 	movt	r0, #1
   806de:	9001      	str	r0, [sp, #4]
   806e0:	f04f 0500 	mov.w	r5, #0
   806e4:	9502      	str	r5, [sp, #8]
   806e6:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   806ea:	f2c0 5101 	movt	r1, #1281	; 0x501
   806ee:	9103      	str	r1, [sp, #12]
		.ul_clka = 1000 * 100,						// Clock A is configured, frequency = 1KHz, fan power = 0-100
		.ul_clkb = 0,								// Clock B is not used
		.ul_mck = sysclk_get_cpu_hz()				// System main clock
	};
	pwm_init(PWM, &clock_setting);
   806f0:	4620      	mov	r0, r4
   806f2:	a901      	add	r1, sp, #4
   806f4:	f241 13fd 	movw	r3, #4605	; 0x11fd
   806f8:	f2c0 0308 	movt	r3, #8
   806fc:	4798      	blx	r3
	
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;			// Clock A as source clock
   806fe:	f640 1124 	movw	r1, #2340	; 0x924
   80702:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80706:	f04f 020b 	mov.w	r2, #11
   8070a:	604a      	str	r2, [r1, #4]
	pwm_channel_instance.ul_period = 100;
   8070c:	f04f 0064 	mov.w	r0, #100	; 0x64
   80710:	6108      	str	r0, [r1, #16]
	pwm_channel_instance.ul_duty = 0;
   80712:	60cd      	str	r5, [r1, #12]
	pwm_channel_instance.channel = PWM_CHANNEL;						// Configure channel 0
   80714:	600d      	str	r5, [r1, #0]
	//pwm_channel_instance.alignment = PWM_ALIGN_LEFT;				// Period is left-aligned
	//pwm_channel_instance.polarity = PWM_LOW;						// Output waveform starts at a low level
	
	pwm_channel_init(PWM, &pwm_channel_instance);					// Initialize channel instance
   80716:	4620      	mov	r0, r4
   80718:	f241 2349 	movw	r3, #4681	; 0x1249
   8071c:	f2c0 0308 	movt	r3, #8
   80720:	4798      	blx	r3
	pio_set_peripheral(PIOB, PIO_PERIPH_B, PIO_PB16B_PWML0);		// Setup PWM for pin DAC1
   80722:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80726:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8072a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8072e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80732:	f640 3315 	movw	r3, #2837	; 0xb15
   80736:	f2c0 0308 	movt	r3, #8
   8073a:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL);							// Enable channel 0
   8073c:	4620      	mov	r0, r4
   8073e:	4629      	mov	r1, r5
   80740:	f241 3299 	movw	r2, #5017	; 0x1399
   80744:	f2c0 0208 	movt	r2, #8
   80748:	4790      	blx	r2
}
   8074a:	b005      	add	sp, #20
   8074c:	bd30      	pop	{r4, r5, pc}
   8074e:	bf00      	nop

00080750 <pwm_update>:

/* Update duty cycle */
void pwm_update(int duty_cycle)
{
   80750:	b508      	push	{r3, lr}
   80752:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel_instance, duty_cycle);
   80754:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80758:	f2c4 0009 	movt	r0, #16393	; 0x4009
   8075c:	f640 1124 	movw	r1, #2340	; 0x924
   80760:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80764:	f241 3375 	movw	r3, #4981	; 0x1375
   80768:	f2c0 0308 	movt	r3, #8
   8076c:	4798      	blx	r3
   8076e:	bd08      	pop	{r3, pc}

00080770 <adc_setup>:
#include <inttypes.h>
#include "SensorFunctions.h"

/* Initialize ADC for pin A8 */
void adc_setup(void)
{
   80770:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);							// Enable specified peripheral clock
   80772:	f04f 0025 	mov.w	r0, #37	; 0x25
   80776:	f241 0355 	movw	r3, #4181	; 0x1055
   8077a:	f2c0 0308 	movt	r3, #8
   8077e:	4798      	blx	r3
	
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);		// Initialize the given ADC with the specified ADC clock and startup time
   80780:	f04f 0400 	mov.w	r4, #0
   80784:	f2c4 040c 	movt	r4, #16396	; 0x400c
   80788:	4620      	mov	r0, r4
   8078a:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   8078e:	f6c0 2103 	movt	r1, #2563	; 0xa03
   80792:	f244 2240 	movw	r2, #16960	; 0x4240
   80796:	f2c0 020f 	movt	r2, #15
   8079a:	f04f 0308 	mov.w	r3, #8
   8079e:	f640 2559 	movw	r5, #2649	; 0xa59
   807a2:	f2c0 0508 	movt	r5, #8
   807a6:	47a8      	blx	r5
															// sysclk_get_main_hz() is used to get master clock frequency
															// ADC_CLOCK gives the ADC clock frequency
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);	// Configure ADC timing
   807a8:	4620      	mov	r0, r4
   807aa:	f04f 0100 	mov.w	r1, #0
   807ae:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   807b2:	f04f 0301 	mov.w	r3, #1
   807b6:	f640 25c1 	movw	r5, #2753	; 0xac1
   807ba:	f2c0 0508 	movt	r5, #8
   807be:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);			// Set ADC resolution with 12 bits, 2^12 = 4096 (voltage read converted to number between 0-4095)
   807c0:	4620      	mov	r0, r4
   807c2:	f04f 0100 	mov.w	r1, #0
   807c6:	f640 22a1 	movw	r2, #2721	; 0xaa1
   807ca:	f2c0 0208 	movt	r2, #8
   807ce:	4790      	blx	r2
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// Enable specified ADC channel (pin A8)
   807d0:	4620      	mov	r0, r4
   807d2:	f04f 010a 	mov.w	r1, #10
   807d6:	f640 23e9 	movw	r3, #2793	; 0xae9
   807da:	f2c0 0308 	movt	r3, #8
   807de:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// Configure software conversion trigger
   807e0:	4620      	mov	r0, r4
   807e2:	f04f 0100 	mov.w	r1, #0
   807e6:	460a      	mov	r2, r1
   807e8:	f640 23b1 	movw	r3, #2737	; 0xab1
   807ec:	f2c0 0308 	movt	r3, #8
   807f0:	4798      	blx	r3
   807f2:	bd38      	pop	{r3, r4, r5, pc}

000807f4 <sensor_read>:
}


/* Read and linearize sensor value */
uint16_t sensor_read(void)
{
   807f4:	b510      	push	{r4, lr}
	uint16_t distance = 0;	
	
	while(1)
	{	
		adc_start(ADC);
   807f6:	f04f 0400 	mov.w	r4, #0
   807fa:	f2c4 040c 	movt	r4, #16396	; 0x400c
   807fe:	4620      	mov	r0, r4
   80800:	f640 23e1 	movw	r3, #2785	; 0xae1
   80804:	f2c0 0308 	movt	r3, #8
   80808:	4798      	blx	r3
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
   8080a:	4620      	mov	r0, r4
   8080c:	f04f 010a 	mov.w	r1, #10
   80810:	f640 22f5 	movw	r2, #2805	; 0xaf5
   80814:	f2c0 0208 	movt	r2, #8
   80818:	4790      	blx	r2
   8081a:	b280      	uxth	r0, r0
		//printf("sensor: %d\n", sensor_value);
		
		if(sensor_value <= 1630)
   8081c:	f240 615e 	movw	r1, #1630	; 0x65e
   80820:	4288      	cmp	r0, r1
   80822:	d921      	bls.n	80868 <sensor_read+0x74>
		{
			distance = 20;
		}
		else if(sensor_value > 1630 && sensor_value <= 1720)
   80824:	f2a0 635f 	subw	r3, r0, #1631	; 0x65f
   80828:	b29a      	uxth	r2, r3
   8082a:	2a59      	cmp	r2, #89	; 0x59
   8082c:	d91f      	bls.n	8086e <sensor_read+0x7a>
		{
			distance = 25;
		}
		else if(sensor_value >1720 && sensor_value <= 1925)
   8082e:	f2a0 61b9 	subw	r1, r0, #1721	; 0x6b9
   80832:	b28b      	uxth	r3, r1
   80834:	2bcc      	cmp	r3, #204	; 0xcc
   80836:	d91d      	bls.n	80874 <sensor_read+0x80>
		{
			distance = 30;
		}
		else if(sensor_value > 1925 && sensor_value <= 2145)
   80838:	f2a0 7286 	subw	r2, r0, #1926	; 0x786
   8083c:	b291      	uxth	r1, r2
   8083e:	29db      	cmp	r1, #219	; 0xdb
   80840:	d91b      	bls.n	8087a <sensor_read+0x86>
		{
			distance = 35;
		}		
		else if(sensor_value > 2145 && sensor_value <= 2455)
   80842:	f6a0 0362 	subw	r3, r0, #2146	; 0x862
   80846:	b29a      	uxth	r2, r3
   80848:	f5b2 7f9b 	cmp.w	r2, #310	; 0x136
   8084c:	d318      	bcc.n	80880 <sensor_read+0x8c>
		{
			distance = 40;
		}
		else if(sensor_value > 2455 && sensor_value <= 2810)
   8084e:	f6a0 1198 	subw	r1, r0, #2456	; 0x998
   80852:	b28b      	uxth	r3, r1
   80854:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
   80858:	d915      	bls.n	80886 <sensor_read+0x92>


/* Read and linearize sensor value */
uint16_t sensor_read(void)
{
	uint16_t distance = 0;	
   8085a:	f640 22fa 	movw	r2, #2810	; 0xafa
   8085e:	4290      	cmp	r0, r2
   80860:	bf8c      	ite	hi
   80862:	2032      	movhi	r0, #50	; 0x32
   80864:	2000      	movls	r0, #0
   80866:	bd10      	pop	{r4, pc}
		uint16_t sensor_value = adc_get_channel_value(ADC, ADC_CHANNEL_10);
		//printf("sensor: %d\n", sensor_value);
		
		if(sensor_value <= 1630)
		{
			distance = 20;
   80868:	f04f 0014 	mov.w	r0, #20
   8086c:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value > 1630 && sensor_value <= 1720)
		{
			distance = 25;
   8086e:	f04f 0019 	mov.w	r0, #25
   80872:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value >1720 && sensor_value <= 1925)
		{
			distance = 30;
   80874:	f04f 001e 	mov.w	r0, #30
   80878:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value > 1925 && sensor_value <= 2145)
		{
			distance = 35;
   8087a:	f04f 0023 	mov.w	r0, #35	; 0x23
   8087e:	bd10      	pop	{r4, pc}
		}		
		else if(sensor_value > 2145 && sensor_value <= 2455)
		{
			distance = 40;
   80880:	f04f 0028 	mov.w	r0, #40	; 0x28
   80884:	bd10      	pop	{r4, pc}
		}
		else if(sensor_value > 2455 && sensor_value <= 2810)
		{
			distance = 45;
   80886:	f04f 002d 	mov.w	r0, #45	; 0x2d
			//distance = 30;
		//}
		//printf("Sensor value: %d, Distance: %d\n", sensor_value, distance);
		return distance;		
	}
}
   8088a:	bd10      	pop	{r4, pc}

0008088c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8088c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80890:	460c      	mov	r4, r1
   80892:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80894:	bb48      	cbnz	r0, 808ea <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   80896:	2a00      	cmp	r2, #0
   80898:	dd2b      	ble.n	808f2 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   8089a:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   8089c:	f64a 3674 	movw	r6, #43892	; 0xab74
   808a0:	f2c2 0607 	movt	r6, #8199	; 0x2007
   808a4:	f64a 356c 	movw	r5, #43884	; 0xab6c
   808a8:	f2c2 0507 	movt	r5, #8199	; 0x2007
   808ac:	ea6f 0901 	mvn.w	r9, r1
   808b0:	eb07 0009 	add.w	r0, r7, r9
   808b4:	f000 0901 	and.w	r9, r0, #1
   808b8:	6830      	ldr	r0, [r6, #0]
   808ba:	682b      	ldr	r3, [r5, #0]
   808bc:	4798      	blx	r3
		ptr++;
   808be:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   808c2:	42bc      	cmp	r4, r7
   808c4:	d119      	bne.n	808fa <_read+0x6e>
   808c6:	e00d      	b.n	808e4 <_read+0x58>
		ptr_get(stdio_base, ptr);
   808c8:	6830      	ldr	r0, [r6, #0]
   808ca:	682b      	ldr	r3, [r5, #0]
   808cc:	4621      	mov	r1, r4
   808ce:	4798      	blx	r3
		ptr++;
   808d0:	f104 0401 	add.w	r4, r4, #1
   808d4:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   808d6:	6830      	ldr	r0, [r6, #0]
   808d8:	682a      	ldr	r2, [r5, #0]
   808da:	4790      	blx	r2
		ptr++;
   808dc:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   808e0:	42bc      	cmp	r4, r7
   808e2:	d1f1      	bne.n	808c8 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   808e4:	4640      	mov	r0, r8
   808e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   808ea:	f04f 30ff 	mov.w	r0, #4294967295
   808ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   808f2:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   808f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   808fa:	f1b9 0f00 	cmp.w	r9, #0
   808fe:	d0e3      	beq.n	808c8 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80900:	6830      	ldr	r0, [r6, #0]
   80902:	682a      	ldr	r2, [r5, #0]
   80904:	4621      	mov	r1, r4
   80906:	4790      	blx	r2
		ptr++;
   80908:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8090c:	42bc      	cmp	r4, r7
   8090e:	d1db      	bne.n	808c8 <_read+0x3c>
   80910:	e7e8      	b.n	808e4 <_read+0x58>
   80912:	bf00      	nop

00080914 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80918:	460d      	mov	r5, r1
   8091a:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8091c:	f100 30ff 	add.w	r0, r0, #4294967295
   80920:	2802      	cmp	r0, #2
   80922:	d824      	bhi.n	8096e <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   80924:	b332      	cbz	r2, 80974 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80926:	f64a 3674 	movw	r6, #43892	; 0xab74
   8092a:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8092e:	f64a 3770 	movw	r7, #43888	; 0xab70
   80932:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80936:	f04f 0400 	mov.w	r4, #0
   8093a:	f102 39ff 	add.w	r9, r2, #4294967295
   8093e:	f009 0901 	and.w	r9, r9, #1
   80942:	6830      	ldr	r0, [r6, #0]
   80944:	683b      	ldr	r3, [r7, #0]
   80946:	5d09      	ldrb	r1, [r1, r4]
   80948:	4798      	blx	r3
   8094a:	42a0      	cmp	r0, r4
   8094c:	da1a      	bge.n	80984 <_write+0x70>
   8094e:	e014      	b.n	8097a <_write+0x66>
   80950:	6830      	ldr	r0, [r6, #0]
   80952:	683b      	ldr	r3, [r7, #0]
   80954:	5d29      	ldrb	r1, [r5, r4]
   80956:	4798      	blx	r3
   80958:	2800      	cmp	r0, #0
   8095a:	db0e      	blt.n	8097a <_write+0x66>
			return -1;
		}
		++nChars;
   8095c:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80960:	6830      	ldr	r0, [r6, #0]
   80962:	683a      	ldr	r2, [r7, #0]
   80964:	5d29      	ldrb	r1, [r5, r4]
   80966:	4790      	blx	r2
   80968:	2800      	cmp	r0, #0
   8096a:	da1d      	bge.n	809a8 <_write+0x94>
   8096c:	e005      	b.n	8097a <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8096e:	f04f 34ff 	mov.w	r4, #4294967295
   80972:	e004      	b.n	8097e <_write+0x6a>
	}

	for (; len != 0; --len) {
   80974:	f04f 0400 	mov.w	r4, #0
   80978:	e001      	b.n	8097e <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8097a:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8097e:	4620      	mov	r0, r4
   80980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80984:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80988:	45a0      	cmp	r8, r4
   8098a:	d0f8      	beq.n	8097e <_write+0x6a>
   8098c:	f1b9 0f00 	cmp.w	r9, #0
   80990:	d0de      	beq.n	80950 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80992:	6830      	ldr	r0, [r6, #0]
   80994:	683a      	ldr	r2, [r7, #0]
   80996:	5d29      	ldrb	r1, [r5, r4]
   80998:	4790      	blx	r2
   8099a:	2800      	cmp	r0, #0
   8099c:	dbed      	blt.n	8097a <_write+0x66>
			return -1;
		}
		++nChars;
   8099e:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   809a2:	45a0      	cmp	r8, r4
   809a4:	d1d4      	bne.n	80950 <_write+0x3c>
   809a6:	e7ea      	b.n	8097e <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   809a8:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   809ac:	45a0      	cmp	r8, r4
   809ae:	d1cf      	bne.n	80950 <_write+0x3c>
   809b0:	e7e5      	b.n	8097e <_write+0x6a>
   809b2:	bf00      	nop

000809b4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   809b4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   809b6:	f641 2350 	movw	r3, #6736	; 0x1a50
   809ba:	f2c4 030e 	movt	r3, #16398	; 0x400e
   809be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   809c2:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   809c4:	f04f 000b 	mov.w	r0, #11
   809c8:	f241 0455 	movw	r4, #4181	; 0x1055
   809cc:	f2c0 0408 	movt	r4, #8
   809d0:	47a0      	blx	r4
   809d2:	f04f 000c 	mov.w	r0, #12
   809d6:	47a0      	blx	r4
   809d8:	f04f 000d 	mov.w	r0, #13
   809dc:	47a0      	blx	r4
   809de:	f04f 000e 	mov.w	r0, #14
   809e2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   809e4:	f04f 003b 	mov.w	r0, #59	; 0x3b
   809e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809ec:	f640 4489 	movw	r4, #3209	; 0xc89
   809f0:	f2c0 0408 	movt	r4, #8
   809f4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   809f6:	f04f 0055 	mov.w	r0, #85	; 0x55
   809fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809fe:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80a00:	f04f 0056 	mov.w	r0, #86	; 0x56
   80a04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a08:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80a0a:	f04f 0068 	mov.w	r0, #104	; 0x68
   80a0e:	f04f 0179 	mov.w	r1, #121	; 0x79
   80a12:	f6c2 0100 	movt	r1, #10240	; 0x2800
   80a16:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80a18:	f04f 005c 	mov.w	r0, #92	; 0x5c
   80a1c:	f04f 0101 	mov.w	r1, #1
   80a20:	f6c2 0100 	movt	r1, #10240	; 0x2800
   80a24:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80a26:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80a2a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80a2e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80a36:	f640 5389 	movw	r3, #3465	; 0xd89
   80a3a:	f2c0 0308 	movt	r3, #8
   80a3e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80a40:	f04f 002b 	mov.w	r0, #43	; 0x2b
   80a44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a48:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80a4a:	f04f 002a 	mov.w	r0, #42	; 0x2a
   80a4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a52:	47a0      	blx	r4
   80a54:	bd10      	pop	{r4, pc}
   80a56:	bf00      	nop

00080a58 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const uint8_t uc_startup)
{
   80a58:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80a5a:	f04f 0401 	mov.w	r4, #1
   80a5e:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80a60:	f04f 0400 	mov.w	r4, #0
   80a64:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80a66:	f240 2502 	movw	r5, #514	; 0x202
   80a6a:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80a6e:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80a72:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80a76:	6845      	ldr	r5, [r0, #4]
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80a78:	ea4f 0242 	mov.w	r2, r2, lsl #1
   80a7c:	fbb1 f1f2 	udiv	r1, r1, r2
   80a80:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80a84:	ea4f 6102 	mov.w	r1, r2, lsl #24
			((uc_startup << ADC_MR_STARTUP_Pos) &
   80a88:	ea4f 4303 	mov.w	r3, r3, lsl #16
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   80a8c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
   80a90:	ea42 4111 	orr.w	r1, r2, r1, lsr #16
   80a94:	430d      	orrs	r5, r1
   80a96:	6045      	str	r5, [r0, #4]
			((uc_startup << ADC_MR_STARTUP_Pos) &
			ADC_MR_STARTUP_Msk);
	return 0;
}
   80a98:	4620      	mov	r0, r4
   80a9a:	bc30      	pop	{r4, r5}
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop

00080aa0 <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   80aa0:	6843      	ldr	r3, [r0, #4]
   80aa2:	ea4f 1101 	mov.w	r1, r1, lsl #4
   80aa6:	f001 0210 	and.w	r2, r1, #16
   80aaa:	4313      	orrs	r3, r2
   80aac:	6043      	str	r3, [r0, #4]
   80aae:	4770      	bx	lr

00080ab0 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80ab0:	6843      	ldr	r3, [r0, #4]
   80ab2:	4319      	orrs	r1, r3
   80ab4:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   80ab8:	b2d3      	uxtb	r3, r2
   80aba:	4319      	orrs	r1, r3
   80abc:	6041      	str	r1, [r0, #4]
   80abe:	4770      	bx	lr

00080ac0 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80ac0:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80ac2:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80ac4:	4322      	orrs	r2, r4
   80ac6:	ea4f 6101 	mov.w	r1, r1, lsl #24
   80aca:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   80ace:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80ad0:	ea4f 7303 	mov.w	r3, r3, lsl #28
   80ad4:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   80ad8:	430a      	orrs	r2, r1
   80ada:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80adc:	bc10      	pop	{r4}
   80ade:	4770      	bx	lr

00080ae0 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80ae0:	f04f 0302 	mov.w	r3, #2
   80ae4:	6003      	str	r3, [r0, #0]
   80ae6:	4770      	bx	lr

00080ae8 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80ae8:	f04f 0301 	mov.w	r3, #1
   80aec:	fa03 f101 	lsl.w	r1, r3, r1
   80af0:	6101      	str	r1, [r0, #16]
   80af2:	4770      	bx	lr

00080af4 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   80af4:	290f      	cmp	r1, #15
   80af6:	d804      	bhi.n	80b02 <adc_get_channel_value+0xe>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   80af8:	f101 0114 	add.w	r1, r1, #20
   80afc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   80b00:	4770      	bx	lr
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   80b02:	f04f 0000 	mov.w	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   80b06:	4770      	bx	lr

00080b08 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b08:	b10a      	cbz	r2, 80b0e <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   80b0a:	6641      	str	r1, [r0, #100]	; 0x64
   80b0c:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b0e:	6601      	str	r1, [r0, #96]	; 0x60
   80b10:	4770      	bx	lr
   80b12:	bf00      	nop

00080b14 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80b14:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80b16:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80b1a:	d016      	beq.n	80b4a <pio_set_peripheral+0x36>
   80b1c:	d804      	bhi.n	80b28 <pio_set_peripheral+0x14>
   80b1e:	b1c9      	cbz	r1, 80b54 <pio_set_peripheral+0x40>
   80b20:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80b24:	d115      	bne.n	80b52 <pio_set_peripheral+0x3e>
   80b26:	e009      	b.n	80b3c <pio_set_peripheral+0x28>
   80b28:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80b2c:	d012      	beq.n	80b54 <pio_set_peripheral+0x40>
   80b2e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80b32:	d00f      	beq.n	80b54 <pio_set_peripheral+0x40>
   80b34:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80b38:	d10b      	bne.n	80b52 <pio_set_peripheral+0x3e>
   80b3a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80b3c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80b3e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80b40:	400b      	ands	r3, r1
   80b42:	ea23 0302 	bic.w	r3, r3, r2
   80b46:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80b48:	e003      	b.n	80b52 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80b4a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80b4c:	ea42 0103 	orr.w	r1, r2, r3
   80b50:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80b52:	6042      	str	r2, [r0, #4]
   80b54:	4770      	bx	lr
   80b56:	bf00      	nop

00080b58 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80b58:	6441      	str	r1, [r0, #68]	; 0x44
   80b5a:	4770      	bx	lr

00080b5c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b5e:	4604      	mov	r4, r0
   80b60:	460d      	mov	r5, r1
   80b62:	4616      	mov	r6, r2
   80b64:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   80b66:	f640 3359 	movw	r3, #2905	; 0xb59
   80b6a:	f2c0 0308 	movt	r3, #8
   80b6e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80b70:	4620      	mov	r0, r4
   80b72:	4629      	mov	r1, r5
   80b74:	9a06      	ldr	r2, [sp, #24]
   80b76:	f640 3309 	movw	r3, #2825	; 0xb09
   80b7a:	f2c0 0308 	movt	r3, #8
   80b7e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80b80:	b10f      	cbz	r7, 80b86 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   80b82:	6525      	str	r5, [r4, #80]	; 0x50
   80b84:	e000      	b.n	80b88 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80b86:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80b88:	b10e      	cbz	r6, 80b8e <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   80b8a:	6325      	str	r5, [r4, #48]	; 0x30
   80b8c:	e000      	b.n	80b90 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80b8e:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80b90:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   80b92:	6025      	str	r5, [r4, #0]
   80b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b96:	bf00      	nop

00080b98 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80b98:	b570      	push	{r4, r5, r6, lr}
   80b9a:	4604      	mov	r4, r0
   80b9c:	460d      	mov	r5, r1
   80b9e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   80ba0:	f640 3359 	movw	r3, #2905	; 0xb59
   80ba4:	f2c0 0308 	movt	r3, #8
   80ba8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   80baa:	4620      	mov	r0, r4
   80bac:	4629      	mov	r1, r5
   80bae:	f006 0201 	and.w	r2, r6, #1
   80bb2:	f640 3309 	movw	r3, #2825	; 0xb09
   80bb6:	f2c0 0308 	movt	r3, #8
   80bba:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80bbc:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   80bc0:	bf14      	ite	ne
   80bc2:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80bc4:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80bc6:	f016 0f02 	tst.w	r6, #2
   80bca:	d002      	beq.n	80bd2 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   80bcc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   80bd0:	e004      	b.n	80bdc <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80bd2:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   80bd6:	bf18      	it	ne
   80bd8:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80bdc:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   80bde:	6025      	str	r5, [r4, #0]
   80be0:	bd70      	pop	{r4, r5, r6, pc}
   80be2:	bf00      	nop

00080be4 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
   80be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80be6:	b083      	sub	sp, #12
   80be8:	4607      	mov	r7, r0
   80bea:	460c      	mov	r4, r1
   80bec:	4616      	mov	r6, r2
   80bee:	461d      	mov	r5, r3
	/* Configure pins */
	switch (ul_type) {
   80bf0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80bf4:	d022      	beq.n	80c3c <pio_configure+0x58>
   80bf6:	d806      	bhi.n	80c06 <pio_configure+0x22>
   80bf8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80bfc:	d00a      	beq.n	80c14 <pio_configure+0x30>
   80bfe:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80c02:	d139      	bne.n	80c78 <pio_configure+0x94>
   80c04:	e006      	b.n	80c14 <pio_configure+0x30>
   80c06:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80c0a:	d021      	beq.n	80c50 <pio_configure+0x6c>
   80c0c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80c10:	d132      	bne.n	80c78 <pio_configure+0x94>
   80c12:	e01d      	b.n	80c50 <pio_configure+0x6c>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
   80c14:	4638      	mov	r0, r7
   80c16:	4621      	mov	r1, r4
   80c18:	4632      	mov	r2, r6
   80c1a:	f640 3315 	movw	r3, #2837	; 0xb15
   80c1e:	f2c0 0308 	movt	r3, #8
   80c22:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
   80c24:	4638      	mov	r0, r7
   80c26:	4631      	mov	r1, r6
   80c28:	f005 0201 	and.w	r2, r5, #1
   80c2c:	f640 3309 	movw	r3, #2825	; 0xb09
   80c30:	f2c0 0308 	movt	r3, #8
   80c34:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80c36:	f04f 0001 	mov.w	r0, #1
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;
   80c3a:	e01f      	b.n	80c7c <pio_configure+0x98>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
   80c3c:	4611      	mov	r1, r2
   80c3e:	461a      	mov	r2, r3
   80c40:	f640 3399 	movw	r3, #2969	; 0xb99
   80c44:	f2c0 0308 	movt	r3, #8
   80c48:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80c4a:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
   80c4e:	e015      	b.n	80c7c <pio_configure+0x98>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
   80c50:	f005 0001 	and.w	r0, r5, #1
   80c54:	9000      	str	r0, [sp, #0]
   80c56:	4638      	mov	r0, r7
   80c58:	4631      	mov	r1, r6
   80c5a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80c5e:	bf14      	ite	ne
   80c60:	2200      	movne	r2, #0
   80c62:	2201      	moveq	r2, #1
   80c64:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80c68:	f640 345d 	movw	r4, #2909	; 0xb5d
   80c6c:	f2c0 0408 	movt	r4, #8
   80c70:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80c72:	f04f 0001 	mov.w	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
   80c76:	e001      	b.n	80c7c <pio_configure+0x98>

	default:
		return 0;
   80c78:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80c7c:	b003      	add	sp, #12
   80c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080c80 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80c80:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80c82:	4770      	bx	lr

00080c84 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80c84:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80c86:	4770      	bx	lr

00080c88 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c8a:	b083      	sub	sp, #12
   80c8c:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80c8e:	ea4f 1650 	mov.w	r6, r0, lsr #5
   80c92:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   80c96:	f201 7207 	addw	r2, r1, #1799	; 0x707
   80c9a:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80c9e:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   80ca2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80ca6:	d042      	beq.n	80d2e <pio_configure_pin+0xa6>
   80ca8:	d806      	bhi.n	80cb8 <pio_configure_pin+0x30>
   80caa:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80cae:	d00a      	beq.n	80cc6 <pio_configure_pin+0x3e>
   80cb0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80cb4:	d164      	bne.n	80d80 <pio_configure_pin+0xf8>
   80cb6:	e020      	b.n	80cfa <pio_configure_pin+0x72>
   80cb8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80cbc:	d046      	beq.n	80d4c <pio_configure_pin+0xc4>
   80cbe:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80cc2:	d15d      	bne.n	80d80 <pio_configure_pin+0xf8>
   80cc4:	e042      	b.n	80d4c <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80cc6:	f000 071f 	and.w	r7, r0, #31
   80cca:	f04f 0401 	mov.w	r4, #1
   80cce:	fa04 f707 	lsl.w	r7, r4, r7
   80cd2:	4630      	mov	r0, r6
   80cd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80cd8:	463a      	mov	r2, r7
   80cda:	f640 3315 	movw	r3, #2837	; 0xb15
   80cde:	f2c0 0308 	movt	r3, #8
   80ce2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80ce4:	4630      	mov	r0, r6
   80ce6:	4639      	mov	r1, r7
   80ce8:	ea05 0204 	and.w	r2, r5, r4
   80cec:	f640 3309 	movw	r3, #2825	; 0xb09
   80cf0:	f2c0 0308 	movt	r3, #8
   80cf4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80cf6:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80cf8:	e044      	b.n	80d84 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80cfa:	f000 001f 	and.w	r0, r0, #31
   80cfe:	f04f 0401 	mov.w	r4, #1
   80d02:	fa04 f700 	lsl.w	r7, r4, r0
   80d06:	4630      	mov	r0, r6
   80d08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d0c:	463a      	mov	r2, r7
   80d0e:	f640 3315 	movw	r3, #2837	; 0xb15
   80d12:	f2c0 0308 	movt	r3, #8
   80d16:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80d18:	4630      	mov	r0, r6
   80d1a:	4639      	mov	r1, r7
   80d1c:	ea05 0204 	and.w	r2, r5, r4
   80d20:	f640 3309 	movw	r3, #2825	; 0xb09
   80d24:	f2c0 0308 	movt	r3, #8
   80d28:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80d2a:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80d2c:	e02a      	b.n	80d84 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80d2e:	f000 021f 	and.w	r2, r0, #31
   80d32:	f04f 0401 	mov.w	r4, #1
   80d36:	4630      	mov	r0, r6
   80d38:	fa04 f102 	lsl.w	r1, r4, r2
   80d3c:	462a      	mov	r2, r5
   80d3e:	f640 3399 	movw	r3, #2969	; 0xb99
   80d42:	f2c0 0308 	movt	r3, #8
   80d46:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80d48:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80d4a:	e01b      	b.n	80d84 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80d4c:	f000 021f 	and.w	r2, r0, #31
   80d50:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80d54:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80d58:	ea05 0104 	and.w	r1, r5, r4
   80d5c:	9100      	str	r1, [sp, #0]
   80d5e:	4630      	mov	r0, r6
   80d60:	fa04 f102 	lsl.w	r1, r4, r2
   80d64:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80d68:	bf14      	ite	ne
   80d6a:	2200      	movne	r2, #0
   80d6c:	2201      	moveq	r2, #1
   80d6e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80d72:	f640 355d 	movw	r5, #2909	; 0xb5d
   80d76:	f2c0 0508 	movt	r5, #8
   80d7a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80d7c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80d7e:	e001      	b.n	80d84 <pio_configure_pin+0xfc>

	default:
		return 0;
   80d80:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80d84:	b003      	add	sp, #12
   80d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080d88 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   80d8a:	b083      	sub	sp, #12
   80d8c:	4607      	mov	r7, r0
   80d8e:	460e      	mov	r6, r1
   80d90:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80d92:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80d96:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80d9a:	d036      	beq.n	80e0a <pio_configure_pin_group+0x82>
   80d9c:	d806      	bhi.n	80dac <pio_configure_pin_group+0x24>
   80d9e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80da2:	d00a      	beq.n	80dba <pio_configure_pin_group+0x32>
   80da4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80da8:	d14d      	bne.n	80e46 <pio_configure_pin_group+0xbe>
   80daa:	e01a      	b.n	80de2 <pio_configure_pin_group+0x5a>
   80dac:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80db0:	d033      	beq.n	80e1a <pio_configure_pin_group+0x92>
   80db2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80db6:	d146      	bne.n	80e46 <pio_configure_pin_group+0xbe>
   80db8:	e02f      	b.n	80e1a <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80dba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80dbe:	4632      	mov	r2, r6
   80dc0:	f640 3315 	movw	r3, #2837	; 0xb15
   80dc4:	f2c0 0308 	movt	r3, #8
   80dc8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80dca:	4638      	mov	r0, r7
   80dcc:	4631      	mov	r1, r6
   80dce:	f005 0201 	and.w	r2, r5, #1
   80dd2:	f640 3309 	movw	r3, #2825	; 0xb09
   80dd6:	f2c0 0308 	movt	r3, #8
   80dda:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80ddc:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80de0:	e033      	b.n	80e4a <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80de2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80de6:	4632      	mov	r2, r6
   80de8:	f640 3315 	movw	r3, #2837	; 0xb15
   80dec:	f2c0 0308 	movt	r3, #8
   80df0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80df2:	4638      	mov	r0, r7
   80df4:	4631      	mov	r1, r6
   80df6:	f005 0201 	and.w	r2, r5, #1
   80dfa:	f640 3309 	movw	r3, #2825	; 0xb09
   80dfe:	f2c0 0308 	movt	r3, #8
   80e02:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80e04:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80e08:	e01f      	b.n	80e4a <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80e0a:	f640 3399 	movw	r3, #2969	; 0xb99
   80e0e:	f2c0 0308 	movt	r3, #8
   80e12:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80e14:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80e18:	e017      	b.n	80e4a <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80e1a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80e1e:	f005 0001 	and.w	r0, r5, #1
   80e22:	9000      	str	r0, [sp, #0]
   80e24:	4638      	mov	r0, r7
   80e26:	4631      	mov	r1, r6
   80e28:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80e2c:	bf14      	ite	ne
   80e2e:	2200      	movne	r2, #0
   80e30:	2201      	moveq	r2, #1
   80e32:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80e36:	f640 345d 	movw	r4, #2909	; 0xb5d
   80e3a:	f2c0 0408 	movt	r4, #8
   80e3e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80e40:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80e44:	e001      	b.n	80e4a <pio_configure_pin_group+0xc2>

	default:
		return 0;
   80e46:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80e4a:	b003      	add	sp, #12
   80e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80e4e:	bf00      	nop

00080e50 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e52:	4604      	mov	r4, r0
   80e54:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80e56:	f640 4381 	movw	r3, #3201	; 0xc81
   80e5a:	f2c0 0308 	movt	r3, #8
   80e5e:	4798      	blx	r3
   80e60:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80e62:	4620      	mov	r0, r4
   80e64:	f640 4185 	movw	r1, #3205	; 0xc85
   80e68:	f2c0 0108 	movt	r1, #8
   80e6c:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   80e6e:	4005      	ands	r5, r0
   80e70:	d014      	beq.n	80e9c <pio_handler_process+0x4c>
   80e72:	4c0b      	ldr	r4, [pc, #44]	; (80ea0 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   80e74:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80e76:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   80e7a:	42b0      	cmp	r0, r6
   80e7c:	d10a      	bne.n	80e94 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80e7e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80e82:	4229      	tst	r1, r5
   80e84:	d006      	beq.n	80e94 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80e86:	6822      	ldr	r2, [r4, #0]
   80e88:	4630      	mov	r0, r6
   80e8a:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80e8c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80e90:	ea25 0503 	bic.w	r5, r5, r3
   80e94:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80e98:	2d00      	cmp	r5, #0
   80e9a:	d1eb      	bne.n	80e74 <pio_handler_process+0x24>
   80e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80e9e:	bf00      	nop
   80ea0:	20070958 	.word	0x20070958

00080ea4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80ea4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80ea6:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80eaa:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80eae:	f04f 010b 	mov.w	r1, #11
   80eb2:	f640 6351 	movw	r3, #3665	; 0xe51
   80eb6:	f2c0 0308 	movt	r3, #8
   80eba:	4798      	blx	r3
   80ebc:	bd08      	pop	{r3, pc}
   80ebe:	bf00      	nop

00080ec0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80ec0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80ec2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80ec6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80eca:	f04f 010c 	mov.w	r1, #12
   80ece:	f640 6351 	movw	r3, #3665	; 0xe51
   80ed2:	f2c0 0308 	movt	r3, #8
   80ed6:	4798      	blx	r3
   80ed8:	bd08      	pop	{r3, pc}
   80eda:	bf00      	nop

00080edc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80edc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80ede:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80ee2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ee6:	f04f 010d 	mov.w	r1, #13
   80eea:	f640 6351 	movw	r3, #3665	; 0xe51
   80eee:	f2c0 0308 	movt	r3, #8
   80ef2:	4798      	blx	r3
   80ef4:	bd08      	pop	{r3, pc}
   80ef6:	bf00      	nop

00080ef8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80ef8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80efa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   80efe:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80f02:	f04f 010e 	mov.w	r1, #14
   80f06:	f640 6351 	movw	r3, #3665	; 0xe51
   80f0a:	f2c0 0308 	movt	r3, #8
   80f0e:	4798      	blx	r3
   80f10:	bd08      	pop	{r3, pc}
   80f12:	bf00      	nop

00080f14 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80f14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80f18:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80f1e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80f22:	4308      	orrs	r0, r1
   80f24:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f26:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80f28:	f010 0f08 	tst.w	r0, #8
   80f2c:	d007      	beq.n	80f3e <pmc_switch_mck_to_pllack+0x2a>
   80f2e:	e010      	b.n	80f52 <pmc_switch_mck_to_pllack+0x3e>
   80f30:	f100 33ff 	add.w	r3, r0, #4294967295
   80f34:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80f36:	f010 0f08 	tst.w	r0, #8
   80f3a:	d038      	beq.n	80fae <pmc_switch_mck_to_pllack+0x9a>
   80f3c:	e009      	b.n	80f52 <pmc_switch_mck_to_pllack+0x3e>
   80f3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80f42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80f46:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f4a:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80f4c:	f011 0f08 	tst.w	r1, #8
   80f50:	d0ee      	beq.n	80f30 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80f52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80f56:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80f5a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80f5c:	f022 0303 	bic.w	r3, r2, #3
   80f60:	f043 0002 	orr.w	r0, r3, #2
   80f64:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f66:	6e89      	ldr	r1, [r1, #104]	; 0x68
   80f68:	f011 0f08 	tst.w	r1, #8
   80f6c:	d009      	beq.n	80f82 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80f6e:	f04f 0000 	mov.w	r0, #0
   80f72:	4770      	bx	lr
   80f74:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f78:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80f7a:	f011 0f08 	tst.w	r1, #8
   80f7e:	d013      	beq.n	80fa8 <pmc_switch_mck_to_pllack+0x94>
   80f80:	e009      	b.n	80f96 <pmc_switch_mck_to_pllack+0x82>
   80f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80f86:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80f8a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f8e:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80f90:	f010 0f08 	tst.w	r0, #8
   80f94:	d0ee      	beq.n	80f74 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80f96:	f04f 0000 	mov.w	r0, #0
   80f9a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80f9c:	f04f 0001 	mov.w	r0, #1
   80fa0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80fa2:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80fa6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80fa8:	3b01      	subs	r3, #1
   80faa:	d1f0      	bne.n	80f8e <pmc_switch_mck_to_pllack+0x7a>
   80fac:	e7f9      	b.n	80fa2 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80fae:	1e58      	subs	r0, r3, #1
   80fb0:	d1cb      	bne.n	80f4a <pmc_switch_mck_to_pllack+0x36>
   80fb2:	e7f3      	b.n	80f9c <pmc_switch_mck_to_pllack+0x88>

00080fb4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80fb4:	b188      	cbz	r0, 80fda <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80fb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80fba:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80fbe:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80fc0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80fc4:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80fc8:	4002      	ands	r2, r0
   80fca:	f04f 0302 	mov.w	r3, #2
   80fce:	f2c0 1337 	movt	r3, #311	; 0x137
   80fd2:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80fd6:	6208      	str	r0, [r1, #32]
   80fd8:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80fda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80fde:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80fe2:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80fe4:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80fe8:	f020 0203 	bic.w	r2, r0, #3
   80fec:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80ff0:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80ff4:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80ff8:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80ffc:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80ffe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   81002:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81006:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81008:	f013 0f01 	tst.w	r3, #1
   8100c:	d0fb      	beq.n	81006 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   8100e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   81012:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81016:	6a08      	ldr	r0, [r1, #32]
   81018:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   8101c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   81020:	620b      	str	r3, [r1, #32]
   81022:	4770      	bx	lr

00081024 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81024:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81028:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8102c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8102e:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81032:	4770      	bx	lr

00081034 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81034:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81038:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8103c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81040:	629a      	str	r2, [r3, #40]	; 0x28
   81042:	4770      	bx	lr

00081044 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81044:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81048:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8104c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8104e:	f000 0002 	and.w	r0, r0, #2
   81052:	4770      	bx	lr

00081054 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81054:	282c      	cmp	r0, #44	; 0x2c
   81056:	d835      	bhi.n	810c4 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   81058:	281f      	cmp	r0, #31
   8105a:	d817      	bhi.n	8108c <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8105c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   81060:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81064:	698a      	ldr	r2, [r1, #24]
   81066:	f04f 0301 	mov.w	r3, #1
   8106a:	fa03 f300 	lsl.w	r3, r3, r0
   8106e:	401a      	ands	r2, r3
   81070:	4293      	cmp	r3, r2
   81072:	d02a      	beq.n	810ca <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   81074:	f04f 0101 	mov.w	r1, #1
   81078:	fa01 f000 	lsl.w	r0, r1, r0
   8107c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   81080:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81084:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81086:	f04f 0000 	mov.w	r0, #0
   8108a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8108c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81090:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81094:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   81098:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8109c:	f04f 0101 	mov.w	r1, #1
   810a0:	fa01 f100 	lsl.w	r1, r1, r0
   810a4:	400a      	ands	r2, r1
   810a6:	4291      	cmp	r1, r2
   810a8:	d012      	beq.n	810d0 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   810aa:	f04f 0301 	mov.w	r3, #1
   810ae:	fa03 f000 	lsl.w	r0, r3, r0
   810b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   810b6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   810ba:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   810be:	f04f 0000 	mov.w	r0, #0
   810c2:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   810c4:	f04f 0001 	mov.w	r0, #1
   810c8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   810ca:	f04f 0000 	mov.w	r0, #0
   810ce:	4770      	bx	lr
   810d0:	f04f 0000 	mov.w	r0, #0
}
   810d4:	4770      	bx	lr
   810d6:	bf00      	nop

000810d8 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for SAM3N)
 * or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   810d8:	b4f0      	push	{r4, r5, r6, r7}
   810da:	b08c      	sub	sp, #48	; 0x30
   810dc:	4606      	mov	r6, r0
   810de:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   810e0:	ac01      	add	r4, sp, #4
   810e2:	f24a 65d4 	movw	r5, #42708	; 0xa6d4
   810e6:	f2c0 0508 	movt	r5, #8
   810ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   810ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   810ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   810f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   810f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   810f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   810fa:	9b01      	ldr	r3, [sp, #4]
   810fc:	fbb7 f0f3 	udiv	r0, r7, r3
   81100:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81104:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81108:	d952      	bls.n	811b0 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8110a:	9902      	ldr	r1, [sp, #8]
   8110c:	fbb7 f2f1 	udiv	r2, r7, r1
   81110:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81114:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81118:	d94f      	bls.n	811ba <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8111a:	9b03      	ldr	r3, [sp, #12]
   8111c:	fbb7 f0f3 	udiv	r0, r7, r3
   81120:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81124:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81128:	d94a      	bls.n	811c0 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8112a:	9904      	ldr	r1, [sp, #16]
   8112c:	fbb7 f2f1 	udiv	r2, r7, r1
   81130:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81134:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81138:	d945      	bls.n	811c6 <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8113a:	9b05      	ldr	r3, [sp, #20]
   8113c:	fbb7 f0f3 	udiv	r0, r7, r3
   81140:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81144:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81148:	d940      	bls.n	811cc <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8114a:	9906      	ldr	r1, [sp, #24]
   8114c:	fbb7 f2f1 	udiv	r2, r7, r1
   81150:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81154:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81158:	d93b      	bls.n	811d2 <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8115a:	9b07      	ldr	r3, [sp, #28]
   8115c:	fbb7 f0f3 	udiv	r0, r7, r3
   81160:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81164:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81168:	d936      	bls.n	811d8 <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8116a:	9908      	ldr	r1, [sp, #32]
   8116c:	fbb7 f2f1 	udiv	r2, r7, r1
   81170:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81174:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81178:	d931      	bls.n	811de <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8117a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8117c:	fbb7 f0f3 	udiv	r0, r7, r3
   81180:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81184:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81188:	d92c      	bls.n	811e4 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8118a:	990a      	ldr	r1, [sp, #40]	; 0x28
   8118c:	fbb7 f2f1 	udiv	r2, r7, r1
   81190:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81194:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81198:	d927      	bls.n	811ea <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8119a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8119c:	fbb7 f0f3 	udiv	r0, r7, r3
   811a0:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   811a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   811a8:	d922      	bls.n	811f0 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   811aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
   811ae:	e022      	b.n	811f6 <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   811b0:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   811b4:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   811b8:	e01d      	b.n	811f6 <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   811ba:	f04f 0201 	mov.w	r2, #1
   811be:	e7f9      	b.n	811b4 <pwm_clocks_generate+0xdc>
   811c0:	f04f 0202 	mov.w	r2, #2
   811c4:	e7f6      	b.n	811b4 <pwm_clocks_generate+0xdc>
   811c6:	f04f 0203 	mov.w	r2, #3
   811ca:	e7f3      	b.n	811b4 <pwm_clocks_generate+0xdc>
   811cc:	f04f 0204 	mov.w	r2, #4
   811d0:	e7f0      	b.n	811b4 <pwm_clocks_generate+0xdc>
   811d2:	f04f 0205 	mov.w	r2, #5
   811d6:	e7ed      	b.n	811b4 <pwm_clocks_generate+0xdc>
   811d8:	f04f 0206 	mov.w	r2, #6
   811dc:	e7ea      	b.n	811b4 <pwm_clocks_generate+0xdc>
   811de:	f04f 0207 	mov.w	r2, #7
   811e2:	e7e7      	b.n	811b4 <pwm_clocks_generate+0xdc>
   811e4:	f04f 0208 	mov.w	r2, #8
   811e8:	e7e4      	b.n	811b4 <pwm_clocks_generate+0xdc>
   811ea:	f04f 0209 	mov.w	r2, #9
   811ee:	e7e1      	b.n	811b4 <pwm_clocks_generate+0xdc>
   811f0:	f04f 020a 	mov.w	r2, #10
   811f4:	e7de      	b.n	811b4 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   811f6:	b00c      	add	sp, #48	; 0x30
   811f8:	bcf0      	pop	{r4, r5, r6, r7}
   811fa:	4770      	bx	lr

000811fc <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   811fc:	b570      	push	{r4, r5, r6, lr}
   811fe:	4606      	mov	r6, r0
   81200:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81202:	6808      	ldr	r0, [r1, #0]
   81204:	b158      	cbz	r0, 8121e <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   81206:	6889      	ldr	r1, [r1, #8]
   81208:	f241 03d9 	movw	r3, #4313	; 0x10d9
   8120c:	f2c0 0308 	movt	r3, #8
   81210:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   81212:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81216:	4288      	cmp	r0, r1
   81218:	d014      	beq.n	81244 <pwm_init+0x48>
			return result;
		}

		clock = result;
   8121a:	4605      	mov	r5, r0
   8121c:	e001      	b.n	81222 <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   8121e:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81222:	6860      	ldr	r0, [r4, #4]
   81224:	b158      	cbz	r0, 8123e <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81226:	68a1      	ldr	r1, [r4, #8]
   81228:	f241 02d9 	movw	r2, #4313	; 0x10d9
   8122c:	f2c0 0208 	movt	r2, #8
   81230:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   81232:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81236:	4298      	cmp	r0, r3
   81238:	d004      	beq.n	81244 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   8123a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if SAM3N
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8123e:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81240:	f04f 0000 	mov.w	r0, #0
}
   81244:	bd70      	pop	{r4, r5, r6, pc}
   81246:	bf00      	nop

00081248 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81248:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8124a:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   8124c:	f04f 0201 	mov.w	r2, #1
   81250:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81254:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   81256:	684c      	ldr	r4, [r1, #4]
   81258:	f004 050f 	and.w	r5, r4, #15
   8125c:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8125e:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81260:	4326      	orrs	r6, r4
   81262:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   81264:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   81268:	7d8c      	ldrb	r4, [r1, #22]
   8126a:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8126e:	7dce      	ldrb	r6, [r1, #23]
   81270:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   81274:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   81276:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   8127a:	f103 0510 	add.w	r5, r3, #16
   8127e:	ea4f 1445 	mov.w	r4, r5, lsl #5
   81282:	1905      	adds	r5, r0, r4
   81284:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   81286:	68cc      	ldr	r4, [r1, #12]
   81288:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   8128a:	690c      	ldr	r4, [r1, #16]
   8128c:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   81290:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   81294:	7d8c      	ldrb	r4, [r1, #22]
   81296:	b13c      	cbz	r4, 812a8 <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   81298:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8129a:	8b4c      	ldrh	r4, [r1, #26]
   8129c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   812a0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   812a4:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   812a8:	7fcd      	ldrb	r5, [r1, #31]
   812aa:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   812ae:	7f8c      	ldrb	r4, [r1, #30]
   812b0:	fa04 f403 	lsl.w	r4, r4, r3
   812b4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   812b8:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   812ba:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   812be:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   812c2:	f891 4020 	ldrb.w	r4, [r1, #32]
   812c6:	fa04 f403 	lsl.w	r4, r4, r3
   812ca:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   812ce:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   812d0:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   812d4:	b11c      	cbz	r4, 812de <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   812d6:	6a04      	ldr	r4, [r0, #32]
   812d8:	4314      	orrs	r4, r2
   812da:	6204      	str	r4, [r0, #32]
   812dc:	e003      	b.n	812e6 <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   812de:	6a04      	ldr	r4, [r0, #32]
   812e0:	ea24 0402 	bic.w	r4, r4, r2
   812e4:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   812e6:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   812ea:	2c01      	cmp	r4, #1
   812ec:	d103      	bne.n	812f6 <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   812ee:	6e84      	ldr	r4, [r0, #104]	; 0x68
   812f0:	4314      	orrs	r4, r2
   812f2:	6684      	str	r4, [r0, #104]	; 0x68
   812f4:	e006      	b.n	81304 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   812f6:	6e84      	ldr	r4, [r0, #104]	; 0x68
   812f8:	2a00      	cmp	r2, #0
   812fa:	bf14      	ite	ne
   812fc:	2400      	movne	r4, #0
   812fe:	f004 0401 	andeq.w	r4, r4, #1
   81302:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81304:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81308:	2c01      	cmp	r4, #1
   8130a:	d104      	bne.n	81316 <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8130c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8130e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   81312:	6682      	str	r2, [r0, #104]	; 0x68
   81314:	e006      	b.n	81324 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   81316:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81318:	0412      	lsls	r2, r2, #16
   8131a:	bf14      	ite	ne
   8131c:	2200      	movne	r2, #0
   8131e:	f004 0201 	andeq.w	r2, r4, #1
   81322:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81324:	2b03      	cmp	r3, #3
   81326:	d80f      	bhi.n	81348 <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   81328:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8132a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   8132e:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81332:	fa02 f203 	lsl.w	r2, r2, r3
   81336:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8133a:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8133e:	fa01 f303 	lsl.w	r3, r1, r3
   81342:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81344:	66c2      	str	r2, [r0, #108]	; 0x6c
   81346:	e010      	b.n	8136a <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   81348:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   8134c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8134e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81352:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81356:	fa02 f203 	lsl.w	r2, r2, r3
   8135a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8135e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81362:	fa01 f303 	lsl.w	r3, r1, r3
   81366:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   81368:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   8136a:	f04f 0000 	mov.w	r0, #0
   8136e:	bc70      	pop	{r4, r5, r6}
   81370:	4770      	bx	lr
   81372:	bf00      	nop

00081374 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   81374:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   81376:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   81378:	690b      	ldr	r3, [r1, #16]
   8137a:	4293      	cmp	r3, r2
   8137c:	d307      	bcc.n	8138e <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8137e:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   81380:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   81384:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   81388:	f04f 0000 	mov.w	r0, #0
   8138c:	e001      	b.n	81392 <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   8138e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   81392:	bc10      	pop	{r4}
   81394:	4770      	bx	lr
   81396:	bf00      	nop

00081398 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   81398:	f04f 0301 	mov.w	r3, #1
   8139c:	fa03 f101 	lsl.w	r1, r3, r1
   813a0:	6041      	str	r1, [r0, #4]
   813a2:	4770      	bx	lr

000813a4 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   813a4:	f04f 0301 	mov.w	r3, #1
   813a8:	fa03 f101 	lsl.w	r1, r3, r1
   813ac:	6081      	str	r1, [r0, #8]
   813ae:	4770      	bx	lr

000813b0 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   813b0:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   813b2:	ea4f 1181 	mov.w	r1, r1, lsl #6
   813b6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   813b8:	f04f 0402 	mov.w	r4, #2
   813bc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   813be:	f04f 30ff 	mov.w	r0, #4294967295
   813c2:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   813c4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   813c6:	605a      	str	r2, [r3, #4]
}
   813c8:	bc10      	pop	{r4}
   813ca:	4770      	bx	lr

000813cc <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   813cc:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   813d0:	4770      	bx	lr
   813d2:	bf00      	nop

000813d4 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   813d4:	ea4f 1181 	mov.w	r1, r1, lsl #6
   813d8:	f04f 0302 	mov.w	r3, #2
   813dc:	5043      	str	r3, [r0, r1]
   813de:	4770      	bx	lr

000813e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   813e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   813e2:	f04f 03ac 	mov.w	r3, #172	; 0xac
   813e6:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   813e8:	680a      	ldr	r2, [r1, #0]
   813ea:	684c      	ldr	r4, [r1, #4]
   813ec:	fbb2 f3f4 	udiv	r3, r2, r4
   813f0:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   813f4:	f103 34ff 	add.w	r4, r3, #4294967295
   813f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   813fc:	4294      	cmp	r4, r2
   813fe:	d80c      	bhi.n	8141a <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   81400:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81402:	6889      	ldr	r1, [r1, #8]
   81404:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81406:	f240 2302 	movw	r3, #514	; 0x202
   8140a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8140e:	f04f 0250 	mov.w	r2, #80	; 0x50
   81412:	6002      	str	r2, [r0, #0]

	return 0;
   81414:	f04f 0000 	mov.w	r0, #0
   81418:	e001      	b.n	8141e <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8141a:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8141e:	bc10      	pop	{r4}
   81420:	4770      	bx	lr
   81422:	bf00      	nop

00081424 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81424:	6943      	ldr	r3, [r0, #20]
   81426:	f013 0f02 	tst.w	r3, #2
   8142a:	d003      	beq.n	81434 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8142c:	61c1      	str	r1, [r0, #28]
	return 0;
   8142e:	f04f 0000 	mov.w	r0, #0
   81432:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81434:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81438:	4770      	bx	lr
   8143a:	bf00      	nop

0008143c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8143c:	6943      	ldr	r3, [r0, #20]
   8143e:	f013 0f01 	tst.w	r3, #1
   81442:	d004      	beq.n	8144e <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81444:	6980      	ldr	r0, [r0, #24]
   81446:	7008      	strb	r0, [r1, #0]
	return 0;
   81448:	f04f 0000 	mov.w	r0, #0
   8144c:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8144e:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81452:	4770      	bx	lr

00081454 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81454:	6943      	ldr	r3, [r0, #20]
   81456:	f013 0f02 	tst.w	r3, #2
   8145a:	d007      	beq.n	8146c <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8145c:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   81460:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   81464:	61c2      	str	r2, [r0, #28]
	return 0;
   81466:	f04f 0000 	mov.w	r0, #0
   8146a:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8146c:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81470:	4770      	bx	lr
   81472:	bf00      	nop

00081474 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81474:	6943      	ldr	r3, [r0, #20]
   81476:	f013 0f01 	tst.w	r3, #1
   8147a:	d008      	beq.n	8148e <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8147c:	6980      	ldr	r0, [r0, #24]
   8147e:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   81482:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   81486:	600b      	str	r3, [r1, #0]

	return 0;
   81488:	f04f 0000 	mov.w	r0, #0
   8148c:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8148e:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   81492:	4770      	bx	lr

00081494 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81494:	e7fe      	b.n	81494 <Dummy_Handler>
   81496:	bf00      	nop

00081498 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81498:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8149a:	f240 0300 	movw	r3, #0
   8149e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   814a2:	f64a 22b4 	movw	r2, #43700	; 0xaab4
   814a6:	f2c0 0208 	movt	r2, #8
   814aa:	429a      	cmp	r2, r3
   814ac:	d003      	beq.n	814b6 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   814ae:	4840      	ldr	r0, [pc, #256]	; (815b0 <Reset_Handler+0x118>)
   814b0:	4940      	ldr	r1, [pc, #256]	; (815b4 <Reset_Handler+0x11c>)
   814b2:	4281      	cmp	r1, r0
   814b4:	d304      	bcc.n	814c0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   814b6:	4b40      	ldr	r3, [pc, #256]	; (815b8 <Reset_Handler+0x120>)
   814b8:	4a40      	ldr	r2, [pc, #256]	; (815bc <Reset_Handler+0x124>)
   814ba:	429a      	cmp	r2, r3
   814bc:	d325      	bcc.n	8150a <Reset_Handler+0x72>
   814be:	e042      	b.n	81546 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   814c0:	4d3f      	ldr	r5, [pc, #252]	; (815c0 <Reset_Handler+0x128>)
   814c2:	4c40      	ldr	r4, [pc, #256]	; (815c4 <Reset_Handler+0x12c>)
   814c4:	1b63      	subs	r3, r4, r5
   814c6:	f023 0503 	bic.w	r5, r3, #3
   814ca:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   814ce:	f240 0200 	movw	r2, #0
   814d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   814d6:	f64a 21b4 	movw	r1, #43700	; 0xaab4
   814da:	f2c0 0108 	movt	r1, #8
   814de:	f105 0004 	add.w	r0, r5, #4
   814e2:	f3c5 0480 	ubfx	r4, r5, #2, #1
   814e6:	585d      	ldr	r5, [r3, r1]
   814e8:	509d      	str	r5, [r3, r2]
   814ea:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   814ee:	4283      	cmp	r3, r0
   814f0:	d155      	bne.n	8159e <Reset_Handler+0x106>
   814f2:	e7e0      	b.n	814b6 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   814f4:	585d      	ldr	r5, [r3, r1]
   814f6:	509d      	str	r5, [r3, r2]
   814f8:	f103 0304 	add.w	r3, r3, #4
   814fc:	585c      	ldr	r4, [r3, r1]
   814fe:	509c      	str	r4, [r3, r2]
   81500:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81504:	4283      	cmp	r3, r0
   81506:	d1f5      	bne.n	814f4 <Reset_Handler+0x5c>
   81508:	e7d5      	b.n	814b6 <Reset_Handler+0x1e>
   8150a:	4d2f      	ldr	r5, [pc, #188]	; (815c8 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   8150c:	492f      	ldr	r1, [pc, #188]	; (815cc <Reset_Handler+0x134>)
   8150e:	1b48      	subs	r0, r1, r5
   81510:	f020 0403 	bic.w	r4, r0, #3
   81514:	f640 1300 	movw	r3, #2304	; 0x900
   81518:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8151c:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8151e:	f04f 0100 	mov.w	r1, #0
   81522:	1b50      	subs	r0, r2, r5
   81524:	f1a0 0004 	sub.w	r0, r0, #4
   81528:	f3c0 0480 	ubfx	r4, r0, #2, #1
   8152c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81530:	4295      	cmp	r5, r2
   81532:	d12d      	bne.n	81590 <Reset_Handler+0xf8>
   81534:	e007      	b.n	81546 <Reset_Handler+0xae>
   81536:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   8153a:	6069      	str	r1, [r5, #4]
   8153c:	f105 0508 	add.w	r5, r5, #8
   81540:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81542:	4295      	cmp	r5, r2
   81544:	d1f7      	bne.n	81536 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81546:	f240 0500 	movw	r5, #0
   8154a:	f2c0 0508 	movt	r5, #8
   8154e:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   81552:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   81556:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   8155a:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8155e:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81560:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   81564:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   81568:	d207      	bcs.n	8157a <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8156a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   8156e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81572:	689d      	ldr	r5, [r3, #8]
   81574:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   81578:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8157a:	f643 7105 	movw	r1, #16133	; 0x3f05
   8157e:	f2c0 0108 	movt	r1, #8
   81582:	4788      	blx	r1

	/* Branch to main function */
	main();
   81584:	f243 6009 	movw	r0, #13833	; 0x3609
   81588:	f2c0 0008 	movt	r0, #8
   8158c:	4780      	blx	r0
   8158e:	e7fe      	b.n	8158e <Reset_Handler+0xf6>
   81590:	2c00      	cmp	r4, #0
   81592:	d0d0      	beq.n	81536 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81594:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81598:	4295      	cmp	r5, r2
   8159a:	d1cc      	bne.n	81536 <Reset_Handler+0x9e>
   8159c:	e7d3      	b.n	81546 <Reset_Handler+0xae>
   8159e:	2c00      	cmp	r4, #0
   815a0:	d0a8      	beq.n	814f4 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   815a2:	585c      	ldr	r4, [r3, r1]
   815a4:	509c      	str	r4, [r3, r2]
   815a6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   815aa:	4283      	cmp	r3, r0
   815ac:	d1a2      	bne.n	814f4 <Reset_Handler+0x5c>
   815ae:	e782      	b.n	814b6 <Reset_Handler+0x1e>
   815b0:	20070900 	.word	0x20070900
   815b4:	20070000 	.word	0x20070000
   815b8:	2007ac7c 	.word	0x2007ac7c
   815bc:	20070900 	.word	0x20070900
   815c0:	20070004 	.word	0x20070004
   815c4:	20070903 	.word	0x20070903
   815c8:	200708fc 	.word	0x200708fc
   815cc:	2007ac77 	.word	0x2007ac77

000815d0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   815d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   815d4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   815d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
   815da:	f000 0103 	and.w	r1, r0, #3
   815de:	2903      	cmp	r1, #3
   815e0:	f200 80b1 	bhi.w	81746 <SystemCoreClockUpdate+0x176>
   815e4:	e8df f001 	tbb	[pc, r1]
   815e8:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   815ec:	f641 2010 	movw	r0, #6672	; 0x1a10
   815f0:	f2c4 000e 	movt	r0, #16398	; 0x400e
   815f4:	6941      	ldr	r1, [r0, #20]
   815f6:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   815fa:	f240 0300 	movw	r3, #0
   815fe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81602:	bf14      	ite	ne
   81604:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81608:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8160c:	601a      	str	r2, [r3, #0]
   8160e:	e09a      	b.n	81746 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81610:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81614:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81618:	6a18      	ldr	r0, [r3, #32]
   8161a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   8161e:	d009      	beq.n	81634 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81620:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   81624:	f2c0 03b7 	movt	r3, #183	; 0xb7
   81628:	f240 0200 	movw	r2, #0
   8162c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81630:	6013      	str	r3, [r2, #0]
   81632:	e088      	b.n	81746 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81634:	f44f 6110 	mov.w	r1, #2304	; 0x900
   81638:	f2c0 013d 	movt	r1, #61	; 0x3d
   8163c:	f240 0200 	movw	r2, #0
   81640:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81644:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81646:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8164a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8164e:	6a18      	ldr	r0, [r3, #32]
   81650:	f000 0170 	and.w	r1, r0, #112	; 0x70
   81654:	2910      	cmp	r1, #16
   81656:	d002      	beq.n	8165e <SystemCoreClockUpdate+0x8e>
   81658:	2920      	cmp	r1, #32
   8165a:	d174      	bne.n	81746 <SystemCoreClockUpdate+0x176>
   8165c:	e009      	b.n	81672 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8165e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81662:	f2c0 007a 	movt	r0, #122	; 0x7a
   81666:	f240 0100 	movw	r1, #0
   8166a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8166e:	6008      	str	r0, [r1, #0]
				break;
   81670:	e069      	b.n	81746 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81672:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   81676:	f2c0 03b7 	movt	r3, #183	; 0xb7
   8167a:	f240 0200 	movw	r2, #0
   8167e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81682:	6013      	str	r3, [r2, #0]
				break;
   81684:	e05f      	b.n	81746 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81686:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8168a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8168e:	6a13      	ldr	r3, [r2, #32]
   81690:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81694:	d009      	beq.n	816aa <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81696:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   8169a:	f2c0 01b7 	movt	r1, #183	; 0xb7
   8169e:	f240 0200 	movw	r2, #0
   816a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   816a6:	6011      	str	r1, [r2, #0]
   816a8:	e027      	b.n	816fa <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   816aa:	f44f 6010 	mov.w	r0, #2304	; 0x900
   816ae:	f2c0 003d 	movt	r0, #61	; 0x3d
   816b2:	f240 0100 	movw	r1, #0
   816b6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   816ba:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   816bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   816c0:	f2c4 020e 	movt	r2, #16398	; 0x400e
   816c4:	6a13      	ldr	r3, [r2, #32]
   816c6:	f003 0070 	and.w	r0, r3, #112	; 0x70
   816ca:	2810      	cmp	r0, #16
   816cc:	d002      	beq.n	816d4 <SystemCoreClockUpdate+0x104>
   816ce:	2820      	cmp	r0, #32
   816d0:	d113      	bne.n	816fa <SystemCoreClockUpdate+0x12a>
   816d2:	e009      	b.n	816e8 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   816d4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   816d8:	f2c0 037a 	movt	r3, #122	; 0x7a
   816dc:	f240 0000 	movw	r0, #0
   816e0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   816e4:	6003      	str	r3, [r0, #0]
				break;
   816e6:	e008      	b.n	816fa <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   816e8:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   816ec:	f2c0 01b7 	movt	r1, #183	; 0xb7
   816f0:	f240 0200 	movw	r2, #0
   816f4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   816f8:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   816fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   816fe:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81702:	6b18      	ldr	r0, [r3, #48]	; 0x30
   81704:	f000 0103 	and.w	r1, r0, #3
   81708:	2902      	cmp	r1, #2
   8170a:	d113      	bne.n	81734 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8170c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   81710:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81714:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81716:	6a89      	ldr	r1, [r1, #40]	; 0x28
   81718:	f240 0300 	movw	r3, #0
   8171c:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81720:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81724:	681a      	ldr	r2, [r3, #0]
   81726:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8172a:	b2c9      	uxtb	r1, r1
   8172c:	fbb0 f2f1 	udiv	r2, r0, r1
   81730:	601a      	str	r2, [r3, #0]
   81732:	e008      	b.n	81746 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81734:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   81738:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   8173c:	f240 0200 	movw	r2, #0
   81740:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81744:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81746:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8174a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8174e:	6b10      	ldr	r0, [r2, #48]	; 0x30
   81750:	f000 0170 	and.w	r1, r0, #112	; 0x70
   81754:	2970      	cmp	r1, #112	; 0x70
   81756:	d10e      	bne.n	81776 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   81758:	f240 0300 	movw	r3, #0
   8175c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81760:	6818      	ldr	r0, [r3, #0]
   81762:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   81766:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   8176a:	fba2 0100 	umull	r0, r1, r2, r0
   8176e:	ea4f 0051 	mov.w	r0, r1, lsr #1
   81772:	6018      	str	r0, [r3, #0]
   81774:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81776:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8177a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8177e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81780:	f240 0000 	movw	r0, #0
   81784:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81788:	f3c2 1102 	ubfx	r1, r2, #4, #3
   8178c:	6803      	ldr	r3, [r0, #0]
   8178e:	fa23 f301 	lsr.w	r3, r3, r1
   81792:	6003      	str	r3, [r0, #0]
   81794:	4770      	bx	lr
   81796:	bf00      	nop

00081798 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81798:	f245 239f 	movw	r3, #21151	; 0x529f
   8179c:	f2c0 1357 	movt	r3, #343	; 0x157
   817a0:	4298      	cmp	r0, r3
   817a2:	d80c      	bhi.n	817be <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   817a4:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   817a8:	f2c4 000e 	movt	r0, #16398	; 0x400e
   817ac:	f04f 0100 	mov.w	r1, #0
   817b0:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   817b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   817b6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   817ba:	6019      	str	r1, [r3, #0]
   817bc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   817be:	f64c 417f 	movw	r1, #52351	; 0xcc7f
   817c2:	f2c0 2106 	movt	r1, #518	; 0x206
   817c6:	4288      	cmp	r0, r1
   817c8:	d80c      	bhi.n	817e4 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   817ca:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   817ce:	f2c4 030e 	movt	r3, #16398	; 0x400e
   817d2:	f44f 7180 	mov.w	r1, #256	; 0x100
   817d6:	6019      	str	r1, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   817d8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   817dc:	f2c4 020e 	movt	r2, #16398	; 0x400e
   817e0:	6011      	str	r1, [r2, #0]
   817e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   817e4:	f24b 733f 	movw	r3, #46911	; 0xb73f
   817e8:	f2c0 3328 	movt	r3, #808	; 0x328
   817ec:	4298      	cmp	r0, r3
   817ee:	d80c      	bhi.n	8180a <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   817f0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   817f4:	f2c4 010e 	movt	r1, #16398	; 0x400e
   817f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   817fc:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   817fe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   81802:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81806:	6002      	str	r2, [r0, #0]
   81808:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8180a:	f642 717f 	movw	r1, #12159	; 0x2f7f
   8180e:	f2c0 41a6 	movt	r1, #1190	; 0x4a6
   81812:	4288      	cmp	r0, r1
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   81814:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   81818:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8181c:	bf94      	ite	ls
   8181e:	f44f 7240 	movls.w	r2, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   81822:	f44f 6280 	movhi.w	r2, #1024	; 0x400
   81826:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   81828:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   8182c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81830:	601a      	str	r2, [r3, #0]
   81832:	4770      	bx	lr

00081834 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   81834:	f640 13bc 	movw	r3, #2492	; 0x9bc
   81838:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8183c:	6819      	ldr	r1, [r3, #0]
   8183e:	b941      	cbnz	r1, 81852 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   81840:	f640 13bc 	movw	r3, #2492	; 0x9bc
   81844:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81848:	f64c 4280 	movw	r2, #52352	; 0xcc80
   8184c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81850:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81852:	f640 11bc 	movw	r1, #2492	; 0x9bc
   81856:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8185a:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   8185c:	1818      	adds	r0, r3, r0
   8185e:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   81860:	4618      	mov	r0, r3
   81862:	4770      	bx	lr

00081864 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81864:	f04f 30ff 	mov.w	r0, #4294967295
   81868:	4770      	bx	lr
   8186a:	bf00      	nop

0008186c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8186c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81870:	604b      	str	r3, [r1, #4]

	return 0;
}
   81872:	f04f 0000 	mov.w	r0, #0
   81876:	4770      	bx	lr

00081878 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81878:	f04f 0001 	mov.w	r0, #1
   8187c:	4770      	bx	lr
   8187e:	bf00      	nop

00081880 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81880:	f04f 0000 	mov.w	r0, #0
   81884:	4770      	bx	lr
   81886:	bf00      	nop

00081888 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   81888:	f100 0308 	add.w	r3, r0, #8
   8188c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8188e:	f04f 32ff 	mov.w	r2, #4294967295
   81892:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   81894:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   81896:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   81898:	f04f 0100 	mov.w	r1, #0
   8189c:	6001      	str	r1, [r0, #0]
   8189e:	4770      	bx	lr

000818a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   818a0:	f04f 0300 	mov.w	r3, #0
   818a4:	6103      	str	r3, [r0, #16]
   818a6:	4770      	bx	lr

000818a8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   818a8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   818aa:	685a      	ldr	r2, [r3, #4]
   818ac:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   818ae:	6842      	ldr	r2, [r0, #4]
   818b0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   818b2:	685a      	ldr	r2, [r3, #4]
   818b4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   818b6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   818b8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   818ba:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   818bc:	6801      	ldr	r1, [r0, #0]
   818be:	f101 0101 	add.w	r1, r1, #1
   818c2:	6001      	str	r1, [r0, #0]
   818c4:	4770      	bx	lr
   818c6:	bf00      	nop

000818c8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   818c8:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   818ca:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   818cc:	f1b4 3fff 	cmp.w	r4, #4294967295
   818d0:	d101      	bne.n	818d6 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   818d2:	6903      	ldr	r3, [r0, #16]
   818d4:	e00a      	b.n	818ec <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   818d6:	f100 0308 	add.w	r3, r0, #8
   818da:	68c2      	ldr	r2, [r0, #12]
   818dc:	6812      	ldr	r2, [r2, #0]
   818de:	4294      	cmp	r4, r2
   818e0:	d304      	bcc.n	818ec <vListInsert+0x24>
   818e2:	685b      	ldr	r3, [r3, #4]
   818e4:	685a      	ldr	r2, [r3, #4]
   818e6:	6812      	ldr	r2, [r2, #0]
   818e8:	4294      	cmp	r4, r2
   818ea:	d2fa      	bcs.n	818e2 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   818ec:	685a      	ldr	r2, [r3, #4]
   818ee:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   818f0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   818f2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   818f4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   818f6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   818f8:	6801      	ldr	r1, [r0, #0]
   818fa:	f101 0101 	add.w	r1, r1, #1
   818fe:	6001      	str	r1, [r0, #0]
}
   81900:	bc10      	pop	{r4}
   81902:	4770      	bx	lr

00081904 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81904:	6843      	ldr	r3, [r0, #4]
   81906:	6882      	ldr	r2, [r0, #8]
   81908:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8190a:	6881      	ldr	r1, [r0, #8]
   8190c:	6843      	ldr	r3, [r0, #4]
   8190e:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81910:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81912:	684a      	ldr	r2, [r1, #4]
   81914:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81916:	bf04      	itt	eq
   81918:	6882      	ldreq	r2, [r0, #8]
   8191a:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8191c:	f04f 0300 	mov.w	r3, #0
   81920:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81922:	6808      	ldr	r0, [r1, #0]
   81924:	f100 32ff 	add.w	r2, r0, #4294967295
   81928:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   8192a:	6808      	ldr	r0, [r1, #0]
}
   8192c:	4770      	bx	lr
   8192e:	bf00      	nop

00081930 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81930:	4803      	ldr	r0, [pc, #12]	; (81940 <prvPortStartFirstTask+0x10>)
   81932:	6800      	ldr	r0, [r0, #0]
   81934:	6800      	ldr	r0, [r0, #0]
   81936:	f380 8808 	msr	MSP, r0
   8193a:	b662      	cpsie	i
   8193c:	df00      	svc	0
   8193e:	bf00      	nop
   81940:	e000ed08 	.word	0xe000ed08

00081944 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   81944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81948:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   8194c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   81950:	f04f 0100 	mov.w	r1, #0
   81954:	f840 1c0c 	str.w	r1, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   81958:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   8195c:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
   81960:	4770      	bx	lr
   81962:	bf00      	nop

00081964 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81964:	4b06      	ldr	r3, [pc, #24]	; (81980 <pxCurrentTCBConst2>)
   81966:	6819      	ldr	r1, [r3, #0]
   81968:	6808      	ldr	r0, [r1, #0]
   8196a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8196e:	f380 8809 	msr	PSP, r0
   81972:	f04f 0000 	mov.w	r0, #0
   81976:	f380 8811 	msr	BASEPRI, r0
   8197a:	f04e 0e0d 	orr.w	lr, lr, #13
   8197e:	4770      	bx	lr

00081980 <pxCurrentTCBConst2>:
   81980:	2007aa84 	.word	0x2007aa84

00081984 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81984:	f64e 5304 	movw	r3, #60676	; 0xed04
   81988:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8198c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81990:	601a      	str	r2, [r3, #0]
   81992:	4770      	bx	lr

00081994 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81994:	f3ef 8011 	mrs	r0, BASEPRI
   81998:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8199c:	f381 8811 	msr	BASEPRI, r1
   819a0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   819a2:	f04f 0000 	mov.w	r0, #0
   819a6:	bf00      	nop

000819a8 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   819a8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   819aa:	f641 1395 	movw	r3, #6549	; 0x1995
   819ae:	f2c0 0308 	movt	r3, #8
   819b2:	4798      	blx	r3
	uxCriticalNesting++;
   819b4:	f240 0004 	movw	r0, #4
   819b8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   819bc:	6802      	ldr	r2, [r0, #0]
   819be:	f102 0201 	add.w	r2, r2, #1
   819c2:	6002      	str	r2, [r0, #0]
   819c4:	bd08      	pop	{r3, pc}
   819c6:	bf00      	nop

000819c8 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   819c8:	f380 8811 	msr	BASEPRI, r0
   819cc:	4770      	bx	lr
   819ce:	bf00      	nop

000819d0 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   819d0:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   819d2:	f240 0204 	movw	r2, #4
   819d6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   819da:	6813      	ldr	r3, [r2, #0]
   819dc:	f103 30ff 	add.w	r0, r3, #4294967295
   819e0:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
   819e2:	b930      	cbnz	r0, 819f2 <vPortExitCritical+0x22>
	{
		portENABLE_INTERRUPTS();
   819e4:	f04f 0000 	mov.w	r0, #0
   819e8:	f641 11c9 	movw	r1, #6601	; 0x19c9
   819ec:	f2c0 0108 	movt	r1, #8
   819f0:	4788      	blx	r1
   819f2:	bd08      	pop	{r3, pc}

000819f4 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   819f4:	f3ef 8009 	mrs	r0, PSP
   819f8:	4b0c      	ldr	r3, [pc, #48]	; (81a2c <pxCurrentTCBConst>)
   819fa:	681a      	ldr	r2, [r3, #0]
   819fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81a00:	6010      	str	r0, [r2, #0]
   81a02:	e92d 4008 	stmdb	sp!, {r3, lr}
   81a06:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81a0a:	f380 8811 	msr	BASEPRI, r0
   81a0e:	f001 f877 	bl	82b00 <vTaskSwitchContext>
   81a12:	f04f 0000 	mov.w	r0, #0
   81a16:	f380 8811 	msr	BASEPRI, r0
   81a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81a1e:	6819      	ldr	r1, [r3, #0]
   81a20:	6808      	ldr	r0, [r1, #0]
   81a22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81a26:	f380 8809 	msr	PSP, r0
   81a2a:	4770      	bx	lr

00081a2c <pxCurrentTCBConst>:
   81a2c:	2007aa84 	.word	0x2007aa84

00081a30 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81a30:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81a32:	f64e 5304 	movw	r3, #60676	; 0xed04
   81a36:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81a3e:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81a40:	f641 1095 	movw	r0, #6549	; 0x1995
   81a44:	f2c0 0008 	movt	r0, #8
   81a48:	4780      	blx	r0
	{
		vTaskIncrementTick();
   81a4a:	f242 61d1 	movw	r1, #9937	; 0x26d1
   81a4e:	f2c0 0108 	movt	r1, #8
   81a52:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81a54:	f04f 0000 	mov.w	r0, #0
   81a58:	f641 13c9 	movw	r3, #6601	; 0x19c9
   81a5c:	f2c0 0308 	movt	r3, #8
   81a60:	4798      	blx	r3
   81a62:	bd08      	pop	{r3, pc}

00081a64 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   81a64:	f24e 0314 	movw	r3, #57364	; 0xe014
   81a68:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81a6c:	f644 021f 	movw	r2, #18463	; 0x481f
   81a70:	f2c0 0201 	movt	r2, #1
   81a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   81a76:	f24e 0010 	movw	r0, #57360	; 0xe010
   81a7a:	f2ce 0000 	movt	r0, #57344	; 0xe000
   81a7e:	f04f 0107 	mov.w	r1, #7
   81a82:	6001      	str	r1, [r0, #0]
   81a84:	4770      	bx	lr
   81a86:	bf00      	nop

00081a88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   81a88:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   81a8a:	f64e 5320 	movw	r3, #60704	; 0xed20
   81a8e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81a92:	681a      	ldr	r2, [r3, #0]
   81a94:	f442 0070 	orr.w	r0, r2, #15728640	; 0xf00000
   81a98:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81a9a:	6819      	ldr	r1, [r3, #0]
   81a9c:	f041 4470 	orr.w	r4, r1, #4026531840	; 0xf0000000
   81aa0:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81aa2:	f641 2365 	movw	r3, #6757	; 0x1a65
   81aa6:	f2c0 0308 	movt	r3, #8
   81aaa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81aac:	f04f 0400 	mov.w	r4, #0
   81ab0:	f240 0204 	movw	r2, #4
   81ab4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81ab8:	6014      	str	r4, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   81aba:	f641 1031 	movw	r0, #6449	; 0x1931
   81abe:	f2c0 0008 	movt	r0, #8
   81ac2:	4780      	blx	r0

	/* Should not get here! */
	return 0;
}
   81ac4:	4620      	mov	r0, r4
   81ac6:	bd10      	pop	{r4, pc}

00081ac8 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   81ac8:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   81aca:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   81ace:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81ad2:	e000      	b.n	81ad6 <prvInsertBlockIntoFreeList+0xe>
   81ad4:	461a      	mov	r2, r3
   81ad6:	6813      	ldr	r3, [r2, #0]
   81ad8:	4283      	cmp	r3, r0
   81ada:	d3fb      	bcc.n	81ad4 <prvInsertBlockIntoFreeList+0xc>
   81adc:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81ade:	6854      	ldr	r4, [r2, #4]
   81ae0:	1915      	adds	r5, r2, r4
   81ae2:	4285      	cmp	r5, r0
   81ae4:	d103      	bne.n	81aee <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81ae6:	6868      	ldr	r0, [r5, #4]
   81ae8:	1904      	adds	r4, r0, r4
   81aea:	6054      	str	r4, [r2, #4]
   81aec:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81aee:	6842      	ldr	r2, [r0, #4]
   81af0:	1884      	adds	r4, r0, r2
   81af2:	42a3      	cmp	r3, r4
   81af4:	d10f      	bne.n	81b16 <prvInsertBlockIntoFreeList+0x4e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81af6:	f64a 14c0 	movw	r4, #43456	; 0xa9c0
   81afa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81afe:	6824      	ldr	r4, [r4, #0]
   81b00:	429c      	cmp	r4, r3
   81b02:	d006      	beq.n	81b12 <prvInsertBlockIntoFreeList+0x4a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81b04:	685b      	ldr	r3, [r3, #4]
   81b06:	189a      	adds	r2, r3, r2
   81b08:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81b0a:	680b      	ldr	r3, [r1, #0]
   81b0c:	681a      	ldr	r2, [r3, #0]
   81b0e:	6002      	str	r2, [r0, #0]
   81b10:	e002      	b.n	81b18 <prvInsertBlockIntoFreeList+0x50>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   81b12:	6003      	str	r3, [r0, #0]
   81b14:	e000      	b.n	81b18 <prvInsertBlockIntoFreeList+0x50>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   81b16:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81b18:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81b1a:	bf18      	it	ne
   81b1c:	6008      	strne	r0, [r1, #0]
	}
}
   81b1e:	bc30      	pop	{r4, r5}
   81b20:	4770      	bx	lr
   81b22:	bf00      	nop

00081b24 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81b24:	b538      	push	{r3, r4, r5, lr}
   81b26:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81b28:	f242 6399 	movw	r3, #9881	; 0x2699
   81b2c:	f2c0 0308 	movt	r3, #8
   81b30:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81b32:	f64a 10c0 	movw	r0, #43456	; 0xa9c0
   81b36:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b3a:	6801      	ldr	r1, [r0, #0]
   81b3c:	bb21      	cbnz	r1, 81b88 <pvPortMalloc+0x64>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   81b3e:	f64a 12c4 	movw	r2, #43460	; 0xa9c4
   81b42:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81b46:	f640 13c0 	movw	r3, #2496	; 0x9c0
   81b4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b4e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81b50:	f04f 0100 	mov.w	r1, #0
   81b54:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   81b56:	f503 421f 	add.w	r2, r3, #40704	; 0x9f00
   81b5a:	f102 00f0 	add.w	r0, r2, #240	; 0xf0
   81b5e:	f64a 15c0 	movw	r5, #43456	; 0xa9c0
   81b62:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81b66:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   81b68:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
	pxEnd->pxNextFreeBlock = NULL;
   81b6c:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   81b70:	f649 71f0 	movw	r1, #40944	; 0x9ff0
   81b74:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81b76:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   81b78:	f240 0308 	movw	r3, #8
   81b7c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b80:	681a      	ldr	r2, [r3, #0]
   81b82:	f1a2 0210 	sub.w	r2, r2, #16
   81b86:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   81b88:	2c00      	cmp	r4, #0
   81b8a:	d03c      	beq.n	81c06 <pvPortMalloc+0xe2>
		{
			xWantedSize += heapSTRUCT_SIZE;
   81b8c:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   81b90:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81b94:	bf1c      	itt	ne
   81b96:	f022 0207 	bicne.w	r2, r2, #7
   81b9a:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81b9c:	f102 30ff 	add.w	r0, r2, #4294967295
   81ba0:	f649 75fe 	movw	r5, #40958	; 0x9ffe
   81ba4:	42a8      	cmp	r0, r5
   81ba6:	d831      	bhi.n	81c0c <pvPortMalloc+0xe8>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   81ba8:	f64a 11c4 	movw	r1, #43460	; 0xa9c4
   81bac:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bb0:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81bb2:	e001      	b.n	81bb8 <pvPortMalloc+0x94>
   81bb4:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81bb6:	4604      	mov	r4, r0
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81bb8:	6863      	ldr	r3, [r4, #4]
   81bba:	429a      	cmp	r2, r3
   81bbc:	d902      	bls.n	81bc4 <pvPortMalloc+0xa0>
   81bbe:	6820      	ldr	r0, [r4, #0]
   81bc0:	2800      	cmp	r0, #0
   81bc2:	d1f7      	bne.n	81bb4 <pvPortMalloc+0x90>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81bc4:	f64a 15c0 	movw	r5, #43456	; 0xa9c0
   81bc8:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81bcc:	682b      	ldr	r3, [r5, #0]
   81bce:	429c      	cmp	r4, r3
   81bd0:	d01f      	beq.n	81c12 <pvPortMalloc+0xee>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   81bd2:	680d      	ldr	r5, [r1, #0]
   81bd4:	f105 0510 	add.w	r5, r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81bd8:	6820      	ldr	r0, [r4, #0]
   81bda:	6008      	str	r0, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81bdc:	6861      	ldr	r1, [r4, #4]
   81bde:	1a8b      	subs	r3, r1, r2
   81be0:	2b20      	cmp	r3, #32
   81be2:	d907      	bls.n	81bf4 <pvPortMalloc+0xd0>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   81be4:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81be6:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81be8:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81bea:	f641 22c9 	movw	r2, #6857	; 0x1ac9
   81bee:	f2c0 0208 	movt	r2, #8
   81bf2:	4790      	blx	r2
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81bf4:	f240 0008 	movw	r0, #8
   81bf8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81bfc:	6803      	ldr	r3, [r0, #0]
   81bfe:	6861      	ldr	r1, [r4, #4]
   81c00:	1a5a      	subs	r2, r3, r1
   81c02:	6002      	str	r2, [r0, #0]
   81c04:	e007      	b.n	81c16 <pvPortMalloc+0xf2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81c06:	f04f 0500 	mov.w	r5, #0
   81c0a:	e004      	b.n	81c16 <pvPortMalloc+0xf2>
   81c0c:	f04f 0500 	mov.w	r5, #0
   81c10:	e001      	b.n	81c16 <pvPortMalloc+0xf2>
   81c12:	f04f 0500 	mov.w	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   81c16:	f642 0061 	movw	r0, #10337	; 0x2861
   81c1a:	f2c0 0008 	movt	r0, #8
   81c1e:	4780      	blx	r0
		}
	}
	#endif

	return pvReturn;
}
   81c20:	4628      	mov	r0, r5
   81c22:	bd38      	pop	{r3, r4, r5, pc}

00081c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81c24:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81c26:	4604      	mov	r4, r0
   81c28:	b1c8      	cbz	r0, 81c5e <vPortFree+0x3a>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   81c2a:	f242 6399 	movw	r3, #9881	; 0x2699
   81c2e:	f2c0 0308 	movt	r3, #8
   81c32:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   81c34:	f240 0008 	movw	r0, #8
   81c38:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81c3c:	6801      	ldr	r1, [r0, #0]
   81c3e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   81c42:	188b      	adds	r3, r1, r2
   81c44:	6003      	str	r3, [r0, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   81c46:	f1a4 0010 	sub.w	r0, r4, #16
   81c4a:	f641 21c9 	movw	r1, #6857	; 0x1ac9
   81c4e:	f2c0 0108 	movt	r1, #8
   81c52:	4788      	blx	r1
		}
		xTaskResumeAll();
   81c54:	f642 0061 	movw	r0, #10337	; 0x2861
   81c58:	f2c0 0008 	movt	r0, #8
   81c5c:	4780      	blx	r0
   81c5e:	bd10      	pop	{r4, pc}

00081c60 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81c62:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81c64:	f641 13a9 	movw	r3, #6569	; 0x19a9
   81c68:	f2c0 0308 	movt	r3, #8
   81c6c:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81c6e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81c70:	2800      	cmp	r0, #0
   81c72:	dd1a      	ble.n	81caa <prvUnlockQueue+0x4a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81c74:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81c76:	b919      	cbnz	r1, 81c80 <prvUnlockQueue+0x20>
   81c78:	e017      	b.n	81caa <prvUnlockQueue+0x4a>
   81c7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81c7c:	b951      	cbnz	r1, 81c94 <prvUnlockQueue+0x34>
   81c7e:	e014      	b.n	81caa <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81c80:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81c84:	f642 4589 	movw	r5, #11401	; 0x2c89
   81c88:	f2c0 0508 	movt	r5, #8
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81c8c:	f642 670d 	movw	r7, #11789	; 0x2e0d
   81c90:	f2c0 0708 	movt	r7, #8
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81c94:	4630      	mov	r0, r6
   81c96:	47a8      	blx	r5
   81c98:	b100      	cbz	r0, 81c9c <prvUnlockQueue+0x3c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81c9a:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81c9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   81c9e:	f102 33ff 	add.w	r3, r2, #4294967295
   81ca2:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81ca4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81ca6:	2800      	cmp	r0, #0
   81ca8:	dce7      	bgt.n	81c7a <prvUnlockQueue+0x1a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81caa:	f04f 32ff 	mov.w	r2, #4294967295
   81cae:	64a2      	str	r2, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81cb0:	f641 13d1 	movw	r3, #6609	; 0x19d1
   81cb4:	f2c0 0308 	movt	r3, #8
   81cb8:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81cba:	f641 10a9 	movw	r0, #6569	; 0x19a9
   81cbe:	f2c0 0008 	movt	r0, #8
   81cc2:	4780      	blx	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81cc4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81cc6:	2900      	cmp	r1, #0
   81cc8:	dd1a      	ble.n	81d00 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81cca:	6922      	ldr	r2, [r4, #16]
   81ccc:	b91a      	cbnz	r2, 81cd6 <prvUnlockQueue+0x76>
   81cce:	e017      	b.n	81d00 <prvUnlockQueue+0xa0>
   81cd0:	6922      	ldr	r2, [r4, #16]
   81cd2:	b952      	cbnz	r2, 81cea <prvUnlockQueue+0x8a>
   81cd4:	e014      	b.n	81d00 <prvUnlockQueue+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81cd6:	f104 0610 	add.w	r6, r4, #16
   81cda:	f642 4589 	movw	r5, #11401	; 0x2c89
   81cde:	f2c0 0508 	movt	r5, #8
				{
					vTaskMissedYield();
   81ce2:	f642 670d 	movw	r7, #11789	; 0x2e0d
   81ce6:	f2c0 0708 	movt	r7, #8
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81cea:	4630      	mov	r0, r6
   81cec:	47a8      	blx	r5
   81cee:	b100      	cbz	r0, 81cf2 <prvUnlockQueue+0x92>
				{
					vTaskMissedYield();
   81cf0:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81cf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81cf4:	f103 30ff 	add.w	r0, r3, #4294967295
   81cf8:	6460      	str	r0, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81cfa:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81cfc:	2900      	cmp	r1, #0
   81cfe:	dce7      	bgt.n	81cd0 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81d00:	f04f 33ff 	mov.w	r3, #4294967295
   81d04:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81d06:	f641 10d1 	movw	r0, #6609	; 0x19d1
   81d0a:	f2c0 0008 	movt	r0, #8
   81d0e:	4780      	blx	r0
   81d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d12:	bf00      	nop

00081d14 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81d14:	b538      	push	{r3, r4, r5, lr}
   81d16:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81d18:	6805      	ldr	r5, [r0, #0]
   81d1a:	b175      	cbz	r5, 81d3a <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81d1c:	6c02      	ldr	r2, [r0, #64]	; 0x40
   81d1e:	68c4      	ldr	r4, [r0, #12]
   81d20:	18a4      	adds	r4, r4, r2
   81d22:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81d24:	6840      	ldr	r0, [r0, #4]
   81d26:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81d28:	bf28      	it	cs
   81d2a:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81d2c:	4608      	mov	r0, r1
   81d2e:	68d9      	ldr	r1, [r3, #12]
   81d30:	f643 7391 	movw	r3, #16273	; 0x3f91
   81d34:	f2c0 0308 	movt	r3, #8
   81d38:	4798      	blx	r3
   81d3a:	bd38      	pop	{r3, r4, r5, pc}

00081d3c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   81d3c:	b510      	push	{r4, lr}
   81d3e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81d40:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81d42:	b963      	cbnz	r3, 81d5e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81d44:	6801      	ldr	r1, [r0, #0]
   81d46:	2900      	cmp	r1, #0
   81d48:	d12e      	bne.n	81da8 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81d4a:	6840      	ldr	r0, [r0, #4]
   81d4c:	f642 63f9 	movw	r3, #12025	; 0x2ef9
   81d50:	f2c0 0308 	movt	r3, #8
   81d54:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   81d56:	f04f 0000 	mov.w	r0, #0
   81d5a:	6060      	str	r0, [r4, #4]
   81d5c:	e024      	b.n	81da8 <prvCopyDataToQueue+0x6c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81d5e:	b982      	cbnz	r2, 81d82 <prvCopyDataToQueue+0x46>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81d60:	6880      	ldr	r0, [r0, #8]
   81d62:	461a      	mov	r2, r3
   81d64:	f643 7391 	movw	r3, #16273	; 0x3f91
   81d68:	f2c0 0308 	movt	r3, #8
   81d6c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81d6e:	68a2      	ldr	r2, [r4, #8]
   81d70:	6c21      	ldr	r1, [r4, #64]	; 0x40
   81d72:	1850      	adds	r0, r2, r1
   81d74:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81d76:	6863      	ldr	r3, [r4, #4]
   81d78:	4298      	cmp	r0, r3
   81d7a:	d315      	bcc.n	81da8 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81d7c:	6822      	ldr	r2, [r4, #0]
   81d7e:	60a2      	str	r2, [r4, #8]
   81d80:	e012      	b.n	81da8 <prvCopyDataToQueue+0x6c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81d82:	68c0      	ldr	r0, [r0, #12]
   81d84:	461a      	mov	r2, r3
   81d86:	f643 7391 	movw	r3, #16273	; 0x3f91
   81d8a:	f2c0 0308 	movt	r3, #8
   81d8e:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   81d90:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81d92:	f1c2 0000 	rsb	r0, r2, #0
   81d96:	68e1      	ldr	r1, [r4, #12]
   81d98:	180b      	adds	r3, r1, r0
   81d9a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81d9c:	6822      	ldr	r2, [r4, #0]
   81d9e:	4293      	cmp	r3, r2
   81da0:	d202      	bcs.n	81da8 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81da2:	6861      	ldr	r1, [r4, #4]
   81da4:	1808      	adds	r0, r1, r0
   81da6:	60e0      	str	r0, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81da8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81daa:	f102 0201 	add.w	r2, r2, #1
   81dae:	63a2      	str	r2, [r4, #56]	; 0x38
   81db0:	bd10      	pop	{r4, pc}
   81db2:	bf00      	nop

00081db4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81db4:	b538      	push	{r3, r4, r5, lr}
   81db6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81db8:	4604      	mov	r4, r0
   81dba:	b930      	cbnz	r0, 81dca <xQueueGenericReset+0x16>
   81dbc:	f641 1495 	movw	r4, #6549	; 0x1995
   81dc0:	f2c0 0408 	movt	r4, #8
   81dc4:	47a0      	blx	r4
   81dc6:	bf00      	nop
   81dc8:	e7fd      	b.n	81dc6 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   81dca:	f641 13a9 	movw	r3, #6569	; 0x19a9
   81dce:	f2c0 0308 	movt	r3, #8
   81dd2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81dd4:	6823      	ldr	r3, [r4, #0]
   81dd6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81dd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81dda:	fb00 3102 	mla	r1, r0, r2, r3
   81dde:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81de0:	f04f 0100 	mov.w	r1, #0
   81de4:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81de6:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81de8:	f100 30ff 	add.w	r0, r0, #4294967295
   81dec:	fb02 3300 	mla	r3, r2, r0, r3
   81df0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81df2:	f04f 32ff 	mov.w	r2, #4294967295
   81df6:	6462      	str	r2, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81df8:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81dfa:	b985      	cbnz	r5, 81e1e <xQueueGenericReset+0x6a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81dfc:	6921      	ldr	r1, [r4, #16]
   81dfe:	b1c1      	cbz	r1, 81e32 <xQueueGenericReset+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81e00:	f104 0010 	add.w	r0, r4, #16
   81e04:	f642 4389 	movw	r3, #11401	; 0x2c89
   81e08:	f2c0 0308 	movt	r3, #8
   81e0c:	4798      	blx	r3
   81e0e:	2801      	cmp	r0, #1
   81e10:	d10f      	bne.n	81e32 <xQueueGenericReset+0x7e>
				{
					portYIELD_WITHIN_API();
   81e12:	f641 1085 	movw	r0, #6533	; 0x1985
   81e16:	f2c0 0008 	movt	r0, #8
   81e1a:	4780      	blx	r0
   81e1c:	e009      	b.n	81e32 <xQueueGenericReset+0x7e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81e1e:	f104 0010 	add.w	r0, r4, #16
   81e22:	f641 0589 	movw	r5, #6281	; 0x1889
   81e26:	f2c0 0508 	movt	r5, #8
   81e2a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81e2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81e30:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81e32:	f641 12d1 	movw	r2, #6609	; 0x19d1
   81e36:	f2c0 0208 	movt	r2, #8
   81e3a:	4790      	blx	r2

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81e3c:	f04f 0001 	mov.w	r0, #1
   81e40:	bd38      	pop	{r3, r4, r5, pc}
   81e42:	bf00      	nop

00081e44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e46:	460d      	mov	r5, r1
   81e48:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81e4a:	4606      	mov	r6, r0
   81e4c:	b1e0      	cbz	r0, 81e88 <xQueueGenericCreate+0x44>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81e4e:	f04f 0050 	mov.w	r0, #80	; 0x50
   81e52:	f641 3325 	movw	r3, #6949	; 0x1b25
   81e56:	f2c0 0308 	movt	r3, #8
   81e5a:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81e5c:	4604      	mov	r4, r0
   81e5e:	b198      	cbz	r0, 81e88 <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81e60:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81e64:	f100 0001 	add.w	r0, r0, #1
   81e68:	f641 3125 	movw	r1, #6949	; 0x1b25
   81e6c:	f2c0 0108 	movt	r1, #8
   81e70:	4788      	blx	r1
   81e72:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81e74:	b970      	cbnz	r0, 81e94 <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81e76:	4620      	mov	r0, r4
   81e78:	f641 4225 	movw	r2, #7205	; 0x1c25
   81e7c:	f2c0 0208 	movt	r2, #8
   81e80:	4790      	blx	r2
   81e82:	e001      	b.n	81e88 <xQueueGenericCreate+0x44>
			}
		}
	}

	configASSERT( xReturn );
   81e84:	bf00      	nop
   81e86:	e7fd      	b.n	81e84 <xQueueGenericCreate+0x40>
   81e88:	f641 1095 	movw	r0, #6549	; 0x1995
   81e8c:	f2c0 0008 	movt	r0, #8
   81e90:	4780      	blx	r0
   81e92:	e7f7      	b.n	81e84 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81e94:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81e96:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81e98:	4620      	mov	r0, r4
   81e9a:	f04f 0101 	mov.w	r1, #1
   81e9e:	f641 53b5 	movw	r3, #7605	; 0x1db5
   81ea2:	f2c0 0308 	movt	r3, #8
   81ea6:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81ea8:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81eac:	4620      	mov	r0, r4
   81eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081eb0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81eb4:	b085      	sub	sp, #20
   81eb6:	468a      	mov	sl, r1
   81eb8:	9201      	str	r2, [sp, #4]
   81eba:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81ebc:	4604      	mov	r4, r0
   81ebe:	b930      	cbnz	r0, 81ece <xQueueGenericSend+0x1e>
   81ec0:	f641 1495 	movw	r4, #6549	; 0x1995
   81ec4:	f2c0 0408 	movt	r4, #8
   81ec8:	47a0      	blx	r4
   81eca:	bf00      	nop
   81ecc:	e7fd      	b.n	81eca <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81ece:	b941      	cbnz	r1, 81ee2 <xQueueGenericSend+0x32>
   81ed0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81ed2:	b14b      	cbz	r3, 81ee8 <xQueueGenericSend+0x38>
   81ed4:	f641 1095 	movw	r0, #6549	; 0x1995
   81ed8:	f2c0 0008 	movt	r0, #8
   81edc:	4780      	blx	r0
   81ede:	bf00      	nop
   81ee0:	e7fd      	b.n	81ede <xQueueGenericSend+0x2e>
   81ee2:	f04f 0700 	mov.w	r7, #0
   81ee6:	e001      	b.n	81eec <xQueueGenericSend+0x3c>
   81ee8:	f04f 0700 	mov.w	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81eec:	f641 16a9 	movw	r6, #6569	; 0x19a9
   81ef0:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81ef4:	f642 5b31 	movw	fp, #11569	; 0x2d31
   81ef8:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81efc:	f641 15d1 	movw	r5, #6609	; 0x19d1
   81f00:	f2c0 0508 	movt	r5, #8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81f04:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81f06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81f08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   81f0a:	428a      	cmp	r2, r1
   81f0c:	d21f      	bcs.n	81f4e <xQueueGenericSend+0x9e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81f0e:	4620      	mov	r0, r4
   81f10:	4651      	mov	r1, sl
   81f12:	9a00      	ldr	r2, [sp, #0]
   81f14:	f641 533d 	movw	r3, #7485	; 0x1d3d
   81f18:	f2c0 0308 	movt	r3, #8
   81f1c:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81f1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81f20:	b169      	cbz	r1, 81f3e <xQueueGenericSend+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81f22:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81f26:	f642 4289 	movw	r2, #11401	; 0x2c89
   81f2a:	f2c0 0208 	movt	r2, #8
   81f2e:	4790      	blx	r2
   81f30:	2801      	cmp	r0, #1
   81f32:	d104      	bne.n	81f3e <xQueueGenericSend+0x8e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81f34:	f641 1085 	movw	r0, #6533	; 0x1985
   81f38:	f2c0 0008 	movt	r0, #8
   81f3c:	4780      	blx	r0
					}
				}

				taskEXIT_CRITICAL();
   81f3e:	f641 13d1 	movw	r3, #6609	; 0x19d1
   81f42:	f2c0 0308 	movt	r3, #8
   81f46:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81f48:	f04f 0001 	mov.w	r0, #1
   81f4c:	e066      	b.n	8201c <xQueueGenericSend+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81f4e:	9b01      	ldr	r3, [sp, #4]
   81f50:	b93b      	cbnz	r3, 81f62 <xQueueGenericSend+0xb2>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81f52:	f641 12d1 	movw	r2, #6609	; 0x19d1
   81f56:	f2c0 0208 	movt	r2, #8
   81f5a:	4790      	blx	r2

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81f5c:	f04f 0000 	mov.w	r0, #0
   81f60:	e05c      	b.n	8201c <xQueueGenericSend+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
   81f62:	b91f      	cbnz	r7, 81f6c <xQueueGenericSend+0xbc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81f64:	a802      	add	r0, sp, #8
   81f66:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81f68:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81f6c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81f6e:	f242 6099 	movw	r0, #9881	; 0x2699
   81f72:	f2c0 0008 	movt	r0, #8
   81f76:	4780      	blx	r0
		prvLockQueue( pxQueue );
   81f78:	47b0      	blx	r6
   81f7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   81f7c:	f1b2 3fff 	cmp.w	r2, #4294967295
   81f80:	bf04      	itt	eq
   81f82:	2200      	moveq	r2, #0
   81f84:	6462      	streq	r2, [r4, #68]	; 0x44
   81f86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81f88:	f1b1 3fff 	cmp.w	r1, #4294967295
   81f8c:	bf04      	itt	eq
   81f8e:	2100      	moveq	r1, #0
   81f90:	64a1      	streq	r1, [r4, #72]	; 0x48
   81f92:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81f94:	a802      	add	r0, sp, #8
   81f96:	a901      	add	r1, sp, #4
   81f98:	f642 5361 	movw	r3, #11617	; 0x2d61
   81f9c:	f2c0 0308 	movt	r3, #8
   81fa0:	4798      	blx	r3
   81fa2:	bb70      	cbnz	r0, 82002 <xQueueGenericSend+0x152>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81fa4:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81fa6:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81faa:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81fae:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81fb0:	45c1      	cmp	r9, r8
   81fb2:	d11a      	bne.n	81fea <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81fb4:	f104 0010 	add.w	r0, r4, #16
   81fb8:	9901      	ldr	r1, [sp, #4]
   81fba:	f642 32c1 	movw	r2, #11201	; 0x2bc1
   81fbe:	f2c0 0208 	movt	r2, #8
   81fc2:	4790      	blx	r2
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81fc4:	4620      	mov	r0, r4
   81fc6:	f641 4161 	movw	r1, #7265	; 0x1c61
   81fca:	f2c0 0108 	movt	r1, #8
   81fce:	4788      	blx	r1
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81fd0:	f642 0061 	movw	r0, #10337	; 0x2861
   81fd4:	f2c0 0008 	movt	r0, #8
   81fd8:	4780      	blx	r0
   81fda:	2800      	cmp	r0, #0
   81fdc:	d192      	bne.n	81f04 <xQueueGenericSend+0x54>
				{
					portYIELD_WITHIN_API();
   81fde:	f641 1385 	movw	r3, #6533	; 0x1985
   81fe2:	f2c0 0308 	movt	r3, #8
   81fe6:	4798      	blx	r3
   81fe8:	e78c      	b.n	81f04 <xQueueGenericSend+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81fea:	4620      	mov	r0, r4
   81fec:	f641 4161 	movw	r1, #7265	; 0x1c61
   81ff0:	f2c0 0108 	movt	r1, #8
   81ff4:	4788      	blx	r1
				( void ) xTaskResumeAll();
   81ff6:	f642 0361 	movw	r3, #10337	; 0x2861
   81ffa:	f2c0 0308 	movt	r3, #8
   81ffe:	4798      	blx	r3
   82000:	e780      	b.n	81f04 <xQueueGenericSend+0x54>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   82002:	4620      	mov	r0, r4
   82004:	f641 4261 	movw	r2, #7265	; 0x1c61
   82008:	f2c0 0208 	movt	r2, #8
   8200c:	4790      	blx	r2
			( void ) xTaskResumeAll();
   8200e:	f642 0061 	movw	r0, #10337	; 0x2861
   82012:	f2c0 0008 	movt	r0, #8
   82016:	4780      	blx	r0

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   82018:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   8201c:	b005      	add	sp, #20
   8201e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82022:	bf00      	nop

00082024 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   82024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82028:	460e      	mov	r6, r1
   8202a:	4615      	mov	r5, r2
   8202c:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   8202e:	4604      	mov	r4, r0
   82030:	b930      	cbnz	r0, 82040 <xQueueGenericSendFromISR+0x1c>
   82032:	f641 1595 	movw	r5, #6549	; 0x1995
   82036:	f2c0 0508 	movt	r5, #8
   8203a:	47a8      	blx	r5
   8203c:	bf00      	nop
   8203e:	e7fd      	b.n	8203c <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   82040:	b941      	cbnz	r1, 82054 <xQueueGenericSendFromISR+0x30>
   82042:	6c03      	ldr	r3, [r0, #64]	; 0x40
   82044:	b133      	cbz	r3, 82054 <xQueueGenericSendFromISR+0x30>
   82046:	f641 1095 	movw	r0, #6549	; 0x1995
   8204a:	f2c0 0008 	movt	r0, #8
   8204e:	4780      	blx	r0
   82050:	bf00      	nop
   82052:	e7fd      	b.n	82050 <xQueueGenericSendFromISR+0x2c>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   82054:	f641 1195 	movw	r1, #6549	; 0x1995
   82058:	f2c0 0108 	movt	r1, #8
   8205c:	4788      	blx	r1
   8205e:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   82060:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82062:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   82064:	429a      	cmp	r2, r3
   82066:	d221      	bcs.n	820ac <xQueueGenericSendFromISR+0x88>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   82068:	4620      	mov	r0, r4
   8206a:	4631      	mov	r1, r6
   8206c:	4642      	mov	r2, r8
   8206e:	f641 533d 	movw	r3, #7485	; 0x1d3d
   82072:	f2c0 0308 	movt	r3, #8
   82076:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   82078:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   8207a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8207e:	d10e      	bne.n	8209e <xQueueGenericSendFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82080:	6a62      	ldr	r2, [r4, #36]	; 0x24
   82082:	b1b2      	cbz	r2, 820b2 <xQueueGenericSendFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82084:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82088:	f642 4489 	movw	r4, #11401	; 0x2c89
   8208c:	f2c0 0408 	movt	r4, #8
   82090:	47a0      	blx	r4
   82092:	b188      	cbz	r0, 820b8 <xQueueGenericSendFromISR+0x94>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   82094:	b19d      	cbz	r5, 820be <xQueueGenericSendFromISR+0x9a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   82096:	f04f 0401 	mov.w	r4, #1
   8209a:	602c      	str	r4, [r5, #0]
   8209c:	e011      	b.n	820c2 <xQueueGenericSendFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   8209e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   820a0:	f101 0101 	add.w	r1, r1, #1
   820a4:	64a1      	str	r1, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   820a6:	f04f 0401 	mov.w	r4, #1
   820aa:	e00a      	b.n	820c2 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   820ac:	f04f 0400 	mov.w	r4, #0
   820b0:	e007      	b.n	820c2 <xQueueGenericSendFromISR+0x9e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   820b2:	f04f 0401 	mov.w	r4, #1
   820b6:	e004      	b.n	820c2 <xQueueGenericSendFromISR+0x9e>
   820b8:	f04f 0401 	mov.w	r4, #1
   820bc:	e001      	b.n	820c2 <xQueueGenericSendFromISR+0x9e>
   820be:	f04f 0401 	mov.w	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   820c2:	4638      	mov	r0, r7
   820c4:	f641 13c9 	movw	r3, #6601	; 0x19c9
   820c8:	f2c0 0308 	movt	r3, #8
   820cc:	4798      	blx	r3

	return xReturn;
}
   820ce:	4620      	mov	r0, r4
   820d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000820d4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   820d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   820d8:	b085      	sub	sp, #20
   820da:	4689      	mov	r9, r1
   820dc:	9201      	str	r2, [sp, #4]
   820de:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   820e0:	4604      	mov	r4, r0
   820e2:	b930      	cbnz	r0, 820f2 <xQueueGenericReceive+0x1e>
   820e4:	f641 1495 	movw	r4, #6549	; 0x1995
   820e8:	f2c0 0408 	movt	r4, #8
   820ec:	47a0      	blx	r4
   820ee:	bf00      	nop
   820f0:	e7fd      	b.n	820ee <xQueueGenericReceive+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   820f2:	b941      	cbnz	r1, 82106 <xQueueGenericReceive+0x32>
   820f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   820f6:	b14b      	cbz	r3, 8210c <xQueueGenericReceive+0x38>
   820f8:	f641 1095 	movw	r0, #6549	; 0x1995
   820fc:	f2c0 0008 	movt	r0, #8
   82100:	4780      	blx	r0
   82102:	bf00      	nop
   82104:	e7fd      	b.n	82102 <xQueueGenericReceive+0x2e>
   82106:	f04f 0700 	mov.w	r7, #0
   8210a:	e001      	b.n	82110 <xQueueGenericReceive+0x3c>
   8210c:	f04f 0700 	mov.w	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   82110:	f641 16a9 	movw	r6, #6569	; 0x19a9
   82114:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82118:	f642 5b31 	movw	fp, #11569	; 0x2d31
   8211c:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   82120:	f641 15d1 	movw	r5, #6609	; 0x19d1
   82124:	f2c0 0508 	movt	r5, #8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   82128:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   8212a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   8212c:	2900      	cmp	r1, #0
   8212e:	d03f      	beq.n	821b0 <xQueueGenericReceive+0xdc>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   82130:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   82132:	4620      	mov	r0, r4
   82134:	4649      	mov	r1, r9
   82136:	f641 5315 	movw	r3, #7445	; 0x1d15
   8213a:	f2c0 0308 	movt	r3, #8
   8213e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   82140:	f1ba 0f00 	cmp.w	sl, #0
   82144:	d11c      	bne.n	82180 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   82146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82148:	f103 30ff 	add.w	r0, r3, #4294967295
   8214c:	63a0      	str	r0, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8214e:	6821      	ldr	r1, [r4, #0]
   82150:	b929      	cbnz	r1, 8215e <xQueueGenericReceive+0x8a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   82152:	f642 621d 	movw	r2, #11805	; 0x2e1d
   82156:	f2c0 0208 	movt	r2, #8
   8215a:	4790      	blx	r2
   8215c:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8215e:	6923      	ldr	r3, [r4, #16]
   82160:	b1f3      	cbz	r3, 821a0 <xQueueGenericReceive+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   82162:	f104 0010 	add.w	r0, r4, #16
   82166:	f642 4189 	movw	r1, #11401	; 0x2c89
   8216a:	f2c0 0108 	movt	r1, #8
   8216e:	4788      	blx	r1
   82170:	2801      	cmp	r0, #1
   82172:	d115      	bne.n	821a0 <xQueueGenericReceive+0xcc>
						{
							portYIELD_WITHIN_API();
   82174:	f641 1085 	movw	r0, #6533	; 0x1985
   82178:	f2c0 0008 	movt	r0, #8
   8217c:	4780      	blx	r0
   8217e:	e00f      	b.n	821a0 <xQueueGenericReceive+0xcc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   82180:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82182:	6a60      	ldr	r0, [r4, #36]	; 0x24
   82184:	b160      	cbz	r0, 821a0 <xQueueGenericReceive+0xcc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82186:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8218a:	f642 4189 	movw	r1, #11401	; 0x2c89
   8218e:	f2c0 0108 	movt	r1, #8
   82192:	4788      	blx	r1
   82194:	b120      	cbz	r0, 821a0 <xQueueGenericReceive+0xcc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   82196:	f641 1285 	movw	r2, #6533	; 0x1985
   8219a:	f2c0 0208 	movt	r2, #8
   8219e:	4790      	blx	r2
						}
					}
				}

				taskEXIT_CRITICAL();
   821a0:	f641 12d1 	movw	r2, #6609	; 0x19d1
   821a4:	f2c0 0208 	movt	r2, #8
   821a8:	4790      	blx	r2
				return pdPASS;
   821aa:	f04f 0001 	mov.w	r0, #1
   821ae:	e071      	b.n	82294 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   821b0:	9a01      	ldr	r2, [sp, #4]
   821b2:	b93a      	cbnz	r2, 821c4 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   821b4:	f641 12d1 	movw	r2, #6609	; 0x19d1
   821b8:	f2c0 0208 	movt	r2, #8
   821bc:	4790      	blx	r2
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   821be:	f04f 0000 	mov.w	r0, #0
   821c2:	e067      	b.n	82294 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
   821c4:	b91f      	cbnz	r7, 821ce <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   821c6:	a802      	add	r0, sp, #8
   821c8:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   821ca:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   821ce:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   821d0:	f242 6399 	movw	r3, #9881	; 0x2699
   821d4:	f2c0 0308 	movt	r3, #8
   821d8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   821da:	47b0      	blx	r6
   821dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   821de:	f1b0 3fff 	cmp.w	r0, #4294967295
   821e2:	bf04      	itt	eq
   821e4:	2000      	moveq	r0, #0
   821e6:	6460      	streq	r0, [r4, #68]	; 0x44
   821e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   821ea:	f1b1 3fff 	cmp.w	r1, #4294967295
   821ee:	bf04      	itt	eq
   821f0:	2100      	moveq	r1, #0
   821f2:	64a1      	streq	r1, [r4, #72]	; 0x48
   821f4:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   821f6:	a802      	add	r0, sp, #8
   821f8:	a901      	add	r1, sp, #4
   821fa:	f642 5261 	movw	r2, #11617	; 0x2d61
   821fe:	f2c0 0208 	movt	r2, #8
   82202:	4790      	blx	r2
   82204:	2800      	cmp	r0, #0
   82206:	d138      	bne.n	8227a <xQueueGenericReceive+0x1a6>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   82208:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   8220a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   8220e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   82210:	f1b8 0f00 	cmp.w	r8, #0
   82214:	d125      	bne.n	82262 <xQueueGenericReceive+0x18e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   82216:	6823      	ldr	r3, [r4, #0]
   82218:	b93b      	cbnz	r3, 8222a <xQueueGenericReceive+0x156>
					{
						portENTER_CRITICAL();
   8221a:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   8221c:	6860      	ldr	r0, [r4, #4]
   8221e:	f642 6151 	movw	r1, #11857	; 0x2e51
   82222:	f2c0 0108 	movt	r1, #8
   82226:	4788      	blx	r1
						}
						portEXIT_CRITICAL();
   82228:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8222a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8222e:	9901      	ldr	r1, [sp, #4]
   82230:	f642 32c1 	movw	r2, #11201	; 0x2bc1
   82234:	f2c0 0208 	movt	r2, #8
   82238:	4790      	blx	r2
				prvUnlockQueue( pxQueue );
   8223a:	4620      	mov	r0, r4
   8223c:	f641 4361 	movw	r3, #7265	; 0x1c61
   82240:	f2c0 0308 	movt	r3, #8
   82244:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   82246:	f642 0061 	movw	r0, #10337	; 0x2861
   8224a:	f2c0 0008 	movt	r0, #8
   8224e:	4780      	blx	r0
   82250:	2800      	cmp	r0, #0
   82252:	f47f af69 	bne.w	82128 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
   82256:	f641 1185 	movw	r1, #6533	; 0x1985
   8225a:	f2c0 0108 	movt	r1, #8
   8225e:	4788      	blx	r1
   82260:	e762      	b.n	82128 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82262:	4620      	mov	r0, r4
   82264:	f641 4161 	movw	r1, #7265	; 0x1c61
   82268:	f2c0 0108 	movt	r1, #8
   8226c:	4788      	blx	r1
				( void ) xTaskResumeAll();
   8226e:	f642 0261 	movw	r2, #10337	; 0x2861
   82272:	f2c0 0208 	movt	r2, #8
   82276:	4790      	blx	r2
   82278:	e756      	b.n	82128 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   8227a:	4620      	mov	r0, r4
   8227c:	f641 4361 	movw	r3, #7265	; 0x1c61
   82280:	f2c0 0308 	movt	r3, #8
   82284:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82286:	f642 0061 	movw	r0, #10337	; 0x2861
   8228a:	f2c0 0008 	movt	r0, #8
   8228e:	4780      	blx	r0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   82290:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   82294:	b005      	add	sp, #20
   82296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8229a:	bf00      	nop

0008229c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   8229c:	b538      	push	{r3, r4, r5, lr}
   8229e:	4604      	mov	r4, r0
   822a0:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   822a2:	f641 13a9 	movw	r3, #6569	; 0x19a9
   822a6:	f2c0 0308 	movt	r3, #8
   822aa:	4798      	blx	r3
   822ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
   822ae:	f1b0 3fff 	cmp.w	r0, #4294967295
   822b2:	bf04      	itt	eq
   822b4:	2000      	moveq	r0, #0
   822b6:	6460      	streq	r0, [r4, #68]	; 0x44
   822b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   822ba:	f1b1 3fff 	cmp.w	r1, #4294967295
   822be:	bf04      	itt	eq
   822c0:	2100      	moveq	r1, #0
   822c2:	64a1      	streq	r1, [r4, #72]	; 0x48
   822c4:	f641 12d1 	movw	r2, #6609	; 0x19d1
   822c8:	f2c0 0208 	movt	r2, #8
   822cc:	4790      	blx	r2
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   822ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   822d0:	b93b      	cbnz	r3, 822e2 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   822d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   822d6:	4629      	mov	r1, r5
   822d8:	f642 4235 	movw	r2, #11317	; 0x2c35
   822dc:	f2c0 0208 	movt	r2, #8
   822e0:	4790      	blx	r2
		}
		prvUnlockQueue( pxQueue );
   822e2:	4620      	mov	r0, r4
   822e4:	f641 4161 	movw	r1, #7265	; 0x1c61
   822e8:	f2c0 0108 	movt	r1, #8
   822ec:	4788      	blx	r1
   822ee:	bd38      	pop	{r3, r4, r5, pc}

000822f0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   822f0:	b510      	push	{r4, lr}
   822f2:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   822f4:	f64a 2384 	movw	r3, #43652	; 0xaa84
   822f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822fc:	6818      	ldr	r0, [r3, #0]
   822fe:	6044      	str	r4, [r0, #4]

	if( xTimeToWake < xTickCount )
   82300:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   82304:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82308:	680a      	ldr	r2, [r1, #0]
   8230a:	4294      	cmp	r4, r2
   8230c:	d211      	bcs.n	82332 <prvAddCurrentTaskToDelayedList+0x42>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8230e:	f64a 22a4 	movw	r2, #43684	; 0xaaa4
   82312:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82316:	6810      	ldr	r0, [r2, #0]
   82318:	f64a 2384 	movw	r3, #43652	; 0xaa84
   8231c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82320:	6819      	ldr	r1, [r3, #0]
   82322:	f101 0104 	add.w	r1, r1, #4
   82326:	f641 02c9 	movw	r2, #6345	; 0x18c9
   8232a:	f2c0 0208 	movt	r2, #8
   8232e:	4790      	blx	r2
   82330:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82332:	f64a 13e4 	movw	r3, #43492	; 0xa9e4
   82336:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8233a:	6818      	ldr	r0, [r3, #0]
   8233c:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82340:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82344:	6809      	ldr	r1, [r1, #0]
   82346:	f101 0104 	add.w	r1, r1, #4
   8234a:	f641 02c9 	movw	r2, #6345	; 0x18c9
   8234e:	f2c0 0208 	movt	r2, #8
   82352:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   82354:	f240 000c 	movw	r0, #12
   82358:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8235c:	6803      	ldr	r3, [r0, #0]
   8235e:	429c      	cmp	r4, r3
   82360:	d204      	bcs.n	8236c <prvAddCurrentTaskToDelayedList+0x7c>
		{
			xNextTaskUnblockTime = xTimeToWake;
   82362:	f240 010c 	movw	r1, #12
   82366:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8236a:	600c      	str	r4, [r1, #0]
   8236c:	bd10      	pop	{r4, pc}
   8236e:	bf00      	nop

00082370 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   82370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82374:	460f      	mov	r7, r1
   82376:	4690      	mov	r8, r2
   82378:	469a      	mov	sl, r3
   8237a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8237c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   8237e:	4681      	mov	r9, r0
   82380:	b930      	cbnz	r0, 82390 <xTaskGenericCreate+0x20>
   82382:	f641 1795 	movw	r7, #6549	; 0x1995
   82386:	f2c0 0708 	movt	r7, #8
   8238a:	47b8      	blx	r7
   8238c:	bf00      	nop
   8238e:	e7fd      	b.n	8238c <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   82390:	2d04      	cmp	r5, #4
   82392:	d906      	bls.n	823a2 <xTaskGenericCreate+0x32>
   82394:	f641 1595 	movw	r5, #6549	; 0x1995
   82398:	f2c0 0508 	movt	r5, #8
   8239c:	47a8      	blx	r5
   8239e:	bf00      	nop
   823a0:	e7fd      	b.n	8239e <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   823a2:	f04f 004c 	mov.w	r0, #76	; 0x4c
   823a6:	f641 3325 	movw	r3, #6949	; 0x1b25
   823aa:	f2c0 0308 	movt	r3, #8
   823ae:	4798      	blx	r3

	if( pxNewTCB != NULL )
   823b0:	4604      	mov	r4, r0
   823b2:	2800      	cmp	r0, #0
   823b4:	f000 8127 	beq.w	82606 <xTaskGenericCreate+0x296>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   823b8:	2e00      	cmp	r6, #0
   823ba:	f040 8122 	bne.w	82602 <xTaskGenericCreate+0x292>
   823be:	ea4f 0088 	mov.w	r0, r8, lsl #2
   823c2:	f641 3125 	movw	r1, #6949	; 0x1b25
   823c6:	f2c0 0108 	movt	r1, #8
   823ca:	4788      	blx	r1
   823cc:	4606      	mov	r6, r0
   823ce:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   823d0:	b930      	cbnz	r0, 823e0 <xTaskGenericCreate+0x70>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   823d2:	4620      	mov	r0, r4
   823d4:	f641 4225 	movw	r2, #7205	; 0x1c25
   823d8:	f2c0 0208 	movt	r2, #8
   823dc:	4790      	blx	r2
   823de:	e112      	b.n	82606 <xTaskGenericCreate+0x296>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   823e0:	4630      	mov	r0, r6
   823e2:	f04f 01a5 	mov.w	r1, #165	; 0xa5
   823e6:	ea4f 0288 	mov.w	r2, r8, lsl #2
   823ea:	f643 76a3 	movw	r6, #16291	; 0x3fa3
   823ee:	f2c0 0608 	movt	r6, #8
   823f2:	47b0      	blx	r6
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   823f4:	f108 38ff 	add.w	r8, r8, #4294967295
   823f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   823fa:	eb00 0288 	add.w	r2, r0, r8, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   823fe:	f022 0b07 	bic.w	fp, r2, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   82402:	f104 0034 	add.w	r0, r4, #52	; 0x34
   82406:	4639      	mov	r1, r7
   82408:	f04f 020a 	mov.w	r2, #10
   8240c:	f244 17b7 	movw	r7, #16823	; 0x41b7
   82410:	f2c0 0708 	movt	r7, #8
   82414:	47b8      	blx	r7
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   82416:	f04f 0300 	mov.w	r3, #0
   8241a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   8241e:	2d04      	cmp	r5, #4
   82420:	bf34      	ite	cc
   82422:	462e      	movcc	r6, r5
   82424:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   82426:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   82428:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8242a:	f104 0704 	add.w	r7, r4, #4
   8242e:	4638      	mov	r0, r7
   82430:	f641 08a1 	movw	r8, #6305	; 0x18a1
   82434:	f2c0 0808 	movt	r8, #8
   82438:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   8243a:	f104 0018 	add.w	r0, r4, #24
   8243e:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   82440:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   82442:	f1c6 0605 	rsb	r6, r6, #5
   82446:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   82448:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8244a:	4658      	mov	r0, fp
   8244c:	4649      	mov	r1, r9
   8244e:	4652      	mov	r2, sl
   82450:	f641 1345 	movw	r3, #6469	; 0x1945
   82454:	f2c0 0308 	movt	r3, #8
   82458:	4798      	blx	r3
   8245a:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   8245c:	f010 0f07 	tst.w	r0, #7
   82460:	d006      	beq.n	82470 <xTaskGenericCreate+0x100>
   82462:	f641 1495 	movw	r4, #6549	; 0x1995
   82466:	f2c0 0408 	movt	r4, #8
   8246a:	47a0      	blx	r4
   8246c:	bf00      	nop
   8246e:	e7fd      	b.n	8246c <xTaskGenericCreate+0xfc>

		if( ( void * ) pxCreatedTask != NULL )
   82470:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82472:	b101      	cbz	r1, 82476 <xTaskGenericCreate+0x106>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   82474:	600c      	str	r4, [r1, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   82476:	f641 10a9 	movw	r0, #6569	; 0x19a9
   8247a:	f2c0 0008 	movt	r0, #8
   8247e:	4780      	blx	r0
		{
			uxCurrentNumberOfTasks++;
   82480:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   82484:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82488:	681a      	ldr	r2, [r3, #0]
   8248a:	f102 0201 	add.w	r2, r2, #1
   8248e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82490:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82494:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82498:	6808      	ldr	r0, [r1, #0]
   8249a:	2800      	cmp	r0, #0
   8249c:	d149      	bne.n	82532 <xTaskGenericCreate+0x1c2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8249e:	f64a 2184 	movw	r1, #43652	; 0xaa84
   824a2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   824a6:	600c      	str	r4, [r1, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   824a8:	f64a 20c4 	movw	r0, #43716	; 0xaac4
   824ac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   824b0:	6803      	ldr	r3, [r0, #0]
   824b2:	2b01      	cmp	r3, #1
   824b4:	d150      	bne.n	82558 <xTaskGenericCreate+0x1e8>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   824b6:	f64a 291c 	movw	r9, #43548	; 0xaa1c
   824ba:	f2c2 0907 	movt	r9, #8199	; 0x2007
   824be:	4648      	mov	r0, r9
   824c0:	f641 0689 	movw	r6, #6281	; 0x1889
   824c4:	f2c0 0608 	movt	r6, #8
   824c8:	47b0      	blx	r6
   824ca:	f109 0014 	add.w	r0, r9, #20
   824ce:	47b0      	blx	r6
   824d0:	f109 0028 	add.w	r0, r9, #40	; 0x28
   824d4:	47b0      	blx	r6
   824d6:	f109 003c 	add.w	r0, r9, #60	; 0x3c
   824da:	47b0      	blx	r6
   824dc:	f109 0050 	add.w	r0, r9, #80	; 0x50
   824e0:	47b0      	blx	r6
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   824e2:	f64a 29ac 	movw	r9, #43692	; 0xaaac
   824e6:	f2c2 0907 	movt	r9, #8199	; 0x2007
   824ea:	4648      	mov	r0, r9
   824ec:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   824ee:	f64a 2804 	movw	r8, #43524	; 0xaa04
   824f2:	f2c2 0807 	movt	r8, #8199	; 0x2007
   824f6:	4640      	mov	r0, r8
   824f8:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   824fa:	f64a 2088 	movw	r0, #43656	; 0xaa88
   824fe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82502:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   82504:	f64a 10f0 	movw	r0, #43504	; 0xa9f0
   82508:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8250c:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   8250e:	f64a 10d0 	movw	r0, #43472	; 0xa9d0
   82512:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82516:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   82518:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   8251c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82520:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   82524:	f64a 21a4 	movw	r1, #43684	; 0xaaa4
   82528:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8252c:	f8c1 8000 	str.w	r8, [r1]
   82530:	e012      	b.n	82558 <xTaskGenericCreate+0x1e8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   82532:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
   82536:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8253a:	681a      	ldr	r2, [r3, #0]
   8253c:	b962      	cbnz	r2, 82558 <xTaskGenericCreate+0x1e8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8253e:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82542:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82546:	6808      	ldr	r0, [r1, #0]
   82548:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8254a:	429d      	cmp	r5, r3
   8254c:	d304      	bcc.n	82558 <xTaskGenericCreate+0x1e8>
					{
						pxCurrentTCB = pxNewTCB;
   8254e:	f64a 2284 	movw	r2, #43652	; 0xaa84
   82552:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82556:	6014      	str	r4, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   82558:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8255a:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   8255e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82562:	681a      	ldr	r2, [r3, #0]
   82564:	4290      	cmp	r0, r2
   82566:	d904      	bls.n	82572 <xTaskGenericCreate+0x202>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   82568:	f64a 21c8 	movw	r1, #43720	; 0xaac8
   8256c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82570:	6008      	str	r0, [r1, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   82572:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   82576:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8257a:	681a      	ldr	r2, [r3, #0]
   8257c:	6422      	str	r2, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   8257e:	f102 0201 	add.w	r2, r2, #1
   82582:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   82584:	f64a 2118 	movw	r1, #43544	; 0xaa18
   82588:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8258c:	680b      	ldr	r3, [r1, #0]
   8258e:	4298      	cmp	r0, r3
   82590:	d904      	bls.n	8259c <xTaskGenericCreate+0x22c>
   82592:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82596:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8259a:	6010      	str	r0, [r2, #0]
   8259c:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   825a0:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   825a4:	4603      	mov	r3, r0
   825a6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   825aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   825ae:	4639      	mov	r1, r7
   825b0:	f641 02a9 	movw	r2, #6313	; 0x18a9
   825b4:	f2c0 0208 	movt	r2, #8
   825b8:	4790      	blx	r2

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   825ba:	f641 11d1 	movw	r1, #6609	; 0x19d1
   825be:	f2c0 0108 	movt	r1, #8
   825c2:	4788      	blx	r1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   825c4:	f64a 10e8 	movw	r0, #43496	; 0xa9e8
   825c8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   825cc:	6803      	ldr	r3, [r0, #0]
   825ce:	b183      	cbz	r3, 825f2 <xTaskGenericCreate+0x282>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   825d0:	f64a 2284 	movw	r2, #43652	; 0xaa84
   825d4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   825d8:	6811      	ldr	r1, [r2, #0]
   825da:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   825dc:	4285      	cmp	r5, r0
   825de:	d90c      	bls.n	825fa <xTaskGenericCreate+0x28a>
			{
				portYIELD_WITHIN_API();
   825e0:	f641 1385 	movw	r3, #6533	; 0x1985
   825e4:	f2c0 0308 	movt	r3, #8
   825e8:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   825ea:	f04f 0001 	mov.w	r0, #1
   825ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825f2:	f04f 0001 	mov.w	r0, #1
   825f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825fa:	f04f 0001 	mov.w	r0, #1
   825fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   82602:	6306      	str	r6, [r0, #48]	; 0x30
   82604:	e6ec      	b.n	823e0 <xTaskGenericCreate+0x70>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   82606:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   8260a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8260e:	bf00      	nop

00082610 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   82610:	b510      	push	{r4, lr}
   82612:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   82614:	f04f 0300 	mov.w	r3, #0
   82618:	9300      	str	r3, [sp, #0]
   8261a:	9301      	str	r3, [sp, #4]
   8261c:	9302      	str	r3, [sp, #8]
   8261e:	9303      	str	r3, [sp, #12]
   82620:	f642 10ad 	movw	r0, #10669	; 0x29ad
   82624:	f2c0 0008 	movt	r0, #8
   82628:	f24a 7114 	movw	r1, #42772	; 0xa714
   8262c:	f2c0 0108 	movt	r1, #8
   82630:	f04f 0282 	mov.w	r2, #130	; 0x82
   82634:	f242 3471 	movw	r4, #9073	; 0x2371
   82638:	f2c0 0408 	movt	r4, #8
   8263c:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8263e:	2801      	cmp	r0, #1
   82640:	d11f      	bne.n	82682 <vTaskStartScheduler+0x72>
		{
			xReturn = xTimerCreateTimerTask();
   82642:	f243 0335 	movw	r3, #12341	; 0x3035
   82646:	f2c0 0308 	movt	r3, #8
   8264a:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   8264c:	2801      	cmp	r0, #1
   8264e:	d118      	bne.n	82682 <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   82650:	f641 1195 	movw	r1, #6549	; 0x1995
   82654:	f2c0 0108 	movt	r1, #8
   82658:	4788      	blx	r1

		xSchedulerRunning = pdTRUE;
   8265a:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
   8265e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82662:	f04f 0201 	mov.w	r2, #1
   82666:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   82668:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   8266c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82670:	f04f 0100 	mov.w	r1, #0
   82674:	6001      	str	r1, [r0, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   82676:	f641 2389 	movw	r3, #6793	; 0x1a89
   8267a:	f2c0 0308 	movt	r3, #8
   8267e:	4798      	blx	r3
   82680:	e007      	b.n	82692 <vTaskStartScheduler+0x82>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   82682:	b930      	cbnz	r0, 82692 <vTaskStartScheduler+0x82>
   82684:	f641 1095 	movw	r0, #6549	; 0x1995
   82688:	f2c0 0008 	movt	r0, #8
   8268c:	4780      	blx	r0
   8268e:	bf00      	nop
   82690:	e7fd      	b.n	8268e <vTaskStartScheduler+0x7e>
}
   82692:	b004      	add	sp, #16
   82694:	bd10      	pop	{r4, pc}
   82696:	bf00      	nop

00082698 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   82698:	f64a 2380 	movw	r3, #43648	; 0xaa80
   8269c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826a0:	681a      	ldr	r2, [r3, #0]
   826a2:	f102 0201 	add.w	r2, r2, #1
   826a6:	601a      	str	r2, [r3, #0]
   826a8:	4770      	bx	lr
   826aa:	bf00      	nop

000826ac <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   826ac:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   826ae:	f641 13a9 	movw	r3, #6569	; 0x19a9
   826b2:	f2c0 0308 	movt	r3, #8
   826b6:	4798      	blx	r3
	{
		xTicks = xTickCount;
   826b8:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   826bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   826c0:	6804      	ldr	r4, [r0, #0]
	}
	taskEXIT_CRITICAL();
   826c2:	f641 11d1 	movw	r1, #6609	; 0x19d1
   826c6:	f2c0 0108 	movt	r1, #8
   826ca:	4788      	blx	r1

	return xTicks;
}
   826cc:	4620      	mov	r0, r4
   826ce:	bd10      	pop	{r4, pc}

000826d0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   826d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   826d4:	f64a 2380 	movw	r3, #43648	; 0xaa80
   826d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826dc:	6818      	ldr	r0, [r3, #0]
   826de:	2800      	cmp	r0, #0
   826e0:	f040 80b3 	bne.w	8284a <vTaskIncrementTick+0x17a>
	{
		++xTickCount;
   826e4:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   826e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826ec:	6818      	ldr	r0, [r3, #0]
   826ee:	f100 0001 	add.w	r0, r0, #1
   826f2:	6018      	str	r0, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   826f4:	6819      	ldr	r1, [r3, #0]
   826f6:	2900      	cmp	r1, #0
   826f8:	d139      	bne.n	8276e <vTaskIncrementTick+0x9e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   826fa:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   826fe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82702:	6813      	ldr	r3, [r2, #0]
   82704:	6818      	ldr	r0, [r3, #0]
   82706:	b130      	cbz	r0, 82716 <vTaskIncrementTick+0x46>
   82708:	f641 1595 	movw	r5, #6549	; 0x1995
   8270c:	f2c0 0508 	movt	r5, #8
   82710:	47a8      	blx	r5
   82712:	bf00      	nop
   82714:	e7fd      	b.n	82712 <vTaskIncrementTick+0x42>

			pxTemp = pxDelayedTaskList;
   82716:	f64a 13e4 	movw	r3, #43492	; 0xa9e4
   8271a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8271e:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   82720:	f64a 22a4 	movw	r2, #43684	; 0xaaa4
   82724:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82728:	6810      	ldr	r0, [r2, #0]
   8272a:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8272c:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8272e:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   82732:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82736:	6811      	ldr	r1, [r2, #0]
   82738:	f101 0101 	add.w	r1, r1, #1
   8273c:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8273e:	681b      	ldr	r3, [r3, #0]
   82740:	6818      	ldr	r0, [r3, #0]
   82742:	b938      	cbnz	r0, 82754 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   82744:	f240 030c 	movw	r3, #12
   82748:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8274c:	f04f 30ff 	mov.w	r0, #4294967295
   82750:	6018      	str	r0, [r3, #0]
   82752:	e00c      	b.n	8276e <vTaskIncrementTick+0x9e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82754:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   82758:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8275c:	6811      	ldr	r1, [r2, #0]
   8275e:	68cb      	ldr	r3, [r1, #12]
   82760:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82762:	6842      	ldr	r2, [r0, #4]
   82764:	f240 010c 	movw	r1, #12
   82768:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8276c:	600a      	str	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8276e:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82772:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82776:	6811      	ldr	r1, [r2, #0]
   82778:	f240 030c 	movw	r3, #12
   8277c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82780:	6818      	ldr	r0, [r3, #0]
   82782:	4281      	cmp	r1, r0
   82784:	d369      	bcc.n	8285a <vTaskIncrementTick+0x18a>
   82786:	f64a 12e4 	movw	r2, #43492	; 0xa9e4
   8278a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8278e:	6811      	ldr	r1, [r2, #0]
   82790:	680b      	ldr	r3, [r1, #0]
   82792:	b17b      	cbz	r3, 827b4 <vTaskIncrementTick+0xe4>
   82794:	f64a 14e4 	movw	r4, #43492	; 0xa9e4
   82798:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8279c:	6820      	ldr	r0, [r4, #0]
   8279e:	68c2      	ldr	r2, [r0, #12]
   827a0:	68d4      	ldr	r4, [r2, #12]
   827a2:	6863      	ldr	r3, [r4, #4]
   827a4:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   827a8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   827ac:	6808      	ldr	r0, [r1, #0]
   827ae:	4283      	cmp	r3, r0
   827b0:	d91a      	bls.n	827e8 <vTaskIncrementTick+0x118>
   827b2:	e012      	b.n	827da <vTaskIncrementTick+0x10a>
   827b4:	f240 030c 	movw	r3, #12
   827b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827bc:	f04f 30ff 	mov.w	r0, #4294967295
   827c0:	6018      	str	r0, [r3, #0]
   827c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827c6:	6834      	ldr	r4, [r6, #0]
   827c8:	68e2      	ldr	r2, [r4, #12]
   827ca:	68d4      	ldr	r4, [r2, #12]
   827cc:	6863      	ldr	r3, [r4, #4]
   827ce:	4648      	mov	r0, r9
   827d0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   827d4:	6801      	ldr	r1, [r0, #0]
   827d6:	428b      	cmp	r3, r1
   827d8:	d91c      	bls.n	82814 <vTaskIncrementTick+0x144>
   827da:	f240 020c 	movw	r2, #12
   827de:	f2c2 0207 	movt	r2, #8199	; 0x2007
   827e2:	6013      	str	r3, [r2, #0]
   827e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827e8:	f641 1705 	movw	r7, #6405	; 0x1905
   827ec:	f2c0 0708 	movt	r7, #8
   827f0:	f64a 2818 	movw	r8, #43544	; 0xaa18
   827f4:	f2c2 0807 	movt	r8, #8199	; 0x2007
   827f8:	f64a 2b1c 	movw	fp, #43548	; 0xaa1c
   827fc:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   82800:	f641 0aa9 	movw	sl, #6313	; 0x18a9
   82804:	f2c0 0a08 	movt	sl, #8
   82808:	f64a 16e4 	movw	r6, #43492	; 0xa9e4
   8280c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82810:	f64a 29a0 	movw	r9, #43680	; 0xaaa0
   82814:	f104 0504 	add.w	r5, r4, #4
   82818:	4628      	mov	r0, r5
   8281a:	47b8      	blx	r7
   8281c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8281e:	b113      	cbz	r3, 82826 <vTaskIncrementTick+0x156>
   82820:	f104 0018 	add.w	r0, r4, #24
   82824:	47b8      	blx	r7
   82826:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   82828:	f8d8 2000 	ldr.w	r2, [r8]
   8282c:	4291      	cmp	r1, r2
   8282e:	bf88      	it	hi
   82830:	f8c8 1000 	strhi.w	r1, [r8]
   82834:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82838:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   8283c:	4629      	mov	r1, r5
   8283e:	47d0      	blx	sl
   82840:	6833      	ldr	r3, [r6, #0]
   82842:	6819      	ldr	r1, [r3, #0]
   82844:	2900      	cmp	r1, #0
   82846:	d1be      	bne.n	827c6 <vTaskIncrementTick+0xf6>
   82848:	e7b4      	b.n	827b4 <vTaskIncrementTick+0xe4>
	}
	else
	{
		++uxMissedTicks;
   8284a:	f64a 11cc 	movw	r1, #43468	; 0xa9cc
   8284e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82852:	680a      	ldr	r2, [r1, #0]
   82854:	f102 0201 	add.w	r2, r2, #1
   82858:	600a      	str	r2, [r1, #0]
   8285a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8285e:	bf00      	nop

00082860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   82860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   82864:	f64a 2380 	movw	r3, #43648	; 0xaa80
   82868:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8286c:	6818      	ldr	r0, [r3, #0]
   8286e:	b930      	cbnz	r0, 8287e <xTaskResumeAll+0x1e>
   82870:	f641 1595 	movw	r5, #6549	; 0x1995
   82874:	f2c0 0508 	movt	r5, #8
   82878:	47a8      	blx	r5
   8287a:	bf00      	nop
   8287c:	e7fd      	b.n	8287a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8287e:	f641 11a9 	movw	r1, #6569	; 0x19a9
   82882:	f2c0 0108 	movt	r1, #8
   82886:	4788      	blx	r1
	{
		--uxSchedulerSuspended;
   82888:	f64a 2480 	movw	r4, #43648	; 0xaa80
   8288c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82890:	6822      	ldr	r2, [r4, #0]
   82892:	f102 33ff 	add.w	r3, r2, #4294967295
   82896:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82898:	6820      	ldr	r0, [r4, #0]
   8289a:	2800      	cmp	r0, #0
   8289c:	d178      	bne.n	82990 <xTaskResumeAll+0x130>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   8289e:	f64a 21c4 	movw	r1, #43716	; 0xaac4
   828a2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828a6:	680c      	ldr	r4, [r1, #0]
   828a8:	bb4c      	cbnz	r4, 828fe <xTaskResumeAll+0x9e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   828aa:	f04f 0400 	mov.w	r4, #0
   828ae:	e074      	b.n	8299a <xTaskResumeAll+0x13a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   828b0:	f8d8 200c 	ldr.w	r2, [r8, #12]
   828b4:	68d4      	ldr	r4, [r2, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   828b6:	f104 0018 	add.w	r0, r4, #24
   828ba:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   828bc:	f104 0904 	add.w	r9, r4, #4
   828c0:	4648      	mov	r0, r9
   828c2:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   828c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   828c6:	6830      	ldr	r0, [r6, #0]
   828c8:	4283      	cmp	r3, r0
   828ca:	bf88      	it	hi
   828cc:	6033      	strhi	r3, [r6, #0]
   828ce:	4651      	mov	r1, sl
   828d0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   828d8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   828dc:	4649      	mov	r1, r9
   828de:	f641 03a9 	movw	r3, #6313	; 0x18a9
   828e2:	f2c0 0308 	movt	r3, #8
   828e6:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   828e8:	f64a 2084 	movw	r0, #43652	; 0xaa84
   828ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   828f0:	6801      	ldr	r1, [r0, #0]
   828f2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   828f4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   828f6:	4294      	cmp	r4, r2
   828f8:	bf28      	it	cs
   828fa:	2501      	movcs	r5, #1
   828fc:	e00f      	b.n	8291e <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   828fe:	f04f 0500 	mov.w	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82902:	f64a 2888 	movw	r8, #43656	; 0xaa88
   82906:	f2c2 0807 	movt	r8, #8199	; 0x2007
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   8290a:	f641 1705 	movw	r7, #6405	; 0x1905
   8290e:	f2c0 0708 	movt	r7, #8
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   82912:	f64a 2618 	movw	r6, #43544	; 0xaa18
   82916:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8291a:	f64a 2a1c 	movw	sl, #43548	; 0xaa1c
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8291e:	f8d8 2000 	ldr.w	r2, [r8]
   82922:	2a00      	cmp	r2, #0
   82924:	d1c4      	bne.n	828b0 <xTaskResumeAll+0x50>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82926:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   8292a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8292e:	6818      	ldr	r0, [r3, #0]
   82930:	b1b0      	cbz	r0, 82960 <xTaskResumeAll+0x100>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82932:	f64a 12cc 	movw	r2, #43468	; 0xa9cc
   82936:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8293a:	6813      	ldr	r3, [r2, #0]
   8293c:	b1cb      	cbz	r3, 82972 <xTaskResumeAll+0x112>
					{
						vTaskIncrementTick();
   8293e:	f242 65d1 	movw	r5, #9937	; 0x26d1
   82942:	f2c0 0508 	movt	r5, #8
						--uxMissedTicks;
   82946:	f64a 14cc 	movw	r4, #43468	; 0xa9cc
   8294a:	f2c2 0407 	movt	r4, #8199	; 0x2007
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   8294e:	47a8      	blx	r5
						--uxMissedTicks;
   82950:	6820      	ldr	r0, [r4, #0]
   82952:	f100 31ff 	add.w	r1, r0, #4294967295
   82956:	6021      	str	r1, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82958:	6822      	ldr	r2, [r4, #0]
   8295a:	2a00      	cmp	r2, #0
   8295c:	d1f7      	bne.n	8294e <xTaskResumeAll+0xee>
   8295e:	e008      	b.n	82972 <xTaskResumeAll+0x112>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   82960:	2d01      	cmp	r5, #1
   82962:	d006      	beq.n	82972 <xTaskResumeAll+0x112>
   82964:	f64a 21c0 	movw	r1, #43712	; 0xaac0
   82968:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8296c:	680c      	ldr	r4, [r1, #0]
   8296e:	2c01      	cmp	r4, #1
   82970:	d111      	bne.n	82996 <xTaskResumeAll+0x136>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   82972:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   82976:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8297a:	f04f 0400 	mov.w	r4, #0
   8297e:	601c      	str	r4, [r3, #0]
					portYIELD_WITHIN_API();
   82980:	f641 1085 	movw	r0, #6533	; 0x1985
   82984:	f2c0 0008 	movt	r0, #8
   82988:	4780      	blx	r0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   8298a:	f04f 0401 	mov.w	r4, #1
   8298e:	e004      	b.n	8299a <xTaskResumeAll+0x13a>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   82990:	f04f 0400 	mov.w	r4, #0
   82994:	e001      	b.n	8299a <xTaskResumeAll+0x13a>
   82996:	f04f 0400 	mov.w	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   8299a:	f641 11d1 	movw	r1, #6609	; 0x19d1
   8299e:	f2c0 0108 	movt	r1, #8
   829a2:	4788      	blx	r1

	return xAlreadyYielded;
}
   829a4:	4620      	mov	r0, r4
   829a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   829aa:	bf00      	nop

000829ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   829ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   829b0:	f64a 15ec 	movw	r5, #43500	; 0xa9ec
   829b4:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			vTaskSuspendAll();
   829b8:	f242 6899 	movw	r8, #9881	; 0x2699
   829bc:	f2c0 0808 	movt	r8, #8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   829c0:	f64a 16f0 	movw	r6, #43504	; 0xa9f0
   829c4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			xTaskResumeAll();
   829c8:	f642 0761 	movw	r7, #10337	; 0x2861
   829cc:	e02d      	b.n	82a2a <prvIdleTask+0x7e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   829ce:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   829d0:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   829d2:	463b      	mov	r3, r7
   829d4:	f2c0 0308 	movt	r3, #8
   829d8:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   829da:	b334      	cbz	r4, 82a2a <prvIdleTask+0x7e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   829dc:	f641 10a9 	movw	r0, #6569	; 0x19a9
   829e0:	f2c0 0008 	movt	r0, #8
   829e4:	4780      	blx	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   829e6:	68f1      	ldr	r1, [r6, #12]
   829e8:	68cc      	ldr	r4, [r1, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   829ea:	f104 0004 	add.w	r0, r4, #4
   829ee:	f641 1205 	movw	r2, #6405	; 0x1905
   829f2:	f2c0 0208 	movt	r2, #8
   829f6:	4790      	blx	r2
					--uxCurrentNumberOfTasks;
   829f8:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   829fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a00:	6818      	ldr	r0, [r3, #0]
   82a02:	f100 31ff 	add.w	r1, r0, #4294967295
   82a06:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
   82a08:	682a      	ldr	r2, [r5, #0]
   82a0a:	f102 33ff 	add.w	r3, r2, #4294967295
   82a0e:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   82a10:	f641 10d1 	movw	r0, #6609	; 0x19d1
   82a14:	f2c0 0008 	movt	r0, #8
   82a18:	4780      	blx	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   82a1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   82a1c:	f641 4925 	movw	r9, #7205	; 0x1c25
   82a20:	f2c0 0908 	movt	r9, #8
   82a24:	47c8      	blx	r9
		vPortFree( pxTCB );
   82a26:	4620      	mov	r0, r4
   82a28:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82a2a:	682b      	ldr	r3, [r5, #0]
   82a2c:	2b00      	cmp	r3, #0
   82a2e:	d1ce      	bne.n	829ce <prvIdleTask+0x22>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82a30:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82a34:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82a38:	6801      	ldr	r1, [r0, #0]
   82a3a:	2901      	cmp	r1, #1
   82a3c:	d9f5      	bls.n	82a2a <prvIdleTask+0x7e>
			{
				taskYIELD();
   82a3e:	f641 1285 	movw	r2, #6533	; 0x1985
   82a42:	f2c0 0208 	movt	r2, #8
   82a46:	4790      	blx	r2
   82a48:	e7ef      	b.n	82a2a <prvIdleTask+0x7e>
   82a4a:	bf00      	nop

00082a4c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   82a4c:	b538      	push	{r3, r4, r5, lr}
   82a4e:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   82a50:	4605      	mov	r5, r0
   82a52:	b930      	cbnz	r0, 82a62 <vTaskDelayUntil+0x16>
   82a54:	f641 1495 	movw	r4, #6549	; 0x1995
   82a58:	f2c0 0408 	movt	r4, #8
   82a5c:	47a0      	blx	r4
   82a5e:	bf00      	nop
   82a60:	e7fd      	b.n	82a5e <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
   82a62:	b931      	cbnz	r1, 82a72 <vTaskDelayUntil+0x26>
   82a64:	f641 1595 	movw	r5, #6549	; 0x1995
   82a68:	f2c0 0508 	movt	r5, #8
   82a6c:	47a8      	blx	r5
   82a6e:	bf00      	nop
   82a70:	e7fd      	b.n	82a6e <vTaskDelayUntil+0x22>

		vTaskSuspendAll();
   82a72:	f242 6399 	movw	r3, #9881	; 0x2699
   82a76:	f2c0 0308 	movt	r3, #8
   82a7a:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   82a7c:	6828      	ldr	r0, [r5, #0]
   82a7e:	1904      	adds	r4, r0, r4

			if( xTickCount < *pxPreviousWakeTime )
   82a80:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82a84:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a88:	6811      	ldr	r1, [r2, #0]
   82a8a:	4288      	cmp	r0, r1
   82a8c:	d90a      	bls.n	82aa4 <vTaskDelayUntil+0x58>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   82a8e:	42a0      	cmp	r0, r4
   82a90:	d932      	bls.n	82af8 <vTaskDelayUntil+0xac>
   82a92:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82a96:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a9a:	6811      	ldr	r1, [r2, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82a9c:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   82a9e:	428c      	cmp	r4, r1
   82aa0:	d91c      	bls.n	82adc <vTaskDelayUntil+0x90>
   82aa2:	e009      	b.n	82ab8 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   82aa4:	42a0      	cmp	r0, r4
   82aa6:	d825      	bhi.n	82af4 <vTaskDelayUntil+0xa8>
   82aa8:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   82aac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ab0:	6818      	ldr	r0, [r3, #0]
   82ab2:	4284      	cmp	r4, r0
   82ab4:	d81e      	bhi.n	82af4 <vTaskDelayUntil+0xa8>
   82ab6:	e01f      	b.n	82af8 <vTaskDelayUntil+0xac>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82ab8:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82abc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ac0:	6818      	ldr	r0, [r3, #0]
   82ac2:	f100 0004 	add.w	r0, r0, #4
   82ac6:	f641 1205 	movw	r2, #6405	; 0x1905
   82aca:	f2c0 0208 	movt	r2, #8
   82ace:	4790      	blx	r2
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82ad0:	4620      	mov	r0, r4
   82ad2:	f242 21f1 	movw	r1, #8945	; 0x22f1
   82ad6:	f2c0 0108 	movt	r1, #8
   82ada:	4788      	blx	r1
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82adc:	f642 0061 	movw	r0, #10337	; 0x2861
   82ae0:	f2c0 0008 	movt	r0, #8
   82ae4:	4780      	blx	r0

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82ae6:	b948      	cbnz	r0, 82afc <vTaskDelayUntil+0xb0>
		{
			portYIELD_WITHIN_API();
   82ae8:	f641 1385 	movw	r3, #6533	; 0x1985
   82aec:	f2c0 0308 	movt	r3, #8
   82af0:	4798      	blx	r3
   82af2:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82af4:	602c      	str	r4, [r5, #0]
   82af6:	e7df      	b.n	82ab8 <vTaskDelayUntil+0x6c>
   82af8:	602c      	str	r4, [r5, #0]
   82afa:	e7ef      	b.n	82adc <vTaskDelayUntil+0x90>
   82afc:	bd38      	pop	{r3, r4, r5, pc}
   82afe:	bf00      	nop

00082b00 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82b00:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   82b02:	f64a 2380 	movw	r3, #43648	; 0xaa80
   82b06:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b0a:	6818      	ldr	r0, [r3, #0]
   82b0c:	b9a8      	cbnz	r0, 82b3a <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82b0e:	f64a 2118 	movw	r1, #43544	; 0xaa18
   82b12:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b16:	680a      	ldr	r2, [r1, #0]
   82b18:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   82b1c:	ea4f 0083 	mov.w	r0, r3, lsl #2
   82b20:	f64a 211c 	movw	r1, #43548	; 0xaa1c
   82b24:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b28:	580a      	ldr	r2, [r1, r0]
   82b2a:	bb52      	cbnz	r2, 82b82 <vTaskSwitchContext+0x82>
   82b2c:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82b30:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b34:	6818      	ldr	r0, [r3, #0]
   82b36:	b988      	cbnz	r0, 82b5c <vTaskSwitchContext+0x5c>
   82b38:	e009      	b.n	82b4e <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   82b3a:	f64a 21c0 	movw	r1, #43712	; 0xaac0
   82b3e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b42:	f04f 0001 	mov.w	r0, #1
   82b46:	6008      	str	r0, [r1, #0]
   82b48:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82b4a:	681a      	ldr	r2, [r3, #0]
   82b4c:	b972      	cbnz	r2, 82b6c <vTaskSwitchContext+0x6c>
   82b4e:	f641 1395 	movw	r3, #6549	; 0x1995
   82b52:	f2c0 0308 	movt	r3, #8
   82b56:	4798      	blx	r3
   82b58:	bf00      	nop
   82b5a:	e7fd      	b.n	82b58 <vTaskSwitchContext+0x58>
   82b5c:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82b60:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b64:	f64a 211c 	movw	r1, #43548	; 0xaa1c
   82b68:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b6c:	681a      	ldr	r2, [r3, #0]
   82b6e:	f102 30ff 	add.w	r0, r2, #4294967295
   82b72:	6018      	str	r0, [r3, #0]
   82b74:	681a      	ldr	r2, [r3, #0]
   82b76:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   82b7a:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   82b7e:	2a00      	cmp	r2, #0
   82b80:	d0e3      	beq.n	82b4a <vTaskSwitchContext+0x4a>
   82b82:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82b86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b8a:	6819      	ldr	r1, [r3, #0]
   82b8c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82b90:	f64a 221c 	movw	r2, #43548	; 0xaa1c
   82b94:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b98:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   82b9c:	6859      	ldr	r1, [r3, #4]
   82b9e:	6848      	ldr	r0, [r1, #4]
   82ba0:	6058      	str	r0, [r3, #4]
   82ba2:	f103 0208 	add.w	r2, r3, #8
   82ba6:	4290      	cmp	r0, r2
   82ba8:	bf04      	itt	eq
   82baa:	6840      	ldreq	r0, [r0, #4]
   82bac:	6058      	streq	r0, [r3, #4]
   82bae:	685b      	ldr	r3, [r3, #4]
   82bb0:	68d9      	ldr	r1, [r3, #12]
   82bb2:	f64a 2084 	movw	r0, #43652	; 0xaa84
   82bb6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82bba:	6001      	str	r1, [r0, #0]
   82bbc:	bd08      	pop	{r3, pc}
   82bbe:	bf00      	nop

00082bc0 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   82bc0:	b538      	push	{r3, r4, r5, lr}
   82bc2:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   82bc4:	b930      	cbnz	r0, 82bd4 <vTaskPlaceOnEventList+0x14>
   82bc6:	f641 1495 	movw	r4, #6549	; 0x1995
   82bca:	f2c0 0408 	movt	r4, #8
   82bce:	47a0      	blx	r4
   82bd0:	bf00      	nop
   82bd2:	e7fd      	b.n	82bd0 <vTaskPlaceOnEventList+0x10>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82bd4:	f64a 2584 	movw	r5, #43652	; 0xaa84
   82bd8:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82bdc:	6829      	ldr	r1, [r5, #0]
   82bde:	f101 0118 	add.w	r1, r1, #24
   82be2:	f641 02c9 	movw	r2, #6345	; 0x18c9
   82be6:	f2c0 0208 	movt	r2, #8
   82bea:	4790      	blx	r2

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82bec:	6828      	ldr	r0, [r5, #0]
   82bee:	f100 0004 	add.w	r0, r0, #4
   82bf2:	f641 1105 	movw	r1, #6405	; 0x1905
   82bf6:	f2c0 0108 	movt	r1, #8
   82bfa:	4788      	blx	r1
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   82bfc:	f1b4 3fff 	cmp.w	r4, #4294967295
   82c00:	d10c      	bne.n	82c1c <vTaskPlaceOnEventList+0x5c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82c02:	6829      	ldr	r1, [r5, #0]
   82c04:	f64a 10d0 	movw	r0, #43472	; 0xa9d0
   82c08:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c0c:	f101 0104 	add.w	r1, r1, #4
   82c10:	f641 03a9 	movw	r3, #6313	; 0x18a9
   82c14:	f2c0 0308 	movt	r3, #8
   82c18:	4798      	blx	r3
   82c1a:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   82c1c:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   82c20:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c24:	6803      	ldr	r3, [r0, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   82c26:	18e0      	adds	r0, r4, r3
   82c28:	f242 22f1 	movw	r2, #8945	; 0x22f1
   82c2c:	f2c0 0208 	movt	r2, #8
   82c30:	4790      	blx	r2
   82c32:	bd38      	pop	{r3, r4, r5, pc}

00082c34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   82c34:	b538      	push	{r3, r4, r5, lr}
   82c36:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   82c38:	b930      	cbnz	r0, 82c48 <vTaskPlaceOnEventListRestricted+0x14>
   82c3a:	f641 1495 	movw	r4, #6549	; 0x1995
   82c3e:	f2c0 0408 	movt	r4, #8
   82c42:	47a0      	blx	r4
   82c44:	bf00      	nop
   82c46:	e7fd      	b.n	82c44 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82c48:	f64a 2484 	movw	r4, #43652	; 0xaa84
   82c4c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82c50:	6821      	ldr	r1, [r4, #0]
   82c52:	f101 0118 	add.w	r1, r1, #24
   82c56:	f641 02a9 	movw	r2, #6313	; 0x18a9
   82c5a:	f2c0 0208 	movt	r2, #8
   82c5e:	4790      	blx	r2

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82c60:	6820      	ldr	r0, [r4, #0]
   82c62:	f100 0004 	add.w	r0, r0, #4
   82c66:	f641 1105 	movw	r1, #6405	; 0x1905
   82c6a:	f2c0 0108 	movt	r1, #8
   82c6e:	4788      	blx	r1
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   82c70:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
   82c74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c78:	6803      	ldr	r3, [r0, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82c7a:	18e8      	adds	r0, r5, r3
   82c7c:	f242 22f1 	movw	r2, #8945	; 0x22f1
   82c80:	f2c0 0208 	movt	r2, #8
   82c84:	4790      	blx	r2
   82c86:	bd38      	pop	{r3, r4, r5, pc}

00082c88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82c88:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   82c8a:	68c3      	ldr	r3, [r0, #12]
   82c8c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   82c8e:	b934      	cbnz	r4, 82c9e <xTaskRemoveFromEventList+0x16>
   82c90:	f641 1495 	movw	r4, #6549	; 0x1995
   82c94:	f2c0 0408 	movt	r4, #8
   82c98:	47a0      	blx	r4
   82c9a:	bf00      	nop
   82c9c:	e7fd      	b.n	82c9a <xTaskRemoveFromEventList+0x12>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82c9e:	f104 0518 	add.w	r5, r4, #24
   82ca2:	4628      	mov	r0, r5
   82ca4:	f641 1105 	movw	r1, #6405	; 0x1905
   82ca8:	f2c0 0108 	movt	r1, #8
   82cac:	4788      	blx	r1

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82cae:	f64a 2080 	movw	r0, #43648	; 0xaa80
   82cb2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82cb6:	6802      	ldr	r2, [r0, #0]
   82cb8:	bb22      	cbnz	r2, 82d04 <xTaskRemoveFromEventList+0x7c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   82cba:	f104 0504 	add.w	r5, r4, #4
   82cbe:	4628      	mov	r0, r5
   82cc0:	f641 1105 	movw	r1, #6405	; 0x1905
   82cc4:	f2c0 0108 	movt	r1, #8
   82cc8:	4788      	blx	r1
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   82cca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82ccc:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82cd0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82cd4:	6813      	ldr	r3, [r2, #0]
   82cd6:	4298      	cmp	r0, r3
   82cd8:	d904      	bls.n	82ce4 <xTaskRemoveFromEventList+0x5c>
   82cda:	f64a 2118 	movw	r1, #43544	; 0xaa18
   82cde:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82ce2:	6008      	str	r0, [r1, #0]
   82ce4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82ce8:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82cec:	4602      	mov	r2, r0
   82cee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82cf2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   82cf6:	4629      	mov	r1, r5
   82cf8:	f641 03a9 	movw	r3, #6313	; 0x18a9
   82cfc:	f2c0 0308 	movt	r3, #8
   82d00:	4798      	blx	r3
   82d02:	e009      	b.n	82d18 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   82d04:	f64a 2088 	movw	r0, #43656	; 0xaa88
   82d08:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82d0c:	4629      	mov	r1, r5
   82d0e:	f641 03a9 	movw	r3, #6313	; 0x18a9
   82d12:	f2c0 0308 	movt	r3, #8
   82d16:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82d18:	f64a 2184 	movw	r1, #43652	; 0xaa84
   82d1c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82d20:	680a      	ldr	r2, [r1, #0]
   82d22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82d24:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   82d26:	4298      	cmp	r0, r3
   82d28:	bf34      	ite	cc
   82d2a:	2000      	movcc	r0, #0
   82d2c:	2001      	movcs	r0, #1
   82d2e:	bd38      	pop	{r3, r4, r5, pc}

00082d30 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   82d30:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   82d32:	4603      	mov	r3, r0
   82d34:	b930      	cbnz	r0, 82d44 <vTaskSetTimeOutState+0x14>
   82d36:	f641 1395 	movw	r3, #6549	; 0x1995
   82d3a:	f2c0 0308 	movt	r3, #8
   82d3e:	4798      	blx	r3
   82d40:	bf00      	nop
   82d42:	e7fd      	b.n	82d40 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   82d44:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   82d48:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82d4c:	6810      	ldr	r0, [r2, #0]
   82d4e:	6018      	str	r0, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   82d50:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   82d54:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82d58:	680a      	ldr	r2, [r1, #0]
   82d5a:	605a      	str	r2, [r3, #4]
   82d5c:	bd08      	pop	{r3, pc}
   82d5e:	bf00      	nop

00082d60 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82d60:	b538      	push	{r3, r4, r5, lr}
   82d62:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82d64:	4604      	mov	r4, r0
   82d66:	b930      	cbnz	r0, 82d76 <xTaskCheckForTimeOut+0x16>
   82d68:	f641 1295 	movw	r2, #6549	; 0x1995
   82d6c:	f2c0 0208 	movt	r2, #8
   82d70:	4790      	blx	r2
   82d72:	bf00      	nop
   82d74:	e7fd      	b.n	82d72 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   82d76:	b931      	cbnz	r1, 82d86 <xTaskCheckForTimeOut+0x26>
   82d78:	f641 1595 	movw	r5, #6549	; 0x1995
   82d7c:	f2c0 0508 	movt	r5, #8
   82d80:	47a8      	blx	r5
   82d82:	bf00      	nop
   82d84:	e7fd      	b.n	82d82 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
   82d86:	f641 13a9 	movw	r3, #6569	; 0x19a9
   82d8a:	f2c0 0308 	movt	r3, #8
   82d8e:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   82d90:	6828      	ldr	r0, [r5, #0]
   82d92:	f1b0 3fff 	cmp.w	r0, #4294967295
   82d96:	d029      	beq.n	82dec <xTaskCheckForTimeOut+0x8c>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   82d98:	f64a 229c 	movw	r2, #43676	; 0xaa9c
   82d9c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82da0:	6811      	ldr	r1, [r2, #0]
   82da2:	6823      	ldr	r3, [r4, #0]
   82da4:	428b      	cmp	r3, r1
   82da6:	d007      	beq.n	82db8 <xTaskCheckForTimeOut+0x58>
   82da8:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82dac:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82db0:	6811      	ldr	r1, [r2, #0]
   82db2:	6863      	ldr	r3, [r4, #4]
   82db4:	428b      	cmp	r3, r1
   82db6:	d91c      	bls.n	82df2 <xTaskCheckForTimeOut+0x92>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   82db8:	f64a 22a0 	movw	r2, #43680	; 0xaaa0
   82dbc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82dc0:	6811      	ldr	r1, [r2, #0]
   82dc2:	6863      	ldr	r3, [r4, #4]
   82dc4:	1aca      	subs	r2, r1, r3
   82dc6:	4290      	cmp	r0, r2
   82dc8:	d916      	bls.n	82df8 <xTaskCheckForTimeOut+0x98>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   82dca:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
   82dce:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82dd2:	680a      	ldr	r2, [r1, #0]
   82dd4:	1a9b      	subs	r3, r3, r2
   82dd6:	1818      	adds	r0, r3, r0
   82dd8:	6028      	str	r0, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82dda:	4620      	mov	r0, r4
   82ddc:	f642 5431 	movw	r4, #11569	; 0x2d31
   82de0:	f2c0 0408 	movt	r4, #8
   82de4:	47a0      	blx	r4
			xReturn = pdFALSE;
   82de6:	f04f 0400 	mov.w	r4, #0
   82dea:	e007      	b.n	82dfc <xTaskCheckForTimeOut+0x9c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82dec:	f04f 0400 	mov.w	r4, #0
   82df0:	e004      	b.n	82dfc <xTaskCheckForTimeOut+0x9c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82df2:	f04f 0401 	mov.w	r4, #1
   82df6:	e001      	b.n	82dfc <xTaskCheckForTimeOut+0x9c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   82df8:	f04f 0401 	mov.w	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   82dfc:	f641 11d1 	movw	r1, #6609	; 0x19d1
   82e00:	f2c0 0108 	movt	r1, #8
   82e04:	4788      	blx	r1

	return xReturn;
}
   82e06:	4620      	mov	r0, r4
   82e08:	bd38      	pop	{r3, r4, r5, pc}
   82e0a:	bf00      	nop

00082e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   82e0c:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   82e10:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82e14:	f04f 0201 	mov.w	r2, #1
   82e18:	601a      	str	r2, [r3, #0]
   82e1a:	4770      	bx	lr

00082e1c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82e1c:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82e20:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82e24:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   82e26:	4770      	bx	lr

00082e28 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   82e28:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
   82e2c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82e30:	6818      	ldr	r0, [r3, #0]
   82e32:	b148      	cbz	r0, 82e48 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82e34:	f64a 2180 	movw	r1, #43648	; 0xaa80
   82e38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82e3c:	680a      	ldr	r2, [r1, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   82e3e:	2a00      	cmp	r2, #0
   82e40:	bf14      	ite	ne
   82e42:	2002      	movne	r0, #2
   82e44:	2001      	moveq	r0, #1
   82e46:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82e48:	f04f 0000 	mov.w	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   82e4c:	4770      	bx	lr
   82e4e:	bf00      	nop

00082e50 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   82e50:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   82e52:	4604      	mov	r4, r0
   82e54:	2800      	cmp	r0, #0
   82e56:	d04e      	beq.n	82ef6 <vTaskPriorityInherit+0xa6>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   82e58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82e5a:	f64a 2284 	movw	r2, #43652	; 0xaa84
   82e5e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82e62:	6810      	ldr	r0, [r2, #0]
   82e64:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82e66:	428b      	cmp	r3, r1
   82e68:	d245      	bcs.n	82ef6 <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   82e6a:	f64a 2284 	movw	r2, #43652	; 0xaa84
   82e6e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82e72:	6810      	ldr	r0, [r2, #0]
   82e74:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82e76:	f1c1 0205 	rsb	r2, r1, #5
   82e7a:	61a2      	str	r2, [r4, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82e7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82e80:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82e84:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82e88:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   82e8c:	6962      	ldr	r2, [r4, #20]
   82e8e:	428a      	cmp	r2, r1
   82e90:	d12a      	bne.n	82ee8 <vTaskPriorityInherit+0x98>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82e92:	f104 0504 	add.w	r5, r4, #4
   82e96:	4628      	mov	r0, r5
   82e98:	f641 1205 	movw	r2, #6405	; 0x1905
   82e9c:	f2c0 0208 	movt	r2, #8
   82ea0:	4790      	blx	r2
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82ea2:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82ea6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82eaa:	6818      	ldr	r0, [r3, #0]
   82eac:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82eae:	62e1      	str	r1, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82eb0:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82eb8:	6813      	ldr	r3, [r2, #0]
   82eba:	4299      	cmp	r1, r3
   82ebc:	d904      	bls.n	82ec8 <vTaskPriorityInherit+0x78>
   82ebe:	f64a 2018 	movw	r0, #43544	; 0xaa18
   82ec2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ec6:	6001      	str	r1, [r0, #0]
   82ec8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82ecc:	f64a 221c 	movw	r2, #43548	; 0xaa1c
   82ed0:	4613      	mov	r3, r2
   82ed2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ed6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   82eda:	4629      	mov	r1, r5
   82edc:	f641 02a9 	movw	r2, #6313	; 0x18a9
   82ee0:	f2c0 0208 	movt	r2, #8
   82ee4:	4790      	blx	r2
   82ee6:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82ee8:	f64a 2384 	movw	r3, #43652	; 0xaa84
   82eec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ef0:	6818      	ldr	r0, [r3, #0]
   82ef2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82ef4:	62e1      	str	r1, [r4, #44]	; 0x2c
   82ef6:	bd38      	pop	{r3, r4, r5, pc}

00082ef8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82ef8:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82efa:	4604      	mov	r4, r0
   82efc:	b350      	cbz	r0, 82f54 <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82efe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82f00:	6c83      	ldr	r3, [r0, #72]	; 0x48
   82f02:	429a      	cmp	r2, r3
   82f04:	d026      	beq.n	82f54 <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82f06:	f100 0504 	add.w	r5, r0, #4
   82f0a:	4628      	mov	r0, r5
   82f0c:	f641 1105 	movw	r1, #6405	; 0x1905
   82f10:	f2c0 0108 	movt	r1, #8
   82f14:	4788      	blx	r1
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   82f16:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82f18:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82f1a:	f1c0 0205 	rsb	r2, r0, #5
   82f1e:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82f20:	f64a 2318 	movw	r3, #43544	; 0xaa18
   82f24:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82f28:	6819      	ldr	r1, [r3, #0]
   82f2a:	4288      	cmp	r0, r1
   82f2c:	d904      	bls.n	82f38 <vTaskPriorityDisinherit+0x40>
   82f2e:	f64a 2218 	movw	r2, #43544	; 0xaa18
   82f32:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82f36:	6010      	str	r0, [r2, #0]
   82f38:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82f3c:	f64a 201c 	movw	r0, #43548	; 0xaa1c
   82f40:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82f44:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82f48:	4629      	mov	r1, r5
   82f4a:	f641 02a9 	movw	r2, #6313	; 0x18a9
   82f4e:	f2c0 0208 	movt	r2, #8
   82f52:	4790      	blx	r2
   82f54:	bd38      	pop	{r3, r4, r5, pc}
   82f56:	bf00      	nop

00082f58 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82f58:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82f5a:	f641 13a9 	movw	r3, #6569	; 0x19a9
   82f5e:	f2c0 0308 	movt	r3, #8
   82f62:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   82f64:	f64a 20fc 	movw	r0, #43772	; 0xaafc
   82f68:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82f6c:	6801      	ldr	r1, [r0, #0]
   82f6e:	bb49      	cbnz	r1, 82fc4 <prvCheckForValidListAndQueue+0x6c>
		{
			vListInitialise( &xActiveTimerList1 );
   82f70:	f64a 25d0 	movw	r5, #43728	; 0xaad0
   82f74:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82f78:	4628      	mov	r0, r5
   82f7a:	f641 0689 	movw	r6, #6281	; 0x1889
   82f7e:	f2c0 0608 	movt	r6, #8
   82f82:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82f84:	f64a 24e4 	movw	r4, #43748	; 0xaae4
   82f88:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82f8c:	4620      	mov	r0, r4
   82f8e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   82f90:	f64a 22cc 	movw	r2, #43724	; 0xaacc
   82f94:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82f98:	6015      	str	r5, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82f9a:	f64a 3300 	movw	r3, #43776	; 0xab00
   82f9e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82fa2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82fa4:	f04f 0005 	mov.w	r0, #5
   82fa8:	f04f 010c 	mov.w	r1, #12
   82fac:	f04f 0200 	mov.w	r2, #0
   82fb0:	f641 6345 	movw	r3, #7749	; 0x1e45
   82fb4:	f2c0 0308 	movt	r3, #8
   82fb8:	4798      	blx	r3
   82fba:	f64a 21fc 	movw	r1, #43772	; 0xaafc
   82fbe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82fc2:	6008      	str	r0, [r1, #0]
		}
	}
	taskEXIT_CRITICAL();
   82fc4:	f641 10d1 	movw	r0, #6609	; 0x19d1
   82fc8:	f2c0 0008 	movt	r0, #8
   82fcc:	4780      	blx	r0
   82fce:	bd70      	pop	{r4, r5, r6, pc}

00082fd0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82fd0:	b510      	push	{r4, lr}
   82fd2:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   82fd4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82fd6:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   82fd8:	4291      	cmp	r1, r2
   82fda:	d812      	bhi.n	83002 <prvInsertTimerInActiveList+0x32>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   82fdc:	1ad0      	subs	r0, r2, r3
   82fde:	69a1      	ldr	r1, [r4, #24]
   82fe0:	4288      	cmp	r0, r1
   82fe2:	d221      	bcs.n	83028 <prvInsertTimerInActiveList+0x58>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   82fe4:	f64a 3300 	movw	r3, #43776	; 0xab00
   82fe8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82fec:	6818      	ldr	r0, [r3, #0]
   82fee:	f104 0104 	add.w	r1, r4, #4
   82ff2:	f641 02c9 	movw	r2, #6345	; 0x18c9
   82ff6:	f2c0 0208 	movt	r2, #8
   82ffa:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82ffc:	f04f 0000 	mov.w	r0, #0
   83000:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   83002:	429a      	cmp	r2, r3
   83004:	d201      	bcs.n	8300a <prvInsertTimerInActiveList+0x3a>
   83006:	4299      	cmp	r1, r3
   83008:	d211      	bcs.n	8302e <prvInsertTimerInActiveList+0x5e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8300a:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   8300e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83012:	6818      	ldr	r0, [r3, #0]
   83014:	f104 0104 	add.w	r1, r4, #4
   83018:	f641 02c9 	movw	r2, #6345	; 0x18c9
   8301c:	f2c0 0208 	movt	r2, #8
   83020:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   83022:	f04f 0000 	mov.w	r0, #0
   83026:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   83028:	f04f 0001 	mov.w	r0, #1
   8302c:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   8302e:	f04f 0001 	mov.w	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   83032:	bd10      	pop	{r4, pc}

00083034 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   83034:	b510      	push	{r4, lr}
   83036:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   83038:	f642 7359 	movw	r3, #12121	; 0x2f59
   8303c:	f2c0 0308 	movt	r3, #8
   83040:	4798      	blx	r3

	if( xTimerQueue != NULL )
   83042:	f64a 20fc 	movw	r0, #43772	; 0xaafc
   83046:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8304a:	6801      	ldr	r1, [r0, #0]
   8304c:	b1b9      	cbz	r1, 8307e <xTimerCreateTimerTask+0x4a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8304e:	f04f 0204 	mov.w	r2, #4
   83052:	9200      	str	r2, [sp, #0]
   83054:	f04f 0300 	mov.w	r3, #0
   83058:	9301      	str	r3, [sp, #4]
   8305a:	9302      	str	r3, [sp, #8]
   8305c:	9303      	str	r3, [sp, #12]
   8305e:	f243 10d5 	movw	r0, #12757	; 0x31d5
   83062:	f2c0 0008 	movt	r0, #8
   83066:	f24a 7120 	movw	r1, #42784	; 0xa720
   8306a:	f2c0 0108 	movt	r1, #8
   8306e:	f44f 7282 	mov.w	r2, #260	; 0x104
   83072:	f242 3471 	movw	r4, #9073	; 0x2371
   83076:	f2c0 0408 	movt	r4, #8
   8307a:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   8307c:	b930      	cbnz	r0, 8308c <xTimerCreateTimerTask+0x58>
   8307e:	f641 1495 	movw	r4, #6549	; 0x1995
   83082:	f2c0 0408 	movt	r4, #8
   83086:	47a0      	blx	r4
   83088:	bf00      	nop
   8308a:	e7fd      	b.n	83088 <xTimerCreateTimerTask+0x54>
	return xReturn;
}
   8308c:	b004      	add	sp, #16
   8308e:	bd10      	pop	{r4, pc}

00083090 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   83090:	b510      	push	{r4, lr}
   83092:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   83094:	f64a 24fc 	movw	r4, #43772	; 0xaafc
   83098:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8309c:	6824      	ldr	r4, [r4, #0]
   8309e:	b32c      	cbz	r4, 830ec <xTimerGenericCommand+0x5c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   830a0:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   830a2:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   830a4:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   830a6:	b9b3      	cbnz	r3, 830d6 <xTimerGenericCommand+0x46>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   830a8:	f642 6329 	movw	r3, #11817	; 0x2e29
   830ac:	f2c0 0308 	movt	r3, #8
   830b0:	4798      	blx	r3
   830b2:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   830b4:	f64a 23fc 	movw	r3, #43772	; 0xaafc
   830b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   830bc:	6818      	ldr	r0, [r3, #0]
   830be:	a901      	add	r1, sp, #4
   830c0:	bf07      	ittee	eq
   830c2:	9a06      	ldreq	r2, [sp, #24]
   830c4:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   830c6:	2200      	movne	r2, #0
   830c8:	4613      	movne	r3, r2
   830ca:	f641 64b1 	movw	r4, #7857	; 0x1eb1
   830ce:	f2c0 0408 	movt	r4, #8
   830d2:	47a0      	blx	r4
   830d4:	e00c      	b.n	830f0 <xTimerGenericCommand+0x60>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   830d6:	4620      	mov	r0, r4
   830d8:	a901      	add	r1, sp, #4
   830da:	461a      	mov	r2, r3
   830dc:	f04f 0300 	mov.w	r3, #0
   830e0:	f242 0425 	movw	r4, #8229	; 0x2025
   830e4:	f2c0 0408 	movt	r4, #8
   830e8:	47a0      	blx	r4
   830ea:	e001      	b.n	830f0 <xTimerGenericCommand+0x60>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   830ec:	f04f 0000 	mov.w	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   830f0:	b004      	add	sp, #16
   830f2:	bd10      	pop	{r4, pc}

000830f4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   830f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   830f8:	b085      	sub	sp, #20
   830fa:	4682      	mov	sl, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   830fc:	f242 63ad 	movw	r3, #9901	; 0x26ad
   83100:	f2c0 0308 	movt	r3, #8
   83104:	4798      	blx	r3
   83106:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
   83108:	f64a 20f8 	movw	r0, #43768	; 0xaaf8
   8310c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83110:	6801      	ldr	r1, [r0, #0]
   83112:	4589      	cmp	r9, r1
   83114:	d24f      	bcs.n	831b6 <prvSampleTimeNow+0xc2>
   83116:	e02b      	b.n	83170 <prvSampleTimeNow+0x7c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83118:	68dc      	ldr	r4, [r3, #12]
   8311a:	6826      	ldr	r6, [r4, #0]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8311c:	68dd      	ldr	r5, [r3, #12]
   8311e:	68ec      	ldr	r4, [r5, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   83120:	f104 0504 	add.w	r5, r4, #4
   83124:	4628      	mov	r0, r5
   83126:	47c0      	blx	r8

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83128:	6a61      	ldr	r1, [r4, #36]	; 0x24
   8312a:	4620      	mov	r0, r4
   8312c:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8312e:	69e0      	ldr	r0, [r4, #28]
   83130:	2801      	cmp	r0, #1
   83132:	d12c      	bne.n	8318e <prvSampleTimeNow+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   83134:	69a3      	ldr	r3, [r4, #24]
   83136:	18f2      	adds	r2, r6, r3
			if( xReloadTime > xNextExpireTime )
   83138:	42b2      	cmp	r2, r6
   8313a:	d909      	bls.n	83150 <prvSampleTimeNow+0x5c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8313c:	6062      	str	r2, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8313e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83140:	6838      	ldr	r0, [r7, #0]
   83142:	4629      	mov	r1, r5
   83144:	f641 03c9 	movw	r3, #6345	; 0x18c9
   83148:	f2c0 0308 	movt	r3, #8
   8314c:	4798      	blx	r3
   8314e:	e01e      	b.n	8318e <prvSampleTimeNow+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83150:	f8cd b000 	str.w	fp, [sp]
   83154:	4620      	mov	r0, r4
   83156:	4659      	mov	r1, fp
   83158:	4632      	mov	r2, r6
   8315a:	465b      	mov	r3, fp
   8315c:	9c03      	ldr	r4, [sp, #12]
   8315e:	47a0      	blx	r4
				configASSERT( xResult );
   83160:	b9a8      	cbnz	r0, 8318e <prvSampleTimeNow+0x9a>
   83162:	f641 1695 	movw	r6, #6549	; 0x1995
   83166:	f2c0 0608 	movt	r6, #8
   8316a:	47b0      	blx	r6
   8316c:	bf00      	nop
   8316e:	e7fd      	b.n	8316c <prvSampleTimeNow+0x78>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83170:	f64a 27cc 	movw	r7, #43724	; 0xaacc
   83174:	f2c2 0707 	movt	r7, #8199	; 0x2007
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   83178:	f641 1805 	movw	r8, #6405	; 0x1905
   8317c:	f2c0 0808 	movt	r8, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83180:	f04f 0b00 	mov.w	fp, #0
   83184:	f243 0391 	movw	r3, #12433	; 0x3091
   83188:	f2c0 0308 	movt	r3, #8
   8318c:	9303      	str	r3, [sp, #12]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8318e:	683b      	ldr	r3, [r7, #0]
   83190:	6818      	ldr	r0, [r3, #0]
   83192:	2800      	cmp	r0, #0
   83194:	d1c0      	bne.n	83118 <prvSampleTimeNow+0x24>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   83196:	f64a 3200 	movw	r2, #43776	; 0xab00
   8319a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8319e:	6811      	ldr	r1, [r2, #0]
   831a0:	f64a 20cc 	movw	r0, #43724	; 0xaacc
   831a4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   831a8:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   831aa:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   831ac:	f04f 0301 	mov.w	r3, #1
   831b0:	f8ca 3000 	str.w	r3, [sl]
   831b4:	e003      	b.n	831be <prvSampleTimeNow+0xca>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   831b6:	f04f 0200 	mov.w	r2, #0
   831ba:	f8ca 2000 	str.w	r2, [sl]
	}

	xLastTime = xTimeNow;
   831be:	f64a 22f8 	movw	r2, #43768	; 0xaaf8
   831c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   831c6:	f8c2 9000 	str.w	r9, [r2]

	return xTimeNow;
}
   831ca:	4648      	mov	r0, r9
   831cc:	b005      	add	sp, #20
   831ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   831d2:	bf00      	nop

000831d4 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   831d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   831d8:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   831da:	f64a 2bcc 	movw	fp, #43724	; 0xaacc
   831de:	f2c2 0b07 	movt	fp, #8199	; 0x2007
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   831e2:	f242 6399 	movw	r3, #9881	; 0x2699
   831e6:	f2c0 0308 	movt	r3, #8
   831ea:	9303      	str	r3, [sp, #12]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   831ec:	f243 0af5 	movw	sl, #12533	; 0x30f5
   831f0:	f2c0 0a08 	movt	sl, #8
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   831f4:	f8db 0000 	ldr.w	r0, [fp]
   831f8:	6802      	ldr	r2, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
   831fa:	2a00      	cmp	r2, #0
   831fc:	f000 80c4 	beq.w	83388 <prvTimerTask+0x1b4>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83200:	68c7      	ldr	r7, [r0, #12]
   83202:	683d      	ldr	r5, [r7, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   83204:	9b03      	ldr	r3, [sp, #12]
   83206:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83208:	a804      	add	r0, sp, #16
   8320a:	47d0      	blx	sl
   8320c:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8320e:	9804      	ldr	r0, [sp, #16]
   83210:	2800      	cmp	r0, #0
   83212:	d150      	bne.n	832b6 <prvTimerTask+0xe2>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   83214:	42b5      	cmp	r5, r6
   83216:	d837      	bhi.n	83288 <prvTimerTask+0xb4>
			{
				xTaskResumeAll();
   83218:	f642 0761 	movw	r7, #10337	; 0x2861
   8321c:	f2c0 0708 	movt	r7, #8
   83220:	47b8      	blx	r7
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83222:	f8db 3000 	ldr.w	r3, [fp]
   83226:	68d8      	ldr	r0, [r3, #12]
   83228:	68c4      	ldr	r4, [r0, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8322a:	f104 0004 	add.w	r0, r4, #4
   8322e:	f641 1205 	movw	r2, #6405	; 0x1905
   83232:	f2c0 0208 	movt	r2, #8
   83236:	4790      	blx	r2
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   83238:	69e1      	ldr	r1, [r4, #28]
   8323a:	2901      	cmp	r1, #1
   8323c:	d11e      	bne.n	8327c <prvTimerTask+0xa8>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8323e:	69a7      	ldr	r7, [r4, #24]
   83240:	4620      	mov	r0, r4
   83242:	19e9      	adds	r1, r5, r7
   83244:	4632      	mov	r2, r6
   83246:	462b      	mov	r3, r5
   83248:	f642 76d1 	movw	r6, #12241	; 0x2fd1
   8324c:	f2c0 0608 	movt	r6, #8
   83250:	47b0      	blx	r6
   83252:	2801      	cmp	r0, #1
   83254:	d112      	bne.n	8327c <prvTimerTask+0xa8>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83256:	f04f 0300 	mov.w	r3, #0
   8325a:	9300      	str	r3, [sp, #0]
   8325c:	4620      	mov	r0, r4
   8325e:	4619      	mov	r1, r3
   83260:	462a      	mov	r2, r5
   83262:	f243 0591 	movw	r5, #12433	; 0x3091
   83266:	f2c0 0508 	movt	r5, #8
   8326a:	47a8      	blx	r5
			configASSERT( xResult );
   8326c:	b930      	cbnz	r0, 8327c <prvTimerTask+0xa8>
   8326e:	f641 1795 	movw	r7, #6549	; 0x1995
   83272:	f2c0 0708 	movt	r7, #8
   83276:	47b8      	blx	r7
   83278:	bf00      	nop
   8327a:	e7fd      	b.n	83278 <prvTimerTask+0xa4>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8327c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8327e:	4620      	mov	r0, r4
   83280:	4798      	blx	r3
   83282:	e01d      	b.n	832c0 <prvTimerTask+0xec>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   83284:	f04f 0500 	mov.w	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   83288:	f64a 21fc 	movw	r1, #43772	; 0xaafc
   8328c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83290:	6808      	ldr	r0, [r1, #0]
   83292:	1ba9      	subs	r1, r5, r6
   83294:	f242 269d 	movw	r6, #8861	; 0x229d
   83298:	f2c0 0608 	movt	r6, #8
   8329c:	47b0      	blx	r6

				if( xTaskResumeAll() == pdFALSE )
   8329e:	f642 0461 	movw	r4, #10337	; 0x2861
   832a2:	f2c0 0408 	movt	r4, #8
   832a6:	47a0      	blx	r4
   832a8:	b950      	cbnz	r0, 832c0 <prvTimerTask+0xec>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   832aa:	f641 1585 	movw	r5, #6533	; 0x1985
   832ae:	f2c0 0508 	movt	r5, #8
   832b2:	47a8      	blx	r5
   832b4:	e004      	b.n	832c0 <prvTimerTask+0xec>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   832b6:	f642 0261 	movw	r2, #10337	; 0x2861
   832ba:	f2c0 0208 	movt	r2, #8
   832be:	4790      	blx	r2
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   832c0:	a804      	add	r0, sp, #16
   832c2:	47d0      	blx	sl
   832c4:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   832c6:	f64a 26fc 	movw	r6, #43772	; 0xaafc
   832ca:	f2c2 0607 	movt	r6, #8199	; 0x2007
   832ce:	f242 05d5 	movw	r5, #8405	; 0x20d5
   832d2:	f2c0 0508 	movt	r5, #8
		if( pxTimer != NULL )
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   832d6:	f641 1805 	movw	r8, #6405	; 0x1905
   832da:	f2c0 0808 	movt	r8, #8
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   832de:	f642 79d1 	movw	r9, #12241	; 0x2fd1
   832e2:	f2c0 0908 	movt	r9, #8
   832e6:	e046      	b.n	83376 <prvTimerTask+0x1a2>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   832e8:	9c07      	ldr	r4, [sp, #28]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   832ea:	b124      	cbz	r4, 832f6 <prvTimerTask+0x122>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   832ec:	6960      	ldr	r0, [r4, #20]
   832ee:	b110      	cbz	r0, 832f6 <prvTimerTask+0x122>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   832f0:	f104 0004 	add.w	r0, r4, #4
   832f4:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   832f6:	9a05      	ldr	r2, [sp, #20]
   832f8:	2a02      	cmp	r2, #2
   832fa:	d026      	beq.n	8334a <prvTimerTask+0x176>
   832fc:	2a03      	cmp	r2, #3
   832fe:	d034      	beq.n	8336a <prvTimerTask+0x196>
   83300:	2a00      	cmp	r2, #0
   83302:	d138      	bne.n	83376 <prvTimerTask+0x1a2>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   83304:	9b06      	ldr	r3, [sp, #24]
   83306:	69a1      	ldr	r1, [r4, #24]
   83308:	4620      	mov	r0, r4
   8330a:	1859      	adds	r1, r3, r1
   8330c:	463a      	mov	r2, r7
   8330e:	47c8      	blx	r9
   83310:	2801      	cmp	r0, #1
   83312:	d130      	bne.n	83376 <prvTimerTask+0x1a2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83314:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83316:	4620      	mov	r0, r4
   83318:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8331a:	69e0      	ldr	r0, [r4, #28]
   8331c:	2801      	cmp	r0, #1
   8331e:	d12a      	bne.n	83376 <prvTimerTask+0x1a2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   83320:	69a2      	ldr	r2, [r4, #24]
   83322:	f04f 0300 	mov.w	r3, #0
   83326:	9300      	str	r3, [sp, #0]
   83328:	4620      	mov	r0, r4
   8332a:	4619      	mov	r1, r3
   8332c:	9c06      	ldr	r4, [sp, #24]
   8332e:	1912      	adds	r2, r2, r4
   83330:	f243 0491 	movw	r4, #12433	; 0x3091
   83334:	f2c0 0408 	movt	r4, #8
   83338:	47a0      	blx	r4
						configASSERT( xResult );
   8333a:	b9e0      	cbnz	r0, 83376 <prvTimerTask+0x1a2>
   8333c:	f641 1595 	movw	r5, #6549	; 0x1995
   83340:	f2c0 0508 	movt	r5, #8
   83344:	47a8      	blx	r5
   83346:	bf00      	nop
   83348:	e7fd      	b.n	83346 <prvTimerTask+0x172>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8334a:	9b06      	ldr	r3, [sp, #24]
   8334c:	61a3      	str	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8334e:	b933      	cbnz	r3, 8335e <prvTimerTask+0x18a>
   83350:	f641 1695 	movw	r6, #6549	; 0x1995
   83354:	f2c0 0608 	movt	r6, #8
   83358:	47b0      	blx	r6
   8335a:	bf00      	nop
   8335c:	e7fd      	b.n	8335a <prvTimerTask+0x186>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8335e:	4620      	mov	r0, r4
   83360:	18f9      	adds	r1, r7, r3
   83362:	463a      	mov	r2, r7
   83364:	463b      	mov	r3, r7
   83366:	47c8      	blx	r9
   83368:	e005      	b.n	83376 <prvTimerTask+0x1a2>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8336a:	4620      	mov	r0, r4
   8336c:	f641 4125 	movw	r1, #7205	; 0x1c25
   83370:	f2c0 0108 	movt	r1, #8
   83374:	4788      	blx	r1

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   83376:	6830      	ldr	r0, [r6, #0]
   83378:	a905      	add	r1, sp, #20
   8337a:	f04f 0200 	mov.w	r2, #0
   8337e:	4613      	mov	r3, r2
   83380:	47a8      	blx	r5
   83382:	2800      	cmp	r0, #0
   83384:	d1b0      	bne.n	832e8 <prvTimerTask+0x114>
   83386:	e735      	b.n	831f4 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   83388:	9903      	ldr	r1, [sp, #12]
   8338a:	4788      	blx	r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8338c:	a804      	add	r0, sp, #16
   8338e:	47d0      	blx	sl
   83390:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   83392:	9c04      	ldr	r4, [sp, #16]
   83394:	2c00      	cmp	r4, #0
   83396:	f43f af75 	beq.w	83284 <prvTimerTask+0xb0>
   8339a:	e78c      	b.n	832b6 <prvTimerTask+0xe2>

0008339c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8339c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8339e:	b083      	sub	sp, #12
   833a0:	4604      	mov	r4, r0
   833a2:	460d      	mov	r5, r1
	uint32_t val = 0;
   833a4:	f04f 0300 	mov.w	r3, #0
   833a8:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   833aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
   833ae:	f2c4 000e 	movt	r0, #16398	; 0x400e
   833b2:	4284      	cmp	r4, r0
   833b4:	d10d      	bne.n	833d2 <usart_serial_getchar+0x36>
		while (uart_read((Uart*)p_usart, data));
   833b6:	f44f 6600 	mov.w	r6, #2048	; 0x800
   833ba:	f2c4 060e 	movt	r6, #16398	; 0x400e
   833be:	f241 473d 	movw	r7, #5181	; 0x143d
   833c2:	f2c0 0708 	movt	r7, #8
   833c6:	4630      	mov	r0, r6
   833c8:	4629      	mov	r1, r5
   833ca:	47b8      	blx	r7
   833cc:	2800      	cmp	r0, #0
   833ce:	d1fa      	bne.n	833c6 <usart_serial_getchar+0x2a>
   833d0:	e02b      	b.n	8342a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   833d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   833d6:	f2c4 0109 	movt	r1, #16393	; 0x4009
   833da:	428c      	cmp	r4, r1
   833dc:	d10f      	bne.n	833fe <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
   833de:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   833e2:	f2c4 0609 	movt	r6, #16393	; 0x4009
   833e6:	f241 4775 	movw	r7, #5237	; 0x1475
   833ea:	f2c0 0708 	movt	r7, #8
   833ee:	4630      	mov	r0, r6
   833f0:	a901      	add	r1, sp, #4
   833f2:	47b8      	blx	r7
   833f4:	2800      	cmp	r0, #0
   833f6:	d1fa      	bne.n	833ee <usart_serial_getchar+0x52>
		*data = (uint8_t)(val & 0xFF);
   833f8:	9801      	ldr	r0, [sp, #4]
   833fa:	7028      	strb	r0, [r5, #0]
   833fc:	e02b      	b.n	83456 <usart_serial_getchar+0xba>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   833fe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   83402:	f2c4 0209 	movt	r2, #16393	; 0x4009
   83406:	4294      	cmp	r4, r2
   83408:	d10f      	bne.n	8342a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
   8340a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   8340e:	f2c4 0409 	movt	r4, #16393	; 0x4009
   83412:	f241 4675 	movw	r6, #5237	; 0x1475
   83416:	f2c0 0608 	movt	r6, #8
   8341a:	4620      	mov	r0, r4
   8341c:	a901      	add	r1, sp, #4
   8341e:	47b0      	blx	r6
   83420:	2800      	cmp	r0, #0
   83422:	d1fa      	bne.n	8341a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   83424:	9b01      	ldr	r3, [sp, #4]
   83426:	702b      	strb	r3, [r5, #0]
   83428:	e02a      	b.n	83480 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8342a:	f04f 0100 	mov.w	r1, #0
   8342e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   83432:	428c      	cmp	r4, r1
   83434:	d10f      	bne.n	83456 <usart_serial_getchar+0xba>
		while (usart_read(p_usart, &val));
   83436:	f04f 0400 	mov.w	r4, #0
   8343a:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8343e:	f241 4675 	movw	r6, #5237	; 0x1475
   83442:	f2c0 0608 	movt	r6, #8
   83446:	4620      	mov	r0, r4
   83448:	a901      	add	r1, sp, #4
   8344a:	47b0      	blx	r6
   8344c:	2800      	cmp	r0, #0
   8344e:	d1fa      	bne.n	83446 <usart_serial_getchar+0xaa>
		*data = (uint8_t)(val & 0xFF);
   83450:	9801      	ldr	r0, [sp, #4]
   83452:	7028      	strb	r0, [r5, #0]
   83454:	e014      	b.n	83480 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8345a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8345e:	4294      	cmp	r4, r2
   83460:	d10e      	bne.n	83480 <usart_serial_getchar+0xe4>
		while (usart_read(p_usart, &val));
   83462:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   83466:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8346a:	f241 4675 	movw	r6, #5237	; 0x1475
   8346e:	f2c0 0608 	movt	r6, #8
   83472:	4620      	mov	r0, r4
   83474:	a901      	add	r1, sp, #4
   83476:	47b0      	blx	r6
   83478:	2800      	cmp	r0, #0
   8347a:	d1fa      	bne.n	83472 <usart_serial_getchar+0xd6>
		*data = (uint8_t)(val & 0xFF);
   8347c:	9b01      	ldr	r3, [sp, #4]
   8347e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   83480:	b003      	add	sp, #12
   83482:	bdf0      	pop	{r4, r5, r6, r7, pc}

00083484 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   83484:	b570      	push	{r4, r5, r6, lr}
   83486:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   83488:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8348c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   83490:	4298      	cmp	r0, r3
   83492:	d10f      	bne.n	834b4 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   83494:	f44f 6500 	mov.w	r5, #2048	; 0x800
   83498:	f2c4 050e 	movt	r5, #16398	; 0x400e
   8349c:	f241 4625 	movw	r6, #5157	; 0x1425
   834a0:	f2c0 0608 	movt	r6, #8
   834a4:	4628      	mov	r0, r5
   834a6:	4621      	mov	r1, r4
   834a8:	47b0      	blx	r6
   834aa:	2800      	cmp	r0, #0
   834ac:	d1fa      	bne.n	834a4 <usart_serial_putchar+0x20>
		return 1;
   834ae:	f04f 0001 	mov.w	r0, #1
   834b2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   834b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   834b8:	f2c4 0109 	movt	r1, #16393	; 0x4009
   834bc:	4288      	cmp	r0, r1
   834be:	d10f      	bne.n	834e0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   834c0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   834c4:	f2c4 0509 	movt	r5, #16393	; 0x4009
   834c8:	f241 4655 	movw	r6, #5205	; 0x1455
   834cc:	f2c0 0608 	movt	r6, #8
   834d0:	4628      	mov	r0, r5
   834d2:	4621      	mov	r1, r4
   834d4:	47b0      	blx	r6
   834d6:	2800      	cmp	r0, #0
   834d8:	d1fa      	bne.n	834d0 <usart_serial_putchar+0x4c>
		return 1;
   834da:	f04f 0001 	mov.w	r0, #1
   834de:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   834e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   834e4:	f2c4 0209 	movt	r2, #16393	; 0x4009
   834e8:	4290      	cmp	r0, r2
   834ea:	d10f      	bne.n	8350c <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   834ec:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   834f0:	f2c4 0509 	movt	r5, #16393	; 0x4009
   834f4:	f241 4655 	movw	r6, #5205	; 0x1455
   834f8:	f2c0 0608 	movt	r6, #8
   834fc:	4628      	mov	r0, r5
   834fe:	4621      	mov	r1, r4
   83500:	47b0      	blx	r6
   83502:	2800      	cmp	r0, #0
   83504:	d1fa      	bne.n	834fc <usart_serial_putchar+0x78>
		return 1;
   83506:	f04f 0001 	mov.w	r0, #1
   8350a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8350c:	f04f 0300 	mov.w	r3, #0
   83510:	f2c4 030a 	movt	r3, #16394	; 0x400a
   83514:	4298      	cmp	r0, r3
   83516:	d10f      	bne.n	83538 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   83518:	f04f 0500 	mov.w	r5, #0
   8351c:	f2c4 050a 	movt	r5, #16394	; 0x400a
   83520:	f241 4655 	movw	r6, #5205	; 0x1455
   83524:	f2c0 0608 	movt	r6, #8
   83528:	4628      	mov	r0, r5
   8352a:	4621      	mov	r1, r4
   8352c:	47b0      	blx	r6
   8352e:	2800      	cmp	r0, #0
   83530:	d1fa      	bne.n	83528 <usart_serial_putchar+0xa4>
		return 1;
   83532:	f04f 0001 	mov.w	r0, #1
   83536:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8353c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   83540:	4288      	cmp	r0, r1
   83542:	d10f      	bne.n	83564 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   83544:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83548:	f2c4 050a 	movt	r5, #16394	; 0x400a
   8354c:	f241 4655 	movw	r6, #5205	; 0x1455
   83550:	f2c0 0608 	movt	r6, #8
   83554:	4628      	mov	r0, r5
   83556:	4621      	mov	r1, r4
   83558:	47b0      	blx	r6
   8355a:	2800      	cmp	r0, #0
   8355c:	d1fa      	bne.n	83554 <usart_serial_putchar+0xd0>
		return 1;
   8355e:	f04f 0001 	mov.w	r0, #1
   83562:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   83564:	f04f 0000 	mov.w	r0, #0
}
   83568:	bd70      	pop	{r4, r5, r6, pc}
   8356a:	bf00      	nop

0008356c <configure_console>:


void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio.
*  Note that the baudrate, parity and other parameters must be set in */
{
   8356c:	b530      	push	{r4, r5, lr}
   8356e:	b085      	sub	sp, #20
   83570:	f04f 0008 	mov.w	r0, #8
   83574:	f241 0555 	movw	r5, #4181	; 0x1055
   83578:	f2c0 0508 	movt	r5, #8
   8357c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8357e:	f44f 6400 	mov.w	r4, #2048	; 0x800
   83582:	f2c4 040e 	movt	r4, #16398	; 0x400e
   83586:	f64a 3374 	movw	r3, #43892	; 0xab74
   8358a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8358e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   83590:	f64a 3070 	movw	r0, #43888	; 0xab70
   83594:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83598:	f243 4285 	movw	r2, #13445	; 0x3485
   8359c:	f2c0 0208 	movt	r2, #8
   835a0:	6002      	str	r2, [r0, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   835a2:	f64a 316c 	movw	r1, #43884	; 0xab6c
   835a6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   835aa:	f243 339d 	movw	r3, #13213	; 0x339d
   835ae:	f2c0 0308 	movt	r3, #8
   835b2:	600b      	str	r3, [r1, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   835b4:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   835b8:	f2c0 5001 	movt	r0, #1281	; 0x501
   835bc:	9000      	str	r0, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   835be:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   835c2:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   835c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
   835c8:	9102      	str	r1, [sp, #8]
   835ca:	f04f 0008 	mov.w	r0, #8
   835ce:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   835d0:	4620      	mov	r0, r4
   835d2:	4669      	mov	r1, sp
   835d4:	f241 35e1 	movw	r5, #5089	; 0x13e1
   835d8:	f2c0 0508 	movt	r5, #8
   835dc:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   835de:	f240 0510 	movw	r5, #16
   835e2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   835e6:	682c      	ldr	r4, [r5, #0]
   835e8:	68a0      	ldr	r0, [r4, #8]
   835ea:	f04f 0100 	mov.w	r1, #0
   835ee:	f643 74f5 	movw	r4, #16373	; 0x3ff5
   835f2:	f2c0 0408 	movt	r4, #8
   835f6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   835f8:	682b      	ldr	r3, [r5, #0]
   835fa:	6858      	ldr	r0, [r3, #4]
   835fc:	f04f 0100 	mov.w	r1, #0
   83600:	47a0      	blx	r4
	};
	
	/* Configure console UART */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   83602:	b005      	add	sp, #20
   83604:	bd30      	pop	{r4, r5, pc}
   83606:	bf00      	nop

00083608 <main>:
#include "PIDControl.h"
#include "MatlabPlot.h"
#include "io_uart.h"

int main (void)
{
   83608:	b510      	push	{r4, lr}
   8360a:	b084      	sub	sp, #16
	sysclk_init();			// Initialize system clock
   8360c:	f240 13a5 	movw	r3, #421	; 0x1a5
   83610:	f2c0 0308 	movt	r3, #8
   83614:	4798      	blx	r3
	board_init();			// Initialize Arduino Due board
   83616:	f640 10b5 	movw	r0, #2485	; 0x9b5
   8361a:	f2c0 0008 	movt	r0, #8
   8361e:	4780      	blx	r0
	configure_console();	// Initialize terminal window
   83620:	f243 516d 	movw	r1, #13677	; 0x356d
   83624:	f2c0 0108 	movt	r1, #8
   83628:	4788      	blx	r1
	adc_setup();			// Initialize ADC
   8362a:	f240 7271 	movw	r2, #1905	; 0x771
   8362e:	f2c0 0208 	movt	r2, #8
   83632:	4790      	blx	r2
	pwm_setup();			// Initialize PWM
   83634:	f240 64ad 	movw	r4, #1709	; 0x6ad
   83638:	f2c0 0408 	movt	r4, #8
   8363c:	47a0      	blx	r4
	motorshield_setup();	// Initialize motor shield
   8363e:	f240 43bd 	movw	r3, #1213	; 0x4bd
   83642:	f2c0 0308 	movt	r3, #8
   83646:	4798      	blx	r3
	delay_init();			// Initialize delay
   83648:	f240 201d 	movw	r0, #541	; 0x21d
   8364c:	f2c0 0008 	movt	r0, #8
   83650:	4780      	blx	r0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   83656:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8365a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8365e:	610a      	str	r2, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83660:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83664:	634a      	str	r2, [r1, #52]	; 0x34
	//test_uart();
	//test_pin();
	
	
	/* Task with highest priority */
	if (xTaskCreate(pid_control, (const signed char * const) "PID Control", 1024, NULL, 2, NULL) != pdPASS)
   83666:	f04f 0402 	mov.w	r4, #2
   8366a:	9400      	str	r4, [sp, #0]
   8366c:	f04f 0300 	mov.w	r3, #0
   83670:	9301      	str	r3, [sp, #4]
   83672:	9302      	str	r3, [sp, #8]
   83674:	9303      	str	r3, [sp, #12]
   83676:	f240 40e9 	movw	r0, #1257	; 0x4e9
   8367a:	f2c0 0008 	movt	r0, #8
   8367e:	f24a 7128 	movw	r1, #42792	; 0xa728
   83682:	f2c0 0108 	movt	r1, #8
   83686:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8368a:	f242 3471 	movw	r4, #9073	; 0x2371
   8368e:	f2c0 0408 	movt	r4, #8
   83692:	47a0      	blx	r4
   83694:	2801      	cmp	r0, #1
   83696:	d002      	beq.n	8369e <main+0x96>
	{
		printf("Failed to create PID Control task\r\n");
   83698:	4813      	ldr	r0, [pc, #76]	; (836e8 <main+0xe0>)
   8369a:	4b14      	ldr	r3, [pc, #80]	; (836ec <main+0xe4>)
   8369c:	4798      	blx	r3
	}
	
	/* Task with lower priority */
	if (xTaskCreate(plot_values, (const signed char * const) "Plot Values", 1024, NULL, 1 , NULL) != pdPASS)
   8369e:	f04f 0001 	mov.w	r0, #1
   836a2:	9000      	str	r0, [sp, #0]
   836a4:	f04f 0300 	mov.w	r3, #0
   836a8:	9301      	str	r3, [sp, #4]
   836aa:	9302      	str	r3, [sp, #8]
   836ac:	9303      	str	r3, [sp, #12]
   836ae:	f240 3091 	movw	r0, #913	; 0x391
   836b2:	f2c0 0008 	movt	r0, #8
   836b6:	f24a 7158 	movw	r1, #42840	; 0xa758
   836ba:	f2c0 0108 	movt	r1, #8
   836be:	f44f 6280 	mov.w	r2, #1024	; 0x400
   836c2:	f242 3471 	movw	r4, #9073	; 0x2371
   836c6:	f2c0 0408 	movt	r4, #8
   836ca:	47a0      	blx	r4
   836cc:	2801      	cmp	r0, #1
   836ce:	d002      	beq.n	836d6 <main+0xce>
	{
		printf("Failed to create PID Control task\r\n");
   836d0:	4805      	ldr	r0, [pc, #20]	; (836e8 <main+0xe0>)
   836d2:	4906      	ldr	r1, [pc, #24]	; (836ec <main+0xe4>)
   836d4:	4788      	blx	r1
	}
	
	/* Start the FreeRTOS scheduler running all tasks indefinitely */
	vTaskStartScheduler();
   836d6:	f242 6211 	movw	r2, #9745	; 0x2611
   836da:	f2c0 0208 	movt	r2, #8
   836de:	4790      	blx	r2
}
   836e0:	f04f 0000 	mov.w	r0, #0
   836e4:	b004      	add	sp, #16
   836e6:	bd10      	pop	{r4, pc}
   836e8:	0008a734 	.word	0x0008a734
   836ec:	00083f51 	.word	0x00083f51

000836f0 <__aeabi_drsub>:
   836f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   836f4:	e002      	b.n	836fc <__adddf3>
   836f6:	bf00      	nop

000836f8 <__aeabi_dsub>:
   836f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000836fc <__adddf3>:
   836fc:	b530      	push	{r4, r5, lr}
   836fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83702:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83706:	ea94 0f05 	teq	r4, r5
   8370a:	bf08      	it	eq
   8370c:	ea90 0f02 	teqeq	r0, r2
   83710:	bf1f      	itttt	ne
   83712:	ea54 0c00 	orrsne.w	ip, r4, r0
   83716:	ea55 0c02 	orrsne.w	ip, r5, r2
   8371a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8371e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83722:	f000 80e2 	beq.w	838ea <__adddf3+0x1ee>
   83726:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8372a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8372e:	bfb8      	it	lt
   83730:	426d      	neglt	r5, r5
   83732:	dd0c      	ble.n	8374e <__adddf3+0x52>
   83734:	442c      	add	r4, r5
   83736:	ea80 0202 	eor.w	r2, r0, r2
   8373a:	ea81 0303 	eor.w	r3, r1, r3
   8373e:	ea82 0000 	eor.w	r0, r2, r0
   83742:	ea83 0101 	eor.w	r1, r3, r1
   83746:	ea80 0202 	eor.w	r2, r0, r2
   8374a:	ea81 0303 	eor.w	r3, r1, r3
   8374e:	2d36      	cmp	r5, #54	; 0x36
   83750:	bf88      	it	hi
   83752:	bd30      	pophi	{r4, r5, pc}
   83754:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83758:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8375c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83760:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83764:	d002      	beq.n	8376c <__adddf3+0x70>
   83766:	4240      	negs	r0, r0
   83768:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8376c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83770:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83774:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83778:	d002      	beq.n	83780 <__adddf3+0x84>
   8377a:	4252      	negs	r2, r2
   8377c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83780:	ea94 0f05 	teq	r4, r5
   83784:	f000 80a7 	beq.w	838d6 <__adddf3+0x1da>
   83788:	f1a4 0401 	sub.w	r4, r4, #1
   8378c:	f1d5 0e20 	rsbs	lr, r5, #32
   83790:	db0d      	blt.n	837ae <__adddf3+0xb2>
   83792:	fa02 fc0e 	lsl.w	ip, r2, lr
   83796:	fa22 f205 	lsr.w	r2, r2, r5
   8379a:	1880      	adds	r0, r0, r2
   8379c:	f141 0100 	adc.w	r1, r1, #0
   837a0:	fa03 f20e 	lsl.w	r2, r3, lr
   837a4:	1880      	adds	r0, r0, r2
   837a6:	fa43 f305 	asr.w	r3, r3, r5
   837aa:	4159      	adcs	r1, r3
   837ac:	e00e      	b.n	837cc <__adddf3+0xd0>
   837ae:	f1a5 0520 	sub.w	r5, r5, #32
   837b2:	f10e 0e20 	add.w	lr, lr, #32
   837b6:	2a01      	cmp	r2, #1
   837b8:	fa03 fc0e 	lsl.w	ip, r3, lr
   837bc:	bf28      	it	cs
   837be:	f04c 0c02 	orrcs.w	ip, ip, #2
   837c2:	fa43 f305 	asr.w	r3, r3, r5
   837c6:	18c0      	adds	r0, r0, r3
   837c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   837cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   837d0:	d507      	bpl.n	837e2 <__adddf3+0xe6>
   837d2:	f04f 0e00 	mov.w	lr, #0
   837d6:	f1dc 0c00 	rsbs	ip, ip, #0
   837da:	eb7e 0000 	sbcs.w	r0, lr, r0
   837de:	eb6e 0101 	sbc.w	r1, lr, r1
   837e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   837e6:	d31b      	bcc.n	83820 <__adddf3+0x124>
   837e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   837ec:	d30c      	bcc.n	83808 <__adddf3+0x10c>
   837ee:	0849      	lsrs	r1, r1, #1
   837f0:	ea5f 0030 	movs.w	r0, r0, rrx
   837f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   837f8:	f104 0401 	add.w	r4, r4, #1
   837fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83800:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83804:	f080 809a 	bcs.w	8393c <__adddf3+0x240>
   83808:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8380c:	bf08      	it	eq
   8380e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83812:	f150 0000 	adcs.w	r0, r0, #0
   83816:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8381a:	ea41 0105 	orr.w	r1, r1, r5
   8381e:	bd30      	pop	{r4, r5, pc}
   83820:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83824:	4140      	adcs	r0, r0
   83826:	eb41 0101 	adc.w	r1, r1, r1
   8382a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8382e:	f1a4 0401 	sub.w	r4, r4, #1
   83832:	d1e9      	bne.n	83808 <__adddf3+0x10c>
   83834:	f091 0f00 	teq	r1, #0
   83838:	bf04      	itt	eq
   8383a:	4601      	moveq	r1, r0
   8383c:	2000      	moveq	r0, #0
   8383e:	fab1 f381 	clz	r3, r1
   83842:	bf08      	it	eq
   83844:	3320      	addeq	r3, #32
   83846:	f1a3 030b 	sub.w	r3, r3, #11
   8384a:	f1b3 0220 	subs.w	r2, r3, #32
   8384e:	da0c      	bge.n	8386a <__adddf3+0x16e>
   83850:	320c      	adds	r2, #12
   83852:	dd08      	ble.n	83866 <__adddf3+0x16a>
   83854:	f102 0c14 	add.w	ip, r2, #20
   83858:	f1c2 020c 	rsb	r2, r2, #12
   8385c:	fa01 f00c 	lsl.w	r0, r1, ip
   83860:	fa21 f102 	lsr.w	r1, r1, r2
   83864:	e00c      	b.n	83880 <__adddf3+0x184>
   83866:	f102 0214 	add.w	r2, r2, #20
   8386a:	bfd8      	it	le
   8386c:	f1c2 0c20 	rsble	ip, r2, #32
   83870:	fa01 f102 	lsl.w	r1, r1, r2
   83874:	fa20 fc0c 	lsr.w	ip, r0, ip
   83878:	bfdc      	itt	le
   8387a:	ea41 010c 	orrle.w	r1, r1, ip
   8387e:	4090      	lslle	r0, r2
   83880:	1ae4      	subs	r4, r4, r3
   83882:	bfa2      	ittt	ge
   83884:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83888:	4329      	orrge	r1, r5
   8388a:	bd30      	popge	{r4, r5, pc}
   8388c:	ea6f 0404 	mvn.w	r4, r4
   83890:	3c1f      	subs	r4, #31
   83892:	da1c      	bge.n	838ce <__adddf3+0x1d2>
   83894:	340c      	adds	r4, #12
   83896:	dc0e      	bgt.n	838b6 <__adddf3+0x1ba>
   83898:	f104 0414 	add.w	r4, r4, #20
   8389c:	f1c4 0220 	rsb	r2, r4, #32
   838a0:	fa20 f004 	lsr.w	r0, r0, r4
   838a4:	fa01 f302 	lsl.w	r3, r1, r2
   838a8:	ea40 0003 	orr.w	r0, r0, r3
   838ac:	fa21 f304 	lsr.w	r3, r1, r4
   838b0:	ea45 0103 	orr.w	r1, r5, r3
   838b4:	bd30      	pop	{r4, r5, pc}
   838b6:	f1c4 040c 	rsb	r4, r4, #12
   838ba:	f1c4 0220 	rsb	r2, r4, #32
   838be:	fa20 f002 	lsr.w	r0, r0, r2
   838c2:	fa01 f304 	lsl.w	r3, r1, r4
   838c6:	ea40 0003 	orr.w	r0, r0, r3
   838ca:	4629      	mov	r1, r5
   838cc:	bd30      	pop	{r4, r5, pc}
   838ce:	fa21 f004 	lsr.w	r0, r1, r4
   838d2:	4629      	mov	r1, r5
   838d4:	bd30      	pop	{r4, r5, pc}
   838d6:	f094 0f00 	teq	r4, #0
   838da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   838de:	bf06      	itte	eq
   838e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   838e4:	3401      	addeq	r4, #1
   838e6:	3d01      	subne	r5, #1
   838e8:	e74e      	b.n	83788 <__adddf3+0x8c>
   838ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   838ee:	bf18      	it	ne
   838f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   838f4:	d029      	beq.n	8394a <__adddf3+0x24e>
   838f6:	ea94 0f05 	teq	r4, r5
   838fa:	bf08      	it	eq
   838fc:	ea90 0f02 	teqeq	r0, r2
   83900:	d005      	beq.n	8390e <__adddf3+0x212>
   83902:	ea54 0c00 	orrs.w	ip, r4, r0
   83906:	bf04      	itt	eq
   83908:	4619      	moveq	r1, r3
   8390a:	4610      	moveq	r0, r2
   8390c:	bd30      	pop	{r4, r5, pc}
   8390e:	ea91 0f03 	teq	r1, r3
   83912:	bf1e      	ittt	ne
   83914:	2100      	movne	r1, #0
   83916:	2000      	movne	r0, #0
   83918:	bd30      	popne	{r4, r5, pc}
   8391a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8391e:	d105      	bne.n	8392c <__adddf3+0x230>
   83920:	0040      	lsls	r0, r0, #1
   83922:	4149      	adcs	r1, r1
   83924:	bf28      	it	cs
   83926:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8392a:	bd30      	pop	{r4, r5, pc}
   8392c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83930:	bf3c      	itt	cc
   83932:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83936:	bd30      	popcc	{r4, r5, pc}
   83938:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8393c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83940:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83944:	f04f 0000 	mov.w	r0, #0
   83948:	bd30      	pop	{r4, r5, pc}
   8394a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8394e:	bf1a      	itte	ne
   83950:	4619      	movne	r1, r3
   83952:	4610      	movne	r0, r2
   83954:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83958:	bf1c      	itt	ne
   8395a:	460b      	movne	r3, r1
   8395c:	4602      	movne	r2, r0
   8395e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83962:	bf06      	itte	eq
   83964:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83968:	ea91 0f03 	teqeq	r1, r3
   8396c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83970:	bd30      	pop	{r4, r5, pc}
   83972:	bf00      	nop

00083974 <__aeabi_ui2d>:
   83974:	f090 0f00 	teq	r0, #0
   83978:	bf04      	itt	eq
   8397a:	2100      	moveq	r1, #0
   8397c:	4770      	bxeq	lr
   8397e:	b530      	push	{r4, r5, lr}
   83980:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83984:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83988:	f04f 0500 	mov.w	r5, #0
   8398c:	f04f 0100 	mov.w	r1, #0
   83990:	e750      	b.n	83834 <__adddf3+0x138>
   83992:	bf00      	nop

00083994 <__aeabi_i2d>:
   83994:	f090 0f00 	teq	r0, #0
   83998:	bf04      	itt	eq
   8399a:	2100      	moveq	r1, #0
   8399c:	4770      	bxeq	lr
   8399e:	b530      	push	{r4, r5, lr}
   839a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   839a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   839a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   839ac:	bf48      	it	mi
   839ae:	4240      	negmi	r0, r0
   839b0:	f04f 0100 	mov.w	r1, #0
   839b4:	e73e      	b.n	83834 <__adddf3+0x138>
   839b6:	bf00      	nop

000839b8 <__aeabi_f2d>:
   839b8:	0042      	lsls	r2, r0, #1
   839ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   839be:	ea4f 0131 	mov.w	r1, r1, rrx
   839c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   839c6:	bf1f      	itttt	ne
   839c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   839cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   839d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   839d4:	4770      	bxne	lr
   839d6:	f092 0f00 	teq	r2, #0
   839da:	bf14      	ite	ne
   839dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   839e0:	4770      	bxeq	lr
   839e2:	b530      	push	{r4, r5, lr}
   839e4:	f44f 7460 	mov.w	r4, #896	; 0x380
   839e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   839ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   839f0:	e720      	b.n	83834 <__adddf3+0x138>
   839f2:	bf00      	nop

000839f4 <__aeabi_ul2d>:
   839f4:	ea50 0201 	orrs.w	r2, r0, r1
   839f8:	bf08      	it	eq
   839fa:	4770      	bxeq	lr
   839fc:	b530      	push	{r4, r5, lr}
   839fe:	f04f 0500 	mov.w	r5, #0
   83a02:	e00a      	b.n	83a1a <__aeabi_l2d+0x16>

00083a04 <__aeabi_l2d>:
   83a04:	ea50 0201 	orrs.w	r2, r0, r1
   83a08:	bf08      	it	eq
   83a0a:	4770      	bxeq	lr
   83a0c:	b530      	push	{r4, r5, lr}
   83a0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83a12:	d502      	bpl.n	83a1a <__aeabi_l2d+0x16>
   83a14:	4240      	negs	r0, r0
   83a16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83a1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83a22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83a26:	f43f aedc 	beq.w	837e2 <__adddf3+0xe6>
   83a2a:	f04f 0203 	mov.w	r2, #3
   83a2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83a32:	bf18      	it	ne
   83a34:	3203      	addne	r2, #3
   83a36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83a3a:	bf18      	it	ne
   83a3c:	3203      	addne	r2, #3
   83a3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83a42:	f1c2 0320 	rsb	r3, r2, #32
   83a46:	fa00 fc03 	lsl.w	ip, r0, r3
   83a4a:	fa20 f002 	lsr.w	r0, r0, r2
   83a4e:	fa01 fe03 	lsl.w	lr, r1, r3
   83a52:	ea40 000e 	orr.w	r0, r0, lr
   83a56:	fa21 f102 	lsr.w	r1, r1, r2
   83a5a:	4414      	add	r4, r2
   83a5c:	e6c1      	b.n	837e2 <__adddf3+0xe6>
   83a5e:	bf00      	nop

00083a60 <__aeabi_dmul>:
   83a60:	b570      	push	{r4, r5, r6, lr}
   83a62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83a66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83a6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83a6e:	bf1d      	ittte	ne
   83a70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83a74:	ea94 0f0c 	teqne	r4, ip
   83a78:	ea95 0f0c 	teqne	r5, ip
   83a7c:	f000 f8de 	bleq	83c3c <__aeabi_dmul+0x1dc>
   83a80:	442c      	add	r4, r5
   83a82:	ea81 0603 	eor.w	r6, r1, r3
   83a86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83a8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   83a8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   83a92:	bf18      	it	ne
   83a94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83aa0:	d038      	beq.n	83b14 <__aeabi_dmul+0xb4>
   83aa2:	fba0 ce02 	umull	ip, lr, r0, r2
   83aa6:	f04f 0500 	mov.w	r5, #0
   83aaa:	fbe1 e502 	umlal	lr, r5, r1, r2
   83aae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   83ab2:	fbe0 e503 	umlal	lr, r5, r0, r3
   83ab6:	f04f 0600 	mov.w	r6, #0
   83aba:	fbe1 5603 	umlal	r5, r6, r1, r3
   83abe:	f09c 0f00 	teq	ip, #0
   83ac2:	bf18      	it	ne
   83ac4:	f04e 0e01 	orrne.w	lr, lr, #1
   83ac8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83acc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83ad0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83ad4:	d204      	bcs.n	83ae0 <__aeabi_dmul+0x80>
   83ad6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83ada:	416d      	adcs	r5, r5
   83adc:	eb46 0606 	adc.w	r6, r6, r6
   83ae0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83ae4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83ae8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83aec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83af0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83af4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83af8:	bf88      	it	hi
   83afa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83afe:	d81e      	bhi.n	83b3e <__aeabi_dmul+0xde>
   83b00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83b04:	bf08      	it	eq
   83b06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83b0a:	f150 0000 	adcs.w	r0, r0, #0
   83b0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83b12:	bd70      	pop	{r4, r5, r6, pc}
   83b14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83b18:	ea46 0101 	orr.w	r1, r6, r1
   83b1c:	ea40 0002 	orr.w	r0, r0, r2
   83b20:	ea81 0103 	eor.w	r1, r1, r3
   83b24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83b28:	bfc2      	ittt	gt
   83b2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   83b2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83b32:	bd70      	popgt	{r4, r5, r6, pc}
   83b34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83b38:	f04f 0e00 	mov.w	lr, #0
   83b3c:	3c01      	subs	r4, #1
   83b3e:	f300 80ab 	bgt.w	83c98 <__aeabi_dmul+0x238>
   83b42:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83b46:	bfde      	ittt	le
   83b48:	2000      	movle	r0, #0
   83b4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   83b4e:	bd70      	pople	{r4, r5, r6, pc}
   83b50:	f1c4 0400 	rsb	r4, r4, #0
   83b54:	3c20      	subs	r4, #32
   83b56:	da35      	bge.n	83bc4 <__aeabi_dmul+0x164>
   83b58:	340c      	adds	r4, #12
   83b5a:	dc1b      	bgt.n	83b94 <__aeabi_dmul+0x134>
   83b5c:	f104 0414 	add.w	r4, r4, #20
   83b60:	f1c4 0520 	rsb	r5, r4, #32
   83b64:	fa00 f305 	lsl.w	r3, r0, r5
   83b68:	fa20 f004 	lsr.w	r0, r0, r4
   83b6c:	fa01 f205 	lsl.w	r2, r1, r5
   83b70:	ea40 0002 	orr.w	r0, r0, r2
   83b74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83b78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83b7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83b80:	fa21 f604 	lsr.w	r6, r1, r4
   83b84:	eb42 0106 	adc.w	r1, r2, r6
   83b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83b8c:	bf08      	it	eq
   83b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83b92:	bd70      	pop	{r4, r5, r6, pc}
   83b94:	f1c4 040c 	rsb	r4, r4, #12
   83b98:	f1c4 0520 	rsb	r5, r4, #32
   83b9c:	fa00 f304 	lsl.w	r3, r0, r4
   83ba0:	fa20 f005 	lsr.w	r0, r0, r5
   83ba4:	fa01 f204 	lsl.w	r2, r1, r4
   83ba8:	ea40 0002 	orr.w	r0, r0, r2
   83bac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83bb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83bb4:	f141 0100 	adc.w	r1, r1, #0
   83bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83bbc:	bf08      	it	eq
   83bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83bc2:	bd70      	pop	{r4, r5, r6, pc}
   83bc4:	f1c4 0520 	rsb	r5, r4, #32
   83bc8:	fa00 f205 	lsl.w	r2, r0, r5
   83bcc:	ea4e 0e02 	orr.w	lr, lr, r2
   83bd0:	fa20 f304 	lsr.w	r3, r0, r4
   83bd4:	fa01 f205 	lsl.w	r2, r1, r5
   83bd8:	ea43 0302 	orr.w	r3, r3, r2
   83bdc:	fa21 f004 	lsr.w	r0, r1, r4
   83be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83be4:	fa21 f204 	lsr.w	r2, r1, r4
   83be8:	ea20 0002 	bic.w	r0, r0, r2
   83bec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83bf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83bf4:	bf08      	it	eq
   83bf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83bfa:	bd70      	pop	{r4, r5, r6, pc}
   83bfc:	f094 0f00 	teq	r4, #0
   83c00:	d10f      	bne.n	83c22 <__aeabi_dmul+0x1c2>
   83c02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83c06:	0040      	lsls	r0, r0, #1
   83c08:	eb41 0101 	adc.w	r1, r1, r1
   83c0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83c10:	bf08      	it	eq
   83c12:	3c01      	subeq	r4, #1
   83c14:	d0f7      	beq.n	83c06 <__aeabi_dmul+0x1a6>
   83c16:	ea41 0106 	orr.w	r1, r1, r6
   83c1a:	f095 0f00 	teq	r5, #0
   83c1e:	bf18      	it	ne
   83c20:	4770      	bxne	lr
   83c22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83c26:	0052      	lsls	r2, r2, #1
   83c28:	eb43 0303 	adc.w	r3, r3, r3
   83c2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83c30:	bf08      	it	eq
   83c32:	3d01      	subeq	r5, #1
   83c34:	d0f7      	beq.n	83c26 <__aeabi_dmul+0x1c6>
   83c36:	ea43 0306 	orr.w	r3, r3, r6
   83c3a:	4770      	bx	lr
   83c3c:	ea94 0f0c 	teq	r4, ip
   83c40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83c44:	bf18      	it	ne
   83c46:	ea95 0f0c 	teqne	r5, ip
   83c4a:	d00c      	beq.n	83c66 <__aeabi_dmul+0x206>
   83c4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83c50:	bf18      	it	ne
   83c52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83c56:	d1d1      	bne.n	83bfc <__aeabi_dmul+0x19c>
   83c58:	ea81 0103 	eor.w	r1, r1, r3
   83c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83c60:	f04f 0000 	mov.w	r0, #0
   83c64:	bd70      	pop	{r4, r5, r6, pc}
   83c66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83c6a:	bf06      	itte	eq
   83c6c:	4610      	moveq	r0, r2
   83c6e:	4619      	moveq	r1, r3
   83c70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83c74:	d019      	beq.n	83caa <__aeabi_dmul+0x24a>
   83c76:	ea94 0f0c 	teq	r4, ip
   83c7a:	d102      	bne.n	83c82 <__aeabi_dmul+0x222>
   83c7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   83c80:	d113      	bne.n	83caa <__aeabi_dmul+0x24a>
   83c82:	ea95 0f0c 	teq	r5, ip
   83c86:	d105      	bne.n	83c94 <__aeabi_dmul+0x234>
   83c88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83c8c:	bf1c      	itt	ne
   83c8e:	4610      	movne	r0, r2
   83c90:	4619      	movne	r1, r3
   83c92:	d10a      	bne.n	83caa <__aeabi_dmul+0x24a>
   83c94:	ea81 0103 	eor.w	r1, r1, r3
   83c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83c9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83ca0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83ca4:	f04f 0000 	mov.w	r0, #0
   83ca8:	bd70      	pop	{r4, r5, r6, pc}
   83caa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83cae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   83cb2:	bd70      	pop	{r4, r5, r6, pc}

00083cb4 <__aeabi_ddiv>:
   83cb4:	b570      	push	{r4, r5, r6, lr}
   83cb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83cba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83cbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83cc2:	bf1d      	ittte	ne
   83cc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83cc8:	ea94 0f0c 	teqne	r4, ip
   83ccc:	ea95 0f0c 	teqne	r5, ip
   83cd0:	f000 f8a7 	bleq	83e22 <__aeabi_ddiv+0x16e>
   83cd4:	eba4 0405 	sub.w	r4, r4, r5
   83cd8:	ea81 0e03 	eor.w	lr, r1, r3
   83cdc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83ce0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83ce4:	f000 8088 	beq.w	83df8 <__aeabi_ddiv+0x144>
   83ce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83cec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83cf0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83cf4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83cf8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83cfc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   83d00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83d04:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83d08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83d0c:	429d      	cmp	r5, r3
   83d0e:	bf08      	it	eq
   83d10:	4296      	cmpeq	r6, r2
   83d12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83d16:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83d1a:	d202      	bcs.n	83d22 <__aeabi_ddiv+0x6e>
   83d1c:	085b      	lsrs	r3, r3, #1
   83d1e:	ea4f 0232 	mov.w	r2, r2, rrx
   83d22:	1ab6      	subs	r6, r6, r2
   83d24:	eb65 0503 	sbc.w	r5, r5, r3
   83d28:	085b      	lsrs	r3, r3, #1
   83d2a:	ea4f 0232 	mov.w	r2, r2, rrx
   83d2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   83d32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83d36:	ebb6 0e02 	subs.w	lr, r6, r2
   83d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d3e:	bf22      	ittt	cs
   83d40:	1ab6      	subcs	r6, r6, r2
   83d42:	4675      	movcs	r5, lr
   83d44:	ea40 000c 	orrcs.w	r0, r0, ip
   83d48:	085b      	lsrs	r3, r3, #1
   83d4a:	ea4f 0232 	mov.w	r2, r2, rrx
   83d4e:	ebb6 0e02 	subs.w	lr, r6, r2
   83d52:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d56:	bf22      	ittt	cs
   83d58:	1ab6      	subcs	r6, r6, r2
   83d5a:	4675      	movcs	r5, lr
   83d5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83d60:	085b      	lsrs	r3, r3, #1
   83d62:	ea4f 0232 	mov.w	r2, r2, rrx
   83d66:	ebb6 0e02 	subs.w	lr, r6, r2
   83d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d6e:	bf22      	ittt	cs
   83d70:	1ab6      	subcs	r6, r6, r2
   83d72:	4675      	movcs	r5, lr
   83d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83d78:	085b      	lsrs	r3, r3, #1
   83d7a:	ea4f 0232 	mov.w	r2, r2, rrx
   83d7e:	ebb6 0e02 	subs.w	lr, r6, r2
   83d82:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d86:	bf22      	ittt	cs
   83d88:	1ab6      	subcs	r6, r6, r2
   83d8a:	4675      	movcs	r5, lr
   83d8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83d90:	ea55 0e06 	orrs.w	lr, r5, r6
   83d94:	d018      	beq.n	83dc8 <__aeabi_ddiv+0x114>
   83d96:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83d9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   83d9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83da2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83da6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83daa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   83dae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   83db2:	d1c0      	bne.n	83d36 <__aeabi_ddiv+0x82>
   83db4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83db8:	d10b      	bne.n	83dd2 <__aeabi_ddiv+0x11e>
   83dba:	ea41 0100 	orr.w	r1, r1, r0
   83dbe:	f04f 0000 	mov.w	r0, #0
   83dc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83dc6:	e7b6      	b.n	83d36 <__aeabi_ddiv+0x82>
   83dc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83dcc:	bf04      	itt	eq
   83dce:	4301      	orreq	r1, r0
   83dd0:	2000      	moveq	r0, #0
   83dd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83dd6:	bf88      	it	hi
   83dd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83ddc:	f63f aeaf 	bhi.w	83b3e <__aeabi_dmul+0xde>
   83de0:	ebb5 0c03 	subs.w	ip, r5, r3
   83de4:	bf04      	itt	eq
   83de6:	ebb6 0c02 	subseq.w	ip, r6, r2
   83dea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83dee:	f150 0000 	adcs.w	r0, r0, #0
   83df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83df6:	bd70      	pop	{r4, r5, r6, pc}
   83df8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83dfc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83e00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83e04:	bfc2      	ittt	gt
   83e06:	ebd4 050c 	rsbsgt	r5, r4, ip
   83e0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83e0e:	bd70      	popgt	{r4, r5, r6, pc}
   83e10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83e14:	f04f 0e00 	mov.w	lr, #0
   83e18:	3c01      	subs	r4, #1
   83e1a:	e690      	b.n	83b3e <__aeabi_dmul+0xde>
   83e1c:	ea45 0e06 	orr.w	lr, r5, r6
   83e20:	e68d      	b.n	83b3e <__aeabi_dmul+0xde>
   83e22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83e26:	ea94 0f0c 	teq	r4, ip
   83e2a:	bf08      	it	eq
   83e2c:	ea95 0f0c 	teqeq	r5, ip
   83e30:	f43f af3b 	beq.w	83caa <__aeabi_dmul+0x24a>
   83e34:	ea94 0f0c 	teq	r4, ip
   83e38:	d10a      	bne.n	83e50 <__aeabi_ddiv+0x19c>
   83e3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83e3e:	f47f af34 	bne.w	83caa <__aeabi_dmul+0x24a>
   83e42:	ea95 0f0c 	teq	r5, ip
   83e46:	f47f af25 	bne.w	83c94 <__aeabi_dmul+0x234>
   83e4a:	4610      	mov	r0, r2
   83e4c:	4619      	mov	r1, r3
   83e4e:	e72c      	b.n	83caa <__aeabi_dmul+0x24a>
   83e50:	ea95 0f0c 	teq	r5, ip
   83e54:	d106      	bne.n	83e64 <__aeabi_ddiv+0x1b0>
   83e56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83e5a:	f43f aefd 	beq.w	83c58 <__aeabi_dmul+0x1f8>
   83e5e:	4610      	mov	r0, r2
   83e60:	4619      	mov	r1, r3
   83e62:	e722      	b.n	83caa <__aeabi_dmul+0x24a>
   83e64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83e68:	bf18      	it	ne
   83e6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83e6e:	f47f aec5 	bne.w	83bfc <__aeabi_dmul+0x19c>
   83e72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83e76:	f47f af0d 	bne.w	83c94 <__aeabi_dmul+0x234>
   83e7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   83e7e:	f47f aeeb 	bne.w	83c58 <__aeabi_dmul+0x1f8>
   83e82:	e712      	b.n	83caa <__aeabi_dmul+0x24a>

00083e84 <__aeabi_d2uiz>:
   83e84:	004a      	lsls	r2, r1, #1
   83e86:	d211      	bcs.n	83eac <__aeabi_d2uiz+0x28>
   83e88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83e8c:	d211      	bcs.n	83eb2 <__aeabi_d2uiz+0x2e>
   83e8e:	d50d      	bpl.n	83eac <__aeabi_d2uiz+0x28>
   83e90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83e94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83e98:	d40e      	bmi.n	83eb8 <__aeabi_d2uiz+0x34>
   83e9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83ea2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83ea6:	fa23 f002 	lsr.w	r0, r3, r2
   83eaa:	4770      	bx	lr
   83eac:	f04f 0000 	mov.w	r0, #0
   83eb0:	4770      	bx	lr
   83eb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83eb6:	d102      	bne.n	83ebe <__aeabi_d2uiz+0x3a>
   83eb8:	f04f 30ff 	mov.w	r0, #4294967295
   83ebc:	4770      	bx	lr
   83ebe:	f04f 0000 	mov.w	r0, #0
   83ec2:	4770      	bx	lr

00083ec4 <atexit>:
   83ec4:	4601      	mov	r1, r0
   83ec6:	2000      	movs	r0, #0
   83ec8:	4602      	mov	r2, r0
   83eca:	4603      	mov	r3, r0
   83ecc:	f002 bc44 	b.w	86758 <__register_exitproc>

00083ed0 <atof>:
   83ed0:	2100      	movs	r1, #0
   83ed2:	f000 bf21 	b.w	84d18 <strtod>
	...

00083ed8 <__libc_fini_array>:
   83ed8:	b570      	push	{r4, r5, r6, lr}
   83eda:	4b08      	ldr	r3, [pc, #32]	; (83efc <__libc_fini_array+0x24>)
   83edc:	4c08      	ldr	r4, [pc, #32]	; (83f00 <__libc_fini_array+0x28>)
   83ede:	2500      	movs	r5, #0
   83ee0:	1ae0      	subs	r0, r4, r3
   83ee2:	1084      	asrs	r4, r0, #2
   83ee4:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   83ee8:	3d04      	subs	r5, #4
   83eea:	b11c      	cbz	r4, 83ef4 <__libc_fini_array+0x1c>
   83eec:	5972      	ldr	r2, [r6, r5]
   83eee:	4790      	blx	r2
   83ef0:	3c01      	subs	r4, #1
   83ef2:	e7f9      	b.n	83ee8 <__libc_fini_array+0x10>
   83ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   83ef8:	f006 bdd0 	b.w	8aa9c <_fini>
   83efc:	0008aaa8 	.word	0x0008aaa8
   83f00:	0008aaac 	.word	0x0008aaac

00083f04 <__libc_init_array>:
   83f04:	b538      	push	{r3, r4, r5, lr}
   83f06:	4d0e      	ldr	r5, [pc, #56]	; (83f40 <__libc_init_array+0x3c>)
   83f08:	4b0e      	ldr	r3, [pc, #56]	; (83f44 <__libc_init_array+0x40>)
   83f0a:	2400      	movs	r4, #0
   83f0c:	1ae8      	subs	r0, r5, r3
   83f0e:	1085      	asrs	r5, r0, #2
   83f10:	42ac      	cmp	r4, r5
   83f12:	d005      	beq.n	83f20 <__libc_init_array+0x1c>
   83f14:	490b      	ldr	r1, [pc, #44]	; (83f44 <__libc_init_array+0x40>)
   83f16:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   83f1a:	4790      	blx	r2
   83f1c:	3401      	adds	r4, #1
   83f1e:	e7f7      	b.n	83f10 <__libc_init_array+0xc>
   83f20:	f006 fdb2 	bl	8aa88 <_init>
   83f24:	4908      	ldr	r1, [pc, #32]	; (83f48 <__libc_init_array+0x44>)
   83f26:	4a09      	ldr	r2, [pc, #36]	; (83f4c <__libc_init_array+0x48>)
   83f28:	1a54      	subs	r4, r2, r1
   83f2a:	10a5      	asrs	r5, r4, #2
   83f2c:	2400      	movs	r4, #0
   83f2e:	42ac      	cmp	r4, r5
   83f30:	d005      	beq.n	83f3e <__libc_init_array+0x3a>
   83f32:	4b05      	ldr	r3, [pc, #20]	; (83f48 <__libc_init_array+0x44>)
   83f34:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   83f38:	4780      	blx	r0
   83f3a:	3401      	adds	r4, #1
   83f3c:	e7f7      	b.n	83f2e <__libc_init_array+0x2a>
   83f3e:	bd38      	pop	{r3, r4, r5, pc}
   83f40:	0008aa94 	.word	0x0008aa94
   83f44:	0008aa94 	.word	0x0008aa94
   83f48:	0008aa94 	.word	0x0008aa94
   83f4c:	0008aa9c 	.word	0x0008aa9c

00083f50 <iprintf>:
   83f50:	b40f      	push	{r0, r1, r2, r3}
   83f52:	b507      	push	{r0, r1, r2, lr}
   83f54:	4906      	ldr	r1, [pc, #24]	; (83f70 <iprintf+0x20>)
   83f56:	ab04      	add	r3, sp, #16
   83f58:	6808      	ldr	r0, [r1, #0]
   83f5a:	f853 2b04 	ldr.w	r2, [r3], #4
   83f5e:	6881      	ldr	r1, [r0, #8]
   83f60:	9301      	str	r3, [sp, #4]
   83f62:	f001 fb2d 	bl	855c0 <_vfiprintf_r>
   83f66:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   83f6a:	b004      	add	sp, #16
   83f6c:	4770      	bx	lr
   83f6e:	bf00      	nop
   83f70:	20070010 	.word	0x20070010

00083f74 <_iprintf_r>:
   83f74:	b40e      	push	{r1, r2, r3}
   83f76:	b503      	push	{r0, r1, lr}
   83f78:	ab03      	add	r3, sp, #12
   83f7a:	f853 2b04 	ldr.w	r2, [r3], #4
   83f7e:	6881      	ldr	r1, [r0, #8]
   83f80:	9301      	str	r3, [sp, #4]
   83f82:	f001 fb1d 	bl	855c0 <_vfiprintf_r>
   83f86:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   83f8a:	b003      	add	sp, #12
   83f8c:	4770      	bx	lr
   83f8e:	bf00      	nop

00083f90 <memcpy>:
   83f90:	b510      	push	{r4, lr}
   83f92:	2300      	movs	r3, #0
   83f94:	4293      	cmp	r3, r2
   83f96:	d003      	beq.n	83fa0 <memcpy+0x10>
   83f98:	5ccc      	ldrb	r4, [r1, r3]
   83f9a:	54c4      	strb	r4, [r0, r3]
   83f9c:	3301      	adds	r3, #1
   83f9e:	e7f9      	b.n	83f94 <memcpy+0x4>
   83fa0:	bd10      	pop	{r4, pc}

00083fa2 <memset>:
   83fa2:	1882      	adds	r2, r0, r2
   83fa4:	4603      	mov	r3, r0
   83fa6:	4293      	cmp	r3, r2
   83fa8:	d002      	beq.n	83fb0 <memset+0xe>
   83faa:	f803 1b01 	strb.w	r1, [r3], #1
   83fae:	e7fa      	b.n	83fa6 <memset+0x4>
   83fb0:	4770      	bx	lr
	...

00083fb4 <scanf>:
   83fb4:	b40f      	push	{r0, r1, r2, r3}
   83fb6:	b507      	push	{r0, r1, r2, lr}
   83fb8:	4906      	ldr	r1, [pc, #24]	; (83fd4 <scanf+0x20>)
   83fba:	ab04      	add	r3, sp, #16
   83fbc:	6808      	ldr	r0, [r1, #0]
   83fbe:	f853 2b04 	ldr.w	r2, [r3], #4
   83fc2:	6841      	ldr	r1, [r0, #4]
   83fc4:	9301      	str	r3, [sp, #4]
   83fc6:	f001 ff5d 	bl	85e84 <__svfscanf_r>
   83fca:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   83fce:	b004      	add	sp, #16
   83fd0:	4770      	bx	lr
   83fd2:	bf00      	nop
   83fd4:	20070010 	.word	0x20070010

00083fd8 <_scanf_r>:
   83fd8:	b40e      	push	{r1, r2, r3}
   83fda:	b503      	push	{r0, r1, lr}
   83fdc:	ab03      	add	r3, sp, #12
   83fde:	f853 2b04 	ldr.w	r2, [r3], #4
   83fe2:	6841      	ldr	r1, [r0, #4]
   83fe4:	9301      	str	r3, [sp, #4]
   83fe6:	f001 ff4d 	bl	85e84 <__svfscanf_r>
   83fea:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   83fee:	b003      	add	sp, #12
   83ff0:	4770      	bx	lr
   83ff2:	bf00      	nop

00083ff4 <setbuf>:
   83ff4:	2900      	cmp	r1, #0
   83ff6:	bf0c      	ite	eq
   83ff8:	2202      	moveq	r2, #2
   83ffa:	2200      	movne	r2, #0
   83ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84000:	f000 b800 	b.w	84004 <setvbuf>

00084004 <setvbuf>:
   84004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84008:	461d      	mov	r5, r3
   8400a:	4b37      	ldr	r3, [pc, #220]	; (840e8 <setvbuf+0xe4>)
   8400c:	4604      	mov	r4, r0
   8400e:	6818      	ldr	r0, [r3, #0]
   84010:	460e      	mov	r6, r1
   84012:	4617      	mov	r7, r2
   84014:	4698      	mov	r8, r3
   84016:	b118      	cbz	r0, 84020 <setvbuf+0x1c>
   84018:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8401a:	b90a      	cbnz	r2, 84020 <setvbuf+0x1c>
   8401c:	f002 fce6 	bl	869ec <__sinit>
   84020:	2f02      	cmp	r7, #2
   84022:	d85d      	bhi.n	840e0 <setvbuf+0xdc>
   84024:	2d00      	cmp	r5, #0
   84026:	db5b      	blt.n	840e0 <setvbuf+0xdc>
   84028:	4621      	mov	r1, r4
   8402a:	f8d8 0000 	ldr.w	r0, [r8]
   8402e:	f002 fbeb 	bl	86808 <_fflush_r>
   84032:	89a1      	ldrh	r1, [r4, #12]
   84034:	2000      	movs	r0, #0
   84036:	f001 0380 	and.w	r3, r1, #128	; 0x80
   8403a:	b21a      	sxth	r2, r3
   8403c:	6060      	str	r0, [r4, #4]
   8403e:	61a0      	str	r0, [r4, #24]
   84040:	b122      	cbz	r2, 8404c <setvbuf+0x48>
   84042:	4829      	ldr	r0, [pc, #164]	; (840e8 <setvbuf+0xe4>)
   84044:	6921      	ldr	r1, [r4, #16]
   84046:	6800      	ldr	r0, [r0, #0]
   84048:	f002 fe6c 	bl	86d24 <_free_r>
   8404c:	89a1      	ldrh	r1, [r4, #12]
   8404e:	2f02      	cmp	r7, #2
   84050:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   84054:	81a3      	strh	r3, [r4, #12]
   84056:	d012      	beq.n	8407e <setvbuf+0x7a>
   84058:	bb36      	cbnz	r6, 840a8 <setvbuf+0xa4>
   8405a:	2d00      	cmp	r5, #0
   8405c:	bf08      	it	eq
   8405e:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   84062:	4628      	mov	r0, r5
   84064:	f003 fcac 	bl	879c0 <malloc>
   84068:	4606      	mov	r6, r0
   8406a:	b9c8      	cbnz	r0, 840a0 <setvbuf+0x9c>
   8406c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   84070:	f003 fca6 	bl	879c0 <malloc>
   84074:	4606      	mov	r6, r0
   84076:	b988      	cbnz	r0, 8409c <setvbuf+0x98>
   84078:	f04f 30ff 	mov.w	r0, #4294967295
   8407c:	e000      	b.n	84080 <setvbuf+0x7c>
   8407e:	2000      	movs	r0, #0
   84080:	89a1      	ldrh	r1, [r4, #12]
   84082:	2200      	movs	r2, #0
   84084:	f041 0302 	orr.w	r3, r1, #2
   84088:	81a3      	strh	r3, [r4, #12]
   8408a:	f104 0143 	add.w	r1, r4, #67	; 0x43
   8408e:	2301      	movs	r3, #1
   84090:	60a2      	str	r2, [r4, #8]
   84092:	6021      	str	r1, [r4, #0]
   84094:	6121      	str	r1, [r4, #16]
   84096:	6163      	str	r3, [r4, #20]
   84098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8409c:	f44f 6580 	mov.w	r5, #1024	; 0x400
   840a0:	89a2      	ldrh	r2, [r4, #12]
   840a2:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   840a6:	81a0      	strh	r0, [r4, #12]
   840a8:	2f01      	cmp	r7, #1
   840aa:	d105      	bne.n	840b8 <setvbuf+0xb4>
   840ac:	89a1      	ldrh	r1, [r4, #12]
   840ae:	426a      	negs	r2, r5
   840b0:	f041 0301 	orr.w	r3, r1, #1
   840b4:	81a3      	strh	r3, [r4, #12]
   840b6:	61a2      	str	r2, [r4, #24]
   840b8:	480b      	ldr	r0, [pc, #44]	; (840e8 <setvbuf+0xe4>)
   840ba:	89a2      	ldrh	r2, [r4, #12]
   840bc:	6801      	ldr	r1, [r0, #0]
   840be:	4b0b      	ldr	r3, [pc, #44]	; (840ec <setvbuf+0xe8>)
   840c0:	f002 0008 	and.w	r0, r2, #8
   840c4:	b200      	sxth	r0, r0
   840c6:	63cb      	str	r3, [r1, #60]	; 0x3c
   840c8:	6026      	str	r6, [r4, #0]
   840ca:	6126      	str	r6, [r4, #16]
   840cc:	6165      	str	r5, [r4, #20]
   840ce:	b148      	cbz	r0, 840e4 <setvbuf+0xe0>
   840d0:	f012 0f03 	tst.w	r2, #3
   840d4:	bf18      	it	ne
   840d6:	2500      	movne	r5, #0
   840d8:	60a5      	str	r5, [r4, #8]
   840da:	2000      	movs	r0, #0
   840dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   840e0:	f04f 30ff 	mov.w	r0, #4294967295
   840e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   840e8:	20070010 	.word	0x20070010
   840ec:	00086961 	.word	0x00086961

000840f0 <_sprintf_r>:
   840f0:	b40c      	push	{r2, r3}
   840f2:	b510      	push	{r4, lr}
   840f4:	b09c      	sub	sp, #112	; 0x70
   840f6:	ab1e      	add	r3, sp, #120	; 0x78
   840f8:	9102      	str	r1, [sp, #8]
   840fa:	9106      	str	r1, [sp, #24]
   840fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   84100:	f853 2b04 	ldr.w	r2, [r3], #4
   84104:	9104      	str	r1, [sp, #16]
   84106:	9107      	str	r1, [sp, #28]
   84108:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8410c:	f8ad 1016 	strh.w	r1, [sp, #22]
   84110:	f44f 7402 	mov.w	r4, #520	; 0x208
   84114:	a902      	add	r1, sp, #8
   84116:	9301      	str	r3, [sp, #4]
   84118:	f8ad 4014 	strh.w	r4, [sp, #20]
   8411c:	f000 fe20 	bl	84d60 <_svfprintf_r>
   84120:	9b02      	ldr	r3, [sp, #8]
   84122:	2200      	movs	r2, #0
   84124:	701a      	strb	r2, [r3, #0]
   84126:	b01c      	add	sp, #112	; 0x70
   84128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8412c:	b002      	add	sp, #8
   8412e:	4770      	bx	lr

00084130 <sprintf>:
   84130:	b40e      	push	{r1, r2, r3}
   84132:	b500      	push	{lr}
   84134:	b09c      	sub	sp, #112	; 0x70
   84136:	9002      	str	r0, [sp, #8]
   84138:	9006      	str	r0, [sp, #24]
   8413a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   8413e:	ab1d      	add	r3, sp, #116	; 0x74
   84140:	9004      	str	r0, [sp, #16]
   84142:	9007      	str	r0, [sp, #28]
   84144:	f44f 7102 	mov.w	r1, #520	; 0x208
   84148:	480a      	ldr	r0, [pc, #40]	; (84174 <sprintf+0x44>)
   8414a:	f853 2b04 	ldr.w	r2, [r3], #4
   8414e:	f8ad 1014 	strh.w	r1, [sp, #20]
   84152:	f64f 71ff 	movw	r1, #65535	; 0xffff
   84156:	f8ad 1016 	strh.w	r1, [sp, #22]
   8415a:	6800      	ldr	r0, [r0, #0]
   8415c:	a902      	add	r1, sp, #8
   8415e:	9301      	str	r3, [sp, #4]
   84160:	f000 fdfe 	bl	84d60 <_svfprintf_r>
   84164:	9b02      	ldr	r3, [sp, #8]
   84166:	2200      	movs	r2, #0
   84168:	701a      	strb	r2, [r3, #0]
   8416a:	b01c      	add	sp, #112	; 0x70
   8416c:	f85d eb04 	ldr.w	lr, [sp], #4
   84170:	b003      	add	sp, #12
   84172:	4770      	bx	lr
   84174:	20070010 	.word	0x20070010

00084178 <strlen>:
   84178:	4603      	mov	r3, r0
   8417a:	f813 2b01 	ldrb.w	r2, [r3], #1
   8417e:	2a00      	cmp	r2, #0
   84180:	d1fb      	bne.n	8417a <strlen+0x2>
   84182:	1a18      	subs	r0, r3, r0
   84184:	3801      	subs	r0, #1
   84186:	4770      	bx	lr

00084188 <strncmp>:
   84188:	b570      	push	{r4, r5, r6, lr}
   8418a:	b192      	cbz	r2, 841b2 <strncmp+0x2a>
   8418c:	460b      	mov	r3, r1
   8418e:	4605      	mov	r5, r0
   84190:	b91a      	cbnz	r2, 8419a <strncmp+0x12>
   84192:	7828      	ldrb	r0, [r5, #0]
   84194:	7819      	ldrb	r1, [r3, #0]
   84196:	1a40      	subs	r0, r0, r1
   84198:	bd70      	pop	{r4, r5, r6, pc}
   8419a:	f810 6b01 	ldrb.w	r6, [r0], #1
   8419e:	781c      	ldrb	r4, [r3, #0]
   841a0:	3101      	adds	r1, #1
   841a2:	42b4      	cmp	r4, r6
   841a4:	d1f5      	bne.n	84192 <strncmp+0xa>
   841a6:	2a01      	cmp	r2, #1
   841a8:	d0f3      	beq.n	84192 <strncmp+0xa>
   841aa:	3a01      	subs	r2, #1
   841ac:	2c00      	cmp	r4, #0
   841ae:	d1ed      	bne.n	8418c <strncmp+0x4>
   841b0:	e7ef      	b.n	84192 <strncmp+0xa>
   841b2:	4610      	mov	r0, r2
   841b4:	bd70      	pop	{r4, r5, r6, pc}

000841b6 <strncpy>:
   841b6:	b530      	push	{r4, r5, lr}
   841b8:	3901      	subs	r1, #1
   841ba:	4603      	mov	r3, r0
   841bc:	461c      	mov	r4, r3
   841be:	b13a      	cbz	r2, 841d0 <strncpy+0x1a>
   841c0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   841c4:	3a01      	subs	r2, #1
   841c6:	f803 5b01 	strb.w	r5, [r3], #1
   841ca:	461c      	mov	r4, r3
   841cc:	2d00      	cmp	r5, #0
   841ce:	d1f5      	bne.n	841bc <strncpy+0x6>
   841d0:	1899      	adds	r1, r3, r2
   841d2:	428c      	cmp	r4, r1
   841d4:	d003      	beq.n	841de <strncpy+0x28>
   841d6:	2200      	movs	r2, #0
   841d8:	f804 2b01 	strb.w	r2, [r4], #1
   841dc:	e7f9      	b.n	841d2 <strncpy+0x1c>
   841de:	bd30      	pop	{r4, r5, pc}

000841e0 <match>:
   841e0:	b530      	push	{r4, r5, lr}
   841e2:	6805      	ldr	r5, [r0, #0]
   841e4:	f811 2b01 	ldrb.w	r2, [r1], #1
   841e8:	462c      	mov	r4, r5
   841ea:	1c6b      	adds	r3, r5, #1
   841ec:	b152      	cbz	r2, 84204 <match+0x24>
   841ee:	461d      	mov	r5, r3
   841f0:	7863      	ldrb	r3, [r4, #1]
   841f2:	2b40      	cmp	r3, #64	; 0x40
   841f4:	dd02      	ble.n	841fc <match+0x1c>
   841f6:	2b5a      	cmp	r3, #90	; 0x5a
   841f8:	bfd8      	it	le
   841fa:	3320      	addle	r3, #32
   841fc:	4293      	cmp	r3, r2
   841fe:	d0f1      	beq.n	841e4 <match+0x4>
   84200:	2000      	movs	r0, #0
   84202:	bd30      	pop	{r4, r5, pc}
   84204:	6003      	str	r3, [r0, #0]
   84206:	2001      	movs	r0, #1
   84208:	bd30      	pop	{r4, r5, pc}

0008420a <_strtod_r>:
   8420a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8420e:	b097      	sub	sp, #92	; 0x5c
   84210:	9002      	str	r0, [sp, #8]
   84212:	4688      	mov	r8, r1
   84214:	920f      	str	r2, [sp, #60]	; 0x3c
   84216:	f04f 0a00 	mov.w	sl, #0
   8421a:	f04f 0b00 	mov.w	fp, #0
   8421e:	9111      	str	r1, [sp, #68]	; 0x44
   84220:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84222:	7813      	ldrb	r3, [r2, #0]
   84224:	2b0d      	cmp	r3, #13
   84226:	d805      	bhi.n	84234 <_strtod_r+0x2a>
   84228:	2b09      	cmp	r3, #9
   8422a:	d213      	bcs.n	84254 <_strtod_r+0x4a>
   8422c:	2b00      	cmp	r3, #0
   8422e:	f000 81ae 	beq.w	8458e <_strtod_r+0x384>
   84232:	e012      	b.n	8425a <_strtod_r+0x50>
   84234:	2b2b      	cmp	r3, #43	; 0x2b
   84236:	d006      	beq.n	84246 <_strtod_r+0x3c>
   84238:	2b2d      	cmp	r3, #45	; 0x2d
   8423a:	d002      	beq.n	84242 <_strtod_r+0x38>
   8423c:	2b20      	cmp	r3, #32
   8423e:	d10c      	bne.n	8425a <_strtod_r+0x50>
   84240:	e008      	b.n	84254 <_strtod_r+0x4a>
   84242:	2301      	movs	r3, #1
   84244:	e000      	b.n	84248 <_strtod_r+0x3e>
   84246:	2300      	movs	r3, #0
   84248:	1c54      	adds	r4, r2, #1
   8424a:	9411      	str	r4, [sp, #68]	; 0x44
   8424c:	7852      	ldrb	r2, [r2, #1]
   8424e:	930b      	str	r3, [sp, #44]	; 0x2c
   84250:	b92a      	cbnz	r2, 8425e <_strtod_r+0x54>
   84252:	e19c      	b.n	8458e <_strtod_r+0x384>
   84254:	1c51      	adds	r1, r2, #1
   84256:	9111      	str	r1, [sp, #68]	; 0x44
   84258:	e7e2      	b.n	84220 <_strtod_r+0x16>
   8425a:	2400      	movs	r4, #0
   8425c:	940b      	str	r4, [sp, #44]	; 0x2c
   8425e:	9c11      	ldr	r4, [sp, #68]	; 0x44
   84260:	7821      	ldrb	r1, [r4, #0]
   84262:	2930      	cmp	r1, #48	; 0x30
   84264:	d156      	bne.n	84314 <_strtod_r+0x10a>
   84266:	7863      	ldrb	r3, [r4, #1]
   84268:	2b58      	cmp	r3, #88	; 0x58
   8426a:	d001      	beq.n	84270 <_strtod_r+0x66>
   8426c:	2b78      	cmp	r3, #120	; 0x78
   8426e:	d145      	bne.n	842fc <_strtod_r+0xf2>
   84270:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84272:	4e9f      	ldr	r6, [pc, #636]	; (844f0 <_strtod_r+0x2e6>)
   84274:	af12      	add	r7, sp, #72	; 0x48
   84276:	9700      	str	r7, [sp, #0]
   84278:	9101      	str	r1, [sp, #4]
   8427a:	9802      	ldr	r0, [sp, #8]
   8427c:	a911      	add	r1, sp, #68	; 0x44
   8427e:	4632      	mov	r2, r6
   84280:	ab13      	add	r3, sp, #76	; 0x4c
   84282:	f002 ffff 	bl	87284 <__gethex>
   84286:	f010 0707 	ands.w	r7, r0, #7
   8428a:	4605      	mov	r5, r0
   8428c:	f000 8524 	beq.w	84cd8 <_strtod_r+0xace>
   84290:	2f06      	cmp	r7, #6
   84292:	d103      	bne.n	8429c <_strtod_r+0x92>
   84294:	1c61      	adds	r1, r4, #1
   84296:	9111      	str	r1, [sp, #68]	; 0x44
   84298:	f000 bd1e 	b.w	84cd8 <_strtod_r+0xace>
   8429c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8429e:	b13a      	cbz	r2, 842b0 <_strtod_r+0xa6>
   842a0:	a814      	add	r0, sp, #80	; 0x50
   842a2:	6831      	ldr	r1, [r6, #0]
   842a4:	f004 f9d8 	bl	88658 <__copybits>
   842a8:	9802      	ldr	r0, [sp, #8]
   842aa:	9912      	ldr	r1, [sp, #72]	; 0x48
   842ac:	f003 fe4a 	bl	87f44 <_Bfree>
   842b0:	3f01      	subs	r7, #1
   842b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
   842b4:	2f04      	cmp	r7, #4
   842b6:	d81a      	bhi.n	842ee <_strtod_r+0xe4>
   842b8:	e8df f007 	tbb	[pc, r7]
   842bc:	15120308 	.word	0x15120308
   842c0:	08          	.byte	0x08
   842c1:	00          	.byte	0x00
   842c2:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
   842c6:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   842ca:	e010      	b.n	842ee <_strtod_r+0xe4>
   842cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   842ce:	f200 4233 	addw	r2, r0, #1075	; 0x433
   842d2:	f423 1480 	bic.w	r4, r3, #1048576	; 0x100000
   842d6:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
   842da:	ea44 5b02 	orr.w	fp, r4, r2, lsl #20
   842de:	e006      	b.n	842ee <_strtod_r+0xe4>
   842e0:	f8df b210 	ldr.w	fp, [pc, #528]	; 844f4 <_strtod_r+0x2ea>
   842e4:	e003      	b.n	842ee <_strtod_r+0xe4>
   842e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   842ea:	f04f 3aff 	mov.w	sl, #4294967295
   842ee:	0729      	lsls	r1, r5, #28
   842f0:	f140 84f2 	bpl.w	84cd8 <_strtod_r+0xace>
   842f4:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   842f8:	f000 bcee 	b.w	84cd8 <_strtod_r+0xace>
   842fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
   842fe:	1c62      	adds	r2, r4, #1
   84300:	9211      	str	r2, [sp, #68]	; 0x44
   84302:	7861      	ldrb	r1, [r4, #1]
   84304:	2930      	cmp	r1, #48	; 0x30
   84306:	d0f9      	beq.n	842fc <_strtod_r+0xf2>
   84308:	2900      	cmp	r1, #0
   8430a:	f000 84e5 	beq.w	84cd8 <_strtod_r+0xace>
   8430e:	2601      	movs	r6, #1
   84310:	9604      	str	r6, [sp, #16]
   84312:	e001      	b.n	84318 <_strtod_r+0x10e>
   84314:	2500      	movs	r5, #0
   84316:	9504      	str	r5, [sp, #16]
   84318:	9f11      	ldr	r7, [sp, #68]	; 0x44
   8431a:	9706      	str	r7, [sp, #24]
   8431c:	2700      	movs	r7, #0
   8431e:	9703      	str	r7, [sp, #12]
   84320:	463e      	mov	r6, r7
   84322:	9d11      	ldr	r5, [sp, #68]	; 0x44
   84324:	782c      	ldrb	r4, [r5, #0]
   84326:	2c2f      	cmp	r4, #47	; 0x2f
   84328:	dc16      	bgt.n	84358 <_strtod_r+0x14e>
   8432a:	9802      	ldr	r0, [sp, #8]
   8432c:	f003 faca 	bl	878c4 <_localeconv_r>
   84330:	f8d0 9000 	ldr.w	r9, [r0]
   84334:	9802      	ldr	r0, [sp, #8]
   84336:	f003 fac5 	bl	878c4 <_localeconv_r>
   8433a:	6800      	ldr	r0, [r0, #0]
   8433c:	f7ff ff1c 	bl	84178 <strlen>
   84340:	4649      	mov	r1, r9
   84342:	4602      	mov	r2, r0
   84344:	4628      	mov	r0, r5
   84346:	f7ff ff1f 	bl	84188 <strncmp>
   8434a:	4681      	mov	r9, r0
   8434c:	b1c8      	cbz	r0, 84382 <_strtod_r+0x178>
   8434e:	2300      	movs	r3, #0
   84350:	4635      	mov	r5, r6
   84352:	461a      	mov	r2, r3
   84354:	9307      	str	r3, [sp, #28]
   84356:	e074      	b.n	84442 <_strtod_r+0x238>
   84358:	2c39      	cmp	r4, #57	; 0x39
   8435a:	dce6      	bgt.n	8432a <_strtod_r+0x120>
   8435c:	2e0f      	cmp	r6, #15
   8435e:	dc0c      	bgt.n	8437a <_strtod_r+0x170>
   84360:	2e08      	cmp	r6, #8
   84362:	bfd8      	it	le
   84364:	9803      	ldrle	r0, [sp, #12]
   84366:	f04f 030a 	mov.w	r3, #10
   8436a:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
   8436e:	bfd6      	itet	le
   84370:	fb03 4000 	mlale	r0, r3, r0, r4
   84374:	fb03 4707 	mlagt	r7, r3, r7, r4
   84378:	9003      	strle	r0, [sp, #12]
   8437a:	1c6c      	adds	r4, r5, #1
   8437c:	3601      	adds	r6, #1
   8437e:	9411      	str	r4, [sp, #68]	; 0x44
   84380:	e7cf      	b.n	84322 <_strtod_r+0x118>
   84382:	9802      	ldr	r0, [sp, #8]
   84384:	9c11      	ldr	r4, [sp, #68]	; 0x44
   84386:	f003 fa9d 	bl	878c4 <_localeconv_r>
   8438a:	6800      	ldr	r0, [r0, #0]
   8438c:	f7ff fef4 	bl	84178 <strlen>
   84390:	1823      	adds	r3, r4, r0
   84392:	9311      	str	r3, [sp, #68]	; 0x44
   84394:	5c24      	ldrb	r4, [r4, r0]
   84396:	b11e      	cbz	r6, 843a0 <_strtod_r+0x196>
   84398:	4635      	mov	r5, r6
   8439a:	464b      	mov	r3, r9
   8439c:	464a      	mov	r2, r9
   8439e:	e045      	b.n	8442c <_strtod_r+0x222>
   843a0:	4633      	mov	r3, r6
   843a2:	2c30      	cmp	r4, #48	; 0x30
   843a4:	d105      	bne.n	843b2 <_strtod_r+0x1a8>
   843a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   843a8:	3301      	adds	r3, #1
   843aa:	1c6a      	adds	r2, r5, #1
   843ac:	9211      	str	r2, [sp, #68]	; 0x44
   843ae:	786c      	ldrb	r4, [r5, #1]
   843b0:	e7f7      	b.n	843a2 <_strtod_r+0x198>
   843b2:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   843b6:	2808      	cmp	r0, #8
   843b8:	d83f      	bhi.n	8443a <_strtod_r+0x230>
   843ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   843bc:	9206      	str	r2, [sp, #24]
   843be:	461a      	mov	r2, r3
   843c0:	2300      	movs	r3, #0
   843c2:	461d      	mov	r5, r3
   843c4:	1c59      	adds	r1, r3, #1
   843c6:	f1b4 0930 	subs.w	r9, r4, #48	; 0x30
   843ca:	d02a      	beq.n	84422 <_strtod_r+0x218>
   843cc:	1852      	adds	r2, r2, r1
   843ce:	1c68      	adds	r0, r5, #1
   843d0:	ebc5 0c00 	rsb	ip, r5, r0
   843d4:	458c      	cmp	ip, r1
   843d6:	da11      	bge.n	843fc <_strtod_r+0x1f2>
   843d8:	f100 3eff 	add.w	lr, r0, #4294967295
   843dc:	f1be 0f10 	cmp.w	lr, #16
   843e0:	dc0a      	bgt.n	843f8 <_strtod_r+0x1ee>
   843e2:	2809      	cmp	r0, #9
   843e4:	bfd8      	it	le
   843e6:	9c03      	ldrle	r4, [sp, #12]
   843e8:	f04f 0c0a 	mov.w	ip, #10
   843ec:	bfd6      	itet	le
   843ee:	fb0c f404 	mulle.w	r4, ip, r4
   843f2:	fb0c f707 	mulgt.w	r7, ip, r7
   843f6:	9403      	strle	r4, [sp, #12]
   843f8:	3001      	adds	r0, #1
   843fa:	e7e9      	b.n	843d0 <_strtod_r+0x1c6>
   843fc:	2b00      	cmp	r3, #0
   843fe:	bfac      	ite	ge
   84400:	18eb      	addge	r3, r5, r3
   84402:	1c2b      	addlt	r3, r5, #0
   84404:	1c5d      	adds	r5, r3, #1
   84406:	2b10      	cmp	r3, #16
   84408:	dc0a      	bgt.n	84420 <_strtod_r+0x216>
   8440a:	2d09      	cmp	r5, #9
   8440c:	bfd8      	it	le
   8440e:	9c03      	ldrle	r4, [sp, #12]
   84410:	f04f 000a 	mov.w	r0, #10
   84414:	bfd6      	itet	le
   84416:	fb00 9404 	mlale	r4, r0, r4, r9
   8441a:	fb00 9707 	mlagt	r7, r0, r7, r9
   8441e:	9403      	strle	r4, [sp, #12]
   84420:	2100      	movs	r1, #0
   84422:	9c11      	ldr	r4, [sp, #68]	; 0x44
   84424:	1c63      	adds	r3, r4, #1
   84426:	9311      	str	r3, [sp, #68]	; 0x44
   84428:	7864      	ldrb	r4, [r4, #1]
   8442a:	460b      	mov	r3, r1
   8442c:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   84430:	2809      	cmp	r0, #9
   84432:	d9c7      	bls.n	843c4 <_strtod_r+0x1ba>
   84434:	2101      	movs	r1, #1
   84436:	9107      	str	r1, [sp, #28]
   84438:	e003      	b.n	84442 <_strtod_r+0x238>
   8443a:	2500      	movs	r5, #0
   8443c:	2101      	movs	r1, #1
   8443e:	462a      	mov	r2, r5
   84440:	9107      	str	r1, [sp, #28]
   84442:	2c65      	cmp	r4, #101	; 0x65
   84444:	d001      	beq.n	8444a <_strtod_r+0x240>
   84446:	2c45      	cmp	r4, #69	; 0x45
   84448:	d158      	bne.n	844fc <_strtod_r+0x2f2>
   8444a:	b925      	cbnz	r5, 84456 <_strtod_r+0x24c>
   8444c:	b91b      	cbnz	r3, 84456 <_strtod_r+0x24c>
   8444e:	9c04      	ldr	r4, [sp, #16]
   84450:	2c00      	cmp	r4, #0
   84452:	f000 809c 	beq.w	8458e <_strtod_r+0x384>
   84456:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
   8445a:	f108 0001 	add.w	r0, r8, #1
   8445e:	9011      	str	r0, [sp, #68]	; 0x44
   84460:	f898 4001 	ldrb.w	r4, [r8, #1]
   84464:	2c2b      	cmp	r4, #43	; 0x2b
   84466:	d003      	beq.n	84470 <_strtod_r+0x266>
   84468:	2c2d      	cmp	r4, #45	; 0x2d
   8446a:	d003      	beq.n	84474 <_strtod_r+0x26a>
   8446c:	2000      	movs	r0, #0
   8446e:	e007      	b.n	84480 <_strtod_r+0x276>
   84470:	2000      	movs	r0, #0
   84472:	e000      	b.n	84476 <_strtod_r+0x26c>
   84474:	2001      	movs	r0, #1
   84476:	f108 0102 	add.w	r1, r8, #2
   8447a:	9111      	str	r1, [sp, #68]	; 0x44
   8447c:	f898 4002 	ldrb.w	r4, [r8, #2]
   84480:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   84484:	f1be 0f09 	cmp.w	lr, #9
   84488:	d836      	bhi.n	844f8 <_strtod_r+0x2ee>
   8448a:	2c30      	cmp	r4, #48	; 0x30
   8448c:	d106      	bne.n	8449c <_strtod_r+0x292>
   8448e:	9c11      	ldr	r4, [sp, #68]	; 0x44
   84490:	f104 0901 	add.w	r9, r4, #1
   84494:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   84498:	7864      	ldrb	r4, [r4, #1]
   8449a:	e7f6      	b.n	8448a <_strtod_r+0x280>
   8449c:	f1a4 0931 	sub.w	r9, r4, #49	; 0x31
   844a0:	f1b9 0f08 	cmp.w	r9, #8
   844a4:	d82a      	bhi.n	844fc <_strtod_r+0x2f2>
   844a6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   844aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
   844ac:	9405      	str	r4, [sp, #20]
   844ae:	9911      	ldr	r1, [sp, #68]	; 0x44
   844b0:	f101 0e01 	add.w	lr, r1, #1
   844b4:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
   844b8:	784c      	ldrb	r4, [r1, #1]
   844ba:	2c2f      	cmp	r4, #47	; 0x2f
   844bc:	dc0b      	bgt.n	844d6 <_strtod_r+0x2cc>
   844be:	9905      	ldr	r1, [sp, #20]
   844c0:	ebc1 090e 	rsb	r9, r1, lr
   844c4:	f1b9 0f08 	cmp.w	r9, #8
   844c8:	f644 691f 	movw	r9, #19999	; 0x4e1f
   844cc:	dc0c      	bgt.n	844e8 <_strtod_r+0x2de>
   844ce:	45cc      	cmp	ip, r9
   844d0:	bfb8      	it	lt
   844d2:	46e1      	movlt	r9, ip
   844d4:	e008      	b.n	844e8 <_strtod_r+0x2de>
   844d6:	2c39      	cmp	r4, #57	; 0x39
   844d8:	dcf1      	bgt.n	844be <_strtod_r+0x2b4>
   844da:	f04f 0e0a 	mov.w	lr, #10
   844de:	fb0e 4c0c 	mla	ip, lr, ip, r4
   844e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   844e6:	e7e2      	b.n	844ae <_strtod_r+0x2a4>
   844e8:	b150      	cbz	r0, 84500 <_strtod_r+0x2f6>
   844ea:	f1c9 0900 	rsb	r9, r9, #0
   844ee:	e007      	b.n	84500 <_strtod_r+0x2f6>
   844f0:	20070440 	.word	0x20070440
   844f4:	7ff00000 	.word	0x7ff00000
   844f8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   844fc:	f04f 0900 	mov.w	r9, #0
   84500:	2d00      	cmp	r5, #0
   84502:	d149      	bne.n	84598 <_strtod_r+0x38e>
   84504:	2b00      	cmp	r3, #0
   84506:	f040 83e7 	bne.w	84cd8 <_strtod_r+0xace>
   8450a:	9a04      	ldr	r2, [sp, #16]
   8450c:	2a00      	cmp	r2, #0
   8450e:	f040 83e3 	bne.w	84cd8 <_strtod_r+0xace>
   84512:	9b07      	ldr	r3, [sp, #28]
   84514:	2b00      	cmp	r3, #0
   84516:	d13a      	bne.n	8458e <_strtod_r+0x384>
   84518:	2c4e      	cmp	r4, #78	; 0x4e
   8451a:	d01b      	beq.n	84554 <_strtod_r+0x34a>
   8451c:	dc02      	bgt.n	84524 <_strtod_r+0x31a>
   8451e:	2c49      	cmp	r4, #73	; 0x49
   84520:	d135      	bne.n	8458e <_strtod_r+0x384>
   84522:	e004      	b.n	8452e <_strtod_r+0x324>
   84524:	2c69      	cmp	r4, #105	; 0x69
   84526:	d002      	beq.n	8452e <_strtod_r+0x324>
   84528:	2c6e      	cmp	r4, #110	; 0x6e
   8452a:	d130      	bne.n	8458e <_strtod_r+0x384>
   8452c:	e012      	b.n	84554 <_strtod_r+0x34a>
   8452e:	a811      	add	r0, sp, #68	; 0x44
   84530:	49a4      	ldr	r1, [pc, #656]	; (847c4 <_strtod_r+0x5ba>)
   84532:	f7ff fe55 	bl	841e0 <match>
   84536:	b350      	cbz	r0, 8458e <_strtod_r+0x384>
   84538:	9c11      	ldr	r4, [sp, #68]	; 0x44
   8453a:	a811      	add	r0, sp, #68	; 0x44
   8453c:	1e61      	subs	r1, r4, #1
   8453e:	9111      	str	r1, [sp, #68]	; 0x44
   84540:	49a1      	ldr	r1, [pc, #644]	; (847c8 <_strtod_r+0x5be>)
   84542:	f7ff fe4d 	bl	841e0 <match>
   84546:	b910      	cbnz	r0, 8454e <_strtod_r+0x344>
   84548:	9811      	ldr	r0, [sp, #68]	; 0x44
   8454a:	1c42      	adds	r2, r0, #1
   8454c:	9211      	str	r2, [sp, #68]	; 0x44
   8454e:	f8df b28c 	ldr.w	fp, [pc, #652]	; 847dc <_strtod_r+0x5d2>
   84552:	e019      	b.n	84588 <_strtod_r+0x37e>
   84554:	a811      	add	r0, sp, #68	; 0x44
   84556:	499d      	ldr	r1, [pc, #628]	; (847cc <_strtod_r+0x5c2>)
   84558:	f7ff fe42 	bl	841e0 <match>
   8455c:	b1b8      	cbz	r0, 8458e <_strtod_r+0x384>
   8455e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84560:	781c      	ldrb	r4, [r3, #0]
   84562:	2c28      	cmp	r4, #40	; 0x28
   84564:	d10e      	bne.n	84584 <_strtod_r+0x37a>
   84566:	a811      	add	r0, sp, #68	; 0x44
   84568:	4999      	ldr	r1, [pc, #612]	; (847d0 <_strtod_r+0x5c6>)
   8456a:	aa14      	add	r2, sp, #80	; 0x50
   8456c:	f003 f8d8 	bl	87720 <__hexnan>
   84570:	2805      	cmp	r0, #5
   84572:	d107      	bne.n	84584 <_strtod_r+0x37a>
   84574:	9915      	ldr	r1, [sp, #84]	; 0x54
   84576:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
   8457a:	f041 40ff 	orr.w	r0, r1, #2139095040	; 0x7f800000
   8457e:	f440 0be0 	orr.w	fp, r0, #7340032	; 0x700000
   84582:	e3a9      	b.n	84cd8 <_strtod_r+0xace>
   84584:	f8df b260 	ldr.w	fp, [pc, #608]	; 847e8 <_strtod_r+0x5de>
   84588:	f04f 0a00 	mov.w	sl, #0
   8458c:	e3a4      	b.n	84cd8 <_strtod_r+0xace>
   8458e:	2100      	movs	r1, #0
   84590:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   84594:	910b      	str	r1, [sp, #44]	; 0x2c
   84596:	e39f      	b.n	84cd8 <_strtod_r+0xace>
   84598:	ebc2 0209 	rsb	r2, r2, r9
   8459c:	9803      	ldr	r0, [sp, #12]
   8459e:	9205      	str	r2, [sp, #20]
   845a0:	f7ff f9e8 	bl	83974 <__aeabi_ui2d>
   845a4:	2d10      	cmp	r5, #16
   845a6:	bfb4      	ite	lt
   845a8:	462c      	movlt	r4, r5
   845aa:	2410      	movge	r4, #16
   845ac:	2e00      	cmp	r6, #0
   845ae:	bf08      	it	eq
   845b0:	462e      	moveq	r6, r5
   845b2:	2c09      	cmp	r4, #9
   845b4:	4682      	mov	sl, r0
   845b6:	468b      	mov	fp, r1
   845b8:	dd15      	ble.n	845e6 <_strtod_r+0x3dc>
   845ba:	4b86      	ldr	r3, [pc, #536]	; (847d4 <_strtod_r+0x5ca>)
   845bc:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   845c0:	f1a2 0348 	sub.w	r3, r2, #72	; 0x48
   845c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   845c8:	f7ff fa4a 	bl	83a60 <__aeabi_dmul>
   845cc:	4680      	mov	r8, r0
   845ce:	4638      	mov	r0, r7
   845d0:	4689      	mov	r9, r1
   845d2:	f7ff f9cf 	bl	83974 <__aeabi_ui2d>
   845d6:	4602      	mov	r2, r0
   845d8:	460b      	mov	r3, r1
   845da:	4640      	mov	r0, r8
   845dc:	4649      	mov	r1, r9
   845de:	f7ff f88d 	bl	836fc <__adddf3>
   845e2:	4682      	mov	sl, r0
   845e4:	468b      	mov	fp, r1
   845e6:	2d0f      	cmp	r5, #15
   845e8:	dc36      	bgt.n	84658 <_strtod_r+0x44e>
   845ea:	9805      	ldr	r0, [sp, #20]
   845ec:	2800      	cmp	r0, #0
   845ee:	f000 8373 	beq.w	84cd8 <_strtod_r+0xace>
   845f2:	dd23      	ble.n	8463c <_strtod_r+0x432>
   845f4:	2816      	cmp	r0, #22
   845f6:	dc06      	bgt.n	84606 <_strtod_r+0x3fc>
   845f8:	4976      	ldr	r1, [pc, #472]	; (847d4 <_strtod_r+0x5ca>)
   845fa:	4652      	mov	r2, sl
   845fc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   84600:	c803      	ldmia	r0, {r0, r1}
   84602:	465b      	mov	r3, fp
   84604:	e015      	b.n	84632 <_strtod_r+0x428>
   84606:	9805      	ldr	r0, [sp, #20]
   84608:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   8460c:	4290      	cmp	r0, r2
   8460e:	dc23      	bgt.n	84658 <_strtod_r+0x44e>
   84610:	4c70      	ldr	r4, [pc, #448]	; (847d4 <_strtod_r+0x5ca>)
   84612:	f1c5 050f 	rsb	r5, r5, #15
   84616:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
   8461a:	e9d2 0100 	ldrd	r0, r1, [r2]
   8461e:	465b      	mov	r3, fp
   84620:	4652      	mov	r2, sl
   84622:	f7ff fa1d 	bl	83a60 <__aeabi_dmul>
   84626:	9b05      	ldr	r3, [sp, #20]
   84628:	1b5d      	subs	r5, r3, r5
   8462a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   8462e:	e9d4 2300 	ldrd	r2, r3, [r4]
   84632:	f7ff fa15 	bl	83a60 <__aeabi_dmul>
   84636:	4682      	mov	sl, r0
   84638:	468b      	mov	fp, r1
   8463a:	e34d      	b.n	84cd8 <_strtod_r+0xace>
   8463c:	9905      	ldr	r1, [sp, #20]
   8463e:	f111 0f16 	cmn.w	r1, #22
   84642:	db09      	blt.n	84658 <_strtod_r+0x44e>
   84644:	4c63      	ldr	r4, [pc, #396]	; (847d4 <_strtod_r+0x5ca>)
   84646:	4650      	mov	r0, sl
   84648:	eba4 03c1 	sub.w	r3, r4, r1, lsl #3
   8464c:	e9d3 2300 	ldrd	r2, r3, [r3]
   84650:	4659      	mov	r1, fp
   84652:	f7ff fb2f 	bl	83cb4 <__aeabi_ddiv>
   84656:	e7ee      	b.n	84636 <_strtod_r+0x42c>
   84658:	1b29      	subs	r1, r5, r4
   8465a:	9c05      	ldr	r4, [sp, #20]
   8465c:	1864      	adds	r4, r4, r1
   8465e:	2c00      	cmp	r4, #0
   84660:	dd54      	ble.n	8470c <_strtod_r+0x502>
   84662:	f014 000f 	ands.w	r0, r4, #15
   84666:	d00a      	beq.n	8467e <_strtod_r+0x474>
   84668:	4a5a      	ldr	r2, [pc, #360]	; (847d4 <_strtod_r+0x5ca>)
   8466a:	465b      	mov	r3, fp
   8466c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   84670:	e9d1 0100 	ldrd	r0, r1, [r1]
   84674:	4652      	mov	r2, sl
   84676:	f7ff f9f3 	bl	83a60 <__aeabi_dmul>
   8467a:	4682      	mov	sl, r0
   8467c:	468b      	mov	fp, r1
   8467e:	f034 030f 	bics.w	r3, r4, #15
   84682:	f000 80b5 	beq.w	847f0 <_strtod_r+0x5e6>
   84686:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
   8468a:	dd0f      	ble.n	846ac <_strtod_r+0x4a2>
   8468c:	f04f 0800 	mov.w	r8, #0
   84690:	f8cd 800c 	str.w	r8, [sp, #12]
   84694:	f8cd 801c 	str.w	r8, [sp, #28]
   84698:	f8cd 8018 	str.w	r8, [sp, #24]
   8469c:	9802      	ldr	r0, [sp, #8]
   8469e:	2122      	movs	r1, #34	; 0x22
   846a0:	6001      	str	r1, [r0, #0]
   846a2:	f8df b138 	ldr.w	fp, [pc, #312]	; 847dc <_strtod_r+0x5d2>
   846a6:	f04f 0a00 	mov.w	sl, #0
   846aa:	e172      	b.n	84992 <_strtod_r+0x788>
   846ac:	111f      	asrs	r7, r3, #4
   846ae:	4650      	mov	r0, sl
   846b0:	4659      	mov	r1, fp
   846b2:	f04f 0800 	mov.w	r8, #0
   846b6:	2f01      	cmp	r7, #1
   846b8:	dd0c      	ble.n	846d4 <_strtod_r+0x4ca>
   846ba:	07fa      	lsls	r2, r7, #31
   846bc:	d506      	bpl.n	846cc <_strtod_r+0x4c2>
   846be:	4a46      	ldr	r2, [pc, #280]	; (847d8 <_strtod_r+0x5ce>)
   846c0:	eb02 03c8 	add.w	r3, r2, r8, lsl #3
   846c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   846c8:	f7ff f9ca 	bl	83a60 <__aeabi_dmul>
   846cc:	f108 0801 	add.w	r8, r8, #1
   846d0:	107f      	asrs	r7, r7, #1
   846d2:	e7f0      	b.n	846b6 <_strtod_r+0x4ac>
   846d4:	4602      	mov	r2, r0
   846d6:	4840      	ldr	r0, [pc, #256]	; (847d8 <_strtod_r+0x5ce>)
   846d8:	f1a1 7354 	sub.w	r3, r1, #55574528	; 0x3500000
   846dc:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
   846e0:	e9d1 0100 	ldrd	r0, r1, [r1]
   846e4:	f7ff f9bc 	bl	83a60 <__aeabi_dmul>
   846e8:	4b3c      	ldr	r3, [pc, #240]	; (847dc <_strtod_r+0x5d2>)
   846ea:	4c3d      	ldr	r4, [pc, #244]	; (847e0 <_strtod_r+0x5d6>)
   846ec:	400b      	ands	r3, r1
   846ee:	42a3      	cmp	r3, r4
   846f0:	4682      	mov	sl, r0
   846f2:	468b      	mov	fp, r1
   846f4:	d8ca      	bhi.n	8468c <_strtod_r+0x482>
   846f6:	f5a4 1780 	sub.w	r7, r4, #1048576	; 0x100000
   846fa:	42bb      	cmp	r3, r7
   846fc:	bf86      	itte	hi
   846fe:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 847ec <_strtod_r+0x5e2>
   84702:	f04f 3aff 	movhi.w	sl, #4294967295
   84706:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
   8470a:	e071      	b.n	847f0 <_strtod_r+0x5e6>
   8470c:	d070      	beq.n	847f0 <_strtod_r+0x5e6>
   8470e:	4267      	negs	r7, r4
   84710:	f017 030f 	ands.w	r3, r7, #15
   84714:	d00a      	beq.n	8472c <_strtod_r+0x522>
   84716:	4a2f      	ldr	r2, [pc, #188]	; (847d4 <_strtod_r+0x5ca>)
   84718:	4650      	mov	r0, sl
   8471a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   8471e:	4659      	mov	r1, fp
   84720:	e9d4 2300 	ldrd	r2, r3, [r4]
   84724:	f7ff fac6 	bl	83cb4 <__aeabi_ddiv>
   84728:	4682      	mov	sl, r0
   8472a:	468b      	mov	fp, r1
   8472c:	113f      	asrs	r7, r7, #4
   8472e:	d05f      	beq.n	847f0 <_strtod_r+0x5e6>
   84730:	2f1f      	cmp	r7, #31
   84732:	dd08      	ble.n	84746 <_strtod_r+0x53c>
   84734:	f04f 0800 	mov.w	r8, #0
   84738:	f8cd 800c 	str.w	r8, [sp, #12]
   8473c:	f8cd 801c 	str.w	r8, [sp, #28]
   84740:	f8cd 8018 	str.w	r8, [sp, #24]
   84744:	e11e      	b.n	84984 <_strtod_r+0x77a>
   84746:	f017 0f10 	tst.w	r7, #16
   8474a:	bf14      	ite	ne
   8474c:	206a      	movne	r0, #106	; 0x6a
   8474e:	2000      	moveq	r0, #0
   84750:	4c24      	ldr	r4, [pc, #144]	; (847e4 <_strtod_r+0x5da>)
   84752:	9004      	str	r0, [sp, #16]
   84754:	4659      	mov	r1, fp
   84756:	4650      	mov	r0, sl
   84758:	2f00      	cmp	r7, #0
   8475a:	dd08      	ble.n	8476e <_strtod_r+0x564>
   8475c:	07fb      	lsls	r3, r7, #31
   8475e:	d503      	bpl.n	84768 <_strtod_r+0x55e>
   84760:	e9d4 2300 	ldrd	r2, r3, [r4]
   84764:	f7ff f97c 	bl	83a60 <__aeabi_dmul>
   84768:	107f      	asrs	r7, r7, #1
   8476a:	3408      	adds	r4, #8
   8476c:	e7f4      	b.n	84758 <_strtod_r+0x54e>
   8476e:	468b      	mov	fp, r1
   84770:	9904      	ldr	r1, [sp, #16]
   84772:	4682      	mov	sl, r0
   84774:	b1e1      	cbz	r1, 847b0 <_strtod_r+0x5a6>
   84776:	f3cb 530a 	ubfx	r3, fp, #20, #11
   8477a:	f1c3 046b 	rsb	r4, r3, #107	; 0x6b
   8477e:	2c00      	cmp	r4, #0
   84780:	dd16      	ble.n	847b0 <_strtod_r+0x5a6>
   84782:	2c1f      	cmp	r4, #31
   84784:	dd0e      	ble.n	847a4 <_strtod_r+0x59a>
   84786:	2c34      	cmp	r4, #52	; 0x34
   84788:	f04f 0a00 	mov.w	sl, #0
   8478c:	dd02      	ble.n	84794 <_strtod_r+0x58a>
   8478e:	f04f 7b5c 	mov.w	fp, #57671680	; 0x3700000
   84792:	e00d      	b.n	847b0 <_strtod_r+0x5a6>
   84794:	3c20      	subs	r4, #32
   84796:	f04f 33ff 	mov.w	r3, #4294967295
   8479a:	fa03 f404 	lsl.w	r4, r3, r4
   8479e:	ea04 0b0b 	and.w	fp, r4, fp
   847a2:	e005      	b.n	847b0 <_strtod_r+0x5a6>
   847a4:	f04f 30ff 	mov.w	r0, #4294967295
   847a8:	fa00 f104 	lsl.w	r1, r0, r4
   847ac:	ea01 0a0a 	and.w	sl, r1, sl
   847b0:	4650      	mov	r0, sl
   847b2:	4659      	mov	r1, fp
   847b4:	2200      	movs	r2, #0
   847b6:	2300      	movs	r3, #0
   847b8:	f005 fbf0 	bl	89f9c <__aeabi_dcmpeq>
   847bc:	2800      	cmp	r0, #0
   847be:	d1b9      	bne.n	84734 <_strtod_r+0x52a>
   847c0:	e018      	b.n	847f4 <_strtod_r+0x5ea>
   847c2:	bf00      	nop
   847c4:	0008a798 	.word	0x0008a798
   847c8:	0008a79b 	.word	0x0008a79b
   847cc:	0008a7a1 	.word	0x0008a7a1
   847d0:	20070454 	.word	0x20070454
   847d4:	0008a950 	.word	0x0008a950
   847d8:	0008aa40 	.word	0x0008aa40
   847dc:	7ff00000 	.word	0x7ff00000
   847e0:	7ca00000 	.word	0x7ca00000
   847e4:	0008a770 	.word	0x0008a770
   847e8:	fff80000 	.word	0xfff80000
   847ec:	7fefffff 	.word	0x7fefffff
   847f0:	2000      	movs	r0, #0
   847f2:	9004      	str	r0, [sp, #16]
   847f4:	9903      	ldr	r1, [sp, #12]
   847f6:	4632      	mov	r2, r6
   847f8:	9100      	str	r1, [sp, #0]
   847fa:	9802      	ldr	r0, [sp, #8]
   847fc:	9906      	ldr	r1, [sp, #24]
   847fe:	462b      	mov	r3, r5
   84800:	f003 fbe5 	bl	87fce <__s2b>
   84804:	9e05      	ldr	r6, [sp, #20]
   84806:	9007      	str	r0, [sp, #28]
   84808:	2e00      	cmp	r6, #0
   8480a:	f2c0 80c7 	blt.w	8499c <_strtod_r+0x792>
   8480e:	2200      	movs	r2, #0
   84810:	920e      	str	r2, [sp, #56]	; 0x38
   84812:	9c07      	ldr	r4, [sp, #28]
   84814:	9802      	ldr	r0, [sp, #8]
   84816:	6861      	ldr	r1, [r4, #4]
   84818:	f003 fb6e 	bl	87ef8 <_Balloc>
   8481c:	6923      	ldr	r3, [r4, #16]
   8481e:	4621      	mov	r1, r4
   84820:	1c9f      	adds	r7, r3, #2
   84822:	00ba      	lsls	r2, r7, #2
   84824:	310c      	adds	r1, #12
   84826:	9006      	str	r0, [sp, #24]
   84828:	300c      	adds	r0, #12
   8482a:	f7ff fbb1 	bl	83f90 <memcpy>
   8482e:	a913      	add	r1, sp, #76	; 0x4c
   84830:	a810      	add	r0, sp, #64	; 0x40
   84832:	4652      	mov	r2, sl
   84834:	9000      	str	r0, [sp, #0]
   84836:	9101      	str	r1, [sp, #4]
   84838:	465b      	mov	r3, fp
   8483a:	9802      	ldr	r0, [sp, #8]
   8483c:	e9cd ab08 	strd	sl, fp, [sp, #32]
   84840:	f003 fe78 	bl	88534 <__d2b>
   84844:	2101      	movs	r1, #1
   84846:	9012      	str	r0, [sp, #72]	; 0x48
   84848:	9802      	ldr	r0, [sp, #8]
   8484a:	f003 fc4e 	bl	880ea <__i2b>
   8484e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   84850:	9e05      	ldr	r6, [sp, #20]
   84852:	2a00      	cmp	r2, #0
   84854:	9003      	str	r0, [sp, #12]
   84856:	ea26 77e6 	bic.w	r7, r6, r6, asr #31
   8485a:	f2c0 80a2 	blt.w	849a2 <_strtod_r+0x798>
   8485e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   84860:	463b      	mov	r3, r7
   84862:	18ad      	adds	r5, r5, r2
   84864:	9c04      	ldr	r4, [sp, #16]
   84866:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   84868:	1b14      	subs	r4, r2, r4
   8486a:	19a0      	adds	r0, r4, r6
   8486c:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
   84870:	4288      	cmp	r0, r1
   84872:	bfb4      	ite	lt
   84874:	f204 4433 	addwlt	r4, r4, #1075	; 0x433
   84878:	f1c6 0436 	rsbge	r4, r6, #54	; 0x36
   8487c:	9a04      	ldr	r2, [sp, #16]
   8487e:	192e      	adds	r6, r5, r4
   84880:	191b      	adds	r3, r3, r4
   84882:	42ae      	cmp	r6, r5
   84884:	bfb4      	ite	lt
   84886:	4630      	movlt	r0, r6
   84888:	4628      	movge	r0, r5
   8488a:	189c      	adds	r4, r3, r2
   8488c:	42a0      	cmp	r0, r4
   8488e:	bfa8      	it	ge
   84890:	4620      	movge	r0, r4
   84892:	2800      	cmp	r0, #0
   84894:	dd02      	ble.n	8489c <_strtod_r+0x692>
   84896:	1a36      	subs	r6, r6, r0
   84898:	1a24      	subs	r4, r4, r0
   8489a:	1a2d      	subs	r5, r5, r0
   8489c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8489e:	b18b      	cbz	r3, 848c4 <_strtod_r+0x6ba>
   848a0:	461a      	mov	r2, r3
   848a2:	9903      	ldr	r1, [sp, #12]
   848a4:	9802      	ldr	r0, [sp, #8]
   848a6:	f003 fcba 	bl	8821e <__pow5mult>
   848aa:	9003      	str	r0, [sp, #12]
   848ac:	9903      	ldr	r1, [sp, #12]
   848ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   848b0:	9802      	ldr	r0, [sp, #8]
   848b2:	f003 fc23 	bl	880fc <__multiply>
   848b6:	9912      	ldr	r1, [sp, #72]	; 0x48
   848b8:	4680      	mov	r8, r0
   848ba:	9802      	ldr	r0, [sp, #8]
   848bc:	f003 fb42 	bl	87f44 <_Bfree>
   848c0:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   848c4:	2e00      	cmp	r6, #0
   848c6:	dd05      	ble.n	848d4 <_strtod_r+0x6ca>
   848c8:	9802      	ldr	r0, [sp, #8]
   848ca:	9912      	ldr	r1, [sp, #72]	; 0x48
   848cc:	4632      	mov	r2, r6
   848ce:	f003 fce9 	bl	882a4 <__lshift>
   848d2:	9012      	str	r0, [sp, #72]	; 0x48
   848d4:	b12f      	cbz	r7, 848e2 <_strtod_r+0x6d8>
   848d6:	9802      	ldr	r0, [sp, #8]
   848d8:	9906      	ldr	r1, [sp, #24]
   848da:	463a      	mov	r2, r7
   848dc:	f003 fc9f 	bl	8821e <__pow5mult>
   848e0:	9006      	str	r0, [sp, #24]
   848e2:	2c00      	cmp	r4, #0
   848e4:	dd05      	ble.n	848f2 <_strtod_r+0x6e8>
   848e6:	9802      	ldr	r0, [sp, #8]
   848e8:	9906      	ldr	r1, [sp, #24]
   848ea:	4622      	mov	r2, r4
   848ec:	f003 fcda 	bl	882a4 <__lshift>
   848f0:	9006      	str	r0, [sp, #24]
   848f2:	2d00      	cmp	r5, #0
   848f4:	dd05      	ble.n	84902 <_strtod_r+0x6f8>
   848f6:	9802      	ldr	r0, [sp, #8]
   848f8:	9903      	ldr	r1, [sp, #12]
   848fa:	462a      	mov	r2, r5
   848fc:	f003 fcd2 	bl	882a4 <__lshift>
   84900:	9003      	str	r0, [sp, #12]
   84902:	9912      	ldr	r1, [sp, #72]	; 0x48
   84904:	9a06      	ldr	r2, [sp, #24]
   84906:	9802      	ldr	r0, [sp, #8]
   84908:	f003 fd3d 	bl	88386 <__mdiff>
   8490c:	f04f 0900 	mov.w	r9, #0
   84910:	68c4      	ldr	r4, [r0, #12]
   84912:	9903      	ldr	r1, [sp, #12]
   84914:	f8c0 900c 	str.w	r9, [r0, #12]
   84918:	4680      	mov	r8, r0
   8491a:	940a      	str	r4, [sp, #40]	; 0x28
   8491c:	f003 fd16 	bl	8834c <__mcmp>
   84920:	4548      	cmp	r0, r9
   84922:	da46      	bge.n	849b2 <_strtod_r+0x7a8>
   84924:	2c00      	cmp	r4, #0
   84926:	f040 81b0 	bne.w	84c8a <_strtod_r+0xa80>
   8492a:	f1ba 0f00 	cmp.w	sl, #0
   8492e:	f040 81ac 	bne.w	84c8a <_strtod_r+0xa80>
   84932:	f3cb 0013 	ubfx	r0, fp, #0, #20
   84936:	465c      	mov	r4, fp
   84938:	2800      	cmp	r0, #0
   8493a:	f040 81a6 	bne.w	84c8a <_strtod_r+0xa80>
   8493e:	4a9c      	ldr	r2, [pc, #624]	; (84bb0 <_strtod_r+0x9a6>)
   84940:	4022      	ands	r2, r4
   84942:	f1b2 6fd6 	cmp.w	r2, #112197632	; 0x6b00000
   84946:	f240 81a0 	bls.w	84c8a <_strtod_r+0xa80>
   8494a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   8494e:	b35b      	cbz	r3, 849a8 <_strtod_r+0x79e>
   84950:	4641      	mov	r1, r8
   84952:	2201      	movs	r2, #1
   84954:	9802      	ldr	r0, [sp, #8]
   84956:	f003 fca5 	bl	882a4 <__lshift>
   8495a:	9903      	ldr	r1, [sp, #12]
   8495c:	4680      	mov	r8, r0
   8495e:	f003 fcf5 	bl	8834c <__mcmp>
   84962:	2800      	cmp	r0, #0
   84964:	f340 8191 	ble.w	84c8a <_strtod_r+0xa80>
   84968:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
   8496c:	9b04      	ldr	r3, [sp, #16]
   8496e:	0d20      	lsrs	r0, r4, #20
   84970:	0502      	lsls	r2, r0, #20
   84972:	2b00      	cmp	r3, #0
   84974:	d04a      	beq.n	84a0c <_strtod_r+0x802>
   84976:	f1b2 6fd6 	cmp.w	r2, #112197632	; 0x6b00000
   8497a:	d847      	bhi.n	84a0c <_strtod_r+0x802>
   8497c:	f1b2 7f5c 	cmp.w	r2, #57671680	; 0x3700000
   84980:	f200 8185 	bhi.w	84c8e <_strtod_r+0xa84>
   84984:	9c02      	ldr	r4, [sp, #8]
   84986:	2022      	movs	r0, #34	; 0x22
   84988:	f04f 0a00 	mov.w	sl, #0
   8498c:	f04f 0b00 	mov.w	fp, #0
   84990:	6020      	str	r0, [r4, #0]
   84992:	9c07      	ldr	r4, [sp, #28]
   84994:	2c00      	cmp	r4, #0
   84996:	f040 818b 	bne.w	84cb0 <_strtod_r+0xaa6>
   8499a:	e19d      	b.n	84cd8 <_strtod_r+0xace>
   8499c:	9d05      	ldr	r5, [sp, #20]
   8499e:	426a      	negs	r2, r5
   849a0:	e736      	b.n	84810 <_strtod_r+0x606>
   849a2:	1abb      	subs	r3, r7, r2
   849a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   849a6:	e75d      	b.n	84864 <_strtod_r+0x65a>
   849a8:	f8d8 1010 	ldr.w	r1, [r8, #16]
   849ac:	2901      	cmp	r1, #1
   849ae:	dccf      	bgt.n	84950 <_strtod_r+0x746>
   849b0:	e16b      	b.n	84c8a <_strtod_r+0xa80>
   849b2:	d159      	bne.n	84a68 <_strtod_r+0x85e>
   849b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   849b6:	b314      	cbz	r4, 849fe <_strtod_r+0x7f4>
   849b8:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
   849bc:	4c7d      	ldr	r4, [pc, #500]	; (84bb4 <_strtod_r+0x9aa>)
   849be:	f420 0170 	bic.w	r1, r0, #15728640	; 0xf00000
   849c2:	42a1      	cmp	r1, r4
   849c4:	465a      	mov	r2, fp
   849c6:	d12a      	bne.n	84a1e <_strtod_r+0x814>
   849c8:	9b04      	ldr	r3, [sp, #16]
   849ca:	4651      	mov	r1, sl
   849cc:	b163      	cbz	r3, 849e8 <_strtod_r+0x7de>
   849ce:	4878      	ldr	r0, [pc, #480]	; (84bb0 <_strtod_r+0x9a6>)
   849d0:	4010      	ands	r0, r2
   849d2:	f1b0 6fd4 	cmp.w	r0, #111149056	; 0x6a00000
   849d6:	d807      	bhi.n	849e8 <_strtod_r+0x7de>
   849d8:	0d03      	lsrs	r3, r0, #20
   849da:	f1c3 046b 	rsb	r4, r3, #107	; 0x6b
   849de:	f04f 30ff 	mov.w	r0, #4294967295
   849e2:	fa00 f404 	lsl.w	r4, r0, r4
   849e6:	e001      	b.n	849ec <_strtod_r+0x7e2>
   849e8:	f04f 34ff 	mov.w	r4, #4294967295
   849ec:	42a1      	cmp	r1, r4
   849ee:	d116      	bne.n	84a1e <_strtod_r+0x814>
   849f0:	496f      	ldr	r1, [pc, #444]	; (84bb0 <_strtod_r+0x9a6>)
   849f2:	f04f 0a00 	mov.w	sl, #0
   849f6:	4011      	ands	r1, r2
   849f8:	f501 1b80 	add.w	fp, r1, #1048576	; 0x100000
   849fc:	e145      	b.n	84c8a <_strtod_r+0xa80>
   849fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
   84a02:	b963      	cbnz	r3, 84a1e <_strtod_r+0x814>
   84a04:	f1ba 0f00 	cmp.w	sl, #0
   84a08:	d109      	bne.n	84a1e <_strtod_r+0x814>
   84a0a:	e7ad      	b.n	84968 <_strtod_r+0x75e>
   84a0c:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
   84a10:	ea6f 5a11 	mvn.w	sl, r1, lsr #20
   84a14:	ea6f 5b0a 	mvn.w	fp, sl, lsl #20
   84a18:	f04f 3aff 	mov.w	sl, #4294967295
   84a1c:	e135      	b.n	84c8a <_strtod_r+0xa80>
   84a1e:	f00a 0201 	and.w	r2, sl, #1
   84a22:	2a00      	cmp	r2, #0
   84a24:	f000 8131 	beq.w	84c8a <_strtod_r+0xa80>
   84a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84a2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84a2e:	b153      	cbz	r3, 84a46 <_strtod_r+0x83c>
   84a30:	f003 fd0b 	bl	8844a <__ulp>
   84a34:	4602      	mov	r2, r0
   84a36:	460b      	mov	r3, r1
   84a38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84a3c:	f7fe fe5e 	bl	836fc <__adddf3>
   84a40:	4682      	mov	sl, r0
   84a42:	468b      	mov	fp, r1
   84a44:	e121      	b.n	84c8a <_strtod_r+0xa80>
   84a46:	f003 fd00 	bl	8844a <__ulp>
   84a4a:	4602      	mov	r2, r0
   84a4c:	460b      	mov	r3, r1
   84a4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84a52:	f7fe fe51 	bl	836f8 <__aeabi_dsub>
   84a56:	2200      	movs	r2, #0
   84a58:	2300      	movs	r3, #0
   84a5a:	4682      	mov	sl, r0
   84a5c:	468b      	mov	fp, r1
   84a5e:	f005 fa9d 	bl	89f9c <__aeabi_dcmpeq>
   84a62:	2800      	cmp	r0, #0
   84a64:	d18e      	bne.n	84984 <_strtod_r+0x77a>
   84a66:	e110      	b.n	84c8a <_strtod_r+0xa80>
   84a68:	4640      	mov	r0, r8
   84a6a:	9903      	ldr	r1, [sp, #12]
   84a6c:	f003 fdb6 	bl	885dc <__ratio>
   84a70:	2200      	movs	r2, #0
   84a72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84a76:	4604      	mov	r4, r0
   84a78:	460d      	mov	r5, r1
   84a7a:	f005 faa3 	bl	89fc4 <__aeabi_dcmple>
   84a7e:	b378      	cbz	r0, 84ae0 <_strtod_r+0x8d6>
   84a80:	990a      	ldr	r1, [sp, #40]	; 0x28
   84a82:	b111      	cbz	r1, 84a8a <_strtod_r+0x880>
   84a84:	2600      	movs	r6, #0
   84a86:	4f4c      	ldr	r7, [pc, #304]	; (84bb8 <_strtod_r+0x9ae>)
   84a88:	e00f      	b.n	84aaa <_strtod_r+0x8a0>
   84a8a:	4652      	mov	r2, sl
   84a8c:	f1ba 0f00 	cmp.w	sl, #0
   84a90:	d103      	bne.n	84a9a <_strtod_r+0x890>
   84a92:	f3cb 0613 	ubfx	r6, fp, #0, #20
   84a96:	b936      	cbnz	r6, 84aa6 <_strtod_r+0x89c>
   84a98:	e00b      	b.n	84ab2 <_strtod_r+0x8a8>
   84a9a:	2a01      	cmp	r2, #1
   84a9c:	d103      	bne.n	84aa6 <_strtod_r+0x89c>
   84a9e:	f1bb 0f00 	cmp.w	fp, #0
   84aa2:	f43f af6f 	beq.w	84984 <_strtod_r+0x77a>
   84aa6:	4f45      	ldr	r7, [pc, #276]	; (84bbc <_strtod_r+0x9b2>)
   84aa8:	2600      	movs	r6, #0
   84aaa:	2400      	movs	r4, #0
   84aac:	f8df 9108 	ldr.w	r9, [pc, #264]	; 84bb8 <_strtod_r+0x9ae>
   84ab0:	e026      	b.n	84b00 <_strtod_r+0x8f6>
   84ab2:	4620      	mov	r0, r4
   84ab4:	4629      	mov	r1, r5
   84ab6:	2200      	movs	r2, #0
   84ab8:	4b3f      	ldr	r3, [pc, #252]	; (84bb8 <_strtod_r+0x9ae>)
   84aba:	f005 fa79 	bl	89fb0 <__aeabi_dcmplt>
   84abe:	b940      	cbnz	r0, 84ad2 <_strtod_r+0x8c8>
   84ac0:	4620      	mov	r0, r4
   84ac2:	4629      	mov	r1, r5
   84ac4:	2200      	movs	r2, #0
   84ac6:	4b3e      	ldr	r3, [pc, #248]	; (84bc0 <_strtod_r+0x9b6>)
   84ac8:	f7fe ffca 	bl	83a60 <__aeabi_dmul>
   84acc:	4604      	mov	r4, r0
   84ace:	4689      	mov	r9, r1
   84ad0:	e002      	b.n	84ad8 <_strtod_r+0x8ce>
   84ad2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84ad4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 84bc0 <_strtod_r+0x9b6>
   84ad8:	4626      	mov	r6, r4
   84ada:	f109 4700 	add.w	r7, r9, #2147483648	; 0x80000000
   84ade:	e00f      	b.n	84b00 <_strtod_r+0x8f6>
   84ae0:	4620      	mov	r0, r4
   84ae2:	4629      	mov	r1, r5
   84ae4:	2200      	movs	r2, #0
   84ae6:	4b36      	ldr	r3, [pc, #216]	; (84bc0 <_strtod_r+0x9b6>)
   84ae8:	f7fe ffba 	bl	83a60 <__aeabi_dmul>
   84aec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   84aee:	4604      	mov	r4, r0
   84af0:	4689      	mov	r9, r1
   84af2:	b917      	cbnz	r7, 84afa <_strtod_r+0x8f0>
   84af4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   84af8:	e000      	b.n	84afc <_strtod_r+0x8f2>
   84afa:	460d      	mov	r5, r1
   84afc:	4626      	mov	r6, r4
   84afe:	462f      	mov	r7, r5
   84b00:	4d2b      	ldr	r5, [pc, #172]	; (84bb0 <_strtod_r+0x9a6>)
   84b02:	465b      	mov	r3, fp
   84b04:	482f      	ldr	r0, [pc, #188]	; (84bc4 <_strtod_r+0x9ba>)
   84b06:	401d      	ands	r5, r3
   84b08:	4285      	cmp	r5, r0
   84b0a:	d12c      	bne.n	84b66 <_strtod_r+0x95c>
   84b0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   84b10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84b14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   84b18:	4650      	mov	r0, sl
   84b1a:	4659      	mov	r1, fp
   84b1c:	f003 fc95 	bl	8844a <__ulp>
   84b20:	4602      	mov	r2, r0
   84b22:	460b      	mov	r3, r1
   84b24:	4630      	mov	r0, r6
   84b26:	4639      	mov	r1, r7
   84b28:	f7fe ff9a 	bl	83a60 <__aeabi_dmul>
   84b2c:	460b      	mov	r3, r1
   84b2e:	4602      	mov	r2, r0
   84b30:	4659      	mov	r1, fp
   84b32:	4650      	mov	r0, sl
   84b34:	f7fe fde2 	bl	836fc <__adddf3>
   84b38:	4682      	mov	sl, r0
   84b3a:	481d      	ldr	r0, [pc, #116]	; (84bb0 <_strtod_r+0x9a6>)
   84b3c:	460b      	mov	r3, r1
   84b3e:	4008      	ands	r0, r1
   84b40:	4921      	ldr	r1, [pc, #132]	; (84bc8 <_strtod_r+0x9be>)
   84b42:	4288      	cmp	r0, r1
   84b44:	d90c      	bls.n	84b60 <_strtod_r+0x956>
   84b46:	4821      	ldr	r0, [pc, #132]	; (84bcc <_strtod_r+0x9c2>)
   84b48:	990d      	ldr	r1, [sp, #52]	; 0x34
   84b4a:	4281      	cmp	r1, r0
   84b4c:	d103      	bne.n	84b56 <_strtod_r+0x94c>
   84b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84b50:	3201      	adds	r2, #1
   84b52:	f43f ada3 	beq.w	8469c <_strtod_r+0x492>
   84b56:	f8df b074 	ldr.w	fp, [pc, #116]	; 84bcc <_strtod_r+0x9c2>
   84b5a:	f04f 3aff 	mov.w	sl, #4294967295
   84b5e:	e083      	b.n	84c68 <_strtod_r+0xa5e>
   84b60:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   84b64:	e04b      	b.n	84bfe <_strtod_r+0x9f4>
   84b66:	9904      	ldr	r1, [sp, #16]
   84b68:	2900      	cmp	r1, #0
   84b6a:	d036      	beq.n	84bda <_strtod_r+0x9d0>
   84b6c:	f1b5 6fd4 	cmp.w	r5, #111149056	; 0x6a00000
   84b70:	d833      	bhi.n	84bda <_strtod_r+0x9d0>
   84b72:	4620      	mov	r0, r4
   84b74:	4649      	mov	r1, r9
   84b76:	a30c      	add	r3, pc, #48	; (adr r3, 84ba8 <_strtod_r+0x99e>)
   84b78:	e9d3 2300 	ldrd	r2, r3, [r3]
   84b7c:	f005 fa22 	bl	89fc4 <__aeabi_dcmple>
   84b80:	b340      	cbz	r0, 84bd4 <_strtod_r+0x9ca>
   84b82:	4649      	mov	r1, r9
   84b84:	4620      	mov	r0, r4
   84b86:	f7ff f97d 	bl	83e84 <__aeabi_d2uiz>
   84b8a:	2800      	cmp	r0, #0
   84b8c:	bf08      	it	eq
   84b8e:	2001      	moveq	r0, #1
   84b90:	f7fe fef0 	bl	83974 <__aeabi_ui2d>
   84b94:	4604      	mov	r4, r0
   84b96:	980a      	ldr	r0, [sp, #40]	; 0x28
   84b98:	4689      	mov	r9, r1
   84b9a:	b9c8      	cbnz	r0, 84bd0 <_strtod_r+0x9c6>
   84b9c:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   84ba0:	e017      	b.n	84bd2 <_strtod_r+0x9c8>
   84ba2:	bf00      	nop
   84ba4:	f3af 8000 	nop.w
   84ba8:	ffc00000 	.word	0xffc00000
   84bac:	41dfffff 	.word	0x41dfffff
   84bb0:	7ff00000 	.word	0x7ff00000
   84bb4:	000fffff 	.word	0x000fffff
   84bb8:	3ff00000 	.word	0x3ff00000
   84bbc:	bff00000 	.word	0xbff00000
   84bc0:	3fe00000 	.word	0x3fe00000
   84bc4:	7fe00000 	.word	0x7fe00000
   84bc8:	7c9fffff 	.word	0x7c9fffff
   84bcc:	7fefffff 	.word	0x7fefffff
   84bd0:	460f      	mov	r7, r1
   84bd2:	4626      	mov	r6, r4
   84bd4:	f107 62d6 	add.w	r2, r7, #112197632	; 0x6b00000
   84bd8:	1b57      	subs	r7, r2, r5
   84bda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84bde:	f003 fc34 	bl	8844a <__ulp>
   84be2:	4602      	mov	r2, r0
   84be4:	460b      	mov	r3, r1
   84be6:	4630      	mov	r0, r6
   84be8:	4639      	mov	r1, r7
   84bea:	f7fe ff39 	bl	83a60 <__aeabi_dmul>
   84bee:	4602      	mov	r2, r0
   84bf0:	460b      	mov	r3, r1
   84bf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84bf6:	f7fe fd81 	bl	836fc <__adddf3>
   84bfa:	4682      	mov	sl, r0
   84bfc:	468b      	mov	fp, r1
   84bfe:	9b04      	ldr	r3, [sp, #16]
   84c00:	465e      	mov	r6, fp
   84c02:	2b00      	cmp	r3, #0
   84c04:	d130      	bne.n	84c68 <_strtod_r+0xa5e>
   84c06:	4a42      	ldr	r2, [pc, #264]	; (84d10 <_strtod_r+0xb06>)
   84c08:	4032      	ands	r2, r6
   84c0a:	4295      	cmp	r5, r2
   84c0c:	d12c      	bne.n	84c68 <_strtod_r+0xa5e>
   84c0e:	4620      	mov	r0, r4
   84c10:	4649      	mov	r1, r9
   84c12:	f005 f9f5 	bl	8a000 <__aeabi_d2iz>
   84c16:	f7fe febd 	bl	83994 <__aeabi_i2d>
   84c1a:	460b      	mov	r3, r1
   84c1c:	4602      	mov	r2, r0
   84c1e:	4649      	mov	r1, r9
   84c20:	4620      	mov	r0, r4
   84c22:	f7fe fd69 	bl	836f8 <__aeabi_dsub>
   84c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84c28:	4604      	mov	r4, r0
   84c2a:	460d      	mov	r5, r1
   84c2c:	b92b      	cbnz	r3, 84c3a <_strtod_r+0xa30>
   84c2e:	f1ba 0f00 	cmp.w	sl, #0
   84c32:	d102      	bne.n	84c3a <_strtod_r+0xa30>
   84c34:	f3cb 0613 	ubfx	r6, fp, #0, #20
   84c38:	b186      	cbz	r6, 84c5c <_strtod_r+0xa52>
   84c3a:	4620      	mov	r0, r4
   84c3c:	4629      	mov	r1, r5
   84c3e:	a32e      	add	r3, pc, #184	; (adr r3, 84cf8 <_strtod_r+0xaee>)
   84c40:	e9d3 2300 	ldrd	r2, r3, [r3]
   84c44:	f005 f9b4 	bl	89fb0 <__aeabi_dcmplt>
   84c48:	2800      	cmp	r0, #0
   84c4a:	d131      	bne.n	84cb0 <_strtod_r+0xaa6>
   84c4c:	4620      	mov	r0, r4
   84c4e:	4629      	mov	r1, r5
   84c50:	a32b      	add	r3, pc, #172	; (adr r3, 84d00 <_strtod_r+0xaf6>)
   84c52:	e9d3 2300 	ldrd	r2, r3, [r3]
   84c56:	f005 f9c9 	bl	89fec <__aeabi_dcmpgt>
   84c5a:	e004      	b.n	84c66 <_strtod_r+0xa5c>
   84c5c:	a32a      	add	r3, pc, #168	; (adr r3, 84d08 <_strtod_r+0xafe>)
   84c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   84c62:	f005 f9a5 	bl	89fb0 <__aeabi_dcmplt>
   84c66:	bb18      	cbnz	r0, 84cb0 <_strtod_r+0xaa6>
   84c68:	9802      	ldr	r0, [sp, #8]
   84c6a:	9912      	ldr	r1, [sp, #72]	; 0x48
   84c6c:	f003 f96a 	bl	87f44 <_Bfree>
   84c70:	9802      	ldr	r0, [sp, #8]
   84c72:	9906      	ldr	r1, [sp, #24]
   84c74:	f003 f966 	bl	87f44 <_Bfree>
   84c78:	9802      	ldr	r0, [sp, #8]
   84c7a:	9903      	ldr	r1, [sp, #12]
   84c7c:	f003 f962 	bl	87f44 <_Bfree>
   84c80:	9802      	ldr	r0, [sp, #8]
   84c82:	4641      	mov	r1, r8
   84c84:	f003 f95e 	bl	87f44 <_Bfree>
   84c88:	e5c3      	b.n	84812 <_strtod_r+0x608>
   84c8a:	9a04      	ldr	r2, [sp, #16]
   84c8c:	b182      	cbz	r2, 84cb0 <_strtod_r+0xaa6>
   84c8e:	4b21      	ldr	r3, [pc, #132]	; (84d14 <_strtod_r+0xb0a>)
   84c90:	2100      	movs	r1, #0
   84c92:	910c      	str	r1, [sp, #48]	; 0x30
   84c94:	930d      	str	r3, [sp, #52]	; 0x34
   84c96:	4650      	mov	r0, sl
   84c98:	4659      	mov	r1, fp
   84c9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   84c9e:	f7fe fedf 	bl	83a60 <__aeabi_dmul>
   84ca2:	4682      	mov	sl, r0
   84ca4:	468b      	mov	fp, r1
   84ca6:	b919      	cbnz	r1, 84cb0 <_strtod_r+0xaa6>
   84ca8:	b910      	cbnz	r0, 84cb0 <_strtod_r+0xaa6>
   84caa:	9c02      	ldr	r4, [sp, #8]
   84cac:	2022      	movs	r0, #34	; 0x22
   84cae:	6020      	str	r0, [r4, #0]
   84cb0:	9802      	ldr	r0, [sp, #8]
   84cb2:	9912      	ldr	r1, [sp, #72]	; 0x48
   84cb4:	f003 f946 	bl	87f44 <_Bfree>
   84cb8:	9802      	ldr	r0, [sp, #8]
   84cba:	9906      	ldr	r1, [sp, #24]
   84cbc:	f003 f942 	bl	87f44 <_Bfree>
   84cc0:	9802      	ldr	r0, [sp, #8]
   84cc2:	9903      	ldr	r1, [sp, #12]
   84cc4:	f003 f93e 	bl	87f44 <_Bfree>
   84cc8:	9802      	ldr	r0, [sp, #8]
   84cca:	9907      	ldr	r1, [sp, #28]
   84ccc:	f003 f93a 	bl	87f44 <_Bfree>
   84cd0:	9802      	ldr	r0, [sp, #8]
   84cd2:	4641      	mov	r1, r8
   84cd4:	f003 f936 	bl	87f44 <_Bfree>
   84cd8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   84cda:	b108      	cbz	r0, 84ce0 <_strtod_r+0xad6>
   84cdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84cde:	6002      	str	r2, [r0, #0]
   84ce0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84ce2:	4651      	mov	r1, sl
   84ce4:	b114      	cbz	r4, 84cec <_strtod_r+0xae2>
   84ce6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   84cea:	e000      	b.n	84cee <_strtod_r+0xae4>
   84cec:	465b      	mov	r3, fp
   84cee:	4608      	mov	r0, r1
   84cf0:	4619      	mov	r1, r3
   84cf2:	b017      	add	sp, #92	; 0x5c
   84cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84cf8:	94a03595 	.word	0x94a03595
   84cfc:	3fdfffff 	.word	0x3fdfffff
   84d00:	35afe535 	.word	0x35afe535
   84d04:	3fe00000 	.word	0x3fe00000
   84d08:	94a03595 	.word	0x94a03595
   84d0c:	3fcfffff 	.word	0x3fcfffff
   84d10:	7ff00000 	.word	0x7ff00000
   84d14:	39500000 	.word	0x39500000

00084d18 <strtod>:
   84d18:	460a      	mov	r2, r1
   84d1a:	4903      	ldr	r1, [pc, #12]	; (84d28 <strtod+0x10>)
   84d1c:	4603      	mov	r3, r0
   84d1e:	6808      	ldr	r0, [r1, #0]
   84d20:	4619      	mov	r1, r3
   84d22:	f7ff ba72 	b.w	8420a <_strtod_r>
   84d26:	bf00      	nop
   84d28:	20070010 	.word	0x20070010

00084d2c <strtof>:
   84d2c:	460a      	mov	r2, r1
   84d2e:	490a      	ldr	r1, [pc, #40]	; (84d58 <strtof+0x2c>)
   84d30:	b538      	push	{r3, r4, r5, lr}
   84d32:	4603      	mov	r3, r0
   84d34:	6808      	ldr	r0, [r1, #0]
   84d36:	4619      	mov	r1, r3
   84d38:	f7ff fa67 	bl	8420a <_strtod_r>
   84d3c:	4604      	mov	r4, r0
   84d3e:	460d      	mov	r5, r1
   84d40:	f003 feba 	bl	88ab8 <__fpclassifyd>
   84d44:	b918      	cbnz	r0, 84d4e <strtof+0x22>
   84d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84d4a:	f003 bf27 	b.w	88b9c <nanf>
   84d4e:	4620      	mov	r0, r4
   84d50:	4629      	mov	r1, r5
   84d52:	f005 f97d 	bl	8a050 <__aeabi_d2f>
   84d56:	bd38      	pop	{r3, r4, r5, pc}
   84d58:	20070010 	.word	0x20070010
   84d5c:	f3af 8000 	nop.w

00084d60 <_svfprintf_r>:
   84d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84d64:	461e      	mov	r6, r3
   84d66:	898b      	ldrh	r3, [r1, #12]
   84d68:	4689      	mov	r9, r1
   84d6a:	f003 0180 	and.w	r1, r3, #128	; 0x80
   84d6e:	4614      	mov	r4, r2
   84d70:	b20a      	sxth	r2, r1
   84d72:	b0a9      	sub	sp, #164	; 0xa4
   84d74:	4683      	mov	fp, r0
   84d76:	b19a      	cbz	r2, 84da0 <_svfprintf_r+0x40>
   84d78:	f8d9 3010 	ldr.w	r3, [r9, #16]
   84d7c:	b983      	cbnz	r3, 84da0 <_svfprintf_r+0x40>
   84d7e:	2140      	movs	r1, #64	; 0x40
   84d80:	f002 fe2e 	bl	879e0 <_malloc_r>
   84d84:	f8c9 0000 	str.w	r0, [r9]
   84d88:	f8c9 0010 	str.w	r0, [r9, #16]
   84d8c:	b928      	cbnz	r0, 84d9a <_svfprintf_r+0x3a>
   84d8e:	220c      	movs	r2, #12
   84d90:	f8cb 2000 	str.w	r2, [fp]
   84d94:	f04f 30ff 	mov.w	r0, #4294967295
   84d98:	e3da      	b.n	85550 <_svfprintf_r+0x7f0>
   84d9a:	2040      	movs	r0, #64	; 0x40
   84d9c:	f8c9 0014 	str.w	r0, [r9, #20]
   84da0:	2100      	movs	r1, #0
   84da2:	ad18      	add	r5, sp, #96	; 0x60
   84da4:	950b      	str	r5, [sp, #44]	; 0x2c
   84da6:	910d      	str	r1, [sp, #52]	; 0x34
   84da8:	910c      	str	r1, [sp, #48]	; 0x30
   84daa:	9401      	str	r4, [sp, #4]
   84dac:	9105      	str	r1, [sp, #20]
   84dae:	9104      	str	r1, [sp, #16]
   84db0:	46a8      	mov	r8, r5
   84db2:	9b01      	ldr	r3, [sp, #4]
   84db4:	461c      	mov	r4, r3
   84db6:	f813 2b01 	ldrb.w	r2, [r3], #1
   84dba:	b91a      	cbnz	r2, 84dc4 <_svfprintf_r+0x64>
   84dbc:	9801      	ldr	r0, [sp, #4]
   84dbe:	1a25      	subs	r5, r4, r0
   84dc0:	d103      	bne.n	84dca <_svfprintf_r+0x6a>
   84dc2:	e01d      	b.n	84e00 <_svfprintf_r+0xa0>
   84dc4:	2a25      	cmp	r2, #37	; 0x25
   84dc6:	d1f5      	bne.n	84db4 <_svfprintf_r+0x54>
   84dc8:	e7f8      	b.n	84dbc <_svfprintf_r+0x5c>
   84dca:	9a01      	ldr	r2, [sp, #4]
   84dcc:	990d      	ldr	r1, [sp, #52]	; 0x34
   84dce:	e888 0024 	stmia.w	r8, {r2, r5}
   84dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84dd4:	194b      	adds	r3, r1, r5
   84dd6:	1c50      	adds	r0, r2, #1
   84dd8:	2807      	cmp	r0, #7
   84dda:	930d      	str	r3, [sp, #52]	; 0x34
   84ddc:	900c      	str	r0, [sp, #48]	; 0x30
   84dde:	dc02      	bgt.n	84de6 <_svfprintf_r+0x86>
   84de0:	f108 0808 	add.w	r8, r8, #8
   84de4:	e009      	b.n	84dfa <_svfprintf_r+0x9a>
   84de6:	4658      	mov	r0, fp
   84de8:	4649      	mov	r1, r9
   84dea:	aa0b      	add	r2, sp, #44	; 0x2c
   84dec:	f004 f9c4 	bl	89178 <__ssprint_r>
   84df0:	2800      	cmp	r0, #0
   84df2:	f040 83a2 	bne.w	8553a <_svfprintf_r+0x7da>
   84df6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84dfa:	9904      	ldr	r1, [sp, #16]
   84dfc:	194b      	adds	r3, r1, r5
   84dfe:	9304      	str	r3, [sp, #16]
   84e00:	7822      	ldrb	r2, [r4, #0]
   84e02:	2a00      	cmp	r2, #0
   84e04:	f000 8392 	beq.w	8552c <_svfprintf_r+0x7cc>
   84e08:	2200      	movs	r2, #0
   84e0a:	3401      	adds	r4, #1
   84e0c:	9401      	str	r4, [sp, #4]
   84e0e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84e12:	f04f 3cff 	mov.w	ip, #4294967295
   84e16:	9203      	str	r2, [sp, #12]
   84e18:	4617      	mov	r7, r2
   84e1a:	9801      	ldr	r0, [sp, #4]
   84e1c:	f810 3b01 	ldrb.w	r3, [r0], #1
   84e20:	9001      	str	r0, [sp, #4]
   84e22:	2b63      	cmp	r3, #99	; 0x63
   84e24:	f000 80b3 	beq.w	84f8e <_svfprintf_r+0x22e>
   84e28:	dc33      	bgt.n	84e92 <_svfprintf_r+0x132>
   84e2a:	2b39      	cmp	r3, #57	; 0x39
   84e2c:	dc1a      	bgt.n	84e64 <_svfprintf_r+0x104>
   84e2e:	2b31      	cmp	r3, #49	; 0x31
   84e30:	f280 8091 	bge.w	84f56 <_svfprintf_r+0x1f6>
   84e34:	2b2b      	cmp	r3, #43	; 0x2b
   84e36:	d101      	bne.n	84e3c <_svfprintf_r+0xdc>
   84e38:	461a      	mov	r2, r3
   84e3a:	e7ee      	b.n	84e1a <_svfprintf_r+0xba>
   84e3c:	dc0a      	bgt.n	84e54 <_svfprintf_r+0xf4>
   84e3e:	2b23      	cmp	r3, #35	; 0x23
   84e40:	d055      	beq.n	84eee <_svfprintf_r+0x18e>
   84e42:	2b2a      	cmp	r3, #42	; 0x2a
   84e44:	d056      	beq.n	84ef4 <_svfprintf_r+0x194>
   84e46:	2b20      	cmp	r3, #32
   84e48:	f040 81f5 	bne.w	85236 <_svfprintf_r+0x4d6>
   84e4c:	2a00      	cmp	r2, #0
   84e4e:	bf08      	it	eq
   84e50:	2220      	moveq	r2, #32
   84e52:	e7e2      	b.n	84e1a <_svfprintf_r+0xba>
   84e54:	2b2e      	cmp	r3, #46	; 0x2e
   84e56:	d058      	beq.n	84f0a <_svfprintf_r+0x1aa>
   84e58:	2b30      	cmp	r3, #48	; 0x30
   84e5a:	d079      	beq.n	84f50 <_svfprintf_r+0x1f0>
   84e5c:	2b2d      	cmp	r3, #45	; 0x2d
   84e5e:	f040 81ea 	bne.w	85236 <_svfprintf_r+0x4d6>
   84e62:	e04f      	b.n	84f04 <_svfprintf_r+0x1a4>
   84e64:	2b4f      	cmp	r3, #79	; 0x4f
   84e66:	f000 80de 	beq.w	85026 <_svfprintf_r+0x2c6>
   84e6a:	dc07      	bgt.n	84e7c <_svfprintf_r+0x11c>
   84e6c:	2b44      	cmp	r3, #68	; 0x44
   84e6e:	f040 81e2 	bne.w	85236 <_svfprintf_r+0x4d6>
   84e72:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84e76:	f047 0710 	orr.w	r7, r7, #16
   84e7a:	e090      	b.n	84f9e <_svfprintf_r+0x23e>
   84e7c:	2b55      	cmp	r3, #85	; 0x55
   84e7e:	f000 811f 	beq.w	850c0 <_svfprintf_r+0x360>
   84e82:	2b58      	cmp	r3, #88	; 0x58
   84e84:	f040 81d7 	bne.w	85236 <_svfprintf_r+0x4d6>
   84e88:	4dae      	ldr	r5, [pc, #696]	; (85144 <_svfprintf_r+0x3e4>)
   84e8a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84e8e:	9505      	str	r5, [sp, #20]
   84e90:	e130      	b.n	850f4 <_svfprintf_r+0x394>
   84e92:	2b6f      	cmp	r3, #111	; 0x6f
   84e94:	f000 80c9 	beq.w	8502a <_svfprintf_r+0x2ca>
   84e98:	dc10      	bgt.n	84ebc <_svfprintf_r+0x15c>
   84e9a:	2b69      	cmp	r3, #105	; 0x69
   84e9c:	d024      	beq.n	84ee8 <_svfprintf_r+0x188>
   84e9e:	dc07      	bgt.n	84eb0 <_svfprintf_r+0x150>
   84ea0:	2b64      	cmp	r3, #100	; 0x64
   84ea2:	d021      	beq.n	84ee8 <_svfprintf_r+0x188>
   84ea4:	2b68      	cmp	r3, #104	; 0x68
   84ea6:	f040 81c6 	bne.w	85236 <_svfprintf_r+0x4d6>
   84eaa:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   84eae:	e7b4      	b.n	84e1a <_svfprintf_r+0xba>
   84eb0:	2b6c      	cmp	r3, #108	; 0x6c
   84eb2:	d05f      	beq.n	84f74 <_svfprintf_r+0x214>
   84eb4:	2b6e      	cmp	r3, #110	; 0x6e
   84eb6:	f040 81be 	bne.w	85236 <_svfprintf_r+0x4d6>
   84eba:	e096      	b.n	84fea <_svfprintf_r+0x28a>
   84ebc:	2b73      	cmp	r3, #115	; 0x73
   84ebe:	f000 80df 	beq.w	85080 <_svfprintf_r+0x320>
   84ec2:	dc06      	bgt.n	84ed2 <_svfprintf_r+0x172>
   84ec4:	2b70      	cmp	r3, #112	; 0x70
   84ec6:	f000 80cd 	beq.w	85064 <_svfprintf_r+0x304>
   84eca:	2b71      	cmp	r3, #113	; 0x71
   84ecc:	f040 81b3 	bne.w	85236 <_svfprintf_r+0x4d6>
   84ed0:	e05a      	b.n	84f88 <_svfprintf_r+0x228>
   84ed2:	2b75      	cmp	r3, #117	; 0x75
   84ed4:	f000 80f6 	beq.w	850c4 <_svfprintf_r+0x364>
   84ed8:	2b78      	cmp	r3, #120	; 0x78
   84eda:	f040 81ac 	bne.w	85236 <_svfprintf_r+0x4d6>
   84ede:	4d9a      	ldr	r5, [pc, #616]	; (85148 <_svfprintf_r+0x3e8>)
   84ee0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84ee4:	9505      	str	r5, [sp, #20]
   84ee6:	e105      	b.n	850f4 <_svfprintf_r+0x394>
   84ee8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84eec:	e057      	b.n	84f9e <_svfprintf_r+0x23e>
   84eee:	f047 0701 	orr.w	r7, r7, #1
   84ef2:	e792      	b.n	84e1a <_svfprintf_r+0xba>
   84ef4:	1d33      	adds	r3, r6, #4
   84ef6:	6836      	ldr	r6, [r6, #0]
   84ef8:	2e00      	cmp	r6, #0
   84efa:	9603      	str	r6, [sp, #12]
   84efc:	da15      	bge.n	84f2a <_svfprintf_r+0x1ca>
   84efe:	4270      	negs	r0, r6
   84f00:	9003      	str	r0, [sp, #12]
   84f02:	461e      	mov	r6, r3
   84f04:	f047 0704 	orr.w	r7, r7, #4
   84f08:	e787      	b.n	84e1a <_svfprintf_r+0xba>
   84f0a:	9901      	ldr	r1, [sp, #4]
   84f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
   84f10:	2b2a      	cmp	r3, #42	; 0x2a
   84f12:	9101      	str	r1, [sp, #4]
   84f14:	d10b      	bne.n	84f2e <_svfprintf_r+0x1ce>
   84f16:	f8d6 c000 	ldr.w	ip, [r6]
   84f1a:	1d33      	adds	r3, r6, #4
   84f1c:	f1bc 0f00 	cmp.w	ip, #0
   84f20:	da03      	bge.n	84f2a <_svfprintf_r+0x1ca>
   84f22:	461e      	mov	r6, r3
   84f24:	f04f 3cff 	mov.w	ip, #4294967295
   84f28:	e777      	b.n	84e1a <_svfprintf_r+0xba>
   84f2a:	461e      	mov	r6, r3
   84f2c:	e775      	b.n	84e1a <_svfprintf_r+0xba>
   84f2e:	f04f 0c00 	mov.w	ip, #0
   84f32:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84f36:	2809      	cmp	r0, #9
   84f38:	d807      	bhi.n	84f4a <_svfprintf_r+0x1ea>
   84f3a:	9901      	ldr	r1, [sp, #4]
   84f3c:	230a      	movs	r3, #10
   84f3e:	fb03 0c0c 	mla	ip, r3, ip, r0
   84f42:	f811 3b01 	ldrb.w	r3, [r1], #1
   84f46:	9101      	str	r1, [sp, #4]
   84f48:	e7f3      	b.n	84f32 <_svfprintf_r+0x1d2>
   84f4a:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   84f4e:	e768      	b.n	84e22 <_svfprintf_r+0xc2>
   84f50:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   84f54:	e761      	b.n	84e1a <_svfprintf_r+0xba>
   84f56:	9801      	ldr	r0, [sp, #4]
   84f58:	2100      	movs	r1, #0
   84f5a:	3b30      	subs	r3, #48	; 0x30
   84f5c:	240a      	movs	r4, #10
   84f5e:	fb04 3101 	mla	r1, r4, r1, r3
   84f62:	f810 3b01 	ldrb.w	r3, [r0], #1
   84f66:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   84f6a:	2c09      	cmp	r4, #9
   84f6c:	9001      	str	r0, [sp, #4]
   84f6e:	d9f4      	bls.n	84f5a <_svfprintf_r+0x1fa>
   84f70:	9103      	str	r1, [sp, #12]
   84f72:	e756      	b.n	84e22 <_svfprintf_r+0xc2>
   84f74:	9901      	ldr	r1, [sp, #4]
   84f76:	780b      	ldrb	r3, [r1, #0]
   84f78:	2b6c      	cmp	r3, #108	; 0x6c
   84f7a:	d102      	bne.n	84f82 <_svfprintf_r+0x222>
   84f7c:	1c48      	adds	r0, r1, #1
   84f7e:	9001      	str	r0, [sp, #4]
   84f80:	e002      	b.n	84f88 <_svfprintf_r+0x228>
   84f82:	f047 0710 	orr.w	r7, r7, #16
   84f86:	e748      	b.n	84e1a <_svfprintf_r+0xba>
   84f88:	f047 0720 	orr.w	r7, r7, #32
   84f8c:	e745      	b.n	84e1a <_svfprintf_r+0xba>
   84f8e:	6832      	ldr	r2, [r6, #0]
   84f90:	2500      	movs	r5, #0
   84f92:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   84f96:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84f9a:	3604      	adds	r6, #4
   84f9c:	e155      	b.n	8524a <_svfprintf_r+0x4ea>
   84f9e:	06ba      	lsls	r2, r7, #26
   84fa0:	d507      	bpl.n	84fb2 <_svfprintf_r+0x252>
   84fa2:	3607      	adds	r6, #7
   84fa4:	f026 0507 	bic.w	r5, r6, #7
   84fa8:	f105 0608 	add.w	r6, r5, #8
   84fac:	e9d5 4500 	ldrd	r4, r5, [r5]
   84fb0:	e00f      	b.n	84fd2 <_svfprintf_r+0x272>
   84fb2:	f017 0f10 	tst.w	r7, #16
   84fb6:	f106 0104 	add.w	r1, r6, #4
   84fba:	d001      	beq.n	84fc0 <_svfprintf_r+0x260>
   84fbc:	6832      	ldr	r2, [r6, #0]
   84fbe:	e005      	b.n	84fcc <_svfprintf_r+0x26c>
   84fc0:	f017 0f40 	tst.w	r7, #64	; 0x40
   84fc4:	6832      	ldr	r2, [r6, #0]
   84fc6:	d001      	beq.n	84fcc <_svfprintf_r+0x26c>
   84fc8:	b214      	sxth	r4, r2
   84fca:	e000      	b.n	84fce <_svfprintf_r+0x26e>
   84fcc:	4614      	mov	r4, r2
   84fce:	17e5      	asrs	r5, r4, #31
   84fd0:	460e      	mov	r6, r1
   84fd2:	2c00      	cmp	r4, #0
   84fd4:	f175 0200 	sbcs.w	r2, r5, #0
   84fd8:	f280 80b8 	bge.w	8514c <_svfprintf_r+0x3ec>
   84fdc:	232d      	movs	r3, #45	; 0x2d
   84fde:	4264      	negs	r4, r4
   84fe0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84fe4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   84fe8:	e0b0      	b.n	8514c <_svfprintf_r+0x3ec>
   84fea:	f017 0f20 	tst.w	r7, #32
   84fee:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84ff2:	f106 0204 	add.w	r2, r6, #4
   84ff6:	d005      	beq.n	85004 <_svfprintf_r+0x2a4>
   84ff8:	9c04      	ldr	r4, [sp, #16]
   84ffa:	6835      	ldr	r5, [r6, #0]
   84ffc:	17e0      	asrs	r0, r4, #31
   84ffe:	602c      	str	r4, [r5, #0]
   85000:	6068      	str	r0, [r5, #4]
   85002:	e004      	b.n	8500e <_svfprintf_r+0x2ae>
   85004:	06fb      	lsls	r3, r7, #27
   85006:	d504      	bpl.n	85012 <_svfprintf_r+0x2b2>
   85008:	6833      	ldr	r3, [r6, #0]
   8500a:	9904      	ldr	r1, [sp, #16]
   8500c:	6019      	str	r1, [r3, #0]
   8500e:	4616      	mov	r6, r2
   85010:	e6cf      	b.n	84db2 <_svfprintf_r+0x52>
   85012:	6830      	ldr	r0, [r6, #0]
   85014:	9c04      	ldr	r4, [sp, #16]
   85016:	f017 0f40 	tst.w	r7, #64	; 0x40
   8501a:	f106 0604 	add.w	r6, r6, #4
   8501e:	bf14      	ite	ne
   85020:	8004      	strhne	r4, [r0, #0]
   85022:	6004      	streq	r4, [r0, #0]
   85024:	e6c5      	b.n	84db2 <_svfprintf_r+0x52>
   85026:	f047 0710 	orr.w	r7, r7, #16
   8502a:	f017 0020 	ands.w	r0, r7, #32
   8502e:	d008      	beq.n	85042 <_svfprintf_r+0x2e2>
   85030:	1df3      	adds	r3, r6, #7
   85032:	f023 0507 	bic.w	r5, r3, #7
   85036:	f105 0608 	add.w	r6, r5, #8
   8503a:	e9d5 4500 	ldrd	r4, r5, [r5]
   8503e:	2000      	movs	r0, #0
   85040:	e07c      	b.n	8513c <_svfprintf_r+0x3dc>
   85042:	f017 0110 	ands.w	r1, r7, #16
   85046:	f106 0204 	add.w	r2, r6, #4
   8504a:	d106      	bne.n	8505a <_svfprintf_r+0x2fa>
   8504c:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   85050:	d003      	beq.n	8505a <_svfprintf_r+0x2fa>
   85052:	8834      	ldrh	r4, [r6, #0]
   85054:	2500      	movs	r5, #0
   85056:	4616      	mov	r6, r2
   85058:	e7f1      	b.n	8503e <_svfprintf_r+0x2de>
   8505a:	6836      	ldr	r6, [r6, #0]
   8505c:	2500      	movs	r5, #0
   8505e:	4634      	mov	r4, r6
   85060:	4616      	mov	r6, r2
   85062:	e06b      	b.n	8513c <_svfprintf_r+0x3dc>
   85064:	4b38      	ldr	r3, [pc, #224]	; (85148 <_svfprintf_r+0x3e8>)
   85066:	2130      	movs	r1, #48	; 0x30
   85068:	2278      	movs	r2, #120	; 0x78
   8506a:	6834      	ldr	r4, [r6, #0]
   8506c:	2500      	movs	r5, #0
   8506e:	f047 0702 	orr.w	r7, r7, #2
   85072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   85076:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8507a:	3604      	adds	r6, #4
   8507c:	9305      	str	r3, [sp, #20]
   8507e:	e05c      	b.n	8513a <_svfprintf_r+0x3da>
   85080:	4631      	mov	r1, r6
   85082:	2500      	movs	r5, #0
   85084:	f8d1 a000 	ldr.w	sl, [r1]
   85088:	3604      	adds	r6, #4
   8508a:	45ac      	cmp	ip, r5
   8508c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   85090:	4650      	mov	r0, sl
   85092:	db11      	blt.n	850b8 <_svfprintf_r+0x358>
   85094:	4662      	mov	r2, ip
   85096:	4629      	mov	r1, r5
   85098:	f8cd c000 	str.w	ip, [sp]
   8509c:	f002 ff02 	bl	87ea4 <memchr>
   850a0:	f8dd c000 	ldr.w	ip, [sp]
   850a4:	2800      	cmp	r0, #0
   850a6:	f000 80d4 	beq.w	85252 <_svfprintf_r+0x4f2>
   850aa:	ebca 0400 	rsb	r4, sl, r0
   850ae:	4564      	cmp	r4, ip
   850b0:	f340 80d1 	ble.w	85256 <_svfprintf_r+0x4f6>
   850b4:	4664      	mov	r4, ip
   850b6:	e0ce      	b.n	85256 <_svfprintf_r+0x4f6>
   850b8:	f7ff f85e 	bl	84178 <strlen>
   850bc:	4604      	mov	r4, r0
   850be:	e0ca      	b.n	85256 <_svfprintf_r+0x4f6>
   850c0:	f047 0710 	orr.w	r7, r7, #16
   850c4:	06bd      	lsls	r5, r7, #26
   850c6:	d506      	bpl.n	850d6 <_svfprintf_r+0x376>
   850c8:	1df0      	adds	r0, r6, #7
   850ca:	f020 0407 	bic.w	r4, r0, #7
   850ce:	f104 0608 	add.w	r6, r4, #8
   850d2:	cc30      	ldmia	r4, {r4, r5}
   850d4:	e00c      	b.n	850f0 <_svfprintf_r+0x390>
   850d6:	f017 0f10 	tst.w	r7, #16
   850da:	f106 0304 	add.w	r3, r6, #4
   850de:	d103      	bne.n	850e8 <_svfprintf_r+0x388>
   850e0:	067c      	lsls	r4, r7, #25
   850e2:	d501      	bpl.n	850e8 <_svfprintf_r+0x388>
   850e4:	8834      	ldrh	r4, [r6, #0]
   850e6:	e001      	b.n	850ec <_svfprintf_r+0x38c>
   850e8:	6835      	ldr	r5, [r6, #0]
   850ea:	462c      	mov	r4, r5
   850ec:	2500      	movs	r5, #0
   850ee:	461e      	mov	r6, r3
   850f0:	2001      	movs	r0, #1
   850f2:	e023      	b.n	8513c <_svfprintf_r+0x3dc>
   850f4:	06b8      	lsls	r0, r7, #26
   850f6:	d507      	bpl.n	85108 <_svfprintf_r+0x3a8>
   850f8:	1df4      	adds	r4, r6, #7
   850fa:	f024 0107 	bic.w	r1, r4, #7
   850fe:	f101 0608 	add.w	r6, r1, #8
   85102:	e9d1 4500 	ldrd	r4, r5, [r1]
   85106:	e00c      	b.n	85122 <_svfprintf_r+0x3c2>
   85108:	f017 0f10 	tst.w	r7, #16
   8510c:	f106 0004 	add.w	r0, r6, #4
   85110:	d103      	bne.n	8511a <_svfprintf_r+0x3ba>
   85112:	0679      	lsls	r1, r7, #25
   85114:	d501      	bpl.n	8511a <_svfprintf_r+0x3ba>
   85116:	8834      	ldrh	r4, [r6, #0]
   85118:	e001      	b.n	8511e <_svfprintf_r+0x3be>
   8511a:	6836      	ldr	r6, [r6, #0]
   8511c:	4634      	mov	r4, r6
   8511e:	2500      	movs	r5, #0
   85120:	4606      	mov	r6, r0
   85122:	07fa      	lsls	r2, r7, #31
   85124:	d509      	bpl.n	8513a <_svfprintf_r+0x3da>
   85126:	ea54 0205 	orrs.w	r2, r4, r5
   8512a:	d006      	beq.n	8513a <_svfprintf_r+0x3da>
   8512c:	2230      	movs	r2, #48	; 0x30
   8512e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   85132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   85136:	f047 0702 	orr.w	r7, r7, #2
   8513a:	2002      	movs	r0, #2
   8513c:	2100      	movs	r1, #0
   8513e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   85142:	e004      	b.n	8514e <_svfprintf_r+0x3ee>
   85144:	0008a7c4 	.word	0x0008a7c4
   85148:	0008a7d5 	.word	0x0008a7d5
   8514c:	2001      	movs	r0, #1
   8514e:	f1bc 0f00 	cmp.w	ip, #0
   85152:	bfa8      	it	ge
   85154:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   85158:	ea54 0105 	orrs.w	r1, r4, r5
   8515c:	d102      	bne.n	85164 <_svfprintf_r+0x404>
   8515e:	f1bc 0f00 	cmp.w	ip, #0
   85162:	d058      	beq.n	85216 <_svfprintf_r+0x4b6>
   85164:	2801      	cmp	r0, #1
   85166:	d01d      	beq.n	851a4 <_svfprintf_r+0x444>
   85168:	2802      	cmp	r0, #2
   8516a:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8516e:	d041      	beq.n	851f4 <_svfprintf_r+0x494>
   85170:	f004 0207 	and.w	r2, r4, #7
   85174:	08e4      	lsrs	r4, r4, #3
   85176:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8517a:	08e9      	lsrs	r1, r5, #3
   8517c:	4604      	mov	r4, r0
   8517e:	460d      	mov	r5, r1
   85180:	3230      	adds	r2, #48	; 0x30
   85182:	ea54 0105 	orrs.w	r1, r4, r5
   85186:	469a      	mov	sl, r3
   85188:	701a      	strb	r2, [r3, #0]
   8518a:	f103 33ff 	add.w	r3, r3, #4294967295
   8518e:	d1ef      	bne.n	85170 <_svfprintf_r+0x410>
   85190:	07f8      	lsls	r0, r7, #31
   85192:	4655      	mov	r5, sl
   85194:	d54a      	bpl.n	8522c <_svfprintf_r+0x4cc>
   85196:	2a30      	cmp	r2, #48	; 0x30
   85198:	d048      	beq.n	8522c <_svfprintf_r+0x4cc>
   8519a:	2230      	movs	r2, #48	; 0x30
   8519c:	469a      	mov	sl, r3
   8519e:	f805 2c01 	strb.w	r2, [r5, #-1]
   851a2:	e043      	b.n	8522c <_svfprintf_r+0x4cc>
   851a4:	2d00      	cmp	r5, #0
   851a6:	bf08      	it	eq
   851a8:	2c0a      	cmpeq	r4, #10
   851aa:	d203      	bcs.n	851b4 <_svfprintf_r+0x454>
   851ac:	3430      	adds	r4, #48	; 0x30
   851ae:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   851b2:	e036      	b.n	85222 <_svfprintf_r+0x4c2>
   851b4:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   851b8:	9302      	str	r3, [sp, #8]
   851ba:	4620      	mov	r0, r4
   851bc:	4629      	mov	r1, r5
   851be:	220a      	movs	r2, #10
   851c0:	2300      	movs	r3, #0
   851c2:	f8cd c000 	str.w	ip, [sp]
   851c6:	f004 ff93 	bl	8a0f0 <__aeabi_uldivmod>
   851ca:	9802      	ldr	r0, [sp, #8]
   851cc:	3230      	adds	r2, #48	; 0x30
   851ce:	f800 2901 	strb.w	r2, [r0], #-1
   851d2:	4629      	mov	r1, r5
   851d4:	220a      	movs	r2, #10
   851d6:	2300      	movs	r3, #0
   851d8:	f8dd a008 	ldr.w	sl, [sp, #8]
   851dc:	9002      	str	r0, [sp, #8]
   851de:	4620      	mov	r0, r4
   851e0:	f004 ff86 	bl	8a0f0 <__aeabi_uldivmod>
   851e4:	4604      	mov	r4, r0
   851e6:	460d      	mov	r5, r1
   851e8:	ea54 0105 	orrs.w	r1, r4, r5
   851ec:	f8dd c000 	ldr.w	ip, [sp]
   851f0:	d1e3      	bne.n	851ba <_svfprintf_r+0x45a>
   851f2:	e01b      	b.n	8522c <_svfprintf_r+0x4cc>
   851f4:	9905      	ldr	r1, [sp, #20]
   851f6:	f004 000f 	and.w	r0, r4, #15
   851fa:	0924      	lsrs	r4, r4, #4
   851fc:	5c0a      	ldrb	r2, [r1, r0]
   851fe:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   85202:	0929      	lsrs	r1, r5, #4
   85204:	4604      	mov	r4, r0
   85206:	460d      	mov	r5, r1
   85208:	469a      	mov	sl, r3
   8520a:	f803 2901 	strb.w	r2, [r3], #-1
   8520e:	ea54 0205 	orrs.w	r2, r4, r5
   85212:	d1ef      	bne.n	851f4 <_svfprintf_r+0x494>
   85214:	e00a      	b.n	8522c <_svfprintf_r+0x4cc>
   85216:	b938      	cbnz	r0, 85228 <_svfprintf_r+0x4c8>
   85218:	07f9      	lsls	r1, r7, #31
   8521a:	d505      	bpl.n	85228 <_svfprintf_r+0x4c8>
   8521c:	2030      	movs	r0, #48	; 0x30
   8521e:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   85222:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   85226:	e001      	b.n	8522c <_svfprintf_r+0x4cc>
   85228:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8522c:	ad18      	add	r5, sp, #96	; 0x60
   8522e:	ebca 0405 	rsb	r4, sl, r5
   85232:	4665      	mov	r5, ip
   85234:	e00f      	b.n	85256 <_svfprintf_r+0x4f6>
   85236:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8523a:	2b00      	cmp	r3, #0
   8523c:	f000 8176 	beq.w	8552c <_svfprintf_r+0x7cc>
   85240:	2500      	movs	r5, #0
   85242:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   85246:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8524a:	2401      	movs	r4, #1
   8524c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   85250:	e001      	b.n	85256 <_svfprintf_r+0x4f6>
   85252:	4664      	mov	r4, ip
   85254:	4605      	mov	r5, r0
   85256:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8525a:	42ac      	cmp	r4, r5
   8525c:	bfac      	ite	ge
   8525e:	4621      	movge	r1, r4
   85260:	4629      	movlt	r1, r5
   85262:	9102      	str	r1, [sp, #8]
   85264:	b113      	cbz	r3, 8526c <_svfprintf_r+0x50c>
   85266:	9802      	ldr	r0, [sp, #8]
   85268:	1c42      	adds	r2, r0, #1
   8526a:	9202      	str	r2, [sp, #8]
   8526c:	f017 0102 	ands.w	r1, r7, #2
   85270:	9106      	str	r1, [sp, #24]
   85272:	d002      	beq.n	8527a <_svfprintf_r+0x51a>
   85274:	9b02      	ldr	r3, [sp, #8]
   85276:	1c98      	adds	r0, r3, #2
   85278:	9002      	str	r0, [sp, #8]
   8527a:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8527e:	9207      	str	r2, [sp, #28]
   85280:	d13c      	bne.n	852fc <_svfprintf_r+0x59c>
   85282:	9903      	ldr	r1, [sp, #12]
   85284:	9b02      	ldr	r3, [sp, #8]
   85286:	1acb      	subs	r3, r1, r3
   85288:	2b00      	cmp	r3, #0
   8528a:	dd37      	ble.n	852fc <_svfprintf_r+0x59c>
   8528c:	48a5      	ldr	r0, [pc, #660]	; (85524 <_svfprintf_r+0x7c4>)
   8528e:	2b10      	cmp	r3, #16
   85290:	f8c8 0000 	str.w	r0, [r8]
   85294:	dd1b      	ble.n	852ce <_svfprintf_r+0x56e>
   85296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85298:	2110      	movs	r1, #16
   8529a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8529c:	f8c8 1004 	str.w	r1, [r8, #4]
   852a0:	1c51      	adds	r1, r2, #1
   852a2:	3010      	adds	r0, #16
   852a4:	2907      	cmp	r1, #7
   852a6:	900d      	str	r0, [sp, #52]	; 0x34
   852a8:	910c      	str	r1, [sp, #48]	; 0x30
   852aa:	dc02      	bgt.n	852b2 <_svfprintf_r+0x552>
   852ac:	f108 0808 	add.w	r8, r8, #8
   852b0:	e00b      	b.n	852ca <_svfprintf_r+0x56a>
   852b2:	4658      	mov	r0, fp
   852b4:	4649      	mov	r1, r9
   852b6:	aa0b      	add	r2, sp, #44	; 0x2c
   852b8:	9300      	str	r3, [sp, #0]
   852ba:	f003 ff5d 	bl	89178 <__ssprint_r>
   852be:	9b00      	ldr	r3, [sp, #0]
   852c0:	2800      	cmp	r0, #0
   852c2:	f040 813a 	bne.w	8553a <_svfprintf_r+0x7da>
   852c6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   852ca:	3b10      	subs	r3, #16
   852cc:	e7de      	b.n	8528c <_svfprintf_r+0x52c>
   852ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   852d0:	f8c8 3004 	str.w	r3, [r8, #4]
   852d4:	18d1      	adds	r1, r2, r3
   852d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   852d8:	910d      	str	r1, [sp, #52]	; 0x34
   852da:	1c58      	adds	r0, r3, #1
   852dc:	2807      	cmp	r0, #7
   852de:	900c      	str	r0, [sp, #48]	; 0x30
   852e0:	dc02      	bgt.n	852e8 <_svfprintf_r+0x588>
   852e2:	f108 0808 	add.w	r8, r8, #8
   852e6:	e009      	b.n	852fc <_svfprintf_r+0x59c>
   852e8:	4658      	mov	r0, fp
   852ea:	4649      	mov	r1, r9
   852ec:	aa0b      	add	r2, sp, #44	; 0x2c
   852ee:	f003 ff43 	bl	89178 <__ssprint_r>
   852f2:	2800      	cmp	r0, #0
   852f4:	f040 8121 	bne.w	8553a <_svfprintf_r+0x7da>
   852f8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   852fc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   85300:	b1da      	cbz	r2, 8533a <_svfprintf_r+0x5da>
   85302:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   85306:	f8c8 1000 	str.w	r1, [r8]
   8530a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8530c:	2301      	movs	r3, #1
   8530e:	980d      	ldr	r0, [sp, #52]	; 0x34
   85310:	f8c8 3004 	str.w	r3, [r8, #4]
   85314:	1c4b      	adds	r3, r1, #1
   85316:	1c42      	adds	r2, r0, #1
   85318:	2b07      	cmp	r3, #7
   8531a:	920d      	str	r2, [sp, #52]	; 0x34
   8531c:	930c      	str	r3, [sp, #48]	; 0x30
   8531e:	dc02      	bgt.n	85326 <_svfprintf_r+0x5c6>
   85320:	f108 0808 	add.w	r8, r8, #8
   85324:	e009      	b.n	8533a <_svfprintf_r+0x5da>
   85326:	4658      	mov	r0, fp
   85328:	4649      	mov	r1, r9
   8532a:	aa0b      	add	r2, sp, #44	; 0x2c
   8532c:	f003 ff24 	bl	89178 <__ssprint_r>
   85330:	2800      	cmp	r0, #0
   85332:	f040 8102 	bne.w	8553a <_svfprintf_r+0x7da>
   85336:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8533a:	9806      	ldr	r0, [sp, #24]
   8533c:	b1d0      	cbz	r0, 85374 <_svfprintf_r+0x614>
   8533e:	aa0a      	add	r2, sp, #40	; 0x28
   85340:	f8c8 2000 	str.w	r2, [r8]
   85344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85346:	2102      	movs	r1, #2
   85348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8534a:	f8c8 1004 	str.w	r1, [r8, #4]
   8534e:	1c51      	adds	r1, r2, #1
   85350:	1c98      	adds	r0, r3, #2
   85352:	2907      	cmp	r1, #7
   85354:	900d      	str	r0, [sp, #52]	; 0x34
   85356:	910c      	str	r1, [sp, #48]	; 0x30
   85358:	dc02      	bgt.n	85360 <_svfprintf_r+0x600>
   8535a:	f108 0808 	add.w	r8, r8, #8
   8535e:	e009      	b.n	85374 <_svfprintf_r+0x614>
   85360:	4658      	mov	r0, fp
   85362:	4649      	mov	r1, r9
   85364:	aa0b      	add	r2, sp, #44	; 0x2c
   85366:	f003 ff07 	bl	89178 <__ssprint_r>
   8536a:	2800      	cmp	r0, #0
   8536c:	f040 80e5 	bne.w	8553a <_svfprintf_r+0x7da>
   85370:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85374:	9b07      	ldr	r3, [sp, #28]
   85376:	2b80      	cmp	r3, #128	; 0x80
   85378:	d13c      	bne.n	853f4 <_svfprintf_r+0x694>
   8537a:	9803      	ldr	r0, [sp, #12]
   8537c:	9a02      	ldr	r2, [sp, #8]
   8537e:	1a83      	subs	r3, r0, r2
   85380:	2b00      	cmp	r3, #0
   85382:	dd37      	ble.n	853f4 <_svfprintf_r+0x694>
   85384:	4968      	ldr	r1, [pc, #416]	; (85528 <_svfprintf_r+0x7c8>)
   85386:	2b10      	cmp	r3, #16
   85388:	f8c8 1000 	str.w	r1, [r8]
   8538c:	dd1b      	ble.n	853c6 <_svfprintf_r+0x666>
   8538e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85390:	2210      	movs	r2, #16
   85392:	990d      	ldr	r1, [sp, #52]	; 0x34
   85394:	f8c8 2004 	str.w	r2, [r8, #4]
   85398:	1c42      	adds	r2, r0, #1
   8539a:	3110      	adds	r1, #16
   8539c:	2a07      	cmp	r2, #7
   8539e:	910d      	str	r1, [sp, #52]	; 0x34
   853a0:	920c      	str	r2, [sp, #48]	; 0x30
   853a2:	dc02      	bgt.n	853aa <_svfprintf_r+0x64a>
   853a4:	f108 0808 	add.w	r8, r8, #8
   853a8:	e00b      	b.n	853c2 <_svfprintf_r+0x662>
   853aa:	4658      	mov	r0, fp
   853ac:	4649      	mov	r1, r9
   853ae:	aa0b      	add	r2, sp, #44	; 0x2c
   853b0:	9300      	str	r3, [sp, #0]
   853b2:	f003 fee1 	bl	89178 <__ssprint_r>
   853b6:	9b00      	ldr	r3, [sp, #0]
   853b8:	2800      	cmp	r0, #0
   853ba:	f040 80be 	bne.w	8553a <_svfprintf_r+0x7da>
   853be:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   853c2:	3b10      	subs	r3, #16
   853c4:	e7de      	b.n	85384 <_svfprintf_r+0x624>
   853c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   853c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   853ca:	1c51      	adds	r1, r2, #1
   853cc:	f8c8 3004 	str.w	r3, [r8, #4]
   853d0:	2907      	cmp	r1, #7
   853d2:	4403      	add	r3, r0
   853d4:	930d      	str	r3, [sp, #52]	; 0x34
   853d6:	910c      	str	r1, [sp, #48]	; 0x30
   853d8:	dc02      	bgt.n	853e0 <_svfprintf_r+0x680>
   853da:	f108 0808 	add.w	r8, r8, #8
   853de:	e009      	b.n	853f4 <_svfprintf_r+0x694>
   853e0:	4658      	mov	r0, fp
   853e2:	4649      	mov	r1, r9
   853e4:	aa0b      	add	r2, sp, #44	; 0x2c
   853e6:	f003 fec7 	bl	89178 <__ssprint_r>
   853ea:	2800      	cmp	r0, #0
   853ec:	f040 80a5 	bne.w	8553a <_svfprintf_r+0x7da>
   853f0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   853f4:	1b2d      	subs	r5, r5, r4
   853f6:	2d00      	cmp	r5, #0
   853f8:	dd34      	ble.n	85464 <_svfprintf_r+0x704>
   853fa:	484b      	ldr	r0, [pc, #300]	; (85528 <_svfprintf_r+0x7c8>)
   853fc:	2d10      	cmp	r5, #16
   853fe:	f8c8 0000 	str.w	r0, [r8]
   85402:	dd19      	ble.n	85438 <_svfprintf_r+0x6d8>
   85404:	980c      	ldr	r0, [sp, #48]	; 0x30
   85406:	990d      	ldr	r1, [sp, #52]	; 0x34
   85408:	1c43      	adds	r3, r0, #1
   8540a:	2210      	movs	r2, #16
   8540c:	3110      	adds	r1, #16
   8540e:	2b07      	cmp	r3, #7
   85410:	f8c8 2004 	str.w	r2, [r8, #4]
   85414:	910d      	str	r1, [sp, #52]	; 0x34
   85416:	930c      	str	r3, [sp, #48]	; 0x30
   85418:	dc02      	bgt.n	85420 <_svfprintf_r+0x6c0>
   8541a:	f108 0808 	add.w	r8, r8, #8
   8541e:	e009      	b.n	85434 <_svfprintf_r+0x6d4>
   85420:	4658      	mov	r0, fp
   85422:	4649      	mov	r1, r9
   85424:	aa0b      	add	r2, sp, #44	; 0x2c
   85426:	f003 fea7 	bl	89178 <__ssprint_r>
   8542a:	2800      	cmp	r0, #0
   8542c:	f040 8085 	bne.w	8553a <_svfprintf_r+0x7da>
   85430:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85434:	3d10      	subs	r5, #16
   85436:	e7e0      	b.n	853fa <_svfprintf_r+0x69a>
   85438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8543a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8543c:	1c51      	adds	r1, r2, #1
   8543e:	f8c8 5004 	str.w	r5, [r8, #4]
   85442:	2907      	cmp	r1, #7
   85444:	441d      	add	r5, r3
   85446:	950d      	str	r5, [sp, #52]	; 0x34
   85448:	910c      	str	r1, [sp, #48]	; 0x30
   8544a:	dc02      	bgt.n	85452 <_svfprintf_r+0x6f2>
   8544c:	f108 0808 	add.w	r8, r8, #8
   85450:	e008      	b.n	85464 <_svfprintf_r+0x704>
   85452:	4658      	mov	r0, fp
   85454:	4649      	mov	r1, r9
   85456:	aa0b      	add	r2, sp, #44	; 0x2c
   85458:	f003 fe8e 	bl	89178 <__ssprint_r>
   8545c:	2800      	cmp	r0, #0
   8545e:	d16c      	bne.n	8553a <_svfprintf_r+0x7da>
   85460:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85466:	980d      	ldr	r0, [sp, #52]	; 0x34
   85468:	1c5a      	adds	r2, r3, #1
   8546a:	f8c8 4004 	str.w	r4, [r8, #4]
   8546e:	2a07      	cmp	r2, #7
   85470:	4404      	add	r4, r0
   85472:	f8c8 a000 	str.w	sl, [r8]
   85476:	940d      	str	r4, [sp, #52]	; 0x34
   85478:	920c      	str	r2, [sp, #48]	; 0x30
   8547a:	dc02      	bgt.n	85482 <_svfprintf_r+0x722>
   8547c:	f108 0308 	add.w	r3, r8, #8
   85480:	e007      	b.n	85492 <_svfprintf_r+0x732>
   85482:	4658      	mov	r0, fp
   85484:	4649      	mov	r1, r9
   85486:	aa0b      	add	r2, sp, #44	; 0x2c
   85488:	f003 fe76 	bl	89178 <__ssprint_r>
   8548c:	2800      	cmp	r0, #0
   8548e:	d154      	bne.n	8553a <_svfprintf_r+0x7da>
   85490:	ab18      	add	r3, sp, #96	; 0x60
   85492:	077a      	lsls	r2, r7, #29
   85494:	d40b      	bmi.n	854ae <_svfprintf_r+0x74e>
   85496:	9804      	ldr	r0, [sp, #16]
   85498:	9b02      	ldr	r3, [sp, #8]
   8549a:	9a03      	ldr	r2, [sp, #12]
   8549c:	990d      	ldr	r1, [sp, #52]	; 0x34
   8549e:	4293      	cmp	r3, r2
   854a0:	bfac      	ite	ge
   854a2:	18c0      	addge	r0, r0, r3
   854a4:	1880      	addlt	r0, r0, r2
   854a6:	9004      	str	r0, [sp, #16]
   854a8:	2900      	cmp	r1, #0
   854aa:	d036      	beq.n	8551a <_svfprintf_r+0x7ba>
   854ac:	e02f      	b.n	8550e <_svfprintf_r+0x7ae>
   854ae:	9c03      	ldr	r4, [sp, #12]
   854b0:	9902      	ldr	r1, [sp, #8]
   854b2:	1a64      	subs	r4, r4, r1
   854b4:	2c00      	cmp	r4, #0
   854b6:	ddee      	ble.n	85496 <_svfprintf_r+0x736>
   854b8:	481a      	ldr	r0, [pc, #104]	; (85524 <_svfprintf_r+0x7c4>)
   854ba:	2c10      	cmp	r4, #16
   854bc:	6018      	str	r0, [r3, #0]
   854be:	dd15      	ble.n	854ec <_svfprintf_r+0x78c>
   854c0:	990c      	ldr	r1, [sp, #48]	; 0x30
   854c2:	2010      	movs	r0, #16
   854c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   854c6:	6058      	str	r0, [r3, #4]
   854c8:	1c48      	adds	r0, r1, #1
   854ca:	3210      	adds	r2, #16
   854cc:	2807      	cmp	r0, #7
   854ce:	920d      	str	r2, [sp, #52]	; 0x34
   854d0:	900c      	str	r0, [sp, #48]	; 0x30
   854d2:	dc01      	bgt.n	854d8 <_svfprintf_r+0x778>
   854d4:	3308      	adds	r3, #8
   854d6:	e007      	b.n	854e8 <_svfprintf_r+0x788>
   854d8:	4658      	mov	r0, fp
   854da:	4649      	mov	r1, r9
   854dc:	aa0b      	add	r2, sp, #44	; 0x2c
   854de:	f003 fe4b 	bl	89178 <__ssprint_r>
   854e2:	2800      	cmp	r0, #0
   854e4:	d129      	bne.n	8553a <_svfprintf_r+0x7da>
   854e6:	ab18      	add	r3, sp, #96	; 0x60
   854e8:	3c10      	subs	r4, #16
   854ea:	e7e5      	b.n	854b8 <_svfprintf_r+0x758>
   854ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   854ee:	605c      	str	r4, [r3, #4]
   854f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   854f2:	1c51      	adds	r1, r2, #1
   854f4:	191c      	adds	r4, r3, r4
   854f6:	2907      	cmp	r1, #7
   854f8:	940d      	str	r4, [sp, #52]	; 0x34
   854fa:	910c      	str	r1, [sp, #48]	; 0x30
   854fc:	ddcb      	ble.n	85496 <_svfprintf_r+0x736>
   854fe:	4658      	mov	r0, fp
   85500:	4649      	mov	r1, r9
   85502:	aa0b      	add	r2, sp, #44	; 0x2c
   85504:	f003 fe38 	bl	89178 <__ssprint_r>
   85508:	2800      	cmp	r0, #0
   8550a:	d0c4      	beq.n	85496 <_svfprintf_r+0x736>
   8550c:	e015      	b.n	8553a <_svfprintf_r+0x7da>
   8550e:	4658      	mov	r0, fp
   85510:	4649      	mov	r1, r9
   85512:	aa0b      	add	r2, sp, #44	; 0x2c
   85514:	f003 fe30 	bl	89178 <__ssprint_r>
   85518:	b978      	cbnz	r0, 8553a <_svfprintf_r+0x7da>
   8551a:	2500      	movs	r5, #0
   8551c:	950c      	str	r5, [sp, #48]	; 0x30
   8551e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85522:	e446      	b.n	84db2 <_svfprintf_r+0x52>
   85524:	0008a7a4 	.word	0x0008a7a4
   85528:	0008a7b4 	.word	0x0008a7b4
   8552c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8552e:	b120      	cbz	r0, 8553a <_svfprintf_r+0x7da>
   85530:	4658      	mov	r0, fp
   85532:	4649      	mov	r1, r9
   85534:	aa0b      	add	r2, sp, #44	; 0x2c
   85536:	f003 fe1f 	bl	89178 <__ssprint_r>
   8553a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8553e:	9b04      	ldr	r3, [sp, #16]
   85540:	f002 0140 	and.w	r1, r2, #64	; 0x40
   85544:	b208      	sxth	r0, r1
   85546:	2800      	cmp	r0, #0
   85548:	bf18      	it	ne
   8554a:	f04f 33ff 	movne.w	r3, #4294967295
   8554e:	4618      	mov	r0, r3
   85550:	b029      	add	sp, #164	; 0xa4
   85552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85556:	bf00      	nop

00085558 <__sprint_r>:
   85558:	6893      	ldr	r3, [r2, #8]
   8555a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8555e:	4681      	mov	r9, r0
   85560:	460f      	mov	r7, r1
   85562:	4614      	mov	r4, r2
   85564:	b91b      	cbnz	r3, 8556e <__sprint_r+0x16>
   85566:	6053      	str	r3, [r2, #4]
   85568:	4618      	mov	r0, r3
   8556a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8556e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   85570:	049b      	lsls	r3, r3, #18
   85572:	d51e      	bpl.n	855b2 <__sprint_r+0x5a>
   85574:	6815      	ldr	r5, [r2, #0]
   85576:	68a0      	ldr	r0, [r4, #8]
   85578:	3508      	adds	r5, #8
   8557a:	b1c8      	cbz	r0, 855b0 <__sprint_r+0x58>
   8557c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   85580:	f855 ac08 	ldr.w	sl, [r5, #-8]
   85584:	ea4f 0891 	mov.w	r8, r1, lsr #2
   85588:	2600      	movs	r6, #0
   8558a:	4546      	cmp	r6, r8
   8558c:	da09      	bge.n	855a2 <__sprint_r+0x4a>
   8558e:	4648      	mov	r0, r9
   85590:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   85594:	463a      	mov	r2, r7
   85596:	f001 faa5 	bl	86ae4 <_fputwc_r>
   8559a:	1c43      	adds	r3, r0, #1
   8559c:	d00b      	beq.n	855b6 <__sprint_r+0x5e>
   8559e:	3601      	adds	r6, #1
   855a0:	e7f3      	b.n	8558a <__sprint_r+0x32>
   855a2:	68a2      	ldr	r2, [r4, #8]
   855a4:	ea4f 0888 	mov.w	r8, r8, lsl #2
   855a8:	ebc8 0302 	rsb	r3, r8, r2
   855ac:	60a3      	str	r3, [r4, #8]
   855ae:	e7e2      	b.n	85576 <__sprint_r+0x1e>
   855b0:	e001      	b.n	855b6 <__sprint_r+0x5e>
   855b2:	f001 fc6d 	bl	86e90 <__sfvwrite_r>
   855b6:	2100      	movs	r1, #0
   855b8:	60a1      	str	r1, [r4, #8]
   855ba:	6061      	str	r1, [r4, #4]
   855bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000855c0 <_vfiprintf_r>:
   855c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855c4:	4689      	mov	r9, r1
   855c6:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
   855ca:	4614      	mov	r4, r2
   855cc:	461e      	mov	r6, r3
   855ce:	4683      	mov	fp, r0
   855d0:	b118      	cbz	r0, 855da <_vfiprintf_r+0x1a>
   855d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   855d4:	b90b      	cbnz	r3, 855da <_vfiprintf_r+0x1a>
   855d6:	f001 fa09 	bl	869ec <__sinit>
   855da:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   855de:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   855e2:	b211      	sxth	r1, r2
   855e4:	b949      	cbnz	r1, 855fa <_vfiprintf_r+0x3a>
   855e6:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   855ea:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   855ee:	f8a9 300c 	strh.w	r3, [r9, #12]
   855f2:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   855f6:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   855fa:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   855fe:	f001 0308 	and.w	r3, r1, #8
   85602:	b218      	sxth	r0, r3
   85604:	b148      	cbz	r0, 8561a <_vfiprintf_r+0x5a>
   85606:	f8d9 2010 	ldr.w	r2, [r9, #16]
   8560a:	b132      	cbz	r2, 8561a <_vfiprintf_r+0x5a>
   8560c:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   85610:	f000 011a 	and.w	r1, r0, #26
   85614:	290a      	cmp	r1, #10
   85616:	d149      	bne.n	856ac <_vfiprintf_r+0xec>
   85618:	e00a      	b.n	85630 <_vfiprintf_r+0x70>
   8561a:	4658      	mov	r0, fp
   8561c:	4649      	mov	r1, r9
   8561e:	f001 f83f 	bl	866a0 <__swsetup_r>
   85622:	2800      	cmp	r0, #0
   85624:	d0f2      	beq.n	8560c <_vfiprintf_r+0x4c>
   85626:	f04f 31ff 	mov.w	r1, #4294967295
   8562a:	9102      	str	r1, [sp, #8]
   8562c:	f000 bc15 	b.w	85e5a <_vfiprintf_r+0x89a>
   85630:	f8b9 300e 	ldrh.w	r3, [r9, #14]
   85634:	0419      	lsls	r1, r3, #16
   85636:	d439      	bmi.n	856ac <_vfiprintf_r+0xec>
   85638:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
   8563c:	f8d9 201c 	ldr.w	r2, [r9, #28]
   85640:	f020 0002 	bic.w	r0, r0, #2
   85644:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
   85648:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   8564c:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
   85650:	9131      	str	r1, [sp, #196]	; 0xc4
   85652:	a832      	add	r0, sp, #200	; 0xc8
   85654:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85658:	921f      	str	r2, [sp, #124]	; 0x7c
   8565a:	2200      	movs	r2, #0
   8565c:	9321      	str	r3, [sp, #132]	; 0x84
   8565e:	9018      	str	r0, [sp, #96]	; 0x60
   85660:	901c      	str	r0, [sp, #112]	; 0x70
   85662:	911a      	str	r1, [sp, #104]	; 0x68
   85664:	911d      	str	r1, [sp, #116]	; 0x74
   85666:	921e      	str	r2, [sp, #120]	; 0x78
   85668:	4658      	mov	r0, fp
   8566a:	a918      	add	r1, sp, #96	; 0x60
   8566c:	4622      	mov	r2, r4
   8566e:	4633      	mov	r3, r6
   85670:	f7ff ffa6 	bl	855c0 <_vfiprintf_r>
   85674:	2800      	cmp	r0, #0
   85676:	9002      	str	r0, [sp, #8]
   85678:	db09      	blt.n	8568e <_vfiprintf_r+0xce>
   8567a:	4658      	mov	r0, fp
   8567c:	a918      	add	r1, sp, #96	; 0x60
   8567e:	f001 f8c3 	bl	86808 <_fflush_r>
   85682:	9b02      	ldr	r3, [sp, #8]
   85684:	2800      	cmp	r0, #0
   85686:	bf18      	it	ne
   85688:	f04f 33ff 	movne.w	r3, #4294967295
   8568c:	9302      	str	r3, [sp, #8]
   8568e:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
   85692:	f000 0140 	and.w	r1, r0, #64	; 0x40
   85696:	b20a      	sxth	r2, r1
   85698:	2a00      	cmp	r2, #0
   8569a:	f000 83de 	beq.w	85e5a <_vfiprintf_r+0x89a>
   8569e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   856a2:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   856a6:	f8a9 000c 	strh.w	r0, [r9, #12]
   856aa:	e3d6      	b.n	85e5a <_vfiprintf_r+0x89a>
   856ac:	2200      	movs	r2, #0
   856ae:	ad32      	add	r5, sp, #200	; 0xc8
   856b0:	950b      	str	r5, [sp, #44]	; 0x2c
   856b2:	920d      	str	r2, [sp, #52]	; 0x34
   856b4:	920c      	str	r2, [sp, #48]	; 0x30
   856b6:	9401      	str	r4, [sp, #4]
   856b8:	9205      	str	r2, [sp, #20]
   856ba:	9202      	str	r2, [sp, #8]
   856bc:	46a8      	mov	r8, r5
   856be:	9801      	ldr	r0, [sp, #4]
   856c0:	4604      	mov	r4, r0
   856c2:	f810 1b01 	ldrb.w	r1, [r0], #1
   856c6:	b919      	cbnz	r1, 856d0 <_vfiprintf_r+0x110>
   856c8:	9b01      	ldr	r3, [sp, #4]
   856ca:	1ae5      	subs	r5, r4, r3
   856cc:	d103      	bne.n	856d6 <_vfiprintf_r+0x116>
   856ce:	e01d      	b.n	8570c <_vfiprintf_r+0x14c>
   856d0:	2925      	cmp	r1, #37	; 0x25
   856d2:	d1f5      	bne.n	856c0 <_vfiprintf_r+0x100>
   856d4:	e7f8      	b.n	856c8 <_vfiprintf_r+0x108>
   856d6:	9901      	ldr	r1, [sp, #4]
   856d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   856da:	e888 0022 	stmia.w	r8, {r1, r5}
   856de:	990c      	ldr	r1, [sp, #48]	; 0x30
   856e0:	1950      	adds	r0, r2, r5
   856e2:	1c4b      	adds	r3, r1, #1
   856e4:	2b07      	cmp	r3, #7
   856e6:	900d      	str	r0, [sp, #52]	; 0x34
   856e8:	930c      	str	r3, [sp, #48]	; 0x30
   856ea:	dc02      	bgt.n	856f2 <_vfiprintf_r+0x132>
   856ec:	f108 0808 	add.w	r8, r8, #8
   856f0:	e009      	b.n	85706 <_vfiprintf_r+0x146>
   856f2:	4658      	mov	r0, fp
   856f4:	4649      	mov	r1, r9
   856f6:	aa0b      	add	r2, sp, #44	; 0x2c
   856f8:	f7ff ff2e 	bl	85558 <__sprint_r>
   856fc:	2800      	cmp	r0, #0
   856fe:	f040 83a4 	bne.w	85e4a <_vfiprintf_r+0x88a>
   85702:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85706:	9a02      	ldr	r2, [sp, #8]
   85708:	1950      	adds	r0, r2, r5
   8570a:	9002      	str	r0, [sp, #8]
   8570c:	7821      	ldrb	r1, [r4, #0]
   8570e:	2900      	cmp	r1, #0
   85710:	f000 8394 	beq.w	85e3c <_vfiprintf_r+0x87c>
   85714:	2200      	movs	r2, #0
   85716:	3401      	adds	r4, #1
   85718:	9401      	str	r4, [sp, #4]
   8571a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8571e:	f04f 3cff 	mov.w	ip, #4294967295
   85722:	9204      	str	r2, [sp, #16]
   85724:	4617      	mov	r7, r2
   85726:	9801      	ldr	r0, [sp, #4]
   85728:	f810 3b01 	ldrb.w	r3, [r0], #1
   8572c:	9001      	str	r0, [sp, #4]
   8572e:	2b63      	cmp	r3, #99	; 0x63
   85730:	f000 80b3 	beq.w	8589a <_vfiprintf_r+0x2da>
   85734:	dc33      	bgt.n	8579e <_vfiprintf_r+0x1de>
   85736:	2b39      	cmp	r3, #57	; 0x39
   85738:	dc1a      	bgt.n	85770 <_vfiprintf_r+0x1b0>
   8573a:	2b31      	cmp	r3, #49	; 0x31
   8573c:	f280 8091 	bge.w	85862 <_vfiprintf_r+0x2a2>
   85740:	2b2b      	cmp	r3, #43	; 0x2b
   85742:	d101      	bne.n	85748 <_vfiprintf_r+0x188>
   85744:	461a      	mov	r2, r3
   85746:	e7ee      	b.n	85726 <_vfiprintf_r+0x166>
   85748:	dc0a      	bgt.n	85760 <_vfiprintf_r+0x1a0>
   8574a:	2b23      	cmp	r3, #35	; 0x23
   8574c:	d055      	beq.n	857fa <_vfiprintf_r+0x23a>
   8574e:	2b2a      	cmp	r3, #42	; 0x2a
   85750:	d056      	beq.n	85800 <_vfiprintf_r+0x240>
   85752:	2b20      	cmp	r3, #32
   85754:	f040 81f7 	bne.w	85b46 <_vfiprintf_r+0x586>
   85758:	2a00      	cmp	r2, #0
   8575a:	bf08      	it	eq
   8575c:	2220      	moveq	r2, #32
   8575e:	e7e2      	b.n	85726 <_vfiprintf_r+0x166>
   85760:	2b2e      	cmp	r3, #46	; 0x2e
   85762:	d058      	beq.n	85816 <_vfiprintf_r+0x256>
   85764:	2b30      	cmp	r3, #48	; 0x30
   85766:	d079      	beq.n	8585c <_vfiprintf_r+0x29c>
   85768:	2b2d      	cmp	r3, #45	; 0x2d
   8576a:	f040 81ec 	bne.w	85b46 <_vfiprintf_r+0x586>
   8576e:	e04f      	b.n	85810 <_vfiprintf_r+0x250>
   85770:	2b4f      	cmp	r3, #79	; 0x4f
   85772:	f000 80de 	beq.w	85932 <_vfiprintf_r+0x372>
   85776:	dc07      	bgt.n	85788 <_vfiprintf_r+0x1c8>
   85778:	2b44      	cmp	r3, #68	; 0x44
   8577a:	f040 81e4 	bne.w	85b46 <_vfiprintf_r+0x586>
   8577e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   85782:	f047 0710 	orr.w	r7, r7, #16
   85786:	e090      	b.n	858aa <_vfiprintf_r+0x2ea>
   85788:	2b55      	cmp	r3, #85	; 0x55
   8578a:	f000 811f 	beq.w	859cc <_vfiprintf_r+0x40c>
   8578e:	2b58      	cmp	r3, #88	; 0x58
   85790:	f040 81d9 	bne.w	85b46 <_vfiprintf_r+0x586>
   85794:	4dae      	ldr	r5, [pc, #696]	; (85a50 <_vfiprintf_r+0x490>)
   85796:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8579a:	9505      	str	r5, [sp, #20]
   8579c:	e130      	b.n	85a00 <_vfiprintf_r+0x440>
   8579e:	2b6f      	cmp	r3, #111	; 0x6f
   857a0:	f000 80c9 	beq.w	85936 <_vfiprintf_r+0x376>
   857a4:	dc10      	bgt.n	857c8 <_vfiprintf_r+0x208>
   857a6:	2b69      	cmp	r3, #105	; 0x69
   857a8:	d024      	beq.n	857f4 <_vfiprintf_r+0x234>
   857aa:	dc07      	bgt.n	857bc <_vfiprintf_r+0x1fc>
   857ac:	2b64      	cmp	r3, #100	; 0x64
   857ae:	d021      	beq.n	857f4 <_vfiprintf_r+0x234>
   857b0:	2b68      	cmp	r3, #104	; 0x68
   857b2:	f040 81c8 	bne.w	85b46 <_vfiprintf_r+0x586>
   857b6:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   857ba:	e7b4      	b.n	85726 <_vfiprintf_r+0x166>
   857bc:	2b6c      	cmp	r3, #108	; 0x6c
   857be:	d05f      	beq.n	85880 <_vfiprintf_r+0x2c0>
   857c0:	2b6e      	cmp	r3, #110	; 0x6e
   857c2:	f040 81c0 	bne.w	85b46 <_vfiprintf_r+0x586>
   857c6:	e096      	b.n	858f6 <_vfiprintf_r+0x336>
   857c8:	2b73      	cmp	r3, #115	; 0x73
   857ca:	f000 80df 	beq.w	8598c <_vfiprintf_r+0x3cc>
   857ce:	dc06      	bgt.n	857de <_vfiprintf_r+0x21e>
   857d0:	2b70      	cmp	r3, #112	; 0x70
   857d2:	f000 80cd 	beq.w	85970 <_vfiprintf_r+0x3b0>
   857d6:	2b71      	cmp	r3, #113	; 0x71
   857d8:	f040 81b5 	bne.w	85b46 <_vfiprintf_r+0x586>
   857dc:	e05a      	b.n	85894 <_vfiprintf_r+0x2d4>
   857de:	2b75      	cmp	r3, #117	; 0x75
   857e0:	f000 80f6 	beq.w	859d0 <_vfiprintf_r+0x410>
   857e4:	2b78      	cmp	r3, #120	; 0x78
   857e6:	f040 81ae 	bne.w	85b46 <_vfiprintf_r+0x586>
   857ea:	4d9a      	ldr	r5, [pc, #616]	; (85a54 <_vfiprintf_r+0x494>)
   857ec:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   857f0:	9505      	str	r5, [sp, #20]
   857f2:	e105      	b.n	85a00 <_vfiprintf_r+0x440>
   857f4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   857f8:	e057      	b.n	858aa <_vfiprintf_r+0x2ea>
   857fa:	f047 0701 	orr.w	r7, r7, #1
   857fe:	e792      	b.n	85726 <_vfiprintf_r+0x166>
   85800:	1d33      	adds	r3, r6, #4
   85802:	6836      	ldr	r6, [r6, #0]
   85804:	2e00      	cmp	r6, #0
   85806:	9604      	str	r6, [sp, #16]
   85808:	da15      	bge.n	85836 <_vfiprintf_r+0x276>
   8580a:	4270      	negs	r0, r6
   8580c:	9004      	str	r0, [sp, #16]
   8580e:	461e      	mov	r6, r3
   85810:	f047 0704 	orr.w	r7, r7, #4
   85814:	e787      	b.n	85726 <_vfiprintf_r+0x166>
   85816:	9901      	ldr	r1, [sp, #4]
   85818:	f811 3b01 	ldrb.w	r3, [r1], #1
   8581c:	2b2a      	cmp	r3, #42	; 0x2a
   8581e:	9101      	str	r1, [sp, #4]
   85820:	d10b      	bne.n	8583a <_vfiprintf_r+0x27a>
   85822:	f8d6 c000 	ldr.w	ip, [r6]
   85826:	1d33      	adds	r3, r6, #4
   85828:	f1bc 0f00 	cmp.w	ip, #0
   8582c:	da03      	bge.n	85836 <_vfiprintf_r+0x276>
   8582e:	461e      	mov	r6, r3
   85830:	f04f 3cff 	mov.w	ip, #4294967295
   85834:	e777      	b.n	85726 <_vfiprintf_r+0x166>
   85836:	461e      	mov	r6, r3
   85838:	e775      	b.n	85726 <_vfiprintf_r+0x166>
   8583a:	f04f 0c00 	mov.w	ip, #0
   8583e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85842:	2809      	cmp	r0, #9
   85844:	d807      	bhi.n	85856 <_vfiprintf_r+0x296>
   85846:	9901      	ldr	r1, [sp, #4]
   85848:	230a      	movs	r3, #10
   8584a:	fb03 0c0c 	mla	ip, r3, ip, r0
   8584e:	f811 3b01 	ldrb.w	r3, [r1], #1
   85852:	9101      	str	r1, [sp, #4]
   85854:	e7f3      	b.n	8583e <_vfiprintf_r+0x27e>
   85856:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8585a:	e768      	b.n	8572e <_vfiprintf_r+0x16e>
   8585c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   85860:	e761      	b.n	85726 <_vfiprintf_r+0x166>
   85862:	9801      	ldr	r0, [sp, #4]
   85864:	2100      	movs	r1, #0
   85866:	3b30      	subs	r3, #48	; 0x30
   85868:	240a      	movs	r4, #10
   8586a:	fb04 3101 	mla	r1, r4, r1, r3
   8586e:	f810 3b01 	ldrb.w	r3, [r0], #1
   85872:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   85876:	2c09      	cmp	r4, #9
   85878:	9001      	str	r0, [sp, #4]
   8587a:	d9f4      	bls.n	85866 <_vfiprintf_r+0x2a6>
   8587c:	9104      	str	r1, [sp, #16]
   8587e:	e756      	b.n	8572e <_vfiprintf_r+0x16e>
   85880:	9901      	ldr	r1, [sp, #4]
   85882:	780b      	ldrb	r3, [r1, #0]
   85884:	2b6c      	cmp	r3, #108	; 0x6c
   85886:	d102      	bne.n	8588e <_vfiprintf_r+0x2ce>
   85888:	1c48      	adds	r0, r1, #1
   8588a:	9001      	str	r0, [sp, #4]
   8588c:	e002      	b.n	85894 <_vfiprintf_r+0x2d4>
   8588e:	f047 0710 	orr.w	r7, r7, #16
   85892:	e748      	b.n	85726 <_vfiprintf_r+0x166>
   85894:	f047 0720 	orr.w	r7, r7, #32
   85898:	e745      	b.n	85726 <_vfiprintf_r+0x166>
   8589a:	6832      	ldr	r2, [r6, #0]
   8589c:	2500      	movs	r5, #0
   8589e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   858a2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   858a6:	3604      	adds	r6, #4
   858a8:	e157      	b.n	85b5a <_vfiprintf_r+0x59a>
   858aa:	06ba      	lsls	r2, r7, #26
   858ac:	d507      	bpl.n	858be <_vfiprintf_r+0x2fe>
   858ae:	3607      	adds	r6, #7
   858b0:	f026 0507 	bic.w	r5, r6, #7
   858b4:	f105 0608 	add.w	r6, r5, #8
   858b8:	e9d5 4500 	ldrd	r4, r5, [r5]
   858bc:	e00f      	b.n	858de <_vfiprintf_r+0x31e>
   858be:	f017 0f10 	tst.w	r7, #16
   858c2:	f106 0104 	add.w	r1, r6, #4
   858c6:	d001      	beq.n	858cc <_vfiprintf_r+0x30c>
   858c8:	6832      	ldr	r2, [r6, #0]
   858ca:	e005      	b.n	858d8 <_vfiprintf_r+0x318>
   858cc:	f017 0f40 	tst.w	r7, #64	; 0x40
   858d0:	6832      	ldr	r2, [r6, #0]
   858d2:	d001      	beq.n	858d8 <_vfiprintf_r+0x318>
   858d4:	b214      	sxth	r4, r2
   858d6:	e000      	b.n	858da <_vfiprintf_r+0x31a>
   858d8:	4614      	mov	r4, r2
   858da:	17e5      	asrs	r5, r4, #31
   858dc:	460e      	mov	r6, r1
   858de:	2c00      	cmp	r4, #0
   858e0:	f175 0200 	sbcs.w	r2, r5, #0
   858e4:	f280 80b8 	bge.w	85a58 <_vfiprintf_r+0x498>
   858e8:	232d      	movs	r3, #45	; 0x2d
   858ea:	4264      	negs	r4, r4
   858ec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   858f0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   858f4:	e0b0      	b.n	85a58 <_vfiprintf_r+0x498>
   858f6:	f017 0f20 	tst.w	r7, #32
   858fa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   858fe:	f106 0204 	add.w	r2, r6, #4
   85902:	d005      	beq.n	85910 <_vfiprintf_r+0x350>
   85904:	9c02      	ldr	r4, [sp, #8]
   85906:	6835      	ldr	r5, [r6, #0]
   85908:	17e0      	asrs	r0, r4, #31
   8590a:	602c      	str	r4, [r5, #0]
   8590c:	6068      	str	r0, [r5, #4]
   8590e:	e004      	b.n	8591a <_vfiprintf_r+0x35a>
   85910:	06fb      	lsls	r3, r7, #27
   85912:	d504      	bpl.n	8591e <_vfiprintf_r+0x35e>
   85914:	6833      	ldr	r3, [r6, #0]
   85916:	9902      	ldr	r1, [sp, #8]
   85918:	6019      	str	r1, [r3, #0]
   8591a:	4616      	mov	r6, r2
   8591c:	e6cf      	b.n	856be <_vfiprintf_r+0xfe>
   8591e:	6830      	ldr	r0, [r6, #0]
   85920:	9c02      	ldr	r4, [sp, #8]
   85922:	f017 0f40 	tst.w	r7, #64	; 0x40
   85926:	f106 0604 	add.w	r6, r6, #4
   8592a:	bf14      	ite	ne
   8592c:	8004      	strhne	r4, [r0, #0]
   8592e:	6004      	streq	r4, [r0, #0]
   85930:	e6c5      	b.n	856be <_vfiprintf_r+0xfe>
   85932:	f047 0710 	orr.w	r7, r7, #16
   85936:	f017 0020 	ands.w	r0, r7, #32
   8593a:	d008      	beq.n	8594e <_vfiprintf_r+0x38e>
   8593c:	1df3      	adds	r3, r6, #7
   8593e:	f023 0507 	bic.w	r5, r3, #7
   85942:	f105 0608 	add.w	r6, r5, #8
   85946:	e9d5 4500 	ldrd	r4, r5, [r5]
   8594a:	2000      	movs	r0, #0
   8594c:	e07c      	b.n	85a48 <_vfiprintf_r+0x488>
   8594e:	f017 0110 	ands.w	r1, r7, #16
   85952:	f106 0204 	add.w	r2, r6, #4
   85956:	d106      	bne.n	85966 <_vfiprintf_r+0x3a6>
   85958:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8595c:	d003      	beq.n	85966 <_vfiprintf_r+0x3a6>
   8595e:	8834      	ldrh	r4, [r6, #0]
   85960:	2500      	movs	r5, #0
   85962:	4616      	mov	r6, r2
   85964:	e7f1      	b.n	8594a <_vfiprintf_r+0x38a>
   85966:	6836      	ldr	r6, [r6, #0]
   85968:	2500      	movs	r5, #0
   8596a:	4634      	mov	r4, r6
   8596c:	4616      	mov	r6, r2
   8596e:	e06b      	b.n	85a48 <_vfiprintf_r+0x488>
   85970:	4b38      	ldr	r3, [pc, #224]	; (85a54 <_vfiprintf_r+0x494>)
   85972:	2130      	movs	r1, #48	; 0x30
   85974:	2278      	movs	r2, #120	; 0x78
   85976:	6834      	ldr	r4, [r6, #0]
   85978:	2500      	movs	r5, #0
   8597a:	f047 0702 	orr.w	r7, r7, #2
   8597e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   85982:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   85986:	3604      	adds	r6, #4
   85988:	9305      	str	r3, [sp, #20]
   8598a:	e05c      	b.n	85a46 <_vfiprintf_r+0x486>
   8598c:	4631      	mov	r1, r6
   8598e:	2500      	movs	r5, #0
   85990:	f8d1 a000 	ldr.w	sl, [r1]
   85994:	3604      	adds	r6, #4
   85996:	45ac      	cmp	ip, r5
   85998:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8599c:	4650      	mov	r0, sl
   8599e:	db11      	blt.n	859c4 <_vfiprintf_r+0x404>
   859a0:	4662      	mov	r2, ip
   859a2:	4629      	mov	r1, r5
   859a4:	f8cd c000 	str.w	ip, [sp]
   859a8:	f002 fa7c 	bl	87ea4 <memchr>
   859ac:	f8dd c000 	ldr.w	ip, [sp]
   859b0:	2800      	cmp	r0, #0
   859b2:	f000 80d6 	beq.w	85b62 <_vfiprintf_r+0x5a2>
   859b6:	ebca 0400 	rsb	r4, sl, r0
   859ba:	4564      	cmp	r4, ip
   859bc:	f340 80d3 	ble.w	85b66 <_vfiprintf_r+0x5a6>
   859c0:	4664      	mov	r4, ip
   859c2:	e0d0      	b.n	85b66 <_vfiprintf_r+0x5a6>
   859c4:	f7fe fbd8 	bl	84178 <strlen>
   859c8:	4604      	mov	r4, r0
   859ca:	e0cc      	b.n	85b66 <_vfiprintf_r+0x5a6>
   859cc:	f047 0710 	orr.w	r7, r7, #16
   859d0:	06bd      	lsls	r5, r7, #26
   859d2:	d506      	bpl.n	859e2 <_vfiprintf_r+0x422>
   859d4:	1df0      	adds	r0, r6, #7
   859d6:	f020 0407 	bic.w	r4, r0, #7
   859da:	f104 0608 	add.w	r6, r4, #8
   859de:	cc30      	ldmia	r4, {r4, r5}
   859e0:	e00c      	b.n	859fc <_vfiprintf_r+0x43c>
   859e2:	f017 0f10 	tst.w	r7, #16
   859e6:	f106 0304 	add.w	r3, r6, #4
   859ea:	d103      	bne.n	859f4 <_vfiprintf_r+0x434>
   859ec:	067c      	lsls	r4, r7, #25
   859ee:	d501      	bpl.n	859f4 <_vfiprintf_r+0x434>
   859f0:	8834      	ldrh	r4, [r6, #0]
   859f2:	e001      	b.n	859f8 <_vfiprintf_r+0x438>
   859f4:	6835      	ldr	r5, [r6, #0]
   859f6:	462c      	mov	r4, r5
   859f8:	2500      	movs	r5, #0
   859fa:	461e      	mov	r6, r3
   859fc:	2001      	movs	r0, #1
   859fe:	e023      	b.n	85a48 <_vfiprintf_r+0x488>
   85a00:	06b8      	lsls	r0, r7, #26
   85a02:	d507      	bpl.n	85a14 <_vfiprintf_r+0x454>
   85a04:	1df4      	adds	r4, r6, #7
   85a06:	f024 0107 	bic.w	r1, r4, #7
   85a0a:	f101 0608 	add.w	r6, r1, #8
   85a0e:	e9d1 4500 	ldrd	r4, r5, [r1]
   85a12:	e00c      	b.n	85a2e <_vfiprintf_r+0x46e>
   85a14:	f017 0f10 	tst.w	r7, #16
   85a18:	f106 0004 	add.w	r0, r6, #4
   85a1c:	d103      	bne.n	85a26 <_vfiprintf_r+0x466>
   85a1e:	0679      	lsls	r1, r7, #25
   85a20:	d501      	bpl.n	85a26 <_vfiprintf_r+0x466>
   85a22:	8834      	ldrh	r4, [r6, #0]
   85a24:	e001      	b.n	85a2a <_vfiprintf_r+0x46a>
   85a26:	6836      	ldr	r6, [r6, #0]
   85a28:	4634      	mov	r4, r6
   85a2a:	2500      	movs	r5, #0
   85a2c:	4606      	mov	r6, r0
   85a2e:	07fa      	lsls	r2, r7, #31
   85a30:	d509      	bpl.n	85a46 <_vfiprintf_r+0x486>
   85a32:	ea54 0205 	orrs.w	r2, r4, r5
   85a36:	d006      	beq.n	85a46 <_vfiprintf_r+0x486>
   85a38:	2230      	movs	r2, #48	; 0x30
   85a3a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   85a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   85a42:	f047 0702 	orr.w	r7, r7, #2
   85a46:	2002      	movs	r0, #2
   85a48:	2100      	movs	r1, #0
   85a4a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   85a4e:	e004      	b.n	85a5a <_vfiprintf_r+0x49a>
   85a50:	0008a7c4 	.word	0x0008a7c4
   85a54:	0008a7d5 	.word	0x0008a7d5
   85a58:	2001      	movs	r0, #1
   85a5a:	f1bc 0f00 	cmp.w	ip, #0
   85a5e:	bfa8      	it	ge
   85a60:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   85a64:	ea54 0105 	orrs.w	r1, r4, r5
   85a68:	d102      	bne.n	85a70 <_vfiprintf_r+0x4b0>
   85a6a:	f1bc 0f00 	cmp.w	ip, #0
   85a6e:	d05a      	beq.n	85b26 <_vfiprintf_r+0x566>
   85a70:	2801      	cmp	r0, #1
   85a72:	d01d      	beq.n	85ab0 <_vfiprintf_r+0x4f0>
   85a74:	2802      	cmp	r0, #2
   85a76:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   85a7a:	d043      	beq.n	85b04 <_vfiprintf_r+0x544>
   85a7c:	f004 0207 	and.w	r2, r4, #7
   85a80:	08e4      	lsrs	r4, r4, #3
   85a82:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   85a86:	08e9      	lsrs	r1, r5, #3
   85a88:	4604      	mov	r4, r0
   85a8a:	460d      	mov	r5, r1
   85a8c:	3230      	adds	r2, #48	; 0x30
   85a8e:	ea54 0105 	orrs.w	r1, r4, r5
   85a92:	469a      	mov	sl, r3
   85a94:	701a      	strb	r2, [r3, #0]
   85a96:	f103 33ff 	add.w	r3, r3, #4294967295
   85a9a:	d1ef      	bne.n	85a7c <_vfiprintf_r+0x4bc>
   85a9c:	07f8      	lsls	r0, r7, #31
   85a9e:	4655      	mov	r5, sl
   85aa0:	d54c      	bpl.n	85b3c <_vfiprintf_r+0x57c>
   85aa2:	2a30      	cmp	r2, #48	; 0x30
   85aa4:	d04a      	beq.n	85b3c <_vfiprintf_r+0x57c>
   85aa6:	2230      	movs	r2, #48	; 0x30
   85aa8:	469a      	mov	sl, r3
   85aaa:	f805 2c01 	strb.w	r2, [r5, #-1]
   85aae:	e045      	b.n	85b3c <_vfiprintf_r+0x57c>
   85ab0:	2d00      	cmp	r5, #0
   85ab2:	bf08      	it	eq
   85ab4:	2c0a      	cmpeq	r4, #10
   85ab6:	d205      	bcs.n	85ac4 <_vfiprintf_r+0x504>
   85ab8:	3430      	adds	r4, #48	; 0x30
   85aba:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   85abe:	f80a 4f27 	strb.w	r4, [sl, #39]!
   85ac2:	e03b      	b.n	85b3c <_vfiprintf_r+0x57c>
   85ac4:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   85ac8:	9303      	str	r3, [sp, #12]
   85aca:	4620      	mov	r0, r4
   85acc:	4629      	mov	r1, r5
   85ace:	220a      	movs	r2, #10
   85ad0:	2300      	movs	r3, #0
   85ad2:	f8cd c000 	str.w	ip, [sp]
   85ad6:	f004 fb0b 	bl	8a0f0 <__aeabi_uldivmod>
   85ada:	9803      	ldr	r0, [sp, #12]
   85adc:	3230      	adds	r2, #48	; 0x30
   85ade:	f800 2901 	strb.w	r2, [r0], #-1
   85ae2:	4629      	mov	r1, r5
   85ae4:	220a      	movs	r2, #10
   85ae6:	2300      	movs	r3, #0
   85ae8:	f8dd a00c 	ldr.w	sl, [sp, #12]
   85aec:	9003      	str	r0, [sp, #12]
   85aee:	4620      	mov	r0, r4
   85af0:	f004 fafe 	bl	8a0f0 <__aeabi_uldivmod>
   85af4:	4604      	mov	r4, r0
   85af6:	460d      	mov	r5, r1
   85af8:	ea54 0105 	orrs.w	r1, r4, r5
   85afc:	f8dd c000 	ldr.w	ip, [sp]
   85b00:	d1e3      	bne.n	85aca <_vfiprintf_r+0x50a>
   85b02:	e01b      	b.n	85b3c <_vfiprintf_r+0x57c>
   85b04:	9905      	ldr	r1, [sp, #20]
   85b06:	f004 000f 	and.w	r0, r4, #15
   85b0a:	0924      	lsrs	r4, r4, #4
   85b0c:	5c0a      	ldrb	r2, [r1, r0]
   85b0e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   85b12:	0929      	lsrs	r1, r5, #4
   85b14:	4604      	mov	r4, r0
   85b16:	460d      	mov	r5, r1
   85b18:	469a      	mov	sl, r3
   85b1a:	f803 2901 	strb.w	r2, [r3], #-1
   85b1e:	ea54 0205 	orrs.w	r2, r4, r5
   85b22:	d1ef      	bne.n	85b04 <_vfiprintf_r+0x544>
   85b24:	e00a      	b.n	85b3c <_vfiprintf_r+0x57c>
   85b26:	b938      	cbnz	r0, 85b38 <_vfiprintf_r+0x578>
   85b28:	07f9      	lsls	r1, r7, #31
   85b2a:	d505      	bpl.n	85b38 <_vfiprintf_r+0x578>
   85b2c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   85b30:	2030      	movs	r0, #48	; 0x30
   85b32:	f80a 0f27 	strb.w	r0, [sl, #39]!
   85b36:	e001      	b.n	85b3c <_vfiprintf_r+0x57c>
   85b38:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   85b3c:	ad18      	add	r5, sp, #96	; 0x60
   85b3e:	ebca 0405 	rsb	r4, sl, r5
   85b42:	4665      	mov	r5, ip
   85b44:	e00f      	b.n	85b66 <_vfiprintf_r+0x5a6>
   85b46:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   85b4a:	2b00      	cmp	r3, #0
   85b4c:	f000 8176 	beq.w	85e3c <_vfiprintf_r+0x87c>
   85b50:	2500      	movs	r5, #0
   85b52:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   85b56:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   85b5a:	2401      	movs	r4, #1
   85b5c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   85b60:	e001      	b.n	85b66 <_vfiprintf_r+0x5a6>
   85b62:	4664      	mov	r4, ip
   85b64:	4605      	mov	r5, r0
   85b66:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   85b6a:	42ac      	cmp	r4, r5
   85b6c:	bfac      	ite	ge
   85b6e:	4621      	movge	r1, r4
   85b70:	4629      	movlt	r1, r5
   85b72:	9103      	str	r1, [sp, #12]
   85b74:	b113      	cbz	r3, 85b7c <_vfiprintf_r+0x5bc>
   85b76:	9803      	ldr	r0, [sp, #12]
   85b78:	1c42      	adds	r2, r0, #1
   85b7a:	9203      	str	r2, [sp, #12]
   85b7c:	f017 0102 	ands.w	r1, r7, #2
   85b80:	9106      	str	r1, [sp, #24]
   85b82:	d002      	beq.n	85b8a <_vfiprintf_r+0x5ca>
   85b84:	9b03      	ldr	r3, [sp, #12]
   85b86:	1c98      	adds	r0, r3, #2
   85b88:	9003      	str	r0, [sp, #12]
   85b8a:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   85b8e:	9207      	str	r2, [sp, #28]
   85b90:	d13c      	bne.n	85c0c <_vfiprintf_r+0x64c>
   85b92:	9904      	ldr	r1, [sp, #16]
   85b94:	9b03      	ldr	r3, [sp, #12]
   85b96:	1acb      	subs	r3, r1, r3
   85b98:	2b00      	cmp	r3, #0
   85b9a:	dd37      	ble.n	85c0c <_vfiprintf_r+0x64c>
   85b9c:	48a5      	ldr	r0, [pc, #660]	; (85e34 <_vfiprintf_r+0x874>)
   85b9e:	2b10      	cmp	r3, #16
   85ba0:	f8c8 0000 	str.w	r0, [r8]
   85ba4:	dd1b      	ble.n	85bde <_vfiprintf_r+0x61e>
   85ba6:	990c      	ldr	r1, [sp, #48]	; 0x30
   85ba8:	2210      	movs	r2, #16
   85baa:	980d      	ldr	r0, [sp, #52]	; 0x34
   85bac:	f8c8 2004 	str.w	r2, [r8, #4]
   85bb0:	1c4a      	adds	r2, r1, #1
   85bb2:	3010      	adds	r0, #16
   85bb4:	2a07      	cmp	r2, #7
   85bb6:	900d      	str	r0, [sp, #52]	; 0x34
   85bb8:	920c      	str	r2, [sp, #48]	; 0x30
   85bba:	dc02      	bgt.n	85bc2 <_vfiprintf_r+0x602>
   85bbc:	f108 0808 	add.w	r8, r8, #8
   85bc0:	e00b      	b.n	85bda <_vfiprintf_r+0x61a>
   85bc2:	4658      	mov	r0, fp
   85bc4:	4649      	mov	r1, r9
   85bc6:	aa0b      	add	r2, sp, #44	; 0x2c
   85bc8:	9300      	str	r3, [sp, #0]
   85bca:	f7ff fcc5 	bl	85558 <__sprint_r>
   85bce:	9b00      	ldr	r3, [sp, #0]
   85bd0:	2800      	cmp	r0, #0
   85bd2:	f040 813a 	bne.w	85e4a <_vfiprintf_r+0x88a>
   85bd6:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85bda:	3b10      	subs	r3, #16
   85bdc:	e7de      	b.n	85b9c <_vfiprintf_r+0x5dc>
   85bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85be0:	f8c8 3004 	str.w	r3, [r8, #4]
   85be4:	18d1      	adds	r1, r2, r3
   85be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85be8:	910d      	str	r1, [sp, #52]	; 0x34
   85bea:	1c58      	adds	r0, r3, #1
   85bec:	2807      	cmp	r0, #7
   85bee:	900c      	str	r0, [sp, #48]	; 0x30
   85bf0:	dc02      	bgt.n	85bf8 <_vfiprintf_r+0x638>
   85bf2:	f108 0808 	add.w	r8, r8, #8
   85bf6:	e009      	b.n	85c0c <_vfiprintf_r+0x64c>
   85bf8:	4658      	mov	r0, fp
   85bfa:	4649      	mov	r1, r9
   85bfc:	aa0b      	add	r2, sp, #44	; 0x2c
   85bfe:	f7ff fcab 	bl	85558 <__sprint_r>
   85c02:	2800      	cmp	r0, #0
   85c04:	f040 8121 	bne.w	85e4a <_vfiprintf_r+0x88a>
   85c08:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85c0c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   85c10:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   85c14:	b1ca      	cbz	r2, 85c4a <_vfiprintf_r+0x68a>
   85c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85c18:	2301      	movs	r3, #1
   85c1a:	980d      	ldr	r0, [sp, #52]	; 0x34
   85c1c:	f8c8 3004 	str.w	r3, [r8, #4]
   85c20:	1c53      	adds	r3, r2, #1
   85c22:	f8c8 1000 	str.w	r1, [r8]
   85c26:	1c41      	adds	r1, r0, #1
   85c28:	2b07      	cmp	r3, #7
   85c2a:	910d      	str	r1, [sp, #52]	; 0x34
   85c2c:	930c      	str	r3, [sp, #48]	; 0x30
   85c2e:	dc02      	bgt.n	85c36 <_vfiprintf_r+0x676>
   85c30:	f108 0808 	add.w	r8, r8, #8
   85c34:	e009      	b.n	85c4a <_vfiprintf_r+0x68a>
   85c36:	4658      	mov	r0, fp
   85c38:	4649      	mov	r1, r9
   85c3a:	aa0b      	add	r2, sp, #44	; 0x2c
   85c3c:	f7ff fc8c 	bl	85558 <__sprint_r>
   85c40:	2800      	cmp	r0, #0
   85c42:	f040 8102 	bne.w	85e4a <_vfiprintf_r+0x88a>
   85c46:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85c4a:	9806      	ldr	r0, [sp, #24]
   85c4c:	b1d0      	cbz	r0, 85c84 <_vfiprintf_r+0x6c4>
   85c4e:	a90a      	add	r1, sp, #40	; 0x28
   85c50:	f8c8 1000 	str.w	r1, [r8]
   85c54:	990c      	ldr	r1, [sp, #48]	; 0x30
   85c56:	2202      	movs	r2, #2
   85c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85c5a:	f8c8 2004 	str.w	r2, [r8, #4]
   85c5e:	1c4a      	adds	r2, r1, #1
   85c60:	1c98      	adds	r0, r3, #2
   85c62:	2a07      	cmp	r2, #7
   85c64:	900d      	str	r0, [sp, #52]	; 0x34
   85c66:	920c      	str	r2, [sp, #48]	; 0x30
   85c68:	dc02      	bgt.n	85c70 <_vfiprintf_r+0x6b0>
   85c6a:	f108 0808 	add.w	r8, r8, #8
   85c6e:	e009      	b.n	85c84 <_vfiprintf_r+0x6c4>
   85c70:	4658      	mov	r0, fp
   85c72:	4649      	mov	r1, r9
   85c74:	aa0b      	add	r2, sp, #44	; 0x2c
   85c76:	f7ff fc6f 	bl	85558 <__sprint_r>
   85c7a:	2800      	cmp	r0, #0
   85c7c:	f040 80e5 	bne.w	85e4a <_vfiprintf_r+0x88a>
   85c80:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85c84:	9b07      	ldr	r3, [sp, #28]
   85c86:	2b80      	cmp	r3, #128	; 0x80
   85c88:	d13c      	bne.n	85d04 <_vfiprintf_r+0x744>
   85c8a:	9804      	ldr	r0, [sp, #16]
   85c8c:	9903      	ldr	r1, [sp, #12]
   85c8e:	1a43      	subs	r3, r0, r1
   85c90:	2b00      	cmp	r3, #0
   85c92:	dd37      	ble.n	85d04 <_vfiprintf_r+0x744>
   85c94:	4a68      	ldr	r2, [pc, #416]	; (85e38 <_vfiprintf_r+0x878>)
   85c96:	2b10      	cmp	r3, #16
   85c98:	f8c8 2000 	str.w	r2, [r8]
   85c9c:	dd1b      	ble.n	85cd6 <_vfiprintf_r+0x716>
   85c9e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85ca0:	2110      	movs	r1, #16
   85ca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85ca4:	f8c8 1004 	str.w	r1, [r8, #4]
   85ca8:	1c41      	adds	r1, r0, #1
   85caa:	3210      	adds	r2, #16
   85cac:	2907      	cmp	r1, #7
   85cae:	920d      	str	r2, [sp, #52]	; 0x34
   85cb0:	910c      	str	r1, [sp, #48]	; 0x30
   85cb2:	dc02      	bgt.n	85cba <_vfiprintf_r+0x6fa>
   85cb4:	f108 0808 	add.w	r8, r8, #8
   85cb8:	e00b      	b.n	85cd2 <_vfiprintf_r+0x712>
   85cba:	4658      	mov	r0, fp
   85cbc:	4649      	mov	r1, r9
   85cbe:	aa0b      	add	r2, sp, #44	; 0x2c
   85cc0:	9300      	str	r3, [sp, #0]
   85cc2:	f7ff fc49 	bl	85558 <__sprint_r>
   85cc6:	9b00      	ldr	r3, [sp, #0]
   85cc8:	2800      	cmp	r0, #0
   85cca:	f040 80be 	bne.w	85e4a <_vfiprintf_r+0x88a>
   85cce:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85cd2:	3b10      	subs	r3, #16
   85cd4:	e7de      	b.n	85c94 <_vfiprintf_r+0x6d4>
   85cd6:	990c      	ldr	r1, [sp, #48]	; 0x30
   85cd8:	980d      	ldr	r0, [sp, #52]	; 0x34
   85cda:	1c4a      	adds	r2, r1, #1
   85cdc:	f8c8 3004 	str.w	r3, [r8, #4]
   85ce0:	2a07      	cmp	r2, #7
   85ce2:	4403      	add	r3, r0
   85ce4:	930d      	str	r3, [sp, #52]	; 0x34
   85ce6:	920c      	str	r2, [sp, #48]	; 0x30
   85ce8:	dc02      	bgt.n	85cf0 <_vfiprintf_r+0x730>
   85cea:	f108 0808 	add.w	r8, r8, #8
   85cee:	e009      	b.n	85d04 <_vfiprintf_r+0x744>
   85cf0:	4658      	mov	r0, fp
   85cf2:	4649      	mov	r1, r9
   85cf4:	aa0b      	add	r2, sp, #44	; 0x2c
   85cf6:	f7ff fc2f 	bl	85558 <__sprint_r>
   85cfa:	2800      	cmp	r0, #0
   85cfc:	f040 80a5 	bne.w	85e4a <_vfiprintf_r+0x88a>
   85d00:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85d04:	1b2d      	subs	r5, r5, r4
   85d06:	2d00      	cmp	r5, #0
   85d08:	dd34      	ble.n	85d74 <_vfiprintf_r+0x7b4>
   85d0a:	484b      	ldr	r0, [pc, #300]	; (85e38 <_vfiprintf_r+0x878>)
   85d0c:	2d10      	cmp	r5, #16
   85d0e:	f8c8 0000 	str.w	r0, [r8]
   85d12:	dd19      	ble.n	85d48 <_vfiprintf_r+0x788>
   85d14:	980c      	ldr	r0, [sp, #48]	; 0x30
   85d16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85d18:	1c43      	adds	r3, r0, #1
   85d1a:	2110      	movs	r1, #16
   85d1c:	3210      	adds	r2, #16
   85d1e:	2b07      	cmp	r3, #7
   85d20:	f8c8 1004 	str.w	r1, [r8, #4]
   85d24:	920d      	str	r2, [sp, #52]	; 0x34
   85d26:	930c      	str	r3, [sp, #48]	; 0x30
   85d28:	dc02      	bgt.n	85d30 <_vfiprintf_r+0x770>
   85d2a:	f108 0808 	add.w	r8, r8, #8
   85d2e:	e009      	b.n	85d44 <_vfiprintf_r+0x784>
   85d30:	4658      	mov	r0, fp
   85d32:	4649      	mov	r1, r9
   85d34:	aa0b      	add	r2, sp, #44	; 0x2c
   85d36:	f7ff fc0f 	bl	85558 <__sprint_r>
   85d3a:	2800      	cmp	r0, #0
   85d3c:	f040 8085 	bne.w	85e4a <_vfiprintf_r+0x88a>
   85d40:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85d44:	3d10      	subs	r5, #16
   85d46:	e7e0      	b.n	85d0a <_vfiprintf_r+0x74a>
   85d48:	990c      	ldr	r1, [sp, #48]	; 0x30
   85d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85d4c:	1c4a      	adds	r2, r1, #1
   85d4e:	f8c8 5004 	str.w	r5, [r8, #4]
   85d52:	2a07      	cmp	r2, #7
   85d54:	441d      	add	r5, r3
   85d56:	950d      	str	r5, [sp, #52]	; 0x34
   85d58:	920c      	str	r2, [sp, #48]	; 0x30
   85d5a:	dc02      	bgt.n	85d62 <_vfiprintf_r+0x7a2>
   85d5c:	f108 0808 	add.w	r8, r8, #8
   85d60:	e008      	b.n	85d74 <_vfiprintf_r+0x7b4>
   85d62:	4658      	mov	r0, fp
   85d64:	4649      	mov	r1, r9
   85d66:	aa0b      	add	r2, sp, #44	; 0x2c
   85d68:	f7ff fbf6 	bl	85558 <__sprint_r>
   85d6c:	2800      	cmp	r0, #0
   85d6e:	d16c      	bne.n	85e4a <_vfiprintf_r+0x88a>
   85d70:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85d76:	980d      	ldr	r0, [sp, #52]	; 0x34
   85d78:	1c59      	adds	r1, r3, #1
   85d7a:	f8c8 4004 	str.w	r4, [r8, #4]
   85d7e:	2907      	cmp	r1, #7
   85d80:	4404      	add	r4, r0
   85d82:	f8c8 a000 	str.w	sl, [r8]
   85d86:	940d      	str	r4, [sp, #52]	; 0x34
   85d88:	910c      	str	r1, [sp, #48]	; 0x30
   85d8a:	dc02      	bgt.n	85d92 <_vfiprintf_r+0x7d2>
   85d8c:	f108 0308 	add.w	r3, r8, #8
   85d90:	e007      	b.n	85da2 <_vfiprintf_r+0x7e2>
   85d92:	4658      	mov	r0, fp
   85d94:	4649      	mov	r1, r9
   85d96:	aa0b      	add	r2, sp, #44	; 0x2c
   85d98:	f7ff fbde 	bl	85558 <__sprint_r>
   85d9c:	2800      	cmp	r0, #0
   85d9e:	d154      	bne.n	85e4a <_vfiprintf_r+0x88a>
   85da0:	ab32      	add	r3, sp, #200	; 0xc8
   85da2:	077a      	lsls	r2, r7, #29
   85da4:	d40b      	bmi.n	85dbe <_vfiprintf_r+0x7fe>
   85da6:	9802      	ldr	r0, [sp, #8]
   85da8:	9b03      	ldr	r3, [sp, #12]
   85daa:	9904      	ldr	r1, [sp, #16]
   85dac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85dae:	428b      	cmp	r3, r1
   85db0:	bfac      	ite	ge
   85db2:	18c0      	addge	r0, r0, r3
   85db4:	1840      	addlt	r0, r0, r1
   85db6:	9002      	str	r0, [sp, #8]
   85db8:	2a00      	cmp	r2, #0
   85dba:	d036      	beq.n	85e2a <_vfiprintf_r+0x86a>
   85dbc:	e02f      	b.n	85e1e <_vfiprintf_r+0x85e>
   85dbe:	9c04      	ldr	r4, [sp, #16]
   85dc0:	9a03      	ldr	r2, [sp, #12]
   85dc2:	1aa4      	subs	r4, r4, r2
   85dc4:	2c00      	cmp	r4, #0
   85dc6:	ddee      	ble.n	85da6 <_vfiprintf_r+0x7e6>
   85dc8:	481a      	ldr	r0, [pc, #104]	; (85e34 <_vfiprintf_r+0x874>)
   85dca:	2c10      	cmp	r4, #16
   85dcc:	6018      	str	r0, [r3, #0]
   85dce:	dd15      	ble.n	85dfc <_vfiprintf_r+0x83c>
   85dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85dd2:	2010      	movs	r0, #16
   85dd4:	990d      	ldr	r1, [sp, #52]	; 0x34
   85dd6:	6058      	str	r0, [r3, #4]
   85dd8:	1c50      	adds	r0, r2, #1
   85dda:	3110      	adds	r1, #16
   85ddc:	2807      	cmp	r0, #7
   85dde:	910d      	str	r1, [sp, #52]	; 0x34
   85de0:	900c      	str	r0, [sp, #48]	; 0x30
   85de2:	dc01      	bgt.n	85de8 <_vfiprintf_r+0x828>
   85de4:	3308      	adds	r3, #8
   85de6:	e007      	b.n	85df8 <_vfiprintf_r+0x838>
   85de8:	4658      	mov	r0, fp
   85dea:	4649      	mov	r1, r9
   85dec:	aa0b      	add	r2, sp, #44	; 0x2c
   85dee:	f7ff fbb3 	bl	85558 <__sprint_r>
   85df2:	2800      	cmp	r0, #0
   85df4:	d129      	bne.n	85e4a <_vfiprintf_r+0x88a>
   85df6:	ab32      	add	r3, sp, #200	; 0xc8
   85df8:	3c10      	subs	r4, #16
   85dfa:	e7e5      	b.n	85dc8 <_vfiprintf_r+0x808>
   85dfc:	990c      	ldr	r1, [sp, #48]	; 0x30
   85dfe:	605c      	str	r4, [r3, #4]
   85e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85e02:	1c4a      	adds	r2, r1, #1
   85e04:	191c      	adds	r4, r3, r4
   85e06:	2a07      	cmp	r2, #7
   85e08:	940d      	str	r4, [sp, #52]	; 0x34
   85e0a:	920c      	str	r2, [sp, #48]	; 0x30
   85e0c:	ddcb      	ble.n	85da6 <_vfiprintf_r+0x7e6>
   85e0e:	4658      	mov	r0, fp
   85e10:	4649      	mov	r1, r9
   85e12:	aa0b      	add	r2, sp, #44	; 0x2c
   85e14:	f7ff fba0 	bl	85558 <__sprint_r>
   85e18:	2800      	cmp	r0, #0
   85e1a:	d0c4      	beq.n	85da6 <_vfiprintf_r+0x7e6>
   85e1c:	e015      	b.n	85e4a <_vfiprintf_r+0x88a>
   85e1e:	4658      	mov	r0, fp
   85e20:	4649      	mov	r1, r9
   85e22:	aa0b      	add	r2, sp, #44	; 0x2c
   85e24:	f7ff fb98 	bl	85558 <__sprint_r>
   85e28:	b978      	cbnz	r0, 85e4a <_vfiprintf_r+0x88a>
   85e2a:	2500      	movs	r5, #0
   85e2c:	950c      	str	r5, [sp, #48]	; 0x30
   85e2e:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
   85e32:	e444      	b.n	856be <_vfiprintf_r+0xfe>
   85e34:	0008a7e6 	.word	0x0008a7e6
   85e38:	0008a7f6 	.word	0x0008a7f6
   85e3c:	980d      	ldr	r0, [sp, #52]	; 0x34
   85e3e:	b120      	cbz	r0, 85e4a <_vfiprintf_r+0x88a>
   85e40:	4658      	mov	r0, fp
   85e42:	4649      	mov	r1, r9
   85e44:	aa0b      	add	r2, sp, #44	; 0x2c
   85e46:	f7ff fb87 	bl	85558 <__sprint_r>
   85e4a:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   85e4e:	f001 0240 	and.w	r2, r1, #64	; 0x40
   85e52:	b213      	sxth	r3, r2
   85e54:	2b00      	cmp	r3, #0
   85e56:	f47f abe6 	bne.w	85626 <_vfiprintf_r+0x66>
   85e5a:	9802      	ldr	r0, [sp, #8]
   85e5c:	b033      	add	sp, #204	; 0xcc
   85e5e:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   85e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085e66 <vfiprintf>:
   85e66:	b530      	push	{r4, r5, lr}
   85e68:	4613      	mov	r3, r2
   85e6a:	4a05      	ldr	r2, [pc, #20]	; (85e80 <vfiprintf+0x1a>)
   85e6c:	4605      	mov	r5, r0
   85e6e:	460c      	mov	r4, r1
   85e70:	6810      	ldr	r0, [r2, #0]
   85e72:	4629      	mov	r1, r5
   85e74:	4622      	mov	r2, r4
   85e76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85e7a:	f7ff bba1 	b.w	855c0 <_vfiprintf_r>
   85e7e:	bf00      	nop
   85e80:	20070010 	.word	0x20070010

00085e84 <__svfscanf_r>:
   85e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85e88:	460c      	mov	r4, r1
   85e8a:	b0d9      	sub	sp, #356	; 0x164
   85e8c:	4680      	mov	r8, r0
   85e8e:	4616      	mov	r6, r2
   85e90:	461d      	mov	r5, r3
   85e92:	f000 fe0f 	bl	86ab4 <__sfp_lock_acquire>
   85e96:	89a3      	ldrh	r3, [r4, #12]
   85e98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   85e9c:	b210      	sxth	r0, r2
   85e9e:	b930      	cbnz	r0, 85eae <__svfscanf_r+0x2a>
   85ea0:	6e67      	ldr	r7, [r4, #100]	; 0x64
   85ea2:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   85ea6:	f427 5300 	bic.w	r3, r7, #8192	; 0x2000
   85eaa:	81a1      	strh	r1, [r4, #12]
   85eac:	6663      	str	r3, [r4, #100]	; 0x64
   85eae:	9607      	str	r6, [sp, #28]
   85eb0:	2600      	movs	r6, #0
   85eb2:	9605      	str	r6, [sp, #20]
   85eb4:	9602      	str	r6, [sp, #8]
   85eb6:	9604      	str	r6, [sp, #16]
   85eb8:	9f07      	ldr	r7, [sp, #28]
   85eba:	f817 2b01 	ldrb.w	r2, [r7], #1
   85ebe:	9707      	str	r7, [sp, #28]
   85ec0:	9209      	str	r2, [sp, #36]	; 0x24
   85ec2:	2a00      	cmp	r2, #0
   85ec4:	f000 83ab 	beq.w	8661e <__svfscanf_r+0x79a>
   85ec8:	489f      	ldr	r0, [pc, #636]	; (86148 <__svfscanf_r+0x2c4>)
   85eca:	6801      	ldr	r1, [r0, #0]
   85ecc:	188f      	adds	r7, r1, r2
   85ece:	f897 b001 	ldrb.w	fp, [r7, #1]
   85ed2:	f00b 0b08 	and.w	fp, fp, #8
   85ed6:	fa5f f38b 	uxtb.w	r3, fp
   85eda:	b1db      	cbz	r3, 85f14 <__svfscanf_r+0x90>
   85edc:	6867      	ldr	r7, [r4, #4]
   85ede:	2f00      	cmp	r7, #0
   85ee0:	dd11      	ble.n	85f06 <__svfscanf_r+0x82>
   85ee2:	4999      	ldr	r1, [pc, #612]	; (86148 <__svfscanf_r+0x2c4>)
   85ee4:	6823      	ldr	r3, [r4, #0]
   85ee6:	6808      	ldr	r0, [r1, #0]
   85ee8:	781a      	ldrb	r2, [r3, #0]
   85eea:	1887      	adds	r7, r0, r2
   85eec:	787a      	ldrb	r2, [r7, #1]
   85eee:	f002 0108 	and.w	r1, r2, #8
   85ef2:	b2c8      	uxtb	r0, r1
   85ef4:	2800      	cmp	r0, #0
   85ef6:	d0df      	beq.n	85eb8 <__svfscanf_r+0x34>
   85ef8:	6867      	ldr	r7, [r4, #4]
   85efa:	3301      	adds	r3, #1
   85efc:	1e7a      	subs	r2, r7, #1
   85efe:	3601      	adds	r6, #1
   85f00:	6062      	str	r2, [r4, #4]
   85f02:	6023      	str	r3, [r4, #0]
   85f04:	e7ea      	b.n	85edc <__svfscanf_r+0x58>
   85f06:	4640      	mov	r0, r8
   85f08:	4621      	mov	r1, r4
   85f0a:	f002 fd5c 	bl	889c6 <__srefill_r>
   85f0e:	2800      	cmp	r0, #0
   85f10:	d0e7      	beq.n	85ee2 <__svfscanf_r+0x5e>
   85f12:	e7d1      	b.n	85eb8 <__svfscanf_r+0x34>
   85f14:	2a25      	cmp	r2, #37	; 0x25
   85f16:	d151      	bne.n	85fbc <__svfscanf_r+0x138>
   85f18:	9a07      	ldr	r2, [sp, #28]
   85f1a:	469b      	mov	fp, r3
   85f1c:	469a      	mov	sl, r3
   85f1e:	9f07      	ldr	r7, [sp, #28]
   85f20:	f817 0b01 	ldrb.w	r0, [r7], #1
   85f24:	2864      	cmp	r0, #100	; 0x64
   85f26:	9707      	str	r7, [sp, #28]
   85f28:	f000 80be 	beq.w	860a8 <__svfscanf_r+0x224>
   85f2c:	d827      	bhi.n	85f7e <__svfscanf_r+0xfa>
   85f2e:	284c      	cmp	r0, #76	; 0x4c
   85f30:	d069      	beq.n	86006 <__svfscanf_r+0x182>
   85f32:	d811      	bhi.n	85f58 <__svfscanf_r+0xd4>
   85f34:	2839      	cmp	r0, #57	; 0x39
   85f36:	d80b      	bhi.n	85f50 <__svfscanf_r+0xcc>
   85f38:	2830      	cmp	r0, #48	; 0x30
   85f3a:	d267      	bcs.n	8600c <__svfscanf_r+0x188>
   85f3c:	2825      	cmp	r0, #37	; 0x25
   85f3e:	d03d      	beq.n	85fbc <__svfscanf_r+0x138>
   85f40:	282a      	cmp	r0, #42	; 0x2a
   85f42:	d054      	beq.n	85fee <__svfscanf_r+0x16a>
   85f44:	2800      	cmp	r0, #0
   85f46:	f040 80a2 	bne.w	8608e <__svfscanf_r+0x20a>
   85f4a:	f000 fdb4 	bl	86ab6 <__sfp_lock_release>
   85f4e:	e35c      	b.n	8660a <__svfscanf_r+0x786>
   85f50:	2844      	cmp	r0, #68	; 0x44
   85f52:	f040 809c 	bne.w	8608e <__svfscanf_r+0x20a>
   85f56:	e0a0      	b.n	8609a <__svfscanf_r+0x216>
   85f58:	2858      	cmp	r0, #88	; 0x58
   85f5a:	d063      	beq.n	86024 <__svfscanf_r+0x1a0>
   85f5c:	d805      	bhi.n	85f6a <__svfscanf_r+0xe6>
   85f5e:	284f      	cmp	r0, #79	; 0x4f
   85f60:	f040 8095 	bne.w	8608e <__svfscanf_r+0x20a>
   85f64:	f04b 0b01 	orr.w	fp, fp, #1
   85f68:	e056      	b.n	86018 <__svfscanf_r+0x194>
   85f6a:	285b      	cmp	r0, #91	; 0x5b
   85f6c:	d060      	beq.n	86030 <__svfscanf_r+0x1ac>
   85f6e:	2863      	cmp	r0, #99	; 0x63
   85f70:	f040 808d 	bne.w	8608e <__svfscanf_r+0x20a>
   85f74:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   85f78:	f04f 0900 	mov.w	r9, #0
   85f7c:	e09a      	b.n	860b4 <__svfscanf_r+0x230>
   85f7e:	286f      	cmp	r0, #111	; 0x6f
   85f80:	d04a      	beq.n	86018 <__svfscanf_r+0x194>
   85f82:	d80e      	bhi.n	85fa2 <__svfscanf_r+0x11e>
   85f84:	2869      	cmp	r0, #105	; 0x69
   85f86:	f000 808b 	beq.w	860a0 <__svfscanf_r+0x21c>
   85f8a:	d805      	bhi.n	85f98 <__svfscanf_r+0x114>
   85f8c:	2868      	cmp	r0, #104	; 0x68
   85f8e:	d17e      	bne.n	8608e <__svfscanf_r+0x20a>
   85f90:	f04b 0b04 	orr.w	fp, fp, #4
   85f94:	9a07      	ldr	r2, [sp, #28]
   85f96:	e7c2      	b.n	85f1e <__svfscanf_r+0x9a>
   85f98:	286c      	cmp	r0, #108	; 0x6c
   85f9a:	d02b      	beq.n	85ff4 <__svfscanf_r+0x170>
   85f9c:	286e      	cmp	r0, #110	; 0x6e
   85f9e:	d176      	bne.n	8608e <__svfscanf_r+0x20a>
   85fa0:	e054      	b.n	8604c <__svfscanf_r+0x1c8>
   85fa2:	2873      	cmp	r0, #115	; 0x73
   85fa4:	d041      	beq.n	8602a <__svfscanf_r+0x1a6>
   85fa6:	d804      	bhi.n	85fb2 <__svfscanf_r+0x12e>
   85fa8:	2870      	cmp	r0, #112	; 0x70
   85faa:	d170      	bne.n	8608e <__svfscanf_r+0x20a>
   85fac:	f44b 7b08 	orr.w	fp, fp, #544	; 0x220
   85fb0:	e048      	b.n	86044 <__svfscanf_r+0x1c0>
   85fb2:	2875      	cmp	r0, #117	; 0x75
   85fb4:	d034      	beq.n	86020 <__svfscanf_r+0x19c>
   85fb6:	2878      	cmp	r0, #120	; 0x78
   85fb8:	d169      	bne.n	8608e <__svfscanf_r+0x20a>
   85fba:	e033      	b.n	86024 <__svfscanf_r+0x1a0>
   85fbc:	6867      	ldr	r7, [r4, #4]
   85fbe:	2f00      	cmp	r7, #0
   85fc0:	dd0e      	ble.n	85fe0 <__svfscanf_r+0x15c>
   85fc2:	6823      	ldr	r3, [r4, #0]
   85fc4:	9f07      	ldr	r7, [sp, #28]
   85fc6:	7819      	ldrb	r1, [r3, #0]
   85fc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   85fcc:	4291      	cmp	r1, r2
   85fce:	f040 8326 	bne.w	8661e <__svfscanf_r+0x79a>
   85fd2:	6860      	ldr	r0, [r4, #4]
   85fd4:	3301      	adds	r3, #1
   85fd6:	1e47      	subs	r7, r0, #1
   85fd8:	6067      	str	r7, [r4, #4]
   85fda:	6023      	str	r3, [r4, #0]
   85fdc:	3601      	adds	r6, #1
   85fde:	e76b      	b.n	85eb8 <__svfscanf_r+0x34>
   85fe0:	4640      	mov	r0, r8
   85fe2:	4621      	mov	r1, r4
   85fe4:	f002 fcef 	bl	889c6 <__srefill_r>
   85fe8:	2800      	cmp	r0, #0
   85fea:	d0ea      	beq.n	85fc2 <__svfscanf_r+0x13e>
   85fec:	e309      	b.n	86602 <__svfscanf_r+0x77e>
   85fee:	f04b 0b10 	orr.w	fp, fp, #16
   85ff2:	e7cf      	b.n	85f94 <__svfscanf_r+0x110>
   85ff4:	7853      	ldrb	r3, [r2, #1]
   85ff6:	2b6c      	cmp	r3, #108	; 0x6c
   85ff8:	d102      	bne.n	86000 <__svfscanf_r+0x17c>
   85ffa:	3202      	adds	r2, #2
   85ffc:	9207      	str	r2, [sp, #28]
   85ffe:	e002      	b.n	86006 <__svfscanf_r+0x182>
   86000:	f04b 0b01 	orr.w	fp, fp, #1
   86004:	e7c6      	b.n	85f94 <__svfscanf_r+0x110>
   86006:	f04b 0b02 	orr.w	fp, fp, #2
   8600a:	e7c3      	b.n	85f94 <__svfscanf_r+0x110>
   8600c:	220a      	movs	r2, #10
   8600e:	fb02 0a0a 	mla	sl, r2, sl, r0
   86012:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   86016:	e7bd      	b.n	85f94 <__svfscanf_r+0x110>
   86018:	484c      	ldr	r0, [pc, #304]	; (8614c <__svfscanf_r+0x2c8>)
   8601a:	2708      	movs	r7, #8
   8601c:	9005      	str	r0, [sp, #20]
   8601e:	e046      	b.n	860ae <__svfscanf_r+0x22a>
   86020:	4f4a      	ldr	r7, [pc, #296]	; (8614c <__svfscanf_r+0x2c8>)
   86022:	e042      	b.n	860aa <__svfscanf_r+0x226>
   86024:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
   86028:	e00c      	b.n	86044 <__svfscanf_r+0x1c0>
   8602a:	f04f 0902 	mov.w	r9, #2
   8602e:	e041      	b.n	860b4 <__svfscanf_r+0x230>
   86030:	a818      	add	r0, sp, #96	; 0x60
   86032:	9907      	ldr	r1, [sp, #28]
   86034:	f002 fd82 	bl	88b3c <__sccl>
   86038:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   8603c:	9007      	str	r0, [sp, #28]
   8603e:	f04f 0901 	mov.w	r9, #1
   86042:	e037      	b.n	860b4 <__svfscanf_r+0x230>
   86044:	4a41      	ldr	r2, [pc, #260]	; (8614c <__svfscanf_r+0x2c8>)
   86046:	2710      	movs	r7, #16
   86048:	9205      	str	r2, [sp, #20]
   8604a:	e030      	b.n	860ae <__svfscanf_r+0x22a>
   8604c:	f01b 0f10 	tst.w	fp, #16
   86050:	f47f af32 	bne.w	85eb8 <__svfscanf_r+0x34>
   86054:	f01b 0f04 	tst.w	fp, #4
   86058:	f105 0104 	add.w	r1, r5, #4
   8605c:	d002      	beq.n	86064 <__svfscanf_r+0x1e0>
   8605e:	682d      	ldr	r5, [r5, #0]
   86060:	802e      	strh	r6, [r5, #0]
   86062:	e004      	b.n	8606e <__svfscanf_r+0x1ea>
   86064:	f01b 0f01 	tst.w	fp, #1
   86068:	d003      	beq.n	86072 <__svfscanf_r+0x1ee>
   8606a:	682f      	ldr	r7, [r5, #0]
   8606c:	603e      	str	r6, [r7, #0]
   8606e:	460d      	mov	r5, r1
   86070:	e722      	b.n	85eb8 <__svfscanf_r+0x34>
   86072:	f01b 0f02 	tst.w	fp, #2
   86076:	f105 0704 	add.w	r7, r5, #4
   8607a:	d004      	beq.n	86086 <__svfscanf_r+0x202>
   8607c:	682a      	ldr	r2, [r5, #0]
   8607e:	17f0      	asrs	r0, r6, #31
   86080:	6016      	str	r6, [r2, #0]
   86082:	6050      	str	r0, [r2, #4]
   86084:	e001      	b.n	8608a <__svfscanf_r+0x206>
   86086:	682d      	ldr	r5, [r5, #0]
   86088:	602e      	str	r6, [r5, #0]
   8608a:	463d      	mov	r5, r7
   8608c:	e714      	b.n	85eb8 <__svfscanf_r+0x34>
   8608e:	180f      	adds	r7, r1, r0
   86090:	787b      	ldrb	r3, [r7, #1]
   86092:	f003 0103 	and.w	r1, r3, #3
   86096:	2901      	cmp	r1, #1
   86098:	d106      	bne.n	860a8 <__svfscanf_r+0x224>
   8609a:	f04b 0b01 	orr.w	fp, fp, #1
   8609e:	e003      	b.n	860a8 <__svfscanf_r+0x224>
   860a0:	482b      	ldr	r0, [pc, #172]	; (86150 <__svfscanf_r+0x2cc>)
   860a2:	2700      	movs	r7, #0
   860a4:	9005      	str	r0, [sp, #20]
   860a6:	e002      	b.n	860ae <__svfscanf_r+0x22a>
   860a8:	4f29      	ldr	r7, [pc, #164]	; (86150 <__svfscanf_r+0x2cc>)
   860aa:	9705      	str	r7, [sp, #20]
   860ac:	270a      	movs	r7, #10
   860ae:	9702      	str	r7, [sp, #8]
   860b0:	f04f 0903 	mov.w	r9, #3
   860b4:	6863      	ldr	r3, [r4, #4]
   860b6:	2b00      	cmp	r3, #0
   860b8:	dd03      	ble.n	860c2 <__svfscanf_r+0x23e>
   860ba:	f01b 0f40 	tst.w	fp, #64	; 0x40
   860be:	d122      	bne.n	86106 <__svfscanf_r+0x282>
   860c0:	e00e      	b.n	860e0 <__svfscanf_r+0x25c>
   860c2:	4640      	mov	r0, r8
   860c4:	4621      	mov	r1, r4
   860c6:	f002 fc7e 	bl	889c6 <__srefill_r>
   860ca:	2800      	cmp	r0, #0
   860cc:	d0f5      	beq.n	860ba <__svfscanf_r+0x236>
   860ce:	e298      	b.n	86602 <__svfscanf_r+0x77e>
   860d0:	6863      	ldr	r3, [r4, #4]
   860d2:	3601      	adds	r6, #1
   860d4:	1e5a      	subs	r2, r3, #1
   860d6:	2a00      	cmp	r2, #0
   860d8:	6062      	str	r2, [r4, #4]
   860da:	dd0d      	ble.n	860f8 <__svfscanf_r+0x274>
   860dc:	3001      	adds	r0, #1
   860de:	6020      	str	r0, [r4, #0]
   860e0:	4919      	ldr	r1, [pc, #100]	; (86148 <__svfscanf_r+0x2c4>)
   860e2:	6820      	ldr	r0, [r4, #0]
   860e4:	680b      	ldr	r3, [r1, #0]
   860e6:	7802      	ldrb	r2, [r0, #0]
   860e8:	189a      	adds	r2, r3, r2
   860ea:	7851      	ldrb	r1, [r2, #1]
   860ec:	f001 0308 	and.w	r3, r1, #8
   860f0:	b2da      	uxtb	r2, r3
   860f2:	2a00      	cmp	r2, #0
   860f4:	d1ec      	bne.n	860d0 <__svfscanf_r+0x24c>
   860f6:	e006      	b.n	86106 <__svfscanf_r+0x282>
   860f8:	4640      	mov	r0, r8
   860fa:	4621      	mov	r1, r4
   860fc:	f002 fc63 	bl	889c6 <__srefill_r>
   86100:	2800      	cmp	r0, #0
   86102:	d0ed      	beq.n	860e0 <__svfscanf_r+0x25c>
   86104:	e27d      	b.n	86602 <__svfscanf_r+0x77e>
   86106:	f1b9 0f02 	cmp.w	r9, #2
   8610a:	f000 80e6 	beq.w	862da <__svfscanf_r+0x456>
   8610e:	f1b9 0f03 	cmp.w	r9, #3
   86112:	f000 81aa 	beq.w	8646a <__svfscanf_r+0x5e6>
   86116:	f1b9 0f01 	cmp.w	r9, #1
   8611a:	f000 808a 	beq.w	86232 <__svfscanf_r+0x3ae>
   8611e:	f1ba 0f00 	cmp.w	sl, #0
   86122:	bf08      	it	eq
   86124:	f04f 0a01 	moveq.w	sl, #1
   86128:	f01b 0901 	ands.w	r9, fp, #1
   8612c:	d054      	beq.n	861d8 <__svfscanf_r+0x354>
   8612e:	2100      	movs	r1, #0
   86130:	2208      	movs	r2, #8
   86132:	a80a      	add	r0, sp, #40	; 0x28
   86134:	f7fd ff35 	bl	83fa2 <memset>
   86138:	f01b 0710 	ands.w	r7, fp, #16
   8613c:	d10a      	bne.n	86154 <__svfscanf_r+0x2d0>
   8613e:	f8d5 9000 	ldr.w	r9, [r5]
   86142:	3504      	adds	r5, #4
   86144:	e008      	b.n	86158 <__svfscanf_r+0x2d4>
   86146:	bf00      	nop
   86148:	20070468 	.word	0x20070468
   8614c:	00088f01 	.word	0x00088f01
   86150:	00088c49 	.word	0x00088c49
   86154:	f04f 0900 	mov.w	r9, #0
   86158:	f04f 0b00 	mov.w	fp, #0
   8615c:	f001 fba6 	bl	878ac <__locale_mb_cur_max>
   86160:	4583      	cmp	fp, r0
   86162:	f000 824e 	beq.w	86602 <__svfscanf_r+0x77e>
   86166:	6820      	ldr	r0, [r4, #0]
   86168:	6863      	ldr	r3, [r4, #4]
   8616a:	f810 1b01 	ldrb.w	r1, [r0], #1
   8616e:	aa0e      	add	r2, sp, #56	; 0x38
   86170:	f802 100b 	strb.w	r1, [r2, fp]
   86174:	6020      	str	r0, [r4, #0]
   86176:	1e59      	subs	r1, r3, #1
   86178:	a80a      	add	r0, sp, #40	; 0x28
   8617a:	f10b 0b01 	add.w	fp, fp, #1
   8617e:	6061      	str	r1, [r4, #4]
   86180:	9000      	str	r0, [sp, #0]
   86182:	4649      	mov	r1, r9
   86184:	4640      	mov	r0, r8
   86186:	465b      	mov	r3, fp
   86188:	f001 fe2c 	bl	87de4 <_mbrtowc_r>
   8618c:	1c42      	adds	r2, r0, #1
   8618e:	f000 8238 	beq.w	86602 <__svfscanf_r+0x77e>
   86192:	b918      	cbnz	r0, 8619c <__svfscanf_r+0x318>
   86194:	b927      	cbnz	r7, 861a0 <__svfscanf_r+0x31c>
   86196:	f8c9 7000 	str.w	r7, [r9]
   8619a:	e001      	b.n	861a0 <__svfscanf_r+0x31c>
   8619c:	3002      	adds	r0, #2
   8619e:	d007      	beq.n	861b0 <__svfscanf_r+0x32c>
   861a0:	445e      	add	r6, fp
   861a2:	f10a 3aff 	add.w	sl, sl, #4294967295
   861a6:	b90f      	cbnz	r7, 861ac <__svfscanf_r+0x328>
   861a8:	f109 0904 	add.w	r9, r9, #4
   861ac:	f04f 0b00 	mov.w	fp, #0
   861b0:	6862      	ldr	r2, [r4, #4]
   861b2:	2a00      	cmp	r2, #0
   861b4:	dc0c      	bgt.n	861d0 <__svfscanf_r+0x34c>
   861b6:	4640      	mov	r0, r8
   861b8:	4621      	mov	r1, r4
   861ba:	f002 fc04 	bl	889c6 <__srefill_r>
   861be:	b138      	cbz	r0, 861d0 <__svfscanf_r+0x34c>
   861c0:	f1bb 0f00 	cmp.w	fp, #0
   861c4:	f040 821d 	bne.w	86602 <__svfscanf_r+0x77e>
   861c8:	2f00      	cmp	r7, #0
   861ca:	f000 80fa 	beq.w	863c2 <__svfscanf_r+0x53e>
   861ce:	e673      	b.n	85eb8 <__svfscanf_r+0x34>
   861d0:	f1ba 0f00 	cmp.w	sl, #0
   861d4:	d1c2      	bne.n	8615c <__svfscanf_r+0x2d8>
   861d6:	e7f7      	b.n	861c8 <__svfscanf_r+0x344>
   861d8:	f01b 0f10 	tst.w	fp, #16
   861dc:	d01b      	beq.n	86216 <__svfscanf_r+0x392>
   861de:	6867      	ldr	r7, [r4, #4]
   861e0:	6820      	ldr	r0, [r4, #0]
   861e2:	4557      	cmp	r7, sl
   861e4:	da0f      	bge.n	86206 <__svfscanf_r+0x382>
   861e6:	19c2      	adds	r2, r0, r7
   861e8:	6022      	str	r2, [r4, #0]
   861ea:	4640      	mov	r0, r8
   861ec:	4621      	mov	r1, r4
   861ee:	44b9      	add	r9, r7
   861f0:	ebc7 0a0a 	rsb	sl, r7, sl
   861f4:	f002 fbe7 	bl	889c6 <__srefill_r>
   861f8:	2800      	cmp	r0, #0
   861fa:	d0f0      	beq.n	861de <__svfscanf_r+0x35a>
   861fc:	f1b9 0f00 	cmp.w	r9, #0
   86200:	f040 81fd 	bne.w	865fe <__svfscanf_r+0x77a>
   86204:	e1fd      	b.n	86602 <__svfscanf_r+0x77e>
   86206:	ebca 0107 	rsb	r1, sl, r7
   8620a:	eb00 030a 	add.w	r3, r0, sl
   8620e:	44d1      	add	r9, sl
   86210:	6061      	str	r1, [r4, #4]
   86212:	6023      	str	r3, [r4, #0]
   86214:	e1f3      	b.n	865fe <__svfscanf_r+0x77a>
   86216:	9400      	str	r4, [sp, #0]
   86218:	4640      	mov	r0, r8
   8621a:	6829      	ldr	r1, [r5, #0]
   8621c:	2201      	movs	r2, #1
   8621e:	4653      	mov	r3, sl
   86220:	f105 0904 	add.w	r9, r5, #4
   86224:	f000 fcd2 	bl	86bcc <_fread_r>
   86228:	2800      	cmp	r0, #0
   8622a:	f000 81ea 	beq.w	86602 <__svfscanf_r+0x77e>
   8622e:	1986      	adds	r6, r0, r6
   86230:	e116      	b.n	86460 <__svfscanf_r+0x5dc>
   86232:	f1ba 0f00 	cmp.w	sl, #0
   86236:	bf08      	it	eq
   86238:	f04f 3aff 	moveq.w	sl, #4294967295
   8623c:	f01b 0f10 	tst.w	fp, #16
   86240:	d01e      	beq.n	86280 <__svfscanf_r+0x3fc>
   86242:	f04f 0900 	mov.w	r9, #0
   86246:	6823      	ldr	r3, [r4, #0]
   86248:	a818      	add	r0, sp, #96	; 0x60
   8624a:	781a      	ldrb	r2, [r3, #0]
   8624c:	5c81      	ldrb	r1, [r0, r2]
   8624e:	b191      	cbz	r1, 86276 <__svfscanf_r+0x3f2>
   86250:	6862      	ldr	r2, [r4, #4]
   86252:	f109 0901 	add.w	r9, r9, #1
   86256:	1e50      	subs	r0, r2, #1
   86258:	3301      	adds	r3, #1
   8625a:	45ca      	cmp	sl, r9
   8625c:	6060      	str	r0, [r4, #4]
   8625e:	6023      	str	r3, [r4, #0]
   86260:	f000 81cd 	beq.w	865fe <__svfscanf_r+0x77a>
   86264:	2800      	cmp	r0, #0
   86266:	dcee      	bgt.n	86246 <__svfscanf_r+0x3c2>
   86268:	4640      	mov	r0, r8
   8626a:	4621      	mov	r1, r4
   8626c:	f002 fbab 	bl	889c6 <__srefill_r>
   86270:	2800      	cmp	r0, #0
   86272:	d0e8      	beq.n	86246 <__svfscanf_r+0x3c2>
   86274:	e1c3      	b.n	865fe <__svfscanf_r+0x77a>
   86276:	f1b9 0f00 	cmp.w	r9, #0
   8627a:	f040 81c0 	bne.w	865fe <__svfscanf_r+0x77a>
   8627e:	e1ce      	b.n	8661e <__svfscanf_r+0x79a>
   86280:	f8d5 9000 	ldr.w	r9, [r5]
   86284:	f105 0b04 	add.w	fp, r5, #4
   86288:	464d      	mov	r5, r9
   8628a:	6823      	ldr	r3, [r4, #0]
   8628c:	a918      	add	r1, sp, #96	; 0x60
   8628e:	7818      	ldrb	r0, [r3, #0]
   86290:	5c0a      	ldrb	r2, [r1, r0]
   86292:	b1ba      	cbz	r2, 862c4 <__svfscanf_r+0x440>
   86294:	6860      	ldr	r0, [r4, #4]
   86296:	1e41      	subs	r1, r0, #1
   86298:	6061      	str	r1, [r4, #4]
   8629a:	f813 2b01 	ldrb.w	r2, [r3], #1
   8629e:	f805 2b01 	strb.w	r2, [r5], #1
   862a2:	6023      	str	r3, [r4, #0]
   862a4:	eb09 030a 	add.w	r3, r9, sl
   862a8:	42ab      	cmp	r3, r5
   862aa:	d00b      	beq.n	862c4 <__svfscanf_r+0x440>
   862ac:	6860      	ldr	r0, [r4, #4]
   862ae:	2800      	cmp	r0, #0
   862b0:	dceb      	bgt.n	8628a <__svfscanf_r+0x406>
   862b2:	4640      	mov	r0, r8
   862b4:	4621      	mov	r1, r4
   862b6:	f002 fb86 	bl	889c6 <__srefill_r>
   862ba:	2800      	cmp	r0, #0
   862bc:	d0e5      	beq.n	8628a <__svfscanf_r+0x406>
   862be:	454d      	cmp	r5, r9
   862c0:	f000 819f 	beq.w	86602 <__svfscanf_r+0x77e>
   862c4:	ebb5 0909 	subs.w	r9, r5, r9
   862c8:	f000 81a9 	beq.w	8661e <__svfscanf_r+0x79a>
   862cc:	2700      	movs	r7, #0
   862ce:	702f      	strb	r7, [r5, #0]
   862d0:	9d04      	ldr	r5, [sp, #16]
   862d2:	1c69      	adds	r1, r5, #1
   862d4:	9104      	str	r1, [sp, #16]
   862d6:	465d      	mov	r5, fp
   862d8:	e191      	b.n	865fe <__svfscanf_r+0x77a>
   862da:	f1ba 0f00 	cmp.w	sl, #0
   862de:	bf08      	it	eq
   862e0:	f04f 3aff 	moveq.w	sl, #4294967295
   862e4:	f01b 0901 	ands.w	r9, fp, #1
   862e8:	d06f      	beq.n	863ca <__svfscanf_r+0x546>
   862ea:	2100      	movs	r1, #0
   862ec:	2208      	movs	r2, #8
   862ee:	a80c      	add	r0, sp, #48	; 0x30
   862f0:	f7fd fe57 	bl	83fa2 <memset>
   862f4:	f01b 0710 	ands.w	r7, fp, #16
   862f8:	d103      	bne.n	86302 <__svfscanf_r+0x47e>
   862fa:	f8d5 9000 	ldr.w	r9, [r5]
   862fe:	3504      	adds	r5, #4
   86300:	e001      	b.n	86306 <__svfscanf_r+0x482>
   86302:	f10d 0924 	add.w	r9, sp, #36	; 0x24
   86306:	f04f 0b00 	mov.w	fp, #0
   8630a:	6822      	ldr	r2, [r4, #0]
   8630c:	4990      	ldr	r1, [pc, #576]	; (86550 <__svfscanf_r+0x6cc>)
   8630e:	7813      	ldrb	r3, [r2, #0]
   86310:	6808      	ldr	r0, [r1, #0]
   86312:	18c2      	adds	r2, r0, r3
   86314:	7853      	ldrb	r3, [r2, #1]
   86316:	f003 0108 	and.w	r1, r3, #8
   8631a:	b2c8      	uxtb	r0, r1
   8631c:	2800      	cmp	r0, #0
   8631e:	d14b      	bne.n	863b8 <__svfscanf_r+0x534>
   86320:	f1ba 0f00 	cmp.w	sl, #0
   86324:	d048      	beq.n	863b8 <__svfscanf_r+0x534>
   86326:	f001 fac1 	bl	878ac <__locale_mb_cur_max>
   8632a:	4583      	cmp	fp, r0
   8632c:	f000 8169 	beq.w	86602 <__svfscanf_r+0x77e>
   86330:	6823      	ldr	r3, [r4, #0]
   86332:	6860      	ldr	r0, [r4, #4]
   86334:	f813 1b01 	ldrb.w	r1, [r3], #1
   86338:	aa0e      	add	r2, sp, #56	; 0x38
   8633a:	f802 100b 	strb.w	r1, [r2, fp]
   8633e:	6023      	str	r3, [r4, #0]
   86340:	1e41      	subs	r1, r0, #1
   86342:	ab0c      	add	r3, sp, #48	; 0x30
   86344:	f10b 0b01 	add.w	fp, fp, #1
   86348:	6061      	str	r1, [r4, #4]
   8634a:	9300      	str	r3, [sp, #0]
   8634c:	4640      	mov	r0, r8
   8634e:	465b      	mov	r3, fp
   86350:	4649      	mov	r1, r9
   86352:	f001 fd47 	bl	87de4 <_mbrtowc_r>
   86356:	1c43      	adds	r3, r0, #1
   86358:	f000 8153 	beq.w	86602 <__svfscanf_r+0x77e>
   8635c:	b910      	cbnz	r0, 86364 <__svfscanf_r+0x4e0>
   8635e:	f8c9 0000 	str.w	r0, [r9]
   86362:	e001      	b.n	86368 <__svfscanf_r+0x4e4>
   86364:	3002      	adds	r0, #2
   86366:	d01a      	beq.n	8639e <__svfscanf_r+0x51a>
   86368:	f8d9 0000 	ldr.w	r0, [r9]
   8636c:	f001 fa6a 	bl	87844 <iswspace>
   86370:	b160      	cbz	r0, 8638c <__svfscanf_r+0x508>
   86372:	f1bb 0f00 	cmp.w	fp, #0
   86376:	d01f      	beq.n	863b8 <__svfscanf_r+0x534>
   86378:	f10b 3bff 	add.w	fp, fp, #4294967295
   8637c:	a90e      	add	r1, sp, #56	; 0x38
   8637e:	4640      	mov	r0, r8
   86380:	f811 100b 	ldrb.w	r1, [r1, fp]
   86384:	4622      	mov	r2, r4
   86386:	f003 fbac 	bl	89ae2 <_ungetc_r>
   8638a:	e7f2      	b.n	86372 <__svfscanf_r+0x4ee>
   8638c:	445e      	add	r6, fp
   8638e:	f10a 3aff 	add.w	sl, sl, #4294967295
   86392:	b91f      	cbnz	r7, 8639c <__svfscanf_r+0x518>
   86394:	f109 0904 	add.w	r9, r9, #4
   86398:	46bb      	mov	fp, r7
   8639a:	e000      	b.n	8639e <__svfscanf_r+0x51a>
   8639c:	4683      	mov	fp, r0
   8639e:	6862      	ldr	r2, [r4, #4]
   863a0:	2a00      	cmp	r2, #0
   863a2:	dcb2      	bgt.n	8630a <__svfscanf_r+0x486>
   863a4:	4640      	mov	r0, r8
   863a6:	4621      	mov	r1, r4
   863a8:	f002 fb0d 	bl	889c6 <__srefill_r>
   863ac:	2800      	cmp	r0, #0
   863ae:	d0ac      	beq.n	8630a <__svfscanf_r+0x486>
   863b0:	f1bb 0f00 	cmp.w	fp, #0
   863b4:	f040 8125 	bne.w	86602 <__svfscanf_r+0x77e>
   863b8:	2f00      	cmp	r7, #0
   863ba:	f47f ad7d 	bne.w	85eb8 <__svfscanf_r+0x34>
   863be:	f8c9 7000 	str.w	r7, [r9]
   863c2:	9f04      	ldr	r7, [sp, #16]
   863c4:	1c78      	adds	r0, r7, #1
   863c6:	9004      	str	r0, [sp, #16]
   863c8:	e576      	b.n	85eb8 <__svfscanf_r+0x34>
   863ca:	f01b 0f10 	tst.w	fp, #16
   863ce:	d01e      	beq.n	8640e <__svfscanf_r+0x58a>
   863d0:	4a5f      	ldr	r2, [pc, #380]	; (86550 <__svfscanf_r+0x6cc>)
   863d2:	6820      	ldr	r0, [r4, #0]
   863d4:	6813      	ldr	r3, [r2, #0]
   863d6:	7807      	ldrb	r7, [r0, #0]
   863d8:	19d9      	adds	r1, r3, r7
   863da:	784f      	ldrb	r7, [r1, #1]
   863dc:	f007 0208 	and.w	r2, r7, #8
   863e0:	b2d3      	uxtb	r3, r2
   863e2:	2b00      	cmp	r3, #0
   863e4:	f040 810b 	bne.w	865fe <__svfscanf_r+0x77a>
   863e8:	6861      	ldr	r1, [r4, #4]
   863ea:	f109 0901 	add.w	r9, r9, #1
   863ee:	1e4f      	subs	r7, r1, #1
   863f0:	3001      	adds	r0, #1
   863f2:	45ca      	cmp	sl, r9
   863f4:	6067      	str	r7, [r4, #4]
   863f6:	6020      	str	r0, [r4, #0]
   863f8:	f000 8101 	beq.w	865fe <__svfscanf_r+0x77a>
   863fc:	2f00      	cmp	r7, #0
   863fe:	dce7      	bgt.n	863d0 <__svfscanf_r+0x54c>
   86400:	4640      	mov	r0, r8
   86402:	4621      	mov	r1, r4
   86404:	f002 fadf 	bl	889c6 <__srefill_r>
   86408:	2800      	cmp	r0, #0
   8640a:	d0e1      	beq.n	863d0 <__svfscanf_r+0x54c>
   8640c:	e0f7      	b.n	865fe <__svfscanf_r+0x77a>
   8640e:	f8d5 b000 	ldr.w	fp, [r5]
   86412:	f105 0904 	add.w	r9, r5, #4
   86416:	465d      	mov	r5, fp
   86418:	494d      	ldr	r1, [pc, #308]	; (86550 <__svfscanf_r+0x6cc>)
   8641a:	6820      	ldr	r0, [r4, #0]
   8641c:	680f      	ldr	r7, [r1, #0]
   8641e:	7803      	ldrb	r3, [r0, #0]
   86420:	18fa      	adds	r2, r7, r3
   86422:	7853      	ldrb	r3, [r2, #1]
   86424:	f003 0108 	and.w	r1, r3, #8
   86428:	b2cf      	uxtb	r7, r1
   8642a:	b9a7      	cbnz	r7, 86456 <__svfscanf_r+0x5d2>
   8642c:	6862      	ldr	r2, [r4, #4]
   8642e:	1e53      	subs	r3, r2, #1
   86430:	6063      	str	r3, [r4, #4]
   86432:	f810 1b01 	ldrb.w	r1, [r0], #1
   86436:	f805 1b01 	strb.w	r1, [r5], #1
   8643a:	6020      	str	r0, [r4, #0]
   8643c:	eb0b 000a 	add.w	r0, fp, sl
   86440:	42a8      	cmp	r0, r5
   86442:	d008      	beq.n	86456 <__svfscanf_r+0x5d2>
   86444:	6867      	ldr	r7, [r4, #4]
   86446:	2f00      	cmp	r7, #0
   86448:	dce6      	bgt.n	86418 <__svfscanf_r+0x594>
   8644a:	4640      	mov	r0, r8
   8644c:	4621      	mov	r1, r4
   8644e:	f002 faba 	bl	889c6 <__srefill_r>
   86452:	2800      	cmp	r0, #0
   86454:	d0e0      	beq.n	86418 <__svfscanf_r+0x594>
   86456:	2200      	movs	r2, #0
   86458:	702a      	strb	r2, [r5, #0]
   8645a:	ebcb 0505 	rsb	r5, fp, r5
   8645e:	1976      	adds	r6, r6, r5
   86460:	9b04      	ldr	r3, [sp, #16]
   86462:	464d      	mov	r5, r9
   86464:	1c59      	adds	r1, r3, #1
   86466:	9104      	str	r1, [sp, #16]
   86468:	e526      	b.n	85eb8 <__svfscanf_r+0x34>
   8646a:	f10a 33ff 	add.w	r3, sl, #4294967295
   8646e:	2b26      	cmp	r3, #38	; 0x26
   86470:	bf86      	itte	hi
   86472:	f1aa 0327 	subhi.w	r3, sl, #39	; 0x27
   86476:	f04f 0a27 	movhi.w	sl, #39	; 0x27
   8647a:	2300      	movls	r3, #0
   8647c:	2700      	movs	r7, #0
   8647e:	f44b 6b58 	orr.w	fp, fp, #3456	; 0xd80
   86482:	9706      	str	r7, [sp, #24]
   86484:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   86488:	6821      	ldr	r1, [r4, #0]
   8648a:	780a      	ldrb	r2, [r1, #0]
   8648c:	2a39      	cmp	r2, #57	; 0x39
   8648e:	d809      	bhi.n	864a4 <__svfscanf_r+0x620>
   86490:	2a38      	cmp	r2, #56	; 0x38
   86492:	d235      	bcs.n	86500 <__svfscanf_r+0x67c>
   86494:	2a30      	cmp	r2, #48	; 0x30
   86496:	d014      	beq.n	864c2 <__svfscanf_r+0x63e>
   86498:	d82c      	bhi.n	864f4 <__svfscanf_r+0x670>
   8649a:	2a2b      	cmp	r2, #43	; 0x2b
   8649c:	d03d      	beq.n	8651a <__svfscanf_r+0x696>
   8649e:	2a2d      	cmp	r2, #45	; 0x2d
   864a0:	d164      	bne.n	8656c <__svfscanf_r+0x6e8>
   864a2:	e03a      	b.n	8651a <__svfscanf_r+0x696>
   864a4:	2a58      	cmp	r2, #88	; 0x58
   864a6:	d03e      	beq.n	86526 <__svfscanf_r+0x6a2>
   864a8:	d804      	bhi.n	864b4 <__svfscanf_r+0x630>
   864aa:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   864ae:	2805      	cmp	r0, #5
   864b0:	d85c      	bhi.n	8656c <__svfscanf_r+0x6e8>
   864b2:	e02c      	b.n	8650e <__svfscanf_r+0x68a>
   864b4:	2a61      	cmp	r2, #97	; 0x61
   864b6:	d359      	bcc.n	8656c <__svfscanf_r+0x6e8>
   864b8:	2a66      	cmp	r2, #102	; 0x66
   864ba:	d928      	bls.n	8650e <__svfscanf_r+0x68a>
   864bc:	2a78      	cmp	r2, #120	; 0x78
   864be:	d155      	bne.n	8656c <__svfscanf_r+0x6e8>
   864c0:	e031      	b.n	86526 <__svfscanf_r+0x6a2>
   864c2:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   864c6:	d039      	beq.n	8653c <__svfscanf_r+0x6b8>
   864c8:	9f02      	ldr	r7, [sp, #8]
   864ca:	b91f      	cbnz	r7, 864d4 <__svfscanf_r+0x650>
   864cc:	2708      	movs	r7, #8
   864ce:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
   864d2:	9702      	str	r7, [sp, #8]
   864d4:	f41b 6f80 	tst.w	fp, #1024	; 0x400
   864d8:	d002      	beq.n	864e0 <__svfscanf_r+0x65c>
   864da:	f42b 6bb0 	bic.w	fp, fp, #1408	; 0x580
   864de:	e02d      	b.n	8653c <__svfscanf_r+0x6b8>
   864e0:	f42b 7b60 	bic.w	fp, fp, #896	; 0x380
   864e4:	b113      	cbz	r3, 864ec <__svfscanf_r+0x668>
   864e6:	3b01      	subs	r3, #1
   864e8:	f10a 0a01 	add.w	sl, sl, #1
   864ec:	9f06      	ldr	r7, [sp, #24]
   864ee:	3701      	adds	r7, #1
   864f0:	9706      	str	r7, [sp, #24]
   864f2:	e025      	b.n	86540 <__svfscanf_r+0x6bc>
   864f4:	9f02      	ldr	r7, [sp, #8]
   864f6:	4817      	ldr	r0, [pc, #92]	; (86554 <__svfscanf_r+0x6d0>)
   864f8:	f930 0017 	ldrsh.w	r0, [r0, r7, lsl #1]
   864fc:	9002      	str	r0, [sp, #8]
   864fe:	e009      	b.n	86514 <__svfscanf_r+0x690>
   86500:	9f02      	ldr	r7, [sp, #8]
   86502:	4814      	ldr	r0, [pc, #80]	; (86554 <__svfscanf_r+0x6d0>)
   86504:	f930 0017 	ldrsh.w	r0, [r0, r7, lsl #1]
   86508:	9002      	str	r0, [sp, #8]
   8650a:	2808      	cmp	r0, #8
   8650c:	e001      	b.n	86512 <__svfscanf_r+0x68e>
   8650e:	9f02      	ldr	r7, [sp, #8]
   86510:	2f0a      	cmp	r7, #10
   86512:	dd2b      	ble.n	8656c <__svfscanf_r+0x6e8>
   86514:	f42b 6b38 	bic.w	fp, fp, #2944	; 0xb80
   86518:	e010      	b.n	8653c <__svfscanf_r+0x6b8>
   8651a:	f01b 0f80 	tst.w	fp, #128	; 0x80
   8651e:	d025      	beq.n	8656c <__svfscanf_r+0x6e8>
   86520:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   86524:	e00a      	b.n	8653c <__svfscanf_r+0x6b8>
   86526:	f40b 60c0 	and.w	r0, fp, #1536	; 0x600
   8652a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8652e:	d11d      	bne.n	8656c <__svfscanf_r+0x6e8>
   86530:	f42b 7c00 	bic.w	ip, fp, #512	; 0x200
   86534:	2710      	movs	r7, #16
   86536:	f44c 6ba0 	orr.w	fp, ip, #1280	; 0x500
   8653a:	9702      	str	r7, [sp, #8]
   8653c:	f809 2b01 	strb.w	r2, [r9], #1
   86540:	6862      	ldr	r2, [r4, #4]
   86542:	1e50      	subs	r0, r2, #1
   86544:	2800      	cmp	r0, #0
   86546:	6060      	str	r0, [r4, #4]
   86548:	dd06      	ble.n	86558 <__svfscanf_r+0x6d4>
   8654a:	3101      	adds	r1, #1
   8654c:	6021      	str	r1, [r4, #0]
   8654e:	e00a      	b.n	86566 <__svfscanf_r+0x6e2>
   86550:	20070468 	.word	0x20070468
   86554:	0008a806 	.word	0x0008a806
   86558:	4640      	mov	r0, r8
   8655a:	4621      	mov	r1, r4
   8655c:	9303      	str	r3, [sp, #12]
   8655e:	f002 fa32 	bl	889c6 <__srefill_r>
   86562:	9b03      	ldr	r3, [sp, #12]
   86564:	b910      	cbnz	r0, 8656c <__svfscanf_r+0x6e8>
   86566:	f1ba 0a01 	subs.w	sl, sl, #1
   8656a:	d18d      	bne.n	86488 <__svfscanf_r+0x604>
   8656c:	f41b 7f80 	tst.w	fp, #256	; 0x100
   86570:	d00e      	beq.n	86590 <__svfscanf_r+0x70c>
   86572:	aa0e      	add	r2, sp, #56	; 0x38
   86574:	4591      	cmp	r9, r2
   86576:	d908      	bls.n	8658a <__svfscanf_r+0x706>
   86578:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   8657c:	4640      	mov	r0, r8
   8657e:	4622      	mov	r2, r4
   86580:	f003 faaf 	bl	89ae2 <_ungetc_r>
   86584:	f109 3aff 	add.w	sl, r9, #4294967295
   86588:	46d1      	mov	r9, sl
   8658a:	a80e      	add	r0, sp, #56	; 0x38
   8658c:	4581      	cmp	r9, r0
   8658e:	d046      	beq.n	8661e <__svfscanf_r+0x79a>
   86590:	f01b 0210 	ands.w	r2, fp, #16
   86594:	d12e      	bne.n	865f4 <__svfscanf_r+0x770>
   86596:	9b02      	ldr	r3, [sp, #8]
   86598:	4640      	mov	r0, r8
   8659a:	a90e      	add	r1, sp, #56	; 0x38
   8659c:	9f05      	ldr	r7, [sp, #20]
   8659e:	f889 2000 	strb.w	r2, [r9]
   865a2:	47b8      	blx	r7
   865a4:	f01b 0f20 	tst.w	fp, #32
   865a8:	f105 0304 	add.w	r3, r5, #4
   865ac:	d11c      	bne.n	865e8 <__svfscanf_r+0x764>
   865ae:	f01b 0f04 	tst.w	fp, #4
   865b2:	d002      	beq.n	865ba <__svfscanf_r+0x736>
   865b4:	682d      	ldr	r5, [r5, #0]
   865b6:	8028      	strh	r0, [r5, #0]
   865b8:	e018      	b.n	865ec <__svfscanf_r+0x768>
   865ba:	f01b 0201 	ands.w	r2, fp, #1
   865be:	d113      	bne.n	865e8 <__svfscanf_r+0x764>
   865c0:	f01b 0f02 	tst.w	fp, #2
   865c4:	d010      	beq.n	865e8 <__svfscanf_r+0x764>
   865c6:	4b19      	ldr	r3, [pc, #100]	; (8662c <__svfscanf_r+0x7a8>)
   865c8:	9f05      	ldr	r7, [sp, #20]
   865ca:	4640      	mov	r0, r8
   865cc:	429f      	cmp	r7, r3
   865ce:	a90e      	add	r1, sp, #56	; 0x38
   865d0:	9b02      	ldr	r3, [sp, #8]
   865d2:	d102      	bne.n	865da <__svfscanf_r+0x756>
   865d4:	f002 fd20 	bl	89018 <_strtoull_r>
   865d8:	e001      	b.n	865de <__svfscanf_r+0x75a>
   865da:	f002 fbc9 	bl	88d70 <_strtoll_r>
   865de:	682a      	ldr	r2, [r5, #0]
   865e0:	3504      	adds	r5, #4
   865e2:	e882 0003 	stmia.w	r2, {r0, r1}
   865e6:	e002      	b.n	865ee <__svfscanf_r+0x76a>
   865e8:	6829      	ldr	r1, [r5, #0]
   865ea:	6008      	str	r0, [r1, #0]
   865ec:	461d      	mov	r5, r3
   865ee:	9804      	ldr	r0, [sp, #16]
   865f0:	1c43      	adds	r3, r0, #1
   865f2:	9304      	str	r3, [sp, #16]
   865f4:	af0e      	add	r7, sp, #56	; 0x38
   865f6:	9a06      	ldr	r2, [sp, #24]
   865f8:	ebc7 0909 	rsb	r9, r7, r9
   865fc:	4491      	add	r9, r2
   865fe:	444e      	add	r6, r9
   86600:	e45a      	b.n	85eb8 <__svfscanf_r+0x34>
   86602:	f000 fa58 	bl	86ab6 <__sfp_lock_release>
   86606:	9f04      	ldr	r7, [sp, #16]
   86608:	b91f      	cbnz	r7, 86612 <__svfscanf_r+0x78e>
   8660a:	f04f 37ff 	mov.w	r7, #4294967295
   8660e:	9704      	str	r7, [sp, #16]
   86610:	e007      	b.n	86622 <__svfscanf_r+0x79e>
   86612:	89a1      	ldrh	r1, [r4, #12]
   86614:	f001 0240 	and.w	r2, r1, #64	; 0x40
   86618:	b210      	sxth	r0, r2
   8661a:	b110      	cbz	r0, 86622 <__svfscanf_r+0x79e>
   8661c:	e7f5      	b.n	8660a <__svfscanf_r+0x786>
   8661e:	f000 fa4a 	bl	86ab6 <__sfp_lock_release>
   86622:	9804      	ldr	r0, [sp, #16]
   86624:	b059      	add	sp, #356	; 0x164
   86626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8662a:	bf00      	nop
   8662c:	00088f01 	.word	0x00088f01

00086630 <_vfscanf_r>:
   86630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86634:	4688      	mov	r8, r1
   86636:	4617      	mov	r7, r2
   86638:	461e      	mov	r6, r3
   8663a:	4604      	mov	r4, r0
   8663c:	b118      	cbz	r0, 86646 <_vfscanf_r+0x16>
   8663e:	6b85      	ldr	r5, [r0, #56]	; 0x38
   86640:	b90d      	cbnz	r5, 86646 <_vfscanf_r+0x16>
   86642:	f000 f9d3 	bl	869ec <__sinit>
   86646:	4620      	mov	r0, r4
   86648:	4641      	mov	r1, r8
   8664a:	463a      	mov	r2, r7
   8664c:	4633      	mov	r3, r6
   8664e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86652:	f7ff bc17 	b.w	85e84 <__svfscanf_r>

00086656 <__svfscanf>:
   86656:	b530      	push	{r4, r5, lr}
   86658:	4613      	mov	r3, r2
   8665a:	4a05      	ldr	r2, [pc, #20]	; (86670 <__svfscanf+0x1a>)
   8665c:	4605      	mov	r5, r0
   8665e:	460c      	mov	r4, r1
   86660:	6810      	ldr	r0, [r2, #0]
   86662:	4629      	mov	r1, r5
   86664:	4622      	mov	r2, r4
   86666:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8666a:	f7ff bc0b 	b.w	85e84 <__svfscanf_r>
   8666e:	bf00      	nop
   86670:	20070010 	.word	0x20070010

00086674 <vfscanf>:
   86674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86678:	4c08      	ldr	r4, [pc, #32]	; (8669c <vfscanf+0x28>)
   8667a:	4680      	mov	r8, r0
   8667c:	6820      	ldr	r0, [r4, #0]
   8667e:	460f      	mov	r7, r1
   86680:	4616      	mov	r6, r2
   86682:	b118      	cbz	r0, 8668c <vfscanf+0x18>
   86684:	6b85      	ldr	r5, [r0, #56]	; 0x38
   86686:	b90d      	cbnz	r5, 8668c <vfscanf+0x18>
   86688:	f000 f9b0 	bl	869ec <__sinit>
   8668c:	6820      	ldr	r0, [r4, #0]
   8668e:	4641      	mov	r1, r8
   86690:	463a      	mov	r2, r7
   86692:	4633      	mov	r3, r6
   86694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86698:	f7ff bbf4 	b.w	85e84 <__svfscanf_r>
   8669c:	20070010 	.word	0x20070010

000866a0 <__swsetup_r>:
   866a0:	b538      	push	{r3, r4, r5, lr}
   866a2:	4b2c      	ldr	r3, [pc, #176]	; (86754 <__swsetup_r+0xb4>)
   866a4:	4605      	mov	r5, r0
   866a6:	6818      	ldr	r0, [r3, #0]
   866a8:	460c      	mov	r4, r1
   866aa:	b118      	cbz	r0, 866b4 <__swsetup_r+0x14>
   866ac:	6b82      	ldr	r2, [r0, #56]	; 0x38
   866ae:	b90a      	cbnz	r2, 866b4 <__swsetup_r+0x14>
   866b0:	f000 f99c 	bl	869ec <__sinit>
   866b4:	89a0      	ldrh	r0, [r4, #12]
   866b6:	f000 0108 	and.w	r1, r0, #8
   866ba:	b20b      	sxth	r3, r1
   866bc:	bb0b      	cbnz	r3, 86702 <__swsetup_r+0x62>
   866be:	f000 0210 	and.w	r2, r0, #16
   866c2:	b211      	sxth	r1, r2
   866c4:	b911      	cbnz	r1, 866cc <__swsetup_r+0x2c>
   866c6:	f04f 30ff 	mov.w	r0, #4294967295
   866ca:	bd38      	pop	{r3, r4, r5, pc}
   866cc:	f000 0004 	and.w	r0, r0, #4
   866d0:	b203      	sxth	r3, r0
   866d2:	b193      	cbz	r3, 866fa <__swsetup_r+0x5a>
   866d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   866d6:	b141      	cbz	r1, 866ea <__swsetup_r+0x4a>
   866d8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   866dc:	4291      	cmp	r1, r2
   866de:	d002      	beq.n	866e6 <__swsetup_r+0x46>
   866e0:	4628      	mov	r0, r5
   866e2:	f000 fb1f 	bl	86d24 <_free_r>
   866e6:	2100      	movs	r1, #0
   866e8:	6321      	str	r1, [r4, #48]	; 0x30
   866ea:	89a0      	ldrh	r0, [r4, #12]
   866ec:	6921      	ldr	r1, [r4, #16]
   866ee:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   866f2:	2200      	movs	r2, #0
   866f4:	81a3      	strh	r3, [r4, #12]
   866f6:	6062      	str	r2, [r4, #4]
   866f8:	6021      	str	r1, [r4, #0]
   866fa:	89a0      	ldrh	r0, [r4, #12]
   866fc:	f040 0308 	orr.w	r3, r0, #8
   86700:	81a3      	strh	r3, [r4, #12]
   86702:	6922      	ldr	r2, [r4, #16]
   86704:	b94a      	cbnz	r2, 8671a <__swsetup_r+0x7a>
   86706:	89a1      	ldrh	r1, [r4, #12]
   86708:	f401 7020 	and.w	r0, r1, #640	; 0x280
   8670c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   86710:	d003      	beq.n	8671a <__swsetup_r+0x7a>
   86712:	4628      	mov	r0, r5
   86714:	4621      	mov	r1, r4
   86716:	f001 f8e7 	bl	878e8 <__smakebuf_r>
   8671a:	89a3      	ldrh	r3, [r4, #12]
   8671c:	f013 0201 	ands.w	r2, r3, #1
   86720:	d005      	beq.n	8672e <__swsetup_r+0x8e>
   86722:	6961      	ldr	r1, [r4, #20]
   86724:	2200      	movs	r2, #0
   86726:	4248      	negs	r0, r1
   86728:	60a2      	str	r2, [r4, #8]
   8672a:	61a0      	str	r0, [r4, #24]
   8672c:	e007      	b.n	8673e <__swsetup_r+0x9e>
   8672e:	f003 0102 	and.w	r1, r3, #2
   86732:	b208      	sxth	r0, r1
   86734:	b908      	cbnz	r0, 8673a <__swsetup_r+0x9a>
   86736:	6963      	ldr	r3, [r4, #20]
   86738:	e000      	b.n	8673c <__swsetup_r+0x9c>
   8673a:	4613      	mov	r3, r2
   8673c:	60a3      	str	r3, [r4, #8]
   8673e:	6923      	ldr	r3, [r4, #16]
   86740:	b933      	cbnz	r3, 86750 <__swsetup_r+0xb0>
   86742:	89a2      	ldrh	r2, [r4, #12]
   86744:	f002 0180 	and.w	r1, r2, #128	; 0x80
   86748:	b208      	sxth	r0, r1
   8674a:	2800      	cmp	r0, #0
   8674c:	d1bb      	bne.n	866c6 <__swsetup_r+0x26>
   8674e:	bd38      	pop	{r3, r4, r5, pc}
   86750:	2000      	movs	r0, #0
   86752:	bd38      	pop	{r3, r4, r5, pc}
   86754:	20070010 	.word	0x20070010

00086758 <__register_exitproc>:
   86758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8675c:	4698      	mov	r8, r3
   8675e:	4b23      	ldr	r3, [pc, #140]	; (867ec <__register_exitproc+0x94>)
   86760:	4606      	mov	r6, r0
   86762:	681c      	ldr	r4, [r3, #0]
   86764:	460f      	mov	r7, r1
   86766:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8676a:	4691      	mov	r9, r2
   8676c:	b918      	cbnz	r0, 86776 <__register_exitproc+0x1e>
   8676e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   86772:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   86776:	6841      	ldr	r1, [r0, #4]
   86778:	291f      	cmp	r1, #31
   8677a:	dd16      	ble.n	867aa <__register_exitproc+0x52>
   8677c:	481c      	ldr	r0, [pc, #112]	; (867f0 <__register_exitproc+0x98>)
   8677e:	b918      	cbnz	r0, 86788 <__register_exitproc+0x30>
   86780:	f04f 30ff 	mov.w	r0, #4294967295
   86784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86788:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8678c:	f001 f918 	bl	879c0 <malloc>
   86790:	2800      	cmp	r0, #0
   86792:	d0f5      	beq.n	86780 <__register_exitproc+0x28>
   86794:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   86798:	2500      	movs	r5, #0
   8679a:	6045      	str	r5, [r0, #4]
   8679c:	6002      	str	r2, [r0, #0]
   8679e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   867a2:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   867a6:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   867aa:	b1b6      	cbz	r6, 867da <__register_exitproc+0x82>
   867ac:	6844      	ldr	r4, [r0, #4]
   867ae:	2201      	movs	r2, #1
   867b0:	fa02 f204 	lsl.w	r2, r2, r4
   867b4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   867b8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   867bc:	4311      	orrs	r1, r2
   867be:	2e02      	cmp	r6, #2
   867c0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   867c4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   867c8:	461c      	mov	r4, r3
   867ca:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   867ce:	d104      	bne.n	867da <__register_exitproc+0x82>
   867d0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   867d4:	431a      	orrs	r2, r3
   867d6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   867da:	6841      	ldr	r1, [r0, #4]
   867dc:	1c8b      	adds	r3, r1, #2
   867de:	1c4a      	adds	r2, r1, #1
   867e0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   867e4:	6042      	str	r2, [r0, #4]
   867e6:	2000      	movs	r0, #0
   867e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   867ec:	0008a764 	.word	0x0008a764
   867f0:	000879c1 	.word	0x000879c1

000867f4 <register_fini>:
   867f4:	4b02      	ldr	r3, [pc, #8]	; (86800 <register_fini+0xc>)
   867f6:	b113      	cbz	r3, 867fe <register_fini+0xa>
   867f8:	4802      	ldr	r0, [pc, #8]	; (86804 <register_fini+0x10>)
   867fa:	f7fd bb63 	b.w	83ec4 <atexit>
   867fe:	4770      	bx	lr
   86800:	00000000 	.word	0x00000000
   86804:	00083ed9 	.word	0x00083ed9

00086808 <_fflush_r>:
   86808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8680c:	460c      	mov	r4, r1
   8680e:	4605      	mov	r5, r0
   86810:	b118      	cbz	r0, 8681a <_fflush_r+0x12>
   86812:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86814:	b90b      	cbnz	r3, 8681a <_fflush_r+0x12>
   86816:	f000 f8e9 	bl	869ec <__sinit>
   8681a:	89a2      	ldrh	r2, [r4, #12]
   8681c:	b332      	cbz	r2, 8686c <_fflush_r+0x64>
   8681e:	f002 0008 	and.w	r0, r2, #8
   86822:	b201      	sxth	r1, r0
   86824:	2900      	cmp	r1, #0
   86826:	d162      	bne.n	868ee <_fflush_r+0xe6>
   86828:	6861      	ldr	r1, [r4, #4]
   8682a:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   8682e:	2900      	cmp	r1, #0
   86830:	81a0      	strh	r0, [r4, #12]
   86832:	dc02      	bgt.n	8683a <_fflush_r+0x32>
   86834:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   86836:	2b00      	cmp	r3, #0
   86838:	dd18      	ble.n	8686c <_fflush_r+0x64>
   8683a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   8683c:	b1b6      	cbz	r6, 8686c <_fflush_r+0x64>
   8683e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   86842:	2000      	movs	r0, #0
   86844:	b212      	sxth	r2, r2
   86846:	682f      	ldr	r7, [r5, #0]
   86848:	6028      	str	r0, [r5, #0]
   8684a:	b10a      	cbz	r2, 86850 <_fflush_r+0x48>
   8684c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   8684e:	e010      	b.n	86872 <_fflush_r+0x6a>
   86850:	2301      	movs	r3, #1
   86852:	4628      	mov	r0, r5
   86854:	69e1      	ldr	r1, [r4, #28]
   86856:	47b0      	blx	r6
   86858:	4602      	mov	r2, r0
   8685a:	3001      	adds	r0, #1
   8685c:	d109      	bne.n	86872 <_fflush_r+0x6a>
   8685e:	6829      	ldr	r1, [r5, #0]
   86860:	b139      	cbz	r1, 86872 <_fflush_r+0x6a>
   86862:	291d      	cmp	r1, #29
   86864:	d001      	beq.n	8686a <_fflush_r+0x62>
   86866:	2916      	cmp	r1, #22
   86868:	d14e      	bne.n	86908 <_fflush_r+0x100>
   8686a:	602f      	str	r7, [r5, #0]
   8686c:	2000      	movs	r0, #0
   8686e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86872:	89a6      	ldrh	r6, [r4, #12]
   86874:	f006 0104 	and.w	r1, r6, #4
   86878:	b20b      	sxth	r3, r1
   8687a:	b12b      	cbz	r3, 86888 <_fflush_r+0x80>
   8687c:	6860      	ldr	r0, [r4, #4]
   8687e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   86880:	1a12      	subs	r2, r2, r0
   86882:	b10e      	cbz	r6, 86888 <_fflush_r+0x80>
   86884:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   86886:	1a52      	subs	r2, r2, r1
   86888:	69e1      	ldr	r1, [r4, #28]
   8688a:	2300      	movs	r3, #0
   8688c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   8688e:	4628      	mov	r0, r5
   86890:	47b0      	blx	r6
   86892:	1c41      	adds	r1, r0, #1
   86894:	d105      	bne.n	868a2 <_fflush_r+0x9a>
   86896:	682a      	ldr	r2, [r5, #0]
   86898:	b11a      	cbz	r2, 868a2 <_fflush_r+0x9a>
   8689a:	2a1d      	cmp	r2, #29
   8689c:	d001      	beq.n	868a2 <_fflush_r+0x9a>
   8689e:	2a16      	cmp	r2, #22
   868a0:	d11f      	bne.n	868e2 <_fflush_r+0xda>
   868a2:	89a3      	ldrh	r3, [r4, #12]
   868a4:	2100      	movs	r1, #0
   868a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   868aa:	81a2      	strh	r2, [r4, #12]
   868ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   868b0:	6922      	ldr	r2, [r4, #16]
   868b2:	6061      	str	r1, [r4, #4]
   868b4:	b219      	sxth	r1, r3
   868b6:	6022      	str	r2, [r4, #0]
   868b8:	b121      	cbz	r1, 868c4 <_fflush_r+0xbc>
   868ba:	1c42      	adds	r2, r0, #1
   868bc:	d101      	bne.n	868c2 <_fflush_r+0xba>
   868be:	682a      	ldr	r2, [r5, #0]
   868c0:	b902      	cbnz	r2, 868c4 <_fflush_r+0xbc>
   868c2:	6520      	str	r0, [r4, #80]	; 0x50
   868c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   868c6:	602f      	str	r7, [r5, #0]
   868c8:	2900      	cmp	r1, #0
   868ca:	d0cf      	beq.n	8686c <_fflush_r+0x64>
   868cc:	f104 0040 	add.w	r0, r4, #64	; 0x40
   868d0:	4281      	cmp	r1, r0
   868d2:	d002      	beq.n	868da <_fflush_r+0xd2>
   868d4:	4628      	mov	r0, r5
   868d6:	f000 fa25 	bl	86d24 <_free_r>
   868da:	2000      	movs	r0, #0
   868dc:	6320      	str	r0, [r4, #48]	; 0x30
   868de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   868e2:	89a3      	ldrh	r3, [r4, #12]
   868e4:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   868e8:	81a1      	strh	r1, [r4, #12]
   868ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   868ee:	6926      	ldr	r6, [r4, #16]
   868f0:	2e00      	cmp	r6, #0
   868f2:	d0bb      	beq.n	8686c <_fflush_r+0x64>
   868f4:	0792      	lsls	r2, r2, #30
   868f6:	6823      	ldr	r3, [r4, #0]
   868f8:	bf0c      	ite	eq
   868fa:	6962      	ldreq	r2, [r4, #20]
   868fc:	2200      	movne	r2, #0
   868fe:	ebc6 0803 	rsb	r8, r6, r3
   86902:	6026      	str	r6, [r4, #0]
   86904:	60a2      	str	r2, [r4, #8]
   86906:	e012      	b.n	8692e <_fflush_r+0x126>
   86908:	89a3      	ldrh	r3, [r4, #12]
   8690a:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   8690e:	81a0      	strh	r0, [r4, #12]
   86910:	f04f 30ff 	mov.w	r0, #4294967295
   86914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86918:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8691a:	4628      	mov	r0, r5
   8691c:	69e1      	ldr	r1, [r4, #28]
   8691e:	4632      	mov	r2, r6
   86920:	4643      	mov	r3, r8
   86922:	47b8      	blx	r7
   86924:	2800      	cmp	r0, #0
   86926:	ddef      	ble.n	86908 <_fflush_r+0x100>
   86928:	1836      	adds	r6, r6, r0
   8692a:	ebc0 0808 	rsb	r8, r0, r8
   8692e:	f1b8 0f00 	cmp.w	r8, #0
   86932:	dcf1      	bgt.n	86918 <_fflush_r+0x110>
   86934:	e79a      	b.n	8686c <_fflush_r+0x64>

00086936 <fflush>:
   86936:	4601      	mov	r1, r0
   86938:	b920      	cbnz	r0, 86944 <fflush+0xe>
   8693a:	4804      	ldr	r0, [pc, #16]	; (8694c <fflush+0x16>)
   8693c:	4904      	ldr	r1, [pc, #16]	; (86950 <fflush+0x1a>)
   8693e:	6800      	ldr	r0, [r0, #0]
   86940:	f000 bc22 	b.w	87188 <_fwalk_reent>
   86944:	4b03      	ldr	r3, [pc, #12]	; (86954 <fflush+0x1e>)
   86946:	6818      	ldr	r0, [r3, #0]
   86948:	f7ff bf5e 	b.w	86808 <_fflush_r>
   8694c:	0008a764 	.word	0x0008a764
   86950:	00086809 	.word	0x00086809
   86954:	20070010 	.word	0x20070010

00086958 <__fp_lock>:
   86958:	2000      	movs	r0, #0
   8695a:	4770      	bx	lr

0008695c <__fp_unlock>:
   8695c:	2000      	movs	r0, #0
   8695e:	4770      	bx	lr

00086960 <_cleanup_r>:
   86960:	4901      	ldr	r1, [pc, #4]	; (86968 <_cleanup_r+0x8>)
   86962:	f000 bbf0 	b.w	87146 <_fwalk>
   86966:	bf00      	nop
   86968:	00089e55 	.word	0x00089e55

0008696c <std.isra.0>:
   8696c:	2300      	movs	r3, #0
   8696e:	b510      	push	{r4, lr}
   86970:	4604      	mov	r4, r0
   86972:	6003      	str	r3, [r0, #0]
   86974:	6043      	str	r3, [r0, #4]
   86976:	6083      	str	r3, [r0, #8]
   86978:	8181      	strh	r1, [r0, #12]
   8697a:	6643      	str	r3, [r0, #100]	; 0x64
   8697c:	81c2      	strh	r2, [r0, #14]
   8697e:	6103      	str	r3, [r0, #16]
   86980:	6143      	str	r3, [r0, #20]
   86982:	6183      	str	r3, [r0, #24]
   86984:	4619      	mov	r1, r3
   86986:	2208      	movs	r2, #8
   86988:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   8698c:	f7fd fb09 	bl	83fa2 <memset>
   86990:	4804      	ldr	r0, [pc, #16]	; (869a4 <std.isra.0+0x38>)
   86992:	4905      	ldr	r1, [pc, #20]	; (869a8 <std.isra.0+0x3c>)
   86994:	4a05      	ldr	r2, [pc, #20]	; (869ac <std.isra.0+0x40>)
   86996:	4b06      	ldr	r3, [pc, #24]	; (869b0 <std.isra.0+0x44>)
   86998:	61e4      	str	r4, [r4, #28]
   8699a:	6220      	str	r0, [r4, #32]
   8699c:	6261      	str	r1, [r4, #36]	; 0x24
   8699e:	62a2      	str	r2, [r4, #40]	; 0x28
   869a0:	62e3      	str	r3, [r4, #44]	; 0x2c
   869a2:	bd10      	pop	{r4, pc}
   869a4:	00088ba5 	.word	0x00088ba5
   869a8:	00088bcb 	.word	0x00088bcb
   869ac:	00088c07 	.word	0x00088c07
   869b0:	00088c2b 	.word	0x00088c2b

000869b4 <__sfmoreglue>:
   869b4:	b570      	push	{r4, r5, r6, lr}
   869b6:	2568      	movs	r5, #104	; 0x68
   869b8:	434d      	muls	r5, r1
   869ba:	460e      	mov	r6, r1
   869bc:	f105 010c 	add.w	r1, r5, #12
   869c0:	f001 f80e 	bl	879e0 <_malloc_r>
   869c4:	4604      	mov	r4, r0
   869c6:	b140      	cbz	r0, 869da <__sfmoreglue+0x26>
   869c8:	f100 000c 	add.w	r0, r0, #12
   869cc:	2100      	movs	r1, #0
   869ce:	e884 0042 	stmia.w	r4, {r1, r6}
   869d2:	60a0      	str	r0, [r4, #8]
   869d4:	462a      	mov	r2, r5
   869d6:	f7fd fae4 	bl	83fa2 <memset>
   869da:	4620      	mov	r0, r4
   869dc:	bd70      	pop	{r4, r5, r6, pc}

000869de <_cleanup>:
   869de:	4b02      	ldr	r3, [pc, #8]	; (869e8 <_cleanup+0xa>)
   869e0:	6818      	ldr	r0, [r3, #0]
   869e2:	f7ff bfbd 	b.w	86960 <_cleanup_r>
   869e6:	bf00      	nop
   869e8:	0008a764 	.word	0x0008a764

000869ec <__sinit>:
   869ec:	b538      	push	{r3, r4, r5, lr}
   869ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   869f0:	4604      	mov	r4, r0
   869f2:	b9eb      	cbnz	r3, 86a30 <__sinit+0x44>
   869f4:	4a0f      	ldr	r2, [pc, #60]	; (86a34 <__sinit+0x48>)
   869f6:	2501      	movs	r5, #1
   869f8:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   869fc:	63c2      	str	r2, [r0, #60]	; 0x3c
   869fe:	6385      	str	r5, [r0, #56]	; 0x38
   86a00:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   86a04:	2003      	movs	r0, #3
   86a06:	461a      	mov	r2, r3
   86a08:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   86a0c:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   86a10:	6860      	ldr	r0, [r4, #4]
   86a12:	2104      	movs	r1, #4
   86a14:	f7ff ffaa 	bl	8696c <std.isra.0>
   86a18:	68a0      	ldr	r0, [r4, #8]
   86a1a:	2109      	movs	r1, #9
   86a1c:	462a      	mov	r2, r5
   86a1e:	f7ff ffa5 	bl	8696c <std.isra.0>
   86a22:	68e0      	ldr	r0, [r4, #12]
   86a24:	2112      	movs	r1, #18
   86a26:	2202      	movs	r2, #2
   86a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86a2c:	f7ff bf9e 	b.w	8696c <std.isra.0>
   86a30:	bd38      	pop	{r3, r4, r5, pc}
   86a32:	bf00      	nop
   86a34:	00086961 	.word	0x00086961

00086a38 <__sfp>:
   86a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86a3a:	4b1d      	ldr	r3, [pc, #116]	; (86ab0 <__sfp+0x78>)
   86a3c:	4607      	mov	r7, r0
   86a3e:	681e      	ldr	r6, [r3, #0]
   86a40:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   86a42:	b910      	cbnz	r0, 86a4a <__sfp+0x12>
   86a44:	4630      	mov	r0, r6
   86a46:	f7ff ffd1 	bl	869ec <__sinit>
   86a4a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   86a4e:	68b4      	ldr	r4, [r6, #8]
   86a50:	6871      	ldr	r1, [r6, #4]
   86a52:	3901      	subs	r1, #1
   86a54:	d404      	bmi.n	86a60 <__sfp+0x28>
   86a56:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   86a5a:	b185      	cbz	r5, 86a7e <__sfp+0x46>
   86a5c:	3468      	adds	r4, #104	; 0x68
   86a5e:	e7f8      	b.n	86a52 <__sfp+0x1a>
   86a60:	6832      	ldr	r2, [r6, #0]
   86a62:	b10a      	cbz	r2, 86a68 <__sfp+0x30>
   86a64:	6836      	ldr	r6, [r6, #0]
   86a66:	e7f2      	b.n	86a4e <__sfp+0x16>
   86a68:	4638      	mov	r0, r7
   86a6a:	2104      	movs	r1, #4
   86a6c:	f7ff ffa2 	bl	869b4 <__sfmoreglue>
   86a70:	6030      	str	r0, [r6, #0]
   86a72:	2800      	cmp	r0, #0
   86a74:	d1f6      	bne.n	86a64 <__sfp+0x2c>
   86a76:	240c      	movs	r4, #12
   86a78:	603c      	str	r4, [r7, #0]
   86a7a:	4604      	mov	r4, r0
   86a7c:	e015      	b.n	86aaa <__sfp+0x72>
   86a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   86a82:	2001      	movs	r0, #1
   86a84:	81a0      	strh	r0, [r4, #12]
   86a86:	81e3      	strh	r3, [r4, #14]
   86a88:	6665      	str	r5, [r4, #100]	; 0x64
   86a8a:	6025      	str	r5, [r4, #0]
   86a8c:	60a5      	str	r5, [r4, #8]
   86a8e:	6065      	str	r5, [r4, #4]
   86a90:	6125      	str	r5, [r4, #16]
   86a92:	6165      	str	r5, [r4, #20]
   86a94:	61a5      	str	r5, [r4, #24]
   86a96:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   86a9a:	4629      	mov	r1, r5
   86a9c:	2208      	movs	r2, #8
   86a9e:	f7fd fa80 	bl	83fa2 <memset>
   86aa2:	6325      	str	r5, [r4, #48]	; 0x30
   86aa4:	6365      	str	r5, [r4, #52]	; 0x34
   86aa6:	6465      	str	r5, [r4, #68]	; 0x44
   86aa8:	64a5      	str	r5, [r4, #72]	; 0x48
   86aaa:	4620      	mov	r0, r4
   86aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86aae:	bf00      	nop
   86ab0:	0008a764 	.word	0x0008a764

00086ab4 <__sfp_lock_acquire>:
   86ab4:	4770      	bx	lr

00086ab6 <__sfp_lock_release>:
   86ab6:	4770      	bx	lr

00086ab8 <__sinit_lock_acquire>:
   86ab8:	4770      	bx	lr

00086aba <__sinit_lock_release>:
   86aba:	4770      	bx	lr

00086abc <__fp_lock_all>:
   86abc:	4b02      	ldr	r3, [pc, #8]	; (86ac8 <__fp_lock_all+0xc>)
   86abe:	4903      	ldr	r1, [pc, #12]	; (86acc <__fp_lock_all+0x10>)
   86ac0:	6818      	ldr	r0, [r3, #0]
   86ac2:	f000 bb40 	b.w	87146 <_fwalk>
   86ac6:	bf00      	nop
   86ac8:	20070010 	.word	0x20070010
   86acc:	00086959 	.word	0x00086959

00086ad0 <__fp_unlock_all>:
   86ad0:	4b02      	ldr	r3, [pc, #8]	; (86adc <__fp_unlock_all+0xc>)
   86ad2:	4903      	ldr	r1, [pc, #12]	; (86ae0 <__fp_unlock_all+0x10>)
   86ad4:	6818      	ldr	r0, [r3, #0]
   86ad6:	f000 bb36 	b.w	87146 <_fwalk>
   86ada:	bf00      	nop
   86adc:	20070010 	.word	0x20070010
   86ae0:	0008695d 	.word	0x0008695d

00086ae4 <_fputwc_r>:
   86ae4:	8993      	ldrh	r3, [r2, #12]
   86ae6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   86aea:	4614      	mov	r4, r2
   86aec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   86af0:	4680      	mov	r8, r0
   86af2:	b210      	sxth	r0, r2
   86af4:	460e      	mov	r6, r1
   86af6:	b930      	cbnz	r0, 86b06 <_fputwc_r+0x22>
   86af8:	6e67      	ldr	r7, [r4, #100]	; 0x64
   86afa:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   86afe:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   86b02:	81a1      	strh	r1, [r4, #12]
   86b04:	6663      	str	r3, [r4, #100]	; 0x64
   86b06:	f000 fed1 	bl	878ac <__locale_mb_cur_max>
   86b0a:	2801      	cmp	r0, #1
   86b0c:	d106      	bne.n	86b1c <_fputwc_r+0x38>
   86b0e:	b12e      	cbz	r6, 86b1c <_fputwc_r+0x38>
   86b10:	2eff      	cmp	r6, #255	; 0xff
   86b12:	d803      	bhi.n	86b1c <_fputwc_r+0x38>
   86b14:	f88d 6004 	strb.w	r6, [sp, #4]
   86b18:	4607      	mov	r7, r0
   86b1a:	e00f      	b.n	86b3c <_fputwc_r+0x58>
   86b1c:	4632      	mov	r2, r6
   86b1e:	4640      	mov	r0, r8
   86b20:	a901      	add	r1, sp, #4
   86b22:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   86b26:	f003 f8ad 	bl	89c84 <_wcrtomb_r>
   86b2a:	1c42      	adds	r2, r0, #1
   86b2c:	4607      	mov	r7, r0
   86b2e:	d105      	bne.n	86b3c <_fputwc_r+0x58>
   86b30:	89a2      	ldrh	r2, [r4, #12]
   86b32:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   86b36:	81a0      	strh	r0, [r4, #12]
   86b38:	4638      	mov	r0, r7
   86b3a:	e031      	b.n	86ba0 <_fputwc_r+0xbc>
   86b3c:	2500      	movs	r5, #0
   86b3e:	42bd      	cmp	r5, r7
   86b40:	d02a      	beq.n	86b98 <_fputwc_r+0xb4>
   86b42:	68a1      	ldr	r1, [r4, #8]
   86b44:	ab01      	add	r3, sp, #4
   86b46:	1e4a      	subs	r2, r1, #1
   86b48:	2a00      	cmp	r2, #0
   86b4a:	60a2      	str	r2, [r4, #8]
   86b4c:	da1a      	bge.n	86b84 <_fputwc_r+0xa0>
   86b4e:	69a0      	ldr	r0, [r4, #24]
   86b50:	4282      	cmp	r2, r0
   86b52:	db0c      	blt.n	86b6e <_fputwc_r+0x8a>
   86b54:	6821      	ldr	r1, [r4, #0]
   86b56:	5d5a      	ldrb	r2, [r3, r5]
   86b58:	700a      	strb	r2, [r1, #0]
   86b5a:	6823      	ldr	r3, [r4, #0]
   86b5c:	7819      	ldrb	r1, [r3, #0]
   86b5e:	290a      	cmp	r1, #10
   86b60:	d003      	beq.n	86b6a <_fputwc_r+0x86>
   86b62:	3301      	adds	r3, #1
   86b64:	2200      	movs	r2, #0
   86b66:	6023      	str	r3, [r4, #0]
   86b68:	e013      	b.n	86b92 <_fputwc_r+0xae>
   86b6a:	4640      	mov	r0, r8
   86b6c:	e001      	b.n	86b72 <_fputwc_r+0x8e>
   86b6e:	5d59      	ldrb	r1, [r3, r5]
   86b70:	4640      	mov	r0, r8
   86b72:	4622      	mov	r2, r4
   86b74:	f003 f82c 	bl	89bd0 <__swbuf_r>
   86b78:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   86b7c:	4248      	negs	r0, r1
   86b7e:	eb50 0201 	adcs.w	r2, r0, r1
   86b82:	e006      	b.n	86b92 <_fputwc_r+0xae>
   86b84:	6820      	ldr	r0, [r4, #0]
   86b86:	5d59      	ldrb	r1, [r3, r5]
   86b88:	7001      	strb	r1, [r0, #0]
   86b8a:	6822      	ldr	r2, [r4, #0]
   86b8c:	1c53      	adds	r3, r2, #1
   86b8e:	6023      	str	r3, [r4, #0]
   86b90:	e000      	b.n	86b94 <_fputwc_r+0xb0>
   86b92:	b91a      	cbnz	r2, 86b9c <_fputwc_r+0xb8>
   86b94:	3501      	adds	r5, #1
   86b96:	e7d2      	b.n	86b3e <_fputwc_r+0x5a>
   86b98:	4630      	mov	r0, r6
   86b9a:	e001      	b.n	86ba0 <_fputwc_r+0xbc>
   86b9c:	f04f 30ff 	mov.w	r0, #4294967295
   86ba0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00086ba4 <fputwc>:
   86ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86ba6:	4c08      	ldr	r4, [pc, #32]	; (86bc8 <fputwc+0x24>)
   86ba8:	4607      	mov	r7, r0
   86baa:	6820      	ldr	r0, [r4, #0]
   86bac:	460e      	mov	r6, r1
   86bae:	b118      	cbz	r0, 86bb8 <fputwc+0x14>
   86bb0:	6b85      	ldr	r5, [r0, #56]	; 0x38
   86bb2:	b90d      	cbnz	r5, 86bb8 <fputwc+0x14>
   86bb4:	f7ff ff1a 	bl	869ec <__sinit>
   86bb8:	6820      	ldr	r0, [r4, #0]
   86bba:	4639      	mov	r1, r7
   86bbc:	4632      	mov	r2, r6
   86bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   86bc2:	f7ff bf8f 	b.w	86ae4 <_fputwc_r>
   86bc6:	bf00      	nop
   86bc8:	20070010 	.word	0x20070010

00086bcc <_fread_r>:
   86bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86bd0:	461e      	mov	r6, r3
   86bd2:	4613      	mov	r3, r2
   86bd4:	4373      	muls	r3, r6
   86bd6:	4682      	mov	sl, r0
   86bd8:	4688      	mov	r8, r1
   86bda:	4693      	mov	fp, r2
   86bdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86bde:	4699      	mov	r9, r3
   86be0:	d03e      	beq.n	86c60 <_fread_r+0x94>
   86be2:	b118      	cbz	r0, 86bec <_fread_r+0x20>
   86be4:	6b81      	ldr	r1, [r0, #56]	; 0x38
   86be6:	b909      	cbnz	r1, 86bec <_fread_r+0x20>
   86be8:	f7ff ff00 	bl	869ec <__sinit>
   86bec:	f7ff ff62 	bl	86ab4 <__sfp_lock_acquire>
   86bf0:	89a0      	ldrh	r0, [r4, #12]
   86bf2:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   86bf6:	b215      	sxth	r5, r2
   86bf8:	b935      	cbnz	r5, 86c08 <_fread_r+0x3c>
   86bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   86bfc:	f440 5700 	orr.w	r7, r0, #8192	; 0x2000
   86c00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
   86c04:	81a7      	strh	r7, [r4, #12]
   86c06:	6661      	str	r1, [r4, #100]	; 0x64
   86c08:	6860      	ldr	r0, [r4, #4]
   86c0a:	2800      	cmp	r0, #0
   86c0c:	da01      	bge.n	86c12 <_fread_r+0x46>
   86c0e:	2200      	movs	r2, #0
   86c10:	6062      	str	r2, [r4, #4]
   86c12:	464d      	mov	r5, r9
   86c14:	6867      	ldr	r7, [r4, #4]
   86c16:	4640      	mov	r0, r8
   86c18:	42bd      	cmp	r5, r7
   86c1a:	6821      	ldr	r1, [r4, #0]
   86c1c:	d914      	bls.n	86c48 <_fread_r+0x7c>
   86c1e:	463a      	mov	r2, r7
   86c20:	f7fd f9b6 	bl	83f90 <memcpy>
   86c24:	6822      	ldr	r2, [r4, #0]
   86c26:	4650      	mov	r0, sl
   86c28:	19d3      	adds	r3, r2, r7
   86c2a:	6023      	str	r3, [r4, #0]
   86c2c:	4621      	mov	r1, r4
   86c2e:	44b8      	add	r8, r7
   86c30:	1bed      	subs	r5, r5, r7
   86c32:	f001 fec8 	bl	889c6 <__srefill_r>
   86c36:	2800      	cmp	r0, #0
   86c38:	d0ec      	beq.n	86c14 <_fread_r+0x48>
   86c3a:	ebc5 0509 	rsb	r5, r5, r9
   86c3e:	f7ff ff3a 	bl	86ab6 <__sfp_lock_release>
   86c42:	fbb5 f6fb 	udiv	r6, r5, fp
   86c46:	e00c      	b.n	86c62 <_fread_r+0x96>
   86c48:	462a      	mov	r2, r5
   86c4a:	f7fd f9a1 	bl	83f90 <memcpy>
   86c4e:	6863      	ldr	r3, [r4, #4]
   86c50:	6820      	ldr	r0, [r4, #0]
   86c52:	1b59      	subs	r1, r3, r5
   86c54:	1945      	adds	r5, r0, r5
   86c56:	6061      	str	r1, [r4, #4]
   86c58:	6025      	str	r5, [r4, #0]
   86c5a:	f7ff ff2c 	bl	86ab6 <__sfp_lock_release>
   86c5e:	e000      	b.n	86c62 <_fread_r+0x96>
   86c60:	461e      	mov	r6, r3
   86c62:	4630      	mov	r0, r6
   86c64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086c68 <fread>:
   86c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   86c6a:	9300      	str	r3, [sp, #0]
   86c6c:	4b05      	ldr	r3, [pc, #20]	; (86c84 <fread+0x1c>)
   86c6e:	4606      	mov	r6, r0
   86c70:	460d      	mov	r5, r1
   86c72:	4614      	mov	r4, r2
   86c74:	6818      	ldr	r0, [r3, #0]
   86c76:	4631      	mov	r1, r6
   86c78:	462a      	mov	r2, r5
   86c7a:	4623      	mov	r3, r4
   86c7c:	f7ff ffa6 	bl	86bcc <_fread_r>
   86c80:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   86c82:	bf00      	nop
   86c84:	20070010 	.word	0x20070010

00086c88 <_malloc_trim_r>:
   86c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86c8a:	4d23      	ldr	r5, [pc, #140]	; (86d18 <_malloc_trim_r+0x90>)
   86c8c:	460e      	mov	r6, r1
   86c8e:	4604      	mov	r4, r0
   86c90:	f001 f930 	bl	87ef4 <__malloc_lock>
   86c94:	68ab      	ldr	r3, [r5, #8]
   86c96:	685f      	ldr	r7, [r3, #4]
   86c98:	f027 0703 	bic.w	r7, r7, #3
   86c9c:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   86ca0:	1b81      	subs	r1, r0, r6
   86ca2:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   86ca6:	f022 060f 	bic.w	r6, r2, #15
   86caa:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   86cae:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   86cb2:	da04      	bge.n	86cbe <_malloc_trim_r+0x36>
   86cb4:	4620      	mov	r0, r4
   86cb6:	f001 f91e 	bl	87ef6 <__malloc_unlock>
   86cba:	2000      	movs	r0, #0
   86cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86cbe:	2100      	movs	r1, #0
   86cc0:	4620      	mov	r0, r4
   86cc2:	f001 ff2b 	bl	88b1c <_sbrk_r>
   86cc6:	68ab      	ldr	r3, [r5, #8]
   86cc8:	19d9      	adds	r1, r3, r7
   86cca:	4288      	cmp	r0, r1
   86ccc:	d1f2      	bne.n	86cb4 <_malloc_trim_r+0x2c>
   86cce:	4271      	negs	r1, r6
   86cd0:	4620      	mov	r0, r4
   86cd2:	f001 ff23 	bl	88b1c <_sbrk_r>
   86cd6:	3001      	adds	r0, #1
   86cd8:	d110      	bne.n	86cfc <_malloc_trim_r+0x74>
   86cda:	2100      	movs	r1, #0
   86cdc:	4620      	mov	r0, r4
   86cde:	f001 ff1d 	bl	88b1c <_sbrk_r>
   86ce2:	68ab      	ldr	r3, [r5, #8]
   86ce4:	1ac2      	subs	r2, r0, r3
   86ce6:	2a0f      	cmp	r2, #15
   86ce8:	dde4      	ble.n	86cb4 <_malloc_trim_r+0x2c>
   86cea:	490c      	ldr	r1, [pc, #48]	; (86d1c <_malloc_trim_r+0x94>)
   86cec:	f042 0201 	orr.w	r2, r2, #1
   86cf0:	6809      	ldr	r1, [r1, #0]
   86cf2:	605a      	str	r2, [r3, #4]
   86cf4:	1a40      	subs	r0, r0, r1
   86cf6:	490a      	ldr	r1, [pc, #40]	; (86d20 <_malloc_trim_r+0x98>)
   86cf8:	6008      	str	r0, [r1, #0]
   86cfa:	e7db      	b.n	86cb4 <_malloc_trim_r+0x2c>
   86cfc:	4b08      	ldr	r3, [pc, #32]	; (86d20 <_malloc_trim_r+0x98>)
   86cfe:	68a8      	ldr	r0, [r5, #8]
   86d00:	681a      	ldr	r2, [r3, #0]
   86d02:	1bbf      	subs	r7, r7, r6
   86d04:	f047 0701 	orr.w	r7, r7, #1
   86d08:	6047      	str	r7, [r0, #4]
   86d0a:	1b96      	subs	r6, r2, r6
   86d0c:	4620      	mov	r0, r4
   86d0e:	601e      	str	r6, [r3, #0]
   86d10:	f001 f8f1 	bl	87ef6 <__malloc_unlock>
   86d14:	2001      	movs	r0, #1
   86d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86d18:	200704e8 	.word	0x200704e8
   86d1c:	200708f0 	.word	0x200708f0
   86d20:	2007ab08 	.word	0x2007ab08

00086d24 <_free_r>:
   86d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86d26:	4606      	mov	r6, r0
   86d28:	460d      	mov	r5, r1
   86d2a:	2900      	cmp	r1, #0
   86d2c:	f000 80a6 	beq.w	86e7c <_free_r+0x158>
   86d30:	f001 f8e0 	bl	87ef4 <__malloc_lock>
   86d34:	f855 cc04 	ldr.w	ip, [r5, #-4]
   86d38:	4f51      	ldr	r7, [pc, #324]	; (86e80 <_free_r+0x15c>)
   86d3a:	f1a5 0308 	sub.w	r3, r5, #8
   86d3e:	f02c 0201 	bic.w	r2, ip, #1
   86d42:	189c      	adds	r4, r3, r2
   86d44:	68b9      	ldr	r1, [r7, #8]
   86d46:	6860      	ldr	r0, [r4, #4]
   86d48:	428c      	cmp	r4, r1
   86d4a:	f020 0003 	bic.w	r0, r0, #3
   86d4e:	f00c 0101 	and.w	r1, ip, #1
   86d52:	d11c      	bne.n	86d8e <_free_r+0x6a>
   86d54:	1882      	adds	r2, r0, r2
   86d56:	b939      	cbnz	r1, 86d68 <_free_r+0x44>
   86d58:	f855 1c08 	ldr.w	r1, [r5, #-8]
   86d5c:	1a5b      	subs	r3, r3, r1
   86d5e:	6898      	ldr	r0, [r3, #8]
   86d60:	1852      	adds	r2, r2, r1
   86d62:	68d9      	ldr	r1, [r3, #12]
   86d64:	60c1      	str	r1, [r0, #12]
   86d66:	6088      	str	r0, [r1, #8]
   86d68:	4845      	ldr	r0, [pc, #276]	; (86e80 <_free_r+0x15c>)
   86d6a:	f042 0101 	orr.w	r1, r2, #1
   86d6e:	6059      	str	r1, [r3, #4]
   86d70:	6083      	str	r3, [r0, #8]
   86d72:	4b44      	ldr	r3, [pc, #272]	; (86e84 <_free_r+0x160>)
   86d74:	6819      	ldr	r1, [r3, #0]
   86d76:	428a      	cmp	r2, r1
   86d78:	d304      	bcc.n	86d84 <_free_r+0x60>
   86d7a:	4a43      	ldr	r2, [pc, #268]	; (86e88 <_free_r+0x164>)
   86d7c:	4630      	mov	r0, r6
   86d7e:	6811      	ldr	r1, [r2, #0]
   86d80:	f7ff ff82 	bl	86c88 <_malloc_trim_r>
   86d84:	4630      	mov	r0, r6
   86d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   86d8a:	f001 b8b4 	b.w	87ef6 <__malloc_unlock>
   86d8e:	6060      	str	r0, [r4, #4]
   86d90:	b959      	cbnz	r1, 86daa <_free_r+0x86>
   86d92:	f855 5c08 	ldr.w	r5, [r5, #-8]
   86d96:	3708      	adds	r7, #8
   86d98:	1b5b      	subs	r3, r3, r5
   86d9a:	1952      	adds	r2, r2, r5
   86d9c:	689d      	ldr	r5, [r3, #8]
   86d9e:	42bd      	cmp	r5, r7
   86da0:	d005      	beq.n	86dae <_free_r+0x8a>
   86da2:	68df      	ldr	r7, [r3, #12]
   86da4:	60ef      	str	r7, [r5, #12]
   86da6:	60bd      	str	r5, [r7, #8]
   86da8:	e002      	b.n	86db0 <_free_r+0x8c>
   86daa:	2100      	movs	r1, #0
   86dac:	e000      	b.n	86db0 <_free_r+0x8c>
   86dae:	2101      	movs	r1, #1
   86db0:	1825      	adds	r5, r4, r0
   86db2:	686d      	ldr	r5, [r5, #4]
   86db4:	f015 0f01 	tst.w	r5, #1
   86db8:	d10f      	bne.n	86dda <_free_r+0xb6>
   86dba:	1812      	adds	r2, r2, r0
   86dbc:	b949      	cbnz	r1, 86dd2 <_free_r+0xae>
   86dbe:	68a0      	ldr	r0, [r4, #8]
   86dc0:	4d32      	ldr	r5, [pc, #200]	; (86e8c <_free_r+0x168>)
   86dc2:	42a8      	cmp	r0, r5
   86dc4:	d105      	bne.n	86dd2 <_free_r+0xae>
   86dc6:	60eb      	str	r3, [r5, #12]
   86dc8:	60ab      	str	r3, [r5, #8]
   86dca:	60d8      	str	r0, [r3, #12]
   86dcc:	6098      	str	r0, [r3, #8]
   86dce:	2101      	movs	r1, #1
   86dd0:	e003      	b.n	86dda <_free_r+0xb6>
   86dd2:	68e0      	ldr	r0, [r4, #12]
   86dd4:	68a4      	ldr	r4, [r4, #8]
   86dd6:	60e0      	str	r0, [r4, #12]
   86dd8:	6084      	str	r4, [r0, #8]
   86dda:	f042 0001 	orr.w	r0, r2, #1
   86dde:	6058      	str	r0, [r3, #4]
   86de0:	509a      	str	r2, [r3, r2]
   86de2:	2900      	cmp	r1, #0
   86de4:	d1ce      	bne.n	86d84 <_free_r+0x60>
   86de6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   86dea:	d20c      	bcs.n	86e06 <_free_r+0xe2>
   86dec:	08d2      	lsrs	r2, r2, #3
   86dee:	1090      	asrs	r0, r2, #2
   86df0:	2401      	movs	r4, #1
   86df2:	fa04 f400 	lsl.w	r4, r4, r0
   86df6:	4922      	ldr	r1, [pc, #136]	; (86e80 <_free_r+0x15c>)
   86df8:	6848      	ldr	r0, [r1, #4]
   86dfa:	4320      	orrs	r0, r4
   86dfc:	6048      	str	r0, [r1, #4]
   86dfe:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   86e02:	6881      	ldr	r1, [r0, #8]
   86e04:	e035      	b.n	86e72 <_free_r+0x14e>
   86e06:	0a54      	lsrs	r4, r2, #9
   86e08:	2c04      	cmp	r4, #4
   86e0a:	d802      	bhi.n	86e12 <_free_r+0xee>
   86e0c:	0994      	lsrs	r4, r2, #6
   86e0e:	3438      	adds	r4, #56	; 0x38
   86e10:	e016      	b.n	86e40 <_free_r+0x11c>
   86e12:	2c14      	cmp	r4, #20
   86e14:	d801      	bhi.n	86e1a <_free_r+0xf6>
   86e16:	345b      	adds	r4, #91	; 0x5b
   86e18:	e012      	b.n	86e40 <_free_r+0x11c>
   86e1a:	2c54      	cmp	r4, #84	; 0x54
   86e1c:	d802      	bhi.n	86e24 <_free_r+0x100>
   86e1e:	0b14      	lsrs	r4, r2, #12
   86e20:	346e      	adds	r4, #110	; 0x6e
   86e22:	e00d      	b.n	86e40 <_free_r+0x11c>
   86e24:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   86e28:	d802      	bhi.n	86e30 <_free_r+0x10c>
   86e2a:	0bd4      	lsrs	r4, r2, #15
   86e2c:	3477      	adds	r4, #119	; 0x77
   86e2e:	e007      	b.n	86e40 <_free_r+0x11c>
   86e30:	f240 5554 	movw	r5, #1364	; 0x554
   86e34:	42ac      	cmp	r4, r5
   86e36:	d802      	bhi.n	86e3e <_free_r+0x11a>
   86e38:	0c94      	lsrs	r4, r2, #18
   86e3a:	347c      	adds	r4, #124	; 0x7c
   86e3c:	e000      	b.n	86e40 <_free_r+0x11c>
   86e3e:	247e      	movs	r4, #126	; 0x7e
   86e40:	4d0f      	ldr	r5, [pc, #60]	; (86e80 <_free_r+0x15c>)
   86e42:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   86e46:	6881      	ldr	r1, [r0, #8]
   86e48:	4281      	cmp	r1, r0
   86e4a:	d10c      	bne.n	86e66 <_free_r+0x142>
   86e4c:	2201      	movs	r2, #1
   86e4e:	10a4      	asrs	r4, r4, #2
   86e50:	fa02 f404 	lsl.w	r4, r2, r4
   86e54:	6868      	ldr	r0, [r5, #4]
   86e56:	ea44 0200 	orr.w	r2, r4, r0
   86e5a:	606a      	str	r2, [r5, #4]
   86e5c:	4608      	mov	r0, r1
   86e5e:	e008      	b.n	86e72 <_free_r+0x14e>
   86e60:	6889      	ldr	r1, [r1, #8]
   86e62:	4281      	cmp	r1, r0
   86e64:	d004      	beq.n	86e70 <_free_r+0x14c>
   86e66:	684c      	ldr	r4, [r1, #4]
   86e68:	f024 0403 	bic.w	r4, r4, #3
   86e6c:	42a2      	cmp	r2, r4
   86e6e:	d3f7      	bcc.n	86e60 <_free_r+0x13c>
   86e70:	68c8      	ldr	r0, [r1, #12]
   86e72:	60d8      	str	r0, [r3, #12]
   86e74:	6099      	str	r1, [r3, #8]
   86e76:	6083      	str	r3, [r0, #8]
   86e78:	60cb      	str	r3, [r1, #12]
   86e7a:	e783      	b.n	86d84 <_free_r+0x60>
   86e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86e7e:	bf00      	nop
   86e80:	200704e8 	.word	0x200704e8
   86e84:	200708f4 	.word	0x200708f4
   86e88:	2007ab04 	.word	0x2007ab04
   86e8c:	200704f0 	.word	0x200704f0

00086e90 <__sfvwrite_r>:
   86e90:	6893      	ldr	r3, [r2, #8]
   86e92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86e96:	4606      	mov	r6, r0
   86e98:	460c      	mov	r4, r1
   86e9a:	4691      	mov	r9, r2
   86e9c:	b90b      	cbnz	r3, 86ea2 <__sfvwrite_r+0x12>
   86e9e:	2000      	movs	r0, #0
   86ea0:	e14f      	b.n	87142 <__sfvwrite_r+0x2b2>
   86ea2:	8988      	ldrh	r0, [r1, #12]
   86ea4:	f000 0108 	and.w	r1, r0, #8
   86ea8:	b20a      	sxth	r2, r1
   86eaa:	b10a      	cbz	r2, 86eb0 <__sfvwrite_r+0x20>
   86eac:	6923      	ldr	r3, [r4, #16]
   86eae:	b95b      	cbnz	r3, 86ec8 <__sfvwrite_r+0x38>
   86eb0:	4630      	mov	r0, r6
   86eb2:	4621      	mov	r1, r4
   86eb4:	f7ff fbf4 	bl	866a0 <__swsetup_r>
   86eb8:	b130      	cbz	r0, 86ec8 <__sfvwrite_r+0x38>
   86eba:	89a1      	ldrh	r1, [r4, #12]
   86ebc:	2209      	movs	r2, #9
   86ebe:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   86ec2:	81a0      	strh	r0, [r4, #12]
   86ec4:	6032      	str	r2, [r6, #0]
   86ec6:	e13a      	b.n	8713e <__sfvwrite_r+0x2ae>
   86ec8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   86ecc:	f8d9 8000 	ldr.w	r8, [r9]
   86ed0:	f00a 0c02 	and.w	ip, sl, #2
   86ed4:	fa0f f58c 	sxth.w	r5, ip
   86ed8:	b315      	cbz	r5, 86f20 <__sfvwrite_r+0x90>
   86eda:	f04f 0a00 	mov.w	sl, #0
   86ede:	4657      	mov	r7, sl
   86ee0:	b937      	cbnz	r7, 86ef0 <__sfvwrite_r+0x60>
   86ee2:	f8d8 a000 	ldr.w	sl, [r8]
   86ee6:	f8d8 7004 	ldr.w	r7, [r8, #4]
   86eea:	f108 0808 	add.w	r8, r8, #8
   86eee:	e7f7      	b.n	86ee0 <__sfvwrite_r+0x50>
   86ef0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   86ef4:	bf34      	ite	cc
   86ef6:	463b      	movcc	r3, r7
   86ef8:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   86efc:	4630      	mov	r0, r6
   86efe:	69e1      	ldr	r1, [r4, #28]
   86f00:	4652      	mov	r2, sl
   86f02:	6a65      	ldr	r5, [r4, #36]	; 0x24
   86f04:	47a8      	blx	r5
   86f06:	2800      	cmp	r0, #0
   86f08:	f340 8115 	ble.w	87136 <__sfvwrite_r+0x2a6>
   86f0c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   86f10:	4482      	add	sl, r0
   86f12:	1a3f      	subs	r7, r7, r0
   86f14:	1a08      	subs	r0, r1, r0
   86f16:	f8c9 0008 	str.w	r0, [r9, #8]
   86f1a:	2800      	cmp	r0, #0
   86f1c:	d1e0      	bne.n	86ee0 <__sfvwrite_r+0x50>
   86f1e:	e7be      	b.n	86e9e <__sfvwrite_r+0xe>
   86f20:	f01a 0a01 	ands.w	sl, sl, #1
   86f24:	d004      	beq.n	86f30 <__sfvwrite_r+0xa0>
   86f26:	46ab      	mov	fp, r5
   86f28:	9501      	str	r5, [sp, #4]
   86f2a:	462f      	mov	r7, r5
   86f2c:	46aa      	mov	sl, r5
   86f2e:	e0c7      	b.n	870c0 <__sfvwrite_r+0x230>
   86f30:	4655      	mov	r5, sl
   86f32:	b935      	cbnz	r5, 86f42 <__sfvwrite_r+0xb2>
   86f34:	f8d8 a000 	ldr.w	sl, [r8]
   86f38:	f8d8 5004 	ldr.w	r5, [r8, #4]
   86f3c:	f108 0808 	add.w	r8, r8, #8
   86f40:	e7f7      	b.n	86f32 <__sfvwrite_r+0xa2>
   86f42:	89a2      	ldrh	r2, [r4, #12]
   86f44:	f8d4 b008 	ldr.w	fp, [r4, #8]
   86f48:	f402 7000 	and.w	r0, r2, #512	; 0x200
   86f4c:	b203      	sxth	r3, r0
   86f4e:	2b00      	cmp	r3, #0
   86f50:	d052      	beq.n	86ff8 <__sfvwrite_r+0x168>
   86f52:	455d      	cmp	r5, fp
   86f54:	d340      	bcc.n	86fd8 <__sfvwrite_r+0x148>
   86f56:	f412 6f90 	tst.w	r2, #1152	; 0x480
   86f5a:	d03b      	beq.n	86fd4 <__sfvwrite_r+0x144>
   86f5c:	6963      	ldr	r3, [r4, #20]
   86f5e:	f04f 0b03 	mov.w	fp, #3
   86f62:	fb0b f303 	mul.w	r3, fp, r3
   86f66:	6921      	ldr	r1, [r4, #16]
   86f68:	6827      	ldr	r7, [r4, #0]
   86f6a:	2002      	movs	r0, #2
   86f6c:	1a7f      	subs	r7, r7, r1
   86f6e:	fb93 fcf0 	sdiv	ip, r3, r0
   86f72:	1c7b      	adds	r3, r7, #1
   86f74:	1958      	adds	r0, r3, r5
   86f76:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   86f7a:	4584      	cmp	ip, r0
   86f7c:	bf28      	it	cs
   86f7e:	4660      	movcs	r0, ip
   86f80:	b213      	sxth	r3, r2
   86f82:	9001      	str	r0, [sp, #4]
   86f84:	4630      	mov	r0, r6
   86f86:	b17b      	cbz	r3, 86fa8 <__sfvwrite_r+0x118>
   86f88:	9901      	ldr	r1, [sp, #4]
   86f8a:	f000 fd29 	bl	879e0 <_malloc_r>
   86f8e:	4683      	mov	fp, r0
   86f90:	b198      	cbz	r0, 86fba <__sfvwrite_r+0x12a>
   86f92:	6921      	ldr	r1, [r4, #16]
   86f94:	463a      	mov	r2, r7
   86f96:	f7fc fffb 	bl	83f90 <memcpy>
   86f9a:	89a1      	ldrh	r1, [r4, #12]
   86f9c:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   86fa0:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   86fa4:	81a2      	strh	r2, [r4, #12]
   86fa6:	e00b      	b.n	86fc0 <__sfvwrite_r+0x130>
   86fa8:	9a01      	ldr	r2, [sp, #4]
   86faa:	f001 fb95 	bl	886d8 <_realloc_r>
   86fae:	4683      	mov	fp, r0
   86fb0:	b930      	cbnz	r0, 86fc0 <__sfvwrite_r+0x130>
   86fb2:	4630      	mov	r0, r6
   86fb4:	6921      	ldr	r1, [r4, #16]
   86fb6:	f7ff feb5 	bl	86d24 <_free_r>
   86fba:	230c      	movs	r3, #12
   86fbc:	6033      	str	r3, [r6, #0]
   86fbe:	e0ba      	b.n	87136 <__sfvwrite_r+0x2a6>
   86fc0:	9901      	ldr	r1, [sp, #4]
   86fc2:	eb0b 0307 	add.w	r3, fp, r7
   86fc6:	1bcf      	subs	r7, r1, r7
   86fc8:	f8c4 b010 	str.w	fp, [r4, #16]
   86fcc:	6023      	str	r3, [r4, #0]
   86fce:	6161      	str	r1, [r4, #20]
   86fd0:	46ab      	mov	fp, r5
   86fd2:	60a7      	str	r7, [r4, #8]
   86fd4:	455d      	cmp	r5, fp
   86fd6:	d200      	bcs.n	86fda <__sfvwrite_r+0x14a>
   86fd8:	46ab      	mov	fp, r5
   86fda:	465a      	mov	r2, fp
   86fdc:	4651      	mov	r1, sl
   86fde:	6820      	ldr	r0, [r4, #0]
   86fe0:	f000 ff6e 	bl	87ec0 <memmove>
   86fe4:	68a0      	ldr	r0, [r4, #8]
   86fe6:	6823      	ldr	r3, [r4, #0]
   86fe8:	ebcb 0200 	rsb	r2, fp, r0
   86fec:	eb03 010b 	add.w	r1, r3, fp
   86ff0:	60a2      	str	r2, [r4, #8]
   86ff2:	6021      	str	r1, [r4, #0]
   86ff4:	46ab      	mov	fp, r5
   86ff6:	e02a      	b.n	8704e <__sfvwrite_r+0x1be>
   86ff8:	6820      	ldr	r0, [r4, #0]
   86ffa:	6921      	ldr	r1, [r4, #16]
   86ffc:	4288      	cmp	r0, r1
   86ffe:	d90f      	bls.n	87020 <__sfvwrite_r+0x190>
   87000:	455d      	cmp	r5, fp
   87002:	d90d      	bls.n	87020 <__sfvwrite_r+0x190>
   87004:	4651      	mov	r1, sl
   87006:	465a      	mov	r2, fp
   87008:	f000 ff5a 	bl	87ec0 <memmove>
   8700c:	6822      	ldr	r2, [r4, #0]
   8700e:	4621      	mov	r1, r4
   87010:	eb02 000b 	add.w	r0, r2, fp
   87014:	6020      	str	r0, [r4, #0]
   87016:	4630      	mov	r0, r6
   87018:	f7ff fbf6 	bl	86808 <_fflush_r>
   8701c:	b1b8      	cbz	r0, 8704e <__sfvwrite_r+0x1be>
   8701e:	e08a      	b.n	87136 <__sfvwrite_r+0x2a6>
   87020:	6963      	ldr	r3, [r4, #20]
   87022:	429d      	cmp	r5, r3
   87024:	d308      	bcc.n	87038 <__sfvwrite_r+0x1a8>
   87026:	6a67      	ldr	r7, [r4, #36]	; 0x24
   87028:	4630      	mov	r0, r6
   8702a:	69e1      	ldr	r1, [r4, #28]
   8702c:	4652      	mov	r2, sl
   8702e:	47b8      	blx	r7
   87030:	f1b0 0b00 	subs.w	fp, r0, #0
   87034:	dc0b      	bgt.n	8704e <__sfvwrite_r+0x1be>
   87036:	e07e      	b.n	87136 <__sfvwrite_r+0x2a6>
   87038:	4651      	mov	r1, sl
   8703a:	462a      	mov	r2, r5
   8703c:	f000 ff40 	bl	87ec0 <memmove>
   87040:	68a2      	ldr	r2, [r4, #8]
   87042:	6823      	ldr	r3, [r4, #0]
   87044:	1b50      	subs	r0, r2, r5
   87046:	1959      	adds	r1, r3, r5
   87048:	46ab      	mov	fp, r5
   8704a:	60a0      	str	r0, [r4, #8]
   8704c:	6021      	str	r1, [r4, #0]
   8704e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   87052:	44da      	add	sl, fp
   87054:	ebcb 0200 	rsb	r2, fp, r0
   87058:	ebcb 0505 	rsb	r5, fp, r5
   8705c:	f8c9 2008 	str.w	r2, [r9, #8]
   87060:	2a00      	cmp	r2, #0
   87062:	f47f af66 	bne.w	86f32 <__sfvwrite_r+0xa2>
   87066:	e71a      	b.n	86e9e <__sfvwrite_r+0xe>
   87068:	9801      	ldr	r0, [sp, #4]
   8706a:	2800      	cmp	r0, #0
   8706c:	d032      	beq.n	870d4 <__sfvwrite_r+0x244>
   8706e:	6820      	ldr	r0, [r4, #0]
   87070:	6921      	ldr	r1, [r4, #16]
   87072:	45d3      	cmp	fp, sl
   87074:	bf34      	ite	cc
   87076:	465b      	movcc	r3, fp
   87078:	4653      	movcs	r3, sl
   8707a:	4288      	cmp	r0, r1
   8707c:	68a5      	ldr	r5, [r4, #8]
   8707e:	f8d4 e014 	ldr.w	lr, [r4, #20]
   87082:	d937      	bls.n	870f4 <__sfvwrite_r+0x264>
   87084:	4475      	add	r5, lr
   87086:	42ab      	cmp	r3, r5
   87088:	dd34      	ble.n	870f4 <__sfvwrite_r+0x264>
   8708a:	4639      	mov	r1, r7
   8708c:	462a      	mov	r2, r5
   8708e:	f000 ff17 	bl	87ec0 <memmove>
   87092:	6820      	ldr	r0, [r4, #0]
   87094:	4621      	mov	r1, r4
   87096:	1943      	adds	r3, r0, r5
   87098:	6023      	str	r3, [r4, #0]
   8709a:	4630      	mov	r0, r6
   8709c:	f7ff fbb4 	bl	86808 <_fflush_r>
   870a0:	2800      	cmp	r0, #0
   870a2:	d148      	bne.n	87136 <__sfvwrite_r+0x2a6>
   870a4:	ebbb 0b05 	subs.w	fp, fp, r5
   870a8:	d03d      	beq.n	87126 <__sfvwrite_r+0x296>
   870aa:	f8d9 2008 	ldr.w	r2, [r9, #8]
   870ae:	197f      	adds	r7, r7, r5
   870b0:	ebc5 0a0a 	rsb	sl, r5, sl
   870b4:	1b55      	subs	r5, r2, r5
   870b6:	f8c9 5008 	str.w	r5, [r9, #8]
   870ba:	2d00      	cmp	r5, #0
   870bc:	f43f aeef 	beq.w	86e9e <__sfvwrite_r+0xe>
   870c0:	f1ba 0f00 	cmp.w	sl, #0
   870c4:	d1d0      	bne.n	87068 <__sfvwrite_r+0x1d8>
   870c6:	2100      	movs	r1, #0
   870c8:	e898 0480 	ldmia.w	r8, {r7, sl}
   870cc:	9101      	str	r1, [sp, #4]
   870ce:	f108 0808 	add.w	r8, r8, #8
   870d2:	e7f5      	b.n	870c0 <__sfvwrite_r+0x230>
   870d4:	4638      	mov	r0, r7
   870d6:	210a      	movs	r1, #10
   870d8:	4652      	mov	r2, sl
   870da:	f000 fee3 	bl	87ea4 <memchr>
   870de:	b120      	cbz	r0, 870ea <__sfvwrite_r+0x25a>
   870e0:	f100 0101 	add.w	r1, r0, #1
   870e4:	ebc7 0b01 	rsb	fp, r7, r1
   870e8:	e001      	b.n	870ee <__sfvwrite_r+0x25e>
   870ea:	f10a 0b01 	add.w	fp, sl, #1
   870ee:	2201      	movs	r2, #1
   870f0:	9201      	str	r2, [sp, #4]
   870f2:	e7bc      	b.n	8706e <__sfvwrite_r+0x1de>
   870f4:	4573      	cmp	r3, lr
   870f6:	db08      	blt.n	8710a <__sfvwrite_r+0x27a>
   870f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   870fa:	4630      	mov	r0, r6
   870fc:	69e1      	ldr	r1, [r4, #28]
   870fe:	463a      	mov	r2, r7
   87100:	4673      	mov	r3, lr
   87102:	47a8      	blx	r5
   87104:	1e05      	subs	r5, r0, #0
   87106:	dccd      	bgt.n	870a4 <__sfvwrite_r+0x214>
   87108:	e015      	b.n	87136 <__sfvwrite_r+0x2a6>
   8710a:	461a      	mov	r2, r3
   8710c:	4639      	mov	r1, r7
   8710e:	9300      	str	r3, [sp, #0]
   87110:	f000 fed6 	bl	87ec0 <memmove>
   87114:	9b00      	ldr	r3, [sp, #0]
   87116:	6825      	ldr	r5, [r4, #0]
   87118:	68a0      	ldr	r0, [r4, #8]
   8711a:	18e9      	adds	r1, r5, r3
   8711c:	1ac2      	subs	r2, r0, r3
   8711e:	60a2      	str	r2, [r4, #8]
   87120:	6021      	str	r1, [r4, #0]
   87122:	461d      	mov	r5, r3
   87124:	e7be      	b.n	870a4 <__sfvwrite_r+0x214>
   87126:	4630      	mov	r0, r6
   87128:	4621      	mov	r1, r4
   8712a:	f7ff fb6d 	bl	86808 <_fflush_r>
   8712e:	b910      	cbnz	r0, 87136 <__sfvwrite_r+0x2a6>
   87130:	f8cd b004 	str.w	fp, [sp, #4]
   87134:	e7b9      	b.n	870aa <__sfvwrite_r+0x21a>
   87136:	89a2      	ldrh	r2, [r4, #12]
   87138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   8713c:	81a3      	strh	r3, [r4, #12]
   8713e:	f04f 30ff 	mov.w	r0, #4294967295
   87142:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00087146 <_fwalk>:
   87146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8714a:	4604      	mov	r4, r0
   8714c:	4688      	mov	r8, r1
   8714e:	f7ff fcb1 	bl	86ab4 <__sfp_lock_acquire>
   87152:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   87156:	2600      	movs	r6, #0
   87158:	b18c      	cbz	r4, 8717e <_fwalk+0x38>
   8715a:	68a5      	ldr	r5, [r4, #8]
   8715c:	6867      	ldr	r7, [r4, #4]
   8715e:	3f01      	subs	r7, #1
   87160:	d40b      	bmi.n	8717a <_fwalk+0x34>
   87162:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   87166:	b133      	cbz	r3, 87176 <_fwalk+0x30>
   87168:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   8716c:	1c43      	adds	r3, r0, #1
   8716e:	d002      	beq.n	87176 <_fwalk+0x30>
   87170:	4628      	mov	r0, r5
   87172:	47c0      	blx	r8
   87174:	4306      	orrs	r6, r0
   87176:	3568      	adds	r5, #104	; 0x68
   87178:	e7f1      	b.n	8715e <_fwalk+0x18>
   8717a:	6824      	ldr	r4, [r4, #0]
   8717c:	e7ec      	b.n	87158 <_fwalk+0x12>
   8717e:	f7ff fc9a 	bl	86ab6 <__sfp_lock_release>
   87182:	4630      	mov	r0, r6
   87184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00087188 <_fwalk_reent>:
   87188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8718c:	4680      	mov	r8, r0
   8718e:	4689      	mov	r9, r1
   87190:	f7ff fc90 	bl	86ab4 <__sfp_lock_acquire>
   87194:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   87198:	2600      	movs	r6, #0
   8719a:	b194      	cbz	r4, 871c2 <_fwalk_reent+0x3a>
   8719c:	68a5      	ldr	r5, [r4, #8]
   8719e:	6867      	ldr	r7, [r4, #4]
   871a0:	3f01      	subs	r7, #1
   871a2:	d40c      	bmi.n	871be <_fwalk_reent+0x36>
   871a4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   871a8:	b13b      	cbz	r3, 871ba <_fwalk_reent+0x32>
   871aa:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   871ae:	1c43      	adds	r3, r0, #1
   871b0:	d003      	beq.n	871ba <_fwalk_reent+0x32>
   871b2:	4640      	mov	r0, r8
   871b4:	4629      	mov	r1, r5
   871b6:	47c8      	blx	r9
   871b8:	4306      	orrs	r6, r0
   871ba:	3568      	adds	r5, #104	; 0x68
   871bc:	e7f0      	b.n	871a0 <_fwalk_reent+0x18>
   871be:	6824      	ldr	r4, [r4, #0]
   871c0:	e7eb      	b.n	8719a <_fwalk_reent+0x12>
   871c2:	f7ff fc78 	bl	86ab6 <__sfp_lock_release>
   871c6:	4630      	mov	r0, r6
   871c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000871cc <rshift>:
   871cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   871ce:	6906      	ldr	r6, [r0, #16]
   871d0:	114b      	asrs	r3, r1, #5
   871d2:	42b3      	cmp	r3, r6
   871d4:	f100 0214 	add.w	r2, r0, #20
   871d8:	da2a      	bge.n	87230 <rshift+0x64>
   871da:	1d1d      	adds	r5, r3, #4
   871dc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
   871e0:	eb00 0385 	add.w	r3, r0, r5, lsl #2
   871e4:	3614      	adds	r6, #20
   871e6:	1d1d      	adds	r5, r3, #4
   871e8:	f011 011f 	ands.w	r1, r1, #31
   871ec:	d101      	bne.n	871f2 <rshift+0x26>
   871ee:	4613      	mov	r3, r2
   871f0:	e017      	b.n	87222 <rshift+0x56>
   871f2:	685c      	ldr	r4, [r3, #4]
   871f4:	f1c1 0c20 	rsb	ip, r1, #32
   871f8:	fa24 f401 	lsr.w	r4, r4, r1
   871fc:	3504      	adds	r5, #4
   871fe:	4613      	mov	r3, r2
   87200:	42b5      	cmp	r5, r6
   87202:	d20a      	bcs.n	8721a <rshift+0x4e>
   87204:	682f      	ldr	r7, [r5, #0]
   87206:	fa07 f70c 	lsl.w	r7, r7, ip
   8720a:	433c      	orrs	r4, r7
   8720c:	f843 4b04 	str.w	r4, [r3], #4
   87210:	f855 4b04 	ldr.w	r4, [r5], #4
   87214:	fa24 f401 	lsr.w	r4, r4, r1
   87218:	e7f2      	b.n	87200 <rshift+0x34>
   8721a:	601c      	str	r4, [r3, #0]
   8721c:	b14c      	cbz	r4, 87232 <rshift+0x66>
   8721e:	3304      	adds	r3, #4
   87220:	e007      	b.n	87232 <rshift+0x66>
   87222:	42b5      	cmp	r5, r6
   87224:	d205      	bcs.n	87232 <rshift+0x66>
   87226:	f855 1b04 	ldr.w	r1, [r5], #4
   8722a:	f843 1b04 	str.w	r1, [r3], #4
   8722e:	e7f8      	b.n	87222 <rshift+0x56>
   87230:	4613      	mov	r3, r2
   87232:	1a9b      	subs	r3, r3, r2
   87234:	109a      	asrs	r2, r3, #2
   87236:	6102      	str	r2, [r0, #16]
   87238:	b902      	cbnz	r2, 8723c <rshift+0x70>
   8723a:	6142      	str	r2, [r0, #20]
   8723c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008723e <htinit.constprop.0>:
   8723e:	b530      	push	{r4, r5, lr}
   87240:	2300      	movs	r3, #0
   87242:	5cc2      	ldrb	r2, [r0, r3]
   87244:	b122      	cbz	r2, 87250 <htinit.constprop.0+0x12>
   87246:	4c03      	ldr	r4, [pc, #12]	; (87254 <htinit.constprop.0+0x16>)
   87248:	185d      	adds	r5, r3, r1
   8724a:	5515      	strb	r5, [r2, r4]
   8724c:	3301      	adds	r3, #1
   8724e:	e7f8      	b.n	87242 <htinit.constprop.0+0x4>
   87250:	bd30      	pop	{r4, r5, pc}
   87252:	bf00      	nop
   87254:	2007ab78 	.word	0x2007ab78

00087258 <__hexdig_init>:
   87258:	b508      	push	{r3, lr}
   8725a:	2110      	movs	r1, #16
   8725c:	4806      	ldr	r0, [pc, #24]	; (87278 <__hexdig_init+0x20>)
   8725e:	f7ff ffee 	bl	8723e <htinit.constprop.0>
   87262:	211a      	movs	r1, #26
   87264:	4805      	ldr	r0, [pc, #20]	; (8727c <__hexdig_init+0x24>)
   87266:	f7ff ffea 	bl	8723e <htinit.constprop.0>
   8726a:	4805      	ldr	r0, [pc, #20]	; (87280 <__hexdig_init+0x28>)
   8726c:	211a      	movs	r1, #26
   8726e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   87272:	f7ff bfe4 	b.w	8723e <htinit.constprop.0>
   87276:	bf00      	nop
   87278:	0008a929 	.word	0x0008a929
   8727c:	0008a7df 	.word	0x0008a7df
   87280:	0008a7ce 	.word	0x0008a7ce

00087284 <__gethex>:
   87284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87288:	b089      	sub	sp, #36	; 0x24
   8728a:	468a      	mov	sl, r1
   8728c:	4616      	mov	r6, r2
   8728e:	9306      	str	r3, [sp, #24]
   87290:	9003      	str	r0, [sp, #12]
   87292:	f000 fb17 	bl	878c4 <_localeconv_r>
   87296:	6800      	ldr	r0, [r0, #0]
   87298:	9004      	str	r0, [sp, #16]
   8729a:	f7fc ff6d 	bl	84178 <strlen>
   8729e:	9904      	ldr	r1, [sp, #16]
   872a0:	4a9d      	ldr	r2, [pc, #628]	; (87518 <__gethex+0x294>)
   872a2:	180b      	adds	r3, r1, r0
   872a4:	4680      	mov	r8, r0
   872a6:	f892 4030 	ldrb.w	r4, [r2, #48]	; 0x30
   872aa:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   872ae:	9007      	str	r0, [sp, #28]
   872b0:	b90c      	cbnz	r4, 872b6 <__gethex+0x32>
   872b2:	f7ff ffd1 	bl	87258 <__hexdig_init>
   872b6:	f8da 5000 	ldr.w	r5, [sl]
   872ba:	f04f 0900 	mov.w	r9, #0
   872be:	1cac      	adds	r4, r5, #2
   872c0:	46a3      	mov	fp, r4
   872c2:	f814 7b01 	ldrb.w	r7, [r4], #1
   872c6:	2f30      	cmp	r7, #48	; 0x30
   872c8:	d102      	bne.n	872d0 <__gethex+0x4c>
   872ca:	f109 0901 	add.w	r9, r9, #1
   872ce:	e7f7      	b.n	872c0 <__gethex+0x3c>
   872d0:	4c91      	ldr	r4, [pc, #580]	; (87518 <__gethex+0x294>)
   872d2:	5de5      	ldrb	r5, [r4, r7]
   872d4:	b9d5      	cbnz	r5, 8730c <__gethex+0x88>
   872d6:	4658      	mov	r0, fp
   872d8:	9904      	ldr	r1, [sp, #16]
   872da:	4642      	mov	r2, r8
   872dc:	f7fc ff54 	bl	84188 <strncmp>
   872e0:	2800      	cmp	r0, #0
   872e2:	d136      	bne.n	87352 <__gethex+0xce>
   872e4:	f81b 1008 	ldrb.w	r1, [fp, r8]
   872e8:	eb0b 0708 	add.w	r7, fp, r8
   872ec:	5c65      	ldrb	r5, [r4, r1]
   872ee:	2d00      	cmp	r5, #0
   872f0:	d030      	beq.n	87354 <__gethex+0xd0>
   872f2:	463b      	mov	r3, r7
   872f4:	4618      	mov	r0, r3
   872f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   872fa:	2a30      	cmp	r2, #48	; 0x30
   872fc:	d0fa      	beq.n	872f4 <__gethex+0x70>
   872fe:	4d86      	ldr	r5, [pc, #536]	; (87518 <__gethex+0x294>)
   87300:	4683      	mov	fp, r0
   87302:	5cac      	ldrb	r4, [r5, r2]
   87304:	463d      	mov	r5, r7
   87306:	b924      	cbnz	r4, 87312 <__gethex+0x8e>
   87308:	2401      	movs	r4, #1
   8730a:	e003      	b.n	87314 <__gethex+0x90>
   8730c:	2400      	movs	r4, #0
   8730e:	4625      	mov	r5, r4
   87310:	e002      	b.n	87318 <__gethex+0x94>
   87312:	2400      	movs	r4, #0
   87314:	f04f 0901 	mov.w	r9, #1
   87318:	465b      	mov	r3, fp
   8731a:	461f      	mov	r7, r3
   8731c:	7838      	ldrb	r0, [r7, #0]
   8731e:	497e      	ldr	r1, [pc, #504]	; (87518 <__gethex+0x294>)
   87320:	3301      	adds	r3, #1
   87322:	5c0a      	ldrb	r2, [r1, r0]
   87324:	2a00      	cmp	r2, #0
   87326:	d1f8      	bne.n	8731a <__gethex+0x96>
   87328:	4638      	mov	r0, r7
   8732a:	9904      	ldr	r1, [sp, #16]
   8732c:	4642      	mov	r2, r8
   8732e:	f7fc ff2b 	bl	84188 <strncmp>
   87332:	b950      	cbnz	r0, 8734a <__gethex+0xc6>
   87334:	b955      	cbnz	r5, 8734c <__gethex+0xc8>
   87336:	eb07 0508 	add.w	r5, r7, r8
   8733a:	462b      	mov	r3, r5
   8733c:	461f      	mov	r7, r3
   8733e:	7838      	ldrb	r0, [r7, #0]
   87340:	4975      	ldr	r1, [pc, #468]	; (87518 <__gethex+0x294>)
   87342:	3301      	adds	r3, #1
   87344:	5c0a      	ldrb	r2, [r1, r0]
   87346:	2a00      	cmp	r2, #0
   87348:	d1f8      	bne.n	8733c <__gethex+0xb8>
   8734a:	b125      	cbz	r5, 87356 <__gethex+0xd2>
   8734c:	1bed      	subs	r5, r5, r7
   8734e:	00ad      	lsls	r5, r5, #2
   87350:	e001      	b.n	87356 <__gethex+0xd2>
   87352:	465f      	mov	r7, fp
   87354:	2401      	movs	r4, #1
   87356:	783b      	ldrb	r3, [r7, #0]
   87358:	2b50      	cmp	r3, #80	; 0x50
   8735a:	d001      	beq.n	87360 <__gethex+0xdc>
   8735c:	2b70      	cmp	r3, #112	; 0x70
   8735e:	d12e      	bne.n	873be <__gethex+0x13a>
   87360:	7878      	ldrb	r0, [r7, #1]
   87362:	282b      	cmp	r0, #43	; 0x2b
   87364:	d005      	beq.n	87372 <__gethex+0xee>
   87366:	282d      	cmp	r0, #45	; 0x2d
   87368:	d006      	beq.n	87378 <__gethex+0xf4>
   8736a:	2100      	movs	r1, #0
   8736c:	1c78      	adds	r0, r7, #1
   8736e:	9105      	str	r1, [sp, #20]
   87370:	e005      	b.n	8737e <__gethex+0xfa>
   87372:	2300      	movs	r3, #0
   87374:	9305      	str	r3, [sp, #20]
   87376:	e001      	b.n	8737c <__gethex+0xf8>
   87378:	2201      	movs	r2, #1
   8737a:	9205      	str	r2, [sp, #20]
   8737c:	1cb8      	adds	r0, r7, #2
   8737e:	7801      	ldrb	r1, [r0, #0]
   87380:	4a65      	ldr	r2, [pc, #404]	; (87518 <__gethex+0x294>)
   87382:	5c52      	ldrb	r2, [r2, r1]
   87384:	b1da      	cbz	r2, 873be <__gethex+0x13a>
   87386:	2a19      	cmp	r2, #25
   87388:	dc19      	bgt.n	873be <__gethex+0x13a>
   8738a:	3a10      	subs	r2, #16
   8738c:	3001      	adds	r0, #1
   8738e:	4603      	mov	r3, r0
   87390:	f893 c000 	ldrb.w	ip, [r3]
   87394:	4960      	ldr	r1, [pc, #384]	; (87518 <__gethex+0x294>)
   87396:	3001      	adds	r0, #1
   87398:	f811 100c 	ldrb.w	r1, [r1, ip]
   8739c:	9102      	str	r1, [sp, #8]
   8739e:	b919      	cbnz	r1, 873a8 <__gethex+0x124>
   873a0:	9805      	ldr	r0, [sp, #20]
   873a2:	b150      	cbz	r0, 873ba <__gethex+0x136>
   873a4:	4252      	negs	r2, r2
   873a6:	e008      	b.n	873ba <__gethex+0x136>
   873a8:	9902      	ldr	r1, [sp, #8]
   873aa:	2919      	cmp	r1, #25
   873ac:	dcf8      	bgt.n	873a0 <__gethex+0x11c>
   873ae:	9b02      	ldr	r3, [sp, #8]
   873b0:	210a      	movs	r1, #10
   873b2:	fb01 3202 	mla	r2, r1, r2, r3
   873b6:	3a10      	subs	r2, #16
   873b8:	e7e9      	b.n	8738e <__gethex+0x10a>
   873ba:	18ad      	adds	r5, r5, r2
   873bc:	e000      	b.n	873c0 <__gethex+0x13c>
   873be:	463b      	mov	r3, r7
   873c0:	f8ca 3000 	str.w	r3, [sl]
   873c4:	b13c      	cbz	r4, 873d6 <__gethex+0x152>
   873c6:	f1b9 0f00 	cmp.w	r9, #0
   873ca:	bf0c      	ite	eq
   873cc:	f04f 0906 	moveq.w	r9, #6
   873d0:	f04f 0900 	movne.w	r9, #0
   873d4:	e18b      	b.n	876ee <__gethex+0x46a>
   873d6:	ebcb 0007 	rsb	r0, fp, r7
   873da:	1e43      	subs	r3, r0, #1
   873dc:	4621      	mov	r1, r4
   873de:	2b07      	cmp	r3, #7
   873e0:	dd02      	ble.n	873e8 <__gethex+0x164>
   873e2:	3101      	adds	r1, #1
   873e4:	105b      	asrs	r3, r3, #1
   873e6:	e7fa      	b.n	873de <__gethex+0x15a>
   873e8:	9803      	ldr	r0, [sp, #12]
   873ea:	f000 fd85 	bl	87ef8 <_Balloc>
   873ee:	46b9      	mov	r9, r7
   873f0:	f100 0314 	add.w	r3, r0, #20
   873f4:	2700      	movs	r7, #0
   873f6:	4604      	mov	r4, r0
   873f8:	9302      	str	r3, [sp, #8]
   873fa:	46ba      	mov	sl, r7
   873fc:	45d9      	cmp	r9, fp
   873fe:	d932      	bls.n	87466 <__gethex+0x1e2>
   87400:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   87404:	f8dd c01c 	ldr.w	ip, [sp, #28]
   87408:	f109 3eff 	add.w	lr, r9, #4294967295
   8740c:	4561      	cmp	r1, ip
   8740e:	f8cd e014 	str.w	lr, [sp, #20]
   87412:	d007      	beq.n	87424 <__gethex+0x1a0>
   87414:	f1ba 0f20 	cmp.w	sl, #32
   87418:	d116      	bne.n	87448 <__gethex+0x1c4>
   8741a:	f843 7b04 	str.w	r7, [r3], #4
   8741e:	2700      	movs	r7, #0
   87420:	46ba      	mov	sl, r7
   87422:	e011      	b.n	87448 <__gethex+0x1c4>
   87424:	9a05      	ldr	r2, [sp, #20]
   87426:	f1c8 0001 	rsb	r0, r8, #1
   8742a:	eb02 0c00 	add.w	ip, r2, r0
   8742e:	45dc      	cmp	ip, fp
   87430:	d3f0      	bcc.n	87414 <__gethex+0x190>
   87432:	4660      	mov	r0, ip
   87434:	9904      	ldr	r1, [sp, #16]
   87436:	4642      	mov	r2, r8
   87438:	e88d 1008 	stmia.w	sp, {r3, ip}
   8743c:	f7fc fea4 	bl	84188 <strncmp>
   87440:	e89d 1008 	ldmia.w	sp, {r3, ip}
   87444:	b168      	cbz	r0, 87462 <__gethex+0x1de>
   87446:	e7e5      	b.n	87414 <__gethex+0x190>
   87448:	f819 0c01 	ldrb.w	r0, [r9, #-1]
   8744c:	4932      	ldr	r1, [pc, #200]	; (87518 <__gethex+0x294>)
   8744e:	f8dd c014 	ldr.w	ip, [sp, #20]
   87452:	5c0a      	ldrb	r2, [r1, r0]
   87454:	f002 000f 	and.w	r0, r2, #15
   87458:	fa00 f10a 	lsl.w	r1, r0, sl
   8745c:	f10a 0a04 	add.w	sl, sl, #4
   87460:	430f      	orrs	r7, r1
   87462:	46e1      	mov	r9, ip
   87464:	e7ca      	b.n	873fc <__gethex+0x178>
   87466:	9a02      	ldr	r2, [sp, #8]
   87468:	f843 7b04 	str.w	r7, [r3], #4
   8746c:	1a99      	subs	r1, r3, r2
   8746e:	108b      	asrs	r3, r1, #2
   87470:	4638      	mov	r0, r7
   87472:	6123      	str	r3, [r4, #16]
   87474:	ea4f 1a43 	mov.w	sl, r3, lsl #5
   87478:	f000 fdeb 	bl	88052 <__hi0bits>
   8747c:	6837      	ldr	r7, [r6, #0]
   8747e:	ebc0 000a 	rsb	r0, r0, sl
   87482:	42b8      	cmp	r0, r7
   87484:	dd2a      	ble.n	874dc <__gethex+0x258>
   87486:	ebc7 0900 	rsb	r9, r7, r0
   8748a:	4649      	mov	r1, r9
   8748c:	4620      	mov	r0, r4
   8748e:	f001 f8fc 	bl	8868a <__any_on>
   87492:	b1e0      	cbz	r0, 874ce <__gethex+0x24a>
   87494:	f109 33ff 	add.w	r3, r9, #4294967295
   87498:	f003 011f 	and.w	r1, r3, #31
   8749c:	f04f 0a01 	mov.w	sl, #1
   874a0:	fa0a f001 	lsl.w	r0, sl, r1
   874a4:	115a      	asrs	r2, r3, #5
   874a6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
   874aa:	694a      	ldr	r2, [r1, #20]
   874ac:	4210      	tst	r0, r2
   874ae:	d00f      	beq.n	874d0 <__gethex+0x24c>
   874b0:	4553      	cmp	r3, sl
   874b2:	dc02      	bgt.n	874ba <__gethex+0x236>
   874b4:	f04f 0a02 	mov.w	sl, #2
   874b8:	e00a      	b.n	874d0 <__gethex+0x24c>
   874ba:	4620      	mov	r0, r4
   874bc:	f1a9 0102 	sub.w	r1, r9, #2
   874c0:	f001 f8e3 	bl	8868a <__any_on>
   874c4:	2800      	cmp	r0, #0
   874c6:	d0f5      	beq.n	874b4 <__gethex+0x230>
   874c8:	f04f 0a03 	mov.w	sl, #3
   874cc:	e000      	b.n	874d0 <__gethex+0x24c>
   874ce:	4682      	mov	sl, r0
   874d0:	4620      	mov	r0, r4
   874d2:	4649      	mov	r1, r9
   874d4:	f7ff fe7a 	bl	871cc <rshift>
   874d8:	444d      	add	r5, r9
   874da:	e00f      	b.n	874fc <__gethex+0x278>
   874dc:	da0c      	bge.n	874f8 <__gethex+0x274>
   874de:	ebc0 0907 	rsb	r9, r0, r7
   874e2:	4621      	mov	r1, r4
   874e4:	464a      	mov	r2, r9
   874e6:	9803      	ldr	r0, [sp, #12]
   874e8:	f000 fedc 	bl	882a4 <__lshift>
   874ec:	f100 0214 	add.w	r2, r0, #20
   874f0:	4604      	mov	r4, r0
   874f2:	ebc9 0505 	rsb	r5, r9, r5
   874f6:	9202      	str	r2, [sp, #8]
   874f8:	f04f 0a00 	mov.w	sl, #0
   874fc:	68b3      	ldr	r3, [r6, #8]
   874fe:	429d      	cmp	r5, r3
   87500:	dd0c      	ble.n	8751c <__gethex+0x298>
   87502:	9803      	ldr	r0, [sp, #12]
   87504:	4621      	mov	r1, r4
   87506:	f000 fd1d 	bl	87f44 <_Bfree>
   8750a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8750c:	2000      	movs	r0, #0
   8750e:	6010      	str	r0, [r2, #0]
   87510:	f04f 09a3 	mov.w	r9, #163	; 0xa3
   87514:	e0eb      	b.n	876ee <__gethex+0x46a>
   87516:	bf00      	nop
   87518:	2007ab78 	.word	0x2007ab78
   8751c:	6870      	ldr	r0, [r6, #4]
   8751e:	4285      	cmp	r5, r0
   87520:	da58      	bge.n	875d4 <__gethex+0x350>
   87522:	1b45      	subs	r5, r0, r5
   87524:	42bd      	cmp	r5, r7
   87526:	db2e      	blt.n	87586 <__gethex+0x302>
   87528:	68f2      	ldr	r2, [r6, #12]
   8752a:	2a02      	cmp	r2, #2
   8752c:	d01a      	beq.n	87564 <__gethex+0x2e0>
   8752e:	2a03      	cmp	r2, #3
   87530:	d01c      	beq.n	8756c <__gethex+0x2e8>
   87532:	2a01      	cmp	r2, #1
   87534:	d11d      	bne.n	87572 <__gethex+0x2ee>
   87536:	42bd      	cmp	r5, r7
   87538:	d11b      	bne.n	87572 <__gethex+0x2ee>
   8753a:	2f01      	cmp	r7, #1
   8753c:	dc0b      	bgt.n	87556 <__gethex+0x2d2>
   8753e:	6873      	ldr	r3, [r6, #4]
   87540:	9806      	ldr	r0, [sp, #24]
   87542:	9902      	ldr	r1, [sp, #8]
   87544:	6003      	str	r3, [r0, #0]
   87546:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87548:	2201      	movs	r2, #1
   8754a:	6122      	str	r2, [r4, #16]
   8754c:	f04f 0962 	mov.w	r9, #98	; 0x62
   87550:	600a      	str	r2, [r1, #0]
   87552:	601c      	str	r4, [r3, #0]
   87554:	e0cb      	b.n	876ee <__gethex+0x46a>
   87556:	4620      	mov	r0, r4
   87558:	1e79      	subs	r1, r7, #1
   8755a:	f001 f896 	bl	8868a <__any_on>
   8755e:	2800      	cmp	r0, #0
   87560:	d1ed      	bne.n	8753e <__gethex+0x2ba>
   87562:	e006      	b.n	87572 <__gethex+0x2ee>
   87564:	9813      	ldr	r0, [sp, #76]	; 0x4c
   87566:	2800      	cmp	r0, #0
   87568:	d0e9      	beq.n	8753e <__gethex+0x2ba>
   8756a:	e002      	b.n	87572 <__gethex+0x2ee>
   8756c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8756e:	2b00      	cmp	r3, #0
   87570:	d1e5      	bne.n	8753e <__gethex+0x2ba>
   87572:	4621      	mov	r1, r4
   87574:	9803      	ldr	r0, [sp, #12]
   87576:	f000 fce5 	bl	87f44 <_Bfree>
   8757a:	9912      	ldr	r1, [sp, #72]	; 0x48
   8757c:	2200      	movs	r2, #0
   8757e:	600a      	str	r2, [r1, #0]
   87580:	f04f 0950 	mov.w	r9, #80	; 0x50
   87584:	e0b3      	b.n	876ee <__gethex+0x46a>
   87586:	f105 39ff 	add.w	r9, r5, #4294967295
   8758a:	f1ba 0f00 	cmp.w	sl, #0
   8758e:	d108      	bne.n	875a2 <__gethex+0x31e>
   87590:	f1b9 0f00 	cmp.w	r9, #0
   87594:	dd07      	ble.n	875a6 <__gethex+0x322>
   87596:	4620      	mov	r0, r4
   87598:	4649      	mov	r1, r9
   8759a:	f001 f876 	bl	8868a <__any_on>
   8759e:	4682      	mov	sl, r0
   875a0:	e001      	b.n	875a6 <__gethex+0x322>
   875a2:	f04f 0a01 	mov.w	sl, #1
   875a6:	f009 031f 	and.w	r3, r9, #31
   875aa:	2201      	movs	r2, #1
   875ac:	fa02 f003 	lsl.w	r0, r2, r3
   875b0:	9b02      	ldr	r3, [sp, #8]
   875b2:	ea4f 1169 	mov.w	r1, r9, asr #5
   875b6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   875ba:	1b7f      	subs	r7, r7, r5
   875bc:	4208      	tst	r0, r1
   875be:	4629      	mov	r1, r5
   875c0:	4620      	mov	r0, r4
   875c2:	bf18      	it	ne
   875c4:	f04a 0a02 	orrne.w	sl, sl, #2
   875c8:	f04f 0902 	mov.w	r9, #2
   875cc:	f7ff fdfe 	bl	871cc <rshift>
   875d0:	6875      	ldr	r5, [r6, #4]
   875d2:	e001      	b.n	875d8 <__gethex+0x354>
   875d4:	f04f 0901 	mov.w	r9, #1
   875d8:	f1ba 0f00 	cmp.w	sl, #0
   875dc:	f000 8083 	beq.w	876e6 <__gethex+0x462>
   875e0:	68f2      	ldr	r2, [r6, #12]
   875e2:	2a02      	cmp	r2, #2
   875e4:	d00e      	beq.n	87604 <__gethex+0x380>
   875e6:	2a03      	cmp	r2, #3
   875e8:	d010      	beq.n	8760c <__gethex+0x388>
   875ea:	2a01      	cmp	r2, #1
   875ec:	d179      	bne.n	876e2 <__gethex+0x45e>
   875ee:	f01a 0f02 	tst.w	sl, #2
   875f2:	d076      	beq.n	876e2 <__gethex+0x45e>
   875f4:	9802      	ldr	r0, [sp, #8]
   875f6:	6803      	ldr	r3, [r0, #0]
   875f8:	ea4a 0a03 	orr.w	sl, sl, r3
   875fc:	f01a 0f01 	tst.w	sl, #1
   87600:	d107      	bne.n	87612 <__gethex+0x38e>
   87602:	e06e      	b.n	876e2 <__gethex+0x45e>
   87604:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87606:	f1c2 0101 	rsb	r1, r2, #1
   8760a:	e000      	b.n	8760e <__gethex+0x38a>
   8760c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8760e:	2900      	cmp	r1, #0
   87610:	d067      	beq.n	876e2 <__gethex+0x45e>
   87612:	f8d4 8010 	ldr.w	r8, [r4, #16]
   87616:	f104 0314 	add.w	r3, r4, #20
   8761a:	eb04 0188 	add.w	r1, r4, r8, lsl #2
   8761e:	3114      	adds	r1, #20
   87620:	4618      	mov	r0, r3
   87622:	f853 2b04 	ldr.w	r2, [r3], #4
   87626:	f1b2 3fff 	cmp.w	r2, #4294967295
   8762a:	d002      	beq.n	87632 <__gethex+0x3ae>
   8762c:	3201      	adds	r2, #1
   8762e:	6002      	str	r2, [r0, #0]
   87630:	e022      	b.n	87678 <__gethex+0x3f4>
   87632:	2000      	movs	r0, #0
   87634:	428b      	cmp	r3, r1
   87636:	f843 0c04 	str.w	r0, [r3, #-4]
   8763a:	d3f1      	bcc.n	87620 <__gethex+0x39c>
   8763c:	68a1      	ldr	r1, [r4, #8]
   8763e:	4588      	cmp	r8, r1
   87640:	db13      	blt.n	8766a <__gethex+0x3e6>
   87642:	6863      	ldr	r3, [r4, #4]
   87644:	9803      	ldr	r0, [sp, #12]
   87646:	1c59      	adds	r1, r3, #1
   87648:	f000 fc56 	bl	87ef8 <_Balloc>
   8764c:	6922      	ldr	r2, [r4, #16]
   8764e:	f104 010c 	add.w	r1, r4, #12
   87652:	1c93      	adds	r3, r2, #2
   87654:	4682      	mov	sl, r0
   87656:	009a      	lsls	r2, r3, #2
   87658:	f100 000c 	add.w	r0, r0, #12
   8765c:	f7fc fc98 	bl	83f90 <memcpy>
   87660:	4621      	mov	r1, r4
   87662:	9803      	ldr	r0, [sp, #12]
   87664:	f000 fc6e 	bl	87f44 <_Bfree>
   87668:	4654      	mov	r4, sl
   8766a:	6920      	ldr	r0, [r4, #16]
   8766c:	2101      	movs	r1, #1
   8766e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   87672:	1843      	adds	r3, r0, r1
   87674:	6151      	str	r1, [r2, #20]
   87676:	6123      	str	r3, [r4, #16]
   87678:	f1b9 0f02 	cmp.w	r9, #2
   8767c:	d113      	bne.n	876a6 <__gethex+0x422>
   8767e:	6832      	ldr	r2, [r6, #0]
   87680:	1e50      	subs	r0, r2, #1
   87682:	4287      	cmp	r7, r0
   87684:	d12a      	bne.n	876dc <__gethex+0x458>
   87686:	f007 011f 	and.w	r1, r7, #31
   8768a:	2201      	movs	r2, #1
   8768c:	fa02 f201 	lsl.w	r2, r2, r1
   87690:	117f      	asrs	r7, r7, #5
   87692:	eb04 0787 	add.w	r7, r4, r7, lsl #2
   87696:	697b      	ldr	r3, [r7, #20]
   87698:	421a      	tst	r2, r3
   8769a:	bf0c      	ite	eq
   8769c:	f04f 0902 	moveq.w	r9, #2
   876a0:	f04f 0901 	movne.w	r9, #1
   876a4:	e01a      	b.n	876dc <__gethex+0x458>
   876a6:	6920      	ldr	r0, [r4, #16]
   876a8:	4540      	cmp	r0, r8
   876aa:	dd09      	ble.n	876c0 <__gethex+0x43c>
   876ac:	2101      	movs	r1, #1
   876ae:	4620      	mov	r0, r4
   876b0:	f7ff fd8c 	bl	871cc <rshift>
   876b4:	68b3      	ldr	r3, [r6, #8]
   876b6:	3501      	adds	r5, #1
   876b8:	429d      	cmp	r5, r3
   876ba:	f73f af22 	bgt.w	87502 <__gethex+0x27e>
   876be:	e00b      	b.n	876d8 <__gethex+0x454>
   876c0:	f017 071f 	ands.w	r7, r7, #31
   876c4:	d008      	beq.n	876d8 <__gethex+0x454>
   876c6:	eb04 0188 	add.w	r1, r4, r8, lsl #2
   876ca:	6908      	ldr	r0, [r1, #16]
   876cc:	f000 fcc1 	bl	88052 <__hi0bits>
   876d0:	f1c7 0720 	rsb	r7, r7, #32
   876d4:	42b8      	cmp	r0, r7
   876d6:	dbe9      	blt.n	876ac <__gethex+0x428>
   876d8:	f04f 0901 	mov.w	r9, #1
   876dc:	f049 0920 	orr.w	r9, r9, #32
   876e0:	e001      	b.n	876e6 <__gethex+0x462>
   876e2:	f049 0910 	orr.w	r9, r9, #16
   876e6:	9812      	ldr	r0, [sp, #72]	; 0x48
   876e8:	9906      	ldr	r1, [sp, #24]
   876ea:	6004      	str	r4, [r0, #0]
   876ec:	600d      	str	r5, [r1, #0]
   876ee:	4648      	mov	r0, r9
   876f0:	b009      	add	sp, #36	; 0x24
   876f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   876f6:	bf00      	nop

000876f8 <L_shift>:
   876f8:	f1c2 0208 	rsb	r2, r2, #8
   876fc:	0092      	lsls	r2, r2, #2
   876fe:	b570      	push	{r4, r5, r6, lr}
   87700:	f1c2 0420 	rsb	r4, r2, #32
   87704:	6805      	ldr	r5, [r0, #0]
   87706:	f850 3f04 	ldr.w	r3, [r0, #4]!
   8770a:	fa03 f604 	lsl.w	r6, r3, r4
   8770e:	fa23 f302 	lsr.w	r3, r3, r2
   87712:	4335      	orrs	r5, r6
   87714:	4288      	cmp	r0, r1
   87716:	f840 5c04 	str.w	r5, [r0, #-4]
   8771a:	6003      	str	r3, [r0, #0]
   8771c:	d3f2      	bcc.n	87704 <L_shift+0xc>
   8771e:	bd70      	pop	{r4, r5, r6, pc}

00087720 <__hexnan>:
   87720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87724:	4b46      	ldr	r3, [pc, #280]	; (87840 <__hexnan+0x120>)
   87726:	4683      	mov	fp, r0
   87728:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   8772c:	460c      	mov	r4, r1
   8772e:	4615      	mov	r5, r2
   87730:	b908      	cbnz	r0, 87736 <__hexnan+0x16>
   87732:	f7ff fd91 	bl	87258 <__hexdig_init>
   87736:	6821      	ldr	r1, [r4, #0]
   87738:	f8db 3000 	ldr.w	r3, [fp]
   8773c:	114e      	asrs	r6, r1, #5
   8773e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   87742:	f011 0a1f 	ands.w	sl, r1, #31
   87746:	bf18      	it	ne
   87748:	3604      	addne	r6, #4
   8774a:	f1a6 0904 	sub.w	r9, r6, #4
   8774e:	2200      	movs	r2, #0
   87750:	f846 2c04 	str.w	r2, [r6, #-4]
   87754:	464f      	mov	r7, r9
   87756:	464c      	mov	r4, r9
   87758:	4694      	mov	ip, r2
   8775a:	4690      	mov	r8, r2
   8775c:	7859      	ldrb	r1, [r3, #1]
   8775e:	b3b9      	cbz	r1, 877d0 <__hexnan+0xb0>
   87760:	4837      	ldr	r0, [pc, #220]	; (87840 <__hexnan+0x120>)
   87762:	5c40      	ldrb	r0, [r0, r1]
   87764:	b9f0      	cbnz	r0, 877a4 <__hexnan+0x84>
   87766:	2920      	cmp	r1, #32
   87768:	d816      	bhi.n	87798 <__hexnan+0x78>
   8776a:	45c4      	cmp	ip, r8
   8776c:	da2e      	bge.n	877cc <__hexnan+0xac>
   8776e:	42bc      	cmp	r4, r7
   87770:	d209      	bcs.n	87786 <__hexnan+0x66>
   87772:	2a07      	cmp	r2, #7
   87774:	dc07      	bgt.n	87786 <__hexnan+0x66>
   87776:	4620      	mov	r0, r4
   87778:	4639      	mov	r1, r7
   8777a:	e88d 1008 	stmia.w	sp, {r3, ip}
   8777e:	f7ff ffbb 	bl	876f8 <L_shift>
   87782:	e89d 1008 	ldmia.w	sp, {r3, ip}
   87786:	42ac      	cmp	r4, r5
   87788:	d91f      	bls.n	877ca <__hexnan+0xaa>
   8778a:	2200      	movs	r2, #0
   8778c:	f844 2c04 	str.w	r2, [r4, #-4]
   87790:	3c04      	subs	r4, #4
   87792:	46c4      	mov	ip, r8
   87794:	4627      	mov	r7, r4
   87796:	e019      	b.n	877cc <__hexnan+0xac>
   87798:	2929      	cmp	r1, #41	; 0x29
   8779a:	d14c      	bne.n	87836 <__hexnan+0x116>
   8779c:	3302      	adds	r3, #2
   8779e:	f8cb 3000 	str.w	r3, [fp]
   877a2:	e015      	b.n	877d0 <__hexnan+0xb0>
   877a4:	3201      	adds	r2, #1
   877a6:	2a08      	cmp	r2, #8
   877a8:	f108 0801 	add.w	r8, r8, #1
   877ac:	dd06      	ble.n	877bc <__hexnan+0x9c>
   877ae:	42ac      	cmp	r4, r5
   877b0:	d90c      	bls.n	877cc <__hexnan+0xac>
   877b2:	2200      	movs	r2, #0
   877b4:	f844 2c04 	str.w	r2, [r4, #-4]
   877b8:	3c04      	subs	r4, #4
   877ba:	2201      	movs	r2, #1
   877bc:	6821      	ldr	r1, [r4, #0]
   877be:	f000 000f 	and.w	r0, r0, #15
   877c2:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
   877c6:	6021      	str	r1, [r4, #0]
   877c8:	e000      	b.n	877cc <__hexnan+0xac>
   877ca:	2208      	movs	r2, #8
   877cc:	3301      	adds	r3, #1
   877ce:	e7c5      	b.n	8775c <__hexnan+0x3c>
   877d0:	f1b8 0f00 	cmp.w	r8, #0
   877d4:	d02f      	beq.n	87836 <__hexnan+0x116>
   877d6:	42bc      	cmp	r4, r7
   877d8:	d205      	bcs.n	877e6 <__hexnan+0xc6>
   877da:	2a07      	cmp	r2, #7
   877dc:	dc03      	bgt.n	877e6 <__hexnan+0xc6>
   877de:	4620      	mov	r0, r4
   877e0:	4639      	mov	r1, r7
   877e2:	f7ff ff89 	bl	876f8 <L_shift>
   877e6:	42ac      	cmp	r4, r5
   877e8:	d90d      	bls.n	87806 <__hexnan+0xe6>
   877ea:	462a      	mov	r2, r5
   877ec:	f854 3b04 	ldr.w	r3, [r4], #4
   877f0:	f842 3b04 	str.w	r3, [r2], #4
   877f4:	45a1      	cmp	r9, r4
   877f6:	4610      	mov	r0, r2
   877f8:	d2f8      	bcs.n	877ec <__hexnan+0xcc>
   877fa:	2100      	movs	r1, #0
   877fc:	f840 1b04 	str.w	r1, [r0], #4
   87800:	4548      	cmp	r0, r9
   87802:	d9fa      	bls.n	877fa <__hexnan+0xda>
   87804:	e00e      	b.n	87824 <__hexnan+0x104>
   87806:	f1ba 0f00 	cmp.w	sl, #0
   8780a:	d00b      	beq.n	87824 <__hexnan+0x104>
   8780c:	f1ca 0a20 	rsb	sl, sl, #32
   87810:	f04f 32ff 	mov.w	r2, #4294967295
   87814:	fa22 fa0a 	lsr.w	sl, r2, sl
   87818:	f856 0c04 	ldr.w	r0, [r6, #-4]
   8781c:	ea00 010a 	and.w	r1, r0, sl
   87820:	f846 1c04 	str.w	r1, [r6, #-4]
   87824:	f856 2c04 	ldr.w	r2, [r6, #-4]
   87828:	3e04      	subs	r6, #4
   8782a:	b932      	cbnz	r2, 8783a <__hexnan+0x11a>
   8782c:	42b5      	cmp	r5, r6
   8782e:	d1f9      	bne.n	87824 <__hexnan+0x104>
   87830:	2301      	movs	r3, #1
   87832:	602b      	str	r3, [r5, #0]
   87834:	e001      	b.n	8783a <__hexnan+0x11a>
   87836:	2004      	movs	r0, #4
   87838:	e000      	b.n	8783c <__hexnan+0x11c>
   8783a:	2005      	movs	r0, #5
   8783c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87840:	2007ab78 	.word	0x2007ab78

00087844 <iswspace>:
   87844:	28ff      	cmp	r0, #255	; 0xff
   87846:	d807      	bhi.n	87858 <iswspace+0x14>
   87848:	4b04      	ldr	r3, [pc, #16]	; (8785c <iswspace+0x18>)
   8784a:	6819      	ldr	r1, [r3, #0]
   8784c:	1808      	adds	r0, r1, r0
   8784e:	7842      	ldrb	r2, [r0, #1]
   87850:	f002 0308 	and.w	r3, r2, #8
   87854:	b2d8      	uxtb	r0, r3
   87856:	4770      	bx	lr
   87858:	2000      	movs	r0, #0
   8785a:	4770      	bx	lr
   8785c:	20070468 	.word	0x20070468

00087860 <_setlocale_r>:
   87860:	b510      	push	{r4, lr}
   87862:	4614      	mov	r4, r2
   87864:	b90a      	cbnz	r2, 8786a <_setlocale_r+0xa>
   87866:	480c      	ldr	r0, [pc, #48]	; (87898 <_setlocale_r+0x38>)
   87868:	bd10      	pop	{r4, pc}
   8786a:	4610      	mov	r0, r2
   8786c:	490b      	ldr	r1, [pc, #44]	; (8789c <_setlocale_r+0x3c>)
   8786e:	f001 f9e0 	bl	88c32 <strcmp>
   87872:	2800      	cmp	r0, #0
   87874:	d0f7      	beq.n	87866 <_setlocale_r+0x6>
   87876:	4620      	mov	r0, r4
   87878:	4907      	ldr	r1, [pc, #28]	; (87898 <_setlocale_r+0x38>)
   8787a:	f001 f9da 	bl	88c32 <strcmp>
   8787e:	2800      	cmp	r0, #0
   87880:	d0f1      	beq.n	87866 <_setlocale_r+0x6>
   87882:	4620      	mov	r0, r4
   87884:	4906      	ldr	r1, [pc, #24]	; (878a0 <_setlocale_r+0x40>)
   87886:	f001 f9d4 	bl	88c32 <strcmp>
   8788a:	4b03      	ldr	r3, [pc, #12]	; (87898 <_setlocale_r+0x38>)
   8788c:	2800      	cmp	r0, #0
   8788e:	bf0c      	ite	eq
   87890:	4618      	moveq	r0, r3
   87892:	2000      	movne	r0, #0
   87894:	bd10      	pop	{r4, pc}
   87896:	bf00      	nop
   87898:	0008a768 	.word	0x0008a768
   8789c:	0008a934 	.word	0x0008a934
   878a0:	0008a93b 	.word	0x0008a93b

000878a4 <__locale_charset>:
   878a4:	4800      	ldr	r0, [pc, #0]	; (878a8 <__locale_charset+0x4>)
   878a6:	4770      	bx	lr
   878a8:	2007046c 	.word	0x2007046c

000878ac <__locale_mb_cur_max>:
   878ac:	4b01      	ldr	r3, [pc, #4]	; (878b4 <__locale_mb_cur_max+0x8>)
   878ae:	6a18      	ldr	r0, [r3, #32]
   878b0:	4770      	bx	lr
   878b2:	bf00      	nop
   878b4:	2007046c 	.word	0x2007046c

000878b8 <__locale_msgcharset>:
   878b8:	4800      	ldr	r0, [pc, #0]	; (878bc <__locale_msgcharset+0x4>)
   878ba:	4770      	bx	lr
   878bc:	20070490 	.word	0x20070490

000878c0 <__locale_cjk_lang>:
   878c0:	2000      	movs	r0, #0
   878c2:	4770      	bx	lr

000878c4 <_localeconv_r>:
   878c4:	4800      	ldr	r0, [pc, #0]	; (878c8 <_localeconv_r+0x4>)
   878c6:	4770      	bx	lr
   878c8:	200704b0 	.word	0x200704b0

000878cc <setlocale>:
   878cc:	460a      	mov	r2, r1
   878ce:	4903      	ldr	r1, [pc, #12]	; (878dc <setlocale+0x10>)
   878d0:	4603      	mov	r3, r0
   878d2:	6808      	ldr	r0, [r1, #0]
   878d4:	4619      	mov	r1, r3
   878d6:	f7ff bfc3 	b.w	87860 <_setlocale_r>
   878da:	bf00      	nop
   878dc:	20070010 	.word	0x20070010

000878e0 <localeconv>:
   878e0:	4800      	ldr	r0, [pc, #0]	; (878e4 <localeconv+0x4>)
   878e2:	4770      	bx	lr
   878e4:	200704b0 	.word	0x200704b0

000878e8 <__smakebuf_r>:
   878e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   878ea:	898b      	ldrh	r3, [r1, #12]
   878ec:	460c      	mov	r4, r1
   878ee:	f003 0102 	and.w	r1, r3, #2
   878f2:	b20a      	sxth	r2, r1
   878f4:	b091      	sub	sp, #68	; 0x44
   878f6:	4606      	mov	r6, r0
   878f8:	2a00      	cmp	r2, #0
   878fa:	d13f      	bne.n	8797c <__smakebuf_r+0x94>
   878fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   87900:	2900      	cmp	r1, #0
   87902:	da0d      	bge.n	87920 <__smakebuf_r+0x38>
   87904:	89a7      	ldrh	r7, [r4, #12]
   87906:	f007 0280 	and.w	r2, r7, #128	; 0x80
   8790a:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   8790e:	b210      	sxth	r0, r2
   87910:	2800      	cmp	r0, #0
   87912:	bf0c      	ite	eq
   87914:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   87918:	2540      	movne	r5, #64	; 0x40
   8791a:	81a3      	strh	r3, [r4, #12]
   8791c:	2700      	movs	r7, #0
   8791e:	e020      	b.n	87962 <__smakebuf_r+0x7a>
   87920:	aa01      	add	r2, sp, #4
   87922:	f002 fa9f 	bl	89e64 <_fstat_r>
   87926:	2800      	cmp	r0, #0
   87928:	dbec      	blt.n	87904 <__smakebuf_r+0x1c>
   8792a:	9802      	ldr	r0, [sp, #8]
   8792c:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   87930:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   87934:	425f      	negs	r7, r3
   87936:	415f      	adcs	r7, r3
   87938:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   8793c:	d10b      	bne.n	87956 <__smakebuf_r+0x6e>
   8793e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   87940:	4a1d      	ldr	r2, [pc, #116]	; (879b8 <__smakebuf_r+0xd0>)
   87942:	4291      	cmp	r1, r2
   87944:	d107      	bne.n	87956 <__smakebuf_r+0x6e>
   87946:	89a3      	ldrh	r3, [r4, #12]
   87948:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8794c:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   87950:	81a1      	strh	r1, [r4, #12]
   87952:	64e5      	str	r5, [r4, #76]	; 0x4c
   87954:	e005      	b.n	87962 <__smakebuf_r+0x7a>
   87956:	89a0      	ldrh	r0, [r4, #12]
   87958:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   8795c:	81a5      	strh	r5, [r4, #12]
   8795e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   87962:	4630      	mov	r0, r6
   87964:	4629      	mov	r1, r5
   87966:	f000 f83b 	bl	879e0 <_malloc_r>
   8796a:	b970      	cbnz	r0, 8798a <__smakebuf_r+0xa2>
   8796c:	89a3      	ldrh	r3, [r4, #12]
   8796e:	f403 7200 	and.w	r2, r3, #512	; 0x200
   87972:	b210      	sxth	r0, r2
   87974:	b9e8      	cbnz	r0, 879b2 <__smakebuf_r+0xca>
   87976:	f043 0102 	orr.w	r1, r3, #2
   8797a:	81a1      	strh	r1, [r4, #12]
   8797c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   87980:	2201      	movs	r2, #1
   87982:	6023      	str	r3, [r4, #0]
   87984:	6123      	str	r3, [r4, #16]
   87986:	6162      	str	r2, [r4, #20]
   87988:	e013      	b.n	879b2 <__smakebuf_r+0xca>
   8798a:	89a2      	ldrh	r2, [r4, #12]
   8798c:	490b      	ldr	r1, [pc, #44]	; (879bc <__smakebuf_r+0xd4>)
   8798e:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   87992:	63f1      	str	r1, [r6, #60]	; 0x3c
   87994:	81a3      	strh	r3, [r4, #12]
   87996:	6020      	str	r0, [r4, #0]
   87998:	6120      	str	r0, [r4, #16]
   8799a:	6165      	str	r5, [r4, #20]
   8799c:	b14f      	cbz	r7, 879b2 <__smakebuf_r+0xca>
   8799e:	4630      	mov	r0, r6
   879a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   879a4:	f002 fa70 	bl	89e88 <_isatty_r>
   879a8:	b118      	cbz	r0, 879b2 <__smakebuf_r+0xca>
   879aa:	89a0      	ldrh	r0, [r4, #12]
   879ac:	f040 0101 	orr.w	r1, r0, #1
   879b0:	81a1      	strh	r1, [r4, #12]
   879b2:	b011      	add	sp, #68	; 0x44
   879b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   879b6:	bf00      	nop
   879b8:	00088c07 	.word	0x00088c07
   879bc:	00086961 	.word	0x00086961

000879c0 <malloc>:
   879c0:	4b02      	ldr	r3, [pc, #8]	; (879cc <malloc+0xc>)
   879c2:	4601      	mov	r1, r0
   879c4:	6818      	ldr	r0, [r3, #0]
   879c6:	f000 b80b 	b.w	879e0 <_malloc_r>
   879ca:	bf00      	nop
   879cc:	20070010 	.word	0x20070010

000879d0 <free>:
   879d0:	4b02      	ldr	r3, [pc, #8]	; (879dc <free+0xc>)
   879d2:	4601      	mov	r1, r0
   879d4:	6818      	ldr	r0, [r3, #0]
   879d6:	f7ff b9a5 	b.w	86d24 <_free_r>
   879da:	bf00      	nop
   879dc:	20070010 	.word	0x20070010

000879e0 <_malloc_r>:
   879e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   879e4:	f101 040b 	add.w	r4, r1, #11
   879e8:	2c16      	cmp	r4, #22
   879ea:	4606      	mov	r6, r0
   879ec:	d903      	bls.n	879f6 <_malloc_r+0x16>
   879ee:	f034 0407 	bics.w	r4, r4, #7
   879f2:	d501      	bpl.n	879f8 <_malloc_r+0x18>
   879f4:	e002      	b.n	879fc <_malloc_r+0x1c>
   879f6:	2410      	movs	r4, #16
   879f8:	428c      	cmp	r4, r1
   879fa:	d202      	bcs.n	87a02 <_malloc_r+0x22>
   879fc:	250c      	movs	r5, #12
   879fe:	6035      	str	r5, [r6, #0]
   87a00:	e1d9      	b.n	87db6 <_malloc_r+0x3d6>
   87a02:	4630      	mov	r0, r6
   87a04:	f000 fa76 	bl	87ef4 <__malloc_lock>
   87a08:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   87a0c:	d214      	bcs.n	87a38 <_malloc_r+0x58>
   87a0e:	4da0      	ldr	r5, [pc, #640]	; (87c90 <_malloc_r+0x2b0>)
   87a10:	08e1      	lsrs	r1, r4, #3
   87a12:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   87a16:	68c5      	ldr	r5, [r0, #12]
   87a18:	4285      	cmp	r5, r0
   87a1a:	d105      	bne.n	87a28 <_malloc_r+0x48>
   87a1c:	f105 0308 	add.w	r3, r5, #8
   87a20:	696d      	ldr	r5, [r5, #20]
   87a22:	1c8a      	adds	r2, r1, #2
   87a24:	429d      	cmp	r5, r3
   87a26:	d044      	beq.n	87ab2 <_malloc_r+0xd2>
   87a28:	68e8      	ldr	r0, [r5, #12]
   87a2a:	68a9      	ldr	r1, [r5, #8]
   87a2c:	686a      	ldr	r2, [r5, #4]
   87a2e:	60c8      	str	r0, [r1, #12]
   87a30:	f022 0303 	bic.w	r3, r2, #3
   87a34:	6081      	str	r1, [r0, #8]
   87a36:	e059      	b.n	87aec <_malloc_r+0x10c>
   87a38:	0a62      	lsrs	r2, r4, #9
   87a3a:	d101      	bne.n	87a40 <_malloc_r+0x60>
   87a3c:	08e2      	lsrs	r2, r4, #3
   87a3e:	e01b      	b.n	87a78 <_malloc_r+0x98>
   87a40:	2a04      	cmp	r2, #4
   87a42:	d802      	bhi.n	87a4a <_malloc_r+0x6a>
   87a44:	09a2      	lsrs	r2, r4, #6
   87a46:	3238      	adds	r2, #56	; 0x38
   87a48:	e016      	b.n	87a78 <_malloc_r+0x98>
   87a4a:	2a14      	cmp	r2, #20
   87a4c:	d801      	bhi.n	87a52 <_malloc_r+0x72>
   87a4e:	325b      	adds	r2, #91	; 0x5b
   87a50:	e012      	b.n	87a78 <_malloc_r+0x98>
   87a52:	2a54      	cmp	r2, #84	; 0x54
   87a54:	d802      	bhi.n	87a5c <_malloc_r+0x7c>
   87a56:	0b22      	lsrs	r2, r4, #12
   87a58:	326e      	adds	r2, #110	; 0x6e
   87a5a:	e00d      	b.n	87a78 <_malloc_r+0x98>
   87a5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87a60:	d802      	bhi.n	87a68 <_malloc_r+0x88>
   87a62:	0be2      	lsrs	r2, r4, #15
   87a64:	3277      	adds	r2, #119	; 0x77
   87a66:	e007      	b.n	87a78 <_malloc_r+0x98>
   87a68:	f240 5354 	movw	r3, #1364	; 0x554
   87a6c:	429a      	cmp	r2, r3
   87a6e:	d802      	bhi.n	87a76 <_malloc_r+0x96>
   87a70:	0ca2      	lsrs	r2, r4, #18
   87a72:	327c      	adds	r2, #124	; 0x7c
   87a74:	e000      	b.n	87a78 <_malloc_r+0x98>
   87a76:	227e      	movs	r2, #126	; 0x7e
   87a78:	4885      	ldr	r0, [pc, #532]	; (87c90 <_malloc_r+0x2b0>)
   87a7a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   87a7e:	68dd      	ldr	r5, [r3, #12]
   87a80:	429d      	cmp	r5, r3
   87a82:	d015      	beq.n	87ab0 <_malloc_r+0xd0>
   87a84:	6869      	ldr	r1, [r5, #4]
   87a86:	f021 0103 	bic.w	r1, r1, #3
   87a8a:	1b08      	subs	r0, r1, r4
   87a8c:	280f      	cmp	r0, #15
   87a8e:	dd01      	ble.n	87a94 <_malloc_r+0xb4>
   87a90:	3a01      	subs	r2, #1
   87a92:	e00d      	b.n	87ab0 <_malloc_r+0xd0>
   87a94:	2800      	cmp	r0, #0
   87a96:	db09      	blt.n	87aac <_malloc_r+0xcc>
   87a98:	68eb      	ldr	r3, [r5, #12]
   87a9a:	68aa      	ldr	r2, [r5, #8]
   87a9c:	60d3      	str	r3, [r2, #12]
   87a9e:	609a      	str	r2, [r3, #8]
   87aa0:	186b      	adds	r3, r5, r1
   87aa2:	685a      	ldr	r2, [r3, #4]
   87aa4:	f042 0001 	orr.w	r0, r2, #1
   87aa8:	6058      	str	r0, [r3, #4]
   87aaa:	e190      	b.n	87dce <_malloc_r+0x3ee>
   87aac:	68ed      	ldr	r5, [r5, #12]
   87aae:	e7e7      	b.n	87a80 <_malloc_r+0xa0>
   87ab0:	3201      	adds	r2, #1
   87ab2:	4977      	ldr	r1, [pc, #476]	; (87c90 <_malloc_r+0x2b0>)
   87ab4:	690d      	ldr	r5, [r1, #16]
   87ab6:	f101 0708 	add.w	r7, r1, #8
   87aba:	42bd      	cmp	r5, r7
   87abc:	d068      	beq.n	87b90 <_malloc_r+0x1b0>
   87abe:	6868      	ldr	r0, [r5, #4]
   87ac0:	f020 0303 	bic.w	r3, r0, #3
   87ac4:	1b18      	subs	r0, r3, r4
   87ac6:	280f      	cmp	r0, #15
   87ac8:	dd0c      	ble.n	87ae4 <_malloc_r+0x104>
   87aca:	192b      	adds	r3, r5, r4
   87acc:	614b      	str	r3, [r1, #20]
   87ace:	610b      	str	r3, [r1, #16]
   87ad0:	f044 0401 	orr.w	r4, r4, #1
   87ad4:	f040 0101 	orr.w	r1, r0, #1
   87ad8:	606c      	str	r4, [r5, #4]
   87ada:	60df      	str	r7, [r3, #12]
   87adc:	609f      	str	r7, [r3, #8]
   87ade:	6059      	str	r1, [r3, #4]
   87ae0:	5018      	str	r0, [r3, r0]
   87ae2:	e174      	b.n	87dce <_malloc_r+0x3ee>
   87ae4:	2800      	cmp	r0, #0
   87ae6:	614f      	str	r7, [r1, #20]
   87ae8:	610f      	str	r7, [r1, #16]
   87aea:	db01      	blt.n	87af0 <_malloc_r+0x110>
   87aec:	18eb      	adds	r3, r5, r3
   87aee:	e7d8      	b.n	87aa2 <_malloc_r+0xc2>
   87af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87af4:	d20f      	bcs.n	87b16 <_malloc_r+0x136>
   87af6:	08db      	lsrs	r3, r3, #3
   87af8:	1098      	asrs	r0, r3, #2
   87afa:	2701      	movs	r7, #1
   87afc:	fa07 f700 	lsl.w	r7, r7, r0
   87b00:	6848      	ldr	r0, [r1, #4]
   87b02:	4307      	orrs	r7, r0
   87b04:	604f      	str	r7, [r1, #4]
   87b06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   87b0a:	688b      	ldr	r3, [r1, #8]
   87b0c:	60e9      	str	r1, [r5, #12]
   87b0e:	60ab      	str	r3, [r5, #8]
   87b10:	60dd      	str	r5, [r3, #12]
   87b12:	608d      	str	r5, [r1, #8]
   87b14:	e03c      	b.n	87b90 <_malloc_r+0x1b0>
   87b16:	0a58      	lsrs	r0, r3, #9
   87b18:	2804      	cmp	r0, #4
   87b1a:	d802      	bhi.n	87b22 <_malloc_r+0x142>
   87b1c:	0998      	lsrs	r0, r3, #6
   87b1e:	3038      	adds	r0, #56	; 0x38
   87b20:	e016      	b.n	87b50 <_malloc_r+0x170>
   87b22:	2814      	cmp	r0, #20
   87b24:	d801      	bhi.n	87b2a <_malloc_r+0x14a>
   87b26:	305b      	adds	r0, #91	; 0x5b
   87b28:	e012      	b.n	87b50 <_malloc_r+0x170>
   87b2a:	2854      	cmp	r0, #84	; 0x54
   87b2c:	d802      	bhi.n	87b34 <_malloc_r+0x154>
   87b2e:	0b18      	lsrs	r0, r3, #12
   87b30:	306e      	adds	r0, #110	; 0x6e
   87b32:	e00d      	b.n	87b50 <_malloc_r+0x170>
   87b34:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   87b38:	d802      	bhi.n	87b40 <_malloc_r+0x160>
   87b3a:	0bd8      	lsrs	r0, r3, #15
   87b3c:	3077      	adds	r0, #119	; 0x77
   87b3e:	e007      	b.n	87b50 <_malloc_r+0x170>
   87b40:	f240 5754 	movw	r7, #1364	; 0x554
   87b44:	42b8      	cmp	r0, r7
   87b46:	d802      	bhi.n	87b4e <_malloc_r+0x16e>
   87b48:	0c98      	lsrs	r0, r3, #18
   87b4a:	307c      	adds	r0, #124	; 0x7c
   87b4c:	e000      	b.n	87b50 <_malloc_r+0x170>
   87b4e:	207e      	movs	r0, #126	; 0x7e
   87b50:	f8df e13c 	ldr.w	lr, [pc, #316]	; 87c90 <_malloc_r+0x2b0>
   87b54:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   87b58:	68b9      	ldr	r1, [r7, #8]
   87b5a:	42b9      	cmp	r1, r7
   87b5c:	d10e      	bne.n	87b7c <_malloc_r+0x19c>
   87b5e:	1087      	asrs	r7, r0, #2
   87b60:	2301      	movs	r3, #1
   87b62:	fa03 f007 	lsl.w	r0, r3, r7
   87b66:	f8de 7004 	ldr.w	r7, [lr, #4]
   87b6a:	ea40 0307 	orr.w	r3, r0, r7
   87b6e:	f8ce 3004 	str.w	r3, [lr, #4]
   87b72:	4608      	mov	r0, r1
   87b74:	e008      	b.n	87b88 <_malloc_r+0x1a8>
   87b76:	6889      	ldr	r1, [r1, #8]
   87b78:	42b9      	cmp	r1, r7
   87b7a:	d004      	beq.n	87b86 <_malloc_r+0x1a6>
   87b7c:	6848      	ldr	r0, [r1, #4]
   87b7e:	f020 0003 	bic.w	r0, r0, #3
   87b82:	4283      	cmp	r3, r0
   87b84:	d3f7      	bcc.n	87b76 <_malloc_r+0x196>
   87b86:	68c8      	ldr	r0, [r1, #12]
   87b88:	60e8      	str	r0, [r5, #12]
   87b8a:	60a9      	str	r1, [r5, #8]
   87b8c:	60cd      	str	r5, [r1, #12]
   87b8e:	6085      	str	r5, [r0, #8]
   87b90:	1095      	asrs	r5, r2, #2
   87b92:	2001      	movs	r0, #1
   87b94:	fa00 f305 	lsl.w	r3, r0, r5
   87b98:	4f3d      	ldr	r7, [pc, #244]	; (87c90 <_malloc_r+0x2b0>)
   87b9a:	6879      	ldr	r1, [r7, #4]
   87b9c:	428b      	cmp	r3, r1
   87b9e:	d85d      	bhi.n	87c5c <_malloc_r+0x27c>
   87ba0:	420b      	tst	r3, r1
   87ba2:	d105      	bne.n	87bb0 <_malloc_r+0x1d0>
   87ba4:	f022 0203 	bic.w	r2, r2, #3
   87ba8:	005b      	lsls	r3, r3, #1
   87baa:	3204      	adds	r2, #4
   87bac:	420b      	tst	r3, r1
   87bae:	d0fb      	beq.n	87ba8 <_malloc_r+0x1c8>
   87bb0:	4d37      	ldr	r5, [pc, #220]	; (87c90 <_malloc_r+0x2b0>)
   87bb2:	4610      	mov	r0, r2
   87bb4:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   87bb8:	4677      	mov	r7, lr
   87bba:	68fd      	ldr	r5, [r7, #12]
   87bbc:	42bd      	cmp	r5, r7
   87bbe:	d02d      	beq.n	87c1c <_malloc_r+0x23c>
   87bc0:	6869      	ldr	r1, [r5, #4]
   87bc2:	f021 0c03 	bic.w	ip, r1, #3
   87bc6:	ebc4 010c 	rsb	r1, r4, ip
   87bca:	290f      	cmp	r1, #15
   87bcc:	dd13      	ble.n	87bf6 <_malloc_r+0x216>
   87bce:	192b      	adds	r3, r5, r4
   87bd0:	f044 0401 	orr.w	r4, r4, #1
   87bd4:	68ea      	ldr	r2, [r5, #12]
   87bd6:	606c      	str	r4, [r5, #4]
   87bd8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87bdc:	5059      	str	r1, [r3, r1]
   87bde:	60c2      	str	r2, [r0, #12]
   87be0:	6090      	str	r0, [r2, #8]
   87be2:	4a2b      	ldr	r2, [pc, #172]	; (87c90 <_malloc_r+0x2b0>)
   87be4:	f041 0001 	orr.w	r0, r1, #1
   87be8:	6153      	str	r3, [r2, #20]
   87bea:	6113      	str	r3, [r2, #16]
   87bec:	3208      	adds	r2, #8
   87bee:	60da      	str	r2, [r3, #12]
   87bf0:	609a      	str	r2, [r3, #8]
   87bf2:	6058      	str	r0, [r3, #4]
   87bf4:	e00c      	b.n	87c10 <_malloc_r+0x230>
   87bf6:	2900      	cmp	r1, #0
   87bf8:	db0e      	blt.n	87c18 <_malloc_r+0x238>
   87bfa:	eb05 000c 	add.w	r0, r5, ip
   87bfe:	6842      	ldr	r2, [r0, #4]
   87c00:	68e9      	ldr	r1, [r5, #12]
   87c02:	f042 0301 	orr.w	r3, r2, #1
   87c06:	6043      	str	r3, [r0, #4]
   87c08:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87c0c:	60c1      	str	r1, [r0, #12]
   87c0e:	6088      	str	r0, [r1, #8]
   87c10:	4630      	mov	r0, r6
   87c12:	f000 f970 	bl	87ef6 <__malloc_unlock>
   87c16:	e0de      	b.n	87dd6 <_malloc_r+0x3f6>
   87c18:	68ed      	ldr	r5, [r5, #12]
   87c1a:	e7cf      	b.n	87bbc <_malloc_r+0x1dc>
   87c1c:	3001      	adds	r0, #1
   87c1e:	0781      	lsls	r1, r0, #30
   87c20:	f105 0708 	add.w	r7, r5, #8
   87c24:	d1c9      	bne.n	87bba <_malloc_r+0x1da>
   87c26:	4671      	mov	r1, lr
   87c28:	0795      	lsls	r5, r2, #30
   87c2a:	d105      	bne.n	87c38 <_malloc_r+0x258>
   87c2c:	4a18      	ldr	r2, [pc, #96]	; (87c90 <_malloc_r+0x2b0>)
   87c2e:	6855      	ldr	r5, [r2, #4]
   87c30:	ea25 0503 	bic.w	r5, r5, r3
   87c34:	6055      	str	r5, [r2, #4]
   87c36:	e005      	b.n	87c44 <_malloc_r+0x264>
   87c38:	f1a1 0708 	sub.w	r7, r1, #8
   87c3c:	6809      	ldr	r1, [r1, #0]
   87c3e:	3a01      	subs	r2, #1
   87c40:	42b9      	cmp	r1, r7
   87c42:	d0f1      	beq.n	87c28 <_malloc_r+0x248>
   87c44:	4f12      	ldr	r7, [pc, #72]	; (87c90 <_malloc_r+0x2b0>)
   87c46:	005b      	lsls	r3, r3, #1
   87c48:	687f      	ldr	r7, [r7, #4]
   87c4a:	42bb      	cmp	r3, r7
   87c4c:	d806      	bhi.n	87c5c <_malloc_r+0x27c>
   87c4e:	b12b      	cbz	r3, 87c5c <_malloc_r+0x27c>
   87c50:	4602      	mov	r2, r0
   87c52:	423b      	tst	r3, r7
   87c54:	d1ac      	bne.n	87bb0 <_malloc_r+0x1d0>
   87c56:	3204      	adds	r2, #4
   87c58:	005b      	lsls	r3, r3, #1
   87c5a:	e7fa      	b.n	87c52 <_malloc_r+0x272>
   87c5c:	4b0c      	ldr	r3, [pc, #48]	; (87c90 <_malloc_r+0x2b0>)
   87c5e:	689f      	ldr	r7, [r3, #8]
   87c60:	4619      	mov	r1, r3
   87c62:	6878      	ldr	r0, [r7, #4]
   87c64:	f020 0903 	bic.w	r9, r0, #3
   87c68:	45a1      	cmp	r9, r4
   87c6a:	d304      	bcc.n	87c76 <_malloc_r+0x296>
   87c6c:	ebc4 0009 	rsb	r0, r4, r9
   87c70:	280f      	cmp	r0, #15
   87c72:	f300 80a2 	bgt.w	87dba <_malloc_r+0x3da>
   87c76:	4a07      	ldr	r2, [pc, #28]	; (87c94 <_malloc_r+0x2b4>)
   87c78:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   87c7c:	6815      	ldr	r5, [r2, #0]
   87c7e:	3301      	adds	r3, #1
   87c80:	eb07 0a09 	add.w	sl, r7, r9
   87c84:	eb04 0805 	add.w	r8, r4, r5
   87c88:	d106      	bne.n	87c98 <_malloc_r+0x2b8>
   87c8a:	f108 0810 	add.w	r8, r8, #16
   87c8e:	e00b      	b.n	87ca8 <_malloc_r+0x2c8>
   87c90:	200704e8 	.word	0x200704e8
   87c94:	2007ab04 	.word	0x2007ab04
   87c98:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   87c9c:	f100 010f 	add.w	r1, r0, #15
   87ca0:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   87ca4:	f022 080f 	bic.w	r8, r2, #15
   87ca8:	4630      	mov	r0, r6
   87caa:	4641      	mov	r1, r8
   87cac:	f000 ff36 	bl	88b1c <_sbrk_r>
   87cb0:	1c42      	adds	r2, r0, #1
   87cb2:	4605      	mov	r5, r0
   87cb4:	d071      	beq.n	87d9a <_malloc_r+0x3ba>
   87cb6:	4550      	cmp	r0, sl
   87cb8:	d202      	bcs.n	87cc0 <_malloc_r+0x2e0>
   87cba:	4b48      	ldr	r3, [pc, #288]	; (87ddc <_malloc_r+0x3fc>)
   87cbc:	429f      	cmp	r7, r3
   87cbe:	d16c      	bne.n	87d9a <_malloc_r+0x3ba>
   87cc0:	4847      	ldr	r0, [pc, #284]	; (87de0 <_malloc_r+0x400>)
   87cc2:	4555      	cmp	r5, sl
   87cc4:	6841      	ldr	r1, [r0, #4]
   87cc6:	4a45      	ldr	r2, [pc, #276]	; (87ddc <_malloc_r+0x3fc>)
   87cc8:	eb08 0301 	add.w	r3, r8, r1
   87ccc:	6043      	str	r3, [r0, #4]
   87cce:	d107      	bne.n	87ce0 <_malloc_r+0x300>
   87cd0:	0529      	lsls	r1, r5, #20
   87cd2:	d105      	bne.n	87ce0 <_malloc_r+0x300>
   87cd4:	6895      	ldr	r5, [r2, #8]
   87cd6:	44c8      	add	r8, r9
   87cd8:	f048 0001 	orr.w	r0, r8, #1
   87cdc:	6068      	str	r0, [r5, #4]
   87cde:	e051      	b.n	87d84 <_malloc_r+0x3a4>
   87ce0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   87ce4:	1c42      	adds	r2, r0, #1
   87ce6:	d103      	bne.n	87cf0 <_malloc_r+0x310>
   87ce8:	4a3c      	ldr	r2, [pc, #240]	; (87ddc <_malloc_r+0x3fc>)
   87cea:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   87cee:	e005      	b.n	87cfc <_malloc_r+0x31c>
   87cf0:	ebca 0a05 	rsb	sl, sl, r5
   87cf4:	eb03 010a 	add.w	r1, r3, sl
   87cf8:	4b39      	ldr	r3, [pc, #228]	; (87de0 <_malloc_r+0x400>)
   87cfa:	6059      	str	r1, [r3, #4]
   87cfc:	f015 0007 	ands.w	r0, r5, #7
   87d00:	bf1c      	itt	ne
   87d02:	f1c0 0008 	rsbne	r0, r0, #8
   87d06:	182d      	addne	r5, r5, r0
   87d08:	eb05 0c08 	add.w	ip, r5, r8
   87d0c:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   87d10:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   87d14:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   87d18:	4641      	mov	r1, r8
   87d1a:	4630      	mov	r0, r6
   87d1c:	f000 fefe 	bl	88b1c <_sbrk_r>
   87d20:	4a2f      	ldr	r2, [pc, #188]	; (87de0 <_malloc_r+0x400>)
   87d22:	1c43      	adds	r3, r0, #1
   87d24:	6853      	ldr	r3, [r2, #4]
   87d26:	bf08      	it	eq
   87d28:	f04f 0800 	moveq.w	r8, #0
   87d2c:	eb08 0103 	add.w	r1, r8, r3
   87d30:	bf08      	it	eq
   87d32:	4628      	moveq	r0, r5
   87d34:	6051      	str	r1, [r2, #4]
   87d36:	1b40      	subs	r0, r0, r5
   87d38:	4a28      	ldr	r2, [pc, #160]	; (87ddc <_malloc_r+0x3fc>)
   87d3a:	eb00 0308 	add.w	r3, r0, r8
   87d3e:	f043 0101 	orr.w	r1, r3, #1
   87d42:	4297      	cmp	r7, r2
   87d44:	6095      	str	r5, [r2, #8]
   87d46:	6069      	str	r1, [r5, #4]
   87d48:	d01c      	beq.n	87d84 <_malloc_r+0x3a4>
   87d4a:	f1b9 0f0f 	cmp.w	r9, #15
   87d4e:	d802      	bhi.n	87d56 <_malloc_r+0x376>
   87d50:	2201      	movs	r2, #1
   87d52:	606a      	str	r2, [r5, #4]
   87d54:	e021      	b.n	87d9a <_malloc_r+0x3ba>
   87d56:	687d      	ldr	r5, [r7, #4]
   87d58:	f1a9 090c 	sub.w	r9, r9, #12
   87d5c:	f029 0907 	bic.w	r9, r9, #7
   87d60:	f005 0201 	and.w	r2, r5, #1
   87d64:	2105      	movs	r1, #5
   87d66:	eb07 0309 	add.w	r3, r7, r9
   87d6a:	ea49 0002 	orr.w	r0, r9, r2
   87d6e:	f1b9 0f0f 	cmp.w	r9, #15
   87d72:	6078      	str	r0, [r7, #4]
   87d74:	6059      	str	r1, [r3, #4]
   87d76:	6099      	str	r1, [r3, #8]
   87d78:	d904      	bls.n	87d84 <_malloc_r+0x3a4>
   87d7a:	4630      	mov	r0, r6
   87d7c:	f107 0108 	add.w	r1, r7, #8
   87d80:	f7fe ffd0 	bl	86d24 <_free_r>
   87d84:	4a16      	ldr	r2, [pc, #88]	; (87de0 <_malloc_r+0x400>)
   87d86:	6853      	ldr	r3, [r2, #4]
   87d88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   87d8a:	6b15      	ldr	r5, [r2, #48]	; 0x30
   87d8c:	428b      	cmp	r3, r1
   87d8e:	bf88      	it	hi
   87d90:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   87d92:	42ab      	cmp	r3, r5
   87d94:	bf84      	itt	hi
   87d96:	4d12      	ldrhi	r5, [pc, #72]	; (87de0 <_malloc_r+0x400>)
   87d98:	632b      	strhi	r3, [r5, #48]	; 0x30
   87d9a:	4810      	ldr	r0, [pc, #64]	; (87ddc <_malloc_r+0x3fc>)
   87d9c:	6882      	ldr	r2, [r0, #8]
   87d9e:	6853      	ldr	r3, [r2, #4]
   87da0:	f023 0103 	bic.w	r1, r3, #3
   87da4:	42a1      	cmp	r1, r4
   87da6:	ebc4 0001 	rsb	r0, r4, r1
   87daa:	d301      	bcc.n	87db0 <_malloc_r+0x3d0>
   87dac:	280f      	cmp	r0, #15
   87dae:	dc04      	bgt.n	87dba <_malloc_r+0x3da>
   87db0:	4630      	mov	r0, r6
   87db2:	f000 f8a0 	bl	87ef6 <__malloc_unlock>
   87db6:	2500      	movs	r5, #0
   87db8:	e00d      	b.n	87dd6 <_malloc_r+0x3f6>
   87dba:	4a08      	ldr	r2, [pc, #32]	; (87ddc <_malloc_r+0x3fc>)
   87dbc:	f044 0301 	orr.w	r3, r4, #1
   87dc0:	6895      	ldr	r5, [r2, #8]
   87dc2:	f040 0101 	orr.w	r1, r0, #1
   87dc6:	192c      	adds	r4, r5, r4
   87dc8:	606b      	str	r3, [r5, #4]
   87dca:	6094      	str	r4, [r2, #8]
   87dcc:	6061      	str	r1, [r4, #4]
   87dce:	4630      	mov	r0, r6
   87dd0:	f000 f891 	bl	87ef6 <__malloc_unlock>
   87dd4:	3508      	adds	r5, #8
   87dd6:	4628      	mov	r0, r5
   87dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87ddc:	200704e8 	.word	0x200704e8
   87de0:	2007ab04 	.word	0x2007ab04

00087de4 <_mbrtowc_r>:
   87de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   87de8:	4616      	mov	r6, r2
   87dea:	4a10      	ldr	r2, [pc, #64]	; (87e2c <_mbrtowc_r+0x48>)
   87dec:	4604      	mov	r4, r0
   87dee:	4689      	mov	r9, r1
   87df0:	4698      	mov	r8, r3
   87df2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87df4:	6817      	ldr	r7, [r2, #0]
   87df6:	b946      	cbnz	r6, 87e0a <_mbrtowc_r+0x26>
   87df8:	f7ff fd54 	bl	878a4 <__locale_charset>
   87dfc:	4631      	mov	r1, r6
   87dfe:	e88d 0021 	stmia.w	sp, {r0, r5}
   87e02:	4a0b      	ldr	r2, [pc, #44]	; (87e30 <_mbrtowc_r+0x4c>)
   87e04:	4620      	mov	r0, r4
   87e06:	2301      	movs	r3, #1
   87e08:	e007      	b.n	87e1a <_mbrtowc_r+0x36>
   87e0a:	f7ff fd4b 	bl	878a4 <__locale_charset>
   87e0e:	4649      	mov	r1, r9
   87e10:	e88d 0021 	stmia.w	sp, {r0, r5}
   87e14:	4632      	mov	r2, r6
   87e16:	4620      	mov	r0, r4
   87e18:	4643      	mov	r3, r8
   87e1a:	47b8      	blx	r7
   87e1c:	1c43      	adds	r3, r0, #1
   87e1e:	d103      	bne.n	87e28 <_mbrtowc_r+0x44>
   87e20:	2300      	movs	r3, #0
   87e22:	218a      	movs	r1, #138	; 0x8a
   87e24:	602b      	str	r3, [r5, #0]
   87e26:	6021      	str	r1, [r4, #0]
   87e28:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   87e2c:	200708f8 	.word	0x200708f8
   87e30:	0008a93b 	.word	0x0008a93b

00087e34 <mbrtowc>:
   87e34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   87e36:	9300      	str	r3, [sp, #0]
   87e38:	4b05      	ldr	r3, [pc, #20]	; (87e50 <mbrtowc+0x1c>)
   87e3a:	4606      	mov	r6, r0
   87e3c:	460d      	mov	r5, r1
   87e3e:	4614      	mov	r4, r2
   87e40:	6818      	ldr	r0, [r3, #0]
   87e42:	4631      	mov	r1, r6
   87e44:	462a      	mov	r2, r5
   87e46:	4623      	mov	r3, r4
   87e48:	f7ff ffcc 	bl	87de4 <_mbrtowc_r>
   87e4c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   87e4e:	bf00      	nop
   87e50:	20070010 	.word	0x20070010

00087e54 <__ascii_mbtowc>:
   87e54:	b082      	sub	sp, #8
   87e56:	b901      	cbnz	r1, 87e5a <__ascii_mbtowc+0x6>
   87e58:	a901      	add	r1, sp, #4
   87e5a:	b13a      	cbz	r2, 87e6c <__ascii_mbtowc+0x18>
   87e5c:	b143      	cbz	r3, 87e70 <__ascii_mbtowc+0x1c>
   87e5e:	7813      	ldrb	r3, [r2, #0]
   87e60:	600b      	str	r3, [r1, #0]
   87e62:	7810      	ldrb	r0, [r2, #0]
   87e64:	3000      	adds	r0, #0
   87e66:	bf18      	it	ne
   87e68:	2001      	movne	r0, #1
   87e6a:	e003      	b.n	87e74 <__ascii_mbtowc+0x20>
   87e6c:	4610      	mov	r0, r2
   87e6e:	e001      	b.n	87e74 <__ascii_mbtowc+0x20>
   87e70:	f06f 0001 	mvn.w	r0, #1
   87e74:	b002      	add	sp, #8
   87e76:	4770      	bx	lr

00087e78 <_mbtowc_r>:
   87e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   87e7c:	461f      	mov	r7, r3
   87e7e:	4b08      	ldr	r3, [pc, #32]	; (87ea0 <_mbtowc_r+0x28>)
   87e80:	4606      	mov	r6, r0
   87e82:	4689      	mov	r9, r1
   87e84:	4690      	mov	r8, r2
   87e86:	681c      	ldr	r4, [r3, #0]
   87e88:	f7ff fd0c 	bl	878a4 <__locale_charset>
   87e8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87e8e:	9000      	str	r0, [sp, #0]
   87e90:	9501      	str	r5, [sp, #4]
   87e92:	4630      	mov	r0, r6
   87e94:	4649      	mov	r1, r9
   87e96:	4642      	mov	r2, r8
   87e98:	463b      	mov	r3, r7
   87e9a:	47a0      	blx	r4
   87e9c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   87ea0:	200708f8 	.word	0x200708f8

00087ea4 <memchr>:
   87ea4:	b510      	push	{r4, lr}
   87ea6:	b2c9      	uxtb	r1, r1
   87ea8:	4603      	mov	r3, r0
   87eaa:	1882      	adds	r2, r0, r2
   87eac:	4293      	cmp	r3, r2
   87eae:	4618      	mov	r0, r3
   87eb0:	d004      	beq.n	87ebc <memchr+0x18>
   87eb2:	7804      	ldrb	r4, [r0, #0]
   87eb4:	3301      	adds	r3, #1
   87eb6:	428c      	cmp	r4, r1
   87eb8:	d1f8      	bne.n	87eac <memchr+0x8>
   87eba:	e000      	b.n	87ebe <memchr+0x1a>
   87ebc:	2000      	movs	r0, #0
   87ebe:	bd10      	pop	{r4, pc}

00087ec0 <memmove>:
   87ec0:	4281      	cmp	r1, r0
   87ec2:	b570      	push	{r4, r5, r6, lr}
   87ec4:	d20e      	bcs.n	87ee4 <memmove+0x24>
   87ec6:	188c      	adds	r4, r1, r2
   87ec8:	42a0      	cmp	r0, r4
   87eca:	d20b      	bcs.n	87ee4 <memmove+0x24>
   87ecc:	1885      	adds	r5, r0, r2
   87ece:	4613      	mov	r3, r2
   87ed0:	f113 33ff 	adds.w	r3, r3, #4294967295
   87ed4:	d305      	bcc.n	87ee2 <memmove+0x22>
   87ed6:	4251      	negs	r1, r2
   87ed8:	1866      	adds	r6, r4, r1
   87eda:	5cf6      	ldrb	r6, [r6, r3]
   87edc:	1869      	adds	r1, r5, r1
   87ede:	54ce      	strb	r6, [r1, r3]
   87ee0:	e7f6      	b.n	87ed0 <memmove+0x10>
   87ee2:	bd70      	pop	{r4, r5, r6, pc}
   87ee4:	2300      	movs	r3, #0
   87ee6:	4293      	cmp	r3, r2
   87ee8:	d003      	beq.n	87ef2 <memmove+0x32>
   87eea:	5ccc      	ldrb	r4, [r1, r3]
   87eec:	54c4      	strb	r4, [r0, r3]
   87eee:	3301      	adds	r3, #1
   87ef0:	e7f9      	b.n	87ee6 <memmove+0x26>
   87ef2:	bd70      	pop	{r4, r5, r6, pc}

00087ef4 <__malloc_lock>:
   87ef4:	4770      	bx	lr

00087ef6 <__malloc_unlock>:
   87ef6:	4770      	bx	lr

00087ef8 <_Balloc>:
   87ef8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87efa:	b570      	push	{r4, r5, r6, lr}
   87efc:	4605      	mov	r5, r0
   87efe:	460c      	mov	r4, r1
   87f00:	b13b      	cbz	r3, 87f12 <_Balloc+0x1a>
   87f02:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   87f04:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
   87f08:	b160      	cbz	r0, 87f24 <_Balloc+0x2c>
   87f0a:	6803      	ldr	r3, [r0, #0]
   87f0c:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
   87f10:	e014      	b.n	87f3c <_Balloc+0x44>
   87f12:	2104      	movs	r1, #4
   87f14:	2221      	movs	r2, #33	; 0x21
   87f16:	f001 ff1d 	bl	89d54 <_calloc_r>
   87f1a:	64e8      	str	r0, [r5, #76]	; 0x4c
   87f1c:	2800      	cmp	r0, #0
   87f1e:	d1f0      	bne.n	87f02 <_Balloc+0xa>
   87f20:	2000      	movs	r0, #0
   87f22:	bd70      	pop	{r4, r5, r6, pc}
   87f24:	2101      	movs	r1, #1
   87f26:	fa01 f604 	lsl.w	r6, r1, r4
   87f2a:	1d72      	adds	r2, r6, #5
   87f2c:	4628      	mov	r0, r5
   87f2e:	0092      	lsls	r2, r2, #2
   87f30:	f001 ff10 	bl	89d54 <_calloc_r>
   87f34:	2800      	cmp	r0, #0
   87f36:	d0f3      	beq.n	87f20 <_Balloc+0x28>
   87f38:	6044      	str	r4, [r0, #4]
   87f3a:	6086      	str	r6, [r0, #8]
   87f3c:	2100      	movs	r1, #0
   87f3e:	6101      	str	r1, [r0, #16]
   87f40:	60c1      	str	r1, [r0, #12]
   87f42:	bd70      	pop	{r4, r5, r6, pc}

00087f44 <_Bfree>:
   87f44:	b131      	cbz	r1, 87f54 <_Bfree+0x10>
   87f46:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87f48:	684a      	ldr	r2, [r1, #4]
   87f4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   87f4e:	6008      	str	r0, [r1, #0]
   87f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   87f54:	4770      	bx	lr

00087f56 <__multadd>:
   87f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87f5a:	460c      	mov	r4, r1
   87f5c:	461e      	mov	r6, r3
   87f5e:	690d      	ldr	r5, [r1, #16]
   87f60:	4607      	mov	r7, r0
   87f62:	f101 0114 	add.w	r1, r1, #20
   87f66:	2300      	movs	r3, #0
   87f68:	6808      	ldr	r0, [r1, #0]
   87f6a:	3301      	adds	r3, #1
   87f6c:	fa1f fc80 	uxth.w	ip, r0
   87f70:	fb02 6c0c 	mla	ip, r2, ip, r6
   87f74:	0c06      	lsrs	r6, r0, #16
   87f76:	4356      	muls	r6, r2
   87f78:	eb06 401c 	add.w	r0, r6, ip, lsr #16
   87f7c:	fa1f fc8c 	uxth.w	ip, ip
   87f80:	0c06      	lsrs	r6, r0, #16
   87f82:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
   87f86:	42ab      	cmp	r3, r5
   87f88:	f841 0b04 	str.w	r0, [r1], #4
   87f8c:	dbec      	blt.n	87f68 <__multadd+0x12>
   87f8e:	b1de      	cbz	r6, 87fc8 <__multadd+0x72>
   87f90:	68a2      	ldr	r2, [r4, #8]
   87f92:	4295      	cmp	r5, r2
   87f94:	db13      	blt.n	87fbe <__multadd+0x68>
   87f96:	6861      	ldr	r1, [r4, #4]
   87f98:	4638      	mov	r0, r7
   87f9a:	3101      	adds	r1, #1
   87f9c:	f7ff ffac 	bl	87ef8 <_Balloc>
   87fa0:	4680      	mov	r8, r0
   87fa2:	6920      	ldr	r0, [r4, #16]
   87fa4:	f104 010c 	add.w	r1, r4, #12
   87fa8:	1c83      	adds	r3, r0, #2
   87faa:	009a      	lsls	r2, r3, #2
   87fac:	f108 000c 	add.w	r0, r8, #12
   87fb0:	f7fb ffee 	bl	83f90 <memcpy>
   87fb4:	4621      	mov	r1, r4
   87fb6:	4638      	mov	r0, r7
   87fb8:	f7ff ffc4 	bl	87f44 <_Bfree>
   87fbc:	4644      	mov	r4, r8
   87fbe:	eb04 0285 	add.w	r2, r4, r5, lsl #2
   87fc2:	3501      	adds	r5, #1
   87fc4:	6156      	str	r6, [r2, #20]
   87fc6:	6125      	str	r5, [r4, #16]
   87fc8:	4620      	mov	r0, r4
   87fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00087fce <__s2b>:
   87fce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   87fd2:	4614      	mov	r4, r2
   87fd4:	4698      	mov	r8, r3
   87fd6:	f103 0208 	add.w	r2, r3, #8
   87fda:	2309      	movs	r3, #9
   87fdc:	4605      	mov	r5, r0
   87fde:	460e      	mov	r6, r1
   87fe0:	fb92 f0f3 	sdiv	r0, r2, r3
   87fe4:	2100      	movs	r1, #0
   87fe6:	2301      	movs	r3, #1
   87fe8:	4298      	cmp	r0, r3
   87fea:	dd02      	ble.n	87ff2 <__s2b+0x24>
   87fec:	005b      	lsls	r3, r3, #1
   87fee:	3101      	adds	r1, #1
   87ff0:	e7fa      	b.n	87fe8 <__s2b+0x1a>
   87ff2:	4628      	mov	r0, r5
   87ff4:	f7ff ff80 	bl	87ef8 <_Balloc>
   87ff8:	4601      	mov	r1, r0
   87ffa:	9808      	ldr	r0, [sp, #32]
   87ffc:	2701      	movs	r7, #1
   87ffe:	2c09      	cmp	r4, #9
   88000:	6148      	str	r0, [r1, #20]
   88002:	610f      	str	r7, [r1, #16]
   88004:	dd12      	ble.n	8802c <__s2b+0x5e>
   88006:	f106 0909 	add.w	r9, r6, #9
   8800a:	464f      	mov	r7, r9
   8800c:	1936      	adds	r6, r6, r4
   8800e:	f817 3b01 	ldrb.w	r3, [r7], #1
   88012:	220a      	movs	r2, #10
   88014:	3b30      	subs	r3, #48	; 0x30
   88016:	4628      	mov	r0, r5
   88018:	f7ff ff9d 	bl	87f56 <__multadd>
   8801c:	42b7      	cmp	r7, r6
   8801e:	4601      	mov	r1, r0
   88020:	d1f5      	bne.n	8800e <__s2b+0x40>
   88022:	eb09 0704 	add.w	r7, r9, r4
   88026:	3f08      	subs	r7, #8
   88028:	4626      	mov	r6, r4
   8802a:	e002      	b.n	88032 <__s2b+0x64>
   8802c:	f106 070a 	add.w	r7, r6, #10
   88030:	2609      	movs	r6, #9
   88032:	4634      	mov	r4, r6
   88034:	4544      	cmp	r4, r8
   88036:	da09      	bge.n	8804c <__s2b+0x7e>
   88038:	1bba      	subs	r2, r7, r6
   8803a:	5d13      	ldrb	r3, [r2, r4]
   8803c:	4628      	mov	r0, r5
   8803e:	220a      	movs	r2, #10
   88040:	3b30      	subs	r3, #48	; 0x30
   88042:	f7ff ff88 	bl	87f56 <__multadd>
   88046:	3401      	adds	r4, #1
   88048:	4601      	mov	r1, r0
   8804a:	e7f3      	b.n	88034 <__s2b+0x66>
   8804c:	4608      	mov	r0, r1
   8804e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00088052 <__hi0bits>:
   88052:	0c02      	lsrs	r2, r0, #16
   88054:	4603      	mov	r3, r0
   88056:	0410      	lsls	r0, r2, #16
   88058:	b910      	cbnz	r0, 88060 <__hi0bits+0xe>
   8805a:	041b      	lsls	r3, r3, #16
   8805c:	2010      	movs	r0, #16
   8805e:	e000      	b.n	88062 <__hi0bits+0x10>
   88060:	2000      	movs	r0, #0
   88062:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   88066:	d101      	bne.n	8806c <__hi0bits+0x1a>
   88068:	3008      	adds	r0, #8
   8806a:	021b      	lsls	r3, r3, #8
   8806c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   88070:	d101      	bne.n	88076 <__hi0bits+0x24>
   88072:	3004      	adds	r0, #4
   88074:	011b      	lsls	r3, r3, #4
   88076:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8807a:	d101      	bne.n	88080 <__hi0bits+0x2e>
   8807c:	3002      	adds	r0, #2
   8807e:	009b      	lsls	r3, r3, #2
   88080:	2b00      	cmp	r3, #0
   88082:	db04      	blt.n	8808e <__hi0bits+0x3c>
   88084:	005b      	lsls	r3, r3, #1
   88086:	d501      	bpl.n	8808c <__hi0bits+0x3a>
   88088:	3001      	adds	r0, #1
   8808a:	4770      	bx	lr
   8808c:	2020      	movs	r0, #32
   8808e:	4770      	bx	lr

00088090 <__lo0bits>:
   88090:	6803      	ldr	r3, [r0, #0]
   88092:	4602      	mov	r2, r0
   88094:	f013 0007 	ands.w	r0, r3, #7
   88098:	d00b      	beq.n	880b2 <__lo0bits+0x22>
   8809a:	07d9      	lsls	r1, r3, #31
   8809c:	d421      	bmi.n	880e2 <__lo0bits+0x52>
   8809e:	0798      	lsls	r0, r3, #30
   880a0:	d503      	bpl.n	880aa <__lo0bits+0x1a>
   880a2:	0859      	lsrs	r1, r3, #1
   880a4:	6011      	str	r1, [r2, #0]
   880a6:	2001      	movs	r0, #1
   880a8:	4770      	bx	lr
   880aa:	0898      	lsrs	r0, r3, #2
   880ac:	6010      	str	r0, [r2, #0]
   880ae:	2002      	movs	r0, #2
   880b0:	4770      	bx	lr
   880b2:	b299      	uxth	r1, r3
   880b4:	b909      	cbnz	r1, 880ba <__lo0bits+0x2a>
   880b6:	0c1b      	lsrs	r3, r3, #16
   880b8:	2010      	movs	r0, #16
   880ba:	f013 0fff 	tst.w	r3, #255	; 0xff
   880be:	d101      	bne.n	880c4 <__lo0bits+0x34>
   880c0:	3008      	adds	r0, #8
   880c2:	0a1b      	lsrs	r3, r3, #8
   880c4:	0719      	lsls	r1, r3, #28
   880c6:	d101      	bne.n	880cc <__lo0bits+0x3c>
   880c8:	3004      	adds	r0, #4
   880ca:	091b      	lsrs	r3, r3, #4
   880cc:	0799      	lsls	r1, r3, #30
   880ce:	d101      	bne.n	880d4 <__lo0bits+0x44>
   880d0:	3002      	adds	r0, #2
   880d2:	089b      	lsrs	r3, r3, #2
   880d4:	07d9      	lsls	r1, r3, #31
   880d6:	d402      	bmi.n	880de <__lo0bits+0x4e>
   880d8:	085b      	lsrs	r3, r3, #1
   880da:	d004      	beq.n	880e6 <__lo0bits+0x56>
   880dc:	3001      	adds	r0, #1
   880de:	6013      	str	r3, [r2, #0]
   880e0:	4770      	bx	lr
   880e2:	2000      	movs	r0, #0
   880e4:	4770      	bx	lr
   880e6:	2020      	movs	r0, #32
   880e8:	4770      	bx	lr

000880ea <__i2b>:
   880ea:	b510      	push	{r4, lr}
   880ec:	460c      	mov	r4, r1
   880ee:	2101      	movs	r1, #1
   880f0:	f7ff ff02 	bl	87ef8 <_Balloc>
   880f4:	2201      	movs	r2, #1
   880f6:	6144      	str	r4, [r0, #20]
   880f8:	6102      	str	r2, [r0, #16]
   880fa:	bd10      	pop	{r4, pc}

000880fc <__multiply>:
   880fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88100:	4616      	mov	r6, r2
   88102:	6933      	ldr	r3, [r6, #16]
   88104:	690a      	ldr	r2, [r1, #16]
   88106:	b085      	sub	sp, #20
   88108:	429a      	cmp	r2, r3
   8810a:	460d      	mov	r5, r1
   8810c:	da01      	bge.n	88112 <__multiply+0x16>
   8810e:	4635      	mov	r5, r6
   88110:	460e      	mov	r6, r1
   88112:	f8d5 8010 	ldr.w	r8, [r5, #16]
   88116:	6937      	ldr	r7, [r6, #16]
   88118:	68aa      	ldr	r2, [r5, #8]
   8811a:	6869      	ldr	r1, [r5, #4]
   8811c:	eb08 0407 	add.w	r4, r8, r7
   88120:	4294      	cmp	r4, r2
   88122:	bfc8      	it	gt
   88124:	3101      	addgt	r1, #1
   88126:	f7ff fee7 	bl	87ef8 <_Balloc>
   8812a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
   8812e:	3114      	adds	r1, #20
   88130:	f100 0314 	add.w	r3, r0, #20
   88134:	9101      	str	r1, [sp, #4]
   88136:	9a01      	ldr	r2, [sp, #4]
   88138:	4293      	cmp	r3, r2
   8813a:	d203      	bcs.n	88144 <__multiply+0x48>
   8813c:	2200      	movs	r2, #0
   8813e:	f843 2b04 	str.w	r2, [r3], #4
   88142:	e7f8      	b.n	88136 <__multiply+0x3a>
   88144:	eb06 0787 	add.w	r7, r6, r7, lsl #2
   88148:	f105 0314 	add.w	r3, r5, #20
   8814c:	eb05 0c88 	add.w	ip, r5, r8, lsl #2
   88150:	3714      	adds	r7, #20
   88152:	9302      	str	r3, [sp, #8]
   88154:	f10c 0e14 	add.w	lr, ip, #20
   88158:	9703      	str	r7, [sp, #12]
   8815a:	f100 0318 	add.w	r3, r0, #24
   8815e:	f106 0214 	add.w	r2, r6, #20
   88162:	9d03      	ldr	r5, [sp, #12]
   88164:	4611      	mov	r1, r2
   88166:	42aa      	cmp	r2, r5
   88168:	d24c      	bcs.n	88204 <__multiply+0x108>
   8816a:	8809      	ldrh	r1, [r1, #0]
   8816c:	3204      	adds	r2, #4
   8816e:	b309      	cbz	r1, 881b4 <__multiply+0xb8>
   88170:	9f02      	ldr	r7, [sp, #8]
   88172:	1f1d      	subs	r5, r3, #4
   88174:	2600      	movs	r6, #0
   88176:	f857 9b04 	ldr.w	r9, [r7], #4
   8817a:	f8d5 8000 	ldr.w	r8, [r5]
   8817e:	fa1f fb89 	uxth.w	fp, r9
   88182:	fa1f fa88 	uxth.w	sl, r8
   88186:	fb01 ac0b 	mla	ip, r1, fp, sl
   8818a:	ea4f 4919 	mov.w	r9, r9, lsr #16
   8818e:	eb0c 0a06 	add.w	sl, ip, r6
   88192:	ea4f 4618 	mov.w	r6, r8, lsr #16
   88196:	fb01 6809 	mla	r8, r1, r9, r6
   8819a:	fa1f fc8a 	uxth.w	ip, sl
   8819e:	eb08 481a 	add.w	r8, r8, sl, lsr #16
   881a2:	ea4c 4a08 	orr.w	sl, ip, r8, lsl #16
   881a6:	45be      	cmp	lr, r7
   881a8:	ea4f 4618 	mov.w	r6, r8, lsr #16
   881ac:	f845 ab04 	str.w	sl, [r5], #4
   881b0:	d8e1      	bhi.n	88176 <__multiply+0x7a>
   881b2:	602e      	str	r6, [r5, #0]
   881b4:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   881b8:	b311      	cbz	r1, 88200 <__multiply+0x104>
   881ba:	f853 6c04 	ldr.w	r6, [r3, #-4]
   881be:	9f02      	ldr	r7, [sp, #8]
   881c0:	461d      	mov	r5, r3
   881c2:	f04f 0900 	mov.w	r9, #0
   881c6:	f835 ac02 	ldrh.w	sl, [r5, #-2]
   881ca:	f8b7 b000 	ldrh.w	fp, [r7]
   881ce:	b2b6      	uxth	r6, r6
   881d0:	fb01 ac0b 	mla	ip, r1, fp, sl
   881d4:	44e1      	add	r9, ip
   881d6:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
   881da:	f845 6c04 	str.w	r6, [r5, #-4]
   881de:	46a8      	mov	r8, r5
   881e0:	f857 6b04 	ldr.w	r6, [r7], #4
   881e4:	f8b8 a000 	ldrh.w	sl, [r8]
   881e8:	0c36      	lsrs	r6, r6, #16
   881ea:	fb01 a606 	mla	r6, r1, r6, sl
   881ee:	3504      	adds	r5, #4
   881f0:	eb06 4619 	add.w	r6, r6, r9, lsr #16
   881f4:	4577      	cmp	r7, lr
   881f6:	ea4f 4916 	mov.w	r9, r6, lsr #16
   881fa:	d3e4      	bcc.n	881c6 <__multiply+0xca>
   881fc:	f8c8 6000 	str.w	r6, [r8]
   88200:	3304      	adds	r3, #4
   88202:	e7ae      	b.n	88162 <__multiply+0x66>
   88204:	9b01      	ldr	r3, [sp, #4]
   88206:	2c00      	cmp	r4, #0
   88208:	dc03      	bgt.n	88212 <__multiply+0x116>
   8820a:	6104      	str	r4, [r0, #16]
   8820c:	b005      	add	sp, #20
   8820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88212:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   88216:	2a00      	cmp	r2, #0
   88218:	d1f7      	bne.n	8820a <__multiply+0x10e>
   8821a:	3c01      	subs	r4, #1
   8821c:	e7f3      	b.n	88206 <__multiply+0x10a>

0008821e <__pow5mult>:
   8821e:	f012 0303 	ands.w	r3, r2, #3
   88222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88226:	4605      	mov	r5, r0
   88228:	460e      	mov	r6, r1
   8822a:	4617      	mov	r7, r2
   8822c:	d007      	beq.n	8823e <__pow5mult+0x20>
   8822e:	4a1c      	ldr	r2, [pc, #112]	; (882a0 <__pow5mult+0x82>)
   88230:	1e5e      	subs	r6, r3, #1
   88232:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   88236:	2300      	movs	r3, #0
   88238:	f7ff fe8d 	bl	87f56 <__multadd>
   8823c:	4606      	mov	r6, r0
   8823e:	10bf      	asrs	r7, r7, #2
   88240:	d02b      	beq.n	8829a <__pow5mult+0x7c>
   88242:	6cac      	ldr	r4, [r5, #72]	; 0x48
   88244:	b994      	cbnz	r4, 8826c <__pow5mult+0x4e>
   88246:	4628      	mov	r0, r5
   88248:	f240 2171 	movw	r1, #625	; 0x271
   8824c:	f7ff ff4d 	bl	880ea <__i2b>
   88250:	4604      	mov	r4, r0
   88252:	64a8      	str	r0, [r5, #72]	; 0x48
   88254:	2000      	movs	r0, #0
   88256:	6020      	str	r0, [r4, #0]
   88258:	e008      	b.n	8826c <__pow5mult+0x4e>
   8825a:	107f      	asrs	r7, r7, #1
   8825c:	d01d      	beq.n	8829a <__pow5mult+0x7c>
   8825e:	f8d4 8000 	ldr.w	r8, [r4]
   88262:	4640      	mov	r0, r8
   88264:	f1b8 0f00 	cmp.w	r8, #0
   88268:	d00e      	beq.n	88288 <__pow5mult+0x6a>
   8826a:	4604      	mov	r4, r0
   8826c:	07f8      	lsls	r0, r7, #31
   8826e:	d5f4      	bpl.n	8825a <__pow5mult+0x3c>
   88270:	4631      	mov	r1, r6
   88272:	4622      	mov	r2, r4
   88274:	4628      	mov	r0, r5
   88276:	f7ff ff41 	bl	880fc <__multiply>
   8827a:	4631      	mov	r1, r6
   8827c:	4680      	mov	r8, r0
   8827e:	4628      	mov	r0, r5
   88280:	f7ff fe60 	bl	87f44 <_Bfree>
   88284:	4646      	mov	r6, r8
   88286:	e7e8      	b.n	8825a <__pow5mult+0x3c>
   88288:	4628      	mov	r0, r5
   8828a:	4621      	mov	r1, r4
   8828c:	4622      	mov	r2, r4
   8828e:	f7ff ff35 	bl	880fc <__multiply>
   88292:	6020      	str	r0, [r4, #0]
   88294:	f8c0 8000 	str.w	r8, [r0]
   88298:	e7e7      	b.n	8826a <__pow5mult+0x4c>
   8829a:	4630      	mov	r0, r6
   8829c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   882a0:	0008a940 	.word	0x0008a940

000882a4 <__lshift>:
   882a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   882a8:	460c      	mov	r4, r1
   882aa:	6923      	ldr	r3, [r4, #16]
   882ac:	ea4f 1862 	mov.w	r8, r2, asr #5
   882b0:	eb08 0a03 	add.w	sl, r8, r3
   882b4:	6849      	ldr	r1, [r1, #4]
   882b6:	68a5      	ldr	r5, [r4, #8]
   882b8:	4681      	mov	r9, r0
   882ba:	4617      	mov	r7, r2
   882bc:	f10a 0601 	add.w	r6, sl, #1
   882c0:	42ae      	cmp	r6, r5
   882c2:	dd02      	ble.n	882ca <__lshift+0x26>
   882c4:	3101      	adds	r1, #1
   882c6:	006d      	lsls	r5, r5, #1
   882c8:	e7fa      	b.n	882c0 <__lshift+0x1c>
   882ca:	4648      	mov	r0, r9
   882cc:	f7ff fe14 	bl	87ef8 <_Balloc>
   882d0:	2200      	movs	r2, #0
   882d2:	4605      	mov	r5, r0
   882d4:	f100 0014 	add.w	r0, r0, #20
   882d8:	4542      	cmp	r2, r8
   882da:	da04      	bge.n	882e6 <__lshift+0x42>
   882dc:	2100      	movs	r1, #0
   882de:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
   882e2:	3201      	adds	r2, #1
   882e4:	e7f8      	b.n	882d8 <__lshift+0x34>
   882e6:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
   882ea:	6922      	ldr	r2, [r4, #16]
   882ec:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   882f0:	3314      	adds	r3, #20
   882f2:	eb04 0082 	add.w	r0, r4, r2, lsl #2
   882f6:	f017 071f 	ands.w	r7, r7, #31
   882fa:	f104 0114 	add.w	r1, r4, #20
   882fe:	f100 0e14 	add.w	lr, r0, #20
   88302:	d014      	beq.n	8832e <__lshift+0x8a>
   88304:	4618      	mov	r0, r3
   88306:	f1c7 0c20 	rsb	ip, r7, #32
   8830a:	2300      	movs	r3, #0
   8830c:	680a      	ldr	r2, [r1, #0]
   8830e:	fa02 f207 	lsl.w	r2, r2, r7
   88312:	4313      	orrs	r3, r2
   88314:	f840 3b04 	str.w	r3, [r0], #4
   88318:	f851 3b04 	ldr.w	r3, [r1], #4
   8831c:	4571      	cmp	r1, lr
   8831e:	fa23 f30c 	lsr.w	r3, r3, ip
   88322:	d3f3      	bcc.n	8830c <__lshift+0x68>
   88324:	6003      	str	r3, [r0, #0]
   88326:	b143      	cbz	r3, 8833a <__lshift+0x96>
   88328:	f10a 0602 	add.w	r6, sl, #2
   8832c:	e005      	b.n	8833a <__lshift+0x96>
   8832e:	f851 2b04 	ldr.w	r2, [r1], #4
   88332:	458e      	cmp	lr, r1
   88334:	f843 2b04 	str.w	r2, [r3], #4
   88338:	d8f9      	bhi.n	8832e <__lshift+0x8a>
   8833a:	3e01      	subs	r6, #1
   8833c:	4648      	mov	r0, r9
   8833e:	612e      	str	r6, [r5, #16]
   88340:	4621      	mov	r1, r4
   88342:	f7ff fdff 	bl	87f44 <_Bfree>
   88346:	4628      	mov	r0, r5
   88348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008834c <__mcmp>:
   8834c:	4603      	mov	r3, r0
   8834e:	690a      	ldr	r2, [r1, #16]
   88350:	6900      	ldr	r0, [r0, #16]
   88352:	b530      	push	{r4, r5, lr}
   88354:	1a80      	subs	r0, r0, r2
   88356:	d115      	bne.n	88384 <__mcmp+0x38>
   88358:	1d15      	adds	r5, r2, #4
   8835a:	00aa      	lsls	r2, r5, #2
   8835c:	f103 0414 	add.w	r4, r3, #20
   88360:	1889      	adds	r1, r1, r2
   88362:	189b      	adds	r3, r3, r2
   88364:	3304      	adds	r3, #4
   88366:	1d0a      	adds	r2, r1, #4
   88368:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8836c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   88370:	428d      	cmp	r5, r1
   88372:	d003      	beq.n	8837c <__mcmp+0x30>
   88374:	d205      	bcs.n	88382 <__mcmp+0x36>
   88376:	f04f 30ff 	mov.w	r0, #4294967295
   8837a:	bd30      	pop	{r4, r5, pc}
   8837c:	429c      	cmp	r4, r3
   8837e:	d3f3      	bcc.n	88368 <__mcmp+0x1c>
   88380:	bd30      	pop	{r4, r5, pc}
   88382:	2001      	movs	r0, #1
   88384:	bd30      	pop	{r4, r5, pc}

00088386 <__mdiff>:
   88386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8838a:	4606      	mov	r6, r0
   8838c:	460c      	mov	r4, r1
   8838e:	4608      	mov	r0, r1
   88390:	4611      	mov	r1, r2
   88392:	4615      	mov	r5, r2
   88394:	f7ff ffda 	bl	8834c <__mcmp>
   88398:	1e07      	subs	r7, r0, #0
   8839a:	d108      	bne.n	883ae <__mdiff+0x28>
   8839c:	4639      	mov	r1, r7
   8839e:	4630      	mov	r0, r6
   883a0:	f7ff fdaa 	bl	87ef8 <_Balloc>
   883a4:	2101      	movs	r1, #1
   883a6:	6101      	str	r1, [r0, #16]
   883a8:	6147      	str	r7, [r0, #20]
   883aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   883ae:	db01      	blt.n	883b4 <__mdiff+0x2e>
   883b0:	2700      	movs	r7, #0
   883b2:	e003      	b.n	883bc <__mdiff+0x36>
   883b4:	4623      	mov	r3, r4
   883b6:	2701      	movs	r7, #1
   883b8:	462c      	mov	r4, r5
   883ba:	461d      	mov	r5, r3
   883bc:	6861      	ldr	r1, [r4, #4]
   883be:	4630      	mov	r0, r6
   883c0:	f7ff fd9a 	bl	87ef8 <_Balloc>
   883c4:	692a      	ldr	r2, [r5, #16]
   883c6:	6923      	ldr	r3, [r4, #16]
   883c8:	eb05 0182 	add.w	r1, r5, r2, lsl #2
   883cc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   883d0:	60c7      	str	r7, [r0, #12]
   883d2:	f10c 0c14 	add.w	ip, ip, #20
   883d6:	f101 0814 	add.w	r8, r1, #20
   883da:	3414      	adds	r4, #20
   883dc:	3514      	adds	r5, #20
   883de:	f100 0714 	add.w	r7, r0, #20
   883e2:	2200      	movs	r2, #0
   883e4:	f854 6b04 	ldr.w	r6, [r4], #4
   883e8:	f855 1b04 	ldr.w	r1, [r5], #4
   883ec:	fa1f f986 	uxth.w	r9, r6
   883f0:	444a      	add	r2, r9
   883f2:	fa1f fa81 	uxth.w	sl, r1
   883f6:	0c09      	lsrs	r1, r1, #16
   883f8:	ebca 0e02 	rsb	lr, sl, r2
   883fc:	ebc1 4616 	rsb	r6, r1, r6, lsr #16
   88400:	eb06 412e 	add.w	r1, r6, lr, asr #16
   88404:	fa1f f98e 	uxth.w	r9, lr
   88408:	140a      	asrs	r2, r1, #16
   8840a:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8840e:	f847 1b04 	str.w	r1, [r7], #4
   88412:	45a8      	cmp	r8, r5
   88414:	4626      	mov	r6, r4
   88416:	4639      	mov	r1, r7
   88418:	d8e4      	bhi.n	883e4 <__mdiff+0x5e>
   8841a:	4566      	cmp	r6, ip
   8841c:	d20d      	bcs.n	8843a <__mdiff+0xb4>
   8841e:	f856 4b04 	ldr.w	r4, [r6], #4
   88422:	b2a5      	uxth	r5, r4
   88424:	18ad      	adds	r5, r5, r2
   88426:	0c22      	lsrs	r2, r4, #16
   88428:	eb02 4425 	add.w	r4, r2, r5, asr #16
   8842c:	b2ad      	uxth	r5, r5
   8842e:	1422      	asrs	r2, r4, #16
   88430:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   88434:	f841 4b04 	str.w	r4, [r1], #4
   88438:	e7ef      	b.n	8841a <__mdiff+0x94>
   8843a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8843e:	b90a      	cbnz	r2, 88444 <__mdiff+0xbe>
   88440:	3b01      	subs	r3, #1
   88442:	e7fa      	b.n	8843a <__mdiff+0xb4>
   88444:	6103      	str	r3, [r0, #16]
   88446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008844a <__ulp>:
   8844a:	4b0f      	ldr	r3, [pc, #60]	; (88488 <__ulp+0x3e>)
   8844c:	400b      	ands	r3, r1
   8844e:	f1a3 7050 	sub.w	r0, r3, #54525952	; 0x3400000
   88452:	2800      	cmp	r0, #0
   88454:	dd01      	ble.n	8845a <__ulp+0x10>
   88456:	4601      	mov	r1, r0
   88458:	e008      	b.n	8846c <__ulp+0x22>
   8845a:	4241      	negs	r1, r0
   8845c:	150b      	asrs	r3, r1, #20
   8845e:	2100      	movs	r1, #0
   88460:	2b13      	cmp	r3, #19
   88462:	dc05      	bgt.n	88470 <__ulp+0x26>
   88464:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   88468:	fa40 f103 	asr.w	r1, r0, r3
   8846c:	2000      	movs	r0, #0
   8846e:	4770      	bx	lr
   88470:	2b32      	cmp	r3, #50	; 0x32
   88472:	f04f 0201 	mov.w	r2, #1
   88476:	bfda      	itte	le
   88478:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
   8847c:	fa02 f303 	lslle.w	r3, r2, r3
   88480:	4613      	movgt	r3, r2
   88482:	4618      	mov	r0, r3
   88484:	4770      	bx	lr
   88486:	bf00      	nop
   88488:	7ff00000 	.word	0x7ff00000

0008848c <__b2d>:
   8848c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88490:	6903      	ldr	r3, [r0, #16]
   88492:	4689      	mov	r9, r1
   88494:	1d19      	adds	r1, r3, #4
   88496:	eb00 0881 	add.w	r8, r0, r1, lsl #2
   8849a:	4646      	mov	r6, r8
   8849c:	f856 4b04 	ldr.w	r4, [r6], #4
   884a0:	f100 0714 	add.w	r7, r0, #20
   884a4:	4620      	mov	r0, r4
   884a6:	f7ff fdd4 	bl	88052 <__hi0bits>
   884aa:	f1c0 0220 	rsb	r2, r0, #32
   884ae:	280a      	cmp	r0, #10
   884b0:	4645      	mov	r5, r8
   884b2:	f8c9 2000 	str.w	r2, [r9]
   884b6:	dc14      	bgt.n	884e2 <__b2d+0x56>
   884b8:	f1c0 010b 	rsb	r1, r0, #11
   884bc:	fa24 f501 	lsr.w	r5, r4, r1
   884c0:	45b8      	cmp	r8, r7
   884c2:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   884c6:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
   884ca:	bf8c      	ite	hi
   884cc:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
   884d0:	2500      	movls	r5, #0
   884d2:	3015      	adds	r0, #21
   884d4:	fa25 f201 	lsr.w	r2, r5, r1
   884d8:	fa04 f400 	lsl.w	r4, r4, r0
   884dc:	ea42 0004 	orr.w	r0, r2, r4
   884e0:	e025      	b.n	8852e <__b2d+0xa2>
   884e2:	45b8      	cmp	r8, r7
   884e4:	d903      	bls.n	884ee <__b2d+0x62>
   884e6:	3d04      	subs	r5, #4
   884e8:	f856 1c08 	ldr.w	r1, [r6, #-8]
   884ec:	e000      	b.n	884f0 <__b2d+0x64>
   884ee:	2100      	movs	r1, #0
   884f0:	f1b0 060b 	subs.w	r6, r0, #11
   884f4:	d016      	beq.n	88524 <__b2d+0x98>
   884f6:	fa04 f406 	lsl.w	r4, r4, r6
   884fa:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
   884fe:	fa21 fc02 	lsr.w	ip, r1, r2
   88502:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   88506:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   8850a:	42bd      	cmp	r5, r7
   8850c:	ea44 030c 	orr.w	r3, r4, ip
   88510:	bf8c      	ite	hi
   88512:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   88516:	2400      	movls	r4, #0
   88518:	fa24 f002 	lsr.w	r0, r4, r2
   8851c:	fa01 f106 	lsl.w	r1, r1, r6
   88520:	4308      	orrs	r0, r1
   88522:	e004      	b.n	8852e <__b2d+0xa2>
   88524:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   88528:	f444 1340 	orr.w	r3, r4, #3145728	; 0x300000
   8852c:	4608      	mov	r0, r1
   8852e:	4619      	mov	r1, r3
   88530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00088534 <__d2b>:
   88534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   88538:	2101      	movs	r1, #1
   8853a:	461d      	mov	r5, r3
   8853c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   88540:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   88544:	4614      	mov	r4, r2
   88546:	f7ff fcd7 	bl	87ef8 <_Balloc>
   8854a:	f3c5 570a 	ubfx	r7, r5, #20, #11
   8854e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
   88552:	4606      	mov	r6, r0
   88554:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
   88558:	b10f      	cbz	r7, 8855e <__d2b+0x2a>
   8855a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   8855e:	9001      	str	r0, [sp, #4]
   88560:	b1dc      	cbz	r4, 8859a <__d2b+0x66>
   88562:	aa02      	add	r2, sp, #8
   88564:	4668      	mov	r0, sp
   88566:	f842 4d08 	str.w	r4, [r2, #-8]!
   8856a:	f7ff fd91 	bl	88090 <__lo0bits>
   8856e:	9c00      	ldr	r4, [sp, #0]
   88570:	b150      	cbz	r0, 88588 <__d2b+0x54>
   88572:	9a01      	ldr	r2, [sp, #4]
   88574:	f1c0 0320 	rsb	r3, r0, #32
   88578:	fa02 f103 	lsl.w	r1, r2, r3
   8857c:	fa22 f200 	lsr.w	r2, r2, r0
   88580:	430c      	orrs	r4, r1
   88582:	6174      	str	r4, [r6, #20]
   88584:	9201      	str	r2, [sp, #4]
   88586:	e000      	b.n	8858a <__d2b+0x56>
   88588:	6174      	str	r4, [r6, #20]
   8858a:	9a01      	ldr	r2, [sp, #4]
   8858c:	2a00      	cmp	r2, #0
   8858e:	bf0c      	ite	eq
   88590:	2401      	moveq	r4, #1
   88592:	2402      	movne	r4, #2
   88594:	61b2      	str	r2, [r6, #24]
   88596:	6134      	str	r4, [r6, #16]
   88598:	e007      	b.n	885aa <__d2b+0x76>
   8859a:	a801      	add	r0, sp, #4
   8859c:	f7ff fd78 	bl	88090 <__lo0bits>
   885a0:	9901      	ldr	r1, [sp, #4]
   885a2:	2401      	movs	r4, #1
   885a4:	6171      	str	r1, [r6, #20]
   885a6:	6134      	str	r4, [r6, #16]
   885a8:	3020      	adds	r0, #32
   885aa:	b13f      	cbz	r7, 885bc <__d2b+0x88>
   885ac:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   885b0:	183f      	adds	r7, r7, r0
   885b2:	f8c9 7000 	str.w	r7, [r9]
   885b6:	f1c0 0135 	rsb	r1, r0, #53	; 0x35
   885ba:	e00a      	b.n	885d2 <__d2b+0x9e>
   885bc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   885c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   885c4:	f8c9 0000 	str.w	r0, [r9]
   885c8:	6918      	ldr	r0, [r3, #16]
   885ca:	f7ff fd42 	bl	88052 <__hi0bits>
   885ce:	0164      	lsls	r4, r4, #5
   885d0:	1a21      	subs	r1, r4, r0
   885d2:	f8c8 1000 	str.w	r1, [r8]
   885d6:	4630      	mov	r0, r6
   885d8:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

000885dc <__ratio>:
   885dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   885e0:	460e      	mov	r6, r1
   885e2:	4669      	mov	r1, sp
   885e4:	4680      	mov	r8, r0
   885e6:	f7ff ff51 	bl	8848c <__b2d>
   885ea:	460d      	mov	r5, r1
   885ec:	4604      	mov	r4, r0
   885ee:	a901      	add	r1, sp, #4
   885f0:	4630      	mov	r0, r6
   885f2:	f7ff ff4b 	bl	8848c <__b2d>
   885f6:	9f00      	ldr	r7, [sp, #0]
   885f8:	460b      	mov	r3, r1
   885fa:	9901      	ldr	r1, [sp, #4]
   885fc:	4602      	mov	r2, r0
   885fe:	1a7f      	subs	r7, r7, r1
   88600:	f8d8 0010 	ldr.w	r0, [r8, #16]
   88604:	6931      	ldr	r1, [r6, #16]
   88606:	1a40      	subs	r0, r0, r1
   88608:	eb07 1140 	add.w	r1, r7, r0, lsl #5
   8860c:	2900      	cmp	r1, #0
   8860e:	bfd6      	itet	le
   88610:	eba3 5101 	suble.w	r1, r3, r1, lsl #20
   88614:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
   88618:	460b      	movle	r3, r1
   8861a:	4620      	mov	r0, r4
   8861c:	4629      	mov	r1, r5
   8861e:	f7fb fb49 	bl	83cb4 <__aeabi_ddiv>
   88622:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00088626 <_mprec_log10>:
   88626:	2817      	cmp	r0, #23
   88628:	b510      	push	{r4, lr}
   8862a:	4604      	mov	r4, r0
   8862c:	dc05      	bgt.n	8863a <_mprec_log10+0x14>
   8862e:	4b07      	ldr	r3, [pc, #28]	; (8864c <_mprec_log10+0x26>)
   88630:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   88634:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   88638:	bd10      	pop	{r4, pc}
   8863a:	4905      	ldr	r1, [pc, #20]	; (88650 <_mprec_log10+0x2a>)
   8863c:	2000      	movs	r0, #0
   8863e:	2200      	movs	r2, #0
   88640:	4b04      	ldr	r3, [pc, #16]	; (88654 <_mprec_log10+0x2e>)
   88642:	f7fb fa0d 	bl	83a60 <__aeabi_dmul>
   88646:	3c01      	subs	r4, #1
   88648:	d1f9      	bne.n	8863e <_mprec_log10+0x18>
   8864a:	bd10      	pop	{r4, pc}
   8864c:	0008a940 	.word	0x0008a940
   88650:	3ff00000 	.word	0x3ff00000
   88654:	40240000 	.word	0x40240000

00088658 <__copybits>:
   88658:	3901      	subs	r1, #1
   8865a:	114b      	asrs	r3, r1, #5
   8865c:	b510      	push	{r4, lr}
   8865e:	1c59      	adds	r1, r3, #1
   88660:	6913      	ldr	r3, [r2, #16]
   88662:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   88666:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8866a:	3314      	adds	r3, #20
   8866c:	3214      	adds	r2, #20
   8866e:	429a      	cmp	r2, r3
   88670:	d204      	bcs.n	8867c <__copybits+0x24>
   88672:	f852 4b04 	ldr.w	r4, [r2], #4
   88676:	f840 4b04 	str.w	r4, [r0], #4
   8867a:	e7f8      	b.n	8866e <__copybits+0x16>
   8867c:	4288      	cmp	r0, r1
   8867e:	d203      	bcs.n	88688 <__copybits+0x30>
   88680:	2200      	movs	r2, #0
   88682:	f840 2b04 	str.w	r2, [r0], #4
   88686:	e7f9      	b.n	8867c <__copybits+0x24>
   88688:	bd10      	pop	{r4, pc}

0008868a <__any_on>:
   8868a:	6902      	ldr	r2, [r0, #16]
   8868c:	114b      	asrs	r3, r1, #5
   8868e:	4293      	cmp	r3, r2
   88690:	b530      	push	{r4, r5, lr}
   88692:	f100 0414 	add.w	r4, r0, #20
   88696:	dc0d      	bgt.n	886b4 <__any_on+0x2a>
   88698:	da0d      	bge.n	886b6 <__any_on+0x2c>
   8869a:	f011 011f 	ands.w	r1, r1, #31
   8869e:	d00a      	beq.n	886b6 <__any_on+0x2c>
   886a0:	eb00 0583 	add.w	r5, r0, r3, lsl #2
   886a4:	696a      	ldr	r2, [r5, #20]
   886a6:	fa22 f501 	lsr.w	r5, r2, r1
   886aa:	fa05 f101 	lsl.w	r1, r5, r1
   886ae:	4291      	cmp	r1, r2
   886b0:	d10f      	bne.n	886d2 <__any_on+0x48>
   886b2:	e000      	b.n	886b6 <__any_on+0x2c>
   886b4:	4613      	mov	r3, r2
   886b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   886ba:	3014      	adds	r0, #20
   886bc:	42a0      	cmp	r0, r4
   886be:	4602      	mov	r2, r0
   886c0:	d905      	bls.n	886ce <__any_on+0x44>
   886c2:	f852 1c04 	ldr.w	r1, [r2, #-4]
   886c6:	3804      	subs	r0, #4
   886c8:	2900      	cmp	r1, #0
   886ca:	d0f7      	beq.n	886bc <__any_on+0x32>
   886cc:	e001      	b.n	886d2 <__any_on+0x48>
   886ce:	2000      	movs	r0, #0
   886d0:	bd30      	pop	{r4, r5, pc}
   886d2:	2001      	movs	r0, #1
   886d4:	bd30      	pop	{r4, r5, pc}
   886d6:	bf00      	nop

000886d8 <_realloc_r>:
   886d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   886dc:	4681      	mov	r9, r0
   886de:	4616      	mov	r6, r2
   886e0:	460c      	mov	r4, r1
   886e2:	b921      	cbnz	r1, 886ee <_realloc_r+0x16>
   886e4:	4611      	mov	r1, r2
   886e6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   886ea:	f7ff b979 	b.w	879e0 <_malloc_r>
   886ee:	f7ff fc01 	bl	87ef4 <__malloc_lock>
   886f2:	f106 070b 	add.w	r7, r6, #11
   886f6:	f854 5c04 	ldr.w	r5, [r4, #-4]
   886fa:	2f16      	cmp	r7, #22
   886fc:	f1a4 0b08 	sub.w	fp, r4, #8
   88700:	f025 0803 	bic.w	r8, r5, #3
   88704:	d903      	bls.n	8870e <_realloc_r+0x36>
   88706:	f037 0707 	bics.w	r7, r7, #7
   8870a:	d501      	bpl.n	88710 <_realloc_r+0x38>
   8870c:	e002      	b.n	88714 <_realloc_r+0x3c>
   8870e:	2710      	movs	r7, #16
   88710:	42b7      	cmp	r7, r6
   88712:	d204      	bcs.n	8871e <_realloc_r+0x46>
   88714:	200c      	movs	r0, #12
   88716:	f8c9 0000 	str.w	r0, [r9]
   8871a:	2600      	movs	r6, #0
   8871c:	e145      	b.n	889aa <_realloc_r+0x2d2>
   8871e:	45b8      	cmp	r8, r7
   88720:	f280 811a 	bge.w	88958 <_realloc_r+0x280>
   88724:	4aa2      	ldr	r2, [pc, #648]	; (889b0 <_realloc_r+0x2d8>)
   88726:	eb0b 0308 	add.w	r3, fp, r8
   8872a:	6891      	ldr	r1, [r2, #8]
   8872c:	428b      	cmp	r3, r1
   8872e:	d006      	beq.n	8873e <_realloc_r+0x66>
   88730:	6858      	ldr	r0, [r3, #4]
   88732:	f020 0201 	bic.w	r2, r0, #1
   88736:	1898      	adds	r0, r3, r2
   88738:	6842      	ldr	r2, [r0, #4]
   8873a:	07d0      	lsls	r0, r2, #31
   8873c:	d426      	bmi.n	8878c <_realloc_r+0xb4>
   8873e:	685a      	ldr	r2, [r3, #4]
   88740:	428b      	cmp	r3, r1
   88742:	f022 0003 	bic.w	r0, r2, #3
   88746:	eb00 0a08 	add.w	sl, r0, r8
   8874a:	d118      	bne.n	8877e <_realloc_r+0xa6>
   8874c:	f107 0210 	add.w	r2, r7, #16
   88750:	4592      	cmp	sl, r2
   88752:	db1d      	blt.n	88790 <_realloc_r+0xb8>
   88754:	ebc7 0a0a 	rsb	sl, r7, sl
   88758:	eb0b 0507 	add.w	r5, fp, r7
   8875c:	f04a 0101 	orr.w	r1, sl, #1
   88760:	6069      	str	r1, [r5, #4]
   88762:	f854 2c04 	ldr.w	r2, [r4, #-4]
   88766:	4e92      	ldr	r6, [pc, #584]	; (889b0 <_realloc_r+0x2d8>)
   88768:	f002 0301 	and.w	r3, r2, #1
   8876c:	431f      	orrs	r7, r3
   8876e:	60b5      	str	r5, [r6, #8]
   88770:	f844 7c04 	str.w	r7, [r4, #-4]
   88774:	4648      	mov	r0, r9
   88776:	f7ff fbbe 	bl	87ef6 <__malloc_unlock>
   8877a:	4626      	mov	r6, r4
   8877c:	e115      	b.n	889aa <_realloc_r+0x2d2>
   8877e:	45ba      	cmp	sl, r7
   88780:	db06      	blt.n	88790 <_realloc_r+0xb8>
   88782:	68dd      	ldr	r5, [r3, #12]
   88784:	689e      	ldr	r6, [r3, #8]
   88786:	60f5      	str	r5, [r6, #12]
   88788:	60ae      	str	r6, [r5, #8]
   8878a:	e0e6      	b.n	8895a <_realloc_r+0x282>
   8878c:	2000      	movs	r0, #0
   8878e:	4603      	mov	r3, r0
   88790:	07ea      	lsls	r2, r5, #31
   88792:	f100 8091 	bmi.w	888b8 <_realloc_r+0x1e0>
   88796:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8879a:	ebc5 050b 	rsb	r5, r5, fp
   8879e:	686a      	ldr	r2, [r5, #4]
   887a0:	f022 0203 	bic.w	r2, r2, #3
   887a4:	2b00      	cmp	r3, #0
   887a6:	d051      	beq.n	8884c <_realloc_r+0x174>
   887a8:	eb02 0a08 	add.w	sl, r2, r8
   887ac:	428b      	cmp	r3, r1
   887ae:	4482      	add	sl, r0
   887b0:	d145      	bne.n	8883e <_realloc_r+0x166>
   887b2:	f107 0310 	add.w	r3, r7, #16
   887b6:	459a      	cmp	sl, r3
   887b8:	db48      	blt.n	8884c <_realloc_r+0x174>
   887ba:	462e      	mov	r6, r5
   887bc:	68e9      	ldr	r1, [r5, #12]
   887be:	f856 3f08 	ldr.w	r3, [r6, #8]!
   887c2:	f1a8 0204 	sub.w	r2, r8, #4
   887c6:	2a24      	cmp	r2, #36	; 0x24
   887c8:	60d9      	str	r1, [r3, #12]
   887ca:	608b      	str	r3, [r1, #8]
   887cc:	d825      	bhi.n	8881a <_realloc_r+0x142>
   887ce:	2a13      	cmp	r2, #19
   887d0:	d91b      	bls.n	8880a <_realloc_r+0x132>
   887d2:	6821      	ldr	r1, [r4, #0]
   887d4:	2a1b      	cmp	r2, #27
   887d6:	60a9      	str	r1, [r5, #8]
   887d8:	6863      	ldr	r3, [r4, #4]
   887da:	60eb      	str	r3, [r5, #12]
   887dc:	d803      	bhi.n	887e6 <_realloc_r+0x10e>
   887de:	f105 0010 	add.w	r0, r5, #16
   887e2:	3408      	adds	r4, #8
   887e4:	e012      	b.n	8880c <_realloc_r+0x134>
   887e6:	68a0      	ldr	r0, [r4, #8]
   887e8:	2a24      	cmp	r2, #36	; 0x24
   887ea:	6128      	str	r0, [r5, #16]
   887ec:	68e1      	ldr	r1, [r4, #12]
   887ee:	6169      	str	r1, [r5, #20]
   887f0:	d003      	beq.n	887fa <_realloc_r+0x122>
   887f2:	f105 0018 	add.w	r0, r5, #24
   887f6:	3410      	adds	r4, #16
   887f8:	e008      	b.n	8880c <_realloc_r+0x134>
   887fa:	6922      	ldr	r2, [r4, #16]
   887fc:	f105 0020 	add.w	r0, r5, #32
   88800:	61aa      	str	r2, [r5, #24]
   88802:	6963      	ldr	r3, [r4, #20]
   88804:	3418      	adds	r4, #24
   88806:	61eb      	str	r3, [r5, #28]
   88808:	e000      	b.n	8880c <_realloc_r+0x134>
   8880a:	4630      	mov	r0, r6
   8880c:	6821      	ldr	r1, [r4, #0]
   8880e:	6001      	str	r1, [r0, #0]
   88810:	6862      	ldr	r2, [r4, #4]
   88812:	6042      	str	r2, [r0, #4]
   88814:	68a3      	ldr	r3, [r4, #8]
   88816:	6083      	str	r3, [r0, #8]
   88818:	e003      	b.n	88822 <_realloc_r+0x14a>
   8881a:	4630      	mov	r0, r6
   8881c:	4621      	mov	r1, r4
   8881e:	f7ff fb4f 	bl	87ec0 <memmove>
   88822:	ebc7 0a0a 	rsb	sl, r7, sl
   88826:	19e8      	adds	r0, r5, r7
   88828:	f04a 0201 	orr.w	r2, sl, #1
   8882c:	6042      	str	r2, [r0, #4]
   8882e:	686b      	ldr	r3, [r5, #4]
   88830:	495f      	ldr	r1, [pc, #380]	; (889b0 <_realloc_r+0x2d8>)
   88832:	6088      	str	r0, [r1, #8]
   88834:	f003 0001 	and.w	r0, r3, #1
   88838:	4307      	orrs	r7, r0
   8883a:	606f      	str	r7, [r5, #4]
   8883c:	e088      	b.n	88950 <_realloc_r+0x278>
   8883e:	45ba      	cmp	sl, r7
   88840:	db04      	blt.n	8884c <_realloc_r+0x174>
   88842:	68d9      	ldr	r1, [r3, #12]
   88844:	6898      	ldr	r0, [r3, #8]
   88846:	60c1      	str	r1, [r0, #12]
   88848:	6088      	str	r0, [r1, #8]
   8884a:	e003      	b.n	88854 <_realloc_r+0x17c>
   8884c:	eb02 0a08 	add.w	sl, r2, r8
   88850:	45ba      	cmp	sl, r7
   88852:	db31      	blt.n	888b8 <_realloc_r+0x1e0>
   88854:	4628      	mov	r0, r5
   88856:	68eb      	ldr	r3, [r5, #12]
   88858:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8885c:	f1a8 0204 	sub.w	r2, r8, #4
   88860:	2a24      	cmp	r2, #36	; 0x24
   88862:	60cb      	str	r3, [r1, #12]
   88864:	6099      	str	r1, [r3, #8]
   88866:	d823      	bhi.n	888b0 <_realloc_r+0x1d8>
   88868:	2a13      	cmp	r2, #19
   8886a:	d91a      	bls.n	888a2 <_realloc_r+0x1ca>
   8886c:	6820      	ldr	r0, [r4, #0]
   8886e:	2a1b      	cmp	r2, #27
   88870:	60a8      	str	r0, [r5, #8]
   88872:	6866      	ldr	r6, [r4, #4]
   88874:	60ee      	str	r6, [r5, #12]
   88876:	d803      	bhi.n	88880 <_realloc_r+0x1a8>
   88878:	f105 0010 	add.w	r0, r5, #16
   8887c:	3408      	adds	r4, #8
   8887e:	e010      	b.n	888a2 <_realloc_r+0x1ca>
   88880:	68a3      	ldr	r3, [r4, #8]
   88882:	2a24      	cmp	r2, #36	; 0x24
   88884:	612b      	str	r3, [r5, #16]
   88886:	68e1      	ldr	r1, [r4, #12]
   88888:	6169      	str	r1, [r5, #20]
   8888a:	d003      	beq.n	88894 <_realloc_r+0x1bc>
   8888c:	f105 0018 	add.w	r0, r5, #24
   88890:	3410      	adds	r4, #16
   88892:	e006      	b.n	888a2 <_realloc_r+0x1ca>
   88894:	6922      	ldr	r2, [r4, #16]
   88896:	61aa      	str	r2, [r5, #24]
   88898:	6960      	ldr	r0, [r4, #20]
   8889a:	3418      	adds	r4, #24
   8889c:	61e8      	str	r0, [r5, #28]
   8889e:	f105 0020 	add.w	r0, r5, #32
   888a2:	6826      	ldr	r6, [r4, #0]
   888a4:	6006      	str	r6, [r0, #0]
   888a6:	6863      	ldr	r3, [r4, #4]
   888a8:	6043      	str	r3, [r0, #4]
   888aa:	68a1      	ldr	r1, [r4, #8]
   888ac:	6081      	str	r1, [r0, #8]
   888ae:	e055      	b.n	8895c <_realloc_r+0x284>
   888b0:	4621      	mov	r1, r4
   888b2:	f7ff fb05 	bl	87ec0 <memmove>
   888b6:	e051      	b.n	8895c <_realloc_r+0x284>
   888b8:	4631      	mov	r1, r6
   888ba:	4648      	mov	r0, r9
   888bc:	f7ff f890 	bl	879e0 <_malloc_r>
   888c0:	4606      	mov	r6, r0
   888c2:	2800      	cmp	r0, #0
   888c4:	d044      	beq.n	88950 <_realloc_r+0x278>
   888c6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   888ca:	f1a0 0208 	sub.w	r2, r0, #8
   888ce:	f021 0301 	bic.w	r3, r1, #1
   888d2:	eb0b 0103 	add.w	r1, fp, r3
   888d6:	428a      	cmp	r2, r1
   888d8:	d106      	bne.n	888e8 <_realloc_r+0x210>
   888da:	f850 6c04 	ldr.w	r6, [r0, #-4]
   888de:	f026 0503 	bic.w	r5, r6, #3
   888e2:	eb05 0a08 	add.w	sl, r5, r8
   888e6:	e038      	b.n	8895a <_realloc_r+0x282>
   888e8:	f1a8 0204 	sub.w	r2, r8, #4
   888ec:	2a24      	cmp	r2, #36	; 0x24
   888ee:	d828      	bhi.n	88942 <_realloc_r+0x26a>
   888f0:	2a13      	cmp	r2, #19
   888f2:	d91e      	bls.n	88932 <_realloc_r+0x25a>
   888f4:	6823      	ldr	r3, [r4, #0]
   888f6:	2a1b      	cmp	r2, #27
   888f8:	6003      	str	r3, [r0, #0]
   888fa:	6861      	ldr	r1, [r4, #4]
   888fc:	6041      	str	r1, [r0, #4]
   888fe:	d804      	bhi.n	8890a <_realloc_r+0x232>
   88900:	f100 0008 	add.w	r0, r0, #8
   88904:	f104 0208 	add.w	r2, r4, #8
   88908:	e014      	b.n	88934 <_realloc_r+0x25c>
   8890a:	68a0      	ldr	r0, [r4, #8]
   8890c:	2a24      	cmp	r2, #36	; 0x24
   8890e:	60b0      	str	r0, [r6, #8]
   88910:	68e3      	ldr	r3, [r4, #12]
   88912:	60f3      	str	r3, [r6, #12]
   88914:	d004      	beq.n	88920 <_realloc_r+0x248>
   88916:	f106 0010 	add.w	r0, r6, #16
   8891a:	f104 0210 	add.w	r2, r4, #16
   8891e:	e009      	b.n	88934 <_realloc_r+0x25c>
   88920:	6922      	ldr	r2, [r4, #16]
   88922:	f106 0018 	add.w	r0, r6, #24
   88926:	6132      	str	r2, [r6, #16]
   88928:	6961      	ldr	r1, [r4, #20]
   8892a:	f104 0218 	add.w	r2, r4, #24
   8892e:	6171      	str	r1, [r6, #20]
   88930:	e000      	b.n	88934 <_realloc_r+0x25c>
   88932:	4622      	mov	r2, r4
   88934:	6813      	ldr	r3, [r2, #0]
   88936:	6003      	str	r3, [r0, #0]
   88938:	6851      	ldr	r1, [r2, #4]
   8893a:	6041      	str	r1, [r0, #4]
   8893c:	6892      	ldr	r2, [r2, #8]
   8893e:	6082      	str	r2, [r0, #8]
   88940:	e002      	b.n	88948 <_realloc_r+0x270>
   88942:	4621      	mov	r1, r4
   88944:	f7ff fabc 	bl	87ec0 <memmove>
   88948:	4648      	mov	r0, r9
   8894a:	4621      	mov	r1, r4
   8894c:	f7fe f9ea 	bl	86d24 <_free_r>
   88950:	4648      	mov	r0, r9
   88952:	f7ff fad0 	bl	87ef6 <__malloc_unlock>
   88956:	e028      	b.n	889aa <_realloc_r+0x2d2>
   88958:	46c2      	mov	sl, r8
   8895a:	465d      	mov	r5, fp
   8895c:	ebc7 000a 	rsb	r0, r7, sl
   88960:	280f      	cmp	r0, #15
   88962:	686a      	ldr	r2, [r5, #4]
   88964:	d911      	bls.n	8898a <_realloc_r+0x2b2>
   88966:	f002 0601 	and.w	r6, r2, #1
   8896a:	19e9      	adds	r1, r5, r7
   8896c:	f040 0301 	orr.w	r3, r0, #1
   88970:	4337      	orrs	r7, r6
   88972:	606f      	str	r7, [r5, #4]
   88974:	1808      	adds	r0, r1, r0
   88976:	604b      	str	r3, [r1, #4]
   88978:	6842      	ldr	r2, [r0, #4]
   8897a:	3108      	adds	r1, #8
   8897c:	f042 0601 	orr.w	r6, r2, #1
   88980:	6046      	str	r6, [r0, #4]
   88982:	4648      	mov	r0, r9
   88984:	f7fe f9ce 	bl	86d24 <_free_r>
   88988:	e00a      	b.n	889a0 <_realloc_r+0x2c8>
   8898a:	f002 0601 	and.w	r6, r2, #1
   8898e:	ea4a 0306 	orr.w	r3, sl, r6
   88992:	606b      	str	r3, [r5, #4]
   88994:	eb05 010a 	add.w	r1, r5, sl
   88998:	6848      	ldr	r0, [r1, #4]
   8899a:	f040 0201 	orr.w	r2, r0, #1
   8899e:	604a      	str	r2, [r1, #4]
   889a0:	4648      	mov	r0, r9
   889a2:	f7ff faa8 	bl	87ef6 <__malloc_unlock>
   889a6:	f105 0608 	add.w	r6, r5, #8
   889aa:	4630      	mov	r0, r6
   889ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   889b0:	200704e8 	.word	0x200704e8

000889b4 <lflush>:
   889b4:	8983      	ldrh	r3, [r0, #12]
   889b6:	f003 0109 	and.w	r1, r3, #9
   889ba:	2909      	cmp	r1, #9
   889bc:	d101      	bne.n	889c2 <lflush+0xe>
   889be:	f7fd bfba 	b.w	86936 <fflush>
   889c2:	2000      	movs	r0, #0
   889c4:	4770      	bx	lr

000889c6 <__srefill_r>:
   889c6:	b570      	push	{r4, r5, r6, lr}
   889c8:	460c      	mov	r4, r1
   889ca:	4605      	mov	r5, r0
   889cc:	b118      	cbz	r0, 889d6 <__srefill_r+0x10>
   889ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
   889d0:	b90b      	cbnz	r3, 889d6 <__srefill_r+0x10>
   889d2:	f7fe f80b 	bl	869ec <__sinit>
   889d6:	89a0      	ldrh	r0, [r4, #12]
   889d8:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   889dc:	b211      	sxth	r1, r2
   889de:	b931      	cbnz	r1, 889ee <__srefill_r+0x28>
   889e0:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   889e4:	6e60      	ldr	r0, [r4, #100]	; 0x64
   889e6:	81a3      	strh	r3, [r4, #12]
   889e8:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   889ec:	6662      	str	r2, [r4, #100]	; 0x64
   889ee:	89a3      	ldrh	r3, [r4, #12]
   889f0:	2100      	movs	r1, #0
   889f2:	f003 0020 	and.w	r0, r3, #32
   889f6:	b202      	sxth	r2, r0
   889f8:	6061      	str	r1, [r4, #4]
   889fa:	2a00      	cmp	r2, #0
   889fc:	d152      	bne.n	88aa4 <__srefill_r+0xde>
   889fe:	f003 0104 	and.w	r1, r3, #4
   88a02:	b208      	sxth	r0, r1
   88a04:	b9d8      	cbnz	r0, 88a3e <__srefill_r+0x78>
   88a06:	f003 0010 	and.w	r0, r3, #16
   88a0a:	b202      	sxth	r2, r0
   88a0c:	b912      	cbnz	r2, 88a14 <__srefill_r+0x4e>
   88a0e:	2109      	movs	r1, #9
   88a10:	6029      	str	r1, [r5, #0]
   88a12:	e044      	b.n	88a9e <__srefill_r+0xd8>
   88a14:	f003 0308 	and.w	r3, r3, #8
   88a18:	b219      	sxth	r1, r3
   88a1a:	b159      	cbz	r1, 88a34 <__srefill_r+0x6e>
   88a1c:	4628      	mov	r0, r5
   88a1e:	4621      	mov	r1, r4
   88a20:	f7fd fef2 	bl	86808 <_fflush_r>
   88a24:	2800      	cmp	r0, #0
   88a26:	d13d      	bne.n	88aa4 <__srefill_r+0xde>
   88a28:	89a6      	ldrh	r6, [r4, #12]
   88a2a:	60a0      	str	r0, [r4, #8]
   88a2c:	f026 0208 	bic.w	r2, r6, #8
   88a30:	81a2      	strh	r2, [r4, #12]
   88a32:	61a0      	str	r0, [r4, #24]
   88a34:	89a0      	ldrh	r0, [r4, #12]
   88a36:	f040 0304 	orr.w	r3, r0, #4
   88a3a:	81a3      	strh	r3, [r4, #12]
   88a3c:	e010      	b.n	88a60 <__srefill_r+0x9a>
   88a3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88a40:	b171      	cbz	r1, 88a60 <__srefill_r+0x9a>
   88a42:	f104 0340 	add.w	r3, r4, #64	; 0x40
   88a46:	4299      	cmp	r1, r3
   88a48:	d002      	beq.n	88a50 <__srefill_r+0x8a>
   88a4a:	4628      	mov	r0, r5
   88a4c:	f7fe f96a 	bl	86d24 <_free_r>
   88a50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   88a52:	2000      	movs	r0, #0
   88a54:	6320      	str	r0, [r4, #48]	; 0x30
   88a56:	6062      	str	r2, [r4, #4]
   88a58:	b112      	cbz	r2, 88a60 <__srefill_r+0x9a>
   88a5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   88a5c:	6021      	str	r1, [r4, #0]
   88a5e:	bd70      	pop	{r4, r5, r6, pc}
   88a60:	6921      	ldr	r1, [r4, #16]
   88a62:	b919      	cbnz	r1, 88a6c <__srefill_r+0xa6>
   88a64:	4628      	mov	r0, r5
   88a66:	4621      	mov	r1, r4
   88a68:	f7fe ff3e 	bl	878e8 <__smakebuf_r>
   88a6c:	89a6      	ldrh	r6, [r4, #12]
   88a6e:	07b3      	lsls	r3, r6, #30
   88a70:	d004      	beq.n	88a7c <__srefill_r+0xb6>
   88a72:	4a0f      	ldr	r2, [pc, #60]	; (88ab0 <__srefill_r+0xea>)
   88a74:	490f      	ldr	r1, [pc, #60]	; (88ab4 <__srefill_r+0xee>)
   88a76:	6810      	ldr	r0, [r2, #0]
   88a78:	f7fe fb65 	bl	87146 <_fwalk>
   88a7c:	6922      	ldr	r2, [r4, #16]
   88a7e:	6a26      	ldr	r6, [r4, #32]
   88a80:	6022      	str	r2, [r4, #0]
   88a82:	4628      	mov	r0, r5
   88a84:	69e1      	ldr	r1, [r4, #28]
   88a86:	6963      	ldr	r3, [r4, #20]
   88a88:	47b0      	blx	r6
   88a8a:	2800      	cmp	r0, #0
   88a8c:	6060      	str	r0, [r4, #4]
   88a8e:	dc0c      	bgt.n	88aaa <__srefill_r+0xe4>
   88a90:	89a3      	ldrh	r3, [r4, #12]
   88a92:	d102      	bne.n	88a9a <__srefill_r+0xd4>
   88a94:	f043 0220 	orr.w	r2, r3, #32
   88a98:	e003      	b.n	88aa2 <__srefill_r+0xdc>
   88a9a:	2000      	movs	r0, #0
   88a9c:	6060      	str	r0, [r4, #4]
   88a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   88aa2:	81a2      	strh	r2, [r4, #12]
   88aa4:	f04f 30ff 	mov.w	r0, #4294967295
   88aa8:	bd70      	pop	{r4, r5, r6, pc}
   88aaa:	2000      	movs	r0, #0
   88aac:	bd70      	pop	{r4, r5, r6, pc}
   88aae:	bf00      	nop
   88ab0:	0008a764 	.word	0x0008a764
   88ab4:	000889b5 	.word	0x000889b5

00088ab8 <__fpclassifyd>:
   88ab8:	460b      	mov	r3, r1
   88aba:	b111      	cbz	r1, 88ac2 <__fpclassifyd+0xa>
   88abc:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   88ac0:	d100      	bne.n	88ac4 <__fpclassifyd+0xc>
   88ac2:	b1e0      	cbz	r0, 88afe <__fpclassifyd+0x46>
   88ac4:	4a12      	ldr	r2, [pc, #72]	; (88b10 <__fpclassifyd+0x58>)
   88ac6:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
   88aca:	4291      	cmp	r1, r2
   88acc:	d919      	bls.n	88b02 <__fpclassifyd+0x4a>
   88ace:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
   88ad2:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
   88ad6:	4291      	cmp	r1, r2
   88ad8:	d913      	bls.n	88b02 <__fpclassifyd+0x4a>
   88ada:	4a0e      	ldr	r2, [pc, #56]	; (88b14 <__fpclassifyd+0x5c>)
   88adc:	4293      	cmp	r3, r2
   88ade:	d912      	bls.n	88b06 <__fpclassifyd+0x4e>
   88ae0:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   88ae4:	4291      	cmp	r1, r2
   88ae6:	d90e      	bls.n	88b06 <__fpclassifyd+0x4e>
   88ae8:	4a0b      	ldr	r2, [pc, #44]	; (88b18 <__fpclassifyd+0x60>)
   88aea:	4293      	cmp	r3, r2
   88aec:	d002      	beq.n	88af4 <__fpclassifyd+0x3c>
   88aee:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
   88af2:	d10a      	bne.n	88b0a <__fpclassifyd+0x52>
   88af4:	f1d0 0001 	rsbs	r0, r0, #1
   88af8:	bf38      	it	cc
   88afa:	2000      	movcc	r0, #0
   88afc:	4770      	bx	lr
   88afe:	2002      	movs	r0, #2
   88b00:	4770      	bx	lr
   88b02:	2004      	movs	r0, #4
   88b04:	4770      	bx	lr
   88b06:	2003      	movs	r0, #3
   88b08:	4770      	bx	lr
   88b0a:	2000      	movs	r0, #0
   88b0c:	4770      	bx	lr
   88b0e:	bf00      	nop
   88b10:	7fdfffff 	.word	0x7fdfffff
   88b14:	000fffff 	.word	0x000fffff
   88b18:	7ff00000 	.word	0x7ff00000

00088b1c <_sbrk_r>:
   88b1c:	b538      	push	{r3, r4, r5, lr}
   88b1e:	4c06      	ldr	r4, [pc, #24]	; (88b38 <_sbrk_r+0x1c>)
   88b20:	2300      	movs	r3, #0
   88b22:	4605      	mov	r5, r0
   88b24:	4608      	mov	r0, r1
   88b26:	6023      	str	r3, [r4, #0]
   88b28:	f7f8 fe84 	bl	81834 <_sbrk>
   88b2c:	1c43      	adds	r3, r0, #1
   88b2e:	d102      	bne.n	88b36 <_sbrk_r+0x1a>
   88b30:	6821      	ldr	r1, [r4, #0]
   88b32:	b101      	cbz	r1, 88b36 <_sbrk_r+0x1a>
   88b34:	6029      	str	r1, [r5, #0]
   88b36:	bd38      	pop	{r3, r4, r5, pc}
   88b38:	2007ac78 	.word	0x2007ac78

00088b3c <__sccl>:
   88b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   88b3e:	780b      	ldrb	r3, [r1, #0]
   88b40:	2b5e      	cmp	r3, #94	; 0x5e
   88b42:	d002      	beq.n	88b4a <__sccl+0xe>
   88b44:	3101      	adds	r1, #1
   88b46:	2400      	movs	r4, #0
   88b48:	e002      	b.n	88b50 <__sccl+0x14>
   88b4a:	784b      	ldrb	r3, [r1, #1]
   88b4c:	2401      	movs	r4, #1
   88b4e:	3102      	adds	r1, #2
   88b50:	2200      	movs	r2, #0
   88b52:	5484      	strb	r4, [r0, r2]
   88b54:	3201      	adds	r2, #1
   88b56:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   88b5a:	d1fa      	bne.n	88b52 <__sccl+0x16>
   88b5c:	b90b      	cbnz	r3, 88b62 <__sccl+0x26>
   88b5e:	1e4a      	subs	r2, r1, #1
   88b60:	e01a      	b.n	88b98 <__sccl+0x5c>
   88b62:	f1c4 0701 	rsb	r7, r4, #1
   88b66:	b2fe      	uxtb	r6, r7
   88b68:	54c6      	strb	r6, [r0, r3]
   88b6a:	460a      	mov	r2, r1
   88b6c:	4611      	mov	r1, r2
   88b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   88b72:	2c2d      	cmp	r4, #45	; 0x2d
   88b74:	d004      	beq.n	88b80 <__sccl+0x44>
   88b76:	2c5d      	cmp	r4, #93	; 0x5d
   88b78:	d00d      	beq.n	88b96 <__sccl+0x5a>
   88b7a:	b16c      	cbz	r4, 88b98 <__sccl+0x5c>
   88b7c:	4623      	mov	r3, r4
   88b7e:	e7f2      	b.n	88b66 <__sccl+0x2a>
   88b80:	7855      	ldrb	r5, [r2, #1]
   88b82:	2d5d      	cmp	r5, #93	; 0x5d
   88b84:	d0fa      	beq.n	88b7c <__sccl+0x40>
   88b86:	429d      	cmp	r5, r3
   88b88:	dbf8      	blt.n	88b7c <__sccl+0x40>
   88b8a:	3202      	adds	r2, #2
   88b8c:	3301      	adds	r3, #1
   88b8e:	42ab      	cmp	r3, r5
   88b90:	54c6      	strb	r6, [r0, r3]
   88b92:	dbfb      	blt.n	88b8c <__sccl+0x50>
   88b94:	e7ea      	b.n	88b6c <__sccl+0x30>
   88b96:	460a      	mov	r2, r1
   88b98:	4610      	mov	r0, r2
   88b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00088b9c <nanf>:
   88b9c:	4800      	ldr	r0, [pc, #0]	; (88ba0 <nanf+0x4>)
   88b9e:	4770      	bx	lr
   88ba0:	7fc00000 	.word	0x7fc00000

00088ba4 <__sread>:
   88ba4:	b510      	push	{r4, lr}
   88ba6:	460c      	mov	r4, r1
   88ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   88bac:	f001 f98e 	bl	89ecc <_read_r>
   88bb0:	2800      	cmp	r0, #0
   88bb2:	db03      	blt.n	88bbc <__sread+0x18>
   88bb4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   88bb6:	1813      	adds	r3, r2, r0
   88bb8:	6523      	str	r3, [r4, #80]	; 0x50
   88bba:	bd10      	pop	{r4, pc}
   88bbc:	89a3      	ldrh	r3, [r4, #12]
   88bbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   88bc2:	81a1      	strh	r1, [r4, #12]
   88bc4:	bd10      	pop	{r4, pc}

00088bc6 <__seofread>:
   88bc6:	2000      	movs	r0, #0
   88bc8:	4770      	bx	lr

00088bca <__swrite>:
   88bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88bce:	461d      	mov	r5, r3
   88bd0:	898b      	ldrh	r3, [r1, #12]
   88bd2:	460c      	mov	r4, r1
   88bd4:	f403 7180 	and.w	r1, r3, #256	; 0x100
   88bd8:	4616      	mov	r6, r2
   88bda:	b20a      	sxth	r2, r1
   88bdc:	4607      	mov	r7, r0
   88bde:	b12a      	cbz	r2, 88bec <__swrite+0x22>
   88be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   88be4:	2200      	movs	r2, #0
   88be6:	2302      	movs	r3, #2
   88be8:	f001 f95e 	bl	89ea8 <_lseek_r>
   88bec:	89a0      	ldrh	r0, [r4, #12]
   88bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   88bf2:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   88bf6:	81a3      	strh	r3, [r4, #12]
   88bf8:	4638      	mov	r0, r7
   88bfa:	4632      	mov	r2, r6
   88bfc:	462b      	mov	r3, r5
   88bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88c02:	f001 b895 	b.w	89d30 <_write_r>

00088c06 <__sseek>:
   88c06:	b510      	push	{r4, lr}
   88c08:	460c      	mov	r4, r1
   88c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   88c0e:	f001 f94b 	bl	89ea8 <_lseek_r>
   88c12:	1c43      	adds	r3, r0, #1
   88c14:	89a3      	ldrh	r3, [r4, #12]
   88c16:	d103      	bne.n	88c20 <__sseek+0x1a>
   88c18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   88c1c:	81a2      	strh	r2, [r4, #12]
   88c1e:	bd10      	pop	{r4, pc}
   88c20:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   88c24:	81a1      	strh	r1, [r4, #12]
   88c26:	6520      	str	r0, [r4, #80]	; 0x50
   88c28:	bd10      	pop	{r4, pc}

00088c2a <__sclose>:
   88c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   88c2e:	f001 b8bf 	b.w	89db0 <_close_r>

00088c32 <strcmp>:
   88c32:	f810 2b01 	ldrb.w	r2, [r0], #1
   88c36:	f811 3b01 	ldrb.w	r3, [r1], #1
   88c3a:	2a01      	cmp	r2, #1
   88c3c:	bf28      	it	cs
   88c3e:	429a      	cmpcs	r2, r3
   88c40:	d0f7      	beq.n	88c32 <strcmp>
   88c42:	eba2 0003 	sub.w	r0, r2, r3
   88c46:	4770      	bx	lr

00088c48 <_strtol_r>:
   88c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88c4c:	9001      	str	r0, [sp, #4]
   88c4e:	4840      	ldr	r0, [pc, #256]	; (88d50 <_strtol_r+0x108>)
   88c50:	f8d0 9000 	ldr.w	r9, [r0]
   88c54:	4608      	mov	r0, r1
   88c56:	4604      	mov	r4, r0
   88c58:	f814 5b01 	ldrb.w	r5, [r4], #1
   88c5c:	eb09 0605 	add.w	r6, r9, r5
   88c60:	7877      	ldrb	r7, [r6, #1]
   88c62:	4620      	mov	r0, r4
   88c64:	f007 0608 	and.w	r6, r7, #8
   88c68:	b2f7      	uxtb	r7, r6
   88c6a:	2f00      	cmp	r7, #0
   88c6c:	d1f3      	bne.n	88c56 <_strtol_r+0xe>
   88c6e:	2d2d      	cmp	r5, #45	; 0x2d
   88c70:	d103      	bne.n	88c7a <_strtol_r+0x32>
   88c72:	f814 5b01 	ldrb.w	r5, [r4], #1
   88c76:	2701      	movs	r7, #1
   88c78:	e004      	b.n	88c84 <_strtol_r+0x3c>
   88c7a:	2d2b      	cmp	r5, #43	; 0x2b
   88c7c:	bf04      	itt	eq
   88c7e:	4624      	moveq	r4, r4
   88c80:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   88c84:	2b00      	cmp	r3, #0
   88c86:	d05c      	beq.n	88d42 <_strtol_r+0xfa>
   88c88:	2b10      	cmp	r3, #16
   88c8a:	d107      	bne.n	88c9c <_strtol_r+0x54>
   88c8c:	2d30      	cmp	r5, #48	; 0x30
   88c8e:	d105      	bne.n	88c9c <_strtol_r+0x54>
   88c90:	7825      	ldrb	r5, [r4, #0]
   88c92:	2d78      	cmp	r5, #120	; 0x78
   88c94:	d14e      	bne.n	88d34 <_strtol_r+0xec>
   88c96:	7865      	ldrb	r5, [r4, #1]
   88c98:	2310      	movs	r3, #16
   88c9a:	3402      	adds	r4, #2
   88c9c:	2f00      	cmp	r7, #0
   88c9e:	bf0c      	ite	eq
   88ca0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   88ca4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   88ca8:	fbb0 faf3 	udiv	sl, r0, r3
   88cac:	2600      	movs	r6, #0
   88cae:	fb03 081a 	mls	r8, r3, sl, r0
   88cb2:	4630      	mov	r0, r6
   88cb4:	eb09 0c05 	add.w	ip, r9, r5
   88cb8:	f89c c001 	ldrb.w	ip, [ip, #1]
   88cbc:	f00c 0b04 	and.w	fp, ip, #4
   88cc0:	fa5f fb8b 	uxtb.w	fp, fp
   88cc4:	f1bb 0f00 	cmp.w	fp, #0
   88cc8:	d001      	beq.n	88cce <_strtol_r+0x86>
   88cca:	3d30      	subs	r5, #48	; 0x30
   88ccc:	e00b      	b.n	88ce6 <_strtol_r+0x9e>
   88cce:	f01c 0c03 	ands.w	ip, ip, #3
   88cd2:	d01b      	beq.n	88d0c <_strtol_r+0xc4>
   88cd4:	f1bc 0f01 	cmp.w	ip, #1
   88cd8:	bf14      	ite	ne
   88cda:	f04f 0c57 	movne.w	ip, #87	; 0x57
   88cde:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   88ce2:	ebcc 0505 	rsb	r5, ip, r5
   88ce6:	429d      	cmp	r5, r3
   88ce8:	da10      	bge.n	88d0c <_strtol_r+0xc4>
   88cea:	f1b6 3fff 	cmp.w	r6, #4294967295
   88cee:	d00a      	beq.n	88d06 <_strtol_r+0xbe>
   88cf0:	4550      	cmp	r0, sl
   88cf2:	d806      	bhi.n	88d02 <_strtol_r+0xba>
   88cf4:	d101      	bne.n	88cfa <_strtol_r+0xb2>
   88cf6:	4545      	cmp	r5, r8
   88cf8:	dc03      	bgt.n	88d02 <_strtol_r+0xba>
   88cfa:	fb03 5000 	mla	r0, r3, r0, r5
   88cfe:	2601      	movs	r6, #1
   88d00:	e001      	b.n	88d06 <_strtol_r+0xbe>
   88d02:	f04f 36ff 	mov.w	r6, #4294967295
   88d06:	f814 5b01 	ldrb.w	r5, [r4], #1
   88d0a:	e7d3      	b.n	88cb4 <_strtol_r+0x6c>
   88d0c:	1c73      	adds	r3, r6, #1
   88d0e:	d10a      	bne.n	88d26 <_strtol_r+0xde>
   88d10:	2f00      	cmp	r7, #0
   88d12:	9901      	ldr	r1, [sp, #4]
   88d14:	bf0c      	ite	eq
   88d16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   88d1a:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   88d1e:	2322      	movs	r3, #34	; 0x22
   88d20:	600b      	str	r3, [r1, #0]
   88d22:	b922      	cbnz	r2, 88d2e <_strtol_r+0xe6>
   88d24:	e011      	b.n	88d4a <_strtol_r+0x102>
   88d26:	b107      	cbz	r7, 88d2a <_strtol_r+0xe2>
   88d28:	4240      	negs	r0, r0
   88d2a:	b172      	cbz	r2, 88d4a <_strtol_r+0x102>
   88d2c:	b106      	cbz	r6, 88d30 <_strtol_r+0xe8>
   88d2e:	1e61      	subs	r1, r4, #1
   88d30:	6011      	str	r1, [r2, #0]
   88d32:	e00a      	b.n	88d4a <_strtol_r+0x102>
   88d34:	2d58      	cmp	r5, #88	; 0x58
   88d36:	d0ae      	beq.n	88c96 <_strtol_r+0x4e>
   88d38:	2530      	movs	r5, #48	; 0x30
   88d3a:	2b00      	cmp	r3, #0
   88d3c:	d1ae      	bne.n	88c9c <_strtol_r+0x54>
   88d3e:	2308      	movs	r3, #8
   88d40:	e7ac      	b.n	88c9c <_strtol_r+0x54>
   88d42:	2d30      	cmp	r5, #48	; 0x30
   88d44:	d0a4      	beq.n	88c90 <_strtol_r+0x48>
   88d46:	230a      	movs	r3, #10
   88d48:	e7a8      	b.n	88c9c <_strtol_r+0x54>
   88d4a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88d4e:	bf00      	nop
   88d50:	20070468 	.word	0x20070468

00088d54 <strtol>:
   88d54:	b530      	push	{r4, r5, lr}
   88d56:	4613      	mov	r3, r2
   88d58:	4a04      	ldr	r2, [pc, #16]	; (88d6c <strtol+0x18>)
   88d5a:	4605      	mov	r5, r0
   88d5c:	460c      	mov	r4, r1
   88d5e:	6810      	ldr	r0, [r2, #0]
   88d60:	4629      	mov	r1, r5
   88d62:	4622      	mov	r2, r4
   88d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   88d68:	f7ff bf6e 	b.w	88c48 <_strtol_r>
   88d6c:	20070010 	.word	0x20070010

00088d70 <_strtoll_r>:
   88d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88d74:	4698      	mov	r8, r3
   88d76:	4b61      	ldr	r3, [pc, #388]	; (88efc <_strtoll_r+0x18c>)
   88d78:	b089      	sub	sp, #36	; 0x24
   88d7a:	9007      	str	r0, [sp, #28]
   88d7c:	6818      	ldr	r0, [r3, #0]
   88d7e:	9104      	str	r1, [sp, #16]
   88d80:	4694      	mov	ip, r2
   88d82:	9005      	str	r0, [sp, #20]
   88d84:	460e      	mov	r6, r1
   88d86:	f816 7b01 	ldrb.w	r7, [r6], #1
   88d8a:	9c05      	ldr	r4, [sp, #20]
   88d8c:	4631      	mov	r1, r6
   88d8e:	19e2      	adds	r2, r4, r7
   88d90:	f892 a001 	ldrb.w	sl, [r2, #1]
   88d94:	f00a 0508 	and.w	r5, sl, #8
   88d98:	b2eb      	uxtb	r3, r5
   88d9a:	2b00      	cmp	r3, #0
   88d9c:	d1f2      	bne.n	88d84 <_strtoll_r+0x14>
   88d9e:	2f2d      	cmp	r7, #45	; 0x2d
   88da0:	d104      	bne.n	88dac <_strtoll_r+0x3c>
   88da2:	f816 7b01 	ldrb.w	r7, [r6], #1
   88da6:	f04f 0a01 	mov.w	sl, #1
   88daa:	e005      	b.n	88db8 <_strtoll_r+0x48>
   88dac:	2f2b      	cmp	r7, #43	; 0x2b
   88dae:	bf04      	itt	eq
   88db0:	4636      	moveq	r6, r6
   88db2:	f816 7b01 	ldrbeq.w	r7, [r6], #1
   88db6:	469a      	mov	sl, r3
   88db8:	f1b8 0f00 	cmp.w	r8, #0
   88dbc:	f000 8092 	beq.w	88ee4 <_strtoll_r+0x174>
   88dc0:	f1b8 0f10 	cmp.w	r8, #16
   88dc4:	d108      	bne.n	88dd8 <_strtoll_r+0x68>
   88dc6:	2f30      	cmp	r7, #48	; 0x30
   88dc8:	d106      	bne.n	88dd8 <_strtoll_r+0x68>
   88dca:	7837      	ldrb	r7, [r6, #0]
   88dcc:	2f78      	cmp	r7, #120	; 0x78
   88dce:	d17e      	bne.n	88ece <_strtoll_r+0x15e>
   88dd0:	7877      	ldrb	r7, [r6, #1]
   88dd2:	f04f 0810 	mov.w	r8, #16
   88dd6:	3602      	adds	r6, #2
   88dd8:	f1ba 0f00 	cmp.w	sl, #0
   88ddc:	d003      	beq.n	88de6 <_strtoll_r+0x76>
   88dde:	2400      	movs	r4, #0
   88de0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   88de4:	e003      	b.n	88dee <_strtoll_r+0x7e>
   88de6:	f04f 34ff 	mov.w	r4, #4294967295
   88dea:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   88dee:	ea4f 7be8 	mov.w	fp, r8, asr #31
   88df2:	4620      	mov	r0, r4
   88df4:	4629      	mov	r1, r5
   88df6:	4642      	mov	r2, r8
   88df8:	465b      	mov	r3, fp
   88dfa:	f8cd c004 	str.w	ip, [sp, #4]
   88dfe:	f001 f977 	bl	8a0f0 <__aeabi_uldivmod>
   88e02:	465b      	mov	r3, fp
   88e04:	9206      	str	r2, [sp, #24]
   88e06:	4620      	mov	r0, r4
   88e08:	4642      	mov	r2, r8
   88e0a:	4629      	mov	r1, r5
   88e0c:	f001 f970 	bl	8a0f0 <__aeabi_uldivmod>
   88e10:	f8dd c004 	ldr.w	ip, [sp, #4]
   88e14:	9103      	str	r1, [sp, #12]
   88e16:	46c1      	mov	r9, r8
   88e18:	9002      	str	r0, [sp, #8]
   88e1a:	2100      	movs	r1, #0
   88e1c:	2200      	movs	r2, #0
   88e1e:	2300      	movs	r3, #0
   88e20:	9805      	ldr	r0, [sp, #20]
   88e22:	19c4      	adds	r4, r0, r7
   88e24:	7860      	ldrb	r0, [r4, #1]
   88e26:	f000 0404 	and.w	r4, r0, #4
   88e2a:	b2e4      	uxtb	r4, r4
   88e2c:	b10c      	cbz	r4, 88e32 <_strtoll_r+0xc2>
   88e2e:	3f30      	subs	r7, #48	; 0x30
   88e30:	e007      	b.n	88e42 <_strtoll_r+0xd2>
   88e32:	f010 0003 	ands.w	r0, r0, #3
   88e36:	d026      	beq.n	88e86 <_strtoll_r+0x116>
   88e38:	2801      	cmp	r0, #1
   88e3a:	bf14      	ite	ne
   88e3c:	2057      	movne	r0, #87	; 0x57
   88e3e:	2037      	moveq	r0, #55	; 0x37
   88e40:	1a3f      	subs	r7, r7, r0
   88e42:	4547      	cmp	r7, r8
   88e44:	da1f      	bge.n	88e86 <_strtoll_r+0x116>
   88e46:	1c4c      	adds	r4, r1, #1
   88e48:	d01a      	beq.n	88e80 <_strtoll_r+0x110>
   88e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   88e4e:	4299      	cmp	r1, r3
   88e50:	bf08      	it	eq
   88e52:	4290      	cmpeq	r0, r2
   88e54:	d312      	bcc.n	88e7c <_strtoll_r+0x10c>
   88e56:	428b      	cmp	r3, r1
   88e58:	bf08      	it	eq
   88e5a:	4282      	cmpeq	r2, r0
   88e5c:	d102      	bne.n	88e64 <_strtoll_r+0xf4>
   88e5e:	9906      	ldr	r1, [sp, #24]
   88e60:	428f      	cmp	r7, r1
   88e62:	dc0b      	bgt.n	88e7c <_strtoll_r+0x10c>
   88e64:	fb02 f40b 	mul.w	r4, r2, fp
   88e68:	fb09 4003 	mla	r0, r9, r3, r4
   88e6c:	fba2 2309 	umull	r2, r3, r2, r9
   88e70:	19d2      	adds	r2, r2, r7
   88e72:	4403      	add	r3, r0
   88e74:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
   88e78:	2101      	movs	r1, #1
   88e7a:	e001      	b.n	88e80 <_strtoll_r+0x110>
   88e7c:	f04f 31ff 	mov.w	r1, #4294967295
   88e80:	f816 7b01 	ldrb.w	r7, [r6], #1
   88e84:	e7cc      	b.n	88e20 <_strtoll_r+0xb0>
   88e86:	1c48      	adds	r0, r1, #1
   88e88:	d111      	bne.n	88eae <_strtoll_r+0x13e>
   88e8a:	f1ba 0f00 	cmp.w	sl, #0
   88e8e:	d003      	beq.n	88e98 <_strtoll_r+0x128>
   88e90:	2200      	movs	r2, #0
   88e92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   88e96:	e003      	b.n	88ea0 <_strtoll_r+0x130>
   88e98:	f04f 32ff 	mov.w	r2, #4294967295
   88e9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   88ea0:	9c07      	ldr	r4, [sp, #28]
   88ea2:	2022      	movs	r0, #34	; 0x22
   88ea4:	6020      	str	r0, [r4, #0]
   88ea6:	f1bc 0f00 	cmp.w	ip, #0
   88eaa:	d10a      	bne.n	88ec2 <_strtoll_r+0x152>
   88eac:	e020      	b.n	88ef0 <_strtoll_r+0x180>
   88eae:	f1ba 0f00 	cmp.w	sl, #0
   88eb2:	d002      	beq.n	88eba <_strtoll_r+0x14a>
   88eb4:	4252      	negs	r2, r2
   88eb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   88eba:	f1bc 0f00 	cmp.w	ip, #0
   88ebe:	d017      	beq.n	88ef0 <_strtoll_r+0x180>
   88ec0:	b109      	cbz	r1, 88ec6 <_strtoll_r+0x156>
   88ec2:	3e01      	subs	r6, #1
   88ec4:	9604      	str	r6, [sp, #16]
   88ec6:	9c04      	ldr	r4, [sp, #16]
   88ec8:	f8cc 4000 	str.w	r4, [ip]
   88ecc:	e010      	b.n	88ef0 <_strtoll_r+0x180>
   88ece:	2f58      	cmp	r7, #88	; 0x58
   88ed0:	f43f af7e 	beq.w	88dd0 <_strtoll_r+0x60>
   88ed4:	2730      	movs	r7, #48	; 0x30
   88ed6:	f1b8 0f00 	cmp.w	r8, #0
   88eda:	f47f af7d 	bne.w	88dd8 <_strtoll_r+0x68>
   88ede:	f04f 0808 	mov.w	r8, #8
   88ee2:	e779      	b.n	88dd8 <_strtoll_r+0x68>
   88ee4:	2f30      	cmp	r7, #48	; 0x30
   88ee6:	f43f af70 	beq.w	88dca <_strtoll_r+0x5a>
   88eea:	f04f 080a 	mov.w	r8, #10
   88eee:	e773      	b.n	88dd8 <_strtoll_r+0x68>
   88ef0:	4610      	mov	r0, r2
   88ef2:	4619      	mov	r1, r3
   88ef4:	b009      	add	sp, #36	; 0x24
   88ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88efa:	bf00      	nop
   88efc:	20070468 	.word	0x20070468

00088f00 <_strtoul_r>:
   88f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88f04:	9001      	str	r0, [sp, #4]
   88f06:	483c      	ldr	r0, [pc, #240]	; (88ff8 <_strtoul_r+0xf8>)
   88f08:	f8d0 9000 	ldr.w	r9, [r0]
   88f0c:	4608      	mov	r0, r1
   88f0e:	4604      	mov	r4, r0
   88f10:	f814 5b01 	ldrb.w	r5, [r4], #1
   88f14:	eb09 0605 	add.w	r6, r9, r5
   88f18:	7877      	ldrb	r7, [r6, #1]
   88f1a:	4620      	mov	r0, r4
   88f1c:	f007 0608 	and.w	r6, r7, #8
   88f20:	b2f7      	uxtb	r7, r6
   88f22:	2f00      	cmp	r7, #0
   88f24:	d1f3      	bne.n	88f0e <_strtoul_r+0xe>
   88f26:	2d2d      	cmp	r5, #45	; 0x2d
   88f28:	d103      	bne.n	88f32 <_strtoul_r+0x32>
   88f2a:	f814 5b01 	ldrb.w	r5, [r4], #1
   88f2e:	2701      	movs	r7, #1
   88f30:	e004      	b.n	88f3c <_strtoul_r+0x3c>
   88f32:	2d2b      	cmp	r5, #43	; 0x2b
   88f34:	bf04      	itt	eq
   88f36:	4624      	moveq	r4, r4
   88f38:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   88f3c:	2b00      	cmp	r3, #0
   88f3e:	d055      	beq.n	88fec <_strtoul_r+0xec>
   88f40:	2b10      	cmp	r3, #16
   88f42:	d107      	bne.n	88f54 <_strtoul_r+0x54>
   88f44:	2d30      	cmp	r5, #48	; 0x30
   88f46:	d105      	bne.n	88f54 <_strtoul_r+0x54>
   88f48:	7825      	ldrb	r5, [r4, #0]
   88f4a:	2d78      	cmp	r5, #120	; 0x78
   88f4c:	d147      	bne.n	88fde <_strtoul_r+0xde>
   88f4e:	7865      	ldrb	r5, [r4, #1]
   88f50:	2310      	movs	r3, #16
   88f52:	3402      	adds	r4, #2
   88f54:	f04f 3aff 	mov.w	sl, #4294967295
   88f58:	fbba faf3 	udiv	sl, sl, r3
   88f5c:	fb03 f00a 	mul.w	r0, r3, sl
   88f60:	2600      	movs	r6, #0
   88f62:	ea6f 0800 	mvn.w	r8, r0
   88f66:	4630      	mov	r0, r6
   88f68:	eb09 0c05 	add.w	ip, r9, r5
   88f6c:	f89c c001 	ldrb.w	ip, [ip, #1]
   88f70:	f00c 0b04 	and.w	fp, ip, #4
   88f74:	fa5f fb8b 	uxtb.w	fp, fp
   88f78:	f1bb 0f00 	cmp.w	fp, #0
   88f7c:	d001      	beq.n	88f82 <_strtoul_r+0x82>
   88f7e:	3d30      	subs	r5, #48	; 0x30
   88f80:	e00b      	b.n	88f9a <_strtoul_r+0x9a>
   88f82:	f01c 0c03 	ands.w	ip, ip, #3
   88f86:	d01b      	beq.n	88fc0 <_strtoul_r+0xc0>
   88f88:	f1bc 0f01 	cmp.w	ip, #1
   88f8c:	bf14      	ite	ne
   88f8e:	f04f 0c57 	movne.w	ip, #87	; 0x57
   88f92:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   88f96:	ebcc 0505 	rsb	r5, ip, r5
   88f9a:	429d      	cmp	r5, r3
   88f9c:	da10      	bge.n	88fc0 <_strtoul_r+0xc0>
   88f9e:	f1b6 3fff 	cmp.w	r6, #4294967295
   88fa2:	d00a      	beq.n	88fba <_strtoul_r+0xba>
   88fa4:	4550      	cmp	r0, sl
   88fa6:	d806      	bhi.n	88fb6 <_strtoul_r+0xb6>
   88fa8:	d101      	bne.n	88fae <_strtoul_r+0xae>
   88faa:	4545      	cmp	r5, r8
   88fac:	dc03      	bgt.n	88fb6 <_strtoul_r+0xb6>
   88fae:	fb03 5000 	mla	r0, r3, r0, r5
   88fb2:	2601      	movs	r6, #1
   88fb4:	e001      	b.n	88fba <_strtoul_r+0xba>
   88fb6:	f04f 36ff 	mov.w	r6, #4294967295
   88fba:	f814 5b01 	ldrb.w	r5, [r4], #1
   88fbe:	e7d3      	b.n	88f68 <_strtoul_r+0x68>
   88fc0:	1c73      	adds	r3, r6, #1
   88fc2:	d105      	bne.n	88fd0 <_strtoul_r+0xd0>
   88fc4:	9901      	ldr	r1, [sp, #4]
   88fc6:	2322      	movs	r3, #34	; 0x22
   88fc8:	600b      	str	r3, [r1, #0]
   88fca:	4630      	mov	r0, r6
   88fcc:	b922      	cbnz	r2, 88fd8 <_strtoul_r+0xd8>
   88fce:	e011      	b.n	88ff4 <_strtoul_r+0xf4>
   88fd0:	b107      	cbz	r7, 88fd4 <_strtoul_r+0xd4>
   88fd2:	4240      	negs	r0, r0
   88fd4:	b172      	cbz	r2, 88ff4 <_strtoul_r+0xf4>
   88fd6:	b106      	cbz	r6, 88fda <_strtoul_r+0xda>
   88fd8:	1e61      	subs	r1, r4, #1
   88fda:	6011      	str	r1, [r2, #0]
   88fdc:	e00a      	b.n	88ff4 <_strtoul_r+0xf4>
   88fde:	2d58      	cmp	r5, #88	; 0x58
   88fe0:	d0b5      	beq.n	88f4e <_strtoul_r+0x4e>
   88fe2:	2530      	movs	r5, #48	; 0x30
   88fe4:	2b00      	cmp	r3, #0
   88fe6:	d1b5      	bne.n	88f54 <_strtoul_r+0x54>
   88fe8:	2308      	movs	r3, #8
   88fea:	e7b3      	b.n	88f54 <_strtoul_r+0x54>
   88fec:	2d30      	cmp	r5, #48	; 0x30
   88fee:	d0ab      	beq.n	88f48 <_strtoul_r+0x48>
   88ff0:	230a      	movs	r3, #10
   88ff2:	e7af      	b.n	88f54 <_strtoul_r+0x54>
   88ff4:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88ff8:	20070468 	.word	0x20070468

00088ffc <strtoul>:
   88ffc:	b530      	push	{r4, r5, lr}
   88ffe:	4613      	mov	r3, r2
   89000:	4a04      	ldr	r2, [pc, #16]	; (89014 <strtoul+0x18>)
   89002:	4605      	mov	r5, r0
   89004:	460c      	mov	r4, r1
   89006:	6810      	ldr	r0, [r2, #0]
   89008:	4629      	mov	r1, r5
   8900a:	4622      	mov	r2, r4
   8900c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   89010:	f7ff bf76 	b.w	88f00 <_strtoul_r>
   89014:	20070010 	.word	0x20070010

00089018 <_strtoull_r>:
   89018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8901c:	461e      	mov	r6, r3
   8901e:	4b55      	ldr	r3, [pc, #340]	; (89174 <_strtoull_r+0x15c>)
   89020:	b087      	sub	sp, #28
   89022:	9005      	str	r0, [sp, #20]
   89024:	6818      	ldr	r0, [r3, #0]
   89026:	468a      	mov	sl, r1
   89028:	4693      	mov	fp, r2
   8902a:	9003      	str	r0, [sp, #12]
   8902c:	460c      	mov	r4, r1
   8902e:	f814 5b01 	ldrb.w	r5, [r4], #1
   89032:	9a03      	ldr	r2, [sp, #12]
   89034:	4621      	mov	r1, r4
   89036:	1957      	adds	r7, r2, r5
   89038:	f897 9001 	ldrb.w	r9, [r7, #1]
   8903c:	f009 0308 	and.w	r3, r9, #8
   89040:	b2d8      	uxtb	r0, r3
   89042:	2800      	cmp	r0, #0
   89044:	d1f2      	bne.n	8902c <_strtoull_r+0x14>
   89046:	2d2d      	cmp	r5, #45	; 0x2d
   89048:	d104      	bne.n	89054 <_strtoull_r+0x3c>
   8904a:	f814 5b01 	ldrb.w	r5, [r4], #1
   8904e:	f04f 0901 	mov.w	r9, #1
   89052:	e005      	b.n	89060 <_strtoull_r+0x48>
   89054:	2d2b      	cmp	r5, #43	; 0x2b
   89056:	bf04      	itt	eq
   89058:	4624      	moveq	r4, r4
   8905a:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   8905e:	4681      	mov	r9, r0
   89060:	2e00      	cmp	r6, #0
   89062:	d07d      	beq.n	89160 <_strtoull_r+0x148>
   89064:	2e10      	cmp	r6, #16
   89066:	d107      	bne.n	89078 <_strtoull_r+0x60>
   89068:	2d30      	cmp	r5, #48	; 0x30
   8906a:	d105      	bne.n	89078 <_strtoull_r+0x60>
   8906c:	7825      	ldrb	r5, [r4, #0]
   8906e:	2d78      	cmp	r5, #120	; 0x78
   89070:	d16f      	bne.n	89152 <_strtoull_r+0x13a>
   89072:	7865      	ldrb	r5, [r4, #1]
   89074:	2610      	movs	r6, #16
   89076:	3402      	adds	r4, #2
   89078:	ea4f 78e6 	mov.w	r8, r6, asr #31
   8907c:	4632      	mov	r2, r6
   8907e:	4643      	mov	r3, r8
   89080:	f04f 30ff 	mov.w	r0, #4294967295
   89084:	f04f 31ff 	mov.w	r1, #4294967295
   89088:	f001 f832 	bl	8a0f0 <__aeabi_uldivmod>
   8908c:	4632      	mov	r2, r6
   8908e:	e88d 0003 	stmia.w	sp, {r0, r1}
   89092:	4643      	mov	r3, r8
   89094:	f04f 30ff 	mov.w	r0, #4294967295
   89098:	f04f 31ff 	mov.w	r1, #4294967295
   8909c:	f001 f828 	bl	8a0f0 <__aeabi_uldivmod>
   890a0:	4637      	mov	r7, r6
   890a2:	9204      	str	r2, [sp, #16]
   890a4:	2100      	movs	r1, #0
   890a6:	2200      	movs	r2, #0
   890a8:	2300      	movs	r3, #0
   890aa:	9803      	ldr	r0, [sp, #12]
   890ac:	eb00 0c05 	add.w	ip, r0, r5
   890b0:	f89c 0001 	ldrb.w	r0, [ip, #1]
   890b4:	f000 0e04 	and.w	lr, r0, #4
   890b8:	fa5f fc8e 	uxtb.w	ip, lr
   890bc:	f1bc 0f00 	cmp.w	ip, #0
   890c0:	d001      	beq.n	890c6 <_strtoull_r+0xae>
   890c2:	3d30      	subs	r5, #48	; 0x30
   890c4:	e007      	b.n	890d6 <_strtoull_r+0xbe>
   890c6:	f010 0003 	ands.w	r0, r0, #3
   890ca:	d026      	beq.n	8911a <_strtoull_r+0x102>
   890cc:	2801      	cmp	r0, #1
   890ce:	bf14      	ite	ne
   890d0:	2057      	movne	r0, #87	; 0x57
   890d2:	2037      	moveq	r0, #55	; 0x37
   890d4:	1a2d      	subs	r5, r5, r0
   890d6:	42b5      	cmp	r5, r6
   890d8:	da1f      	bge.n	8911a <_strtoull_r+0x102>
   890da:	1c48      	adds	r0, r1, #1
   890dc:	d01a      	beq.n	89114 <_strtoull_r+0xfc>
   890de:	e9dd 0100 	ldrd	r0, r1, [sp]
   890e2:	4299      	cmp	r1, r3
   890e4:	bf08      	it	eq
   890e6:	4290      	cmpeq	r0, r2
   890e8:	d312      	bcc.n	89110 <_strtoull_r+0xf8>
   890ea:	428b      	cmp	r3, r1
   890ec:	bf08      	it	eq
   890ee:	4282      	cmpeq	r2, r0
   890f0:	d102      	bne.n	890f8 <_strtoull_r+0xe0>
   890f2:	9904      	ldr	r1, [sp, #16]
   890f4:	428d      	cmp	r5, r1
   890f6:	dc0b      	bgt.n	89110 <_strtoull_r+0xf8>
   890f8:	fb02 f008 	mul.w	r0, r2, r8
   890fc:	fb07 0103 	mla	r1, r7, r3, r0
   89100:	fba2 2307 	umull	r2, r3, r2, r7
   89104:	18cb      	adds	r3, r1, r3
   89106:	1952      	adds	r2, r2, r5
   89108:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   8910c:	2101      	movs	r1, #1
   8910e:	e001      	b.n	89114 <_strtoull_r+0xfc>
   89110:	f04f 31ff 	mov.w	r1, #4294967295
   89114:	f814 5b01 	ldrb.w	r5, [r4], #1
   89118:	e7c7      	b.n	890aa <_strtoull_r+0x92>
   8911a:	1c48      	adds	r0, r1, #1
   8911c:	d10a      	bne.n	89134 <_strtoull_r+0x11c>
   8911e:	9a05      	ldr	r2, [sp, #20]
   89120:	2022      	movs	r0, #34	; 0x22
   89122:	6010      	str	r0, [r2, #0]
   89124:	f04f 33ff 	mov.w	r3, #4294967295
   89128:	f04f 32ff 	mov.w	r2, #4294967295
   8912c:	f1bb 0f00 	cmp.w	fp, #0
   89130:	d10a      	bne.n	89148 <_strtoull_r+0x130>
   89132:	e019      	b.n	89168 <_strtoull_r+0x150>
   89134:	f1b9 0f00 	cmp.w	r9, #0
   89138:	d002      	beq.n	89140 <_strtoull_r+0x128>
   8913a:	4252      	negs	r2, r2
   8913c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   89140:	f1bb 0f00 	cmp.w	fp, #0
   89144:	d010      	beq.n	89168 <_strtoull_r+0x150>
   89146:	b109      	cbz	r1, 8914c <_strtoull_r+0x134>
   89148:	f104 3aff 	add.w	sl, r4, #4294967295
   8914c:	f8cb a000 	str.w	sl, [fp]
   89150:	e00a      	b.n	89168 <_strtoull_r+0x150>
   89152:	2d58      	cmp	r5, #88	; 0x58
   89154:	d08d      	beq.n	89072 <_strtoull_r+0x5a>
   89156:	2530      	movs	r5, #48	; 0x30
   89158:	2e00      	cmp	r6, #0
   8915a:	d18d      	bne.n	89078 <_strtoull_r+0x60>
   8915c:	2608      	movs	r6, #8
   8915e:	e78b      	b.n	89078 <_strtoull_r+0x60>
   89160:	2d30      	cmp	r5, #48	; 0x30
   89162:	d083      	beq.n	8906c <_strtoull_r+0x54>
   89164:	260a      	movs	r6, #10
   89166:	e787      	b.n	89078 <_strtoull_r+0x60>
   89168:	4610      	mov	r0, r2
   8916a:	4619      	mov	r1, r3
   8916c:	b007      	add	sp, #28
   8916e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89172:	bf00      	nop
   89174:	20070468 	.word	0x20070468

00089178 <__ssprint_r>:
   89178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8917c:	4607      	mov	r7, r0
   8917e:	6890      	ldr	r0, [r2, #8]
   89180:	460c      	mov	r4, r1
   89182:	4615      	mov	r5, r2
   89184:	f8d2 8000 	ldr.w	r8, [r2]
   89188:	b908      	cbnz	r0, 8918e <__ssprint_r+0x16>
   8918a:	6050      	str	r0, [r2, #4]
   8918c:	e06f      	b.n	8926e <__ssprint_r+0xf6>
   8918e:	f04f 0b00 	mov.w	fp, #0
   89192:	465e      	mov	r6, fp
   89194:	b936      	cbnz	r6, 891a4 <__ssprint_r+0x2c>
   89196:	f8d8 b000 	ldr.w	fp, [r8]
   8919a:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8919e:	f108 0808 	add.w	r8, r8, #8
   891a2:	e7f7      	b.n	89194 <__ssprint_r+0x1c>
   891a4:	68a3      	ldr	r3, [r4, #8]
   891a6:	429e      	cmp	r6, r3
   891a8:	d34c      	bcc.n	89244 <__ssprint_r+0xcc>
   891aa:	89a2      	ldrh	r2, [r4, #12]
   891ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
   891b0:	d046      	beq.n	89240 <__ssprint_r+0xc8>
   891b2:	6823      	ldr	r3, [r4, #0]
   891b4:	6960      	ldr	r0, [r4, #20]
   891b6:	6921      	ldr	r1, [r4, #16]
   891b8:	f04f 0a03 	mov.w	sl, #3
   891bc:	ebc1 0903 	rsb	r9, r1, r3
   891c0:	fb0a f300 	mul.w	r3, sl, r0
   891c4:	2002      	movs	r0, #2
   891c6:	fb93 faf0 	sdiv	sl, r3, r0
   891ca:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   891ce:	f109 0301 	add.w	r3, r9, #1
   891d2:	1998      	adds	r0, r3, r6
   891d4:	b213      	sxth	r3, r2
   891d6:	4582      	cmp	sl, r0
   891d8:	bf38      	it	cc
   891da:	4682      	movcc	sl, r0
   891dc:	4638      	mov	r0, r7
   891de:	b183      	cbz	r3, 89202 <__ssprint_r+0x8a>
   891e0:	4651      	mov	r1, sl
   891e2:	f7fe fbfd 	bl	879e0 <_malloc_r>
   891e6:	b1a8      	cbz	r0, 89214 <__ssprint_r+0x9c>
   891e8:	6921      	ldr	r1, [r4, #16]
   891ea:	464a      	mov	r2, r9
   891ec:	9001      	str	r0, [sp, #4]
   891ee:	f7fa fecf 	bl	83f90 <memcpy>
   891f2:	89a0      	ldrh	r0, [r4, #12]
   891f4:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   891f8:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   891fc:	81a1      	strh	r1, [r4, #12]
   891fe:	9901      	ldr	r1, [sp, #4]
   89200:	e014      	b.n	8922c <__ssprint_r+0xb4>
   89202:	4652      	mov	r2, sl
   89204:	f7ff fa68 	bl	886d8 <_realloc_r>
   89208:	4601      	mov	r1, r0
   8920a:	b978      	cbnz	r0, 8922c <__ssprint_r+0xb4>
   8920c:	4638      	mov	r0, r7
   8920e:	6921      	ldr	r1, [r4, #16]
   89210:	f7fd fd88 	bl	86d24 <_free_r>
   89214:	89a3      	ldrh	r3, [r4, #12]
   89216:	200c      	movs	r0, #12
   89218:	2100      	movs	r1, #0
   8921a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8921e:	6038      	str	r0, [r7, #0]
   89220:	81a2      	strh	r2, [r4, #12]
   89222:	f04f 30ff 	mov.w	r0, #4294967295
   89226:	60a9      	str	r1, [r5, #8]
   89228:	6069      	str	r1, [r5, #4]
   8922a:	e020      	b.n	8926e <__ssprint_r+0xf6>
   8922c:	eb01 0309 	add.w	r3, r1, r9
   89230:	ebc9 000a 	rsb	r0, r9, sl
   89234:	6023      	str	r3, [r4, #0]
   89236:	6121      	str	r1, [r4, #16]
   89238:	f8c4 a014 	str.w	sl, [r4, #20]
   8923c:	4633      	mov	r3, r6
   8923e:	60a0      	str	r0, [r4, #8]
   89240:	429e      	cmp	r6, r3
   89242:	d200      	bcs.n	89246 <__ssprint_r+0xce>
   89244:	4633      	mov	r3, r6
   89246:	461a      	mov	r2, r3
   89248:	4659      	mov	r1, fp
   8924a:	6820      	ldr	r0, [r4, #0]
   8924c:	9301      	str	r3, [sp, #4]
   8924e:	f7fe fe37 	bl	87ec0 <memmove>
   89252:	68a2      	ldr	r2, [r4, #8]
   89254:	9901      	ldr	r1, [sp, #4]
   89256:	6823      	ldr	r3, [r4, #0]
   89258:	1a50      	subs	r0, r2, r1
   8925a:	185a      	adds	r2, r3, r1
   8925c:	68a9      	ldr	r1, [r5, #8]
   8925e:	60a0      	str	r0, [r4, #8]
   89260:	1b8e      	subs	r6, r1, r6
   89262:	6022      	str	r2, [r4, #0]
   89264:	60ae      	str	r6, [r5, #8]
   89266:	2e00      	cmp	r6, #0
   89268:	d195      	bne.n	89196 <__ssprint_r+0x1e>
   8926a:	606e      	str	r6, [r5, #4]
   8926c:	4630      	mov	r0, r6
   8926e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00089272 <_svfiprintf_r>:
   89272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89276:	461e      	mov	r6, r3
   89278:	898b      	ldrh	r3, [r1, #12]
   8927a:	4689      	mov	r9, r1
   8927c:	f003 0180 	and.w	r1, r3, #128	; 0x80
   89280:	4614      	mov	r4, r2
   89282:	b20a      	sxth	r2, r1
   89284:	b0a9      	sub	sp, #164	; 0xa4
   89286:	4683      	mov	fp, r0
   89288:	b19a      	cbz	r2, 892b2 <_svfiprintf_r+0x40>
   8928a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8928e:	b983      	cbnz	r3, 892b2 <_svfiprintf_r+0x40>
   89290:	2140      	movs	r1, #64	; 0x40
   89292:	f7fe fba5 	bl	879e0 <_malloc_r>
   89296:	f8c9 0000 	str.w	r0, [r9]
   8929a:	f8c9 0010 	str.w	r0, [r9, #16]
   8929e:	b928      	cbnz	r0, 892ac <_svfiprintf_r+0x3a>
   892a0:	220c      	movs	r2, #12
   892a2:	f8cb 2000 	str.w	r2, [fp]
   892a6:	f04f 30ff 	mov.w	r0, #4294967295
   892aa:	e3db      	b.n	89a64 <_svfiprintf_r+0x7f2>
   892ac:	2040      	movs	r0, #64	; 0x40
   892ae:	f8c9 0014 	str.w	r0, [r9, #20]
   892b2:	2100      	movs	r1, #0
   892b4:	ad18      	add	r5, sp, #96	; 0x60
   892b6:	950b      	str	r5, [sp, #44]	; 0x2c
   892b8:	910d      	str	r1, [sp, #52]	; 0x34
   892ba:	910c      	str	r1, [sp, #48]	; 0x30
   892bc:	9401      	str	r4, [sp, #4]
   892be:	9105      	str	r1, [sp, #20]
   892c0:	9104      	str	r1, [sp, #16]
   892c2:	46a8      	mov	r8, r5
   892c4:	9b01      	ldr	r3, [sp, #4]
   892c6:	461c      	mov	r4, r3
   892c8:	f813 2b01 	ldrb.w	r2, [r3], #1
   892cc:	b91a      	cbnz	r2, 892d6 <_svfiprintf_r+0x64>
   892ce:	9801      	ldr	r0, [sp, #4]
   892d0:	1a25      	subs	r5, r4, r0
   892d2:	d103      	bne.n	892dc <_svfiprintf_r+0x6a>
   892d4:	e01d      	b.n	89312 <_svfiprintf_r+0xa0>
   892d6:	2a25      	cmp	r2, #37	; 0x25
   892d8:	d1f5      	bne.n	892c6 <_svfiprintf_r+0x54>
   892da:	e7f8      	b.n	892ce <_svfiprintf_r+0x5c>
   892dc:	9a01      	ldr	r2, [sp, #4]
   892de:	990d      	ldr	r1, [sp, #52]	; 0x34
   892e0:	e888 0024 	stmia.w	r8, {r2, r5}
   892e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   892e6:	194b      	adds	r3, r1, r5
   892e8:	1c50      	adds	r0, r2, #1
   892ea:	2807      	cmp	r0, #7
   892ec:	930d      	str	r3, [sp, #52]	; 0x34
   892ee:	900c      	str	r0, [sp, #48]	; 0x30
   892f0:	dc02      	bgt.n	892f8 <_svfiprintf_r+0x86>
   892f2:	f108 0808 	add.w	r8, r8, #8
   892f6:	e009      	b.n	8930c <_svfiprintf_r+0x9a>
   892f8:	4658      	mov	r0, fp
   892fa:	4649      	mov	r1, r9
   892fc:	aa0b      	add	r2, sp, #44	; 0x2c
   892fe:	f7ff ff3b 	bl	89178 <__ssprint_r>
   89302:	2800      	cmp	r0, #0
   89304:	f040 83a3 	bne.w	89a4e <_svfiprintf_r+0x7dc>
   89308:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8930c:	9904      	ldr	r1, [sp, #16]
   8930e:	194b      	adds	r3, r1, r5
   89310:	9304      	str	r3, [sp, #16]
   89312:	7822      	ldrb	r2, [r4, #0]
   89314:	2a00      	cmp	r2, #0
   89316:	f000 8393 	beq.w	89a40 <_svfiprintf_r+0x7ce>
   8931a:	2200      	movs	r2, #0
   8931c:	3401      	adds	r4, #1
   8931e:	9401      	str	r4, [sp, #4]
   89320:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89324:	f04f 3cff 	mov.w	ip, #4294967295
   89328:	9203      	str	r2, [sp, #12]
   8932a:	4617      	mov	r7, r2
   8932c:	9801      	ldr	r0, [sp, #4]
   8932e:	f810 3b01 	ldrb.w	r3, [r0], #1
   89332:	9001      	str	r0, [sp, #4]
   89334:	2b63      	cmp	r3, #99	; 0x63
   89336:	f000 80b3 	beq.w	894a0 <_svfiprintf_r+0x22e>
   8933a:	dc33      	bgt.n	893a4 <_svfiprintf_r+0x132>
   8933c:	2b39      	cmp	r3, #57	; 0x39
   8933e:	dc1a      	bgt.n	89376 <_svfiprintf_r+0x104>
   89340:	2b31      	cmp	r3, #49	; 0x31
   89342:	f280 8091 	bge.w	89468 <_svfiprintf_r+0x1f6>
   89346:	2b2b      	cmp	r3, #43	; 0x2b
   89348:	d101      	bne.n	8934e <_svfiprintf_r+0xdc>
   8934a:	461a      	mov	r2, r3
   8934c:	e7ee      	b.n	8932c <_svfiprintf_r+0xba>
   8934e:	dc0a      	bgt.n	89366 <_svfiprintf_r+0xf4>
   89350:	2b23      	cmp	r3, #35	; 0x23
   89352:	d055      	beq.n	89400 <_svfiprintf_r+0x18e>
   89354:	2b2a      	cmp	r3, #42	; 0x2a
   89356:	d056      	beq.n	89406 <_svfiprintf_r+0x194>
   89358:	2b20      	cmp	r3, #32
   8935a:	f040 81f6 	bne.w	8974a <_svfiprintf_r+0x4d8>
   8935e:	2a00      	cmp	r2, #0
   89360:	bf08      	it	eq
   89362:	2220      	moveq	r2, #32
   89364:	e7e2      	b.n	8932c <_svfiprintf_r+0xba>
   89366:	2b2e      	cmp	r3, #46	; 0x2e
   89368:	d058      	beq.n	8941c <_svfiprintf_r+0x1aa>
   8936a:	2b30      	cmp	r3, #48	; 0x30
   8936c:	d079      	beq.n	89462 <_svfiprintf_r+0x1f0>
   8936e:	2b2d      	cmp	r3, #45	; 0x2d
   89370:	f040 81eb 	bne.w	8974a <_svfiprintf_r+0x4d8>
   89374:	e04f      	b.n	89416 <_svfiprintf_r+0x1a4>
   89376:	2b4f      	cmp	r3, #79	; 0x4f
   89378:	f000 80de 	beq.w	89538 <_svfiprintf_r+0x2c6>
   8937c:	dc07      	bgt.n	8938e <_svfiprintf_r+0x11c>
   8937e:	2b44      	cmp	r3, #68	; 0x44
   89380:	f040 81e3 	bne.w	8974a <_svfiprintf_r+0x4d8>
   89384:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89388:	f047 0710 	orr.w	r7, r7, #16
   8938c:	e090      	b.n	894b0 <_svfiprintf_r+0x23e>
   8938e:	2b55      	cmp	r3, #85	; 0x55
   89390:	f000 811f 	beq.w	895d2 <_svfiprintf_r+0x360>
   89394:	2b58      	cmp	r3, #88	; 0x58
   89396:	f040 81d8 	bne.w	8974a <_svfiprintf_r+0x4d8>
   8939a:	4daf      	ldr	r5, [pc, #700]	; (89658 <_svfiprintf_r+0x3e6>)
   8939c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   893a0:	9505      	str	r5, [sp, #20]
   893a2:	e130      	b.n	89606 <_svfiprintf_r+0x394>
   893a4:	2b6f      	cmp	r3, #111	; 0x6f
   893a6:	f000 80c9 	beq.w	8953c <_svfiprintf_r+0x2ca>
   893aa:	dc10      	bgt.n	893ce <_svfiprintf_r+0x15c>
   893ac:	2b69      	cmp	r3, #105	; 0x69
   893ae:	d024      	beq.n	893fa <_svfiprintf_r+0x188>
   893b0:	dc07      	bgt.n	893c2 <_svfiprintf_r+0x150>
   893b2:	2b64      	cmp	r3, #100	; 0x64
   893b4:	d021      	beq.n	893fa <_svfiprintf_r+0x188>
   893b6:	2b68      	cmp	r3, #104	; 0x68
   893b8:	f040 81c7 	bne.w	8974a <_svfiprintf_r+0x4d8>
   893bc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   893c0:	e7b4      	b.n	8932c <_svfiprintf_r+0xba>
   893c2:	2b6c      	cmp	r3, #108	; 0x6c
   893c4:	d05f      	beq.n	89486 <_svfiprintf_r+0x214>
   893c6:	2b6e      	cmp	r3, #110	; 0x6e
   893c8:	f040 81bf 	bne.w	8974a <_svfiprintf_r+0x4d8>
   893cc:	e096      	b.n	894fc <_svfiprintf_r+0x28a>
   893ce:	2b73      	cmp	r3, #115	; 0x73
   893d0:	f000 80df 	beq.w	89592 <_svfiprintf_r+0x320>
   893d4:	dc06      	bgt.n	893e4 <_svfiprintf_r+0x172>
   893d6:	2b70      	cmp	r3, #112	; 0x70
   893d8:	f000 80cd 	beq.w	89576 <_svfiprintf_r+0x304>
   893dc:	2b71      	cmp	r3, #113	; 0x71
   893de:	f040 81b4 	bne.w	8974a <_svfiprintf_r+0x4d8>
   893e2:	e05a      	b.n	8949a <_svfiprintf_r+0x228>
   893e4:	2b75      	cmp	r3, #117	; 0x75
   893e6:	f000 80f6 	beq.w	895d6 <_svfiprintf_r+0x364>
   893ea:	2b78      	cmp	r3, #120	; 0x78
   893ec:	f040 81ad 	bne.w	8974a <_svfiprintf_r+0x4d8>
   893f0:	4d9a      	ldr	r5, [pc, #616]	; (8965c <_svfiprintf_r+0x3ea>)
   893f2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   893f6:	9505      	str	r5, [sp, #20]
   893f8:	e105      	b.n	89606 <_svfiprintf_r+0x394>
   893fa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   893fe:	e057      	b.n	894b0 <_svfiprintf_r+0x23e>
   89400:	f047 0701 	orr.w	r7, r7, #1
   89404:	e792      	b.n	8932c <_svfiprintf_r+0xba>
   89406:	1d33      	adds	r3, r6, #4
   89408:	6836      	ldr	r6, [r6, #0]
   8940a:	2e00      	cmp	r6, #0
   8940c:	9603      	str	r6, [sp, #12]
   8940e:	da15      	bge.n	8943c <_svfiprintf_r+0x1ca>
   89410:	4270      	negs	r0, r6
   89412:	9003      	str	r0, [sp, #12]
   89414:	461e      	mov	r6, r3
   89416:	f047 0704 	orr.w	r7, r7, #4
   8941a:	e787      	b.n	8932c <_svfiprintf_r+0xba>
   8941c:	9901      	ldr	r1, [sp, #4]
   8941e:	f811 3b01 	ldrb.w	r3, [r1], #1
   89422:	2b2a      	cmp	r3, #42	; 0x2a
   89424:	9101      	str	r1, [sp, #4]
   89426:	d10b      	bne.n	89440 <_svfiprintf_r+0x1ce>
   89428:	f8d6 c000 	ldr.w	ip, [r6]
   8942c:	1d33      	adds	r3, r6, #4
   8942e:	f1bc 0f00 	cmp.w	ip, #0
   89432:	da03      	bge.n	8943c <_svfiprintf_r+0x1ca>
   89434:	461e      	mov	r6, r3
   89436:	f04f 3cff 	mov.w	ip, #4294967295
   8943a:	e777      	b.n	8932c <_svfiprintf_r+0xba>
   8943c:	461e      	mov	r6, r3
   8943e:	e775      	b.n	8932c <_svfiprintf_r+0xba>
   89440:	f04f 0c00 	mov.w	ip, #0
   89444:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   89448:	2809      	cmp	r0, #9
   8944a:	d807      	bhi.n	8945c <_svfiprintf_r+0x1ea>
   8944c:	9901      	ldr	r1, [sp, #4]
   8944e:	230a      	movs	r3, #10
   89450:	fb03 0c0c 	mla	ip, r3, ip, r0
   89454:	f811 3b01 	ldrb.w	r3, [r1], #1
   89458:	9101      	str	r1, [sp, #4]
   8945a:	e7f3      	b.n	89444 <_svfiprintf_r+0x1d2>
   8945c:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   89460:	e768      	b.n	89334 <_svfiprintf_r+0xc2>
   89462:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   89466:	e761      	b.n	8932c <_svfiprintf_r+0xba>
   89468:	9801      	ldr	r0, [sp, #4]
   8946a:	2100      	movs	r1, #0
   8946c:	3b30      	subs	r3, #48	; 0x30
   8946e:	240a      	movs	r4, #10
   89470:	fb04 3101 	mla	r1, r4, r1, r3
   89474:	f810 3b01 	ldrb.w	r3, [r0], #1
   89478:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8947c:	2c09      	cmp	r4, #9
   8947e:	9001      	str	r0, [sp, #4]
   89480:	d9f4      	bls.n	8946c <_svfiprintf_r+0x1fa>
   89482:	9103      	str	r1, [sp, #12]
   89484:	e756      	b.n	89334 <_svfiprintf_r+0xc2>
   89486:	9901      	ldr	r1, [sp, #4]
   89488:	780b      	ldrb	r3, [r1, #0]
   8948a:	2b6c      	cmp	r3, #108	; 0x6c
   8948c:	d102      	bne.n	89494 <_svfiprintf_r+0x222>
   8948e:	1c48      	adds	r0, r1, #1
   89490:	9001      	str	r0, [sp, #4]
   89492:	e002      	b.n	8949a <_svfiprintf_r+0x228>
   89494:	f047 0710 	orr.w	r7, r7, #16
   89498:	e748      	b.n	8932c <_svfiprintf_r+0xba>
   8949a:	f047 0720 	orr.w	r7, r7, #32
   8949e:	e745      	b.n	8932c <_svfiprintf_r+0xba>
   894a0:	6832      	ldr	r2, [r6, #0]
   894a2:	2500      	movs	r5, #0
   894a4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   894a8:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   894ac:	3604      	adds	r6, #4
   894ae:	e156      	b.n	8975e <_svfiprintf_r+0x4ec>
   894b0:	06ba      	lsls	r2, r7, #26
   894b2:	d507      	bpl.n	894c4 <_svfiprintf_r+0x252>
   894b4:	3607      	adds	r6, #7
   894b6:	f026 0507 	bic.w	r5, r6, #7
   894ba:	f105 0608 	add.w	r6, r5, #8
   894be:	e9d5 4500 	ldrd	r4, r5, [r5]
   894c2:	e00f      	b.n	894e4 <_svfiprintf_r+0x272>
   894c4:	f017 0f10 	tst.w	r7, #16
   894c8:	f106 0104 	add.w	r1, r6, #4
   894cc:	d001      	beq.n	894d2 <_svfiprintf_r+0x260>
   894ce:	6832      	ldr	r2, [r6, #0]
   894d0:	e005      	b.n	894de <_svfiprintf_r+0x26c>
   894d2:	f017 0f40 	tst.w	r7, #64	; 0x40
   894d6:	6832      	ldr	r2, [r6, #0]
   894d8:	d001      	beq.n	894de <_svfiprintf_r+0x26c>
   894da:	b214      	sxth	r4, r2
   894dc:	e000      	b.n	894e0 <_svfiprintf_r+0x26e>
   894de:	4614      	mov	r4, r2
   894e0:	17e5      	asrs	r5, r4, #31
   894e2:	460e      	mov	r6, r1
   894e4:	2c00      	cmp	r4, #0
   894e6:	f175 0200 	sbcs.w	r2, r5, #0
   894ea:	f280 80b9 	bge.w	89660 <_svfiprintf_r+0x3ee>
   894ee:	232d      	movs	r3, #45	; 0x2d
   894f0:	4264      	negs	r4, r4
   894f2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   894f6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   894fa:	e0b1      	b.n	89660 <_svfiprintf_r+0x3ee>
   894fc:	f017 0f20 	tst.w	r7, #32
   89500:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89504:	f106 0204 	add.w	r2, r6, #4
   89508:	d005      	beq.n	89516 <_svfiprintf_r+0x2a4>
   8950a:	9c04      	ldr	r4, [sp, #16]
   8950c:	6835      	ldr	r5, [r6, #0]
   8950e:	17e0      	asrs	r0, r4, #31
   89510:	602c      	str	r4, [r5, #0]
   89512:	6068      	str	r0, [r5, #4]
   89514:	e004      	b.n	89520 <_svfiprintf_r+0x2ae>
   89516:	06fb      	lsls	r3, r7, #27
   89518:	d504      	bpl.n	89524 <_svfiprintf_r+0x2b2>
   8951a:	6833      	ldr	r3, [r6, #0]
   8951c:	9904      	ldr	r1, [sp, #16]
   8951e:	6019      	str	r1, [r3, #0]
   89520:	4616      	mov	r6, r2
   89522:	e6cf      	b.n	892c4 <_svfiprintf_r+0x52>
   89524:	6830      	ldr	r0, [r6, #0]
   89526:	9c04      	ldr	r4, [sp, #16]
   89528:	f017 0f40 	tst.w	r7, #64	; 0x40
   8952c:	f106 0604 	add.w	r6, r6, #4
   89530:	bf14      	ite	ne
   89532:	8004      	strhne	r4, [r0, #0]
   89534:	6004      	streq	r4, [r0, #0]
   89536:	e6c5      	b.n	892c4 <_svfiprintf_r+0x52>
   89538:	f047 0710 	orr.w	r7, r7, #16
   8953c:	f017 0020 	ands.w	r0, r7, #32
   89540:	d008      	beq.n	89554 <_svfiprintf_r+0x2e2>
   89542:	1df3      	adds	r3, r6, #7
   89544:	f023 0507 	bic.w	r5, r3, #7
   89548:	f105 0608 	add.w	r6, r5, #8
   8954c:	e9d5 4500 	ldrd	r4, r5, [r5]
   89550:	2000      	movs	r0, #0
   89552:	e07c      	b.n	8964e <_svfiprintf_r+0x3dc>
   89554:	f017 0110 	ands.w	r1, r7, #16
   89558:	f106 0204 	add.w	r2, r6, #4
   8955c:	d106      	bne.n	8956c <_svfiprintf_r+0x2fa>
   8955e:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   89562:	d003      	beq.n	8956c <_svfiprintf_r+0x2fa>
   89564:	8834      	ldrh	r4, [r6, #0]
   89566:	2500      	movs	r5, #0
   89568:	4616      	mov	r6, r2
   8956a:	e7f1      	b.n	89550 <_svfiprintf_r+0x2de>
   8956c:	6836      	ldr	r6, [r6, #0]
   8956e:	2500      	movs	r5, #0
   89570:	4634      	mov	r4, r6
   89572:	4616      	mov	r6, r2
   89574:	e06b      	b.n	8964e <_svfiprintf_r+0x3dc>
   89576:	4b39      	ldr	r3, [pc, #228]	; (8965c <_svfiprintf_r+0x3ea>)
   89578:	2130      	movs	r1, #48	; 0x30
   8957a:	2278      	movs	r2, #120	; 0x78
   8957c:	6834      	ldr	r4, [r6, #0]
   8957e:	2500      	movs	r5, #0
   89580:	f047 0702 	orr.w	r7, r7, #2
   89584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   89588:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8958c:	3604      	adds	r6, #4
   8958e:	9305      	str	r3, [sp, #20]
   89590:	e05c      	b.n	8964c <_svfiprintf_r+0x3da>
   89592:	4631      	mov	r1, r6
   89594:	2500      	movs	r5, #0
   89596:	f8d1 a000 	ldr.w	sl, [r1]
   8959a:	3604      	adds	r6, #4
   8959c:	45ac      	cmp	ip, r5
   8959e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   895a2:	4650      	mov	r0, sl
   895a4:	db11      	blt.n	895ca <_svfiprintf_r+0x358>
   895a6:	4662      	mov	r2, ip
   895a8:	4629      	mov	r1, r5
   895aa:	f8cd c000 	str.w	ip, [sp]
   895ae:	f7fe fc79 	bl	87ea4 <memchr>
   895b2:	f8dd c000 	ldr.w	ip, [sp]
   895b6:	2800      	cmp	r0, #0
   895b8:	f000 80d5 	beq.w	89766 <_svfiprintf_r+0x4f4>
   895bc:	ebca 0400 	rsb	r4, sl, r0
   895c0:	4564      	cmp	r4, ip
   895c2:	f340 80d2 	ble.w	8976a <_svfiprintf_r+0x4f8>
   895c6:	4664      	mov	r4, ip
   895c8:	e0cf      	b.n	8976a <_svfiprintf_r+0x4f8>
   895ca:	f7fa fdd5 	bl	84178 <strlen>
   895ce:	4604      	mov	r4, r0
   895d0:	e0cb      	b.n	8976a <_svfiprintf_r+0x4f8>
   895d2:	f047 0710 	orr.w	r7, r7, #16
   895d6:	06bd      	lsls	r5, r7, #26
   895d8:	d506      	bpl.n	895e8 <_svfiprintf_r+0x376>
   895da:	1df0      	adds	r0, r6, #7
   895dc:	f020 0407 	bic.w	r4, r0, #7
   895e0:	f104 0608 	add.w	r6, r4, #8
   895e4:	cc30      	ldmia	r4, {r4, r5}
   895e6:	e00c      	b.n	89602 <_svfiprintf_r+0x390>
   895e8:	f017 0f10 	tst.w	r7, #16
   895ec:	f106 0304 	add.w	r3, r6, #4
   895f0:	d103      	bne.n	895fa <_svfiprintf_r+0x388>
   895f2:	067c      	lsls	r4, r7, #25
   895f4:	d501      	bpl.n	895fa <_svfiprintf_r+0x388>
   895f6:	8834      	ldrh	r4, [r6, #0]
   895f8:	e001      	b.n	895fe <_svfiprintf_r+0x38c>
   895fa:	6835      	ldr	r5, [r6, #0]
   895fc:	462c      	mov	r4, r5
   895fe:	2500      	movs	r5, #0
   89600:	461e      	mov	r6, r3
   89602:	2001      	movs	r0, #1
   89604:	e023      	b.n	8964e <_svfiprintf_r+0x3dc>
   89606:	06b8      	lsls	r0, r7, #26
   89608:	d507      	bpl.n	8961a <_svfiprintf_r+0x3a8>
   8960a:	1df4      	adds	r4, r6, #7
   8960c:	f024 0107 	bic.w	r1, r4, #7
   89610:	f101 0608 	add.w	r6, r1, #8
   89614:	e9d1 4500 	ldrd	r4, r5, [r1]
   89618:	e00c      	b.n	89634 <_svfiprintf_r+0x3c2>
   8961a:	f017 0f10 	tst.w	r7, #16
   8961e:	f106 0004 	add.w	r0, r6, #4
   89622:	d103      	bne.n	8962c <_svfiprintf_r+0x3ba>
   89624:	0679      	lsls	r1, r7, #25
   89626:	d501      	bpl.n	8962c <_svfiprintf_r+0x3ba>
   89628:	8834      	ldrh	r4, [r6, #0]
   8962a:	e001      	b.n	89630 <_svfiprintf_r+0x3be>
   8962c:	6836      	ldr	r6, [r6, #0]
   8962e:	4634      	mov	r4, r6
   89630:	2500      	movs	r5, #0
   89632:	4606      	mov	r6, r0
   89634:	07fa      	lsls	r2, r7, #31
   89636:	d509      	bpl.n	8964c <_svfiprintf_r+0x3da>
   89638:	ea54 0205 	orrs.w	r2, r4, r5
   8963c:	d006      	beq.n	8964c <_svfiprintf_r+0x3da>
   8963e:	2230      	movs	r2, #48	; 0x30
   89640:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   89644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   89648:	f047 0702 	orr.w	r7, r7, #2
   8964c:	2002      	movs	r0, #2
   8964e:	2100      	movs	r1, #0
   89650:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   89654:	e005      	b.n	89662 <_svfiprintf_r+0x3f0>
   89656:	bf00      	nop
   89658:	0008a7c4 	.word	0x0008a7c4
   8965c:	0008a7d5 	.word	0x0008a7d5
   89660:	2001      	movs	r0, #1
   89662:	f1bc 0f00 	cmp.w	ip, #0
   89666:	bfa8      	it	ge
   89668:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8966c:	ea54 0105 	orrs.w	r1, r4, r5
   89670:	d102      	bne.n	89678 <_svfiprintf_r+0x406>
   89672:	f1bc 0f00 	cmp.w	ip, #0
   89676:	d058      	beq.n	8972a <_svfiprintf_r+0x4b8>
   89678:	2801      	cmp	r0, #1
   8967a:	d01d      	beq.n	896b8 <_svfiprintf_r+0x446>
   8967c:	2802      	cmp	r0, #2
   8967e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   89682:	d041      	beq.n	89708 <_svfiprintf_r+0x496>
   89684:	f004 0207 	and.w	r2, r4, #7
   89688:	08e4      	lsrs	r4, r4, #3
   8968a:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8968e:	08e9      	lsrs	r1, r5, #3
   89690:	4604      	mov	r4, r0
   89692:	460d      	mov	r5, r1
   89694:	3230      	adds	r2, #48	; 0x30
   89696:	ea54 0105 	orrs.w	r1, r4, r5
   8969a:	469a      	mov	sl, r3
   8969c:	701a      	strb	r2, [r3, #0]
   8969e:	f103 33ff 	add.w	r3, r3, #4294967295
   896a2:	d1ef      	bne.n	89684 <_svfiprintf_r+0x412>
   896a4:	07f8      	lsls	r0, r7, #31
   896a6:	4655      	mov	r5, sl
   896a8:	d54a      	bpl.n	89740 <_svfiprintf_r+0x4ce>
   896aa:	2a30      	cmp	r2, #48	; 0x30
   896ac:	d048      	beq.n	89740 <_svfiprintf_r+0x4ce>
   896ae:	2230      	movs	r2, #48	; 0x30
   896b0:	469a      	mov	sl, r3
   896b2:	f805 2c01 	strb.w	r2, [r5, #-1]
   896b6:	e043      	b.n	89740 <_svfiprintf_r+0x4ce>
   896b8:	2d00      	cmp	r5, #0
   896ba:	bf08      	it	eq
   896bc:	2c0a      	cmpeq	r4, #10
   896be:	d203      	bcs.n	896c8 <_svfiprintf_r+0x456>
   896c0:	3430      	adds	r4, #48	; 0x30
   896c2:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   896c6:	e036      	b.n	89736 <_svfiprintf_r+0x4c4>
   896c8:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   896cc:	9302      	str	r3, [sp, #8]
   896ce:	4620      	mov	r0, r4
   896d0:	4629      	mov	r1, r5
   896d2:	220a      	movs	r2, #10
   896d4:	2300      	movs	r3, #0
   896d6:	f8cd c000 	str.w	ip, [sp]
   896da:	f000 fd09 	bl	8a0f0 <__aeabi_uldivmod>
   896de:	9802      	ldr	r0, [sp, #8]
   896e0:	3230      	adds	r2, #48	; 0x30
   896e2:	f800 2901 	strb.w	r2, [r0], #-1
   896e6:	4629      	mov	r1, r5
   896e8:	220a      	movs	r2, #10
   896ea:	2300      	movs	r3, #0
   896ec:	f8dd a008 	ldr.w	sl, [sp, #8]
   896f0:	9002      	str	r0, [sp, #8]
   896f2:	4620      	mov	r0, r4
   896f4:	f000 fcfc 	bl	8a0f0 <__aeabi_uldivmod>
   896f8:	4604      	mov	r4, r0
   896fa:	460d      	mov	r5, r1
   896fc:	ea54 0105 	orrs.w	r1, r4, r5
   89700:	f8dd c000 	ldr.w	ip, [sp]
   89704:	d1e3      	bne.n	896ce <_svfiprintf_r+0x45c>
   89706:	e01b      	b.n	89740 <_svfiprintf_r+0x4ce>
   89708:	9905      	ldr	r1, [sp, #20]
   8970a:	f004 000f 	and.w	r0, r4, #15
   8970e:	0924      	lsrs	r4, r4, #4
   89710:	5c0a      	ldrb	r2, [r1, r0]
   89712:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   89716:	0929      	lsrs	r1, r5, #4
   89718:	4604      	mov	r4, r0
   8971a:	460d      	mov	r5, r1
   8971c:	469a      	mov	sl, r3
   8971e:	f803 2901 	strb.w	r2, [r3], #-1
   89722:	ea54 0205 	orrs.w	r2, r4, r5
   89726:	d1ef      	bne.n	89708 <_svfiprintf_r+0x496>
   89728:	e00a      	b.n	89740 <_svfiprintf_r+0x4ce>
   8972a:	b938      	cbnz	r0, 8973c <_svfiprintf_r+0x4ca>
   8972c:	07f9      	lsls	r1, r7, #31
   8972e:	d505      	bpl.n	8973c <_svfiprintf_r+0x4ca>
   89730:	2030      	movs	r0, #48	; 0x30
   89732:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   89736:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8973a:	e001      	b.n	89740 <_svfiprintf_r+0x4ce>
   8973c:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   89740:	ad18      	add	r5, sp, #96	; 0x60
   89742:	ebca 0405 	rsb	r4, sl, r5
   89746:	4665      	mov	r5, ip
   89748:	e00f      	b.n	8976a <_svfiprintf_r+0x4f8>
   8974a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8974e:	2b00      	cmp	r3, #0
   89750:	f000 8176 	beq.w	89a40 <_svfiprintf_r+0x7ce>
   89754:	2500      	movs	r5, #0
   89756:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8975a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8975e:	2401      	movs	r4, #1
   89760:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   89764:	e001      	b.n	8976a <_svfiprintf_r+0x4f8>
   89766:	4664      	mov	r4, ip
   89768:	4605      	mov	r5, r0
   8976a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8976e:	42ac      	cmp	r4, r5
   89770:	bfac      	ite	ge
   89772:	4621      	movge	r1, r4
   89774:	4629      	movlt	r1, r5
   89776:	9102      	str	r1, [sp, #8]
   89778:	b113      	cbz	r3, 89780 <_svfiprintf_r+0x50e>
   8977a:	9802      	ldr	r0, [sp, #8]
   8977c:	1c42      	adds	r2, r0, #1
   8977e:	9202      	str	r2, [sp, #8]
   89780:	f017 0102 	ands.w	r1, r7, #2
   89784:	9106      	str	r1, [sp, #24]
   89786:	d002      	beq.n	8978e <_svfiprintf_r+0x51c>
   89788:	9b02      	ldr	r3, [sp, #8]
   8978a:	1c98      	adds	r0, r3, #2
   8978c:	9002      	str	r0, [sp, #8]
   8978e:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   89792:	9207      	str	r2, [sp, #28]
   89794:	d13c      	bne.n	89810 <_svfiprintf_r+0x59e>
   89796:	9903      	ldr	r1, [sp, #12]
   89798:	9b02      	ldr	r3, [sp, #8]
   8979a:	1acb      	subs	r3, r1, r3
   8979c:	2b00      	cmp	r3, #0
   8979e:	dd37      	ble.n	89810 <_svfiprintf_r+0x59e>
   897a0:	48a5      	ldr	r0, [pc, #660]	; (89a38 <_svfiprintf_r+0x7c6>)
   897a2:	2b10      	cmp	r3, #16
   897a4:	f8c8 0000 	str.w	r0, [r8]
   897a8:	dd1b      	ble.n	897e2 <_svfiprintf_r+0x570>
   897aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   897ac:	2110      	movs	r1, #16
   897ae:	980d      	ldr	r0, [sp, #52]	; 0x34
   897b0:	f8c8 1004 	str.w	r1, [r8, #4]
   897b4:	1c51      	adds	r1, r2, #1
   897b6:	3010      	adds	r0, #16
   897b8:	2907      	cmp	r1, #7
   897ba:	900d      	str	r0, [sp, #52]	; 0x34
   897bc:	910c      	str	r1, [sp, #48]	; 0x30
   897be:	dc02      	bgt.n	897c6 <_svfiprintf_r+0x554>
   897c0:	f108 0808 	add.w	r8, r8, #8
   897c4:	e00b      	b.n	897de <_svfiprintf_r+0x56c>
   897c6:	4658      	mov	r0, fp
   897c8:	4649      	mov	r1, r9
   897ca:	aa0b      	add	r2, sp, #44	; 0x2c
   897cc:	9300      	str	r3, [sp, #0]
   897ce:	f7ff fcd3 	bl	89178 <__ssprint_r>
   897d2:	9b00      	ldr	r3, [sp, #0]
   897d4:	2800      	cmp	r0, #0
   897d6:	f040 813a 	bne.w	89a4e <_svfiprintf_r+0x7dc>
   897da:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   897de:	3b10      	subs	r3, #16
   897e0:	e7de      	b.n	897a0 <_svfiprintf_r+0x52e>
   897e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   897e4:	f8c8 3004 	str.w	r3, [r8, #4]
   897e8:	18d1      	adds	r1, r2, r3
   897ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   897ec:	910d      	str	r1, [sp, #52]	; 0x34
   897ee:	1c58      	adds	r0, r3, #1
   897f0:	2807      	cmp	r0, #7
   897f2:	900c      	str	r0, [sp, #48]	; 0x30
   897f4:	dc02      	bgt.n	897fc <_svfiprintf_r+0x58a>
   897f6:	f108 0808 	add.w	r8, r8, #8
   897fa:	e009      	b.n	89810 <_svfiprintf_r+0x59e>
   897fc:	4658      	mov	r0, fp
   897fe:	4649      	mov	r1, r9
   89800:	aa0b      	add	r2, sp, #44	; 0x2c
   89802:	f7ff fcb9 	bl	89178 <__ssprint_r>
   89806:	2800      	cmp	r0, #0
   89808:	f040 8121 	bne.w	89a4e <_svfiprintf_r+0x7dc>
   8980c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89810:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   89814:	b1da      	cbz	r2, 8984e <_svfiprintf_r+0x5dc>
   89816:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8981a:	f8c8 1000 	str.w	r1, [r8]
   8981e:	990c      	ldr	r1, [sp, #48]	; 0x30
   89820:	2301      	movs	r3, #1
   89822:	980d      	ldr	r0, [sp, #52]	; 0x34
   89824:	f8c8 3004 	str.w	r3, [r8, #4]
   89828:	1c4b      	adds	r3, r1, #1
   8982a:	1c42      	adds	r2, r0, #1
   8982c:	2b07      	cmp	r3, #7
   8982e:	920d      	str	r2, [sp, #52]	; 0x34
   89830:	930c      	str	r3, [sp, #48]	; 0x30
   89832:	dc02      	bgt.n	8983a <_svfiprintf_r+0x5c8>
   89834:	f108 0808 	add.w	r8, r8, #8
   89838:	e009      	b.n	8984e <_svfiprintf_r+0x5dc>
   8983a:	4658      	mov	r0, fp
   8983c:	4649      	mov	r1, r9
   8983e:	aa0b      	add	r2, sp, #44	; 0x2c
   89840:	f7ff fc9a 	bl	89178 <__ssprint_r>
   89844:	2800      	cmp	r0, #0
   89846:	f040 8102 	bne.w	89a4e <_svfiprintf_r+0x7dc>
   8984a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8984e:	9806      	ldr	r0, [sp, #24]
   89850:	b1d0      	cbz	r0, 89888 <_svfiprintf_r+0x616>
   89852:	aa0a      	add	r2, sp, #40	; 0x28
   89854:	f8c8 2000 	str.w	r2, [r8]
   89858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8985a:	2102      	movs	r1, #2
   8985c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8985e:	f8c8 1004 	str.w	r1, [r8, #4]
   89862:	1c51      	adds	r1, r2, #1
   89864:	1c98      	adds	r0, r3, #2
   89866:	2907      	cmp	r1, #7
   89868:	900d      	str	r0, [sp, #52]	; 0x34
   8986a:	910c      	str	r1, [sp, #48]	; 0x30
   8986c:	dc02      	bgt.n	89874 <_svfiprintf_r+0x602>
   8986e:	f108 0808 	add.w	r8, r8, #8
   89872:	e009      	b.n	89888 <_svfiprintf_r+0x616>
   89874:	4658      	mov	r0, fp
   89876:	4649      	mov	r1, r9
   89878:	aa0b      	add	r2, sp, #44	; 0x2c
   8987a:	f7ff fc7d 	bl	89178 <__ssprint_r>
   8987e:	2800      	cmp	r0, #0
   89880:	f040 80e5 	bne.w	89a4e <_svfiprintf_r+0x7dc>
   89884:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89888:	9b07      	ldr	r3, [sp, #28]
   8988a:	2b80      	cmp	r3, #128	; 0x80
   8988c:	d13c      	bne.n	89908 <_svfiprintf_r+0x696>
   8988e:	9803      	ldr	r0, [sp, #12]
   89890:	9a02      	ldr	r2, [sp, #8]
   89892:	1a83      	subs	r3, r0, r2
   89894:	2b00      	cmp	r3, #0
   89896:	dd37      	ble.n	89908 <_svfiprintf_r+0x696>
   89898:	4968      	ldr	r1, [pc, #416]	; (89a3c <_svfiprintf_r+0x7ca>)
   8989a:	2b10      	cmp	r3, #16
   8989c:	f8c8 1000 	str.w	r1, [r8]
   898a0:	dd1b      	ble.n	898da <_svfiprintf_r+0x668>
   898a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   898a4:	2210      	movs	r2, #16
   898a6:	990d      	ldr	r1, [sp, #52]	; 0x34
   898a8:	f8c8 2004 	str.w	r2, [r8, #4]
   898ac:	1c42      	adds	r2, r0, #1
   898ae:	3110      	adds	r1, #16
   898b0:	2a07      	cmp	r2, #7
   898b2:	910d      	str	r1, [sp, #52]	; 0x34
   898b4:	920c      	str	r2, [sp, #48]	; 0x30
   898b6:	dc02      	bgt.n	898be <_svfiprintf_r+0x64c>
   898b8:	f108 0808 	add.w	r8, r8, #8
   898bc:	e00b      	b.n	898d6 <_svfiprintf_r+0x664>
   898be:	4658      	mov	r0, fp
   898c0:	4649      	mov	r1, r9
   898c2:	aa0b      	add	r2, sp, #44	; 0x2c
   898c4:	9300      	str	r3, [sp, #0]
   898c6:	f7ff fc57 	bl	89178 <__ssprint_r>
   898ca:	9b00      	ldr	r3, [sp, #0]
   898cc:	2800      	cmp	r0, #0
   898ce:	f040 80be 	bne.w	89a4e <_svfiprintf_r+0x7dc>
   898d2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   898d6:	3b10      	subs	r3, #16
   898d8:	e7de      	b.n	89898 <_svfiprintf_r+0x626>
   898da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   898dc:	980d      	ldr	r0, [sp, #52]	; 0x34
   898de:	1c51      	adds	r1, r2, #1
   898e0:	f8c8 3004 	str.w	r3, [r8, #4]
   898e4:	2907      	cmp	r1, #7
   898e6:	4403      	add	r3, r0
   898e8:	930d      	str	r3, [sp, #52]	; 0x34
   898ea:	910c      	str	r1, [sp, #48]	; 0x30
   898ec:	dc02      	bgt.n	898f4 <_svfiprintf_r+0x682>
   898ee:	f108 0808 	add.w	r8, r8, #8
   898f2:	e009      	b.n	89908 <_svfiprintf_r+0x696>
   898f4:	4658      	mov	r0, fp
   898f6:	4649      	mov	r1, r9
   898f8:	aa0b      	add	r2, sp, #44	; 0x2c
   898fa:	f7ff fc3d 	bl	89178 <__ssprint_r>
   898fe:	2800      	cmp	r0, #0
   89900:	f040 80a5 	bne.w	89a4e <_svfiprintf_r+0x7dc>
   89904:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89908:	1b2d      	subs	r5, r5, r4
   8990a:	2d00      	cmp	r5, #0
   8990c:	dd34      	ble.n	89978 <_svfiprintf_r+0x706>
   8990e:	484b      	ldr	r0, [pc, #300]	; (89a3c <_svfiprintf_r+0x7ca>)
   89910:	2d10      	cmp	r5, #16
   89912:	f8c8 0000 	str.w	r0, [r8]
   89916:	dd19      	ble.n	8994c <_svfiprintf_r+0x6da>
   89918:	980c      	ldr	r0, [sp, #48]	; 0x30
   8991a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8991c:	1c43      	adds	r3, r0, #1
   8991e:	2210      	movs	r2, #16
   89920:	3110      	adds	r1, #16
   89922:	2b07      	cmp	r3, #7
   89924:	f8c8 2004 	str.w	r2, [r8, #4]
   89928:	910d      	str	r1, [sp, #52]	; 0x34
   8992a:	930c      	str	r3, [sp, #48]	; 0x30
   8992c:	dc02      	bgt.n	89934 <_svfiprintf_r+0x6c2>
   8992e:	f108 0808 	add.w	r8, r8, #8
   89932:	e009      	b.n	89948 <_svfiprintf_r+0x6d6>
   89934:	4658      	mov	r0, fp
   89936:	4649      	mov	r1, r9
   89938:	aa0b      	add	r2, sp, #44	; 0x2c
   8993a:	f7ff fc1d 	bl	89178 <__ssprint_r>
   8993e:	2800      	cmp	r0, #0
   89940:	f040 8085 	bne.w	89a4e <_svfiprintf_r+0x7dc>
   89944:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89948:	3d10      	subs	r5, #16
   8994a:	e7e0      	b.n	8990e <_svfiprintf_r+0x69c>
   8994c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8994e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89950:	1c51      	adds	r1, r2, #1
   89952:	f8c8 5004 	str.w	r5, [r8, #4]
   89956:	2907      	cmp	r1, #7
   89958:	441d      	add	r5, r3
   8995a:	950d      	str	r5, [sp, #52]	; 0x34
   8995c:	910c      	str	r1, [sp, #48]	; 0x30
   8995e:	dc02      	bgt.n	89966 <_svfiprintf_r+0x6f4>
   89960:	f108 0808 	add.w	r8, r8, #8
   89964:	e008      	b.n	89978 <_svfiprintf_r+0x706>
   89966:	4658      	mov	r0, fp
   89968:	4649      	mov	r1, r9
   8996a:	aa0b      	add	r2, sp, #44	; 0x2c
   8996c:	f7ff fc04 	bl	89178 <__ssprint_r>
   89970:	2800      	cmp	r0, #0
   89972:	d16c      	bne.n	89a4e <_svfiprintf_r+0x7dc>
   89974:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8997a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8997c:	1c5a      	adds	r2, r3, #1
   8997e:	f8c8 4004 	str.w	r4, [r8, #4]
   89982:	2a07      	cmp	r2, #7
   89984:	4404      	add	r4, r0
   89986:	f8c8 a000 	str.w	sl, [r8]
   8998a:	940d      	str	r4, [sp, #52]	; 0x34
   8998c:	920c      	str	r2, [sp, #48]	; 0x30
   8998e:	dc02      	bgt.n	89996 <_svfiprintf_r+0x724>
   89990:	f108 0308 	add.w	r3, r8, #8
   89994:	e007      	b.n	899a6 <_svfiprintf_r+0x734>
   89996:	4658      	mov	r0, fp
   89998:	4649      	mov	r1, r9
   8999a:	aa0b      	add	r2, sp, #44	; 0x2c
   8999c:	f7ff fbec 	bl	89178 <__ssprint_r>
   899a0:	2800      	cmp	r0, #0
   899a2:	d154      	bne.n	89a4e <_svfiprintf_r+0x7dc>
   899a4:	ab18      	add	r3, sp, #96	; 0x60
   899a6:	077a      	lsls	r2, r7, #29
   899a8:	d40b      	bmi.n	899c2 <_svfiprintf_r+0x750>
   899aa:	9804      	ldr	r0, [sp, #16]
   899ac:	9b02      	ldr	r3, [sp, #8]
   899ae:	9a03      	ldr	r2, [sp, #12]
   899b0:	990d      	ldr	r1, [sp, #52]	; 0x34
   899b2:	4293      	cmp	r3, r2
   899b4:	bfac      	ite	ge
   899b6:	18c0      	addge	r0, r0, r3
   899b8:	1880      	addlt	r0, r0, r2
   899ba:	9004      	str	r0, [sp, #16]
   899bc:	2900      	cmp	r1, #0
   899be:	d036      	beq.n	89a2e <_svfiprintf_r+0x7bc>
   899c0:	e02f      	b.n	89a22 <_svfiprintf_r+0x7b0>
   899c2:	9c03      	ldr	r4, [sp, #12]
   899c4:	9902      	ldr	r1, [sp, #8]
   899c6:	1a64      	subs	r4, r4, r1
   899c8:	2c00      	cmp	r4, #0
   899ca:	ddee      	ble.n	899aa <_svfiprintf_r+0x738>
   899cc:	481a      	ldr	r0, [pc, #104]	; (89a38 <_svfiprintf_r+0x7c6>)
   899ce:	2c10      	cmp	r4, #16
   899d0:	6018      	str	r0, [r3, #0]
   899d2:	dd15      	ble.n	89a00 <_svfiprintf_r+0x78e>
   899d4:	990c      	ldr	r1, [sp, #48]	; 0x30
   899d6:	2010      	movs	r0, #16
   899d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   899da:	6058      	str	r0, [r3, #4]
   899dc:	1c48      	adds	r0, r1, #1
   899de:	3210      	adds	r2, #16
   899e0:	2807      	cmp	r0, #7
   899e2:	920d      	str	r2, [sp, #52]	; 0x34
   899e4:	900c      	str	r0, [sp, #48]	; 0x30
   899e6:	dc01      	bgt.n	899ec <_svfiprintf_r+0x77a>
   899e8:	3308      	adds	r3, #8
   899ea:	e007      	b.n	899fc <_svfiprintf_r+0x78a>
   899ec:	4658      	mov	r0, fp
   899ee:	4649      	mov	r1, r9
   899f0:	aa0b      	add	r2, sp, #44	; 0x2c
   899f2:	f7ff fbc1 	bl	89178 <__ssprint_r>
   899f6:	2800      	cmp	r0, #0
   899f8:	d129      	bne.n	89a4e <_svfiprintf_r+0x7dc>
   899fa:	ab18      	add	r3, sp, #96	; 0x60
   899fc:	3c10      	subs	r4, #16
   899fe:	e7e5      	b.n	899cc <_svfiprintf_r+0x75a>
   89a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89a02:	605c      	str	r4, [r3, #4]
   89a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89a06:	1c51      	adds	r1, r2, #1
   89a08:	191c      	adds	r4, r3, r4
   89a0a:	2907      	cmp	r1, #7
   89a0c:	940d      	str	r4, [sp, #52]	; 0x34
   89a0e:	910c      	str	r1, [sp, #48]	; 0x30
   89a10:	ddcb      	ble.n	899aa <_svfiprintf_r+0x738>
   89a12:	4658      	mov	r0, fp
   89a14:	4649      	mov	r1, r9
   89a16:	aa0b      	add	r2, sp, #44	; 0x2c
   89a18:	f7ff fbae 	bl	89178 <__ssprint_r>
   89a1c:	2800      	cmp	r0, #0
   89a1e:	d0c4      	beq.n	899aa <_svfiprintf_r+0x738>
   89a20:	e015      	b.n	89a4e <_svfiprintf_r+0x7dc>
   89a22:	4658      	mov	r0, fp
   89a24:	4649      	mov	r1, r9
   89a26:	aa0b      	add	r2, sp, #44	; 0x2c
   89a28:	f7ff fba6 	bl	89178 <__ssprint_r>
   89a2c:	b978      	cbnz	r0, 89a4e <_svfiprintf_r+0x7dc>
   89a2e:	2500      	movs	r5, #0
   89a30:	950c      	str	r5, [sp, #48]	; 0x30
   89a32:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89a36:	e445      	b.n	892c4 <_svfiprintf_r+0x52>
   89a38:	0008aa68 	.word	0x0008aa68
   89a3c:	0008aa78 	.word	0x0008aa78
   89a40:	980d      	ldr	r0, [sp, #52]	; 0x34
   89a42:	b120      	cbz	r0, 89a4e <_svfiprintf_r+0x7dc>
   89a44:	4658      	mov	r0, fp
   89a46:	4649      	mov	r1, r9
   89a48:	aa0b      	add	r2, sp, #44	; 0x2c
   89a4a:	f7ff fb95 	bl	89178 <__ssprint_r>
   89a4e:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   89a52:	9b04      	ldr	r3, [sp, #16]
   89a54:	f002 0140 	and.w	r1, r2, #64	; 0x40
   89a58:	b208      	sxth	r0, r1
   89a5a:	2800      	cmp	r0, #0
   89a5c:	bf18      	it	ne
   89a5e:	f04f 33ff 	movne.w	r3, #4294967295
   89a62:	4618      	mov	r0, r3
   89a64:	b029      	add	sp, #164	; 0xa4
   89a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a6a:	bf00      	nop

00089a6c <__submore>:
   89a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89a70:	460c      	mov	r4, r1
   89a72:	6b09      	ldr	r1, [r1, #48]	; 0x30
   89a74:	f104 0340 	add.w	r3, r4, #64	; 0x40
   89a78:	4299      	cmp	r1, r3
   89a7a:	d11c      	bne.n	89ab6 <__submore+0x4a>
   89a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   89a80:	f7fd ffae 	bl	879e0 <_malloc_r>
   89a84:	b918      	cbnz	r0, 89a8e <__submore+0x22>
   89a86:	f04f 30ff 	mov.w	r0, #4294967295
   89a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89a8e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   89a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
   89a96:	6320      	str	r0, [r4, #48]	; 0x30
   89a98:	6361      	str	r1, [r4, #52]	; 0x34
   89a9a:	f880 23ff 	strb.w	r2, [r0, #1023]	; 0x3ff
   89a9e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   89aa2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   89aa6:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   89aaa:	f880 13fd 	strb.w	r1, [r0, #1021]	; 0x3fd
   89aae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   89ab2:	6020      	str	r0, [r4, #0]
   89ab4:	e012      	b.n	89adc <__submore+0x70>
   89ab6:	6b66      	ldr	r6, [r4, #52]	; 0x34
   89ab8:	0077      	lsls	r7, r6, #1
   89aba:	463a      	mov	r2, r7
   89abc:	f7fe fe0c 	bl	886d8 <_realloc_r>
   89ac0:	4605      	mov	r5, r0
   89ac2:	2800      	cmp	r0, #0
   89ac4:	d0df      	beq.n	89a86 <__submore+0x1a>
   89ac6:	eb00 0806 	add.w	r8, r0, r6
   89aca:	4640      	mov	r0, r8
   89acc:	4629      	mov	r1, r5
   89ace:	4632      	mov	r2, r6
   89ad0:	f7fa fa5e 	bl	83f90 <memcpy>
   89ad4:	f8c4 8000 	str.w	r8, [r4]
   89ad8:	6325      	str	r5, [r4, #48]	; 0x30
   89ada:	6367      	str	r7, [r4, #52]	; 0x34
   89adc:	2000      	movs	r0, #0
   89ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00089ae2 <_ungetc_r>:
   89ae2:	1c4b      	adds	r3, r1, #1
   89ae4:	b570      	push	{r4, r5, r6, lr}
   89ae6:	4606      	mov	r6, r0
   89ae8:	460d      	mov	r5, r1
   89aea:	4614      	mov	r4, r2
   89aec:	d102      	bne.n	89af4 <_ungetc_r+0x12>
   89aee:	f04f 35ff 	mov.w	r5, #4294967295
   89af2:	e062      	b.n	89bba <_ungetc_r+0xd8>
   89af4:	b118      	cbz	r0, 89afe <_ungetc_r+0x1c>
   89af6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89af8:	b90b      	cbnz	r3, 89afe <_ungetc_r+0x1c>
   89afa:	f7fc ff77 	bl	869ec <__sinit>
   89afe:	89a0      	ldrh	r0, [r4, #12]
   89b00:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   89b04:	b211      	sxth	r1, r2
   89b06:	b931      	cbnz	r1, 89b16 <_ungetc_r+0x34>
   89b08:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   89b0c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   89b0e:	81a3      	strh	r3, [r4, #12]
   89b10:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   89b14:	6662      	str	r2, [r4, #100]	; 0x64
   89b16:	89a1      	ldrh	r1, [r4, #12]
   89b18:	f001 0004 	and.w	r0, r1, #4
   89b1c:	f021 0320 	bic.w	r3, r1, #32
   89b20:	b202      	sxth	r2, r0
   89b22:	81a3      	strh	r3, [r4, #12]
   89b24:	b9c2      	cbnz	r2, 89b58 <_ungetc_r+0x76>
   89b26:	f001 0310 	and.w	r3, r1, #16
   89b2a:	b218      	sxth	r0, r3
   89b2c:	2800      	cmp	r0, #0
   89b2e:	d0de      	beq.n	89aee <_ungetc_r+0xc>
   89b30:	f001 0108 	and.w	r1, r1, #8
   89b34:	b20a      	sxth	r2, r1
   89b36:	b15a      	cbz	r2, 89b50 <_ungetc_r+0x6e>
   89b38:	4630      	mov	r0, r6
   89b3a:	4621      	mov	r1, r4
   89b3c:	f7fc fe64 	bl	86808 <_fflush_r>
   89b40:	2800      	cmp	r0, #0
   89b42:	d1d4      	bne.n	89aee <_ungetc_r+0xc>
   89b44:	89a3      	ldrh	r3, [r4, #12]
   89b46:	60a0      	str	r0, [r4, #8]
   89b48:	f023 0108 	bic.w	r1, r3, #8
   89b4c:	81a1      	strh	r1, [r4, #12]
   89b4e:	61a0      	str	r0, [r4, #24]
   89b50:	89a0      	ldrh	r0, [r4, #12]
   89b52:	f040 0204 	orr.w	r2, r0, #4
   89b56:	81a2      	strh	r2, [r4, #12]
   89b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
   89b5a:	b2ed      	uxtb	r5, r5
   89b5c:	b183      	cbz	r3, 89b80 <_ungetc_r+0x9e>
   89b5e:	6862      	ldr	r2, [r4, #4]
   89b60:	6b63      	ldr	r3, [r4, #52]	; 0x34
   89b62:	429a      	cmp	r2, r3
   89b64:	da05      	bge.n	89b72 <_ungetc_r+0x90>
   89b66:	6821      	ldr	r1, [r4, #0]
   89b68:	1e48      	subs	r0, r1, #1
   89b6a:	6020      	str	r0, [r4, #0]
   89b6c:	f801 5c01 	strb.w	r5, [r1, #-1]
   89b70:	e011      	b.n	89b96 <_ungetc_r+0xb4>
   89b72:	4630      	mov	r0, r6
   89b74:	4621      	mov	r1, r4
   89b76:	f7ff ff79 	bl	89a6c <__submore>
   89b7a:	2800      	cmp	r0, #0
   89b7c:	d0f3      	beq.n	89b66 <_ungetc_r+0x84>
   89b7e:	e7b6      	b.n	89aee <_ungetc_r+0xc>
   89b80:	6921      	ldr	r1, [r4, #16]
   89b82:	b159      	cbz	r1, 89b9c <_ungetc_r+0xba>
   89b84:	6820      	ldr	r0, [r4, #0]
   89b86:	4288      	cmp	r0, r1
   89b88:	d908      	bls.n	89b9c <_ungetc_r+0xba>
   89b8a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
   89b8e:	42aa      	cmp	r2, r5
   89b90:	d104      	bne.n	89b9c <_ungetc_r+0xba>
   89b92:	3801      	subs	r0, #1
   89b94:	6020      	str	r0, [r4, #0]
   89b96:	6862      	ldr	r2, [r4, #4]
   89b98:	1c51      	adds	r1, r2, #1
   89b9a:	e00d      	b.n	89bb8 <_ungetc_r+0xd6>
   89b9c:	6863      	ldr	r3, [r4, #4]
   89b9e:	6821      	ldr	r1, [r4, #0]
   89ba0:	63e3      	str	r3, [r4, #60]	; 0x3c
   89ba2:	4623      	mov	r3, r4
   89ba4:	f104 0040 	add.w	r0, r4, #64	; 0x40
   89ba8:	2203      	movs	r2, #3
   89baa:	f803 5f42 	strb.w	r5, [r3, #66]!
   89bae:	63a1      	str	r1, [r4, #56]	; 0x38
   89bb0:	6320      	str	r0, [r4, #48]	; 0x30
   89bb2:	6362      	str	r2, [r4, #52]	; 0x34
   89bb4:	6023      	str	r3, [r4, #0]
   89bb6:	2101      	movs	r1, #1
   89bb8:	6061      	str	r1, [r4, #4]
   89bba:	4628      	mov	r0, r5
   89bbc:	bd70      	pop	{r4, r5, r6, pc}

00089bbe <ungetc>:
   89bbe:	460a      	mov	r2, r1
   89bc0:	4902      	ldr	r1, [pc, #8]	; (89bcc <ungetc+0xe>)
   89bc2:	4603      	mov	r3, r0
   89bc4:	6808      	ldr	r0, [r1, #0]
   89bc6:	4619      	mov	r1, r3
   89bc8:	f7ff bf8b 	b.w	89ae2 <_ungetc_r>
   89bcc:	20070010 	.word	0x20070010

00089bd0 <__swbuf_r>:
   89bd0:	b570      	push	{r4, r5, r6, lr}
   89bd2:	460d      	mov	r5, r1
   89bd4:	4614      	mov	r4, r2
   89bd6:	4606      	mov	r6, r0
   89bd8:	b118      	cbz	r0, 89be2 <__swbuf_r+0x12>
   89bda:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89bdc:	b90b      	cbnz	r3, 89be2 <__swbuf_r+0x12>
   89bde:	f7fc ff05 	bl	869ec <__sinit>
   89be2:	89a1      	ldrh	r1, [r4, #12]
   89be4:	69a0      	ldr	r0, [r4, #24]
   89be6:	f001 0208 	and.w	r2, r1, #8
   89bea:	b213      	sxth	r3, r2
   89bec:	60a0      	str	r0, [r4, #8]
   89bee:	b10b      	cbz	r3, 89bf4 <__swbuf_r+0x24>
   89bf0:	6920      	ldr	r0, [r4, #16]
   89bf2:	b958      	cbnz	r0, 89c0c <__swbuf_r+0x3c>
   89bf4:	4630      	mov	r0, r6
   89bf6:	4621      	mov	r1, r4
   89bf8:	f7fc fd52 	bl	866a0 <__swsetup_r>
   89bfc:	b130      	cbz	r0, 89c0c <__swbuf_r+0x3c>
   89bfe:	89a5      	ldrh	r5, [r4, #12]
   89c00:	2009      	movs	r0, #9
   89c02:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   89c06:	81a1      	strh	r1, [r4, #12]
   89c08:	6030      	str	r0, [r6, #0]
   89c0a:	e017      	b.n	89c3c <__swbuf_r+0x6c>
   89c0c:	89a1      	ldrh	r1, [r4, #12]
   89c0e:	b2ed      	uxtb	r5, r5
   89c10:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   89c14:	b213      	sxth	r3, r2
   89c16:	b933      	cbnz	r3, 89c26 <__swbuf_r+0x56>
   89c18:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   89c1c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   89c1e:	81a0      	strh	r0, [r4, #12]
   89c20:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   89c24:	6662      	str	r2, [r4, #100]	; 0x64
   89c26:	6820      	ldr	r0, [r4, #0]
   89c28:	6923      	ldr	r3, [r4, #16]
   89c2a:	6961      	ldr	r1, [r4, #20]
   89c2c:	1ac0      	subs	r0, r0, r3
   89c2e:	4288      	cmp	r0, r1
   89c30:	db07      	blt.n	89c42 <__swbuf_r+0x72>
   89c32:	4630      	mov	r0, r6
   89c34:	4621      	mov	r1, r4
   89c36:	f7fc fde7 	bl	86808 <_fflush_r>
   89c3a:	b110      	cbz	r0, 89c42 <__swbuf_r+0x72>
   89c3c:	f04f 35ff 	mov.w	r5, #4294967295
   89c40:	e015      	b.n	89c6e <__swbuf_r+0x9e>
   89c42:	68a2      	ldr	r2, [r4, #8]
   89c44:	6821      	ldr	r1, [r4, #0]
   89c46:	1e53      	subs	r3, r2, #1
   89c48:	60a3      	str	r3, [r4, #8]
   89c4a:	f801 5b01 	strb.w	r5, [r1], #1
   89c4e:	6962      	ldr	r2, [r4, #20]
   89c50:	3001      	adds	r0, #1
   89c52:	4290      	cmp	r0, r2
   89c54:	6021      	str	r1, [r4, #0]
   89c56:	d004      	beq.n	89c62 <__swbuf_r+0x92>
   89c58:	89a3      	ldrh	r3, [r4, #12]
   89c5a:	07db      	lsls	r3, r3, #31
   89c5c:	d507      	bpl.n	89c6e <__swbuf_r+0x9e>
   89c5e:	2d0a      	cmp	r5, #10
   89c60:	d105      	bne.n	89c6e <__swbuf_r+0x9e>
   89c62:	4630      	mov	r0, r6
   89c64:	4621      	mov	r1, r4
   89c66:	f7fc fdcf 	bl	86808 <_fflush_r>
   89c6a:	2800      	cmp	r0, #0
   89c6c:	d1e6      	bne.n	89c3c <__swbuf_r+0x6c>
   89c6e:	4628      	mov	r0, r5
   89c70:	bd70      	pop	{r4, r5, r6, pc}

00089c72 <__swbuf>:
   89c72:	460a      	mov	r2, r1
   89c74:	4902      	ldr	r1, [pc, #8]	; (89c80 <__swbuf+0xe>)
   89c76:	4603      	mov	r3, r0
   89c78:	6808      	ldr	r0, [r1, #0]
   89c7a:	4619      	mov	r1, r3
   89c7c:	f7ff bfa8 	b.w	89bd0 <__swbuf_r>
   89c80:	20070010 	.word	0x20070010

00089c84 <_wcrtomb_r>:
   89c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89c88:	461d      	mov	r5, r3
   89c8a:	4b10      	ldr	r3, [pc, #64]	; (89ccc <_wcrtomb_r+0x48>)
   89c8c:	b086      	sub	sp, #24
   89c8e:	4604      	mov	r4, r0
   89c90:	4690      	mov	r8, r2
   89c92:	460e      	mov	r6, r1
   89c94:	681f      	ldr	r7, [r3, #0]
   89c96:	b939      	cbnz	r1, 89ca8 <_wcrtomb_r+0x24>
   89c98:	f7fd fe04 	bl	878a4 <__locale_charset>
   89c9c:	9500      	str	r5, [sp, #0]
   89c9e:	4603      	mov	r3, r0
   89ca0:	a903      	add	r1, sp, #12
   89ca2:	4620      	mov	r0, r4
   89ca4:	4632      	mov	r2, r6
   89ca6:	e006      	b.n	89cb6 <_wcrtomb_r+0x32>
   89ca8:	f7fd fdfc 	bl	878a4 <__locale_charset>
   89cac:	9500      	str	r5, [sp, #0]
   89cae:	4603      	mov	r3, r0
   89cb0:	4631      	mov	r1, r6
   89cb2:	4620      	mov	r0, r4
   89cb4:	4642      	mov	r2, r8
   89cb6:	47b8      	blx	r7
   89cb8:	1c43      	adds	r3, r0, #1
   89cba:	d103      	bne.n	89cc4 <_wcrtomb_r+0x40>
   89cbc:	2100      	movs	r1, #0
   89cbe:	228a      	movs	r2, #138	; 0x8a
   89cc0:	6029      	str	r1, [r5, #0]
   89cc2:	6022      	str	r2, [r4, #0]
   89cc4:	b006      	add	sp, #24
   89cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89cca:	bf00      	nop
   89ccc:	200708fc 	.word	0x200708fc

00089cd0 <wcrtomb>:
   89cd0:	b530      	push	{r4, r5, lr}
   89cd2:	4613      	mov	r3, r2
   89cd4:	4a04      	ldr	r2, [pc, #16]	; (89ce8 <wcrtomb+0x18>)
   89cd6:	4605      	mov	r5, r0
   89cd8:	460c      	mov	r4, r1
   89cda:	6810      	ldr	r0, [r2, #0]
   89cdc:	4629      	mov	r1, r5
   89cde:	4622      	mov	r2, r4
   89ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   89ce4:	f7ff bfce 	b.w	89c84 <_wcrtomb_r>
   89ce8:	20070010 	.word	0x20070010

00089cec <__ascii_wctomb>:
   89cec:	b149      	cbz	r1, 89d02 <__ascii_wctomb+0x16>
   89cee:	2aff      	cmp	r2, #255	; 0xff
   89cf0:	d904      	bls.n	89cfc <__ascii_wctomb+0x10>
   89cf2:	238a      	movs	r3, #138	; 0x8a
   89cf4:	6003      	str	r3, [r0, #0]
   89cf6:	f04f 30ff 	mov.w	r0, #4294967295
   89cfa:	4770      	bx	lr
   89cfc:	700a      	strb	r2, [r1, #0]
   89cfe:	2001      	movs	r0, #1
   89d00:	4770      	bx	lr
   89d02:	4608      	mov	r0, r1
   89d04:	4770      	bx	lr

00089d06 <_wctomb_r>:
   89d06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   89d0a:	4698      	mov	r8, r3
   89d0c:	4b07      	ldr	r3, [pc, #28]	; (89d2c <_wctomb_r+0x26>)
   89d0e:	4605      	mov	r5, r0
   89d10:	460f      	mov	r7, r1
   89d12:	4616      	mov	r6, r2
   89d14:	681c      	ldr	r4, [r3, #0]
   89d16:	f7fd fdc5 	bl	878a4 <__locale_charset>
   89d1a:	f8cd 8000 	str.w	r8, [sp]
   89d1e:	4603      	mov	r3, r0
   89d20:	4639      	mov	r1, r7
   89d22:	4628      	mov	r0, r5
   89d24:	4632      	mov	r2, r6
   89d26:	47a0      	blx	r4
   89d28:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   89d2c:	200708fc 	.word	0x200708fc

00089d30 <_write_r>:
   89d30:	b538      	push	{r3, r4, r5, lr}
   89d32:	4c07      	ldr	r4, [pc, #28]	; (89d50 <_write_r+0x20>)
   89d34:	4605      	mov	r5, r0
   89d36:	2000      	movs	r0, #0
   89d38:	6020      	str	r0, [r4, #0]
   89d3a:	4608      	mov	r0, r1
   89d3c:	4611      	mov	r1, r2
   89d3e:	461a      	mov	r2, r3
   89d40:	f7f6 fde8 	bl	80914 <_write>
   89d44:	1c43      	adds	r3, r0, #1
   89d46:	d102      	bne.n	89d4e <_write_r+0x1e>
   89d48:	6823      	ldr	r3, [r4, #0]
   89d4a:	b103      	cbz	r3, 89d4e <_write_r+0x1e>
   89d4c:	602b      	str	r3, [r5, #0]
   89d4e:	bd38      	pop	{r3, r4, r5, pc}
   89d50:	2007ac78 	.word	0x2007ac78

00089d54 <_calloc_r>:
   89d54:	b510      	push	{r4, lr}
   89d56:	4351      	muls	r1, r2
   89d58:	f7fd fe42 	bl	879e0 <_malloc_r>
   89d5c:	4604      	mov	r4, r0
   89d5e:	b320      	cbz	r0, 89daa <_calloc_r+0x56>
   89d60:	f850 2c04 	ldr.w	r2, [r0, #-4]
   89d64:	f022 0103 	bic.w	r1, r2, #3
   89d68:	1f0a      	subs	r2, r1, #4
   89d6a:	2a24      	cmp	r2, #36	; 0x24
   89d6c:	d81a      	bhi.n	89da4 <_calloc_r+0x50>
   89d6e:	2a13      	cmp	r2, #19
   89d70:	d912      	bls.n	89d98 <_calloc_r+0x44>
   89d72:	2300      	movs	r3, #0
   89d74:	2a1b      	cmp	r2, #27
   89d76:	6003      	str	r3, [r0, #0]
   89d78:	6043      	str	r3, [r0, #4]
   89d7a:	d802      	bhi.n	89d82 <_calloc_r+0x2e>
   89d7c:	f100 0308 	add.w	r3, r0, #8
   89d80:	e00b      	b.n	89d9a <_calloc_r+0x46>
   89d82:	2a24      	cmp	r2, #36	; 0x24
   89d84:	6083      	str	r3, [r0, #8]
   89d86:	60c3      	str	r3, [r0, #12]
   89d88:	bf05      	ittet	eq
   89d8a:	6103      	streq	r3, [r0, #16]
   89d8c:	6143      	streq	r3, [r0, #20]
   89d8e:	f100 0310 	addne.w	r3, r0, #16
   89d92:	f100 0318 	addeq.w	r3, r0, #24
   89d96:	e000      	b.n	89d9a <_calloc_r+0x46>
   89d98:	4603      	mov	r3, r0
   89d9a:	2000      	movs	r0, #0
   89d9c:	6018      	str	r0, [r3, #0]
   89d9e:	6058      	str	r0, [r3, #4]
   89da0:	6098      	str	r0, [r3, #8]
   89da2:	e002      	b.n	89daa <_calloc_r+0x56>
   89da4:	2100      	movs	r1, #0
   89da6:	f7fa f8fc 	bl	83fa2 <memset>
   89daa:	4620      	mov	r0, r4
   89dac:	bd10      	pop	{r4, pc}
	...

00089db0 <_close_r>:
   89db0:	b538      	push	{r3, r4, r5, lr}
   89db2:	4c06      	ldr	r4, [pc, #24]	; (89dcc <_close_r+0x1c>)
   89db4:	2300      	movs	r3, #0
   89db6:	4605      	mov	r5, r0
   89db8:	4608      	mov	r0, r1
   89dba:	6023      	str	r3, [r4, #0]
   89dbc:	f7f7 fd52 	bl	81864 <_close>
   89dc0:	1c43      	adds	r3, r0, #1
   89dc2:	d102      	bne.n	89dca <_close_r+0x1a>
   89dc4:	6821      	ldr	r1, [r4, #0]
   89dc6:	b101      	cbz	r1, 89dca <_close_r+0x1a>
   89dc8:	6029      	str	r1, [r5, #0]
   89dca:	bd38      	pop	{r3, r4, r5, pc}
   89dcc:	2007ac78 	.word	0x2007ac78

00089dd0 <_fclose_r>:
   89dd0:	b570      	push	{r4, r5, r6, lr}
   89dd2:	4605      	mov	r5, r0
   89dd4:	460c      	mov	r4, r1
   89dd6:	2900      	cmp	r1, #0
   89dd8:	d039      	beq.n	89e4e <_fclose_r+0x7e>
   89dda:	f7fc fe6b 	bl	86ab4 <__sfp_lock_acquire>
   89dde:	b125      	cbz	r5, 89dea <_fclose_r+0x1a>
   89de0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   89de2:	b913      	cbnz	r3, 89dea <_fclose_r+0x1a>
   89de4:	4628      	mov	r0, r5
   89de6:	f7fc fe01 	bl	869ec <__sinit>
   89dea:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   89dee:	b35e      	cbz	r6, 89e48 <_fclose_r+0x78>
   89df0:	4628      	mov	r0, r5
   89df2:	4621      	mov	r1, r4
   89df4:	f7fc fd08 	bl	86808 <_fflush_r>
   89df8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   89dfa:	4606      	mov	r6, r0
   89dfc:	b13a      	cbz	r2, 89e0e <_fclose_r+0x3e>
   89dfe:	4628      	mov	r0, r5
   89e00:	69e1      	ldr	r1, [r4, #28]
   89e02:	4790      	blx	r2
   89e04:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   89e08:	bf28      	it	cs
   89e0a:	f04f 36ff 	movcs.w	r6, #4294967295
   89e0e:	89a0      	ldrh	r0, [r4, #12]
   89e10:	f000 0180 	and.w	r1, r0, #128	; 0x80
   89e14:	b20b      	sxth	r3, r1
   89e16:	b11b      	cbz	r3, 89e20 <_fclose_r+0x50>
   89e18:	4628      	mov	r0, r5
   89e1a:	6921      	ldr	r1, [r4, #16]
   89e1c:	f7fc ff82 	bl	86d24 <_free_r>
   89e20:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89e22:	b141      	cbz	r1, 89e36 <_fclose_r+0x66>
   89e24:	f104 0240 	add.w	r2, r4, #64	; 0x40
   89e28:	4291      	cmp	r1, r2
   89e2a:	d002      	beq.n	89e32 <_fclose_r+0x62>
   89e2c:	4628      	mov	r0, r5
   89e2e:	f7fc ff79 	bl	86d24 <_free_r>
   89e32:	2000      	movs	r0, #0
   89e34:	6320      	str	r0, [r4, #48]	; 0x30
   89e36:	6c61      	ldr	r1, [r4, #68]	; 0x44
   89e38:	b121      	cbz	r1, 89e44 <_fclose_r+0x74>
   89e3a:	4628      	mov	r0, r5
   89e3c:	f7fc ff72 	bl	86d24 <_free_r>
   89e40:	2100      	movs	r1, #0
   89e42:	6461      	str	r1, [r4, #68]	; 0x44
   89e44:	2300      	movs	r3, #0
   89e46:	81a3      	strh	r3, [r4, #12]
   89e48:	f7fc fe35 	bl	86ab6 <__sfp_lock_release>
   89e4c:	e000      	b.n	89e50 <_fclose_r+0x80>
   89e4e:	460e      	mov	r6, r1
   89e50:	4630      	mov	r0, r6
   89e52:	bd70      	pop	{r4, r5, r6, pc}

00089e54 <fclose>:
   89e54:	4b02      	ldr	r3, [pc, #8]	; (89e60 <fclose+0xc>)
   89e56:	4601      	mov	r1, r0
   89e58:	6818      	ldr	r0, [r3, #0]
   89e5a:	f7ff bfb9 	b.w	89dd0 <_fclose_r>
   89e5e:	bf00      	nop
   89e60:	20070010 	.word	0x20070010

00089e64 <_fstat_r>:
   89e64:	b538      	push	{r3, r4, r5, lr}
   89e66:	4c07      	ldr	r4, [pc, #28]	; (89e84 <_fstat_r+0x20>)
   89e68:	2300      	movs	r3, #0
   89e6a:	4605      	mov	r5, r0
   89e6c:	4608      	mov	r0, r1
   89e6e:	4611      	mov	r1, r2
   89e70:	6023      	str	r3, [r4, #0]
   89e72:	f7f7 fcfb 	bl	8186c <_fstat>
   89e76:	1c43      	adds	r3, r0, #1
   89e78:	d102      	bne.n	89e80 <_fstat_r+0x1c>
   89e7a:	6821      	ldr	r1, [r4, #0]
   89e7c:	b101      	cbz	r1, 89e80 <_fstat_r+0x1c>
   89e7e:	6029      	str	r1, [r5, #0]
   89e80:	bd38      	pop	{r3, r4, r5, pc}
   89e82:	bf00      	nop
   89e84:	2007ac78 	.word	0x2007ac78

00089e88 <_isatty_r>:
   89e88:	b538      	push	{r3, r4, r5, lr}
   89e8a:	4c06      	ldr	r4, [pc, #24]	; (89ea4 <_isatty_r+0x1c>)
   89e8c:	2300      	movs	r3, #0
   89e8e:	4605      	mov	r5, r0
   89e90:	4608      	mov	r0, r1
   89e92:	6023      	str	r3, [r4, #0]
   89e94:	f7f7 fcf0 	bl	81878 <_isatty>
   89e98:	1c43      	adds	r3, r0, #1
   89e9a:	d102      	bne.n	89ea2 <_isatty_r+0x1a>
   89e9c:	6821      	ldr	r1, [r4, #0]
   89e9e:	b101      	cbz	r1, 89ea2 <_isatty_r+0x1a>
   89ea0:	6029      	str	r1, [r5, #0]
   89ea2:	bd38      	pop	{r3, r4, r5, pc}
   89ea4:	2007ac78 	.word	0x2007ac78

00089ea8 <_lseek_r>:
   89ea8:	b538      	push	{r3, r4, r5, lr}
   89eaa:	4c07      	ldr	r4, [pc, #28]	; (89ec8 <_lseek_r+0x20>)
   89eac:	4605      	mov	r5, r0
   89eae:	2000      	movs	r0, #0
   89eb0:	6020      	str	r0, [r4, #0]
   89eb2:	4608      	mov	r0, r1
   89eb4:	4611      	mov	r1, r2
   89eb6:	461a      	mov	r2, r3
   89eb8:	f7f7 fce2 	bl	81880 <_lseek>
   89ebc:	1c43      	adds	r3, r0, #1
   89ebe:	d102      	bne.n	89ec6 <_lseek_r+0x1e>
   89ec0:	6823      	ldr	r3, [r4, #0]
   89ec2:	b103      	cbz	r3, 89ec6 <_lseek_r+0x1e>
   89ec4:	602b      	str	r3, [r5, #0]
   89ec6:	bd38      	pop	{r3, r4, r5, pc}
   89ec8:	2007ac78 	.word	0x2007ac78

00089ecc <_read_r>:
   89ecc:	b538      	push	{r3, r4, r5, lr}
   89ece:	4c07      	ldr	r4, [pc, #28]	; (89eec <_read_r+0x20>)
   89ed0:	4605      	mov	r5, r0
   89ed2:	2000      	movs	r0, #0
   89ed4:	6020      	str	r0, [r4, #0]
   89ed6:	4608      	mov	r0, r1
   89ed8:	4611      	mov	r1, r2
   89eda:	461a      	mov	r2, r3
   89edc:	f7f6 fcd6 	bl	8088c <_read>
   89ee0:	1c43      	adds	r3, r0, #1
   89ee2:	d102      	bne.n	89eea <_read_r+0x1e>
   89ee4:	6823      	ldr	r3, [r4, #0]
   89ee6:	b103      	cbz	r3, 89eea <_read_r+0x1e>
   89ee8:	602b      	str	r3, [r5, #0]
   89eea:	bd38      	pop	{r3, r4, r5, pc}
   89eec:	2007ac78 	.word	0x2007ac78

00089ef0 <__gedf2>:
   89ef0:	f04f 3cff 	mov.w	ip, #4294967295
   89ef4:	e006      	b.n	89f04 <__cmpdf2+0x4>
   89ef6:	bf00      	nop

00089ef8 <__ledf2>:
   89ef8:	f04f 0c01 	mov.w	ip, #1
   89efc:	e002      	b.n	89f04 <__cmpdf2+0x4>
   89efe:	bf00      	nop

00089f00 <__cmpdf2>:
   89f00:	f04f 0c01 	mov.w	ip, #1
   89f04:	f84d cd04 	str.w	ip, [sp, #-4]!
   89f08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89f0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89f10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89f14:	bf18      	it	ne
   89f16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   89f1a:	d01b      	beq.n	89f54 <__cmpdf2+0x54>
   89f1c:	b001      	add	sp, #4
   89f1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   89f22:	bf0c      	ite	eq
   89f24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   89f28:	ea91 0f03 	teqne	r1, r3
   89f2c:	bf02      	ittt	eq
   89f2e:	ea90 0f02 	teqeq	r0, r2
   89f32:	2000      	moveq	r0, #0
   89f34:	4770      	bxeq	lr
   89f36:	f110 0f00 	cmn.w	r0, #0
   89f3a:	ea91 0f03 	teq	r1, r3
   89f3e:	bf58      	it	pl
   89f40:	4299      	cmppl	r1, r3
   89f42:	bf08      	it	eq
   89f44:	4290      	cmpeq	r0, r2
   89f46:	bf2c      	ite	cs
   89f48:	17d8      	asrcs	r0, r3, #31
   89f4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   89f4e:	f040 0001 	orr.w	r0, r0, #1
   89f52:	4770      	bx	lr
   89f54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89f5c:	d102      	bne.n	89f64 <__cmpdf2+0x64>
   89f5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   89f62:	d107      	bne.n	89f74 <__cmpdf2+0x74>
   89f64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89f68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89f6c:	d1d6      	bne.n	89f1c <__cmpdf2+0x1c>
   89f6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   89f72:	d0d3      	beq.n	89f1c <__cmpdf2+0x1c>
   89f74:	f85d 0b04 	ldr.w	r0, [sp], #4
   89f78:	4770      	bx	lr
   89f7a:	bf00      	nop

00089f7c <__aeabi_cdrcmple>:
   89f7c:	4684      	mov	ip, r0
   89f7e:	4610      	mov	r0, r2
   89f80:	4662      	mov	r2, ip
   89f82:	468c      	mov	ip, r1
   89f84:	4619      	mov	r1, r3
   89f86:	4663      	mov	r3, ip
   89f88:	e000      	b.n	89f8c <__aeabi_cdcmpeq>
   89f8a:	bf00      	nop

00089f8c <__aeabi_cdcmpeq>:
   89f8c:	b501      	push	{r0, lr}
   89f8e:	f7ff ffb7 	bl	89f00 <__cmpdf2>
   89f92:	2800      	cmp	r0, #0
   89f94:	bf48      	it	mi
   89f96:	f110 0f00 	cmnmi.w	r0, #0
   89f9a:	bd01      	pop	{r0, pc}

00089f9c <__aeabi_dcmpeq>:
   89f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   89fa0:	f7ff fff4 	bl	89f8c <__aeabi_cdcmpeq>
   89fa4:	bf0c      	ite	eq
   89fa6:	2001      	moveq	r0, #1
   89fa8:	2000      	movne	r0, #0
   89faa:	f85d fb08 	ldr.w	pc, [sp], #8
   89fae:	bf00      	nop

00089fb0 <__aeabi_dcmplt>:
   89fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   89fb4:	f7ff ffea 	bl	89f8c <__aeabi_cdcmpeq>
   89fb8:	bf34      	ite	cc
   89fba:	2001      	movcc	r0, #1
   89fbc:	2000      	movcs	r0, #0
   89fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   89fc2:	bf00      	nop

00089fc4 <__aeabi_dcmple>:
   89fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   89fc8:	f7ff ffe0 	bl	89f8c <__aeabi_cdcmpeq>
   89fcc:	bf94      	ite	ls
   89fce:	2001      	movls	r0, #1
   89fd0:	2000      	movhi	r0, #0
   89fd2:	f85d fb08 	ldr.w	pc, [sp], #8
   89fd6:	bf00      	nop

00089fd8 <__aeabi_dcmpge>:
   89fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   89fdc:	f7ff ffce 	bl	89f7c <__aeabi_cdrcmple>
   89fe0:	bf94      	ite	ls
   89fe2:	2001      	movls	r0, #1
   89fe4:	2000      	movhi	r0, #0
   89fe6:	f85d fb08 	ldr.w	pc, [sp], #8
   89fea:	bf00      	nop

00089fec <__aeabi_dcmpgt>:
   89fec:	f84d ed08 	str.w	lr, [sp, #-8]!
   89ff0:	f7ff ffc4 	bl	89f7c <__aeabi_cdrcmple>
   89ff4:	bf34      	ite	cc
   89ff6:	2001      	movcc	r0, #1
   89ff8:	2000      	movcs	r0, #0
   89ffa:	f85d fb08 	ldr.w	pc, [sp], #8
   89ffe:	bf00      	nop

0008a000 <__aeabi_d2iz>:
   8a000:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8a004:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8a008:	d215      	bcs.n	8a036 <__aeabi_d2iz+0x36>
   8a00a:	d511      	bpl.n	8a030 <__aeabi_d2iz+0x30>
   8a00c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8a010:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8a014:	d912      	bls.n	8a03c <__aeabi_d2iz+0x3c>
   8a016:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8a01a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8a01e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8a022:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a026:	fa23 f002 	lsr.w	r0, r3, r2
   8a02a:	bf18      	it	ne
   8a02c:	4240      	negne	r0, r0
   8a02e:	4770      	bx	lr
   8a030:	f04f 0000 	mov.w	r0, #0
   8a034:	4770      	bx	lr
   8a036:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8a03a:	d105      	bne.n	8a048 <__aeabi_d2iz+0x48>
   8a03c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8a040:	bf08      	it	eq
   8a042:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8a046:	4770      	bx	lr
   8a048:	f04f 0000 	mov.w	r0, #0
   8a04c:	4770      	bx	lr
   8a04e:	bf00      	nop

0008a050 <__aeabi_d2f>:
   8a050:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8a054:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   8a058:	bf24      	itt	cs
   8a05a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   8a05e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   8a062:	d90d      	bls.n	8a080 <__aeabi_d2f+0x30>
   8a064:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8a068:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   8a06c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   8a070:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   8a074:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   8a078:	bf08      	it	eq
   8a07a:	f020 0001 	biceq.w	r0, r0, #1
   8a07e:	4770      	bx	lr
   8a080:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   8a084:	d121      	bne.n	8a0ca <__aeabi_d2f+0x7a>
   8a086:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8a08a:	bfbc      	itt	lt
   8a08c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   8a090:	4770      	bxlt	lr
   8a092:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a096:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8a09a:	f1c2 0218 	rsb	r2, r2, #24
   8a09e:	f1c2 0c20 	rsb	ip, r2, #32
   8a0a2:	fa10 f30c 	lsls.w	r3, r0, ip
   8a0a6:	fa20 f002 	lsr.w	r0, r0, r2
   8a0aa:	bf18      	it	ne
   8a0ac:	f040 0001 	orrne.w	r0, r0, #1
   8a0b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8a0b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   8a0b8:	fa03 fc0c 	lsl.w	ip, r3, ip
   8a0bc:	ea40 000c 	orr.w	r0, r0, ip
   8a0c0:	fa23 f302 	lsr.w	r3, r3, r2
   8a0c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8a0c8:	e7cc      	b.n	8a064 <__aeabi_d2f+0x14>
   8a0ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8a0ce:	d107      	bne.n	8a0e0 <__aeabi_d2f+0x90>
   8a0d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   8a0d4:	bf1e      	ittt	ne
   8a0d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8a0da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8a0de:	4770      	bxne	lr
   8a0e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   8a0e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8a0e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8a0ec:	4770      	bx	lr
   8a0ee:	bf00      	nop

0008a0f0 <__aeabi_uldivmod>:
   8a0f0:	b94b      	cbnz	r3, 8a106 <__aeabi_uldivmod+0x16>
   8a0f2:	b942      	cbnz	r2, 8a106 <__aeabi_uldivmod+0x16>
   8a0f4:	2900      	cmp	r1, #0
   8a0f6:	bf08      	it	eq
   8a0f8:	2800      	cmpeq	r0, #0
   8a0fa:	d002      	beq.n	8a102 <__aeabi_uldivmod+0x12>
   8a0fc:	f04f 31ff 	mov.w	r1, #4294967295
   8a100:	4608      	mov	r0, r1
   8a102:	f000 b83b 	b.w	8a17c <__aeabi_idiv0>
   8a106:	b082      	sub	sp, #8
   8a108:	46ec      	mov	ip, sp
   8a10a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8a10e:	f000 f81d 	bl	8a14c <__gnu_uldivmod_helper>
   8a112:	f8dd e004 	ldr.w	lr, [sp, #4]
   8a116:	b002      	add	sp, #8
   8a118:	bc0c      	pop	{r2, r3}
   8a11a:	4770      	bx	lr

0008a11c <__gnu_ldivmod_helper>:
   8a11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a120:	4616      	mov	r6, r2
   8a122:	4698      	mov	r8, r3
   8a124:	4604      	mov	r4, r0
   8a126:	460d      	mov	r5, r1
   8a128:	f000 f82a 	bl	8a180 <__divdi3>
   8a12c:	fb06 fc01 	mul.w	ip, r6, r1
   8a130:	fba6 2300 	umull	r2, r3, r6, r0
   8a134:	fb00 c708 	mla	r7, r0, r8, ip
   8a138:	18fb      	adds	r3, r7, r3
   8a13a:	1aa2      	subs	r2, r4, r2
   8a13c:	eb65 0303 	sbc.w	r3, r5, r3
   8a140:	9c06      	ldr	r4, [sp, #24]
   8a142:	e9c4 2300 	strd	r2, r3, [r4]
   8a146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a14a:	bf00      	nop

0008a14c <__gnu_uldivmod_helper>:
   8a14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a150:	4690      	mov	r8, r2
   8a152:	4606      	mov	r6, r0
   8a154:	460f      	mov	r7, r1
   8a156:	461d      	mov	r5, r3
   8a158:	f000 f970 	bl	8a43c <__udivdi3>
   8a15c:	fb00 f305 	mul.w	r3, r0, r5
   8a160:	fba0 4508 	umull	r4, r5, r0, r8
   8a164:	fb08 3801 	mla	r8, r8, r1, r3
   8a168:	9b06      	ldr	r3, [sp, #24]
   8a16a:	4445      	add	r5, r8
   8a16c:	1b34      	subs	r4, r6, r4
   8a16e:	eb67 0505 	sbc.w	r5, r7, r5
   8a172:	e9c3 4500 	strd	r4, r5, [r3]
   8a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a17a:	bf00      	nop

0008a17c <__aeabi_idiv0>:
   8a17c:	4770      	bx	lr
   8a17e:	bf00      	nop

0008a180 <__divdi3>:
   8a180:	2900      	cmp	r1, #0
   8a182:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8a186:	461d      	mov	r5, r3
   8a188:	f2c0 809d 	blt.w	8a2c6 <__divdi3+0x146>
   8a18c:	2400      	movs	r4, #0
   8a18e:	2d00      	cmp	r5, #0
   8a190:	f2c0 8094 	blt.w	8a2bc <__divdi3+0x13c>
   8a194:	4680      	mov	r8, r0
   8a196:	460f      	mov	r7, r1
   8a198:	4694      	mov	ip, r2
   8a19a:	461e      	mov	r6, r3
   8a19c:	bbe3      	cbnz	r3, 8a218 <__divdi3+0x98>
   8a19e:	428a      	cmp	r2, r1
   8a1a0:	d955      	bls.n	8a24e <__divdi3+0xce>
   8a1a2:	fab2 f782 	clz	r7, r2
   8a1a6:	b147      	cbz	r7, 8a1ba <__divdi3+0x3a>
   8a1a8:	f1c7 0520 	rsb	r5, r7, #32
   8a1ac:	fa20 f605 	lsr.w	r6, r0, r5
   8a1b0:	fa01 f107 	lsl.w	r1, r1, r7
   8a1b4:	40ba      	lsls	r2, r7
   8a1b6:	40b8      	lsls	r0, r7
   8a1b8:	4331      	orrs	r1, r6
   8a1ba:	0c17      	lsrs	r7, r2, #16
   8a1bc:	fbb1 f6f7 	udiv	r6, r1, r7
   8a1c0:	fa1f fc82 	uxth.w	ip, r2
   8a1c4:	fb07 1116 	mls	r1, r7, r6, r1
   8a1c8:	fb0c f506 	mul.w	r5, ip, r6
   8a1cc:	0c03      	lsrs	r3, r0, #16
   8a1ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8a1d2:	429d      	cmp	r5, r3
   8a1d4:	d908      	bls.n	8a1e8 <__divdi3+0x68>
   8a1d6:	1e71      	subs	r1, r6, #1
   8a1d8:	189b      	adds	r3, r3, r2
   8a1da:	f080 8113 	bcs.w	8a404 <__divdi3+0x284>
   8a1de:	429d      	cmp	r5, r3
   8a1e0:	f240 8110 	bls.w	8a404 <__divdi3+0x284>
   8a1e4:	3e02      	subs	r6, #2
   8a1e6:	189b      	adds	r3, r3, r2
   8a1e8:	1b59      	subs	r1, r3, r5
   8a1ea:	fbb1 f5f7 	udiv	r5, r1, r7
   8a1ee:	fb07 1315 	mls	r3, r7, r5, r1
   8a1f2:	fb0c fc05 	mul.w	ip, ip, r5
   8a1f6:	b280      	uxth	r0, r0
   8a1f8:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8a1fc:	458c      	cmp	ip, r1
   8a1fe:	d907      	bls.n	8a210 <__divdi3+0x90>
   8a200:	1e6b      	subs	r3, r5, #1
   8a202:	188a      	adds	r2, r1, r2
   8a204:	f080 8100 	bcs.w	8a408 <__divdi3+0x288>
   8a208:	4594      	cmp	ip, r2
   8a20a:	f240 80fd 	bls.w	8a408 <__divdi3+0x288>
   8a20e:	3d02      	subs	r5, #2
   8a210:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8a214:	2500      	movs	r5, #0
   8a216:	e003      	b.n	8a220 <__divdi3+0xa0>
   8a218:	428b      	cmp	r3, r1
   8a21a:	d90c      	bls.n	8a236 <__divdi3+0xb6>
   8a21c:	2500      	movs	r5, #0
   8a21e:	4629      	mov	r1, r5
   8a220:	460a      	mov	r2, r1
   8a222:	462b      	mov	r3, r5
   8a224:	b114      	cbz	r4, 8a22c <__divdi3+0xac>
   8a226:	4252      	negs	r2, r2
   8a228:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8a22c:	4610      	mov	r0, r2
   8a22e:	4619      	mov	r1, r3
   8a230:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8a234:	4770      	bx	lr
   8a236:	fab3 f583 	clz	r5, r3
   8a23a:	2d00      	cmp	r5, #0
   8a23c:	f040 8087 	bne.w	8a34e <__divdi3+0x1ce>
   8a240:	428b      	cmp	r3, r1
   8a242:	d301      	bcc.n	8a248 <__divdi3+0xc8>
   8a244:	4282      	cmp	r2, r0
   8a246:	d8ea      	bhi.n	8a21e <__divdi3+0x9e>
   8a248:	2500      	movs	r5, #0
   8a24a:	2101      	movs	r1, #1
   8a24c:	e7e8      	b.n	8a220 <__divdi3+0xa0>
   8a24e:	b912      	cbnz	r2, 8a256 <__divdi3+0xd6>
   8a250:	2601      	movs	r6, #1
   8a252:	fbb6 f2f2 	udiv	r2, r6, r2
   8a256:	fab2 f682 	clz	r6, r2
   8a25a:	2e00      	cmp	r6, #0
   8a25c:	d139      	bne.n	8a2d2 <__divdi3+0x152>
   8a25e:	1a8e      	subs	r6, r1, r2
   8a260:	0c13      	lsrs	r3, r2, #16
   8a262:	fa1f fc82 	uxth.w	ip, r2
   8a266:	2501      	movs	r5, #1
   8a268:	fbb6 f7f3 	udiv	r7, r6, r3
   8a26c:	fb03 6117 	mls	r1, r3, r7, r6
   8a270:	fb0c f807 	mul.w	r8, ip, r7
   8a274:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8a278:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8a27c:	45b0      	cmp	r8, r6
   8a27e:	d906      	bls.n	8a28e <__divdi3+0x10e>
   8a280:	1e79      	subs	r1, r7, #1
   8a282:	18b6      	adds	r6, r6, r2
   8a284:	d202      	bcs.n	8a28c <__divdi3+0x10c>
   8a286:	45b0      	cmp	r8, r6
   8a288:	f200 80d3 	bhi.w	8a432 <__divdi3+0x2b2>
   8a28c:	460f      	mov	r7, r1
   8a28e:	ebc8 0606 	rsb	r6, r8, r6
   8a292:	fbb6 f1f3 	udiv	r1, r6, r3
   8a296:	fb03 6311 	mls	r3, r3, r1, r6
   8a29a:	fb0c fc01 	mul.w	ip, ip, r1
   8a29e:	b280      	uxth	r0, r0
   8a2a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8a2a4:	459c      	cmp	ip, r3
   8a2a6:	d906      	bls.n	8a2b6 <__divdi3+0x136>
   8a2a8:	1e4e      	subs	r6, r1, #1
   8a2aa:	189a      	adds	r2, r3, r2
   8a2ac:	d202      	bcs.n	8a2b4 <__divdi3+0x134>
   8a2ae:	4594      	cmp	ip, r2
   8a2b0:	f200 80c2 	bhi.w	8a438 <__divdi3+0x2b8>
   8a2b4:	4631      	mov	r1, r6
   8a2b6:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8a2ba:	e7b1      	b.n	8a220 <__divdi3+0xa0>
   8a2bc:	43e4      	mvns	r4, r4
   8a2be:	4252      	negs	r2, r2
   8a2c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8a2c4:	e766      	b.n	8a194 <__divdi3+0x14>
   8a2c6:	4240      	negs	r0, r0
   8a2c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a2cc:	f04f 34ff 	mov.w	r4, #4294967295
   8a2d0:	e75d      	b.n	8a18e <__divdi3+0xe>
   8a2d2:	40b2      	lsls	r2, r6
   8a2d4:	f1c6 0920 	rsb	r9, r6, #32
   8a2d8:	fa21 f709 	lsr.w	r7, r1, r9
   8a2dc:	fa20 f909 	lsr.w	r9, r0, r9
   8a2e0:	fa01 f106 	lsl.w	r1, r1, r6
   8a2e4:	0c13      	lsrs	r3, r2, #16
   8a2e6:	fbb7 f8f3 	udiv	r8, r7, r3
   8a2ea:	fa1f fc82 	uxth.w	ip, r2
   8a2ee:	fb03 7718 	mls	r7, r3, r8, r7
   8a2f2:	fb0c f508 	mul.w	r5, ip, r8
   8a2f6:	ea49 0901 	orr.w	r9, r9, r1
   8a2fa:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8a2fe:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8a302:	40b0      	lsls	r0, r6
   8a304:	42bd      	cmp	r5, r7
   8a306:	d90a      	bls.n	8a31e <__divdi3+0x19e>
   8a308:	18bf      	adds	r7, r7, r2
   8a30a:	f108 36ff 	add.w	r6, r8, #4294967295
   8a30e:	f080 808e 	bcs.w	8a42e <__divdi3+0x2ae>
   8a312:	42bd      	cmp	r5, r7
   8a314:	f240 808b 	bls.w	8a42e <__divdi3+0x2ae>
   8a318:	f1a8 0802 	sub.w	r8, r8, #2
   8a31c:	18bf      	adds	r7, r7, r2
   8a31e:	1b79      	subs	r1, r7, r5
   8a320:	fbb1 f5f3 	udiv	r5, r1, r3
   8a324:	fb03 1715 	mls	r7, r3, r5, r1
   8a328:	fb0c f605 	mul.w	r6, ip, r5
   8a32c:	fa1f f989 	uxth.w	r9, r9
   8a330:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8a334:	428e      	cmp	r6, r1
   8a336:	d906      	bls.n	8a346 <__divdi3+0x1c6>
   8a338:	1e6f      	subs	r7, r5, #1
   8a33a:	1889      	adds	r1, r1, r2
   8a33c:	d271      	bcs.n	8a422 <__divdi3+0x2a2>
   8a33e:	428e      	cmp	r6, r1
   8a340:	d96f      	bls.n	8a422 <__divdi3+0x2a2>
   8a342:	3d02      	subs	r5, #2
   8a344:	1889      	adds	r1, r1, r2
   8a346:	1b8e      	subs	r6, r1, r6
   8a348:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8a34c:	e78c      	b.n	8a268 <__divdi3+0xe8>
   8a34e:	f1c5 0120 	rsb	r1, r5, #32
   8a352:	fa22 f301 	lsr.w	r3, r2, r1
   8a356:	fa06 f605 	lsl.w	r6, r6, r5
   8a35a:	fa27 f201 	lsr.w	r2, r7, r1
   8a35e:	fa07 f705 	lsl.w	r7, r7, r5
   8a362:	fa20 f101 	lsr.w	r1, r0, r1
   8a366:	431e      	orrs	r6, r3
   8a368:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8a36c:	fbb2 f8f9 	udiv	r8, r2, r9
   8a370:	fa1f fa86 	uxth.w	sl, r6
   8a374:	fb09 2218 	mls	r2, r9, r8, r2
   8a378:	fb0a fb08 	mul.w	fp, sl, r8
   8a37c:	430f      	orrs	r7, r1
   8a37e:	0c3b      	lsrs	r3, r7, #16
   8a380:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8a384:	4593      	cmp	fp, r2
   8a386:	fa0c fc05 	lsl.w	ip, ip, r5
   8a38a:	d908      	bls.n	8a39e <__divdi3+0x21e>
   8a38c:	1992      	adds	r2, r2, r6
   8a38e:	f108 31ff 	add.w	r1, r8, #4294967295
   8a392:	d24a      	bcs.n	8a42a <__divdi3+0x2aa>
   8a394:	4593      	cmp	fp, r2
   8a396:	d948      	bls.n	8a42a <__divdi3+0x2aa>
   8a398:	f1a8 0802 	sub.w	r8, r8, #2
   8a39c:	1992      	adds	r2, r2, r6
   8a39e:	ebcb 0302 	rsb	r3, fp, r2
   8a3a2:	fbb3 f1f9 	udiv	r1, r3, r9
   8a3a6:	fb09 3211 	mls	r2, r9, r1, r3
   8a3aa:	fb0a fa01 	mul.w	sl, sl, r1
   8a3ae:	b2bf      	uxth	r7, r7
   8a3b0:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8a3b4:	459a      	cmp	sl, r3
   8a3b6:	d906      	bls.n	8a3c6 <__divdi3+0x246>
   8a3b8:	1e4a      	subs	r2, r1, #1
   8a3ba:	199b      	adds	r3, r3, r6
   8a3bc:	d233      	bcs.n	8a426 <__divdi3+0x2a6>
   8a3be:	459a      	cmp	sl, r3
   8a3c0:	d931      	bls.n	8a426 <__divdi3+0x2a6>
   8a3c2:	3902      	subs	r1, #2
   8a3c4:	199b      	adds	r3, r3, r6
   8a3c6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8a3ca:	0c0f      	lsrs	r7, r1, #16
   8a3cc:	fa1f f88c 	uxth.w	r8, ip
   8a3d0:	fb08 f607 	mul.w	r6, r8, r7
   8a3d4:	b28a      	uxth	r2, r1
   8a3d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8a3da:	fb08 f802 	mul.w	r8, r8, r2
   8a3de:	fb0c 6202 	mla	r2, ip, r2, r6
   8a3e2:	fb0c fc07 	mul.w	ip, ip, r7
   8a3e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8a3ea:	4296      	cmp	r6, r2
   8a3ec:	bf88      	it	hi
   8a3ee:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8a3f2:	ebca 0303 	rsb	r3, sl, r3
   8a3f6:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8a3fa:	4563      	cmp	r3, ip
   8a3fc:	d30e      	bcc.n	8a41c <__divdi3+0x29c>
   8a3fe:	d005      	beq.n	8a40c <__divdi3+0x28c>
   8a400:	2500      	movs	r5, #0
   8a402:	e70d      	b.n	8a220 <__divdi3+0xa0>
   8a404:	460e      	mov	r6, r1
   8a406:	e6ef      	b.n	8a1e8 <__divdi3+0x68>
   8a408:	461d      	mov	r5, r3
   8a40a:	e701      	b.n	8a210 <__divdi3+0x90>
   8a40c:	fa00 f005 	lsl.w	r0, r0, r5
   8a410:	fa1f f888 	uxth.w	r8, r8
   8a414:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8a418:	42a8      	cmp	r0, r5
   8a41a:	d2f1      	bcs.n	8a400 <__divdi3+0x280>
   8a41c:	3901      	subs	r1, #1
   8a41e:	2500      	movs	r5, #0
   8a420:	e6fe      	b.n	8a220 <__divdi3+0xa0>
   8a422:	463d      	mov	r5, r7
   8a424:	e78f      	b.n	8a346 <__divdi3+0x1c6>
   8a426:	4611      	mov	r1, r2
   8a428:	e7cd      	b.n	8a3c6 <__divdi3+0x246>
   8a42a:	4688      	mov	r8, r1
   8a42c:	e7b7      	b.n	8a39e <__divdi3+0x21e>
   8a42e:	46b0      	mov	r8, r6
   8a430:	e775      	b.n	8a31e <__divdi3+0x19e>
   8a432:	3f02      	subs	r7, #2
   8a434:	18b6      	adds	r6, r6, r2
   8a436:	e72a      	b.n	8a28e <__divdi3+0x10e>
   8a438:	3902      	subs	r1, #2
   8a43a:	e73c      	b.n	8a2b6 <__divdi3+0x136>

0008a43c <__udivdi3>:
   8a43c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8a440:	4614      	mov	r4, r2
   8a442:	4605      	mov	r5, r0
   8a444:	460e      	mov	r6, r1
   8a446:	2b00      	cmp	r3, #0
   8a448:	d13d      	bne.n	8a4c6 <__udivdi3+0x8a>
   8a44a:	428a      	cmp	r2, r1
   8a44c:	d949      	bls.n	8a4e2 <__udivdi3+0xa6>
   8a44e:	fab2 f782 	clz	r7, r2
   8a452:	b147      	cbz	r7, 8a466 <__udivdi3+0x2a>
   8a454:	f1c7 0120 	rsb	r1, r7, #32
   8a458:	fa20 f201 	lsr.w	r2, r0, r1
   8a45c:	fa06 f607 	lsl.w	r6, r6, r7
   8a460:	40bc      	lsls	r4, r7
   8a462:	40bd      	lsls	r5, r7
   8a464:	4316      	orrs	r6, r2
   8a466:	0c22      	lsrs	r2, r4, #16
   8a468:	fbb6 f0f2 	udiv	r0, r6, r2
   8a46c:	b2a1      	uxth	r1, r4
   8a46e:	fb02 6610 	mls	r6, r2, r0, r6
   8a472:	fb01 f300 	mul.w	r3, r1, r0
   8a476:	0c2f      	lsrs	r7, r5, #16
   8a478:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8a47c:	42b3      	cmp	r3, r6
   8a47e:	d908      	bls.n	8a492 <__udivdi3+0x56>
   8a480:	1e47      	subs	r7, r0, #1
   8a482:	1936      	adds	r6, r6, r4
   8a484:	f080 80fa 	bcs.w	8a67c <__udivdi3+0x240>
   8a488:	42b3      	cmp	r3, r6
   8a48a:	f240 80f7 	bls.w	8a67c <__udivdi3+0x240>
   8a48e:	3802      	subs	r0, #2
   8a490:	1936      	adds	r6, r6, r4
   8a492:	1af6      	subs	r6, r6, r3
   8a494:	fbb6 f3f2 	udiv	r3, r6, r2
   8a498:	fb02 6213 	mls	r2, r2, r3, r6
   8a49c:	fb01 f103 	mul.w	r1, r1, r3
   8a4a0:	b2ad      	uxth	r5, r5
   8a4a2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8a4a6:	4291      	cmp	r1, r2
   8a4a8:	d907      	bls.n	8a4ba <__udivdi3+0x7e>
   8a4aa:	1e5e      	subs	r6, r3, #1
   8a4ac:	1912      	adds	r2, r2, r4
   8a4ae:	f080 80e7 	bcs.w	8a680 <__udivdi3+0x244>
   8a4b2:	4291      	cmp	r1, r2
   8a4b4:	f240 80e4 	bls.w	8a680 <__udivdi3+0x244>
   8a4b8:	3b02      	subs	r3, #2
   8a4ba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8a4be:	2100      	movs	r1, #0
   8a4c0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8a4c4:	4770      	bx	lr
   8a4c6:	428b      	cmp	r3, r1
   8a4c8:	d843      	bhi.n	8a552 <__udivdi3+0x116>
   8a4ca:	fab3 f483 	clz	r4, r3
   8a4ce:	2c00      	cmp	r4, #0
   8a4d0:	d142      	bne.n	8a558 <__udivdi3+0x11c>
   8a4d2:	428b      	cmp	r3, r1
   8a4d4:	d302      	bcc.n	8a4dc <__udivdi3+0xa0>
   8a4d6:	4282      	cmp	r2, r0
   8a4d8:	f200 80e1 	bhi.w	8a69e <__udivdi3+0x262>
   8a4dc:	2100      	movs	r1, #0
   8a4de:	2001      	movs	r0, #1
   8a4e0:	e7ee      	b.n	8a4c0 <__udivdi3+0x84>
   8a4e2:	b912      	cbnz	r2, 8a4ea <__udivdi3+0xae>
   8a4e4:	2701      	movs	r7, #1
   8a4e6:	fbb7 f4f2 	udiv	r4, r7, r2
   8a4ea:	fab4 f284 	clz	r2, r4
   8a4ee:	2a00      	cmp	r2, #0
   8a4f0:	f040 8089 	bne.w	8a606 <__udivdi3+0x1ca>
   8a4f4:	1b0a      	subs	r2, r1, r4
   8a4f6:	0c23      	lsrs	r3, r4, #16
   8a4f8:	b2a7      	uxth	r7, r4
   8a4fa:	2101      	movs	r1, #1
   8a4fc:	fbb2 f6f3 	udiv	r6, r2, r3
   8a500:	fb03 2216 	mls	r2, r3, r6, r2
   8a504:	fb07 f006 	mul.w	r0, r7, r6
   8a508:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8a50c:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8a510:	4290      	cmp	r0, r2
   8a512:	d907      	bls.n	8a524 <__udivdi3+0xe8>
   8a514:	1912      	adds	r2, r2, r4
   8a516:	f106 3cff 	add.w	ip, r6, #4294967295
   8a51a:	d202      	bcs.n	8a522 <__udivdi3+0xe6>
   8a51c:	4290      	cmp	r0, r2
   8a51e:	f200 80d0 	bhi.w	8a6c2 <__udivdi3+0x286>
   8a522:	4666      	mov	r6, ip
   8a524:	1a12      	subs	r2, r2, r0
   8a526:	fbb2 f0f3 	udiv	r0, r2, r3
   8a52a:	fb03 2310 	mls	r3, r3, r0, r2
   8a52e:	fb07 f700 	mul.w	r7, r7, r0
   8a532:	b2ad      	uxth	r5, r5
   8a534:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8a538:	429f      	cmp	r7, r3
   8a53a:	d907      	bls.n	8a54c <__udivdi3+0x110>
   8a53c:	1e42      	subs	r2, r0, #1
   8a53e:	191b      	adds	r3, r3, r4
   8a540:	f080 80a0 	bcs.w	8a684 <__udivdi3+0x248>
   8a544:	429f      	cmp	r7, r3
   8a546:	f240 809d 	bls.w	8a684 <__udivdi3+0x248>
   8a54a:	3802      	subs	r0, #2
   8a54c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8a550:	e7b6      	b.n	8a4c0 <__udivdi3+0x84>
   8a552:	2100      	movs	r1, #0
   8a554:	4608      	mov	r0, r1
   8a556:	e7b3      	b.n	8a4c0 <__udivdi3+0x84>
   8a558:	f1c4 0620 	rsb	r6, r4, #32
   8a55c:	fa22 f706 	lsr.w	r7, r2, r6
   8a560:	fa03 f304 	lsl.w	r3, r3, r4
   8a564:	fa21 f506 	lsr.w	r5, r1, r6
   8a568:	fa01 f104 	lsl.w	r1, r1, r4
   8a56c:	fa20 f606 	lsr.w	r6, r0, r6
   8a570:	433b      	orrs	r3, r7
   8a572:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8a576:	fbb5 f7fc 	udiv	r7, r5, ip
   8a57a:	fa1f f883 	uxth.w	r8, r3
   8a57e:	fb0c 5517 	mls	r5, ip, r7, r5
   8a582:	fb08 f907 	mul.w	r9, r8, r7
   8a586:	ea46 0a01 	orr.w	sl, r6, r1
   8a58a:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8a58e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8a592:	45a9      	cmp	r9, r5
   8a594:	fa02 f204 	lsl.w	r2, r2, r4
   8a598:	d904      	bls.n	8a5a4 <__udivdi3+0x168>
   8a59a:	1e7e      	subs	r6, r7, #1
   8a59c:	18ed      	adds	r5, r5, r3
   8a59e:	f0c0 8081 	bcc.w	8a6a4 <__udivdi3+0x268>
   8a5a2:	4637      	mov	r7, r6
   8a5a4:	ebc9 0105 	rsb	r1, r9, r5
   8a5a8:	fbb1 f6fc 	udiv	r6, r1, ip
   8a5ac:	fb0c 1516 	mls	r5, ip, r6, r1
   8a5b0:	fb08 f806 	mul.w	r8, r8, r6
   8a5b4:	fa1f fa8a 	uxth.w	sl, sl
   8a5b8:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8a5bc:	4588      	cmp	r8, r1
   8a5be:	d903      	bls.n	8a5c8 <__udivdi3+0x18c>
   8a5c0:	1e75      	subs	r5, r6, #1
   8a5c2:	18c9      	adds	r1, r1, r3
   8a5c4:	d374      	bcc.n	8a6b0 <__udivdi3+0x274>
   8a5c6:	462e      	mov	r6, r5
   8a5c8:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8a5cc:	0c37      	lsrs	r7, r6, #16
   8a5ce:	fa1f fc82 	uxth.w	ip, r2
   8a5d2:	fb0c f507 	mul.w	r5, ip, r7
   8a5d6:	0c12      	lsrs	r2, r2, #16
   8a5d8:	b2b3      	uxth	r3, r6
   8a5da:	fb0c fc03 	mul.w	ip, ip, r3
   8a5de:	fb02 5303 	mla	r3, r2, r3, r5
   8a5e2:	fb02 f207 	mul.w	r2, r2, r7
   8a5e6:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8a5ea:	429d      	cmp	r5, r3
   8a5ec:	bf88      	it	hi
   8a5ee:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8a5f2:	ebc8 0101 	rsb	r1, r8, r1
   8a5f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8a5fa:	4291      	cmp	r1, r2
   8a5fc:	d34c      	bcc.n	8a698 <__udivdi3+0x25c>
   8a5fe:	d043      	beq.n	8a688 <__udivdi3+0x24c>
   8a600:	4630      	mov	r0, r6
   8a602:	2100      	movs	r1, #0
   8a604:	e75c      	b.n	8a4c0 <__udivdi3+0x84>
   8a606:	4094      	lsls	r4, r2
   8a608:	f1c2 0520 	rsb	r5, r2, #32
   8a60c:	fa21 f605 	lsr.w	r6, r1, r5
   8a610:	fa20 f505 	lsr.w	r5, r0, r5
   8a614:	fa01 f102 	lsl.w	r1, r1, r2
   8a618:	0c23      	lsrs	r3, r4, #16
   8a61a:	fbb6 fcf3 	udiv	ip, r6, r3
   8a61e:	b2a7      	uxth	r7, r4
   8a620:	fb03 661c 	mls	r6, r3, ip, r6
   8a624:	fb07 f80c 	mul.w	r8, r7, ip
   8a628:	4329      	orrs	r1, r5
   8a62a:	0c0d      	lsrs	r5, r1, #16
   8a62c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8a630:	45b0      	cmp	r8, r6
   8a632:	fa00 f502 	lsl.w	r5, r0, r2
   8a636:	d908      	bls.n	8a64a <__udivdi3+0x20e>
   8a638:	1936      	adds	r6, r6, r4
   8a63a:	f10c 30ff 	add.w	r0, ip, #4294967295
   8a63e:	d23e      	bcs.n	8a6be <__udivdi3+0x282>
   8a640:	45b0      	cmp	r8, r6
   8a642:	d93c      	bls.n	8a6be <__udivdi3+0x282>
   8a644:	f1ac 0c02 	sub.w	ip, ip, #2
   8a648:	1936      	adds	r6, r6, r4
   8a64a:	ebc8 0206 	rsb	r2, r8, r6
   8a64e:	fbb2 f0f3 	udiv	r0, r2, r3
   8a652:	fb03 2610 	mls	r6, r3, r0, r2
   8a656:	fb07 f800 	mul.w	r8, r7, r0
   8a65a:	b289      	uxth	r1, r1
   8a65c:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8a660:	4590      	cmp	r8, r2
   8a662:	d906      	bls.n	8a672 <__udivdi3+0x236>
   8a664:	1e46      	subs	r6, r0, #1
   8a666:	1912      	adds	r2, r2, r4
   8a668:	d227      	bcs.n	8a6ba <__udivdi3+0x27e>
   8a66a:	4590      	cmp	r8, r2
   8a66c:	d925      	bls.n	8a6ba <__udivdi3+0x27e>
   8a66e:	3802      	subs	r0, #2
   8a670:	1912      	adds	r2, r2, r4
   8a672:	ebc8 0202 	rsb	r2, r8, r2
   8a676:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8a67a:	e73f      	b.n	8a4fc <__udivdi3+0xc0>
   8a67c:	4638      	mov	r0, r7
   8a67e:	e708      	b.n	8a492 <__udivdi3+0x56>
   8a680:	4633      	mov	r3, r6
   8a682:	e71a      	b.n	8a4ba <__udivdi3+0x7e>
   8a684:	4610      	mov	r0, r2
   8a686:	e761      	b.n	8a54c <__udivdi3+0x110>
   8a688:	fa00 f004 	lsl.w	r0, r0, r4
   8a68c:	fa1f fc8c 	uxth.w	ip, ip
   8a690:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8a694:	4298      	cmp	r0, r3
   8a696:	d2b3      	bcs.n	8a600 <__udivdi3+0x1c4>
   8a698:	1e70      	subs	r0, r6, #1
   8a69a:	2100      	movs	r1, #0
   8a69c:	e710      	b.n	8a4c0 <__udivdi3+0x84>
   8a69e:	4621      	mov	r1, r4
   8a6a0:	4620      	mov	r0, r4
   8a6a2:	e70d      	b.n	8a4c0 <__udivdi3+0x84>
   8a6a4:	45a9      	cmp	r9, r5
   8a6a6:	f67f af7c 	bls.w	8a5a2 <__udivdi3+0x166>
   8a6aa:	3f02      	subs	r7, #2
   8a6ac:	18ed      	adds	r5, r5, r3
   8a6ae:	e779      	b.n	8a5a4 <__udivdi3+0x168>
   8a6b0:	4588      	cmp	r8, r1
   8a6b2:	d988      	bls.n	8a5c6 <__udivdi3+0x18a>
   8a6b4:	3e02      	subs	r6, #2
   8a6b6:	18c9      	adds	r1, r1, r3
   8a6b8:	e786      	b.n	8a5c8 <__udivdi3+0x18c>
   8a6ba:	4630      	mov	r0, r6
   8a6bc:	e7d9      	b.n	8a672 <__udivdi3+0x236>
   8a6be:	4684      	mov	ip, r0
   8a6c0:	e7c3      	b.n	8a64a <__udivdi3+0x20e>
   8a6c2:	3e02      	subs	r6, #2
   8a6c4:	1912      	adds	r2, r2, r4
   8a6c6:	e72d      	b.n	8a524 <__udivdi3+0xe8>
   8a6c8:	00007325 	.word	0x00007325
   8a6cc:	00006425 	.word	0x00006425
   8a6d0:	000a7325 	.word	0x000a7325
   8a6d4:	00000001 	.word	0x00000001
   8a6d8:	00000002 	.word	0x00000002
   8a6dc:	00000004 	.word	0x00000004
   8a6e0:	00000008 	.word	0x00000008
   8a6e4:	00000010 	.word	0x00000010
   8a6e8:	00000020 	.word	0x00000020
   8a6ec:	00000040 	.word	0x00000040
   8a6f0:	00000080 	.word	0x00000080
   8a6f4:	00000100 	.word	0x00000100
   8a6f8:	00000200 	.word	0x00000200
   8a6fc:	00000400 	.word	0x00000400
   8a700:	09097325 	.word	0x09097325
   8a704:	25096325 	.word	0x25096325
   8a708:	75250975 	.word	0x75250975
   8a70c:	0d752509 	.word	0x0d752509
   8a710:	0000000a 	.word	0x0000000a
   8a714:	454c4449 	.word	0x454c4449
   8a718:	00000000 	.word	0x00000000
   8a71c:	00000a0d 	.word	0x00000a0d
   8a720:	20726d54 	.word	0x20726d54
   8a724:	00637653 	.word	0x00637653
   8a728:	20444950 	.word	0x20444950
   8a72c:	746e6f43 	.word	0x746e6f43
   8a730:	006c6f72 	.word	0x006c6f72
   8a734:	6c696146 	.word	0x6c696146
   8a738:	74206465 	.word	0x74206465
   8a73c:	7263206f 	.word	0x7263206f
   8a740:	65746165 	.word	0x65746165
   8a744:	44495020 	.word	0x44495020
   8a748:	6e6f4320 	.word	0x6e6f4320
   8a74c:	6c6f7274 	.word	0x6c6f7274
   8a750:	73617420 	.word	0x73617420
   8a754:	000a0d6b 	.word	0x000a0d6b
   8a758:	746f6c50 	.word	0x746f6c50
   8a75c:	6c615620 	.word	0x6c615620
   8a760:	00736575 	.word	0x00736575

0008a764 <_global_impure_ptr>:
   8a764:	20070018 00000043 00000000              ... C.......

0008a770 <tinytens>:
   8a770:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   8a780:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   8a790:	64ac6f43 0e180628 6900666e 7974696e     Co.d(...nf.inity
   8a7a0:	006e6100                                .an.

0008a7a4 <blanks.6650>:
   8a7a4:	20202020 20202020 20202020 20202020                     

0008a7b4 <zeroes.6651>:
   8a7b4:	30303030 30303030 30303030 30303030     0000000000000000
   8a7c4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8a7d4:	32313000 36353433 61393837 65646362     .0123456789abcde
   8a7e4:	20200066                                         f.

0008a7e6 <blanks.6678>:
   8a7e6:	20202020 20202020 20202020 20202020                     

0008a7f6 <zeroes.6679>:
   8a7f6:	30303030 30303030 30303030 30303030     0000000000000000

0008a806 <basefix.6143>:
   8a806:	0001000a 00030002 00050004 00070006     ................
   8a816:	00090008 000b000a 000d000c 000f000e     ................
   8a826:	20000010                                         ..

0008a828 <_ctype_>:
   8a828:	20202000 20202020 28282020 20282828     .         ((((( 
   8a838:	20202020 20202020 20202020 20202020                     
   8a848:	10108820 10101010 10101010 10101010      ...............
   8a858:	04040410 04040404 10040404 10101010     ................
   8a868:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8a878:	01010101 01010101 01010101 10101010     ................
   8a888:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8a898:	02020202 02020202 02020202 10101010     ................
   8a8a8:	00000020 00000000 00000000 00000000      ...............
	...
   8a928:	32313000 36353433 00393837 49534f50     .0123456789.POSI
   8a938:	002e0058 00000000                       X.......

0008a940 <p05.5242>:
   8a940:	00000005 00000019 0000007d 00000000     ........}.......

0008a950 <__mprec_tens>:
   8a950:	00000000 3ff00000 00000000 40240000     .......?......$@
   8a960:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8a970:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8a980:	00000000 412e8480 00000000 416312d0     .......A......cA
   8a990:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8a9a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8a9b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8a9c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8a9d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8a9e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8a9f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8aa00:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8aa10:	79d99db4 44ea7843                       ...yCx.D

0008aa18 <__mprec_tinytens>:
   8aa18:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   8aa28:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   8aa38:	64ac6f43 0ac80628                       Co.d(...

0008aa40 <__mprec_bigtens>:
   8aa40:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8aa50:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8aa60:	7f73bf3c 75154fdd                       <.s..O.u

0008aa68 <blanks.6664>:
   8aa68:	20202020 20202020 20202020 20202020                     

0008aa78 <zeroes.6665>:
   8aa78:	30303030 30303030 30303030 30303030     0000000000000000

0008aa88 <_init>:
   8aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa8a:	bf00      	nop
   8aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8aa8e:	bc08      	pop	{r3}
   8aa90:	469e      	mov	lr, r3
   8aa92:	4770      	bx	lr

0008aa94 <__init_array_start>:
   8aa94:	000867f5 	.word	0x000867f5

0008aa98 <__frame_dummy_init_array_entry>:
   8aa98:	0008016d                                m...

0008aa9c <_fini>:
   8aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa9e:	bf00      	nop
   8aaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8aaa2:	bc08      	pop	{r3}
   8aaa4:	469e      	mov	lr, r3
   8aaa6:	4770      	bx	lr

0008aaa8 <__fini_array_start>:
   8aaa8:	00080145 	.word	0x00080145
